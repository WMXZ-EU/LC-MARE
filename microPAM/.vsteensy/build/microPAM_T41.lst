
.vsteensy/build/microPAM_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600024d4 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00012110 l    d  .fini	00000000 .fini
00012114 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20002ac0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60017308 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
600018ec l     F .text.code	00000024 flexspi2_command
60001910 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
0000ad4c l     F .text.itcm	000000a0 endpoint0_receive
2001208c l     O .bss	00000004 endpoint0_notify_mask
0000adec l     F .text.itcm	0000007c schedule_transfer
0000ae68 l     F .text.itcm	00000034 run_callbacks
0000ae9c l     F .text.itcm	0000001c usb_endpoint_config
0000aeb8 l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
20012ac7 l     O .bss	00000001 sof_usage
20012acf l     O .bss	00000001 usb_reboot_timer
200081c0 l     O .bss	00000008 endpoint0_setupdata
20012aa3 l     O .bss	00000008 endpoint0_buffer
20012090 l     O .bss	00000004 endpointN_notify_mask
20012aad l     O .bss	00000008 reply_buffer
00000000 l    df *ABS*	00000000 tempmon.c
200121c4 l     O .bss	00000004 s_hotTemp
200121c0 l     O .bss	00000004 s_hotCount
200121c8 l     O .bss	00000004 s_hot_ROOM
200121cc l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001e58 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
0000c640 l     F .text.itcm	00000016 Print::println(unsigned long, int) [clone .isra.0]
0000c656 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
0000c676 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
0000c67a l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00000000 l    df *ABS*	00000000 analog.c
20012aa2 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20012128 l     O .bss	00000000 object.0
600024c0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
00000188 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
20011d34 l     O .bss	00000004 loop::loopCount
200128a4 l     O .bss	00000002 loop::mxb
200128a6 l     O .bss	00000002 loop::status
200082bc l     O .bss	00000004 guard variable for loop::status
20011d30 l     O .bss	00000004 loop::t0
0000068c l     F .text.itcm	000000f0 _GLOBAL__sub_I_storage
00000000 l    df *ABS*	00000000 Acq.cpp
000008cc l     F .text.itcm	000000b8 acq_isr()
200114cc l     O .bss	00000008 dma
20200000 l     O .bss.dma	00001000 i2s_buffer
00000c30 l     F .text.itcm	00000028 _GLOBAL__sub_I_procCount
00000000 l    df *ABS*	00000000 Filing.cpp
0000299a l     F .text.itcm	00000014 FsBaseFile::sync() [clone .isra.0]
000029ae l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
000029ce l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
000029d6 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
000029f6 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
000029fa l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
20012a28 l     O .bss	00000050 timeStamp()::date_time
200118e4 l     O .bss	00000200 wav_hdr
20011d2c l     O .bss	00000004 checkEndOfFile(short)::dta
20002228 l     O .data	00000004 newFolder(int)::d0
20012984 l     O .bss	00000050 dirName
200129d4 l     O .bss	00000050 fileName
2000b2c0 l     O .bss	00000200 fileHeader
200082c0 l     O .bss	00003000 diskBuffer
2000b4cc l     O .bss	00006000 tempBuffer0
00003384 l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
00000000 l    df *ABS*	00000000 SPI.cpp
00004f44 l     F .text.itcm	00000026 DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]
000050d4 l     F .text.itcm	00000048 _GLOBAL__sub_I__ZN8SPIClass5beginEv
00000000 l    df *ABS*	00000000 usb_desc.c
20002437 l     O .data	00000012 device_descriptor
60002722 l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000c82 l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
00000ca2 l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000cc8 l     F .text.itcm	00000014 FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]
00000cdc l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000cf2 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
00000d12 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00000d24 l     F .text.itcm	0000003c dbgPrint(unsigned short)
000010d4 l     F .text.itcm	00000064 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
00001668 l     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]
000017d4 l     F .text.itcm	0000009c MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]
00001b38 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001e8c l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001e9e l     F .text.itcm	00000006 Print::print(char) [clone .isra.0]
00001ea4 l     F .text.itcm	00000020 Print::write(char const*) [clone .isra.0]
00001ec4 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001ec8 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001edc l     F .text.itcm	00000038 menuGetLine()
20012a78 l     O .bss	00000028 menuGetLine()::buffer
00001f14 l     F .text.itcm	0000001c menuGetInt32(long*) [clone .isra.0]
00001f30 l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
20012884 l     O .bss	00000020 store
20000dc8 l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Queue.cpp
200116d8 l     O .bss	00000004 tail
200116d4 l     O .bss	00000004 head
2000b4c4 l     O .bss	00000004 queue_busy
70000000 l     O .bss.extram	00240000 data_buffer
00000000 l    df *ABS*	00000000 Compress.cpp
200116e4 l     O .bss	00000200 outData
200114d4 l     O .bss	00000200 dout
20011ae4 l     O .bss	00000200 tempData
20011d38 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
000036fc l     F .text.itcm	00000020 Print::print(char const*) [clone .isra.0]
20000dc0 l     O .data	00000008 chmap
20000dbc l     O .data	00000004 regs
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 RTC.cpp
20000df0 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 MTP.cpp
00003ce6 l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
00003cfc l     F .text.itcm	00000078 MTPD::mwrite(unsigned char const*, int) [clone .part.0]
20011d40 l     O .bss	00000004 MTPD::mwrite(unsigned char const*, int)::dst
20000cc0 l     O .data	00000028 supported_op
20000cac l     O .data	00000014 propertyList
20011d3c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
0000475a l     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000ce8 l     O .data	000000d4 mapTable
20000b80 l     O .data	0000012c lookupTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
000066ac l     F .text.itcm	00000030 exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00008108 l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
000091cc l     F .text.itcm	0000002c sdIrs()
20011ce8 l     O .bss	00000004 m_irqstat
20012a24 l     O .bss	00000001 m_dmaBusy
000091f8 l     F .text.itcm	00000020 gpioMux(unsigned char)
00009218 l     F .text.itcm	00000018 isBusyCommandComplete()
00009230 l     F .text.itcm	00000010 isBusyCommandInhibit()
00009240 l     F .text.itcm	00000014 isBusyDat()
00009254 l     F .text.itcm	0000000c isBusyDMA()
00009260 l     F .text.itcm	00000014 isBusyFifoRead()
00009274 l     F .text.itcm	00000014 isBusyFifoWrite()
00009288 l     F .text.itcm	00000018 isBusyTransferComplete()
000092a0 l     F .text.itcm	000000a0 setSdclk(unsigned long)
2000b4c0 l     O .bss	00000004 m_sdClkKhz
20002436 l     O .data	00000001 m_errorCode
20012964 l     O .bss	00000010 m_cid
20012974 l     O .bss	00000010 m_csd
200116dc l     O .bss	00000004 m_ocr
000093a4 l     F .text.itcm	00000024 waitTimeout(bool (*)())
000093c8 l     F .text.itcm	0000006c cardCommand(unsigned long, unsigned long)
00009434 l     F .text.itcm	00000020 statusCMD13()
200116e0 l     O .bss	00000004 m_rca
00009454 l     F .text.itcm	00000010 isBusyCMD13()
20011ce4 l     O .bss	00000004 m_busyFcn
20012960 l     O .bss	00000001 m_initDone
20012963 l     O .bss	00000001 m_transferActive
2000b4c8 l     O .bss	00000004 m_errorLine
20012962 l     O .bss	00000001 m_highCapacity
0000956c l     F .text.itcm	0000005c waitTransferComplete()
00009650 l     F .text.itcm	0000003c yieldTimeout(bool (*)())
0000968c l     F .text.itcm	00000030 waitDmaStatus()
000096bc l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00009968 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
00009998 l     F .text.itcm	000000d4 initSDHC()
20012961 l     O .bss	00000001 m_version2
00009a88 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00009bbc l     F .text.itcm	00000088 cardCMD6(unsigned long, unsigned char*)
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
0000a0c0 l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a424 l     F .text.itcm	00000060 rx_queue_transfer
20004f40 l     O .bss	00001000 rx_buffer
20005f40 l     O .bss	00000100 rx_transfer
200128d6 l     O .bss	00000002 rx_packet_size
0000a484 l     F .text.itcm	000000ac rx_event
20012ab5 l     O .bss	00000001 rx_head
20012ac5 l     O .bss	00000001 rx_tail
200121a8 l     O .bss	00000004 rx_available
20012ab7 l     O .bss	00000009 rx_list
200128c6 l     O .bss	00000010 rx_index
200128b6 l     O .bss	00000010 rx_count
0000a530 l     F .text.itcm	00000094 usb_serial_flush_callback
20012acb l     O .bss	00000001 tx_noautoflush
20012ac9 l     O .bss	00000001 tx_head
200060c0 l     O .bss	00000080 tx_transfer
200061c0 l     O .bss	00002000 txbuffer
2001295a l     O .bss	00000002 tx_available
2001295c l     O .bss	00000002 tx_packet_size
20012ac8 l     O .bss	00000001 transmit_previous_timeout
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000bab0 l     F .text.itcm	00000058 flash_wait
200128da l     O .bss	0000007e sector_index
20012aac l     O .bss	00000001 initialized
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000c124 l     F .text.itcm	00000010 txEvent_event
0000c134 l     F .text.itcm	0000003c rx_event
20012ab6 l     O .bss	00000001 rx_head
20012ac0 l     O .bss	00000005 rx_list
200128d8 l     O .bss	00000002 rx_packet_size
200121ac l     O .bss	00000014 rx_list_transfer_len
0000c170 l     F .text.itcm	00000060 rx_queue_transfer
20201000 l     O .bss.dma	00000800 rx_buffer
20006040 l     O .bss	00000080 rx_transfer
20006140 l     O .bss	00000080 tx_transfer
2001295e l     O .bss	00000002 tx_packet_size
20012aca l     O .bss	00000001 tx_head
20012ac6 l     O .bss	00000001 rx_tail
20201800 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20012a27 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000c756 l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
0000cd34 l     F .text.itcm	00000044 sbrk_aligned
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 reallocr.c
00000000 l    df *ABS*	00000000 strtod.c
0000ceec l     F .text.itcm	00000034 sulp
20000ad4 l     O .data	00000014 fpi.1
20000ae8 l     O .data	00000014 fpinan.0
200003f0 l     O .data	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000da60 l     F .text.itcm	000000f4 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 nano-vfscanf_float.c
00000000 l    df *ABS*	00000000 findfp.c
0000e804 l     F .text.itcm	0000006c std
0000e870 l     F .text.itcm	00000018 stdio_exit_handler
0000e888 l     F .text.itcm	00000040 cleanup_stdio
0000e8c8 l     F .text.itcm	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 dtoa.c
0000eeac l     F .text.itcm	00000110 quorem
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000faf0 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000ffe0 l     F .text.itcm	00000024 L_shift
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 mprec.c
20000afc l     O .data	0000000c p05.0
00000000 l    df *ABS*	00000000 msizer.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 nano-svfprintf.c
00000000 l    df *ABS*	00000000 nano-svfscanf.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 callocr.c
00000000 l    df *ABS*	00000000 strtoul.c
0001172c l     F .text.itcm	000000dc _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00011830 l     F .text.itcm	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
000120d0 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
000120d8 l     F .text.itcm	00000008 __usb_init_veneer
000120e0 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
000120e8 l     F .text.itcm	00000008 ___init_veneer
000120f0 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
000120f8 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
00012100 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
60002438 l     F .text.code	00000008 __memset_veneer
60002440 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
60002448 l     F .text.code	00000008 __delay_veneer
60002450 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
60002458 l     F .text.code	00000008 __main_veneer
60002460 l     F .text.code	00000008 ___ZN5Print7printlnEPKc.isra.0_veneer
60002468 l     F .text.code	00000008 ____libc_init_array_veneer
60002470 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002478 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002480 l     F .text.code	00000008 __pwm_init_veneer
60002488 l     F .text.code	00000008 __sm_set_pool_veneer
60002490 l     F .text.code	00000008 ___ZN7TwoWire8setClockEm_veneer
60002498 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
600024a0 l     F .text.code	00000008 __set_arm_clock_veneer
600024a8 l     F .text.code	00000008 __usb_init_serialnumber_veneer
600024b0 l     F .text.code	00000008 ___ZN5Print5printEPKc.isra.0_veneer
600024b8 l     F .text.code	00000008 ___ZN5Print7printlnEmi.isra.0_veneer
00010ad6 g     F .text.itcm	00000010 _malloc_usable_size_r
00007070  w    F .text.itcm	00000026 FatPartition::cacheSync()
600024d4 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
0000db82 g     F .text.itcm	000000a8 __cvt
0000580c g     F .text.itcm	000000a8 toUpcase(unsigned short)
00001092 g     F .text.itcm	0000002a MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
000111ec g     F .text.itcm	000000b4 _scanf_chars
0000286c g     F .text.itcm	00000060 pushData(unsigned long*)
0000a7e0 g     F .text.itcm	00000014 usb_serial_available
00010a94 g     F .text.itcm	00000042 __any_on
00011cc4 g     F .text.itcm	00000020 _isatty_r
0000edce g     F .text.itcm	00000010 strcpy
00002fb8 g     F .text.itcm	00000094 do_hibernate()
00007c5c g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
60001940 g     F .text.code	00000002 startup_default_late_hook
0000ece8 g     F .text.itcm	00000024 _lseek_r
00009754 g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c4a4  w    F .text.itcm	00000074 yield
00008b8a  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20012148 g     O .bss	00000060 proc_stat
20012880 g     O .bss	00000004 usb_timer1_callback
00003e7c g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
00003ed4 g     F .text.itcm	00000014 MTPD::write32(unsigned long)
00007ab4 g     F .text.itcm	000001a8 FatFile::write(void const*, unsigned int)
0000c852 g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
200126a8 g     O .bss	000001b8 storage
60002634 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200128b4 g     O .bss	00000002 proc
60001a58 g     F .text.code	00000274 configure_external_ram
00003c78 g     F .text.itcm	00000002 rtcXferTime()
00008a96  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
20001fa8 g     O .data	00000140 Wire1
0000918c  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00012000 g     F .text.itcm	0000005a .hidden __floatdidf
00008288 g     F .text.itcm	00000122 FatFile::makeSFN(FatLfn_t*)
20012140 g     O .bss	00000004 procCount
00007fb8 g     F .text.itcm	00000114 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
20011cec g     O .bss	00000004 FsDateTime::callback
00005040  w    F .text.itcm	00000074 SPIClass::dma_rxisr()
6000165c g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
00000eca g     F .text.itcm	0000000c MTPStorage_SD::mwrite(unsigned char const*, unsigned long)
000083ac g     F .text.itcm	000000a0 FatFile::makeUniqueSfn(FatLfn_t*)
00008f74 g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000c7ec g     F .text.itcm	0000001a Print::println()
00005528 g     F .text.itcm	00000098 TwoWire::isr()
20000604 g     O .data	00000070 vtable for DedicatedSpiCard
20012144 g     O .bss	00000004 procMiss
0000eaee g     F .text.itcm	00000024 __sseek
0000e91c g     F .text.itcm	00000030 __sinit
00005d2a g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
00010b00 g     F .text.itcm	0000009c fcvtbuf
00011ab4 g     F .text.itcm	0000007c __swbuf_r
00003d9a g     F .text.itcm	0000001e MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000ce84 g     F .text.itcm	0000000c __malloc_unlock
00003a10 g     F .text.itcm	0000004c i2c_class::read(unsigned char, unsigned char)
20011d24 g     O .bss	00000004 FsVolume::m_cwv
000039cc g     F .text.itcm	00000022 i2c_class::i2c_class(TwoWire*, unsigned long)
0000283c g     F .text.itcm	00000008 getStore()
00007664 g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
200082b8 g     O .bss	00000004 SerNum
20012a26 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
00008a8a  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600023e0 g     F .text.code	0000004c analog_init
0000da54 g     F .text.itcm	0000000c _strtod_r
00001698 g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
0000eb1a g     F .text.itcm	0000004a _vdprintf_r
00007746 g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000fb94 g     F .text.itcm	0000002a __hexdig_fun
00008dc6 g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
0000bb08 g     F .text.itcm	00000044 eeprom_initialize
00003298 g     F .text.itcm	000000ec saveData(short)
2000241a g     O .data	00000002 shift
20001e54 g     O .data	00000004 F_CPU_ACTUAL
0000ebf6 g     F .text.itcm	00000034 memmove
000016c6 g     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
2001211c g     O .bss	00000004 max_stat
0000e988 g     F .text.itcm	0000006c snprintf
0000a044 g     F .text.itcm	00000060 SdioCard::stopTransmission(bool)
00010188 g     F .text.itcm	00000080 _Balloc
00000c6e  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
0001211c g       .ARM.exidx	00000000 __exidx_end
00007ed0 g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
20012a25 g     O .bss	00000001 EventResponder::runningFromYield
0000a236 g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
00008980 g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000bf18 g     F .text.itcm	00000060 tempmonGetTemp
0000be68 g     F .text.itcm	0000001c smalloc_verify_pool
0000ed74 g     F .text.itcm	0000000c __errno
00002110 g     F .text.itcm	000000ac saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
00004f6a  w    F .text.itcm	00000036 SPIClass::SPIClass(unsigned int, unsigned int)
20011cfc g     O .bss	00000004 EventResponder::firstInterrupt
0000b528 g     F .text.itcm	00000028 usb_transfer_status
0000402a g     F .text.itcm	00000050 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000beb8 g     F .text.itcm	0000005c sm_set_pool
00002d88 g     F .text.itcm	00000014 newFolder(int)
20011d04 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
00003c7a g     F .text.itcm	00000004 rtcGetTimestamp()
20011e84 g     O .bss	00000004 __stdio_exit_handler
000004d4  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
00006648 g     F .text.itcm	00000018 ExFatPartition::rootLength()
0001205c g     F .text.itcm	00000030 .hidden __aeabi_d2lz
0000c6c8  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00011ca0 g     F .text.itcm	00000024 _fstat_r
20000764 g     O .data	00000370 digital_pin_to_info_PGM
20012094 g     O .bss	00000004 errno
0000a240 g     F .text.itcm	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00003df4 g     F .text.itcm	00000020 MTPD::mwrite(unsigned char const*, int)
000063ce g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
6000256c  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
000112a0 g     F .text.itcm	000001e8 _scanf_i
0000eab2 g     F .text.itcm	00000004 __seofread
00012118 g       .text.itcm	00000000 _etext
000050b4 g     F .text.itcm	00000010 _spi_dma_rxISR0()
000086c8 g     F .text.itcm	000000a4 FatFile::parsePathName(char const*, FatLfn_t*, char const**)
20002ac0 g       .bss	00000000 _sbss
0000934c g     F .text.itcm	0000000c SdioCard::errorData() const
00000d96 g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
00003c90 g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
00003e2a g     F .text.itcm	00000016 MTPD::write16(unsigned short)
00001930 g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
000097d0 g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000656c g     F .text.itcm	000000dc ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
6000272c g       *ABS*	00000000 _stextload
00000278 g     F .text.itcm	0000021c loop
0000c01c g     F .text.itcm	00000072 flexpwm_init
0000bbcc g     F .text.itcm	000000d4 eepromemu_flash_write
60001942 g     F .text.code	00000004 startup_debug_reset
0000b444 g     F .text.itcm	0000003c usb_config_rx
00004264 g     F .text.itcm	0000010c MTPD::GetStorageInfo(unsigned long)
00005b08 g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009e84 g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
00005308 g     F .text.itcm	000000e0 TwoWire::endTransmission(unsigned char)
00003a5c g     F .text.itcm	0000003c i2c_class::write(unsigned char, unsigned char, unsigned char)
20011cf8 g     O .bss	00000004 EventResponder::lastInterrupt
00008824 g     F .text.itcm	0000002c FsBaseFile::close()
0000eb64 g     F .text.itcm	00000014 vdiprintf
00004ff6 g     F .text.itcm	00000048 SPIClass::end()
0000a2f0 g     F .text.itcm	00000134 memcpy
0001002c g     F .text.itcm	00000136 __hexnan
000016f8 g     F .text.itcm	000000dc MTPStorage_SD::removeFile(unsigned long, char*)
00009040 g     F .text.itcm	00000032 SharedSpiCard::writeStop()
0000565c g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
00001542 g     F .text.itcm	00000126 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00002100 g     F .text.itcm	00000008 storeConfig(unsigned short*, int)
20002ac0 g     O .data	00000000 .hidden __TMC_END__
00002a50 g     F .text.itcm	000000e4 wavHeaderInit(long, long, long, int)
000064ae g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
000013fc g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00007332 g     F .text.itcm	00000026 FatFile::peek()
000021bc g     F .text.itcm	00000074 menu1(short)
20012124 g     O .bss	00000004 nbuf
00010c54 g     F .text.itcm	000001f8 _svfprintf_r
00011f88 g     F .text.itcm	00000022 .hidden __floatsidf
20012864 g     O .bss	00000004 systick_millis_count
00006b40 g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000c308 g     F .text.itcm	00000030 usb_mtp_available
00000494 g     F .text.itcm	00000040 setup1()
000052d4 g     F .text.itcm	00000034 TwoWire::wait_idle()
0000eb78 g     F .text.itcm	0000005e _vasniprintf_r
00004998 g     F .text.itcm	000005ac MTPD::loop()
0000ca24 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20012acd g     O .bss	00000001 usb_configuration
00008a80  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000be84 g     F .text.itcm	00000034 sm_align_pool
0000a0a4 g     F .text.itcm	0000001c SdioCard::syncDevice()
000095c8 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000bc  w    F .text.itcm	0000004e StreamFile<FsBaseFile, unsigned long long>::available()
00007358 g     F .text.itcm	0000003e FatFile::readDirCache(bool)
000109f0 g     F .text.itcm	0000005e __ratio
00008b98 g     F .text.itcm	00000084 SharedSpiCard::sectorCount()
60002634  w    O .text.progmem	00000018 usb_string_manufacturer_name
6000260c g     O .text.progmem	00000008 usb_string_mtp
0000cd14 g     F .text.itcm	00000010 malloc
00000244 g     F .text.itcm	00000010 reboot()
000039cc g     F .text.itcm	00000022 i2c_class::i2c_class(TwoWire*, unsigned long)
600025bc  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
2000069c  w    O .data	00000024 vtable for FsFile
0000ba2a  w    F .text.itcm	0000000a _fstat
20011e88 g     O .bss	00000200 acqBuffer
00005128  w    F .text.itcm	0000001e TwoWire::read()
000116c8 g     F .text.itcm	0000003c __assert_func
00004964 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00002e9c g     F .text.itcm	00000108 getAlarmTime(unsigned long)
20000328 g     O .data	000000c8 __mprec_tens
600017b4 g     F .text.code	000000e4 usb_init
00008850 g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
200126a0 g     O .bss	00000004 sessionID_
00008a86  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000c58  w    F .text.itcm	00000016 MTPStorage_SD::addFilesystem(SdFs&, char const*)
20008218 g     O .bss	00000050 SPI1
0000ba6c g     F .text.itcm	00000044 rtc_set
00010ec6 g     F .text.itcm	0000003a __ssrefill_r
20012868 g     O .bss	00000004 systick_safe_read
000051c4 g     F .text.itcm	00000110 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00006bd4 g     F .text.itcm	000000ca ExFatFile::truncate()
20002230 g     O .data	00000000 .hidden __dso_handle
0000bca0 g     F .text.itcm	000000b4 eepromemu_flash_erase_sector
00011f68 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000ecc0 g     F .text.itcm	00000008 _localeconv_r
20002408 g     O .data	00000004 sd_str
0000a1e2 g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00010404 g     F .text.itcm	0000002c __i2b
20000000 g       .data	00000000 _sdata
0000c1d0 g     F .text.itcm	000000a4 usb_mtp_configure
2000241e g     O .data	00000002 t_on
600026b9 g     O .text.progmem	00000069 usb_config_descriptor_480
0000ca54 g     F .text.itcm	000002bc .hidden __udivmoddi4
0000418c g     F .text.itcm	000000d8 MTPD::getObjectPropValue(unsigned long, unsigned long)
00011ce4 g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000a230 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00007096 g     F .text.itcm	00000036 FatFile::addCluster()
0000ed30 g     F .text.itcm	00000020 _sbrk_r
200128aa g     O .bss	00000002 d_rep
00009a6c g     F .text.itcm	0000001c SdioCard::type() const
00003dcc g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
6000193c g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
0000a854 g     F .text.itcm	0000001e usb_serial_getchar
00000d7e  w    F .text.itcm	00000018 FsVolume::clusterCount() const
20012870 g     O .bss	00000008 usb_cdc_line_coding
0000bf78 g     F .text.itcm	00000040 digitalWrite
00007cb4  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
20011d00 g     O .bss	00000004 EventResponder::lastYield
00005ae0 g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000ed0c g     F .text.itcm	00000024 _read_r
0000c7ba  w    F .text.itcm	00000020 Print::write(char const*)
2001286c g     O .bss	00000004 termon
0000006e  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
00008b82  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
20012098 g     O .bss	00000010 extmem_smalloc_pool
00008ebc g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000bfb8 g     F .text.itcm	00000064 pinMode
00001476 g     F .text.itcm	00000028 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000ed8  w    F .text.itcm	0000001c FsFile::FsFile()
0000c8e8 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
00011fac g     F .text.itcm	00000042 .hidden __extendsfdf2
00010f00 g     F .text.itcm	000002ec __ssvfscanf_r
0000c68c  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000eb2  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00011cf0 g     F .text.itcm	00000276 .hidden __adddf3
60001690 g     F .text.code	00000050 TwoWire::setSDA(unsigned char)
200020e8 g     O .data	00000140 Wire2
0000415c g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
00003db8 g     F .text.itcm	00000012 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60017400 g     O .text.csf	00000c00 hab_csf
00003e40 g     F .text.itcm	0000003a MTPD::writestring(char const*)
00007f14 g     F .text.itcm	000000a4 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
000108ac g     F .text.itcm	00000094 __b2d
00003784 g     F .text.itcm	000001a4 adc_init()
00012114 g       .ARM.exidx	00000000 __exidx_start
70240000 g       .bss.extram	00000000 _extram_end
000008c0  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000ba34  w    F .text.itcm	00000004 _isatty
200128a8 g     O .bss	00000002 d_0
20011cf4 g     O .bss	00000004 EventResponder::firstYield
000056f0 g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001fa  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000ce90 g     F .text.itcm	0000005c _realloc_r
0000ed80 g     F .text.itcm	00000048 __libc_init_array
0000b598 g     F .text.itcm	00000264 dtostrf
0000511c  w    F .text.itcm	0000000c TwoWire::available()
0000621a g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00009358 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
0000698e g     F .text.itcm	000000ac ExFatFile::addDirCluster()
00001536 g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
00001afa g     F .text.itcm	0000003e mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
00004f6a  w    F .text.itcm	00000036 SPIClass::SPIClass(unsigned int, unsigned int)
000039ee g     F .text.itcm	00000022 i2c_class::exist(unsigned char)
20000300 g     O .data	00000028 __mprec_bigtens
000102d8 g     F .text.itcm	00000094 __s2b
00008e3e  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000ba3e  w    F .text.itcm	00000004 abort
000053e8 g     F .text.itcm	00000140 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000c6b0  w    F .text.itcm	00000004 usb_serial_class::clear()
00011f68 g     F .text.itcm	0000001e .hidden __floatunsidf
0000b9f4  w    F .text.itcm	0000002c _sbrk
60014848 g       *ABS*	00000000 _sdataload
00010700 g     F .text.itcm	00000036 __mcmp
0000187e g     F .text.itcm	000000b2 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
2000222c g     O .data	00000004 __brkval
20012acc g     O .bss	00000001 usb_cdc_line_rtsdtr
6000242c g     F .text.code	00000000 _init
0000a5c4 g     F .text.itcm	00000002 usb_serial_reset
0000713c g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
20000424 g     O .data	00000070 SPIClass::spiclass_lpspi1_hardware
0000bd54 g     F .text.itcm	000000f8 eeprom_write_byte
00000fb0  w    F .text.itcm	0000004c mSD_Base::sd_rmdir(unsigned long, char*)
00012090 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
60002650 g     O .text.progmem	00000069 usb_config_descriptor_12
200006c0 g     O .data	00000024 vtable for TwoWire
0000cf20 g     F .text.itcm	00000b34 _strtod_l
00010004 g     F .text.itcm	00000028 __match
20012b00 g       .bss	00000000 _ebss
00009874 g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00003ee8 g     F .text.itcm	00000118 MTPD::WriteDescriptor()
20002400 g     O .data	00000004 propertyListNum
600016e0 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0000010a  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0001036c g     F .text.itcm	0000003e __hi0bits
00005a54 g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001eac g     F .text.code	00000074 CrashReportClass::clear()
000055cc g     F .text.itcm	0000000c lpi2c3_isr()
00006a3a g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20202080 g       .bss.dma	00000000 _heap_start
00004000 g     F .text.itcm	0000002a MTPD::WriteStorageIDs()
20012aa0 g     O .bss	00000001 __lock___malloc_recursive_mutex
20002418 g     O .data	00000002 h_4
00001c70 g     F .text.itcm	000001d4 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00006660 g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
6000251c  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
000008c0  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20011d4c g     O .bss	00000138 __sf
20001e4c g     O .data	00000004 CrashReport
200121d4 g     O .bss	000004cc sdx
00008d3c g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000548 g     F .text.itcm	00000144 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
20002ae0 g     O .bss	00000020 endpoint0_transfer_data
00006ed2 g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
000057be g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000ca14 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000c0c4 g     F .text.itcm	00000060 pwm_init
0001180c g     F .text.itcm	00000024 fprintf
00011cf0 g     F .text.itcm	00000276 .hidden __aeabi_dadd
200120a8 g     O .bss	00000050 file
000046cc g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
20002449 g     O .data	00000001 usb_mtp_status
60018000 g       .text.csf	00000000 __text_csf_end
60001ccc g     F .text.code	00000060 usb_pll_start
00010574 g     F .text.itcm	000000b4 __pow5mult
00007436 g     F .text.itcm	0000004c FatFile::rmdir()
200005f8 g     O .data	0000000c vtable for CrashReportClass
00011ff0 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
000055d8 g     F .text.itcm	0000000c lpi2c4_isr()
00007e52 g     F .text.itcm	0000007e FatPartition::allocateCluster(unsigned long, unsigned long*)
200120f8 g     O .bss	00000004 haveStore
000091ca  w    F .text.itcm	00000002 SdioCard::end()
0000e988 g     F .text.itcm	0000006c sniprintf
20002ac0 g     O .bss	00000020 endpoint0_transfer_ack
20012878 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b4ec g     F .text.itcm	00000020 usb_transmit
0000c554 g     F .text.itcm	00000020 systick_isr
0000edcc g     F .text.itcm	00000002 __retarget_lock_release_recursive
00003c7e g     F .text.itcm	00000012 rtc_get_datetime(datetime_t*)
20001e58 g     O .data	00000010 Serial
200120fc g     O .bss	00000020 logBuffer
00010b9c g     F .text.itcm	000000b6 __ssputs_r
00002108 g     F .text.itcm	00000008 loadConfig(unsigned short*, int)
0000c6d0  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00008924 g     F .text.itcm	0000005a FsBaseFile::openNext(FsBaseFile*, int)
6000193c  w    F .text.code	00000002 startup_early_hook
00006702 g     F .text.itcm	00000094 ExFatFile::addCluster()
00008c98 g     F .text.itcm	00000070 SharedSpiCard::readData(unsigned char*, unsigned int)
0000a79c g     F .text.itcm	00000044 usb_serial_peekchar
0001185e g     F .text.itcm	00000024 __sfputs_r
0000e904 g     F .text.itcm	0000000c __sfp_lock_acquire
0000ede0 g     F .text.itcm	00000000 memchr
00007d88 g     F .text.itcm	000000ca FatPartition::fatPut(unsigned long, unsigned long)
0000dca0  w    F .text.itcm	00000434 _printf_float
0000aaf0 g     F .text.itcm	0000025c set_arm_clock
20012860 g     O .bss	00000004 systick_cycle_count
20002420 g     O .data	00000016 usb_string_serial_number_default
0000fa5c g     F .text.itcm	00000094 _free_r
00008faa g     F .text.itcm	00000096 SharedSpiCard::erase(unsigned long, unsigned long)
00009072 g     F .text.itcm	0000004c SharedSpiCard::writeData(unsigned char, unsigned char const*)
00009b48 g     F .text.itcm	00000074 SdioCard::readStop()
00000db2  w    F .text.itcm	0000005c FsVolume::rename(char const*, char const*)
00008a8e  w    F .text.itcm	00000004 SharedSpiCard::type() const
00001a16 g     F .text.itcm	000000e4 MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000c6c0  w    F .text.itcm	00000004 usb_serial_class::flush()
00010e4c g     F .text.itcm	0000007a _sungetc_r
00011cec g     F .text.itcm	0000027a .hidden __aeabi_dsub
0000c6b8  w    F .text.itcm	00000004 usb_serial_class::read()
0000876c g     F .text.itcm	000000b8 FatFile::remove()
00011ff0 g     F .text.itcm	0000006a .hidden __floatundidf
00000ed8  w    F .text.itcm	0000001c FsFile::FsFile()
0000ba38  w    F .text.itcm	00000006 _lseek
00003964 g     F .text.itcm	00000068 adcStatus()
00010628 g     F .text.itcm	000000d8 __lshift
0000304c g     F .text.itcm	0000024c storeData(short)
00007880 g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000b4c0 g     F .text.itcm	0000002c usb_prepare_transfer
00008a92  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b874 g     F .text.itcm	00000180 unused_interrupt_vector
60001d2c g     F .text.code	0000012c tempmon_init
2001287c g     O .bss	00000004 usb_timer0_callback
000081be g     F .text.itcm	000000ca FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000eb78 g     F .text.itcm	0000005e _vasnprintf_r
00002fa4 g     F .text.itcm	00000014 powerDown()
00008b1a g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00006154 g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000bb4c g     F .text.itcm	00000064 eeprom_read_byte
0000ec72 g     F .text.itcm	00000028 strlcpy
000011bc g     F .text.itcm	000000b0 MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)
0000ec9a g     F .text.itcm	00000024 strncmp
00008126 g     F .text.itcm	00000098 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00006a82 g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000a7f4 g     F .text.itcm	00000060 usb_serial_flush_input
200023fc g     O .data	00000004 fsamp
00006508 g     F .text.itcm	00000064 ExFatPartition::freeClusterCount()
00001304 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f4c  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
00010430 g     F .text.itcm	00000144 __multiply
00002844 g     F .text.itcm	0000001c getDataCount()
0000a9fc g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000eb1a g     F .text.itcm	0000004a _vdiprintf_r
00000ae0 g     F .text.itcm	00000084 i2s_setup()
20000504 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0000377c g     F .text.itcm	00000008 adcStart()
00010940 g     F .text.itcm	000000b0 __d2b
000090be g     F .text.itcm	0000002e SharedSpiCard::writeData(unsigned char const*)
000091c2  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001898 g     F .text.code	00000054 _reboot_Teensyduino_
00009958  w    F .text.itcm	0000000e SdioCard::~SdioCard()
6000193e g     F .text.code	00000002 startup_default_middle_hook
00000c72  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00000b64 g     F .text.itcm	000000a4 dma_setup()
00008abc g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00008e00 g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
000098f0 g     F .text.itcm	00000068 SdioCard::writeStart(unsigned long)
00011808 g     F .text.itcm	00000004 _strtoul_r
0000371c g     F .text.itcm	00000024 usbPowerInit()
0000c338 g     F .text.itcm	000000c4 usb_mtp_send
0000afa4 g     F .text.itcm	000004a0 usb_isr
0000db58 g     F .text.itcm	0000001c __cxa_atexit
00005b88 g     F .text.itcm	00000178 ExFatFile::read(void*, unsigned int)
0000ecc8 g     F .text.itcm	00000020 _close_r
00009152  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00011f88 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00008e7a g     F .text.itcm	0000002a SharedSpiCard::readStop()
00005778 g     F .text.itcm	00000046 FsCache::sync()
200081c8 g     O .bss	00000050 SPI
0000ebd6 g     F .text.itcm	00000020 memcmp
20000674  w    O .data	00000028 vtable for usb_serial_class
0000a260 g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
000044b2 g     F .text.itcm	000000da MTPD::GetObject(unsigned long)
0000a2a8 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
200121d0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000ea38 g     F .text.itcm	00000058 sscanf
20008268 g     O .bss	00000050 SPI2
00011b30 g     F .text.itcm	000000ac __swsetup_r
0000cd10  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00006822 g     F .text.itcm	00000056 ExFatFile::rmdir()
00004370 g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000d60  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00008e46 g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
00010a4e g     F .text.itcm	00000046 __copybits
00004700 g     F .text.itcm	00000016 MTPD::read16()
00000c7e g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
0000ea90 g     F .text.itcm	00000022 __sread
00002b48 g     F .text.itcm	00000060 wavHeaderWrite(char*)
0000aa60 g     F .text.itcm	00000090 usb_serial_flush_output
0000bbb0 g     F .text.itcm	0000001c eeprom_read_block
0000ce78 g     F .text.itcm	0000000c __malloc_lock
00005944 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20002800 g     O .data	000002c0 _VectorsRam
0000a268 g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00008d10 g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
00011590 g     F .text.itcm	00000050 _fflush_r
00011704 g     F .text.itcm	00000028 _calloc_r
00004668 g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
00002ba8 g     F .text.itcm	000000e0 makeHeader(long*)
00000f0c  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
0000844c g     F .text.itcm	0000027c FatFile::open(FatFile*, FatLfn_t*, int)
2000241c g     O .data	00000002 t_acq
20012ad0 g     O .bss	00000001 yield_active_check_flags
0000694c g     F .text.itcm	00000042 ExFatFile::sync()
0000edca g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20012ace g     O .bss	00000001 usb_high_speed
00007924 g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
00009464 g     F .text.itcm	00000040 SdioCard::isBusy()
00003e14 g     F .text.itcm	00000016 MTPD::write8(unsigned char)
0000a2ac g     F .text.itcm	00000000 memset
0000c6d6 g     F .text.itcm	00000010 main
0000db74 g     F .text.itcm	00000006 fcvt
00006254 g     F .text.itcm	000000a6 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000edc8 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20202000 g     O .bss.dma	00000069 usb_descriptor_buffer
00000214 g     F .text.itcm	00000030 resetUSB()
000090ec g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00006ca0 g     F .text.itcm	00000218 ExFatFile::write(void const*, unsigned int)
20000598 g     O .data	00000060 vtable for MTPStorage_SD
00004790 g     F .text.itcm	000000e4 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000ec2a g     F .text.itcm	00000048 strlcat
00007710 g     F .text.itcm	00000036 FatFile::dirEntry(DirFat_t*)
0000eb12 g     F .text.itcm	00000008 __sclose
0000c3fc g     F .text.itcm	00000054 usb_init_serialnumber
0000db54 g     F .text.itcm	00000004 _strtol_r
600024d4 g       .text.code	00000000 __init_array_end
0000efc0 g     F .text.itcm	00000a9c _dtoa_r
0000cd78 g     F .text.itcm	00000100 _malloc_r
00008a9a g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
00010ae6 g     F .text.itcm	0000001a __ascii_wctomb
00012000 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20011d28 g     O .bss	00000004 FatVolume::m_cwv
00011652 g     F .text.itcm	00000074 __submore
20000754  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c714 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
00004fa0 g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
66c750f0 g       *ABS*	00000000 __rtc_localtime
0000b7fc g     F .text.itcm	0000004c micros
00003e90 g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
00006878 g     F .text.itcm	000000d4 ExFatFile::syncDir()
000055e4 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
6000264c g     O .text.progmem	00000004 string0
0000a874 g     F .text.itcm	00000188 usb_serial_write
60001940  w    F .text.code	00000002 startup_late_hook
0000af4c g     F .text.itcm	00000030 usb_start_sof_interrupts
00000e0e  w    F .text.itcm	0000004e FsBaseFile::available() const
00009136 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c6bc  w    F .text.itcm	00000004 usb_serial_class::available()
0000ea38 g     F .text.itcm	00000058 siscanf
0000472a g     F .text.itcm	00000030 MTPD::readstring(char*)
000075d8 g     F .text.itcm	0000007c FatFile::sync()
20000000 g     O .data	00000300 endpoint_queue_head
000066dc  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60002614  w    O .text.progmem	00000020 usb_string_product_name
00003d74 g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000b848 g     F .text.itcm	0000002c delay
00012090 g     F .text.itcm	00000040 .hidden __fixunsdfdi
200128ae g     O .bss	00000002 dma_channel_allocated_mask
00000e90 g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
00005ac0 g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00012110 g     F .fini	00000000 _fini
00003760 g     F .text.itcm	00000014 acqPower(int)
0000515e g     F .text.itcm	00000028 TwoWire::write(unsigned char)
00008c68 g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
00006228 g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000e9f4 g     F .text.itcm	00000044 sprintf
0000c824 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000dc2a g     F .text.itcm	00000074 __exponent
0000c7da g     F .text.itcm	00000012 Print::print(long)
00007654 g     F .text.itcm	00000010 FatFile::close()
0000bf14 g     F .text.itcm	00000004 Panic_Temp_isr
0001205c g     F .text.itcm	00000030 .hidden __fixdfdi
00000988 g     F .text.itcm	00000158 setAudioFrequency(int)
00002860 g     F .text.itcm	0000000c queue_isBusy()
20002404 g     O .data	00000004 sd
00007786 g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
000093a0  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000a4  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000ed50 g     F .text.itcm	00000024 _write_r
000094a8 g     F .text.itcm	000000c4 SdioCard::erase(unsigned long, unsigned long)
20002410 g     O .data	00000002 again
00000254 g     F .text.itcm	00000024 lowPowerInit()
000033b4 g     F .text.itcm	000000b4 filing_init()
0000c274 g     F .text.itcm	00000094 usb_mtp_recv
0000eea0 g     F .text.itcm	0000000c nanf
0000e0d4 g     F .text.itcm	000000da _printf_common
200126a4 g     O .bss	00000004 setup_ready
200023f8 g     O .data	00000004 _impure_ptr
00005d00 g     F .text.itcm	0000002a ExFatFile::peek()
00011488 g     F .text.itcm	00000108 __sflush_r
20000574  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000c450  w    F .text.itcm	00000054 EventResponder::runFromYield()
20001e68 g     O .data	00000140 Wire
00008a54 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000e94c g     F .text.itcm	0000003c _fwalk_sglue
00009340 g     F .text.itcm	0000000c SdioCard::errorCode() const
00007702 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001f0  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600024c0 g       .text.code	00000000 __preinit_array_end
60001f20 g     F .text.code	000004b0 CrashReportClass::printTo(Print&) const
00002920 g     F .text.itcm	0000007a dateTime(unsigned short*, unsigned short*, unsigned char*)
00010c54 g     F .text.itcm	000001f8 _svfiprintf_r
00002e08 g     F .text.itcm	00000094 newFileName(char*)
00000ef4  w    F .text.itcm	00000018 FsFile::~FsFile()
0000639a g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00008c1c g     F .text.itcm	00000026 SharedSpiCard::spiStart()
00001870 g     F .text.itcm	0000000e MTPStorage_SD::DeleteObject(unsigned long)
00010162 g     F .text.itcm	00000024 __ascii_mbtowc
200128b0 g     O .bss	00000002 h_1
00010860 g     F .text.itcm	0000004c __ulp
0000af7c g     F .text.itcm	00000028 usb_stop_sof_interrupts
00005146  w    F .text.itcm	00000016 TwoWire::peek()
0000515c  w    F .text.itcm	00000002 TwoWire::flush()
0000077c g     F .text.itcm	00000144 setup
20000b08 g     O .data	00000078 usb_descriptor_list
000094a4 g     F .text.itcm	00000004 SdioCard::status()
00001064 g     F .text.itcm	0000002e MTPStorage_SD::ResetIndex()
00003ddc g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00007766 g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000e7e  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
00003774 g     F .text.itcm	00000008 adcReset()
00000e5c  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000ee90 g     F .text.itcm	00000010 nan
000071bc g     F .text.itcm	00000176 FatFile::read(void*, unsigned int)
0000458c g     F .text.itcm	000000dc MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
00010f00 g     F .text.itcm	000002ec __ssvfiscanf_r
0000715a g     F .text.itcm	00000032 FatFile::openRoot(FatVolume*)
20011cf0 g     O .bss	00000004 ExFatVolume::m_cwv
00011bdc g     F .text.itcm	0000004c __swhatbuf_r
20068000 g       .text.csf	00000000 _estack
00008a7c g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c610 g     F .text.itcm	00000030 DMAChannel::release()
00002230 g     F .text.itcm	00000144 loadParameters()
0000aa14 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00003740 g     F .text.itcm	00000020 usbPowerSetup()
60001714 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
200023a0 g     O .data	0000000c __sglue
0000a5c8 g     F .text.itcm	00000100 usb_serial_configure
00005186 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
0000c808  w    F .text.itcm	0000001c _write
20002ac0 g       .data	00000000 _edata
00006474 g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
20012aab g     O .bss	00000001 external_psram_size
0000407c g     F .text.itcm	000000e0 MTPD::GetObjectInfo(unsigned long)
000093a0  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000058b4 g     F .text.itcm	00000048 FsName::get16()
00008b82  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00008f10 g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00008aaa g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
000059f4 g     F .text.itcm	00000060 ExFatFile::hashName(ExName_t*)
000070cc g     F .text.itcm	00000070 FatFile::addDirCluster()
0000c6c4  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000055c0 g     F .text.itcm	0000000c lpi2c1_isr()
00007c8a g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000c08 g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000b550 g     F .text.itcm	00000048 ultoa
20002416 g     O .data	00000002 h_3
000046ea g     F .text.itcm	00000016 MTPD::read8()
6000176c g     F .text.code	00000048 TwoWire::begin()
200128ac g     O .bss	00000002 dgain
000088b0 g     F .text.itcm	00000074 FsBaseFile::open(FsVolume*, char const*, int)
00001138 g     F .text.itcm	0000003e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000eab6 g     F .text.itcm	00000038 __swrite
0000c518 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
00002728 g     F .text.itcm	00000114 menu(short)
0000c6b4  w    F .text.itcm	00000004 usb_serial_class::peek()
0000db7a g     F .text.itcm	00000008 fcvtf
000091c6  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00008c42 g     F .text.itcm	00000026 SharedSpiCard::spiStop()
00003c9e g     F .text.itcm	00000024 rtcSetDate(int, int, int)
00001176 g     F .text.itcm	00000046 MTPStorage_SD::GetNextObjectHandle(unsigned long)
0001180c g     F .text.itcm	00000024 fiprintf
00011884 g     F .text.itcm	00000230 _vfiprintf_r
00003cc2 g     F .text.itcm	00000024 rtcSetTime(int, int, int)
0000a0d0  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a0  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
20002b00 g     O .bss	00002440 mtpd
00010738 g     F .text.itcm	00000128 __mdiff
000028cc g     F .text.itcm	00000054 pullData(unsigned long*)
00009390 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
0000149e g     F .text.itcm	00000098 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
20000494 g     O .data	00000070 SPIClass::spiclass_lpspi3_hardware
00006434 g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
000050c4 g     F .text.itcm	00000010 _spi_dma_rxISR1()
00006f7c g     F .text.itcm	000000f0 FatFile::getName8(char*, unsigned int)
00002c88 g     F .text.itcm	00000100 checkEndOfFile(short)
200023ac g     O .data	0000004c _impure_data
00005e08 g     F .text.itcm	0000034c ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00001f4c g     F .text.itcm	000001b4 menu3()
0000e910 g     F .text.itcm	0000000c __sfp_lock_release
20012120 g     O .bss	00000004 mtp_txEventCount
00002a0c g     F .text.itcm	00000044 timeStamp()
00009b48 g     F .text.itcm	00000074 SdioCard::writeStop()
0000e9f4 g     F .text.itcm	00000044 siprintf
000115e0 g     F .text.itcm	00000072 __sccl
00008d08 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
00005a8c g     F .text.itcm	00000014 ExFatFile::close()
20000dfc g     O .data	00000101 _ctype_
0000ba20  w    F .text.itcm	00000004 _read
600024c0 g       .text.code	00000000 __init_array_start
0000cd10  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00000ffc g     F .text.itcm	00000068 MTPStorage_SD::OpenIndex()
600023d0 g     F .text.code	0000000e CrashReportClass::operator bool()
00004716 g     F .text.itcm	00000014 MTPD::read32()
20001e50 g     O .data	00000004 F_BUS_ACTUAL
0000c08e g     F .text.itcm	00000036 quadtimer_init
20012088 g     O .bss	00000004 disk_count
00002b34 g     F .text.itcm	00000014 wavHeaderUpdate(long)
00003a98 g     F .text.itcm	00000118 time2date(unsigned long, datetime_t*)
000080cc g     F .text.itcm	0000003c FatVolume::chdir(char const*)
20002414 g     O .data	00000002 h_2
00003bb0 g     F .text.itcm	000000c8 date2time(datetime_t*)
0000c6e8 g     F .text.itcm	0000002c Stream::timedRead()
00011c28 g     F .text.itcm	00000078 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c574 g     F .text.itcm	0000009c DMAChannel::begin(bool)
00008b84  w    F .text.itcm	00000006 SharedSpiCard::end()
0000ee80 g     F .text.itcm	00000010 strlen
0000e1b0 g     F .text.itcm	0000023c _printf_i
0000718c g     F .text.itcm	00000030 FatFile::openCluster(FatFile*)
00007396 g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
0000fbc0 g     F .text.itcm	00000420 __gethex
60002614 g     O .text.progmem	00000020 usb_string_product_name_default
20011d48 g     O .bss	00000004 __malloc_sbrk_start
00003928 g     F .text.itcm	0000003c setAGain(signed char)
0000eb64 g     F .text.itcm	00000014 vdprintf
00009ae0 g     F .text.itcm	00000068 SdioCard::sectorCount()
00007544 g     F .text.itcm	00000094 FatFile::openNext(FatFile*, int)
6000193e  w    F .text.code	00000002 startup_middle_hook
200006e4 g     O .data	00000070 vtable for SdioCard
00011fac g     F .text.itcm	00000042 .hidden __aeabi_f2d
00001282 g     F .text.itcm	00000082 MTPStorage_SD::close()
0000706c g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001946 g     F .text.code	00000112 configure_cache
0000be4c g     F .text.itcm	0000001c eeprom_write_block
000001a0  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
000091be  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
00001364 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
20011d44 g     O .bss	00000004 __malloc_free_list
00008e36  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
00002d9c g     F .text.itcm	0000006c newDirectory(char*)
00009f38 g     F .text.itcm	00000068 SdioCard::readStart(unsigned long)
00002374 g     F .text.itcm	000003b4 menu2()
0000a1d4 g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
00003468 g     F .text.itcm	00000294 compress(void*)
00006eb8  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00000c7a g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00011cec g     F .text.itcm	0000027a .hidden __subdf3
00011884 g     F .text.itcm	00000230 _vfprintf_r
600024c0 g       .text.code	00000000 __preinit_array_start
0000b50c g     F .text.itcm	0000001c usb_receive
000062fa g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001dc  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
0000126c g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
20012958 g     O .bss	00000002 t_rep
000103aa g     F .text.itcm	0000005a __lo0bits
0000640e g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
2000240c g     O .data	00000004 tempDatai
00007482 g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00018000 g       *ABS*	00000000 _flashimagelen
00008ea4 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000ca18 g     F .text.itcm	0000000a __aeabi_atexit
00000ef4  w    F .text.itcm	00000018 FsFile::~FsFile()
0000ba44 g     F .text.itcm	00000028 rtc_get
00006796 g     F .text.itcm	0000008c ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000c550 g     F .text.itcm	00000004 pendablesrvreq_isr
00004874 g     F .text.itcm	000000f0 MTPD::SendObject()
200128b2 g     O .bss	00000002 monitor
20002412 g     O .data	00000002 d_on
00001e44 g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20002234 g     O .data	0000016c __global_locale
00009c44 g     F .text.itcm	00000240 SdioCard::begin(SdioConfig)
00005aa0 g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a6c8 g     F .text.itcm	000000d4 usb_serial_read
20012aa1 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000c83e g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000b480 g     F .text.itcm	00000040 usb_config_tx
0000ba24  w    F .text.itcm	00000006 _close
00007cc6 g     F .text.itcm	000000c2 FatPartition::fatGet(unsigned long, unsigned long*)
0000cd24 g     F .text.itcm	00000010 free
0000e3ec  w    F .text.itcm	00000418 _scanf_float
000058fc g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
000010bc g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
0001024c g     F .text.itcm	0000008c __multadd
00010208 g     F .text.itcm	00000044 _Bfree
00006efa g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
20002420  w    O .data	00000016 usb_string_serial_number
00009fa0 g     F .text.itcm	000000a4 SdioCard::readSector(unsigned long, unsigned char*)
00009374 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	@ (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	@ (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x20002ac0
60001428:	.word	0x20012b00

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	6000193c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	@ (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	@ 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	@ (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	@ (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	@ (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	@ (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	@ (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	@ (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	@ (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	@ 0xe000e000
60001484:	mov.w	r2, #15728640	@ 0xf00000
60001488:	str.w	r2, [r3, #3464]	@ 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	@ (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	@ 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	@ (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	@ 0x80
6000149e:	ldr	r2, [pc, #348]	@ (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	@ 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	@ (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	@ 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	@ 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	@ 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	@ 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	@ 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	@ 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	@ 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	@ 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	@ 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	@ (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	@ 0x70000
600014dc:	str.w	r3, [r0, #3364]	@ 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	@ 0x7f
600014e6:	orr.w	r3, r3, #64	@ 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	@ 0x24
600014ee:	bic.w	r3, r3, #127	@ 0x7f
600014f2:	orr.w	r3, r3, #64	@ 0x40
600014f6:	str	r3, [r6, #36]	@ 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	@ (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	@ 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	@ 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	@ 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	@ 0x74
	configure_cache();
60001502:	bl	60001946 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	@ (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	@ 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	@ (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	@ 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	@ 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	@ (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	@ 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	@ 0xdfc
60001524:	orr.w	r3, r3, #16777216	@ 0x1000000
60001528:	str.w	r3, [r0, #3580]	@ 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	@ (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	@ (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001ccc <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	@ 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	@ (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	@ 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	@ 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	@ 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	600024a0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	@ 0x6c
60001558:	orr.w	r3, r3, #12288	@ 0x3000
6000155c:	str	r3, [r6, #108]	@ 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	@ (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	@ 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	@ 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	@ 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	@ 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	@ 0x50000
60001576:	ldr	r2, [r3, #56]	@ 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	@ (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	@ 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	@ 0x2e15
60001584:	str	r2, [r3, #80]	@ 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	@ 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	@ 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	@ (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	@ 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001a58 <configure_external_ram>
	analog_init();
6000159c:	bl	600023e0 <analog_init>
	pwm_init();
600015a0:	bl	60002480 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001d2c <tempmon_init>
	startup_middle_hook();
600015a8:	bl	6000193e <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	600017b4 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	@ 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	60001942 <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	60001940 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	60002468 <____libc_init_array_veneer>
	main();
600015ca:	bl	60002458 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x00012118
600015dc:	.word	0x6000272c
600015e0:	.word	0x00000000
600015e4:	.word	0x20002ac0
600015e8:	.word	0x60014848
600015ec:	.word	0x20000000
600015f0:	.word	0x20002800
600015f4:	.word	0x0000b875
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000c551
6000160c:	.word	0x0000c555
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x20012860
6000161c:	.word	0x016e3600
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x20012864
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	@ (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	@ (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	@ 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	@ (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	@ 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	@ 0xaa0000
60001642:	str	r2, [r3, #56]	@ 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	@ (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165c:	ldr	r3, [r0, #20]
6000165e:	ldr	r2, [pc, #40]	@ (60001688 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001660:	add.w	r0, r3, r1, lsl #4
60001664:	add.w	r1, r3, r1, lsl #4
{
60001668:	push	{r4, r5, lr}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	ldrb	r4, [r0, #8]
6000166c:	ldr	r5, [pc, #28]	@ (6000168c <TwoWire::configSDApin(unsigned char)+0x30>)
6000166e:	add.w	r2, r2, r4, lsl #4
60001672:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001674:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001676:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001678:	ldr	r0, [r0, #12]
6000167a:	str	r0, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000167c:	ldr	r3, [r1, #16]
6000167e:	cbz	r3, 60001684 <TwoWire::configSDApin(unsigned char)+0x28>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001680:	ldr	r2, [r1, #20]
60001682:	str	r2, [r3, #0]
	}
}
60001684:	pop	{r4, r5, pc}
60001686:	nop
60001688:	.word	0x20000764
6000168c:	.word	0x0001f861

60001690 <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001690:	push	{r3, r4, r5, lr}
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001692:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001694:	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001696:	ldrb	r2, [r0, #24]
60001698:	add.w	r2, r3, r2, lsl #4
6000169c:	ldrb	r2, [r2, #8]
6000169e:	cmp	r2, r1
600016a0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016a2:	ldrb	r0, [r3, #8]
		if (sda_pin == 255) return;
600016a4:	cmp	r0, #255	@ 0xff
600016a6:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (sda_pin == pin) break;
600016a8:	cmp	r1, r0
600016aa:	beq.n	600016d8 <TwoWire::setSDA(unsigned char)+0x48>
		if (sda_pin == 255) return;
600016ac:	ldrb	r1, [r3, #24]
600016ae:	cmp	r1, #255	@ 0xff
600016b0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
600016b2:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b4:	ldr	r1, [r3, #0]
		configSDApin(newindex);
600016b6:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b8:	ldr	r3, [r3, #4]
600016ba:	ldr	r1, [r1, #0]
600016bc:	tst	r1, r3
600016be:	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x44>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c0:	ldr	r3, [pc, #24]	@ (600016dc <TwoWire::setSDA(unsigned char)+0x4c>)
		configSDApin(newindex);
600016c2:	mov	r1, r5
600016c4:	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c6:	add.w	r3, r3, r2, lsl #4
600016ca:	movs	r2, #5
600016cc:	ldr	r3, [r3, #4]
600016ce:	str	r2, [r3, #0]
		configSDApin(newindex);
600016d0:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016d4:	strb	r5, [r4, #24]
}
600016d6:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
600016d8:	movs	r5, #0
600016da:	b.n	600016b4 <TwoWire::setSDA(unsigned char)+0x24>
600016dc:	.word	0x20000764

600016e0 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e0:	ldr	r3, [r0, #20]
600016e2:	ldr	r2, [pc, #40]	@ (6000170c <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e4:	add.w	r0, r3, r1, lsl #4
600016e8:	add.w	r1, r3, r1, lsl #4
{
600016ec:	push	{r4, r5, lr}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016ee:	ldrb.w	r4, [r0, #40]	@ 0x28
600016f2:	ldr	r5, [pc, #28]	@ (60001710 <TwoWire::configSCLpin(unsigned char)+0x30>)
600016f4:	add.w	r2, r2, r4, lsl #4
600016f8:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fa:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fe:	ldr	r0, [r0, #44]	@ 0x2c
60001700:	str	r0, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001702:	ldr	r3, [r1, #48]	@ 0x30
60001704:	cbz	r3, 6000170a <TwoWire::configSCLpin(unsigned char)+0x2a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001706:	ldr	r2, [r1, #52]	@ 0x34
60001708:	str	r2, [r3, #0]
	}
}
6000170a:	pop	{r4, r5, pc}
6000170c:	.word	0x20000764
60001710:	.word	0x0001f861

60001714 <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001714:	push	{r3, r4, r5, lr}
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001716:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001718:	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000171a:	ldrb	r2, [r0, #25]
6000171c:	add.w	r2, r3, r2, lsl #4
60001720:	ldrb.w	r2, [r2, #40]	@ 0x28
60001724:	cmp	r2, r1
60001726:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001728:	ldrb.w	r0, [r3, #40]	@ 0x28
		if (scl_pin == 255) return;
6000172c:	cmp	r0, #255	@ 0xff
6000172e:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (scl_pin == pin) break;
60001730:	cmp	r1, r0
60001732:	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == 255) return;
60001734:	ldrb.w	r1, [r3, #56]	@ 0x38
60001738:	cmp	r1, #255	@ 0xff
6000173a:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
6000173c:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173e:	ldr	r1, [r3, #0]
		configSCLpin(newindex);
60001740:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001742:	ldr	r3, [r3, #4]
60001744:	ldr	r1, [r1, #0]
60001746:	tst	r1, r3
60001748:	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4a>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174a:	ldr	r3, [pc, #28]	@ (60001768 <TwoWire::setSCL(unsigned char)+0x54>)
		configSCLpin(newindex);
6000174c:	mov	r1, r5
6000174e:	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001750:	add.w	r3, r3, r2, lsl #4
60001754:	movs	r2, #5
60001756:	ldr	r3, [r3, #4]
60001758:	str	r2, [r3, #0]
		configSCLpin(newindex);
6000175a:	bl	600016e0 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175e:	strb	r5, [r4, #25]
}
60001760:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
60001762:	movs	r5, #0
60001764:	b.n	6000173e <TwoWire::setSCL(unsigned char)+0x2a>
60001766:	nop
60001768:	.word	0x20000764

6000176c <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	ldr	r2, [pc, #60]	@ (600017ac <TwoWire::begin()+0x40>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176e:	ldr	r1, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001770:	ldr	r3, [r2, #56]	@ 0x38
60001772:	bic.w	r3, r3, #16515072	@ 0xfc0000
60001776:	orr.w	r3, r3, #262144	@ 0x40000
{
6000177a:	push	{r4, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000177c:	str	r3, [r2, #56]	@ 0x38
{
6000177e:	mov	r4, r0
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001780:	ldr	r2, [r1, #0]
60001782:	ldr	r1, [r1, #4]
60001784:	ldr	r3, [r2, #0]
60001786:	orrs	r3, r1
	setClock(100000);
60001788:	ldr	r1, [pc, #36]	@ (600017b0 <TwoWire::begin()+0x44>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
6000178c:	movs	r2, #2
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
6000178e:	ldr	r3, [r0, #16]
	port->MCR = LPI2C_MCR_RST;
60001790:	str	r2, [r3, #16]
	setClock(100000);
60001792:	bl	60002490 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
60001796:	ldrb	r1, [r4, #24]
60001798:	mov	r0, r4
6000179a:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
6000179e:	ldrb	r1, [r4, #25]
600017a0:	mov	r0, r4
}
600017a2:	ldmia.w	sp!, {r4, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017a6:	b.w	600016e0 <TwoWire::configSCLpin(unsigned char)>
600017aa:	nop
600017ac:	.word	0x400fc000
600017b0:	.word	0x000186a0

600017b4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017b4:	ldr	r3, [pc, #192]	@ (60001878 <usb_init+0xc4>)
600017b6:	movw	r2, #3937	@ 0xf61
{
600017ba:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017bc:	str.w	r2, [r3, #288]	@ 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600017c0:	bl	600024a8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c4:	ldr	r2, [pc, #180]	@ (6000187c <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017c6:	ldr	r1, [pc, #184]	@ (60001880 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c8:	ldr.w	r3, [r2, #128]	@ 0x80
600017cc:	orr.w	r3, r3, #3
600017d0:	str.w	r3, [r2, #128]	@ 0x80
	USB1_BURSTSIZE = 0x0404;
600017d4:	movw	r2, #1028	@ 0x404
600017d8:	ldr	r3, [pc, #168]	@ (60001884 <usb_init+0xd0>)
600017da:	str.w	r2, [r3, #352]	@ 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017de:	ldr	r2, [pc, #168]	@ (60001888 <usb_init+0xd4>)
600017e0:	ldr	r0, [r2, #0]
600017e2:	tst	r0, r1
600017e4:	bne.n	600017ee <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017e6:	ldr.w	r1, [r3, #424]	@ 0x1a8
600017ea:	lsls	r4, r1, #30
600017ec:	beq.n	60001824 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017ee:	mov.w	r1, #2147483648	@ 0x80000000
600017f2:	str	r1, [r2, #52]	@ 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017f4:	ldr.w	r2, [r3, #320]	@ 0x140
600017f8:	orr.w	r2, r2, #2
600017fc:	str.w	r2, [r3, #320]	@ 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001800:	ldr	r2, [pc, #128]	@ (60001884 <usb_init+0xd0>)
60001802:	ldr.w	r3, [r2, #320]	@ 0x140
60001806:	lsls	r0, r3, #30
60001808:	bmi.n	60001802 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000180a:	mov.w	r3, #3758153728	@ 0xe000e000
6000180e:	mov.w	r2, #131072	@ 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001812:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001814:	str.w	r2, [r3, #652]	@ 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001818:	mov.w	r2, #2147483648	@ 0x80000000
6000181c:	ldr	r3, [pc, #104]	@ (60001888 <usb_init+0xd4>)
6000181e:	str	r2, [r3, #56]	@ 0x38
		delay(25);
60001820:	bl	60002448 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001824:	ldr	r3, [pc, #96]	@ (60001888 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
60001826:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001828:	mov.w	r2, #1073741824	@ 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000182c:	ldr	r4, [pc, #84]	@ (60001884 <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000182e:	str	r2, [r3, #56]	@ 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001830:	mov.w	r2, #768	@ 0x300
	USBPHY1_PWD = 0;
60001834:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001836:	movs	r3, #10
60001838:	str.w	r3, [r4, #424]	@ 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000183c:	ldr	r3, [pc, #76]	@ (6000188c <usb_init+0xd8>)
6000183e:	mov	r0, r3
60001840:	bl	60002438 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001844:	mov.w	r2, #4227072	@ 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001848:	movw	r3, #323	@ 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000184c:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000184e:	mov.w	r2, #4194304	@ 0x400000
60001852:	str	r2, [r0, #64]	@ 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001854:	str.w	r0, [r4, #344]	@ 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001858:	ldr	r2, [pc, #52]	@ (60001890 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000185a:	str.w	r3, [r4, #328]	@ 0x148
6000185e:	ldr	r3, [pc, #52]	@ (60001894 <usb_init+0xe0>)
60001860:	str.w	r2, [r3, #516]	@ 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001864:	mov.w	r3, #3758153728	@ 0xe000e000
60001868:	mov.w	r2, #131072	@ 0x20000
6000186c:	str.w	r2, [r3, #268]	@ 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001870:	movs	r3, #1
60001872:	str.w	r3, [r4, #320]	@ 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001876:	pop	{r4, pc}
60001878:	.word	0x400d8000
6000187c:	.word	0x400fc000
60001880:	.word	0x001e1c00
60001884:	.word	0x402e0000
60001888:	.word	0x400d9000
6000188c:	.word	0x20000000
60001890:	.word	0x0000afa5
60001894:	.word	0x20002800

60001898 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001898:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000189a:	ldr	r3, [pc, #60]	@ (600018d8 <_reboot_Teensyduino_+0x40>)
6000189c:	ldr	r3, [r3, #96]	@ 0x60
6000189e:	lsls	r3, r3, #30
600018a0:	bmi.n	600018a4 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600018a2:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600018a4:	cpsid	i
		USB1_USBCMD = 0;
600018a6:	ldr	r3, [pc, #52]	@ (600018dc <_reboot_Teensyduino_+0x44>)
600018a8:	movs	r2, #0
600018aa:	str.w	r2, [r3, #320]	@ 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
600018ae:	sub.w	r3, r3, #2310144	@ 0x234000
600018b2:	ldr	r2, [pc, #44]	@ (600018e0 <_reboot_Teensyduino_+0x48>)
600018b4:	str	r2, [r3, #64]	@ 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600018b6:	sub.w	r3, r3, #534773760	@ 0x1fe00000
600018ba:	sub.w	r3, r3, #700416	@ 0xab000
600018be:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600018c0:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
600018c4:	ldr	r0, [pc, #28]	@ (600018e4 <_reboot_Teensyduino_+0x4c>)
600018c6:	ldr	r3, [pc, #32]	@ (600018e8 <_reboot_Teensyduino_+0x50>)
600018c8:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600018ca:	mov.w	r3, #2097152	@ 0x200000
600018ce:	ldr	r3, [r3, #28]
600018d0:	ldr	r3, [r3, #8]
600018d2:	blx	r3
600018d4:	b.n	600018a4 <_reboot_Teensyduino_+0xc>
600018d6:	nop
600018d8:	.word	0x401f4400
600018dc:	.word	0x402e0000
600018e0:	.word	0x00200003
600018e4:	.word	0x20208000
600018e8:	.word	0xeb120000

600018ec <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600018ec:	ldr	r3, [pc, #28]	@ (6000190c <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ee:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
600018f2:	str.w	r1, [r3, #160]	@ 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018f6:	str.w	r0, [r3, #164]	@ 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018fa:	str.w	r2, [r3, #176]	@ 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018fe:	ldr	r2, [r3, #20]
60001900:	lsls	r2, r2, #31
60001902:	bpl.n	600018fe <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	movs	r2, #1
60001906:	str	r2, [r3, #20]
}
60001908:	bx	lr
6000190a:	nop
6000190c:	.word	0x402a4000

60001910 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
60001910:	ldr	r3, [pc, #32]	@ (60001934 <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001912:	ldr	r2, [pc, #36]	@ (60001938 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
60001914:	str.w	r0, [r3, #160]	@ 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001918:	str.w	r2, [r3, #164]	@ 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000191c:	movs	r2, #1
6000191e:	str.w	r2, [r3, #176]	@ 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001922:	ldr	r2, [r3, #20]
60001924:	lsls	r2, r2, #31
60001926:	bpl.n	60001922 <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
60001928:	ldr.w	r0, [r3, #256]	@ 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000192c:	movs	r2, #33	@ 0x21
}
6000192e:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001930:	str	r2, [r3, #20]
}
60001932:	bx	lr
60001934:	.word	0x402a4000
60001938:	.word	0x00030004

6000193c <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
6000193c:	bx	lr

6000193e <startup_default_middle_hook>:
FLASHMEM void startup_default_middle_hook(void) {}
6000193e:	bx	lr

60001940 <startup_default_late_hook>:
FLASHMEM void startup_default_late_hook(void) {}
60001940:	bx	lr

60001942 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001942:	nop
60001944:	bx	lr

60001946 <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
60001946:	mov.w	r3, #3758153728	@ 0xe000e000
6000194a:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000194c:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
6000194e:	str.w	r1, [r3, #3476]	@ 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001952:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001956:	ldr	r2, [pc, #184]	@ (60001a10 <configure_cache+0xca>)
60001958:	str.w	r2, [r3, #3488]	@ 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000195c:	movs	r2, #17
6000195e:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001962:	ldr	r2, [pc, #176]	@ (60001a14 <configure_cache+0xce>)
60001964:	str.w	r2, [r3, #3488]	@ 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001968:	movs	r2, #18
6000196a:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000196e:	ldr	r2, [pc, #168]	@ (60001a18 <configure_cache+0xd2>)
60001970:	str.w	r2, [r3, #3488]	@ 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001974:	ldr	r2, [pc, #164]	@ (60001a1c <configure_cache+0xd6>)
60001976:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000197a:	ldr	r2, [pc, #164]	@ (60001a20 <configure_cache+0xda>)
6000197c:	str.w	r2, [r3, #3488]	@ 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001980:	ldr	r2, [pc, #160]	@ (60001a24 <configure_cache+0xde>)
60001982:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001986:	ldr	r2, [pc, #160]	@ (60001a28 <configure_cache+0xe2>)
60001988:	str.w	r2, [r3, #3488]	@ 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000198c:	ldr	r2, [pc, #156]	@ (60001a2c <configure_cache+0xe6>)
6000198e:	orr.w	r2, r2, #21
60001992:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001996:	ldr	r2, [pc, #152]	@ (60001a30 <configure_cache+0xea>)
60001998:	str.w	r2, [r3, #3488]	@ 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000199c:	add.w	r2, r2, #270532608	@ 0x10200000
600019a0:	adds	r2, #13
600019a2:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600019a6:	ldr	r2, [pc, #140]	@ (60001a34 <configure_cache+0xee>)
600019a8:	str.w	r2, [r3, #3488]	@ 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600019ac:	ldr	r2, [pc, #136]	@ (60001a38 <configure_cache+0xf2>)
600019ae:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019b2:	ldr	r2, [pc, #136]	@ (60001a3c <configure_cache+0xf6>)
600019b4:	str.w	r2, [r3, #3488]	@ 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600019b8:	ldr	r2, [pc, #132]	@ (60001a40 <configure_cache+0xfa>)
600019ba:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600019be:	ldr	r2, [pc, #132]	@ (60001a44 <configure_cache+0xfe>)
600019c0:	str.w	r2, [r3, #3488]	@ 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600019c4:	ldr	r2, [pc, #128]	@ (60001a48 <configure_cache+0x102>)
600019c6:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600019ca:	ldr	r2, [pc, #128]	@ (60001a4c <configure_cache+0x106>)
600019cc:	str.w	r2, [r3, #3488]	@ 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600019d0:	ldr	r2, [pc, #124]	@ (60001a50 <configure_cache+0x10a>)
600019d2:	str.w	r2, [r3, #3484]	@ 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600019d6:	ldr	r2, [pc, #124]	@ (60001a54 <configure_cache+0x10e>)
600019d8:	str.w	r2, [r3, #3488]	@ 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600019dc:	nop
	asm("nop");
600019de:	nop
	asm("nop");
600019e0:	nop
	asm("nop");
600019e2:	nop
	asm("nop");
600019e4:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600019e6:	movs	r2, #1
600019e8:	str.w	r2, [r3, #3476]	@ 0xd94
	asm("dsb");
600019ec:	dsb	sy
	asm("isb");
600019f0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600019f4:	str.w	r1, [r3, #3920]	@ 0xf50
	asm("dsb");
600019f8:	dsb	sy
	asm("isb");
600019fc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a00:	ldr.w	r2, [r3, #3348]	@ 0xd14
60001a04:	orr.w	r2, r2, #196608	@ 0x30000
60001a08:	str.w	r2, [r3, #3348]	@ 0xd14
}
60001a0c:	bx	lr
60001a0e:	nop
60001a10:	.word	0x1000003f
60001a14:	.word	0x07080025
60001a18:	.word	0x00100009
60001a1c:	.word	0x00200013
60001a20:	.word	0x07020021
60001a24:	.word	0x20000014
60001a28:	.word	0x13080025
60001a2c:	.word	0x20012b00
60001a30:	.word	0x10000009
60001a34:	.word	0x130b0027
60001a38:	.word	0x40000017
60001a3c:	.word	0x13100033
60001a40:	.word	0x60000018
60001a44:	.word	0x070b002f
60001a48:	.word	0x70000019
60001a4c:	.word	0x130b002f
60001a50:	.word	0x8000001a
60001a54:	.word	0x130b003b

60001a58 <configure_external_ram>:
{
60001a58:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a5a:	ldr	r3, [pc, #536]	@ (60001c74 <configure_external_ram+0x21c>)
60001a5c:	ldr	r2, [pc, #536]	@ (60001c78 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a5e:	ldr	r1, [pc, #540]	@ (60001c7c <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a60:	str.w	r2, [r3, #604]	@ 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a64:	str.w	r1, [r3, #608]	@ 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a68:	str.w	r2, [r3, #612]	@ 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a6c:	sub.w	r2, r2, #45056	@ 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a70:	ldr	r4, [pc, #524]	@ (60001c80 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a72:	str.w	r2, [r3, #616]	@ 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a76:	add.w	r2, r2, #28672	@ 0x7000
60001a7a:	str.w	r2, [r3, #620]	@ 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a7e:	str.w	r2, [r3, #624]	@ 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a82:	str.w	r2, [r3, #628]	@ 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a86:	str.w	r2, [r3, #632]	@ 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a8a:	movs	r2, #24
60001a8c:	str	r2, [r3, #108]	@ 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001a8e:	str	r2, [r3, #112]	@ 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001a90:	str	r2, [r3, #116]	@ 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001a92:	str	r2, [r3, #120]	@ 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001a94:	str	r2, [r3, #124]	@ 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001a96:	str.w	r2, [r3, #128]	@ 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001a9a:	str.w	r2, [r3, #132]	@ 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a9e:	str.w	r2, [r3, #136]	@ 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001aa2:	movs	r2, #1
60001aa4:	str.w	r2, [r3, #1836]	@ 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001aa8:	str.w	r2, [r3, #1840]	@ 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001aac:	str.w	r2, [r3, #1844]	@ 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001ab0:	str.w	r2, [r3, #1848]	@ 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001ab4:	str.w	r2, [r3, #1852]	@ 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001ab8:	str.w	r2, [r3, #1872]	@ 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001abc:	ldr	r2, [pc, #452]	@ (60001c84 <configure_external_ram+0x22c>)
60001abe:	ldr	r3, [r2, #24]
60001ac0:	bic.w	r3, r3, #3758096384	@ 0xe0000000
60001ac4:	bic.w	r3, r3, #768	@ 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001ac8:	orr.w	r3, r3, #2684354560	@ 0xa0000000
60001acc:	orr.w	r3, r3, #768	@ 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ad0:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001ad2:	ldr.w	r3, [r2, #132]	@ 0x84
60001ad6:	orr.w	r3, r3, #12
60001ada:	str.w	r3, [r2, #132]	@ 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001ade:	ldr	r3, [pc, #424]	@ (60001c88 <configure_external_ram+0x230>)
60001ae0:	ldr	r2, [r3, #0]
60001ae2:	orr.w	r2, r2, #2
60001ae6:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ae8:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001aea:	ldr	r2, [pc, #416]	@ (60001c8c <configure_external_ram+0x234>)
60001aec:	bic.w	r1, r1, #30848	@ 0x7880
60001af0:	bic.w	r1, r1, #115	@ 0x73
60001af4:	lsls	r1, r1, #16
60001af6:	lsrs	r1, r1, #16
60001af8:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001afa:	ldr	r1, [pc, #404]	@ (60001c90 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001afc:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001afe:	mov.w	r2, #4294967295
60001b02:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b04:	add.w	r2, r2, #16187392	@ 0xf70000
60001b08:	ldr	r0, [r1, #8]
60001b0a:	add.w	r2, r2, #14336	@ 0x3800
60001b0e:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b10:	ldr	r0, [pc, #384]	@ (60001c94 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001b12:	orr.w	r2, r2, #536870912	@ 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b16:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001b18:	ldr	r2, [r3, #12]
60001b1a:	bic.w	r2, r2, #120	@ 0x78
60001b1e:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b20:	ldr	r2, [r3, #32]
60001b22:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b24:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b26:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b28:	ldr	r2, [r3, #32]
60001b2a:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b2c:	mov.w	r4, #8192	@ 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b30:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b32:	ldr	r0, [pc, #356]	@ (60001c98 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b34:	str	r2, [r3, #36]	@ 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b36:	ldr	r2, [pc, #356]	@ (60001c9c <configure_external_ram+0x244>)
60001b38:	str	r2, [r3, #40]	@ 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001b3a:	str	r2, [r3, #44]	@ 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001b3c:	ldr.w	r2, [r1, #184]	@ 0xb8
60001b40:	bic.w	r2, r2, #63	@ 0x3f
60001b44:	orr.w	r2, r2, #1
60001b48:	str.w	r2, [r3, #184]	@ 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b4c:	ldr.w	r2, [r1, #188]	@ 0xbc
	FLEXSPI2_INTEN = 0;
60001b50:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b52:	bic.w	r2, r2, #63	@ 0x3f
60001b56:	orr.w	r2, r2, #1
60001b5a:	str.w	r2, [r3, #188]	@ 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b5e:	movw	r2, #1541	@ 0x605
	FLEXSPI2_INTEN = 0;
60001b62:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b64:	str	r4, [r3, #96]	@ 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b66:	str	r0, [r3, #112]	@ 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b68:	str.w	r2, [r3, #128]	@ 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001b6c:	str	r4, [r3, #100]	@ 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b6e:	str	r0, [r3, #116]	@ 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b70:	str.w	r2, [r3, #132]	@ 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b74:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b76:	ldr	r0, [pc, #296]	@ (60001ca0 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b78:	bic.w	r2, r2, #2
60001b7c:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b7e:	ldr	r2, [pc, #292]	@ (60001ca4 <configure_external_ram+0x24c>)
60001b80:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b82:	movs	r2, #2
60001b84:	str	r2, [r3, #28]
60001b86:	ldr	r2, [pc, #288]	@ (60001ca8 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b88:	str.w	r1, [r2], #4
60001b8c:	cmp	r2, r0
60001b8e:	bne.n	60001b88 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001b90:	ldr	r2, [r3, #0]
60001b92:	orr.w	r2, r2, #1
60001b96:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b98:	ldr	r3, [pc, #236]	@ (60001c88 <configure_external_ram+0x230>)
60001b9a:	ldr	r4, [r3, #0]
60001b9c:	ands.w	r4, r4, #1
60001ba0:	bne.n	60001b9a <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ba2:	ldr	r2, [pc, #256]	@ (60001ca4 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ba4:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001ba6:	mov	r1, r4
60001ba8:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001baa:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bac:	movw	r2, #1781	@ 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bb0:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bb2:	str.w	r2, [r3, #512]	@ 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001bb6:	movw	r2, #1126	@ 0x466
60001bba:	str.w	r2, [r3, #528]	@ 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001bbe:	movw	r2, #1177	@ 0x499
60001bc2:	str.w	r2, [r3, #544]	@ 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001bc6:	ldr	r2, [pc, #228]	@ (60001cac <configure_external_ram+0x254>)
60001bc8:	str.w	r2, [r3, #560]	@ 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001bcc:	movw	r2, #9217	@ 0x2401
60001bd0:	str.w	r2, [r3, #564]	@ 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001bd4:	movw	r2, #1077	@ 0x435
60001bd8:	str.w	r2, [r3, #576]	@ 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001bdc:	ldr	r2, [pc, #208]	@ (60001cb0 <configure_external_ram+0x258>)
60001bde:	str.w	r2, [r3, #592]	@ 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001be2:	ldr	r2, [pc, #208]	@ (60001cb4 <configure_external_ram+0x25c>)
60001be4:	str.w	r2, [r3, #596]	@ 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001be8:	ldr	r2, [pc, #204]	@ (60001cb8 <configure_external_ram+0x260>)
60001bea:	str.w	r2, [r3, #608]	@ 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001bee:	movw	r2, #8705	@ 0x2201
60001bf2:	str.w	r2, [r3, #612]	@ 0x264
	flexspi2_command(0, 0); // exit quad mode
60001bf6:	bl	600018ec <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001bfa:	movs	r0, #1
60001bfc:	bl	600018ec <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001c00:	mov	r0, r6
60001c02:	bl	600018ec <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c06:	mov	r0, r4
60001c08:	bl	60001910 <flexspi2_psram_id>
60001c0c:	movw	r3, #23821	@ 0x5d0d
60001c10:	mov	r5, r0
60001c12:	cmp	r0, r3
60001c14:	bne.n	60001c66 <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001c16:	movs	r0, #4
60001c18:	bl	600018ec <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001c1c:	mov.w	r1, #8388608	@ 0x800000
60001c20:	mov	r0, r4
60001c22:	bl	600018ec <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001c26:	movs	r0, #1
60001c28:	bl	600018ec <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001c2c:	mov	r0, r6
60001c2e:	bl	600018ec <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c32:	mov	r0, r1
60001c34:	bl	60001910 <flexspi2_psram_id>
60001c38:	cmp	r0, r5
60001c3a:	bne.n	60001c62 <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001c3c:	movs	r0, #4
60001c3e:	bl	600018ec <flexspi2_command>
			external_psram_size = 16;
60001c42:	movs	r0, #16
			external_psram_size * 0x100000 -
60001c44:	ldr	r1, [pc, #116]	@ (60001cbc <configure_external_ram+0x264>)
			external_psram_size = 16;
60001c46:	ldr	r3, [pc, #120]	@ (60001cc0 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001c48:	ldr	r2, [pc, #120]	@ (60001cc4 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001c4a:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c4c:	movs	r3, #0
			external_psram_size * 0x100000 -
60001c4e:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c50:	str	r3, [sp, #0]
60001c52:	movs	r3, #1
60001c54:	add.w	r2, r2, r0, lsl #20
60001c58:	ldr	r0, [pc, #108]	@ (60001cc8 <configure_external_ram+0x270>)
60001c5a:	bl	60002488 <__sm_set_pool_veneer>
}
60001c5e:	add	sp, #8
60001c60:	pop	{r4, r5, r6, pc}
60001c62:	movs	r0, #8
60001c64:	b.n	60001c44 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c66:	movs	r2, #16
60001c68:	ldr	r0, [pc, #92]	@ (60001cc8 <configure_external_ram+0x270>)
}
60001c6a:	add	sp, #8
60001c6c:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c70:	b.w	60002438 <__memset_veneer>
60001c74:	.word	0x401f8000
60001c78:	.word	0x0001b0f9
60001c7c:	.word	0x000110f9
60001c80:	.word	0x7cf0ff00
60001c84:	.word	0x400fc000
60001c88:	.word	0x402a4000
60001c8c:	.word	0xffff0012
60001c90:	.word	0x402a8000
60001c94:	.word	0x80000040
60001c98:	.word	0x00020063
60001c9c:	.word	0x830f00ff
60001ca0:	.word	0x402a4300
60001ca4:	.word	0x5af05af0
60001ca8:	.word	0x402a4200
60001cac:	.word	0x3018049f
60001cb0:	.word	0x0a1806eb
60001cb4:	.word	0x26013206
60001cb8:	.word	0x0a180638
60001cbc:	.word	0x70240000
60001cc0:	.word	0x20012aab
60001cc4:	.word	0x70000000
60001cc8:	.word	0x20012098

60001ccc <usb_pll_start>:
{
60001ccc:	push	{r4, r5, r6, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cce:	ldr	r3, [pc, #88]	@ (60001d28 <usb_pll_start+0x5c>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001cd0:	mov.w	r1, #4096	@ 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cd4:	mov.w	r0, #8192	@ 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cd8:	mov.w	r4, #49152	@ 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cdc:	mov.w	r5, #65536	@ 0x10000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ce0:	movw	r6, #12354	@ 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ce4:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001ce6:	tst.w	r2, #2
60001cea:	beq.n	60001cf4 <usb_pll_start+0x28>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cec:	str	r4, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cee:	str	r5, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cf0:	str	r6, [r3, #24]
			continue;
60001cf2:	b.n	60001ce4 <usb_pll_start+0x18>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cf4:	tst.w	r2, #8192	@ 0x2000
60001cf8:	bne.n	60001cfe <usb_pll_start+0x32>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cfa:	str	r0, [r3, #20]
			continue;
60001cfc:	b.n	60001ce4 <usb_pll_start+0x18>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001cfe:	tst.w	r2, #4096	@ 0x1000
60001d02:	bne.n	60001d08 <usb_pll_start+0x3c>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d04:	str	r1, [r3, #20]
			continue;
60001d06:	b.n	60001ce4 <usb_pll_start+0x18>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d08:	cmp	r2, #0
60001d0a:	bge.n	60001ce4 <usb_pll_start+0x18>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d0c:	tst.w	r2, #65536	@ 0x10000
60001d10:	beq.n	60001d1a <usb_pll_start+0x4e>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d12:	mov.w	r2, #65536	@ 0x10000
60001d16:	str	r2, [r3, #24]
			continue;
60001d18:	b.n	60001ce4 <usb_pll_start+0x18>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d1a:	lsls	r2, r2, #25
60001d1c:	bmi.n	60001d24 <usb_pll_start+0x58>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d1e:	movs	r2, #64	@ 0x40
60001d20:	str	r2, [r3, #20]
			continue;
60001d22:	b.n	60001ce4 <usb_pll_start+0x18>
}
60001d24:	pop	{r4, r5, r6, pc}
60001d26:	nop
60001d28:	.word	0x400d8000

60001d2c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d2c:	ldr	r2, [pc, #248]	@ (60001e28 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2e:	vmov.f32	s12, #57	@ 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d32:	ldr	r0, [pc, #248]	@ (60001e2c <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d34:	ldr.w	r3, [r2, #128]	@ 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d38:	vldr	s10, [pc, #244]	@ 60001e30 <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d3c:	bic.w	r3, r3, #1
{
60001d40:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d42:	str.w	r3, [r2, #128]	@ 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d46:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d48:	ldr	r4, [pc, #232]	@ (60001e34 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d4a:	str.w	r3, [r2, #144]	@ 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d4e:	ldr	r3, [pc, #232]	@ (60001e38 <tempmon_init+0x10c>)
60001d50:	ldr.w	r3, [r3, #224]	@ 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d54:	uxtb	r1, r3
60001d56:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d58:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d5c:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d60:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d62:	vcvt.f32.s32	s14, s15
60001d66:	ldr	r1, [pc, #212]	@ (60001e3c <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d68:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d6c:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d6e:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d72:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d76:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d7a:	ldr	r3, [pc, #196]	@ (60001e40 <tempmon_init+0x114>)
60001d7c:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d80:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d84:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d88:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d8c:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d90:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d94:	ldr.w	r3, [r2, #128]	@ 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d98:	vdiv.f32	s11, s10, s12
60001d9c:	vadd.f32	s11, s11, s13
60001da0:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001da4:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da8:	vldr	s11, [pc, #152]	@ 60001e44 <tempmon_init+0x118>
60001dac:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001db0:	orr.w	r3, r3, r1, lsl #20
60001db4:	str.w	r3, [r2, #128]	@ 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db8:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dbc:	ldr	r3, [pc, #136]	@ (60001e48 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dbe:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dc2:	ldr.w	r1, [r2, #400]	@ 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dc6:	vdiv.f32	s11, s14, s12
60001dca:	vadd.f32	s14, s11, s13
60001dce:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dd2:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd6:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dda:	and.w	r3, r3, r0, lsl #16
60001dde:	orrs	r3, r1
60001de0:	str.w	r3, [r2, #400]	@ 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001de4:	ldr.w	r1, [r2, #400]	@ 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de8:	vadd.f32	s15, s14, s13
60001dec:	vcvt.u32.f32	s15, s15
60001df0:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001df4:	ubfx	r3, r3, #0, #12
60001df8:	orrs	r3, r1
60001dfa:	str.w	r3, [r2, #400]	@ 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dfe:	ldr.w	r3, [r2, #128]	@ 0x80
60001e02:	orr.w	r3, r3, #2
60001e06:	str.w	r3, [r2, #128]	@ 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e0a:	movs	r2, #0
60001e0c:	ldr	r3, [pc, #60]	@ (60001e4c <tempmon_init+0x120>)
60001e0e:	strb.w	r2, [r3, #64]	@ 0x40
60001e12:	ldr	r3, [pc, #60]	@ (60001e50 <tempmon_init+0x124>)
60001e14:	ldr	r2, [pc, #60]	@ (60001e54 <tempmon_init+0x128>)
60001e16:	str.w	r2, [r3, #320]	@ 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e1a:	mov.w	r3, #3758153728	@ 0xe000e000
60001e1e:	movs	r2, #1
60001e20:	str.w	r2, [r3, #264]	@ 0x108
}
60001e24:	pop	{r4, pc}
60001e26:	nop
60001e28:	.word	0x400d8100
60001e2c:	.word	0x200121c4
60001e30:	.word	0x42aa0000
60001e34:	.word	0x200121c0
60001e38:	.word	0x401f4400
60001e3c:	.word	0x200121c8
60001e40:	.word	0x200121cc
60001e44:	.word	0x42b40000
60001e48:	.word	0x0fff0000
60001e4c:	.word	0xe000e400
60001e50:	.word	0x20002800
60001e54:	.word	0x0000bf15

60001e58 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e58:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e5a:	ldr	r4, [pc, #64]	@ (60001e9c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001e5c:	ldr.w	r3, [r4, #128]	@ 0x80
60001e60:	cmp	r3, #11
60001e62:	bne.n	60001e96 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e64:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001e68:	ldr	r2, [pc, #52]	@ (60001ea0 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e6a:	ldr	r6, [pc, #56]	@ (60001ea4 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001e6c:	ldr	r5, [pc, #56]	@ (60001ea8 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001e6e:	ldr	r1, [r2, #0]
60001e70:	adds	r2, #4
60001e72:	eors	r3, r1
60001e74:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e76:	sbfx	r0, r3, #0, #1
60001e7a:	subs	r1, #1
60001e7c:	and.w	r0, r0, r6
60001e80:	eor.w	r3, r0, r3, lsr #1
60001e84:	bne.n	60001e76 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001e86:	cmp	r2, r5
60001e88:	bne.n	60001e6e <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001e8a:	ldr.w	r0, [r4, #168]	@ 0xa8
60001e8e:	subs	r3, r0, r3
60001e90:	negs	r0, r3
60001e92:	adcs	r0, r3
	return 1;
}
60001e94:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001e96:	movs	r0, #0
60001e98:	b.n	60001e94 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001e9a:	nop
60001e9c:	.word	0x2027ff00
60001ea0:	.word	0x2027ff80
60001ea4:	.word	0xedb88320
60001ea8:	.word	0x2027ffa8

60001eac <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001eac:	ldr	r2, [pc, #96]	@ (60001f10 <CrashReportClass::clear()+0x64>)
60001eae:	movs	r3, #0
{
60001eb0:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001eb2:	strd	r3, r3, [r2, #128]	@ 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001eb6:	strd	r3, r3, [r2, #136]	@ 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001eba:	strd	r3, r3, [r2, #144]	@ 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001ebe:	strd	r3, r3, [r2, #152]	@ 0x98
	info->crc = 0;
60001ec2:	str.w	r3, [r2, #168]	@ 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001ec6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001eca:	mov.w	r4, #3758153728	@ 0xe000e000
60001ece:	adds	r2, #128	@ 0x80
60001ed0:	str.w	r2, [r4, #3952]	@ 0xf70
60001ed4:	adds	r2, #32
60001ed6:	str.w	r2, [r4, #3952]	@ 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001eda:	dsb	sy
	asm("isb");
60001ede:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee2:	ldr	r2, [pc, #48]	@ (60001f14 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ee4:	ldr	r6, [pc, #48]	@ (60001f18 <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee6:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee8:	ldr	r5, [pc, #48]	@ (60001f1c <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001eea:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001eec:	movs	r1, #28
	SRC_GPR5 = 0;
60001eee:	str	r3, [r2, #48]	@ 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ef0:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ef2:	str.w	r3, [r6, #4032]	@ 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ef6:	bl	60002440 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001efa:	str.w	r0, [r6, #4060]	@ 0xfdc
	asm("dsb");
60001efe:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001f02:	str.w	r5, [r4, #3944]	@ 0xf68
	asm("dsb");
60001f06:	dsb	sy
	asm("isb");
60001f0a:	isb	sy
}
60001f0e:	pop	{r4, r5, r6, pc}
60001f10:	.word	0x2027ff00
60001f14:	.word	0x400f8000
60001f18:	.word	0x2027f000
60001f1c:	.word	0x2027ffc0

60001f20 <CrashReportClass::printTo(Print&) const>:
{
60001f20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001f24:	mov	r4, r1
  if (isvalid(info)) {
60001f26:	bl	60001e58 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001f2a:	cmp	r0, #0
60001f2c:	beq.w	600022dc <CrashReportClass::printTo(Print&) const+0x3bc>
    uint8_t ss = info->time % 60;
60001f30:	ldr	r6, [pc, #704]	@ (600021f4 <CrashReportClass::printTo(Print&) const+0x2d4>)
    p.println("CrashReport:");
60001f32:	mov	r0, r4
60001f34:	ldr	r1, [pc, #704]	@ (600021f8 <CrashReportClass::printTo(Print&) const+0x2d8>)
    info->time /= 60;
60001f36:	movs	r5, #60	@ 0x3c
    p.println("CrashReport:");
60001f38:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
    uint8_t ss = info->time % 60;
60001f3c:	ldr.w	r9, [r6, #164]	@ 0xa4
    p.print("  A problem occurred at (system time) ");
60001f40:	ldr	r1, [pc, #696]	@ (600021fc <CrashReportClass::printTo(Print&) const+0x2dc>)
60001f42:	mov	r0, r4
    info->time /= 60;
60001f44:	udiv	r8, r9, r5
    info->time /= 60;
60001f48:	udiv	r7, r8, r5
60001f4c:	str.w	r7, [r6, #164]	@ 0xa4
    p.print("  A problem occurred at (system time) ");
60001f50:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
    uint8_t hh = info->time % 24;
60001f54:	movs	r1, #24
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001f56:	movs	r3, #0
60001f58:	movs	r2, #10
60001f5a:	udiv	r0, r7, r1
60001f5e:	mls	r1, r1, r0, r7
60001f62:	mov	r0, r4
60001f64:	bl	60002450 <___ZN5Print11printNumberEmhh_veneer>
    p.print(":");
60001f68:	ldr	r1, [pc, #660]	@ (60002200 <CrashReportClass::printTo(Print&) const+0x2e0>)
60001f6a:	mov	r0, r4
60001f6c:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
60001f70:	movs	r3, #0
60001f72:	movs	r2, #10
60001f74:	mls	r1, r5, r7, r8
60001f78:	mov	r0, r4
60001f7a:	bl	60002450 <___ZN5Print11printNumberEmhh_veneer>
    p.print(":");
60001f7e:	ldr	r1, [pc, #640]	@ (60002200 <CrashReportClass::printTo(Print&) const+0x2e0>)
60001f80:	mov	r0, r4
60001f82:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
60001f86:	movs	r3, #0
60001f88:	movs	r2, #10
60001f8a:	mls	r1, r5, r8, r9
60001f8e:	mov	r0, r4
60001f90:	bl	60002450 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001f94:	mov	r0, r4
60001f96:	bl	60002498 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001f9a:	ldr	r1, [pc, #616]	@ (60002204 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001f9c:	mov	r0, r4
60001f9e:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
    p.println(info->ret, HEX);
60001fa2:	movs	r2, #16
60001fa4:	ldr.w	r1, [r6, #152]	@ 0x98
60001fa8:	mov	r0, r4
60001faa:	bl	600024b8 <___ZN5Print7printlnEmi.isra.0_veneer>
    uint32_t _CFSR = info->cfsr;
60001fae:	ldr.w	r5, [r6, #136]	@ 0x88
    if (_CFSR > 0) {
60001fb2:	cmp	r5, #0
60001fb4:	beq.n	6000206a <CrashReportClass::printTo(Print&) const+0x14a>
      p.print("  CFSR: ");
60001fb6:	ldr	r1, [pc, #592]	@ (60002208 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001fb8:	mov	r0, r4
60001fba:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
      p.println(info->cfsr, HEX);
60001fbe:	movs	r2, #16
60001fc0:	ldr.w	r1, [r6, #136]	@ 0x88
60001fc4:	mov	r0, r4
60001fc6:	bl	600024b8 <___ZN5Print7printlnEmi.isra.0_veneer>
      if ((_CFSR & 1) == 1) {
60001fca:	lsls	r2, r5, #31
60001fcc:	bpl.w	6000217a <CrashReportClass::printTo(Print&) const+0x25a>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001fd0:	ldr	r1, [pc, #568]	@ (6000220c <CrashReportClass::printTo(Print&) const+0x2ec>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001fd2:	mov	r0, r4
60001fd4:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001fd8:	lsls	r2, r5, #24
60001fda:	bpl.n	60002036 <CrashReportClass::printTo(Print&) const+0x116>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001fdc:	ldr	r1, [pc, #560]	@ (60002210 <CrashReportClass::printTo(Print&) const+0x2f0>)
60001fde:	mov	r0, r4
60001fe0:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001fe4:	movs	r2, #16
60001fe6:	movs	r3, #0
60001fe8:	ldr.w	r1, [r6, #144]	@ 0x90
60001fec:	mov	r0, r4
60001fee:	bl	60002450 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001ff2:	ldr.w	r2, [r6, #144]	@ 0x90
60001ff6:	cmp	r2, #31
60001ff8:	bhi.w	6000219c <CrashReportClass::printTo(Print&) const+0x27c>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001ffc:	ldr	r1, [pc, #532]	@ (60002214 <CrashReportClass::printTo(Print&) const+0x2f4>)
60001ffe:	mov	r0, r4
60002000:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
60002004:	movs	r3, #0
60002006:	movs	r2, #16
60002008:	ldr.w	r1, [r6, #152]	@ 0x98
6000200c:	mov	r0, r4
6000200e:	bl	60002450 <___ZN5Print11printNumberEmhh_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60002012:	ldr	r1, [pc, #516]	@ (60002218 <CrashReportClass::printTo(Print&) const+0x2f8>)
60002014:	mov	r0, r4
60002016:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
6000201a:	ldr.w	r1, [r6, #152]	@ 0x98
6000201e:	movs	r3, #0
60002020:	movs	r2, #16
60002022:	mov	r0, r4
60002024:	bl	60002450 <___ZN5Print11printNumberEmhh_veneer>
          p.print("\" for filename & line number.");
60002028:	ldr	r1, [pc, #496]	@ (6000221c <CrashReportClass::printTo(Print&) const+0x2fc>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000202a:	mov	r0, r4
6000202c:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
        p.println();
60002030:	mov	r0, r4
60002032:	bl	60002498 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60002036:	lsls	r3, r5, #23
60002038:	bpl.w	600021b0 <CrashReportClass::printTo(Print&) const+0x290>
        p.println("\t(IBUSERR) Instruction Bus Error");
6000203c:	ldr	r1, [pc, #480]	@ (60002220 <CrashReportClass::printTo(Print&) const+0x300>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
6000203e:	mov	r0, r4
60002040:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002044:	lsls	r7, r5, #16
60002046:	bpl.n	6000205c <CrashReportClass::printTo(Print&) const+0x13c>
        p.print("\t(BFARVALID) Accessed Address: 0x");
60002048:	ldr	r1, [pc, #472]	@ (60002224 <CrashReportClass::printTo(Print&) const+0x304>)
6000204a:	mov	r0, r4
6000204c:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
        p.println(info->bfar, HEX);
60002050:	movs	r2, #16
60002052:	ldr.w	r1, [r6, #148]	@ 0x94
60002056:	mov	r0, r4
60002058:	bl	600024b8 <___ZN5Print7printlnEmi.isra.0_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
6000205c:	lsls	r0, r5, #15
6000205e:	bpl.w	600021da <CrashReportClass::printTo(Print&) const+0x2ba>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002062:	ldr	r1, [pc, #452]	@ (60002228 <CrashReportClass::printTo(Print&) const+0x308>)
        p.println("\t(DIVBYZERO) Divide by zero");
60002064:	mov	r0, r4
60002066:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
    uint32_t _HFSR = info->hfsr;
6000206a:	ldr.w	r5, [r6, #140]	@ 0x8c
    if (_HFSR > 0) {
6000206e:	cbz	r5, 60002092 <CrashReportClass::printTo(Print&) const+0x172>
      p.print("  HTSR: ");
60002070:	ldr	r1, [pc, #440]	@ (6000222c <CrashReportClass::printTo(Print&) const+0x30c>)
60002072:	mov	r0, r4
60002074:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
      p.println(info->hfsr, HEX);
60002078:	mov	r0, r4
6000207a:	movs	r2, #16
6000207c:	ldr.w	r1, [r6, #140]	@ 0x8c
60002080:	bl	600024b8 <___ZN5Print7printlnEmi.isra.0_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002084:	lsls	r0, r5, #30
60002086:	bpl.w	600022d2 <CrashReportClass::printTo(Print&) const+0x3b2>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000208a:	ldr	r1, [pc, #420]	@ (60002230 <CrashReportClass::printTo(Print&) const+0x310>)
       p.println("\t(FORCED) Forced Hard Fault");
6000208c:	mov	r0, r4
6000208e:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
    p.print("  Temperature inside the chip was ");
60002092:	ldr	r1, [pc, #416]	@ (60002234 <CrashReportClass::printTo(Print&) const+0x314>)
60002094:	mov	r0, r4
60002096:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
    p.print(info->temp);
6000209a:	vldr	s0, [r6, #160]	@ 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
6000209e:	movs	r1, #2
600020a0:	mov	r0, r4
600020a2:	vcvt.f64.f32	d0, s0
600020a6:	bl	60002478 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
600020aa:	ldr	r1, [pc, #396]	@ (60002238 <CrashReportClass::printTo(Print&) const+0x318>)
600020ac:	mov	r0, r4
600020ae:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
    p.print("  Startup CPU clock speed is ");
600020b2:	ldr	r1, [pc, #392]	@ (6000223c <CrashReportClass::printTo(Print&) const+0x31c>)
600020b4:	mov	r0, r4
600020b6:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
    p.print( F_CPU_ACTUAL/1000000);
600020ba:	ldr	r3, [pc, #388]	@ (60002240 <CrashReportClass::printTo(Print&) const+0x320>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600020bc:	ldr	r1, [pc, #388]	@ (60002244 <CrashReportClass::printTo(Print&) const+0x324>)
600020be:	movs	r2, #10
600020c0:	ldr	r0, [r3, #0]
600020c2:	movs	r3, #0
600020c4:	udiv	r1, r0, r1
600020c8:	mov	r0, r4
600020ca:	bl	60002450 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
600020ce:	ldr	r1, [pc, #376]	@ (60002248 <CrashReportClass::printTo(Print&) const+0x328>)
600020d0:	mov	r0, r4
600020d2:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
  uint32_t SRSR = SRC_SRSR;
600020d6:	ldr	r3, [pc, #372]	@ (6000224c <CrashReportClass::printTo(Print&) const+0x32c>)
600020d8:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600020da:	lsls	r2, r5, #30
600020dc:	bpl.n	600020f0 <CrashReportClass::printTo(Print&) const+0x1d0>
    uint32_t gpr5 = SRC_GPR5;
600020de:	ldr	r2, [r3, #48]	@ 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020e0:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
600020e2:	ldr	r3, [pc, #364]	@ (60002250 <CrashReportClass::printTo(Print&) const+0x330>)
600020e4:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
600020e6:	ite	eq
600020e8:	ldreq	r1, [pc, #360]	@ (60002254 <CrashReportClass::printTo(Print&) const+0x334>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020ea:	ldrne	r1, [pc, #364]	@ (60002258 <CrashReportClass::printTo(Print&) const+0x338>)
600020ec:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600020f0:	lsls	r7, r5, #29
600020f2:	bpl.n	600020fc <CrashReportClass::printTo(Print&) const+0x1dc>
    p.println("  Reboot was caused by security monitor");
600020f4:	ldr	r1, [pc, #356]	@ (6000225c <CrashReportClass::printTo(Print&) const+0x33c>)
600020f6:	mov	r0, r4
600020f8:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600020fc:	lsls	r6, r5, #28
600020fe:	bpl.n	60002108 <CrashReportClass::printTo(Print&) const+0x1e8>
    p.println("  Reboot was caused by power on/off button");
60002100:	ldr	r1, [pc, #348]	@ (60002260 <CrashReportClass::printTo(Print&) const+0x340>)
60002102:	mov	r0, r4
60002104:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60002108:	lsls	r0, r5, #27
6000210a:	bpl.n	60002114 <CrashReportClass::printTo(Print&) const+0x1f4>
    p.println("  Reboot was caused by watchdog 1 or 2");
6000210c:	ldr	r1, [pc, #340]	@ (60002264 <CrashReportClass::printTo(Print&) const+0x344>)
6000210e:	mov	r0, r4
60002110:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60002114:	lsls	r1, r5, #26
60002116:	bpl.n	60002120 <CrashReportClass::printTo(Print&) const+0x200>
    p.println("  Reboot was caused by JTAG boundary scan");
60002118:	ldr	r1, [pc, #332]	@ (60002268 <CrashReportClass::printTo(Print&) const+0x348>)
6000211a:	mov	r0, r4
6000211c:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60002120:	lsls	r2, r5, #25
60002122:	bpl.n	6000212c <CrashReportClass::printTo(Print&) const+0x20c>
    p.println("  Reboot was caused by JTAG debug");
60002124:	ldr	r1, [pc, #324]	@ (6000226c <CrashReportClass::printTo(Print&) const+0x34c>)
60002126:	mov	r0, r4
60002128:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000212c:	lsls	r3, r5, #24
6000212e:	bpl.n	60002138 <CrashReportClass::printTo(Print&) const+0x218>
    p.println("  Reboot was caused by watchdog 3");
60002130:	ldr	r1, [pc, #316]	@ (60002270 <CrashReportClass::printTo(Print&) const+0x350>)
60002132:	mov	r0, r4
60002134:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60002138:	ands.w	r5, r5, #256	@ 0x100
6000213c:	beq.w	6000230e <CrashReportClass::printTo(Print&) const+0x3ee>
    p.println("  Reboot was caused by temperature sensor");
60002140:	mov	r0, r4
60002142:	ldr	r1, [pc, #304]	@ (60002274 <CrashReportClass::printTo(Print&) const+0x354>)
60002144:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002148:	ldr	r2, [pc, #256]	@ (6000224c <CrashReportClass::printTo(Print&) const+0x32c>)
	  p.println("Panic Temp Exceeded Shutting Down");
6000214a:	mov	r0, r4
6000214c:	ldr	r1, [pc, #296]	@ (60002278 <CrashReportClass::printTo(Print&) const+0x358>)
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
6000214e:	ldr	r3, [r2, #8]
60002150:	bic.w	r3, r3, #256	@ 0x100
60002154:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60002156:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
6000215a:	ldr	r1, [pc, #288]	@ (6000227c <CrashReportClass::printTo(Print&) const+0x35c>)
6000215c:	mov	r0, r4
6000215e:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60002162:	ldr	r3, [pc, #284]	@ (60002280 <CrashReportClass::printTo(Print&) const+0x360>)
60002164:	movs	r2, #7
60002166:	str	r2, [r3, #64]	@ 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60002168:	ldr	r2, [pc, #280]	@ (60002284 <CrashReportClass::printTo(Print&) const+0x364>)
6000216a:	ldr	r3, [r2, #56]	@ 0x38
6000216c:	orr.w	r3, r3, #64	@ 0x40
60002170:	str	r3, [r2, #56]	@ 0x38
	  asm volatile ("dsb":::"memory");
60002172:	dsb	sy
	  while (1) asm ("wfi");
60002176:	wfi
60002178:	b.n	60002176 <CrashReportClass::printTo(Print&) const+0x256>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
6000217a:	lsls	r3, r5, #30
6000217c:	bpl.n	60002182 <CrashReportClass::printTo(Print&) const+0x262>
        p.println("\t(DACCVIOL) Data Access Violation");
6000217e:	ldr	r1, [pc, #264]	@ (60002288 <CrashReportClass::printTo(Print&) const+0x368>)
60002180:	b.n	60001fd2 <CrashReportClass::printTo(Print&) const+0xb2>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002182:	lsls	r7, r5, #28
60002184:	bpl.n	6000218a <CrashReportClass::printTo(Print&) const+0x26a>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002186:	ldr	r1, [pc, #260]	@ (6000228c <CrashReportClass::printTo(Print&) const+0x36c>)
60002188:	b.n	60001fd2 <CrashReportClass::printTo(Print&) const+0xb2>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000218a:	lsls	r0, r5, #27
6000218c:	bpl.n	60002192 <CrashReportClass::printTo(Print&) const+0x272>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
6000218e:	ldr	r1, [pc, #256]	@ (60002290 <CrashReportClass::printTo(Print&) const+0x370>)
60002190:	b.n	60001fd2 <CrashReportClass::printTo(Print&) const+0xb2>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002192:	lsls	r1, r5, #26
60002194:	bpl.w	60001fd8 <CrashReportClass::printTo(Print&) const+0xb8>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60002198:	ldr	r1, [pc, #248]	@ (60002294 <CrashReportClass::printTo(Print&) const+0x374>)
6000219a:	b.n	60001fd2 <CrashReportClass::printTo(Print&) const+0xb2>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000219c:	ldr	r3, [pc, #248]	@ (60002298 <CrashReportClass::printTo(Print&) const+0x378>)
6000219e:	cmp	r2, r3
600021a0:	bcc.w	60002030 <CrashReportClass::printTo(Print&) const+0x110>
600021a4:	adds	r3, #32
600021a6:	cmp	r2, r3
600021a8:	bcs.w	60002030 <CrashReportClass::printTo(Print&) const+0x110>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
600021ac:	ldr	r1, [pc, #236]	@ (6000229c <CrashReportClass::printTo(Print&) const+0x37c>)
600021ae:	b.n	6000202a <CrashReportClass::printTo(Print&) const+0x10a>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
600021b0:	lsls	r7, r5, #22
600021b2:	bpl.n	600021b8 <CrashReportClass::printTo(Print&) const+0x298>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
600021b4:	ldr	r1, [pc, #232]	@ (600022a0 <CrashReportClass::printTo(Print&) const+0x380>)
600021b6:	b.n	6000203e <CrashReportClass::printTo(Print&) const+0x11e>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
600021b8:	lsls	r0, r5, #21
600021ba:	bpl.n	600021c0 <CrashReportClass::printTo(Print&) const+0x2a0>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
600021bc:	ldr	r1, [pc, #228]	@ (600022a4 <CrashReportClass::printTo(Print&) const+0x384>)
600021be:	b.n	6000203e <CrashReportClass::printTo(Print&) const+0x11e>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
600021c0:	lsls	r1, r5, #20
600021c2:	bpl.n	600021c8 <CrashReportClass::printTo(Print&) const+0x2a8>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
600021c4:	ldr	r1, [pc, #224]	@ (600022a8 <CrashReportClass::printTo(Print&) const+0x388>)
600021c6:	b.n	6000203e <CrashReportClass::printTo(Print&) const+0x11e>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
600021c8:	lsls	r2, r5, #19
600021ca:	bpl.n	600021d0 <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600021cc:	ldr	r1, [pc, #220]	@ (600022ac <CrashReportClass::printTo(Print&) const+0x38c>)
600021ce:	b.n	6000203e <CrashReportClass::printTo(Print&) const+0x11e>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
600021d0:	lsls	r3, r5, #18
600021d2:	bpl.w	60002044 <CrashReportClass::printTo(Print&) const+0x124>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
600021d6:	ldr	r1, [pc, #216]	@ (600022b0 <CrashReportClass::printTo(Print&) const+0x390>)
600021d8:	b.n	6000203e <CrashReportClass::printTo(Print&) const+0x11e>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600021da:	lsls	r1, r5, #14
600021dc:	bpl.n	600021e2 <CrashReportClass::printTo(Print&) const+0x2c2>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600021de:	ldr	r1, [pc, #212]	@ (600022b4 <CrashReportClass::printTo(Print&) const+0x394>)
600021e0:	b.n	60002064 <CrashReportClass::printTo(Print&) const+0x144>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600021e2:	lsls	r2, r5, #13
600021e4:	bpl.n	600021ea <CrashReportClass::printTo(Print&) const+0x2ca>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600021e6:	ldr	r1, [pc, #208]	@ (600022b8 <CrashReportClass::printTo(Print&) const+0x398>)
600021e8:	b.n	60002064 <CrashReportClass::printTo(Print&) const+0x144>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600021ea:	lsls	r3, r5, #12
600021ec:	bpl.n	600022c0 <CrashReportClass::printTo(Print&) const+0x3a0>
        p.println("\t(NOCP) No Coprocessor");
600021ee:	ldr	r1, [pc, #204]	@ (600022bc <CrashReportClass::printTo(Print&) const+0x39c>)
600021f0:	b.n	60002064 <CrashReportClass::printTo(Print&) const+0x144>
600021f2:	nop
600021f4:	.word	0x2027ff00
600021f8:	.word	0x20001415
600021fc:	.word	0x20001422
60002200:	.word	0x2000194b
60002204:	.word	0x20001449
60002208:	.word	0x2000146e
6000220c:	.word	0x20001477
60002210:	.word	0x2000153d
60002214:	.word	0x2000155f
60002218:	.word	0x2000157e
6000221c:	.word	0x200015bd
60002220:	.word	0x2000161d
60002224:	.word	0x20001756
60002228:	.word	0x20001778
6000222c:	.word	0x20001854
60002230:	.word	0x2000185d
60002234:	.word	0x200018a0
60002238:	.word	0x200018c3
6000223c:	.word	0x200018c9
60002240:	.word	0x20001e54
60002244:	.word	0x000f4240
60002248:	.word	0x200018e7
6000224c:	.word	0x400f8000
60002250:	.word	0x0bad00f1
60002254:	.word	0x20001a44
60002258:	.word	0x20001a8d
6000225c:	.word	0x20001ace
60002260:	.word	0x20001af6
60002264:	.word	0x20001b21
60002268:	.word	0x20001b48
6000226c:	.word	0x20001b72
60002270:	.word	0x20001b94
60002274:	.word	0x20001bb6
60002278:	.word	0x20001be0
6000227c:	.word	0x20001c02
60002280:	.word	0x400ac000
60002284:	.word	0x400d4000
60002288:	.word	0x200014a0
6000228c:	.word	0x200014c2
60002290:	.word	0x200014ec
60002294:	.word	0x20001512
60002298:	.word	0x20012b00
6000229c:	.word	0x200015db
600022a0:	.word	0x2000163e
600022a4:	.word	0x2000166b
600022a8:	.word	0x200016b0
600022ac:	.word	0x200016f0
600022b0:	.word	0x20001724
600022b4:	.word	0x2000179c
600022b8:	.word	0x200017cf
600022bc:	.word	0x200017f8
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022c0:	lsls	r7, r5, #7
600022c2:	bpl.n	600022c8 <CrashReportClass::printTo(Print&) const+0x3a8>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022c4:	ldr	r1, [pc, #204]	@ (60002394 <CrashReportClass::printTo(Print&) const+0x474>)
600022c6:	b.n	60002064 <CrashReportClass::printTo(Print&) const+0x144>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022c8:	lsls	r5, r5, #6
600022ca:	bpl.w	6000206a <CrashReportClass::printTo(Print&) const+0x14a>
        p.println("\t(DIVBYZERO) Divide by zero");
600022ce:	ldr	r1, [pc, #200]	@ (60002398 <CrashReportClass::printTo(Print&) const+0x478>)
600022d0:	b.n	60002064 <CrashReportClass::printTo(Print&) const+0x144>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
600022d2:	lsls	r1, r5, #1
600022d4:	bpl.w	60002092 <CrashReportClass::printTo(Print&) const+0x172>
       p.println("\t(FORCED) Forced Hard Fault");
600022d8:	ldr	r1, [pc, #192]	@ (6000239c <CrashReportClass::printTo(Print&) const+0x47c>)
600022da:	b.n	6000208c <CrashReportClass::printTo(Print&) const+0x16c>
    p.println("No Crash Data To Report");
600022dc:	mov	r0, r4
600022de:	ldr	r1, [pc, #192]	@ (600023a0 <CrashReportClass::printTo(Print&) const+0x480>)
600022e0:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
600022e4:	mov	r0, r4
600022e6:	ldr	r1, [pc, #188]	@ (600023a4 <CrashReportClass::printTo(Print&) const+0x484>)
600022e8:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
600022ec:	mov	r0, r4
600022ee:	ldr	r1, [pc, #184]	@ (600023a8 <CrashReportClass::printTo(Print&) const+0x488>)
600022f0:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
    p.println("\tremaining in a low power sleep mode");
600022f4:	mov	r0, r4
600022f6:	ldr	r1, [pc, #180]	@ (600023ac <CrashReportClass::printTo(Print&) const+0x48c>)
600022f8:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
600022fc:	mov	r0, r4
600022fe:	ldr	r1, [pc, #176]	@ (600023b0 <CrashReportClass::printTo(Print&) const+0x490>)
60002300:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
60002304:	ldr	r1, [pc, #172]	@ (600023b4 <CrashReportClass::printTo(Print&) const+0x494>)
60002306:	mov	r0, r4
60002308:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
6000230c:	b.n	600020d6 <CrashReportClass::printTo(Print&) const+0x1b6>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
6000230e:	ldr	r7, [pc, #168]	@ (600023b8 <CrashReportClass::printTo(Print&) const+0x498>)
60002310:	ldr.w	r3, [r7, #192]	@ 0xc0
60002314:	cbz	r3, 6000238a <CrashReportClass::printTo(Print&) const+0x46a>
60002316:	ldr.w	r6, [r7, #220]	@ 0xdc
6000231a:	movs	r1, #28
6000231c:	ldr	r0, [pc, #156]	@ (600023bc <CrashReportClass::printTo(Print&) const+0x49c>)
6000231e:	bl	60002440 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60002322:	cmp	r6, r0
60002324:	bne.n	6000238a <CrashReportClass::printTo(Print&) const+0x46a>
        p.print("  Breadcrumb #");
60002326:	ldr.w	r8, [pc, #160]	@ 600023c8 <CrashReportClass::printTo(Print&) const+0x4a8>
        p.print(" was ");
6000232a:	ldr.w	r9, [pc, #160]	@ 600023cc <CrashReportClass::printTo(Print&) const+0x4ac>
6000232e:	ldr.w	sl, [pc, #140]	@ 600023bc <CrashReportClass::printTo(Print&) const+0x49c>
      if (bc->bitmask & (1 << i)) {
60002332:	movs	r3, #1
60002334:	ldr.w	r2, [r7, #192]	@ 0xc0
60002338:	mov	r6, r5
6000233a:	lsls	r3, r5
6000233c:	adds	r5, #1
6000233e:	tst	r3, r2
60002340:	beq.n	60002386 <CrashReportClass::printTo(Print&) const+0x466>
        p.print("  Breadcrumb #");
60002342:	mov	r1, r8
60002344:	mov	r0, r4
60002346:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
	size_t print(int n)				{ return print((long)n); }
6000234a:	mov	r1, r5
6000234c:	add.w	r6, sl, r6, lsl #2
60002350:	mov	r0, r4
60002352:	bl	60002470 <___ZN5Print5printEl_veneer>
        p.print(" was ");
60002356:	mov	r1, r9
60002358:	mov	r0, r4
6000235a:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000235e:	movs	r3, #0
60002360:	movs	r2, #10
60002362:	ldr	r1, [r6, #4]
60002364:	mov	r0, r4
60002366:	bl	60002450 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
6000236a:	ldr	r1, [pc, #84]	@ (600023c0 <CrashReportClass::printTo(Print&) const+0x4a0>)
6000236c:	mov	r0, r4
6000236e:	bl	600024b0 <___ZN5Print5printEPKc.isra.0_veneer>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002372:	ldr	r1, [r6, #4]
60002374:	movs	r3, #0
60002376:	movs	r2, #16
60002378:	mov	r0, r4
6000237a:	bl	60002450 <___ZN5Print11printNumberEmhh_veneer>
        p.println(")");
6000237e:	ldr	r1, [pc, #68]	@ (600023c4 <CrashReportClass::printTo(Print&) const+0x4a4>)
60002380:	mov	r0, r4
60002382:	bl	60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>
    for (int i=0; i < 6; i++) {
60002386:	cmp	r5, #6
60002388:	bne.n	60002332 <CrashReportClass::printTo(Print&) const+0x412>
  clear();
6000238a:	bl	60001eac <CrashReportClass::clear()>
}
6000238e:	movs	r0, #1
60002390:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60002394:	.word	0x2000180f
60002398:	.word	0x20001838
6000239c:	.word	0x20001884
600023a0:	.word	0x200018ec
600023a4:	.word	0x20001904
600023a8:	.word	0x2000194d
600023ac:	.word	0x20001997
600023b0:	.word	0x200019bc
600023b4:	.word	0x20001a04
600023b8:	.word	0x2027ff00
600023bc:	.word	0x2027ffc0
600023c0:	.word	0x20001c54
600023c4:	.word	0x20001a02
600023c8:	.word	0x20001c45
600023cc:	.word	0x200018bd

600023d0 <CrashReportClass::operator bool()>:
{
600023d0:	push	{r3, lr}
	if (isvalid(info)) return true;
600023d2:	bl	60001e58 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
600023d6:	subs	r0, #0
600023d8:	it	ne
600023da:	movne	r0, #1
600023dc:	pop	{r3, pc}
600023de:	nop

600023e0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600023e0:	ldr	r3, [pc, #60]	@ (60002420 <analog_init+0x40>)
600023e2:	ldr	r2, [r3, #108]	@ 0x6c
600023e4:	orr.w	r2, r2, #196608	@ 0x30000
600023e8:	str	r2, [r3, #108]	@ 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600023ea:	ldr	r2, [r3, #108]	@ 0x6c
600023ec:	orr.w	r2, r2, #768	@ 0x300
600023f0:	str	r2, [r3, #108]	@ 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600023f2:	sub.w	r3, r3, #229376	@ 0x38000
600023f6:	movw	r2, #1591	@ 0x637
600023fa:	str	r2, [r3, #68]	@ 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600023fc:	movs	r2, #160	@ 0xa0
600023fe:	str	r2, [r3, #72]	@ 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002400:	ldr	r2, [r3, #72]	@ 0x48
60002402:	lsls	r2, r2, #24
60002404:	bmi.n	60002400 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002406:	ldr	r2, [pc, #28]	@ (60002424 <analog_init+0x44>)
60002408:	movw	r3, #1591	@ 0x637
6000240c:	str	r3, [r2, #68]	@ 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000240e:	movs	r3, #160	@ 0xa0
60002410:	str	r3, [r2, #72]	@ 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002412:	ldr	r3, [r2, #72]	@ 0x48
60002414:	ands.w	r3, r3, #128	@ 0x80
60002418:	bne.n	60002412 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000241a:	ldr	r2, [pc, #12]	@ (60002428 <analog_init+0x48>)
6000241c:	strb	r3, [r2, #0]
}
6000241e:	bx	lr
60002420:	.word	0x400fc000
60002424:	.word	0x400c8000
60002428:	.word	0x20012aa2

6000242c <_init>:
6000242c:	push	{r3, r4, r5, r6, r7, lr}
6000242e:	nop
60002430:	pop	{r3, r4, r5, r6, r7}
60002432:	pop	{r3}
60002434:	mov	lr, r3
60002436:	bx	lr

60002438 <__memset_veneer>:
60002438:	ldr.w	pc, [pc]	@ 6000243c <__memset_veneer+0x4>
6000243c:	.word	0x0000a2ad

60002440 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
60002440:	ldr.w	pc, [pc]	@ 60002444 <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
60002444:	.word	0x0000c68d

60002448 <__delay_veneer>:
60002448:	ldr.w	pc, [pc]	@ 6000244c <__delay_veneer+0x4>
6000244c:	.word	0x0000b849

60002450 <___ZN5Print11printNumberEmhh_veneer>:
60002450:	ldr.w	pc, [pc]	@ 60002454 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002454:	.word	0x0000c83f

60002458 <__main_veneer>:
60002458:	ldr.w	pc, [pc]	@ 6000245c <__main_veneer+0x4>
6000245c:	.word	0x0000c6d7

60002460 <___ZN5Print7printlnEPKc.isra.0_veneer>:
60002460:	ldr.w	pc, [pc]	@ 60002464 <___ZN5Print7printlnEPKc.isra.0_veneer+0x4>
60002464:	.word	0x0000c67b

60002468 <____libc_init_array_veneer>:
60002468:	ldr.w	pc, [pc]	@ 6000246c <____libc_init_array_veneer+0x4>
6000246c:	.word	0x0000ed81

60002470 <___ZN5Print5printEl_veneer>:
60002470:	ldr.w	pc, [pc]	@ 60002474 <___ZN5Print5printEl_veneer+0x4>
60002474:	.word	0x0000c7db

60002478 <___ZN5Print10printFloatEdh_veneer>:
60002478:	ldr.w	pc, [pc]	@ 6000247c <___ZN5Print10printFloatEdh_veneer+0x4>
6000247c:	.word	0x0000c8e9

60002480 <__pwm_init_veneer>:
60002480:	ldr.w	pc, [pc]	@ 60002484 <__pwm_init_veneer+0x4>
60002484:	.word	0x0000c0c5

60002488 <__sm_set_pool_veneer>:
60002488:	ldr.w	pc, [pc]	@ 6000248c <__sm_set_pool_veneer+0x4>
6000248c:	.word	0x0000beb9

60002490 <___ZN7TwoWire8setClockEm_veneer>:
60002490:	ldr.w	pc, [pc]	@ 60002494 <___ZN7TwoWire8setClockEm_veneer+0x4>
60002494:	.word	0x000055e5

60002498 <___ZN5Print7printlnEv_veneer>:
60002498:	ldr.w	pc, [pc]	@ 6000249c <___ZN5Print7printlnEv_veneer+0x4>
6000249c:	.word	0x0000c7ed

600024a0 <__set_arm_clock_veneer>:
600024a0:	ldr.w	pc, [pc]	@ 600024a4 <__set_arm_clock_veneer+0x4>
600024a4:	.word	0x0000aaf1

600024a8 <__usb_init_serialnumber_veneer>:
600024a8:	ldr.w	pc, [pc]	@ 600024ac <__usb_init_serialnumber_veneer+0x4>
600024ac:	.word	0x0000c3fd

600024b0 <___ZN5Print5printEPKc.isra.0_veneer>:
600024b0:	ldr.w	pc, [pc]	@ 600024b4 <___ZN5Print5printEPKc.isra.0_veneer+0x4>
600024b4:	.word	0x0000c677

600024b8 <___ZN5Print7printlnEmi.isra.0_veneer>:
600024b8:	ldr.w	pc, [pc]	@ 600024bc <___ZN5Print7printlnEmi.isra.0_veneer+0x4>
600024bc:	.word	0x0000c641

600024c0 <__frame_dummy_init_array_entry>:
600024c0:	E.......1....3..
600024d0:	.P..

Disassembly of section .text.progmem:

600024d4 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024d4:	and.w	r0, r0, #63	@ 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024d8:	ldr	r3, [pc, #60]	@ (60002518 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024da:	bic.w	r2, r2, #3758096384	@ 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024de:	bic.w	r1, r1, #3758096384	@ 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024e2:	orr.w	r0, r0, #1122304	@ 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024e6:	str	r0, [r3, #112]	@ 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024e8:	str.w	r1, [r3, #128]	@ 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024ec:	str.w	r2, [r3, #144]	@ 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600024f0:	ldr	r2, [r3, #112]	@ 0x70
600024f2:	bic.w	r2, r2, #4096	@ 0x1000
600024f6:	str	r2, [r3, #112]	@ 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600024f8:	ldr	r2, [r3, #112]	@ 0x70
600024fa:	cmp	r2, #0
600024fc:	bge.n	600024f8 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600024fe:	ldr.w	r2, [r3, #368]	@ 0x170
60002502:	bic.w	r2, r2, #8388608	@ 0x800000
60002506:	bic.w	r2, r2, #32768	@ 0x8000
6000250a:	str.w	r2, [r3, #368]	@ 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
6000250e:	ldr	r2, [r3, #112]	@ 0x70
60002510:	bic.w	r2, r2, #65536	@ 0x10000
60002514:	str	r2, [r3, #112]	@ 0x70
  }
60002516:	bx	lr
60002518:	.word	0x400d8000

6000251c <TwoWire::i2c4_hardware>:
6000251c:	...@............
6000252c:	...@............
	...
60002544:	...........@....
60002554:	................
60002564:	.....U..

6000256c <TwoWire::i2c3_hardware>:
6000256c:	p..@............
6000257c:	...@....,.......
6000258c:	...@............
6000259c:	...@....-.......
600025ac:	...@.........U..

600025bc <TwoWire::i2c1_hardware>:
600025bc:	p..@............
600025cc:	...@............
	...
600025e4:	...........@....
600025f4:	................
60002604:	.....U..

6000260c <usb_string_mtp>:
6000260c:	..M.T.P.

60002614 <usb_string_product_name_default>:
60002614:	 .T.e.e.n.s.y. .
60002624:	M.T.P. .D.i.s.k.

60002634 <usb_string_manufacturer_name_default>:
60002634:	..T.e.e.n.s.y.d.
60002644:	u.i.n.o.

6000264c <string0>:
6000264c:	....

60002650 <usb_config_descriptor_12>:
60002650:	..i.....2.......
60002660:	...........$....
60002670:	$....$...$......
60002680:	................
60002690:	.@......@.......
600026a0:	........@......@
600026b0:	...... ..

600026b9 <usb_config_descriptor_480>:
600026b9:	..i.....2.......
600026c9:	...........$....
600026d9:	$....$...$......
600026e9:	................
600026f9:	................
60002709:	................
60002719:	...... ..

60002722 <qualifier_descriptor>:
60002722:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    return false;
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
    { Record p = ReadIndexRecord(ii);
      20:	ldr	r0, [pc, #20]	@ (38 <_teensy_model_identifier+0x13>)
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
      22:	ldr	r3, [pc, #24]	@ (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
      2c:	asrs	r1, r1, #1
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
      30:	ldr	r3, [pc, #12]	@ (40 <_teensy_model_identifier+0x1b>)
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
      36:	bx	lr
      38:	.word	0x20002ac0
      3c:	.word	0x20002ac0
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	@ (5c <frame_dummy+0x18>)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	@ (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	@ (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
      56:	b.w	20 <register_tm_clones>
    {
            wire->beginTransmission(addr);
            wire->write(reg);
            if (wire->endTransmission(false) != 0) return 0;
            if (dt>0) delay(dt);
            if (wire->requestFrom((int)addr, (int)ndat) < 1) return 0;
      5a:	nop
      5c:	.word	0x00000000
            for(int ii=0;ii<ndat;ii++) data[ii] = wire->read();
      60:	.word	0x20012128
      64:	.word	0x60018000

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      6e:	mov	r3, r0
      70:	push	{r0, r1, r2, lr}
   * If an error occurs, read() returns -1.  Possible errors include
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
      72:	ldr	r0, [r0, #72]	@ 0x48
      74:	cbz	r0, 8a <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      76:	movs	r2, #1
      78:	add.w	r1, sp, #7
      7c:	bl	71bc <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      80:	cmp	r0, #1
      82:	bne.n	8e <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      84:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      88:	b.n	92 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      8a:	ldr	r0, [r3, #76]	@ 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      8c:	cbnz	r0, 98 <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      8e:	mov.w	r0, #4294967295
  }
      92:	add	sp, #12
      94:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      98:	movs	r2, #1
      9a:	add.w	r1, sp, #7
      9e:	bl	5b88 <ExFatFile::read(void*, unsigned int)>
      a2:	b.n	80 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000a4 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  int peek() {
      a4:	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
      a6:	ldr	r0, [r0, #72]	@ 0x48
      a8:	cbz	r0, ae <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      aa:	b.w	7332 <FatFile::peek()>
      ae:	ldr	r0, [r3, #76]	@ 0x4c
           m_xFile ? m_xFile->peek() : -1;
      b0:	cbz	r0, b6 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      b2:	b.w	5d00 <ExFatFile::peek()>
  }
      b6:	mov.w	r0, #4294967295
      ba:	bx	lr

000000bc <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      bc:	ldr	r3, [r0, #72]	@ 0x48
  int available() {
      be:	push	{r4, lr}
      c0:	cbz	r3, d8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      c2:	ldrb	r0, [r3, #0]
      c4:	ands.w	r0, r0, #8
      c8:	beq.n	d6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
      ca:	ldr	r0, [r3, #28]
      cc:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
      ce:	subs	r0, r0, r3
      d0:	it	mi
      d2:	mvnmi.w	r0, #2147483648	@ 0x80000000
  }
      d6:	pop	{r4, pc}
      d8:	ldr	r0, [r0, #76]	@ 0x4c
           m_xFile ? m_xFile->available() : 0;
      da:	cmp	r0, #0
      dc:	beq.n	d6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      de:	ldrb.w	r3, [r0, #49]	@ 0x31
      e2:	ands.w	r3, r3, #8
      e6:	beq.n	106 <StreamFile<FsBaseFile, unsigned long long>::available()+0x4a>
      e8:	ldrd	r1, r3, [r0, #16]
      ec:	ldrd	r2, r4, [r0]
      f0:	subs	r0, r1, r2
      f2:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
      f6:	cmp.w	r0, #2147483648	@ 0x80000000
      fa:	sbcs.w	r3, r3, #0
      fe:	it	cs
     100:	mvncs.w	r0, #2147483648	@ 0x80000000
     104:	b.n	d6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     106:	mov	r0, r3
     108:	b.n	f6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x3a>

0000010a <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  void flush() {
     10a:	mov	r3, r0
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
     10c:	ldr	r0, [r0, #72]	@ 0x48
     10e:	cbz	r0, 114 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     110:	b.w	75d8 <FatFile::sync()>
     114:	ldr	r0, [r3, #76]	@ 0x4c
           m_xFile ? m_xFile->sync() : false;
     116:	cbz	r0, 11c <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     118:	b.w	694c <ExFatFile::sync()>
  }
     11c:	bx	lr
	...

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	c4a4 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	@ (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	@ 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	@ (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	@ (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	@ (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x20012acd
     154:	.word	0x20012acc
     158:	.word	0x20012864
     15c:	.word	0x20012878

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	c83e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r4, r5, r6, lr}
     16a:	mov	r5, r0
     16c:	mov	r4, r1
     16e:	cbz	r1, 186 <Print::write(char const*) [clone .isra.0]+0x1e>
							  return write((const uint8_t *)str, strlen(str)); }
     170:	mov	r0, r1
     172:	bl	ee80 <strlen>
     176:	ldr	r3, [r5, #0]
     178:	mov	r2, r0
     17a:	mov	r1, r4
     17c:	mov	r0, r5
     17e:	ldr	r3, [r3, #4]
     180:	ldmia.w	sp!, {r4, r5, r6, lr}
     184:	bx	r3
     186:	pop	{r4, r5, r6, pc}

00000188 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     188:	b.w	168 <Print::write(char const*) [clone .isra.0]>

0000018c <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     18c:	push	{r4, lr}
     18e:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     190:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     194:	mov	r0, r4
     196:	ldmia.w	sp!, {r4, lr}
     19a:	b.w	c7ec <Print::println()>
	...

000001a0 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     1a0:	push	{r3, r4, r5, lr}
     1a2:	ldr	r3, [pc, #48]	@ (1d4 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
     1a4:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
     1a6:	ldr	r5, [pc, #48]	@ (1d8 <MTPStorage_SD::~MTPStorage_SD()+0x38>)
     1a8:	str	r3, [r0, #0]
  ~FsBaseFile() {close();}
     1aa:	add.w	r0, r0, #344	@ 0x158
     1ae:	str.w	r5, [r0, #-16]
     1b2:	bl	8824 <FsBaseFile::close()>
     1b6:	add.w	r0, r4, #264	@ 0x108
     1ba:	str.w	r5, [r4, #248]	@ 0xf8
     1be:	bl	8824 <FsBaseFile::close()>
     1c2:	add.w	r0, r4, #184	@ 0xb8
     1c6:	str.w	r5, [r4, #168]	@ 0xa8
     1ca:	bl	8824 <FsBaseFile::close()>
     1ce:	mov	r0, r4
     1d0:	pop	{r3, r4, r5, pc}
     1d2:	nop
     1d4:	.word	0x200005a0
     1d8:	.word	0x2000057c

000001dc <FsBaseFile::write(void const*, unsigned int)>:
   * \param[in] count Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
     1dc:	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     1de:	ldr	r0, [r0, #56]	@ 0x38
     1e0:	cbz	r0, 1e6 <FsBaseFile::write(void const*, unsigned int)+0xa>
     1e2:	b.w	7ab4 <FatFile::write(void const*, unsigned int)>
     1e6:	ldr	r0, [r3, #60]	@ 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1e8:	cbz	r0, 1ee <FsBaseFile::write(void const*, unsigned int)+0x12>
     1ea:	b.w	6ca0 <ExFatFile::write(void const*, unsigned int)>
  }
     1ee:	bx	lr

000001f0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1f0:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1f2:	adds	r0, #16
     1f4:	bl	1dc <FsBaseFile::write(void const*, unsigned int)>
  }
     1f8:	pop	{r3, pc}

000001fa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1fa:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     1fc:	movs	r2, #1
     1fe:	strb.w	r1, [sp, #7]
     202:	add.w	r1, sp, #7
     206:	adds	r0, #16
     208:	bl	1dc <FsBaseFile::write(void const*, unsigned int)>
  }
     20c:	add	sp, #12
     20e:	ldr.w	pc, [sp], #4
	...

00000214 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     214:	ldr	r3, [pc, #36]	@ (23c <resetUSB()+0x28>)
     216:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     218:	movs	r0, #100	@ 0x64
  {
     21a:	push	{r4, lr}
    while(!Serial) mtpd.loop();
     21c:	ldr	r4, [pc, #32]	@ (240 <resetUSB()+0x2c>)
    USB1_USBCMD = 0;  // disconnect USB
     21e:	str.w	r2, [r3, #320]	@ 0x140
    delay(100);       // long enough for PC+hubs to detect
     222:	bl	b848 <delay>
    usb_init();
     226:	bl	120d8 <__usb_init_veneer>
    while(!Serial) mtpd.loop();
     22a:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     22e:	cbz	r0, 232 <resetUSB()+0x1e>
  }
     230:	pop	{r4, pc}
    while(!Serial) mtpd.loop();
     232:	mov	r0, r4
     234:	bl	4998 <MTPD::loop()>
     238:	b.n	22a <resetUSB()+0x16>
     23a:	nop
     23c:	.word	0x402e0000
     240:	.word	0x20002b00

00000244 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     244:	mov.w	r3, #3758153728	@ 0xe000e000
     248:	ldr	r2, [pc, #4]	@ (250 <reboot()+0xc>)
     24a:	str.w	r2, [r3, #3340]	@ 0xd0c
     24e:	bx	lr
     250:	.word	0x05fa0004

00000254 <lowPowerInit()>:
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     254:	ldr	r3, [pc, #28]	@ (274 <lowPowerInit()+0x20>)
     256:	ldr	r2, [r3, #100]	@ 0x64
     258:	orr.w	r2, r2, #131072	@ 0x20000
     25c:	str	r2, [r3, #100]	@ 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     25e:	ldr	r2, [r3, #84]	@ 0x54
     260:	bic.w	r2, r2, #35	@ 0x23
     264:	str	r2, [r3, #84]	@ 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     266:	ldr	r2, [r3, #84]	@ 0x54
     268:	orr.w	r2, r2, #1
     26c:	str	r2, [r3, #84]	@ 0x54
    asm volatile("dsb");    
     26e:	dsb	sy
  }
     272:	bx	lr
     274:	.word	0x400fc000

00000278 <loop>:
{
     278:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     27c:	ldr	r6, [pc, #424]	@ (428 <loop+0x1b0>)
{
     27e:	sub	sp, #44	@ 0x2c
  if(nb>mxb) mxb=nb;
     280:	ldr	r5, [pc, #424]	@ (42c <loop+0x1b4>)
  loopCount++;
     282:	ldr	r3, [r6, #0]
     284:	ldr	r4, [pc, #424]	@ (430 <loop+0x1b8>)
     286:	adds	r3, #1
     288:	str	r3, [r6, #0]
  nb = getDataCount();
     28a:	bl	2844 <getDataCount()>
  if(nb>mxb) mxb=nb;
     28e:	ldrh	r3, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     290:	ldr	r2, [pc, #416]	@ (434 <loop+0x1bc>)
  if(nb>mxb) mxb=nb;
     292:	cmp	r3, r0
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     294:	ldr	r3, [r2, #0]
  if(nb>mxb) mxb=nb;
     296:	it	cc
     298:	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     29a:	tst.w	r3, #1
     29e:	bne.n	2b4 <loop+0x3c>
     2a0:	ldr	r3, [pc, #404]	@ (438 <loop+0x1c0>)
     2a2:	ldr	r3, [r3, #0]
     2a4:	cmp	r3, #1
     2a6:	mov.w	r3, #4294967295
     2aa:	it	ne
     2ac:	movne	r3, #0
     2ae:	strh	r3, [r4, #0]
     2b0:	movs	r3, #1
     2b2:	str	r3, [r2, #0]
  status=menu(status);
     2b4:	ldrh	r0, [r4, #0]
     2b6:	sxth	r0, r0
     2b8:	bl	2728 <menu(short)>
     2bc:	strh	r0, [r4, #0]
    if(status<0)
     2be:	ldrh	r3, [r4, #0]
     2c0:	lsls	r3, r3, #16
     2c2:	bpl.n	2ca <loop+0x52>
    { mtpd.loop();
     2c4:	ldr	r0, [pc, #372]	@ (43c <loop+0x1c4>)
     2c6:	bl	4998 <MTPD::loop()>
      if(status>0) digitalWriteFast(13,HIGH);    
     2ca:	ldrh	r3, [r4, #0]
     2cc:	sxth	r3, r3
     2ce:	cmp	r3, #0
     2d0:	ble.n	2da <loop+0x62>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     2d2:	ldr	r3, [pc, #364]	@ (440 <loop+0x1c8>)
     2d4:	movs	r2, #8
     2d6:	str.w	r2, [r3, #132]	@ 0x84
      status=saveData(status);  
     2da:	ldrh	r0, [r4, #0]
     2dc:	sxth	r0, r0
     2de:	bl	3298 <saveData(short)>
     2e2:	strh	r0, [r4, #0]
      if(status>0) digitalWriteFast(13,LOW);
     2e4:	ldrh	r3, [r4, #0]
     2e6:	sxth	r3, r3
     2e8:	cmp	r3, #0
     2ea:	ble.n	2f4 <loop+0x7c>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     2ec:	ldr	r3, [pc, #336]	@ (440 <loop+0x1c8>)
     2ee:	movs	r2, #8
     2f0:	str.w	r2, [r3, #136]	@ 0x88
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     2f4:	ldr	r3, [pc, #332]	@ (444 <loop+0x1cc>)
  if((t1=millis())>(t0+1000))
     2f6:	ldr	r7, [pc, #336]	@ (448 <loop+0x1d0>)
     2f8:	ldr.w	r8, [r3]
     2fc:	ldr	r3, [r7, #0]
     2fe:	add.w	r3, r3, #1000	@ 0x3e8
     302:	cmp	r3, r8
     304:	bcs.n	3e6 <loop+0x16e>
    if(monitor)
     306:	ldr	r3, [pc, #324]	@ (44c <loop+0x1d4>)
     308:	ldr.w	fp, [pc, #380]	@ 488 <loop+0x210>
     30c:	ldrsh.w	r3, [r3]
     310:	ldr.w	sl, [pc, #376]	@ 48c <loop+0x214>
     314:	ldr.w	r9, [pc, #376]	@ 490 <loop+0x218>
     318:	cmp	r3, #0
     31a:	beq.n	3d0 <loop+0x158>
      rtc_get_datetime(&t);
     31c:	add	r0, sp, #32
     31e:	bl	3c7e <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     322:	ldrsb.w	r3, [sp, #36]	@ 0x24
     326:	ldrsh.w	r2, [sp, #32]
     32a:	str	r3, [sp, #16]
     32c:	ldrsb.w	r3, [sp, #39]	@ 0x27
     330:	ldr	r1, [pc, #284]	@ (450 <loop+0x1d8>)
     332:	str	r3, [sp, #12]
     334:	ldrsb.w	r3, [sp, #38]	@ 0x26
     338:	ldr	r0, [pc, #280]	@ (454 <loop+0x1dc>)
     33a:	str	r3, [sp, #8]
     33c:	ldrsb.w	r3, [sp, #37]	@ 0x25
     340:	str	r3, [sp, #4]
     342:	ldrsb.w	r3, [sp, #35]	@ 0x23
     346:	str	r3, [sp, #0]
     348:	ldrsb.w	r3, [sp, #34]	@ 0x22
     34c:	bl	c824 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     350:	ldr	r1, [pc, #260]	@ (458 <loop+0x1e0>)
     352:	ldr	r0, [pc, #256]	@ (454 <loop+0x1dc>)
     354:	bl	188 <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     358:	ldr	r1, [r6, #0]
     35a:	ldr	r0, [pc, #248]	@ (454 <loop+0x1dc>)
     35c:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     360:	ldr	r1, [pc, #248]	@ (45c <loop+0x1e4>)
     362:	ldr	r0, [pc, #240]	@ (454 <loop+0x1dc>)
     364:	bl	188 <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     368:	ldr.w	r1, [fp]
     36c:	ldr	r0, [pc, #228]	@ (454 <loop+0x1dc>)
     36e:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     372:	ldr	r1, [pc, #232]	@ (45c <loop+0x1e4>)
     374:	ldr	r0, [pc, #220]	@ (454 <loop+0x1dc>)
     376:	bl	188 <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     37a:	ldr.w	r1, [sl]
     37e:	ldr	r0, [pc, #212]	@ (454 <loop+0x1dc>)
     380:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     384:	ldr	r1, [pc, #212]	@ (45c <loop+0x1e4>)
     386:	ldr	r0, [pc, #204]	@ (454 <loop+0x1dc>)
     388:	bl	188 <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     38c:	ldrh	r2, [r5, #0]
     38e:	ldr	r1, [pc, #208]	@ (460 <loop+0x1e8>)
     390:	ldr	r0, [pc, #192]	@ (454 <loop+0x1dc>)
     392:	bl	c824 <Print::printf(char const*, ...)>
     396:	ldr	r1, [pc, #204]	@ (464 <loop+0x1ec>)
     398:	ldr	r0, [pc, #184]	@ (454 <loop+0x1dc>)
     39a:	bl	188 <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("  ; ");
     39e:	ldr.w	r1, [r9]
     3a2:	ldr	r0, [pc, #176]	@ (454 <loop+0x1dc>)
     3a4:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     3a8:	ldr	r1, [pc, #188]	@ (468 <loop+0x1f0>)
     3aa:	ldr	r0, [pc, #168]	@ (454 <loop+0x1dc>)
     3ac:	bl	188 <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     3b0:	ldr	r3, [pc, #184]	@ (46c <loop+0x1f4>)
     3b2:	ldrh	r4, [r3, #0]
     3b4:	sxth	r4, r4
     3b6:	cbnz	r4, 3ee <loop+0x176>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     3b8:	ldr	r3, [pc, #180]	@ (470 <loop+0x1f8>)
     3ba:	ldr	r1, [pc, #184]	@ (474 <loop+0x1fc>)
     3bc:	ldr.w	r2, [r3, r4, lsl #2]
     3c0:	adds	r4, #1
     3c2:	ldr	r0, [pc, #144]	@ (454 <loop+0x1dc>)
     3c4:	bl	c824 <Print::printf(char const*, ...)>
     3c8:	cmp	r4, #8
     3ca:	ldr	r1, [pc, #168]	@ (474 <loop+0x1fc>)
     3cc:	ldr	r3, [pc, #160]	@ (470 <loop+0x1f8>)
     3ce:	bne.n	3bc <loop+0x144>
    loopCount=0;
     3d0:	movs	r3, #0
    t0=t1;
     3d2:	str.w	r8, [r7]
    loopCount=0;
     3d6:	str	r3, [r6, #0]
    procCount=0;
     3d8:	str.w	r3, [fp]
    procMiss=0;
     3dc:	str.w	r3, [sl]
    mxb=0;
     3e0:	strh	r3, [r5, #0]
    disk_count=0;
     3e2:	str.w	r3, [r9]
  asm("wfi");
     3e6:	wfi
}
     3e8:	add	sp, #44	@ 0x2c
     3ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3ee:	ldr	r3, [pc, #136]	@ (478 <loop+0x200>)
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3f0:	movs	r4, #0
     3f2:	ldr	r1, [pc, #136]	@ (47c <loop+0x204>)
     3f4:	ldr.w	r2, [r3], #4
     3f8:	adds	r4, #1
     3fa:	ldr	r0, [pc, #88]	@ (454 <loop+0x1dc>)
     3fc:	str	r3, [sp, #28]
     3fe:	bl	c824 <Print::printf(char const*, ...)>
     402:	cmp	r4, #24
     404:	ldr	r1, [pc, #116]	@ (47c <loop+0x204>)
     406:	ldr	r3, [sp, #28]
     408:	bne.n	3f4 <loop+0x17c>
        Serial.printf("%2d",max_stat);
     40a:	ldr	r4, [pc, #116]	@ (480 <loop+0x208>)
     40c:	ldr	r1, [pc, #116]	@ (484 <loop+0x20c>)
     40e:	ldr	r2, [r4, #0]
     410:	ldr	r0, [pc, #64]	@ (454 <loop+0x1dc>)
     412:	bl	c824 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     416:	movs	r2, #96	@ 0x60
     418:	movs	r1, #0
     41a:	ldr	r0, [pc, #92]	@ (478 <loop+0x200>)
     41c:	bl	a2ac <memset>
        max_stat=0;        
     420:	movs	r3, #0
     422:	str	r3, [r4, #0]
     424:	b.n	3d0 <loop+0x158>
     426:	nop
     428:	.word	0x20011d34
     42c:	.word	0x200128a4
     430:	.word	0x200128a6
     434:	.word	0x200082bc
     438:	.word	0x2001286c
     43c:	.word	0x20002b00
     440:	.word	0x42004000
     444:	.word	0x20012864
     448:	.word	0x20011d30
     44c:	.word	0x200128b2
     450:	.word	0x20000efd
     454:	.word	0x20001e58
     458:	.word	0x20000f1e
     45c:	.word	0x20000f27
     460:	.word	0x20000f22
     464:	.word	0x20000f26
     468:	.word	0x20000f29
     46c:	.word	0x200128b4
     470:	.word	0x200120fc
     474:	.word	0x20000f2e
     478:	.word	0x20012148
     47c:	.word	0x20000f33
     480:	.word	0x2001211c
     484:	.word	0x20000f38
     488:	.word	0x20012140
     48c:	.word	0x20012144
     490:	.word	0x20012088

00000494 <setup1()>:
{ 
     494:	push	{r4, lr}
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     496:	ldr	r4, [pc, #44]	@ (4c4 <setup1()+0x30>)
  Serial.println("Setup1");
     498:	ldr	r1, [pc, #44]	@ (4c8 <setup1()+0x34>)
     49a:	ldr	r0, [pc, #48]	@ (4cc <setup1()+0x38>)
     49c:	bl	18c <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4a0:	ldr	r3, [r4, #0]
     4a2:	cbz	r3, 4bc <setup1()+0x28>
  i2s_setup();
     4a4:	bl	ae0 <i2s_setup()>
  dma_setup();
     4a8:	bl	b64 <dma_setup()>
  adc_init();
     4ac:	bl	3784 <adc_init()>
  Serial.println("Setup1 done");
     4b0:	ldr	r1, [pc, #28]	@ (4d0 <setup1()+0x3c>)
     4b2:	ldr	r0, [pc, #24]	@ (4cc <setup1()+0x38>)
}
     4b4:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     4b8:	b.w	18c <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4bc:	movs	r0, #1
     4be:	bl	b848 <delay>
     4c2:	b.n	4a0 <setup1()+0xc>
     4c4:	.word	0x200126a4
     4c8:	.word	0x20000f3c
     4cc:	.word	0x20001e58
     4d0:	.word	0x20000f43

000004d4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4d4:	push	{r4, r5, r6, lr}
     4d6:	mov	r5, r0
     4d8:	ldr.w	r0, [r0, #1164]	@ 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4dc:	cbnz	r0, 500 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2c>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     4de:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     4e0:	ldr.w	r0, [r5, #1152]	@ 0x480
     4e4:	cbz	r0, 538 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     4e6:	bl	7f14 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     4ea:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     4ec:	cbz	r6, 518 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     4ee:	ldr.w	r0, [r5, #1164]	@ 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     4f2:	cbz	r0, 516 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x42>
      return m_card->setDedicatedSpi(value);
     4f4:	ldr	r3, [r0, #0]
     4f6:	movs	r1, #0
     4f8:	ldr	r3, [r3, #68]	@ 0x44
     4fa:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     4fc:	cbnz	r0, 518 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     4fe:	b.n	516 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x42>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     500:	ldr	r3, [r0, #0]
     502:	ldr	r3, [r3, #60]	@ 0x3c
     504:	blx	r3
     506:	cmp	r0, #0
     508:	beq.n	4de <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     50a:	ldr.w	r0, [r5, #1164]	@ 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     50e:	cbnz	r0, 51c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     510:	ldr.w	r0, [r5, #1164]	@ 0x48c
    if (m_card) {
     514:	cbnz	r0, 528 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     516:	movs	r4, #0
  }
     518:	mov	r0, r4
     51a:	pop	{r4, r5, r6, pc}
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     51c:	ldr	r3, [r0, #0]
     51e:	ldr	r3, [r3, #64]	@ 0x40
     520:	blx	r3
     522:	cmp	r0, #0
     524:	bne.n	4de <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     526:	b.n	510 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3c>
      return m_card->setDedicatedSpi(value);
     528:	ldr	r3, [r0, #0]
     52a:	movs	r1, #1
     52c:	ldr	r3, [r3, #68]	@ 0x44
     52e:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     530:	mov	r6, r0
     532:	cmp	r0, #0
     534:	bne.n	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     536:	b.n	516 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x42>
     538:	ldr.w	r0, [r5, #1156]	@ 0x484
     53c:	cmp	r0, #0
     53e:	beq.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     540:	bl	6508 <ExFatPartition::freeClusterCount()>
     544:	b.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

00000548 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     548:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spiConfigBackupPin = 255;
     54c:	ldr	r4, [pc, #276]	@ (664 <storage_configure()+0x11c>)
     54e:	movs	r3, #255	@ 0xff
    sdioConfigBackup = sdioConfig;
     550:	movs	r1, #0
     552:	ldr	r6, [pc, #276]	@ (668 <storage_configure()+0x120>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     554:	add.w	r5, r4, #1168	@ 0x490
    spiConfigBackupPin = 255;
     558:	strb.w	r3, [r4, #1212]	@ 0x4bc
    sdioConfigBackup = sdioConfig;
     55c:	strb.w	r1, [r4, #1224]	@ 0x4c8
     560:	mov	r0, r5
     562:	bl	9c44 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     566:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     568:	str.w	r5, [r4, #1164]	@ 0x48c
    return m_card && !m_card->errorCode();
     56c:	bl	9340 <SdioCard::errorCode() const>
     570:	cmp	r0, #0
     572:	bne.n	616 <storage_configure()+0xce>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     574:	movs	r3, #1
     576:	ldr.w	r1, [r4, #1164]	@ 0x48c
     57a:	mov	r0, r4
     57c:	mov	r2, r3
     57e:	bl	8980 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     582:	cmp	r0, #0
     584:	beq.n	616 <storage_configure()+0xce>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     586:	ldr	r3, [pc, #228]	@ (66c <storage_configure()+0x124>)
     588:	ldr	r2, [r3, #4]
     58a:	cmp	r2, #19
     58c:	ble.n	632 <storage_configure()+0xea>
    return m_fVol ? m_fVol->clusterCount() :
     58e:	ldr.w	r3, [r4, #1152]	@ 0x480
     592:	cmp	r3, #0
     594:	beq.n	646 <storage_configure()+0xfe>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     596:	ldr	r5, [r3, #28]
     598:	subs	r5, #1
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     59a:	ldr	r0, [pc, #200]	@ (664 <storage_configure()+0x11c>)
     59c:	bl	4d4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     5a0:	ldr.w	r3, [r4, #1152]	@ 0x480
     5a4:	mov	r7, r0
     5a6:	cmp	r3, #0
     5a8:	beq.n	654 <storage_configure()+0x10c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     5aa:	ldrb	r3, [r3, #6]
     5ac:	mov.w	r4, #512	@ 0x200
     5b0:	lsls	r4, r3
     5b2:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     5b4:	ldr	r3, [r6, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     5b6:	mov.w	r8, #10
     5ba:	movs	r6, #0
     5bc:	movs	r2, #0
     5be:	str	r3, [sp, #0]
     5c0:	movs	r3, #254	@ 0xfe
     5c2:	ldr	r1, [pc, #172]	@ (670 <storage_configure()+0x128>)
     5c4:	ldr	r0, [pc, #172]	@ (674 <storage_configure()+0x12c>)
     5c6:	bl	c824 <Print::printf(char const*, ...)>
            Serial.print("; total clusters: "); Serial.print(totalSize); 
     5ca:	ldr	r1, [pc, #172]	@ (678 <storage_configure()+0x130>)
     5cc:	ldr	r0, [pc, #164]	@ (674 <storage_configure()+0x12c>)
     5ce:	bl	188 <Print::print(char const*) [clone .isra.0]>
     5d2:	mov	r2, r5
     5d4:	mov	r3, r6
     5d6:	ldr	r0, [pc, #156]	@ (674 <storage_configure()+0x12c>)
     5d8:	strd	r8, r6, [sp]
     5dc:	bl	c852 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" free clusters: "); Serial.print(freeSize);
     5e0:	ldr	r1, [pc, #152]	@ (67c <storage_configure()+0x134>)
     5e2:	ldr	r0, [pc, #144]	@ (674 <storage_configure()+0x12c>)
     5e4:	bl	188 <Print::print(char const*) [clone .isra.0]>
     5e8:	mov	r2, r7
     5ea:	mov	r3, r6
     5ec:	ldr	r0, [pc, #132]	@ (674 <storage_configure()+0x12c>)
     5ee:	strd	r8, r6, [sp]
     5f2:	bl	c852 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5f6:	ldr	r1, [pc, #136]	@ (680 <storage_configure()+0x138>)
     5f8:	ldr	r0, [pc, #120]	@ (674 <storage_configure()+0x12c>)
     5fa:	bl	188 <Print::print(char const*) [clone .isra.0]>
     5fe:	lsr.w	r1, r4, r8
     602:	ldr	r0, [pc, #112]	@ (674 <storage_configure()+0x12c>)
     604:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     608:	ldr	r1, [pc, #120]	@ (684 <storage_configure()+0x13c>)
     60a:	ldr	r0, [pc, #104]	@ (674 <storage_configure()+0x12c>)
        }
      }
  }
     60c:	add	sp, #8
     60e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     612:	b.w	18c <Print::println(char const*) [clone .isra.0]>
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     616:	ldr	r3, [r6, #0]
     618:	movs	r2, #0
     61a:	ldr	r1, [pc, #108]	@ (688 <storage_configure()+0x140>)
     61c:	str	r3, [sp, #0]
     61e:	movs	r3, #254	@ 0xfe
     620:	ldr	r0, [pc, #80]	@ (674 <storage_configure()+0x12c>)
     622:	bl	c824 <Print::printf(char const*, ...)>
     626:	ldr	r0, [pc, #76]	@ (674 <storage_configure()+0x12c>)
  }
     628:	add	sp, #8
     62a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     62e:	b.w	c7ec <Print::println()>
          sd_name[fsCount] = name;
     632:	add.w	r1, r3, r2, lsl #2
     636:	ldr	r0, [r6, #0]
     638:	str	r0, [r1, #8]
          sdx[fsCount++] = &fs;
     63a:	adds	r1, r2, #1
     63c:	str	r1, [r3, #4]
     63e:	add.w	r3, r3, r2, lsl #2
     642:	str	r4, [r3, #88]	@ 0x58
     644:	b.n	58e <storage_configure()+0x46>
     646:	ldr.w	r5, [r4, #1156]	@ 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     64a:	cmp	r5, #0
     64c:	beq.n	59a <storage_configure()+0x52>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     64e:	ldr.w	r5, [r5, #1072]	@ 0x430
     652:	b.n	59a <storage_configure()+0x52>
     654:	ldr.w	r4, [r4, #1156]	@ 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     658:	cmp	r4, #0
     65a:	beq.n	5b4 <storage_configure()+0x6c>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     65c:	ldr.w	r4, [r4, #1084]	@ 0x43c
     660:	b.n	5b4 <storage_configure()+0x6c>
     662:	nop
     664:	.word	0x200121d4
     668:	.word	0x20002408
     66c:	.word	0x200126a8
     670:	.word	0x20000f7a
     674:	.word	0x20001e58
     678:	.word	0x20000f91
     67c:	.word	0x20000fa4
     680:	.word	0x20000fb5
     684:	.word	0x20000fc4
     688:	.word	0x20000f4f

0000068c <_GLOBAL__sub_I_storage>:
  }
     68c:	push	{r4, r5, r6, lr}
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     68e:	ldr	r3, [pc, #192]	@ (750 <_GLOBAL__sub_I_storage+0xc4>)
        fsCount = 0;
     690:	movs	r4, #0
     692:	ldr	r5, [pc, #192]	@ (754 <_GLOBAL__sub_I_storage+0xc8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     694:	mov.w	r2, #1000	@ 0x3e8
  MTPStorage_SD storage;
     698:	ldr	r6, [pc, #188]	@ (758 <_GLOBAL__sub_I_storage+0xcc>)
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     69a:	str	r3, [r5, #0]
     69c:	mov	r0, r5
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     69e:	ldr	r3, [pc, #188]	@ (75c <_GLOBAL__sub_I_storage+0xd0>)
     6a0:	str.w	r2, [r5, #176]	@ 0xb0
     6a4:	str.w	r3, [r5, #168]	@ 0xa8
     6a8:	str.w	r3, [r5, #248]	@ 0xf8
     6ac:	str.w	r3, [r5, #328]	@ 0x148
     6b0:	mvn.w	r3, #1
     6b4:	ldr	r1, [pc, #168]	@ (760 <_GLOBAL__sub_I_storage+0xd4>)
        fsCount = 0;
     6b6:	str	r4, [r5, #4]
	constexpr Print() : write_error(0) {}
     6b8:	str.w	r4, [r5, #172]	@ 0xac
     6bc:	strb.w	r4, [r5, #180]	@ 0xb4
     6c0:	strb.w	r4, [r5, #260]	@ 0x104
     6c4:	strb.w	r4, [r5, #340]	@ 0x154
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6c8:	str.w	r4, [r5, #416]	@ 0x1a0
     6cc:	strh.w	r4, [r5, #428]	@ 0x1ac
     6d0:	strd	r4, r2, [r5, #252]	@ 0xfc
     6d4:	strd	r4, r2, [r5, #332]	@ 0x14c
     6d8:	mov	r2, r6
     6da:	strd	r3, r4, [r5, #420]	@ 0x1a4
  FsBaseFile() {}
     6de:	strd	r4, r4, [r5, #240]	@ 0xf0
     6e2:	strd	r4, r4, [r5, #320]	@ 0x140
     6e6:	strd	r4, r4, [r5, #400]	@ 0x190
     6ea:	strd	r4, r4, [r5, #408]	@ 0x198
     6ee:	bl	ca18 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     6f2:	ldr	r3, [pc, #112]	@ (764 <_GLOBAL__sub_I_storage+0xd8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     6f4:	ldr	r2, [pc, #112]	@ (768 <_GLOBAL__sub_I_storage+0xdc>)
  SdFs sdx[nsd];
     6f6:	mov	r0, r4
     6f8:	str	r5, [r3, #0]
     6fa:	add.w	r3, r3, #8192	@ 0x2000
     6fe:	ldr	r1, [pc, #108]	@ (76c <_GLOBAL__sub_I_storage+0xe0>)
     700:	str.w	r4, [r3, #1056]	@ 0x420
     704:	strb.w	r4, [r3, #1060]	@ 0x424
     708:	str.w	r4, [r3, #1064]	@ 0x428
  FsVolume() {}
     70c:	ldr	r3, [pc, #96]	@ (770 <_GLOBAL__sub_I_storage+0xe4>)
     70e:	str.w	r2, [r3, #1168]	@ 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     712:	ldr	r2, [pc, #96]	@ (774 <_GLOBAL__sub_I_storage+0xe8>)
     714:	str.w	r4, [r3, #1152]	@ 0x480
     718:	str.w	r2, [r3, #1188]	@ 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     71c:	movs	r2, #7
     71e:	str.w	r4, [r3, #1156]	@ 0x484
     722:	str.w	r2, [r3, #1192]	@ 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     726:	movs	r2, #41	@ 0x29
class SdBase : public Vol {
     728:	str.w	r4, [r3, #1164]	@ 0x48c
     72c:	strb.w	r2, [r3, #1197]	@ 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     730:	ldr	r2, [pc, #68]	@ (778 <_GLOBAL__sub_I_storage+0xec>)
  SdioConfig() {}
     732:	strh.w	r4, [r3, #1176]	@ 0x498
  SharedSpiCard() {}
     736:	strb.w	r4, [r3, #1201]	@ 0x4b1
  DedicatedSpiCard() {}
     73a:	str.w	r2, [r3, #1180]	@ 0x49c
     73e:	mov	r2, r6
     740:	strb.w	r4, [r3, #1208]	@ 0x4b8
     744:	strb.w	r4, [r3, #1224]	@ 0x4c8
  }
     748:	ldmia.w	sp!, {r4, r5, r6, lr}
  SdFs sdx[nsd];
     74c:	b.w	ca18 <__aeabi_atexit>
     750:	.word	0x200005a0
     754:	.word	0x200126a8
     758:	.word	0x20002230
     75c:	.word	0x200006a4
     760:	.word	0x000001a1
     764:	.word	0x20002b00
     768:	.word	0x200006ec
     76c:	.word	0x0000006d
     770:	.word	0x200121d4
     774:	.word	0x003d0900
     778:	.word	0x2000060c

0000077c <setup>:
{
     77c:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     77e:	ldr	r5, [pc, #264]	@ (888 <setup+0x10c>)
     780:	sub	sp, #28
    set_arm_clock(24'000'000);
     782:	ldr	r0, [pc, #264]	@ (88c <setup+0x110>)
				if (elapsed > 750) break;
     784:	movw	r7, #750	@ 0x2ee
     788:	bl	aaf0 <set_arm_clock>
			if (usb_configuration) {
     78c:	ldr	r6, [pc, #256]	@ (890 <setup+0x114>)
		uint32_t millis_begin = systick_millis_count;
     78e:	ldr	r4, [r5, #0]
		while (!(*this)) {
     790:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     794:	cbnz	r0, 7a4 <setup+0x28>
			uint32_t elapsed = systick_millis_count - millis_begin;
     796:	ldr	r3, [r5, #0]
			if (usb_configuration) {
     798:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     79a:	subs	r3, r3, r4
			if (usb_configuration) {
     79c:	cbz	r2, 7ca <setup+0x4e>
				if (elapsed > 2000) break;
     79e:	cmp.w	r3, #2000	@ 0x7d0
     7a2:	bls.n	7ce <setup+0x52>
  uint16_t *params=loadParameters();
     7a4:	bl	2230 <loadParameters()>
  if(params[0]==1)
     7a8:	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     7aa:	mov	r4, r0
  if(params[0]==1)
     7ac:	cmp	r3, #1
     7ae:	beq.n	7d4 <setup+0x58>
    while(millis()<10'000) if(Serial) { termon=1; break;}
     7b0:	movw	r6, #9999	@ 0x270f
     7b4:	ldr	r3, [r5, #0]
     7b6:	cmp	r3, r6
     7b8:	bhi.n	7ec <setup+0x70>
     7ba:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7be:	cmp	r0, #0
     7c0:	beq.n	7b4 <setup+0x38>
     7c2:	ldr	r3, [pc, #208]	@ (894 <setup+0x118>)
     7c4:	movs	r2, #1
     7c6:	str	r2, [r3, #0]
     7c8:	b.n	7ec <setup+0x70>
				if (elapsed > 750) break;
     7ca:	cmp	r3, r7
     7cc:	b.n	7a2 <setup+0x26>
			yield();
     7ce:	bl	c4a4 <yield>
     7d2:	b.n	790 <setup+0x14>
    termon = (t_rep>t_on)? 0: 1;
     7d4:	ldr	r3, [pc, #192]	@ (898 <setup+0x11c>)
     7d6:	ldr	r2, [pc, #196]	@ (89c <setup+0x120>)
     7d8:	ldrh	r3, [r3, #0]
     7da:	ldrh	r2, [r2, #0]
     7dc:	uxth	r3, r3
     7de:	uxth	r2, r2
     7e0:	cmp	r3, r2
     7e2:	ldr	r2, [pc, #176]	@ (894 <setup+0x118>)
     7e4:	ite	hi
     7e6:	movhi	r3, #0
     7e8:	movls	r3, #1
     7ea:	str	r3, [r2, #0]
  Serial.print("params[0] = "); Serial.println(params[0]);
     7ec:	ldr	r1, [pc, #176]	@ (8a0 <setup+0x124>)
     7ee:	ldr	r0, [pc, #180]	@ (8a4 <setup+0x128>)
     7f0:	bl	188 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     7f4:	ldrh	r1, [r4, #0]
     7f6:	ldr	r0, [pc, #172]	@ (8a4 <setup+0x128>)
     7f8:	bl	c7da <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     7fc:	ldr	r0, [pc, #164]	@ (8a4 <setup+0x128>)
     7fe:	bl	c7ec <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     802:	ldr	r0, [pc, #164]	@ (8a8 <setup+0x12c>)
     804:	bl	12100 <___ZN16CrashReportClasscvbEv_veneer>
     808:	cbz	r0, 812 <setup+0x96>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     80a:	ldr	r1, [pc, #152]	@ (8a4 <setup+0x128>)
     80c:	ldr	r0, [pc, #152]	@ (8a8 <setup+0x12c>)
     80e:	bl	120f0 <___ZNK16CrashReportClass7printToER5Print_veneer>
    usbPowerSetup();
     812:	bl	3740 <usbPowerSetup()>
    lowPowerInit();
     816:	bl	254 <lowPowerInit()>
    storage_configure();
     81a:	bl	548 <storage_configure()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     81e:	add	r0, sp, #16
     820:	bl	3c7e <rtc_get_datetime(datetime_t*)>
     824:	cbnz	r0, 82e <setup+0xb2>
     826:	ldr	r1, [pc, #132]	@ (8ac <setup+0x130>)
     828:	ldr	r0, [pc, #120]	@ (8a4 <setup+0x128>)
     82a:	bl	18c <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     82e:	ldrsb.w	r3, [sp, #23]
  setup_ready=1;
     832:	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     834:	ldrsh.w	r2, [sp, #16]
     838:	str	r3, [sp, #12]
     83a:	ldrsb.w	r3, [sp, #22]
     83e:	ldr	r1, [pc, #112]	@ (8b0 <setup+0x134>)
     840:	str	r3, [sp, #8]
     842:	ldrsb.w	r3, [sp, #21]
     846:	ldr	r0, [pc, #92]	@ (8a4 <setup+0x128>)
     848:	str	r3, [sp, #4]
     84a:	ldrsb.w	r3, [sp, #19]
     84e:	str	r3, [sp, #0]
     850:	ldrsb.w	r3, [sp, #18]
     854:	bl	c824 <Print::printf(char const*, ...)>
  Serial.println();
     858:	ldr	r0, [pc, #72]	@ (8a4 <setup+0x128>)
     85a:	bl	c7ec <Print::println()>
  Serial.println("filing_init");
     85e:	ldr	r1, [pc, #84]	@ (8b4 <setup+0x138>)
     860:	ldr	r0, [pc, #64]	@ (8a4 <setup+0x128>)
     862:	bl	18c <Print::println(char const*) [clone .isra.0]>
  filing_init();
     866:	bl	33b4 <filing_init()>
  setup_ready=1;
     86a:	ldr	r3, [pc, #76]	@ (8b8 <setup+0x13c>)
  Serial.println("Setup done");
     86c:	ldr	r1, [pc, #76]	@ (8bc <setup+0x140>)
     86e:	ldr	r0, [pc, #52]	@ (8a4 <setup+0x128>)
  setup_ready=1;
     870:	str	r4, [r3, #0]
  Serial.println("Setup done");
     872:	bl	18c <Print::println(char const*) [clone .isra.0]>
    setup1();
     876:	bl	494 <setup1()>
    pinMode(13,OUTPUT);
     87a:	mov	r1, r4
     87c:	movs	r0, #13
     87e:	bl	bfb8 <pinMode>
}
     882:	add	sp, #28
     884:	pop	{r4, r5, r6, r7, pc}
     886:	nop
     888:	.word	0x20012864
     88c:	.word	0x016e3600
     890:	.word	0x20012acd
     894:	.word	0x2001286c
     898:	.word	0x20012958
     89c:	.word	0x2000241e
     8a0:	.word	0x20000fcb
     8a4:	.word	0x20001e58
     8a8:	.word	0x20001e4c
     8ac:	.word	0x20000fd8
     8b0:	.word	0x20000fed
     8b4:	.word	0x20001014
     8b8:	.word	0x200126a4
     8bc:	.word	0x20001020

000008c0 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     8c0:	push	{r4, lr}
     8c2:	mov	r4, r0
		release();
     8c4:	bl	c610 <DMAChannel::release()>
	}
     8c8:	mov	r0, r4
     8ca:	pop	{r4, pc}

000008cc <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     8cc:	push	{r3, r4, r5, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     8ce:	ldr	r3, [pc, #148]	@ (964 <acq_isr()+0x98>)
     8d0:	ldr	r2, [r3, #0]
     8d2:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     8d4:	ldrb	r2, [r3, #4]
     8d6:	ldr	r3, [pc, #144]	@ (968 <acq_isr()+0x9c>)
     8d8:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     8da:	ldr	r2, [pc, #144]	@ (96c <acq_isr()+0xa0>)
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     8dc:	sub.w	r3, r2, #2048	@ 0x800
     8e0:	cmp	r1, r2
     8e2:	it	cc
     8e4:	movcc	r3, r2
	uint32_t end_addr = (uint32_t)addr + size;
     8e6:	add.w	r0, r3, #2048	@ 0x800
	asm("dsb");
     8ea:	dsb	sy
     8ee:	add.w	r2, r3, #32
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     8f2:	mov	r1, r3
		SCB_CACHE_DCIMVAC = location;
     8f4:	mov.w	r4, #3758153728	@ 0xe000e000
     8f8:	cmp	r2, r0
     8fa:	ite	hi
     8fc:	movhi	r2, #1
     8fe:	movls	r2, #64	@ 0x40
     900:	add.w	r2, r3, r2, lsl #5
     904:	str.w	r1, [r4, #3932]	@ 0xf5c
		location += 32;
     908:	adds	r1, #32
	} while (location < end_addr);
     90a:	cmp	r1, r2
     90c:	bne.n	904 <acq_isr()+0x38>
	asm("dsb");
     90e:	dsb	sy
	asm("isb");
     912:	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     916:	ldr	r1, [pc, #88]	@ (970 <acq_isr()+0xa4>)
     918:	ldr	r4, [pc, #88]	@ (974 <acq_isr()+0xa8>)
     91a:	ldr	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     91c:	ldr	r5, [pc, #88]	@ (978 <acq_isr()+0xac>)
{ procCount++;
     91e:	adds	r2, #1
     920:	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     922:	ldrh	r1, [r5, #0]
     924:	adds	r3, #16
     926:	ldr.w	r2, [r3, #-8]
     92a:	sxth	r1, r1
     92c:	cmp	r0, r3
     92e:	asr.w	r2, r2, r1
     932:	str.w	r2, [r4], #4
     936:	bne.n	922 <acq_isr()+0x56>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     938:	ldr	r2, [pc, #64]	@ (97c <acq_isr()+0xb0>)
     93a:	ldrh	r3, [r2, #0]
     93c:	sxth	r3, r3
     93e:	cbnz	r3, 952 <acq_isr()+0x86>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     940:	ldr	r0, [pc, #48]	@ (974 <acq_isr()+0xa8>)
     942:	bl	286c <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     946:	cbnz	r0, 950 <acq_isr()+0x84>
     948:	ldr	r2, [pc, #52]	@ (980 <acq_isr()+0xb4>)
     94a:	ldr	r3, [r2, #0]
     94c:	adds	r3, #1
     94e:	str	r3, [r2, #0]
  }
     950:	pop	{r3, r4, r5, pc}
  else if(proc==1)
     952:	ldrh	r3, [r2, #0]
     954:	sxth	r3, r3
     956:	cmp	r3, #1
     958:	bne.n	950 <acq_isr()+0x84>
   if(!compress((void *)acqBuffer)) procMiss++;
     95a:	ldr	r0, [pc, #24]	@ (974 <acq_isr()+0xa8>)
     95c:	bl	3468 <compress(void*)>
     960:	b.n	946 <acq_isr()+0x7a>
     962:	nop
     964:	.word	0x200114cc
     968:	.word	0x400e8000
     96c:	.word	0x20200800
     970:	.word	0x20012140
     974:	.word	0x20011e88
     978:	.word	0x2000241a
     97c:	.word	0x200128b4
     980:	.word	0x20012144
     984:	.word	0x00000000

00000988 <setAudioFrequency(int)>:
  {
     988:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     98c:	ldr.w	r8, [pc, #324]	@ ad4 <setAudioFrequency(int)+0x14c>
     990:	movs	r2, #5
     992:	mov	r4, r0
     994:	ldr	r1, [pc, #304]	@ (ac8 <setAudioFrequency(int)+0x140>)
     996:	ldr.w	r3, [r8]
     99a:	mov	r0, r8
     99c:	ldr	r3, [r3, #4]
     99e:	vpush	{d8}
     9a2:	sub	sp, #12
     9a4:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     9a6:	mov.w	r1, #256	@ 0x100
     9aa:	mov	r0, r8
     9ac:	bl	c7da <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     9b0:	mov	r0, r8
     9b2:	bl	c7ec <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     9b6:	movs	r3, #26
     9b8:	lsls	r1, r4, #8
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9ba:	ldr	r0, [pc, #272]	@ (acc <setAudioFrequency(int)+0x144>)
    {   n0++;
     9bc:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9be:	mov	r2, r1
        n1=0;
     9c0:	movs	r5, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9c2:	mul.w	ip, r0, r3
        {   n1++; 
     9c6:	mov	r6, r5
     9c8:	adds	r5, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9ca:	sdiv	r7, ip, r2
     9ce:	add.w	r9, r7, #1
        } while ((n2>64) && (n1<=8));
     9d2:	cmp.w	r9, #64	@ 0x40
     9d6:	ble.n	9e4 <setAudioFrequency(int)+0x5c>
     9d8:	cmp	r5, #9
     9da:	add	r2, r1
     9dc:	bne.n	9c6 <setAudioFrequency(int)+0x3e>
    } while ((n2>64 && n0<54));
     9de:	cmp	r3, #54	@ 0x36
     9e0:	bne.n	9bc <setAudioFrequency(int)+0x34>
     9e2:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9e4:	mov	r2, r4
     9e6:	ldr	r1, [pc, #232]	@ (ad0 <setAudioFrequency(int)+0x148>)
     9e8:	ldr	r0, [pc, #232]	@ (ad4 <setAudioFrequency(int)+0x14c>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     9ea:	and.w	r7, r7, #63	@ 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     9ee:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9f0:	strd	r5, r9, [sp]
     9f4:	bl	c824 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     9f8:	vmov	s15, r4
							  return write((const uint8_t *)str, strlen(str)); }
     9fc:	ldr.w	r3, [r8]
     a00:	movs	r2, #3
     a02:	vcvt.f64.s32	d7, s15
     a06:	ldr	r1, [pc, #208]	@ (ad8 <setAudioFrequency(int)+0x150>)
     a08:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a0a:	and.w	r6, r6, #448	@ 0x1c0
     a0e:	ldr	r0, [pc, #196]	@ (ad4 <setAudioFrequency(int)+0x14c>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a10:	vldr	d6, [pc, #156]	@ ab0 <setAudioFrequency(int)+0x128>
     a14:	vmul.f64	d7, d7, d6
     a18:	vmov	s13, r5
     a1c:	vcvt.f64.s32	d6, s13
     a20:	vmul.f64	d7, d7, d6
     a24:	vmov	s13, r9
     a28:	vcvt.f64.s32	d6, s13
     a2c:	vmul.f64	d7, d7, d6
     a30:	vldr	d6, [pc, #132]	@ ab8 <setAudioFrequency(int)+0x130>
     a34:	vdiv.f64	d8, d7, d6
     a38:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a3a:	movs	r1, #2
     a3c:	ldr	r0, [pc, #148]	@ (ad4 <setAudioFrequency(int)+0x14c>)
     a3e:	vmov.f64	d0, d8
     a42:	bl	c8e8 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     a46:	ldr	r0, [pc, #140]	@ (ad4 <setAudioFrequency(int)+0x14c>)
     a48:	bl	c7ec <Print::println()>
    int c0 = C;
     a4c:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     a50:	movw	r2, #10000	@ 0x2710
    int c0 = C;
     a54:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     a58:	mul.w	r3, r2, r0
     a5c:	vmov	s14, r3
     a60:	vldr	d6, [pc, #92]	@ ac0 <setAudioFrequency(int)+0x138>
     a64:	vcvt.f64.s32	d7, s14
     a68:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     a6c:	vcvt.s32.f64	s15, d7
     a70:	vmov	r1, s15
     a74:	bl	120f8 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a78:	ldr	r2, [pc, #96]	@ (adc <setAudioFrequency(int)+0x154>)
     a7a:	ldr	r3, [r2, #28]
     a7c:	bic.w	r3, r3, #3072	@ 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     a80:	orr.w	r3, r3, #2048	@ 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a84:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a86:	ldr	r3, [r2, #40]	@ 0x28
     a88:	bfc	r3, #0, #9
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a8c:	orrs	r3, r7
     a8e:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a90:	str	r3, [r2, #40]	@ 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     a92:	sub.w	r2, r2, #327680	@ 0x50000
     a96:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     a98:	bic.w	r3, r3, #524288	@ 0x80000
     a9c:	bic.w	r3, r3, #7
     aa0:	orr.w	r3, r3, #524288	@ 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     aa4:	str	r3, [r2, #4]
  }
     aa6:	add	sp, #12
     aa8:	vpop	{d8}
     aac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     ab0:	.word	0x00000000
     ab4:	.word	0x40700000
     ab8:	.word	0x00000000
     abc:	.word	0x4176e360
     ac0:	.word	0x00000000
     ac4:	.word	0x40c38800
     ac8:	.word	0x20001030
     acc:	.word	0x016e3600
     ad0:	.word	0x20001036
     ad4:	.word	0x20001e58
     ad8:	.word	0x20001053
     adc:	.word	0x400fc000

00000ae0 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     ae0:	ldr	r2, [pc, #100]	@ (b48 <i2s_setup()+0x68>)
     ae2:	ldr	r3, [r2, #124]	@ 0x7c
  {
     ae4:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     ae6:	orr.w	r3, r3, #786432	@ 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     aea:	ldr	r4, [pc, #96]	@ (b4c <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     aec:	str	r3, [r2, #124]	@ 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     aee:	ldr.w	r3, [r4, #136]	@ 0x88
     af2:	cmp	r3, #0
     af4:	blt.n	b46 <i2s_setup()+0x66>
    int fs = fsamp;
     af6:	ldr	r3, [pc, #88]	@ (b50 <i2s_setup()+0x70>)
     af8:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     afa:	bl	988 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     afe:	ldr	r3, [pc, #84]	@ (b54 <i2s_setup()+0x74>)
     b00:	movs	r2, #3
     b02:	str.w	r2, [r3, #288]	@ 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     b06:	str.w	r2, [r3, #296]	@ 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     b0a:	str.w	r2, [r3, #292]	@ 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     b0e:	str.w	r2, [r3, #380]	@ 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     b12:	movs	r2, #2
     b14:	str.w	r2, [r3, #1428]	@ 0x594
    I2S1_RMR = 0;
     b18:	movs	r3, #0
     b1a:	str.w	r3, [r4, #224]	@ 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     b1e:	movs	r3, #4
     b20:	str.w	r3, [r4, #140]	@ 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     b24:	mov.w	r3, #83886080	@ 0x5000000
     b28:	str.w	r3, [r4, #144]	@ 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     b2c:	mov.w	r3, #65536	@ 0x10000
     b30:	str.w	r3, [r4, #148]	@ 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     b34:	ldr	r3, [pc, #32]	@ (b58 <i2s_setup()+0x78>)
     b36:	str.w	r3, [r4, #152]	@ 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     b3a:	ldr	r3, [pc, #32]	@ (b5c <i2s_setup()+0x7c>)
     b3c:	str.w	r3, [r4, #156]	@ 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     b40:	ldr	r3, [pc, #28]	@ (b60 <i2s_setup()+0x80>)
     b42:	str.w	r3, [r4, #136]	@ 0x88
  }
     b46:	pop	{r4, pc}
     b48:	.word	0x400fc000
     b4c:	.word	0x40384000
     b50:	.word	0x200023fc
     b54:	.word	0x401f8000
     b58:	.word	0x0003001b
     b5c:	.word	0x1f1f1f00
     b60:	.word	0x92000001

00000b64 <dma_setup()>:
  {
     b64:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     b66:	ldr	r4, [pc, #128]	@ (be8 <dma_setup()+0x84>)
     b68:	movs	r1, #1
     b6a:	mov	r0, r4
     b6c:	bl	c574 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b70:	ldr	r3, [r4, #0]
     b72:	ldr	r2, [pc, #120]	@ (bec <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b74:	ldr	r1, [pc, #120]	@ (bf0 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b76:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b78:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     b7a:	ldr	r0, [pc, #120]	@ (bf4 <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     b7c:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     b7e:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     b80:	ldr	r0, [pc, #116]	@ (bf8 <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b82:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b86:	mov.w	r2, #1024	@ 0x400
    dma.TCD->SLAST = 0;
     b8a:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b8c:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     b8e:	sub.w	r2, r2, #5120	@ 0x1400
    dma.TCD->SLAST = 0;
     b92:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     b94:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     b96:	ldrh	r2, [r3, #22]
     b98:	uxth	r2, r2
     b9a:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     b9c:	movs	r2, #6
     b9e:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     ba0:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     ba2:	ldr	r2, [pc, #88]	@ (bfc <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     ba4:	lsls	r3, r3, #2
     ba6:	add.w	r3, r3, #1073741824	@ 0x40000000
     baa:	add.w	r3, r3, #966656	@ 0xec000
		*mux = 0;
     bae:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bb0:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     bb2:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     bb4:	ldr	r2, [pc, #72]	@ (c00 <dma_setup()+0x9c>)
     bb6:	add.w	r1, r3, #16
     bba:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bbe:	asrs	r2, r3, #5
     bc0:	and.w	r0, r3, #31
     bc4:	movs	r1, #1
     bc6:	add.w	r2, r2, #939538432	@ 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bca:	add.w	r3, r3, #3758096384	@ 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bce:	lsls	r1, r0
     bd0:	adds	r2, #64	@ 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bd2:	add.w	r3, r3, #58368	@ 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bd6:	lsls	r2, r2, #2
     bd8:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bda:	movs	r2, #96	@ 0x60
     bdc:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     bde:	ldr	r3, [pc, #36]	@ (c04 <dma_setup()+0xa0>)
     be0:	ldrb	r2, [r4, #4]
     be2:	strb	r2, [r3, #27]
  }
     be4:	pop	{r4, pc}
     be6:	nop
     be8:	.word	0x200114cc
     bec:	.word	0x403840a0
     bf0:	.word	0x02020000
     bf4:	.word	0x20200000
     bf8:	.word	0x000008cd
     bfc:	.word	0x80000013
     c00:	.word	0x20002800
     c04:	.word	0x400e8000

00000c08 <acqModifyFrequency(unsigned long)>:
  {
     c08:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     c0a:	ldr	r4, [pc, #32]	@ (c2c <acqModifyFrequency(unsigned long)+0x24>)
     c0c:	ldr.w	r3, [r4, #136]	@ 0x88
     c10:	bic.w	r3, r3, #2415919104	@ 0x90000000
     c14:	str.w	r3, [r4, #136]	@ 0x88
    setAudioFrequency(fsamp);
     c18:	bl	988 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     c1c:	ldr.w	r3, [r4, #136]	@ 0x88
     c20:	orr.w	r3, r3, #2415919104	@ 0x90000000
     c24:	str.w	r3, [r4, #136]	@ 0x88
  }
     c28:	pop	{r4, pc}
     c2a:	nop
     c2c:	.word	0x40384000

00000c30 <_GLOBAL__sub_I_procCount>:
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     c30:	push	{r4, lr}
		begin();
     c32:	ldr	r4, [pc, #24]	@ (c4c <_GLOBAL__sub_I_procCount+0x1c>)
     c34:	movs	r1, #0
     c36:	mov	r0, r4
     c38:	bl	c574 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     c3c:	mov	r0, r4
     c3e:	ldr	r2, [pc, #16]	@ (c50 <_GLOBAL__sub_I_procCount+0x20>)
     c40:	ldr	r1, [pc, #16]	@ (c54 <_GLOBAL__sub_I_procCount+0x24>)
}
     c42:	ldmia.w	sp!, {r4, lr}
  static DMAChannel dma;
     c46:	b.w	ca18 <__aeabi_atexit>
     c4a:	nop
     c4c:	.word	0x200114cc
     c50:	.word	0x20002230
     c54:	.word	0x000008c1

00000c58 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c58:	ldr	r3, [r0, #4]
     c5a:	cmp	r3, #19
{ 
public:
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c5c:	push	{r4, lr}
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c5e:	bgt.n	c6c <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x14>
          sd_name[fsCount] = name;
     c60:	add.w	r4, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
     c64:	adds	r3, #1
          sd_name[fsCount] = name;
     c66:	str	r2, [r4, #8]
          sdx[fsCount++] = &fs;
     c68:	str	r3, [r0, #4]
     c6a:	str	r1, [r4, #88]	@ 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c6c:	pop	{r4, pc}

00000c6e <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = O_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
     c6e:	ldr	r0, [r0, #4]
     c70:	bx	lr

00000c72 <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
     c72:	add.w	r0, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
     c76:	ldr	r0, [r0, #8]
     c78:	bx	lr

00000c7a <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
     c7a:	movs	r0, #0
     c7c:	bx	lr

00000c7e <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
     c7e:	movs	r0, #1
     c80:	bx	lr

00000c82 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
     c82:	push	{r4, r5}
     c84:	mov	r4, r0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c86:	ldr	r0, [r0, #56]	@ 0x38
  bool seekSet(uint64_t pos) {
     c88:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c8a:	cbz	r0, c94 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
     c8c:	cbnz	r3, c9e <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
     c8e:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c90:	b.w	7396 <FatFile::seekSet(unsigned long)>
           m_xFile ? m_xFile->seekSet(pos) : false;
     c94:	ldr	r0, [r4, #60]	@ 0x3c
     c96:	cbz	r0, c9e <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
     c98:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     c9a:	b.w	5d2a <ExFatFile::seekSet(unsigned long long)>
  }
     c9e:	pop	{r4, r5}
     ca0:	bx	lr

00000ca2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     ca2:	push	{r4}
    *name = 0;
     ca4:	movs	r4, #0
  size_t getName(char* name, size_t len) {
     ca6:	mov	r3, r0
    *name = 0;
     ca8:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     caa:	ldr	r0, [r0, #56]	@ 0x38
     cac:	cbz	r0, cb6 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
  }
     cae:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     cb2:	b.w	706c <FatFile::getName(char*, unsigned int)>
     cb6:	ldr	r0, [r3, #60]	@ 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     cb8:	cbz	r0, cc2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     cba:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     cbe:	b.w	5944 <ExFatFile::getName8(char*, unsigned int)>
     cc2:	ldr.w	r4, [sp], #4
     cc6:	bx	lr

00000cc8 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>:
  bool getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
     cc8:	mov	r3, r0
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     cca:	ldr	r0, [r0, #56]	@ 0x38
     ccc:	cbz	r0, cd2 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]+0xa>
     cce:	b.w	7746 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     cd2:	ldr	r0, [r3, #60]	@ 0x3c
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     cd4:	cbz	r0, cda <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]+0x12>
     cd6:	b.w	5aa0 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
  }
     cda:	bx	lr

00000cdc <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cdc:	push	{r4, lr}
     cde:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     ce0:	movs	r3, #0
     ce2:	movs	r2, #10
     ce4:	bl	c83e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     ce8:	mov	r0, r4
     cea:	ldmia.w	sp!, {r4, lr}
     cee:	b.w	c7ec <Print::println()>

00000cf2 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cf2:	push	{r4, r5, r6, lr}
     cf4:	mov	r5, r0
     cf6:	mov	r4, r1
     cf8:	cbz	r1, d10 <Print::write(char const*) [clone .isra.0]+0x1e>
							  return write((const uint8_t *)str, strlen(str)); }
     cfa:	mov	r0, r1
     cfc:	bl	ee80 <strlen>
     d00:	ldr	r3, [r5, #0]
     d02:	mov	r2, r0
     d04:	mov	r1, r4
     d06:	mov	r0, r5
     d08:	ldr	r3, [r3, #4]
     d0a:	ldmia.w	sp!, {r4, r5, r6, lr}
     d0e:	bx	r3
     d10:	pop	{r4, r5, r6, pc}

00000d12 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d12:	push	{r4, lr}
     d14:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     d16:	bl	cf2 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     d1a:	mov	r0, r4
     d1c:	ldmia.w	sp!, {r4, lr}
     d20:	b.w	c7ec <Print::println()>

00000d24 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
     d24:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     d26:	ldr	r4, [pc, #44]	@ (d54 <dbgPrint(unsigned short)+0x30>)
     d28:	mov	r5, r0
     d2a:	ldr	r1, [pc, #44]	@ (d58 <dbgPrint(unsigned short)+0x34>)
     d2c:	mov	r0, r4
     d2e:	bl	cf2 <Print::write(char const*) [clone .isra.0]>
     d32:	ldr	r1, [pc, #40]	@ (d5c <dbgPrint(unsigned short)+0x38>)
     d34:	mov	r0, r4
     d36:	bl	cf2 <Print::write(char const*) [clone .isra.0]>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     d3a:	movs	r0, #46	@ 0x2e
     d3c:	bl	a9fc <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     d40:	mov	r1, r5
     d42:	mov	r0, r4
     d44:	bl	c7da <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     d48:	mov	r0, r4
  }
     d4a:	ldmia.w	sp!, {r3, r4, r5, lr}
     d4e:	b.w	c7ec <Print::println()>
     d52:	nop
     d54:	.word	0x20001e58
     d58:	.word	0x20001057
     d5c:	.word	0x20001062

00000d60 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     d60:	ldr.w	r3, [r0, #1152]	@ 0x480
     d64:	cbz	r3, d72 <FsVolume::bytesPerCluster() const+0x12>
     d66:	ldrb	r3, [r3, #6]
     d68:	mov.w	r0, #512	@ 0x200
     d6c:	lsls	r0, r3
     d6e:	uxth	r0, r0
     d70:	bx	lr
     d72:	ldr.w	r0, [r0, #1156]	@ 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d76:	cbz	r0, d7c <FsVolume::bytesPerCluster() const+0x1c>
     d78:	ldr.w	r0, [r0, #1084]	@ 0x43c
  }
     d7c:	bx	lr

00000d7e <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     d7e:	ldr.w	r3, [r0, #1152]	@ 0x480
     d82:	cbz	r3, d8a <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     d84:	ldr	r0, [r3, #28]
     d86:	subs	r0, #1
     d88:	bx	lr
     d8a:	ldr.w	r0, [r0, #1156]	@ 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     d8e:	cbz	r0, d94 <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     d90:	ldr.w	r0, [r0, #1072]	@ 0x430
  }
     d94:	bx	lr

00000d96 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
     d96:	add.w	r0, r0, r1, lsl #2
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
     d9a:	push	{r3, r4, r5, lr}
     d9c:	ldr	r5, [r0, #88]	@ 0x58
     d9e:	mov	r0, r5
     da0:	bl	d7e <FsVolume::clusterCount() const>
     da4:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
     da6:	mov	r0, r5
     da8:	bl	d60 <FsVolume::bytesPerCluster() const>
     dac:	umull	r0, r1, r4, r0
     db0:	pop	{r3, r4, r5, pc}

00000db2 <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     db2:	ldr.w	r3, [r0, #1152]	@ 0x480
  bool rename(const char *oldPath, const char *newPath) {
     db6:	push	{r4, r5, lr}
     db8:	mov	r5, r2
     dba:	sub	sp, #60	@ 0x3c
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     dbc:	cbz	r3, de2 <FsVolume::rename(char const*, char const*)+0x30>
  FatFile() {}
     dbe:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     dc0:	add.w	r4, r3, #1096	@ 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     dc4:	mov	r0, sp
     dc6:	mov	r3, r2
     dc8:	str	r2, [sp, #0]
     dca:	mov	r2, r1
     dcc:	mov	r1, r4
     dce:	bl	7664 <FatFile::open(FatFile*, char const*, int)>
     dd2:	cbz	r0, dde <FsVolume::rename(char const*, char const*)+0x2c>
     dd4:	mov	r2, r5
     dd6:	mov	r1, r4
     dd8:	mov	r0, sp
     dda:	bl	7924 <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     dde:	add	sp, #60	@ 0x3c
     de0:	pop	{r4, r5, pc}
     de2:	ldr.w	r4, [r0, #1156]	@ 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     de6:	cbz	r4, dfa <FsVolume::rename(char const*, char const*)+0x48>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     de8:	add.w	r4, r4, #1096	@ 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     dec:	mov	r2, r1
     dee:	mov	r0, sp
  ExFatFile() {}
     df0:	str	r3, [sp, #48]	@ 0x30
     df2:	mov	r1, r4
     df4:	bl	6154 <ExFatFile::open(ExFatFile*, char const*, int)>
     df8:	cbnz	r0, dfe <FsVolume::rename(char const*, char const*)+0x4c>
     dfa:	movs	r0, #0
     dfc:	b.n	dde <FsVolume::rename(char const*, char const*)+0x2c>
     dfe:	mov	r2, r5
     e00:	mov	r1, r4
     e02:	mov	r0, sp
     e04:	bl	6b40 <ExFatFile::rename(ExFatFile*, char const*)>
     e08:	cmp	r0, #0
     e0a:	beq.n	dfa <FsVolume::rename(char const*, char const*)+0x48>
     e0c:	b.n	dde <FsVolume::rename(char const*, char const*)+0x2c>

00000e0e <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     e0e:	ldr	r3, [r0, #56]	@ 0x38
  int available() const {
     e10:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     e12:	cbz	r3, e2a <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e14:	ldrb	r0, [r3, #0]
     e16:	ands.w	r0, r0, #8
     e1a:	beq.n	e28 <FsBaseFile::available() const+0x1a>
     e1c:	ldr	r0, [r3, #28]
     e1e:	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     e20:	subs	r0, r0, r3
     e22:	it	mi
     e24:	mvnmi.w	r0, #2147483648	@ 0x80000000
  }
     e28:	pop	{r4, pc}
     e2a:	ldr	r0, [r0, #60]	@ 0x3c
           m_xFile ? m_xFile->available() : 0;
     e2c:	cmp	r0, #0
     e2e:	beq.n	e28 <FsBaseFile::available() const+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     e30:	ldrb.w	r3, [r0, #49]	@ 0x31
     e34:	ands.w	r3, r3, #8
     e38:	beq.n	e58 <FsBaseFile::available() const+0x4a>
     e3a:	ldrd	r1, r3, [r0, #16]
     e3e:	ldrd	r2, r4, [r0]
     e42:	subs	r0, r1, r2
     e44:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e48:	cmp.w	r0, #2147483648	@ 0x80000000
     e4c:	sbcs.w	r3, r3, #0
     e50:	it	cs
     e52:	mvncs.w	r0, #2147483648	@ 0x80000000
     e56:	b.n	e28 <FsBaseFile::available() const+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     e58:	mov	r0, r3
     e5a:	b.n	e48 <FsBaseFile::available() const+0x3a>

00000e5c <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     e5c:	ldr	r3, [r0, #56]	@ 0x38
     e5e:	cbz	r3, e6e <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     e60:	ldrb	r3, [r3, #0]
     e62:	tst.w	r3, #112	@ 0x70
           m_xFile ? m_xFile->isDir() : false;
     e66:	ite	ne
     e68:	movne	r0, #1
     e6a:	moveq	r0, #0
  }
     e6c:	bx	lr
     e6e:	ldr	r0, [r0, #60]	@ 0x3c
           m_xFile ? m_xFile->isDir() : false;
     e70:	cmp	r0, #0
     e72:	beq.n	e6c <FsBaseFile::isDir() const+0x10>
     e74:	ldrb.w	r3, [r0, #49]	@ 0x31
     e78:	tst.w	r3, #80	@ 0x50
     e7c:	b.n	e66 <FsBaseFile::isDir() const+0xa>

00000e7e <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     e7e:	ldr	r3, [r0, #56]	@ 0x38
     e80:	cbnz	r3, e8c <FsBaseFile::isOpen() const+0xe>
     e82:	ldr	r0, [r0, #60]	@ 0x3c
     e84:	subs	r0, #0
     e86:	it	ne
     e88:	movne	r0, #1
     e8a:	bx	lr
     e8c:	movs	r0, #1
     e8e:	bx	lr

00000e90 <MTPStorage_SD::CloseIndex()>:
  {
     e90:	push	{r3, r4, r5, lr}
    if(index_.isOpen()) {index_.close();}
     e92:	add.w	r5, r0, #184	@ 0xb8
  {
     e96:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
     e98:	mov	r0, r5
     e9a:	bl	e7e <FsBaseFile::isOpen() const>
     e9e:	cbz	r0, ea6 <MTPStorage_SD::CloseIndex()+0x16>
     ea0:	mov	r0, r5
     ea2:	bl	8824 <FsBaseFile::close()>
    index_generated = false;
     ea6:	movs	r3, #0
     ea8:	strb.w	r3, [r4, #428]	@ 0x1ac
    index_entries_ = 0;
     eac:	str.w	r3, [r4, #424]	@ 0x1a8
  }
     eb0:	pop	{r3, r4, r5, pc}

00000eb2 <FsBaseFile::read(void*, unsigned int)>:
  int read(void* buf, size_t count) {
     eb2:	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     eb4:	ldr	r0, [r0, #56]	@ 0x38
     eb6:	cbz	r0, ebc <FsBaseFile::read(void*, unsigned int)+0xa>
     eb8:	b.w	71bc <FatFile::read(void*, unsigned int)>
     ebc:	ldr	r0, [r3, #60]	@ 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     ebe:	cbz	r0, ec4 <FsBaseFile::read(void*, unsigned int)+0x12>
     ec0:	b.w	5b88 <ExFatFile::read(void*, unsigned int)>
  }
     ec4:	mov.w	r0, #4294967295
     ec8:	bx	lr

00000eca <MTPStorage_SD::mwrite(unsigned char const*, unsigned long)>:
  {
     eca:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     ecc:	add.w	r0, r0, #264	@ 0x108
     ed0:	bl	1dc <FsBaseFile::write(void const*, unsigned int)>
  }
     ed4:	pop	{r3, pc}
	...

00000ed8 <FsFile::FsFile()>:
     ed8:	movs	r2, #0
     eda:	mov.w	r1, #1000	@ 0x3e8
     ede:	strb	r2, [r0, #12]
     ee0:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     ee4:	strd	r2, r2, [r0, #72]	@ 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     ee8:	ldr	r2, [pc, #4]	@ (ef0 <FsFile::FsFile()+0x18>)
     eea:	str	r2, [r0, #0]
     eec:	bx	lr
     eee:	nop
     ef0:	.word	0x200006a4

00000ef4 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     ef4:	ldr	r3, [pc, #16]	@ (f08 <FsFile::~FsFile()+0x14>)
     ef6:	push	{r4, lr}
     ef8:	mov	r4, r0
     efa:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     efe:	bl	8824 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f02:	mov	r0, r4
     f04:	pop	{r4, pc}
     f06:	nop
     f08:	.word	0x2000057c

00000f0c <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     f0c:	add.w	r0, r0, r1, lsl #2
     f10:	ldr	r3, [r0, #84]	@ 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     f12:	ldr.w	r1, [r3, #1152]	@ 0x480
     f16:	push	{lr}
     f18:	sub	sp, #60	@ 0x3c
     f1a:	cbz	r1, f32 <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     f1c:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     f1e:	add.w	r1, r1, #1096	@ 0x448
     f22:	mov	r0, sp
     f24:	str	r3, [sp, #0]
     f26:	movs	r3, #1
     f28:	bl	7880 <FatFile::mkdir(FatFile*, char const*, bool)>
     f2c:	add	sp, #60	@ 0x3c
     f2e:	ldr.w	pc, [sp], #4
     f32:	ldr.w	r0, [r3, #1156]	@ 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f36:	cmp	r0, #0
     f38:	beq.n	f2c <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f3a:	str	r1, [sp, #48]	@ 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f3c:	movs	r3, #1
     f3e:	add.w	r1, r0, #1096	@ 0x448
     f42:	mov	r0, sp
     f44:	bl	6a82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f48:	b.n	f2c <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f4c <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f4c:	push	{r4, r5, r6, lr}
     f4e:	mov	r5, r0
     f50:	mov	r6, r1
     f52:	sub	sp, #56	@ 0x38
     f54:	mov	r1, r2
     f56:	add.w	r5, r5, r6, lsl #2
     f5a:	ldr	r0, [pc, #80]	@ (fac <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     f5c:	mov	r4, r2
     f5e:	bl	d12 <Print::println(char const*) [clone .isra.0]>
     f62:	ldr	r3, [r5, #84]	@ 0x54
    return m_fVol ? m_fVol->remove(path) :
     f64:	ldr.w	r1, [r3, #1152]	@ 0x480
     f68:	cbz	r1, f84 <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     f6a:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f6c:	mov	r2, r4
     f6e:	mov	r0, sp
     f70:	str	r3, [sp, #0]
     f72:	movs	r3, #1
     f74:	bl	7702 <FatFile::open(FatVolume*, char const*, int)>
     f78:	cbz	r0, f80 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f7a:	mov	r0, sp
     f7c:	bl	876c <FatFile::remove()>
     f80:	add	sp, #56	@ 0x38
     f82:	pop	{r4, r5, r6, pc}
     f84:	ldr.w	r0, [r3, #1156]	@ 0x484
           m_xVol ? m_xVol->remove(path) : false;
     f88:	cbz	r0, f9a <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     f8a:	str	r1, [sp, #48]	@ 0x30
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f8c:	movs	r3, #1
     f8e:	mov	r1, r0
     f90:	mov	r2, r4
     f92:	mov	r0, sp
     f94:	bl	621a <ExFatFile::open(ExFatVolume*, char const*, int)>
     f98:	cbnz	r0, f9e <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     f9a:	movs	r0, #0
     f9c:	b.n	f80 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f9e:	mov	r0, sp
     fa0:	bl	6796 <ExFatFile::remove()>
     fa4:	cmp	r0, #0
     fa6:	beq.n	f9a <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     fa8:	b.n	f80 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     faa:	nop
     fac:	.word	0x20001e58

00000fb0 <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
     fb0:	add.w	r0, r0, r1, lsl #2
     fb4:	ldr	r3, [r0, #84]	@ 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
     fb6:	ldr.w	r1, [r3, #1152]	@ 0x480
     fba:	push	{lr}
     fbc:	sub	sp, #60	@ 0x3c
     fbe:	cbz	r1, fd8 <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
     fc0:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fc2:	mov	r0, sp
     fc4:	str	r3, [sp, #0]
     fc6:	bl	7702 <FatFile::open(FatVolume*, char const*, int)>
     fca:	cbz	r0, fd2 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     fcc:	mov	r0, sp
     fce:	bl	7436 <FatFile::rmdir()>
     fd2:	add	sp, #60	@ 0x3c
     fd4:	ldr.w	pc, [sp], #4
     fd8:	ldr.w	r0, [r3, #1156]	@ 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
     fdc:	cbz	r0, fec <mSD_Base::sd_rmdir(unsigned long, char*)+0x3c>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fde:	mov	r3, r1
     fe0:	str	r1, [sp, #48]	@ 0x30
     fe2:	mov	r1, r0
     fe4:	mov	r0, sp
     fe6:	bl	621a <ExFatFile::open(ExFatVolume*, char const*, int)>
     fea:	cbnz	r0, ff0 <mSD_Base::sd_rmdir(unsigned long, char*)+0x40>
     fec:	movs	r0, #0
     fee:	b.n	fd2 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     ff0:	mov	r0, sp
     ff2:	bl	6822 <ExFatFile::rmdir()>
     ff6:	cmp	r0, #0
     ff8:	beq.n	fec <mSD_Base::sd_rmdir(unsigned long, char*)+0x3c>
     ffa:	b.n	fd2 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>

00000ffc <MTPStorage_SD::OpenIndex()>:
  { 
     ffc:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
     ffe:	add.w	r5, r0, #184	@ 0xb8
  { 
    1002:	sub	sp, #84	@ 0x54
    1004:	mov	r4, r0
    if(index_.isOpen()) return; // only once
    1006:	mov	r0, r5
    1008:	bl	e7e <FsBaseFile::isOpen() const>
    100c:	cbnz	r0, 1054 <MTPStorage_SD::OpenIndex()+0x58>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    100e:	ldr	r2, [pc, #72]	@ (1058 <MTPStorage_SD::OpenIndex()+0x5c>)
    1010:	movw	r3, #514	@ 0x202
    1014:	ldr	r1, [r4, #88]	@ 0x58
    1016:	mov	r0, sp
    1018:	bl	8a54 <FsVolume::open(char const*, int)>
class Print
    101c:	ldr	r3, [sp, #4]
    101e:	add	r1, sp, #16
    1020:	mov	r0, r5
    1022:	str.w	r3, [r4, #172]	@ 0xac
class Stream : public Print
    1026:	ldr	r3, [sp, #8]
    1028:	str.w	r3, [r4, #176]	@ 0xb0
    102c:	ldrb.w	r3, [sp, #12]
    1030:	strb.w	r3, [r4, #180]	@ 0xb4
    1034:	bl	8850 <FsBaseFile::operator=(FsBaseFile const&)>
    index_=sd_open(0,indexFile, (O_RDWR | O_CREAT));
    1038:	mov	r0, sp
    103a:	bl	ef4 <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    103e:	mov	r0, r5
    1040:	bl	e7e <FsBaseFile::isOpen() const>
    1044:	cbnz	r0, 1054 <MTPStorage_SD::OpenIndex()+0x58>
    1046:	ldr	r1, [pc, #20]	@ (105c <MTPStorage_SD::OpenIndex()+0x60>)
    1048:	ldr	r0, [pc, #20]	@ (1060 <MTPStorage_SD::OpenIndex()+0x64>)
  }
    104a:	add	sp, #84	@ 0x54
    104c:	ldmia.w	sp!, {r4, r5, lr}
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    1050:	b.w	d12 <Print::println(char const*) [clone .isra.0]>
  }
    1054:	add	sp, #84	@ 0x54
    1056:	pop	{r4, r5, pc}
    1058:	.word	0x2000106e
    105c:	.word	0x2000107c
    1060:	.word	0x20001e58

00001064 <MTPStorage_SD::ResetIndex()>:
  void MTPStorage_SD::ResetIndex() {
    1064:	push	{r4, lr}
    1066:	mov	r4, r0
    if(!index_.isOpen()) return;
    1068:	adds	r0, #184	@ 0xb8
    106a:	bl	e7e <FsBaseFile::isOpen() const>
    106e:	cbz	r0, 1090 <MTPStorage_SD::ResetIndex()+0x2c>
    CloseIndex();
    1070:	ldr	r3, [r4, #0]
    1072:	mov	r0, r4
    1074:	ldr	r3, [r3, #64]	@ 0x40
    1076:	blx	r3
    all_scanned_ = false;
    1078:	movs	r3, #0
    OpenIndex();
    107a:	mov	r0, r4
    all_scanned_ = false;
    107c:	strb.w	r3, [r4, #429]	@ 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    1080:	mvn.w	r3, #1
    1084:	str.w	r3, [r4, #420]	@ 0x1a4
  }
    1088:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    108c:	b.w	ffc <MTPStorage_SD::OpenIndex()>
  }
    1090:	pop	{r4, pc}

00001092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    1092:	push	{r3, r4, r5, r6, r7, lr}
    1094:	mov	r4, r0
    1096:	mov	r6, r1
    index_.seekSet((sizeof(r) * i));
    1098:	mov.w	r7, #280	@ 0x118
  { OpenIndex();
    109c:	mov	r5, r2
    index_.seekSet((sizeof(r) * i));
    109e:	adds	r4, #184	@ 0xb8
  { OpenIndex();
    10a0:	bl	ffc <MTPStorage_SD::OpenIndex()>
    index_.seekSet((sizeof(r) * i));
    10a4:	mul.w	r2, r7, r6
    10a8:	movs	r3, #0
    10aa:	mov	r0, r4
    10ac:	bl	c82 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    index_.write((char*)&r, sizeof(r));
    10b0:	mov	r2, r7
    10b2:	mov	r1, r5
    10b4:	mov	r0, r4
    10b6:	bl	1dc <FsBaseFile::write(void const*, unsigned int)>
  }
    10ba:	pop	{r3, r4, r5, r6, r7, pc}

000010bc <MTPStorage_SD::AppendIndexRecord(Record const&)>:
  { uint32_t new_record = index_entries_++;
    10bc:	push	{r4, lr}
    10be:	ldr.w	r4, [r0, #424]	@ 0x1a8
    10c2:	mov	r2, r1
    10c4:	adds	r1, r4, #1
    10c6:	str.w	r1, [r0, #424]	@ 0x1a8
    WriteIndexRecord(new_record, r);
    10ca:	mov	r1, r4
    10cc:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    10d0:	mov	r0, r4
    10d2:	pop	{r4, pc}

000010d4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
    index_generated = true;
    10d4:	movs	r3, #1
    sd_remove(0,indexFile);
    10d6:	ldr	r2, [pc, #88]	@ (1130 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    10d8:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    10da:	push	{r4, r5, r6, r7, lr}
    10dc:	mov	r4, r0
    10de:	sub	sp, #284	@ 0x11c
    sd_remove(0,indexFile);
    10e0:	adds	r0, #4
    index_generated = true;
    10e2:	strb.w	r3, [r0, #424]	@ 0x1a8
    sd_remove(0,indexFile);
    10e6:	bl	f4c <mSD_Base::sd_remove(unsigned long, char const*)>
    index_entries_ = 0;
    10ea:	movs	r5, #0
    num_storage = sd_getFSCount();
    10ec:	ldr	r3, [r4, #4]
      r.parent = 0xFFFFFFFFUL; // 
    10ee:	mov.w	r6, #4294967295
      strcpy(r.name, "/");
    10f2:	ldr	r7, [pc, #64]	@ (1134 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x60>)
    num_storage = sd_getFSCount();
    10f4:	str.w	r3, [r4, #408]	@ 0x198
    index_entries_ = 0;
    10f8:	str.w	r5, [r4, #424]	@ 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    10fc:	ldr.w	r3, [r4, #408]	@ 0x198
    1100:	cmp	r5, r3
    1102:	blt.n	1108 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x34>
  }
    1104:	add	sp, #284	@ 0x11c
    1106:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    1108:	movs	r3, #0
      strcpy(r.name, "/");
    110a:	mov	r1, r7
    110c:	add	r0, sp, #24
      r.store = ii; // 
    110e:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    1112:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    1114:	adds	r5, #1
      r.sibling = 0;
    1116:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    111a:	movs	r3, #1
    111c:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    1120:	bl	edce <strcpy>
      AppendIndexRecord(r);
    1124:	mov	r1, sp
    1126:	mov	r0, r4
    1128:	bl	10bc <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    112c:	b.n	10fc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x28>
    112e:	nop
    1130:	.word	0x2000106e
    1134:	.word	0x200012e5

00001138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    1138:	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    113a:	mov.w	r7, #280	@ 0x118
  {
    113e:	mov	r4, r1
    1140:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    1142:	movs	r1, #0
    1144:	mov	r2, r7
  {
    1146:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    1148:	bl	a2ac <memset>
    if (i > index_entries_) 
    114c:	ldr.w	r3, [r4, #424]	@ 0x1a8
    1150:	cmp	r3, r6
    1152:	bcc.n	1172 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3a>
    OpenIndex();
    1154:	mov	r0, r4
    index_.seekSet(sizeof(ret) * i);
    1156:	adds	r4, #184	@ 0xb8
    OpenIndex();
    1158:	bl	ffc <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    115c:	mul.w	r2, r7, r6
    1160:	mov	r0, r4
    1162:	movs	r3, #0
    1164:	bl	c82 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    index_.read((char *)&ret, sizeof(ret));
    1168:	mov	r2, r7
    116a:	mov	r1, r5
    116c:	mov	r0, r4
    116e:	bl	eb2 <FsBaseFile::read(void*, unsigned int)>
  }
    1172:	mov	r0, r5
    1174:	pop	{r3, r4, r5, r6, r7, pc}

00001176 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    1176:	push	{r4, r5, lr}
    1178:	mov	r4, r0
    117a:	sub	sp, #284	@ 0x11c
    { if (next_ == 0) return 0;
    117c:	ldr.w	r5, [r4, #432]	@ 0x1b0
    1180:	cbz	r5, 11a0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>
      Record r = ReadIndexRecord(ret);
    1182:	mov	r2, r5
    1184:	mov	r1, r4
    1186:	mov	r0, sp
    1188:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    118c:	ldrb.w	r2, [r4, #436]	@ 0x1b4
    1190:	cbz	r2, 11a6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    1192:	ldr	r3, [sp, #8]
    1194:	str.w	r3, [r4, #432]	@ 0x1b0
      if (r.name[0]) return ret;
    1198:	ldrb.w	r3, [sp, #24]
    119c:	cmp	r3, #0
    119e:	beq.n	117c <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
  }
    11a0:	mov	r0, r5
    11a2:	add	sp, #284	@ 0x11c
    11a4:	pop	{r4, r5, pc}
      { next_++;
    11a6:	ldr.w	r3, [r4, #432]	@ 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    11aa:	ldr.w	r1, [r4, #424]	@ 0x1a8
      { next_++;
    11ae:	adds	r3, #1
        if (next_ >= index_entries_) next_ = 0;
    11b0:	cmp	r3, r1
    11b2:	it	cc
    11b4:	movcc	r2, r3
    11b6:	str.w	r2, [r4, #432]	@ 0x1b0
    11ba:	b.n	1198 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x22>

000011bc <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)>:
  {
    11bc:	push	{r4, r5, lr}
    11be:	sub	sp, #308	@ 0x134
    11c0:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    11c2:	mov	r2, r1
    11c4:	mov	r1, r0
    11c6:	add	r0, sp, #24
  {
    11c8:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    11ca:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    11ce:	add	r1, sp, #48	@ 0x30
    11d0:	mov	r0, r5
    11d2:	bl	edce <strcpy>
    *parent = r.parent;
    11d6:	ldr	r3, [sp, #320]	@ 0x140
    11d8:	ldr	r2, [sp, #24]
    11da:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11dc:	ldrb.w	r3, [sp, #36]	@ 0x24
    11e0:	cmp	r3, #0
    11e2:	bne.n	1260 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xa4>
    11e4:	ldr	r3, [sp, #28]
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    11e6:	ldrh.w	r1, [sp, #42]	@ 0x2a
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11ea:	str	r3, [r4, #0]
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    11ec:	and.w	r0, r1, #31
    *store = r.store;
    11f0:	ldrh.w	r2, [sp, #38]	@ 0x26
    11f4:	ldr	r3, [sp, #324]	@ 0x144
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    11f6:	lsls	r0, r0, #1
    *store = r.store;
    11f8:	strh	r2, [r3, #0]
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    11fa:	ldrh.w	r2, [sp, #40]	@ 0x28
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    11fe:	str	r0, [sp, #16]
    1200:	ubfx	r0, r1, #5, #6
    1204:	lsrs	r1, r1, #11
  return 1980 + (fatDate >> 9);
    1206:	lsrs	r3, r2, #9
    1208:	str	r0, [sp, #12]
    120a:	str	r1, [sp, #8]
    120c:	and.w	r1, r2, #31
    1210:	ubfx	r2, r2, #5, #4
    1214:	addw	r3, r3, #1980	@ 0x7bc
    1218:	str	r1, [sp, #4]
    121a:	movs	r1, #32
    121c:	str	r2, [sp, #0]
    121e:	ldr	r0, [sp, #328]	@ 0x148
    1220:	ldr	r2, [pc, #68]	@ (1268 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    1222:	bl	e988 <sniprintf>
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    1226:	ldrh.w	r1, [sp, #46]	@ 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    122a:	ldrh.w	r2, [sp, #44]	@ 0x2c
  return 2*(fatTime & 0X1F);
    122e:	and.w	r0, r1, #31
  return 1980 + (fatDate >> 9);
    1232:	lsrs	r3, r2, #9
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    1234:	lsls	r0, r0, #1
    1236:	addw	r3, r3, #1980	@ 0x7bc
    123a:	str	r0, [sp, #16]
    123c:	ubfx	r0, r1, #5, #6
    1240:	lsrs	r1, r1, #11
    1242:	str	r0, [sp, #12]
    1244:	str	r1, [sp, #8]
    1246:	and.w	r1, r2, #31
    124a:	ubfx	r2, r2, #5, #4
    124e:	ldr	r0, [sp, #332]	@ 0x14c
    1250:	str	r1, [sp, #4]
    1252:	movs	r1, #32
    1254:	str	r2, [sp, #0]
    1256:	ldr	r2, [pc, #16]	@ (1268 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    1258:	bl	e988 <sniprintf>
  }
    125c:	add	sp, #308	@ 0x134
    125e:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1260:	mov.w	r3, #4294967295
    1264:	b.n	11e6 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    1266:	nop
    1268:	.word	0x20001094

0000126c <MTPStorage_SD::GetSize(unsigned long)>:
  {
    126c:	push	{lr}
    126e:	sub	sp, #284	@ 0x11c
    1270:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    1272:	mov	r1, r0
    1274:	mov	r0, sp
    1276:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    127a:	ldr	r0, [sp, #4]
    127c:	add	sp, #284	@ 0x11c
    127e:	ldr.w	pc, [sp], #4

00001282 <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    1282:	ldr.w	r3, [r0, #320]	@ 0x140
  {
    1286:	push	{r4, r5, r6, lr}
    1288:	mov	r4, r0
    128a:	sub	sp, #288	@ 0x120
    128c:	cbz	r3, 12f8 <MTPStorage_SD::close()+0x76>
    128e:	ldr	r5, [r3, #28]
    file_.getCreateDateTime(&cpdate,&cptime);
    1290:	add.w	r6, r4, #264	@ 0x108
    1294:	add.w	r2, sp, #2
    1298:	mov	r1, sp
    129a:	mov	r0, r6
    129c:	bl	cc8 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>
    file_.getCreateDateTime(&mpdate,&mptime);
    12a0:	add.w	r2, sp, #6
    12a4:	add	r1, sp, #4
    12a6:	mov	r0, r6
    12a8:	bl	cc8 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>
    file_.close();
    12ac:	mov	r0, r6
    12ae:	bl	8824 <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    12b2:	ldr.w	r2, [r4, #420]	@ 0x1a4
    12b6:	mov	r1, r4
    12b8:	add	r0, sp, #8
    12ba:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.cpdate=cpdate;
    12be:	ldrh.w	r3, [sp]
    WriteIndexRecord(open_file_, r);
    12c2:	add	r2, sp, #8
    12c4:	ldr.w	r1, [r4, #420]	@ 0x1a4
    r.cpdate=cpdate;
    12c8:	strh.w	r3, [sp, #24]
    WriteIndexRecord(open_file_, r);
    12cc:	mov	r0, r4
    r.cptime=cptime;
    12ce:	ldrh.w	r3, [sp, #2]
    uint32_t size = (uint32_t) file_.size();
    12d2:	str	r5, [sp, #12]
    r.cptime=cptime;
    12d4:	strh.w	r3, [sp, #26]
    r.mpdate=mpdate;
    12d8:	ldrh.w	r3, [sp, #4]
    12dc:	strh.w	r3, [sp, #28]
    r.mptime=mptime;
    12e0:	ldrh.w	r3, [sp, #6]
    12e4:	strh.w	r3, [sp, #30]
    WriteIndexRecord(open_file_, r);
    12e8:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    12ec:	mvn.w	r3, #1
    12f0:	str.w	r3, [r4, #420]	@ 0x1a4
  }
    12f4:	add	sp, #288	@ 0x120
    12f6:	pop	{r4, r5, r6, pc}
    12f8:	ldr.w	r5, [r0, #324]	@ 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    12fc:	cmp	r5, #0
    12fe:	beq.n	1290 <MTPStorage_SD::close()+0xe>
  uint64_t fileSize() const {return m_validLength;}
    1300:	ldr	r5, [r5, #16]
    1302:	b.n	1290 <MTPStorage_SD::close()+0xe>

00001304 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1304:	push	{r4, r5, r6, lr}
    1306:	sub	sp, #280	@ 0x118
    1308:	mov	r6, r0
    130a:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    130c:	mov	r2, r1
    130e:	mov	r1, r0
    1310:	mov	r0, sp
  {
    1312:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1314:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    1318:	ldr	r1, [sp, #0]
    131a:	adds	r3, r1, #1
    131c:	bne.n	132e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    131e:	ldr	r1, [pc, #64]	@ (1360 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1320:	mov	r0, r4
    1322:	bl	edce <strcpy>
      return tmp.store;
    1326:	ldrh.w	r0, [sp, #14]
  }
    132a:	add	sp, #280	@ 0x118
    132c:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    132e:	mov	r3, r5
    1330:	mov	r2, r4
    1332:	mov	r0, r6
    1334:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    1338:	mov	r0, r4
    133a:	bl	ee80 <strlen>
    133e:	add	r0, r4
    1340:	ldrb.w	r3, [r0, #-1]
    1344:	cmp	r3, #47	@ 0x2f
    1346:	beq.n	1352 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    1348:	mov	r2, r5
    134a:	ldr	r1, [pc, #20]	@ (1360 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    134c:	mov	r0, r4
    134e:	bl	ec2a <strlcat>
      strlcat(out, tmp.name,len);
    1352:	mov	r2, r5
    1354:	add	r1, sp, #24
    1356:	mov	r0, r4
    1358:	bl	ec2a <strlcat>
    135c:	b.n	1326 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    135e:	nop
    1360:	.word	0x200012e5

00001364 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    1364:	push	{r4, r5, r6, r7, lr}
    1366:	subw	sp, sp, #1052	@ 0x41c
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    136a:	mov.w	r3, #256	@ 0x100
  { char oldName[MAX_FILENAME_LEN];
    136e:	mov	r4, r0
    1370:	mov	r5, r1
    1372:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1374:	mov	r2, sp
    1376:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    137a:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    137c:	mov	r6, r0
    Serial.println(oldName);
    137e:	ldr	r0, [pc, #120]	@ (13f8 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    1380:	bl	d12 <Print::println(char const*) [clone .isra.0]>
    Record p1 = ReadIndexRecord(handle);
    1384:	mov	r2, r5
    1386:	mov	r1, r4
    1388:	add	r0, sp, #768	@ 0x300
    138a:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    138e:	mov.w	r2, #256	@ 0x100
    1392:	add	r1, sp, #792	@ 0x318
    1394:	add	r0, sp, #512	@ 0x200
    1396:	bl	ec72 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    139a:	mov.w	r2, #256	@ 0x100
    139e:	mov	r1, r7
    13a0:	add	r0, sp, #792	@ 0x318
    13a2:	bl	ec72 <strlcpy>
    WriteIndexRecord(handle, p1);
    13a6:	add	r2, sp, #768	@ 0x300
    13a8:	mov	r1, r5
    13aa:	mov	r0, r4
    13ac:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    13b0:	mov.w	r3, #256	@ 0x100
    13b4:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    13b6:	add.w	r6, r4, r6, lsl #2
    13ba:	add.w	r2, sp, r3
    13be:	mov	r0, r4
    13c0:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    13c4:	add	r1, sp, #256	@ 0x100
    13c6:	ldr	r0, [pc, #48]	@ (13f8 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    13c8:	bl	d12 <Print::println(char const*) [clone .isra.0]>
    13cc:	ldr	r0, [r6, #88]	@ 0x58
    13ce:	add	r2, sp, #256	@ 0x100
    13d0:	mov	r1, sp
    13d2:	bl	db2 <FsVolume::rename(char const*, char const*)>
    if (sd_rename(store,oldName,newName)) return true;
    13d6:	mov	r6, r0
    13d8:	cbnz	r0, 13f0 <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    13da:	mov.w	r2, #256	@ 0x100
    13de:	add	r1, sp, #512	@ 0x200
    13e0:	add	r0, sp, #792	@ 0x318
    13e2:	bl	ec72 <strlcpy>
    WriteIndexRecord(handle, p1);
    13e6:	add	r2, sp, #768	@ 0x300
    13e8:	mov	r1, r5
    13ea:	mov	r0, r4
    13ec:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    13f0:	mov	r0, r6
    13f2:	addw	sp, sp, #1052	@ 0x41c
    13f6:	pop	{r4, r5, r6, r7, pc}
    13f8:	.word	0x20001e58

000013fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    13fc:	ldr.w	r3, [r0, #420]	@ 0x1a4
    1400:	cmp	r3, r1
  {
    1402:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1406:	mov	r4, r0
    1408:	sub	sp, #336	@ 0x150
    140a:	mov	r6, r1
    140c:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    140e:	bne.n	1418 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    1410:	ldr.w	r3, [r0, #416]	@ 0x1a0
    1414:	cmp	r3, r2
    1416:	beq.n	1470 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    1418:	add.w	r8, r4, #264	@ 0x108
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    141c:	mov.w	r3, #256	@ 0x100
    1420:	add	r2, sp, #80	@ 0x50
    1422:	mov	r1, r6
    1424:	mov	r0, r4
    1426:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    142a:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    142c:	mov	r0, r8
    142e:	bl	e7e <FsBaseFile::isOpen() const>
    1432:	cbz	r0, 143a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1434:	mov	r0, r8
    1436:	bl	8824 <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    143a:	add.w	r7, r4, r7, lsl #2
    143e:	add	r2, sp, #80	@ 0x50
    1440:	mov	r3, r5
    1442:	mov	r0, sp
    1444:	ldr	r1, [r7, #88]	@ 0x58
    1446:	bl	8a54 <FsVolume::open(char const*, int)>
    144a:	ldr	r3, [sp, #4]
    144c:	add	r1, sp, #16
    144e:	mov	r0, r8
    1450:	str.w	r3, [r4, #252]	@ 0xfc
    1454:	ldr	r3, [sp, #8]
    1456:	str.w	r3, [r4, #256]	@ 0x100
    145a:	ldrb.w	r3, [sp, #12]
    145e:	strb.w	r3, [r4, #260]	@ 0x104
    1462:	bl	8850 <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    1466:	mov	r0, sp
    1468:	bl	ef4 <FsFile::~FsFile()>
    mode_ = mode;
    146c:	strd	r5, r6, [r4, #416]	@ 0x1a0
  }
    1470:	add	sp, #336	@ 0x150
    1472:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001476 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    1476:	push	{r4, r5, r6, lr}
    1478:	mov	r4, r0
    147a:	mov	r6, r2
    147c:	mov	r5, r3
    OpenFileByIndex(handle);
    147e:	movs	r2, #0
    file_.seekSet(pos);
    1480:	add.w	r4, r4, #264	@ 0x108
    OpenFileByIndex(handle);
    1484:	bl	13fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    file_.seekSet(pos);
    1488:	mov	r2, r6
    148a:	movs	r3, #0
    148c:	mov	r0, r4
    148e:	bl	c82 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    file_.read(out,bytes);
    1492:	ldr	r2, [sp, #16]
    1494:	mov	r1, r5
    1496:	mov	r0, r4
    1498:	bl	eb2 <FsBaseFile::read(void*, unsigned int)>
  }
    149c:	pop	{r4, r5, r6, pc}

0000149e <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    149e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    14a2:	cmp.w	r2, #4294967295
    14a6:	ite	ne
    14a8:	movne	r8, r2
    14aa:	moveq	r8, r1
  {
    14ac:	sub.w	sp, sp, #816	@ 0x330
    14b0:	mov	r4, r0
    14b2:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    14b4:	mov	r2, r8
    14b6:	mov	r1, r0
    14b8:	add	r0, sp, #256	@ 0x100
  {
    14ba:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    14bc:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    14c0:	mov.w	r2, #256	@ 0x100
    14c4:	ldr	r1, [sp, #840]	@ 0x348
    14c6:	add	r0, sp, #560	@ 0x230
    14c8:	bl	ec72 <strlcpy>
    r.store = p.store;
    14cc:	ldrh.w	r3, [sp, #270]	@ 0x10e
    r.sibling = p.child;
    14d0:	ldr	r2, [sp, #260]	@ 0x104
    ret = p.child = AppendIndexRecord(r);
    14d2:	add	r1, sp, #536	@ 0x218
    r.store = p.store;
    14d4:	strh.w	r3, [sp, #550]	@ 0x226
    r.child = 0;
    14d8:	movs	r3, #0
    ret = p.child = AppendIndexRecord(r);
    14da:	mov	r0, r4
    r.sibling = p.child;
    14dc:	str	r2, [sp, #544]	@ 0x220
    r.child = 0;
    14de:	str	r3, [sp, #540]	@ 0x21c
    r.parent = parent;
    14e0:	str.w	r8, [sp, #536]	@ 0x218
    r.isdir = folder;
    14e4:	strb.w	r7, [sp, #548]	@ 0x224
    r.mpdate = 0;
    14e8:	strd	r3, r3, [sp, #552]	@ 0x228
    r.scanned = 1;
    14ec:	movs	r3, #1
    14ee:	strb.w	r3, [sp, #549]	@ 0x225
    ret = p.child = AppendIndexRecord(r);
    14f2:	bl	10bc <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    14f6:	add	r2, sp, #256	@ 0x100
    ret = p.child = AppendIndexRecord(r);
    14f8:	mov	r5, r0
    14fa:	str	r0, [sp, #260]	@ 0x104
    WriteIndexRecord(parent, p);
    14fc:	mov	r1, r8
    14fe:	mov	r0, r4
    1500:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    1504:	cbz	r7, 1528 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8a>
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    1506:	mov	r2, sp
    1508:	mov	r1, r5
    150a:	mov.w	r3, #256	@ 0x100
    150e:	mov	r0, r4
    1510:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_mkdir(store,filename);
    1514:	mov	r2, sp
    1516:	mov	r1, r6
    1518:	adds	r0, r4, #4
    151a:	bl	f0c <mSD_Base::sd_mkdir(unsigned long, char*)>
  }
    151e:	mov	r0, r5
    1520:	add.w	sp, sp, #816	@ 0x330
    1524:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, (O_RDWR | O_CREAT));
    1528:	movw	r2, #514	@ 0x202
    152c:	mov	r1, r5
    152e:	mov	r0, r4
    1530:	bl	13fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    1534:	b.n	151e <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x80>

00001536 <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    1536:	ldrb.w	r3, [r0, #428]	@ 0x1ac
    153a:	cbnz	r3, 1540 <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    153c:	b.w	10d4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    1540:	bx	lr

00001542 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    1542:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1546:	cmp.w	r2, #4294967295
    154a:	ite	ne
    154c:	movne	r7, r2
    154e:	moveq	r7, r1
    1550:	sub.w	sp, sp, #564	@ 0x234
    Record record = ReadIndexRecord(i);
    1554:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    1556:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    1558:	mov	r2, r7
    155a:	mov	r0, sp
    155c:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1560:	ldrb.w	r3, [sp, #12]
    1564:	cmp	r3, #0
    1566:	beq.n	1660 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
    1568:	ldrb.w	r5, [sp, #13]
    156c:	cmp	r5, #0
    156e:	bne.n	1660 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
      if (!file_.isOpen()) return;
    1570:	add.w	r8, r4, #264	@ 0x108
      OpenFileByIndex(i);
    1574:	mov	r0, r4
    1576:	mov	r2, r5
    1578:	mov	r1, r7
    157a:	bl	13fc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    157e:	mov	r0, r8
    1580:	bl	e7e <FsBaseFile::isOpen() const>
    1584:	cmp	r0, #0
    1586:	beq.n	1660 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    1588:	mov	r9, r5
    FsFile tmpFile;
    158a:	add	r0, sp, #280	@ 0x118
    158c:	add.w	r6, r4, #344	@ 0x158
    1590:	bl	ed8 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1594:	movs	r2, #0
    1596:	mov	r1, r8
    1598:	add	r0, sp, #296	@ 0x128
    159a:	bl	8924 <FsBaseFile::openNext(FsBaseFile*, int)>
    159e:	ldr	r3, [sp, #284]	@ 0x11c
    15a0:	add	r1, sp, #296	@ 0x128
    15a2:	mov	r0, r6
    15a4:	str.w	r3, [r4, #332]	@ 0x14c
    15a8:	ldr	r3, [sp, #288]	@ 0x120
    15aa:	str.w	r3, [r4, #336]	@ 0x150
    15ae:	ldrb.w	r3, [sp, #292]	@ 0x124
    15b2:	strb.w	r3, [r4, #340]	@ 0x154
    15b6:	bl	8850 <FsBaseFile::operator=(FsBaseFile const&)>
        child_=file_.openNextFile();
    15ba:	add	r0, sp, #280	@ 0x118
    15bc:	bl	ef4 <FsFile::~FsFile()>
        if(!child_.isOpen()) break;
    15c0:	mov	r0, r6
    15c2:	bl	e7e <FsBaseFile::isOpen() const>
    15c6:	cmp	r0, #0
    15c8:	beq.n	164e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
        r.store = record.store;
    15ca:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    15ce:	mov	r0, r6
        r.parent = i;
    15d0:	str	r7, [sp, #280]	@ 0x118
        r.store = record.store;
    15d2:	strh.w	r3, [sp, #294]	@ 0x126
        r.sibling = sibling;
    15d6:	str	r5, [sp, #288]	@ 0x120
    15d8:	bl	e5c <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    15dc:	strb.w	r0, [sp, #292]	@ 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    15e0:	cbnz	r0, 1636 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf4>
    return m_fFile ? m_fFile->fileSize() :
    15e2:	ldr.w	r3, [r4, #400]	@ 0x190
    15e6:	cbz	r3, 162a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xe8>
    15e8:	ldr	r3, [r3, #28]
        child_.getName(r.name,MAX_FILENAME_LEN);
    15ea:	mov.w	r2, #256	@ 0x100
    15ee:	add	r1, sp, #304	@ 0x130
    15f0:	mov	r0, r6
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    15f2:	str	r3, [sp, #284]	@ 0x11c
        r.scanned = false;
    15f4:	strb.w	r9, [sp, #293]	@ 0x125
        child_.getName(r.name,MAX_FILENAME_LEN);
    15f8:	bl	ca2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        child_.getCreateDateTime(&r.cpdate, &r.cptime);
    15fc:	mov	r0, r6
    15fe:	add.w	r2, sp, #298	@ 0x12a
    1602:	add	r1, sp, #296	@ 0x128
    1604:	bl	cc8 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    1608:	ldr.w	r0, [r4, #400]	@ 0x190
    160c:	cbz	r0, 163a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf8>
    160e:	add.w	r2, sp, #302	@ 0x12e
    1612:	add	r1, sp, #300	@ 0x12c
    1614:	bl	7766 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
        sibling = AppendIndexRecord(r);
    1618:	add	r1, sp, #280	@ 0x118
    161a:	mov	r0, r4
    161c:	bl	10bc <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1620:	mov	r5, r0
        child_.close();
    1622:	mov	r0, r6
    1624:	bl	8824 <FsBaseFile::close()>
      }
    1628:	b.n	158a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    162a:	ldr.w	r3, [r4, #404]	@ 0x194
           m_xFile ? m_xFile->fileSize() : 0;
    162e:	cmp	r3, #0
    1630:	beq.n	15ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    1632:	ldr	r3, [r3, #16]
    1634:	b.n	15ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1636:	movs	r3, #0
    1638:	b.n	15ea <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    163a:	ldr.w	r0, [r4, #404]	@ 0x194
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    163e:	cmp	r0, #0
    1640:	beq.n	1618 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    1642:	add.w	r2, sp, #302	@ 0x12e
    1646:	add	r1, sp, #300	@ 0x12c
    1648:	bl	5ac0 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    164c:	b.n	1618 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
      record.scanned = true;
    164e:	movs	r3, #1
      WriteIndexRecord(i, record);
    1650:	mov	r2, sp
    1652:	mov	r1, r7
    1654:	mov	r0, r4
      record.scanned = true;
    1656:	strb.w	r3, [sp, #13]
      record.child = sibling;
    165a:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    165c:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1660:	add.w	sp, sp, #564	@ 0x234
    1664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001668 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1668:	push	{r4, r5, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    166a:	cmp.w	r2, #4294967295
    166e:	ite	ne
    1670:	movne	r5, r2
    1672:	moveq	r5, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1674:	sub	sp, #284	@ 0x11c
    1676:	mov	r4, r0
      ScanDir(store, parent);
    1678:	mov	r2, r5
    167a:	bl	1542 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    167e:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    1680:	mov	r2, r5
    1682:	mov	r1, r4
      follow_sibling_ = true;
    1684:	strb.w	r3, [r4, #436]	@ 0x1b4
      next_ = ReadIndexRecord(parent).child;
    1688:	mov	r0, sp
    168a:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    168e:	ldr	r3, [sp, #4]
    1690:	str.w	r3, [r4, #432]	@ 0x1b0
  }
    1694:	add	sp, #284	@ 0x11c
    1696:	pop	{r4, r5, pc}

00001698 <MTPStorage_SD::ScanAll(unsigned long)>:
  { if (all_scanned_) return;
    1698:	push	{r4, r5, r6, lr}
    169a:	ldrb.w	r4, [r0, #429]	@ 0x1ad
    169e:	mov	r5, r0
    16a0:	mov	r6, r1
    16a2:	cbnz	r4, 16b6 <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    16a4:	movs	r3, #1
    16a6:	strb.w	r3, [r0, #429]	@ 0x1ad
    GenerateIndex(store);
    16aa:	bl	1536 <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16ae:	ldr.w	r3, [r5, #424]	@ 0x1a8
    16b2:	cmp	r4, r3
    16b4:	bcc.n	16b8 <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    16b6:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16b8:	mov	r2, r4
    16ba:	mov	r1, r6
    16bc:	mov	r0, r5
    16be:	adds	r4, #1
    16c0:	bl	1542 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    16c4:	b.n	16ae <MTPStorage_SD::ScanAll(unsigned long)+0x16>

000016c6 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { 
    16c6:	push	{r4, r5, r6, lr}
    16c8:	mov	r5, r2
    16ca:	mov	r4, r0
    16cc:	mov	r6, r1
    GenerateIndex(store);
    16ce:	bl	1536 <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    16d2:	cbz	r5, 16e2 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1c>
    16d4:	mov	r2, r5
    16d6:	mov	r1, r6
    16d8:	mov	r0, r4
  }
    16da:	ldmia.w	sp!, {r4, r5, r6, lr}
    16de:	b.w	1668 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
      ScanAll(store);
    16e2:	mov	r1, r6
    16e4:	mov	r0, r4
    16e6:	bl	1698 <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    16ea:	movs	r3, #1
      follow_sibling_ = false;
    16ec:	strb.w	r5, [r4, #436]	@ 0x1b4
      next_ = 1;
    16f0:	str.w	r3, [r4, #432]	@ 0x1b0
  }
    16f4:	pop	{r4, r5, r6, pc}
	...

000016f8 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    16f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    16fc:	mov	r4, r1
    16fe:	sub.w	sp, sp, #764	@ 0x2fc
    1702:	add.w	r1, r0, r1, lsl #2
    1706:	mov	r6, r0
  FsFile f1=sd_open(store,file,O_READ);
    1708:	adds	r7, r0, #4
    170a:	movs	r3, #0
    170c:	add	r0, sp, #8
    170e:	ldr	r1, [r1, #88]	@ 0x58
{ 
    1710:	mov	r5, r2
    1712:	bl	8a54 <FsVolume::open(char const*, int)>
    1716:	add	r0, sp, #24
    1718:	bl	e5c <FsBaseFile::isDir() const>
  if(f1.isDirectory())
    171c:	cmp	r0, #0
    171e:	beq.n	17c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1720:	ldr.w	r9, [pc, #172]	@ 17d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd8>
    FsFile f2;
    1724:	add	r0, sp, #88	@ 0x58
    1726:	bl	ed8 <FsFile::FsFile()>
    FsFile tmpFile;
    172a:	add	r0, sp, #168	@ 0xa8
    172c:	bl	ed8 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1730:	movs	r2, #0
    1732:	add	r1, sp, #24
    1734:	add	r0, sp, #184	@ 0xb8
    1736:	bl	8924 <FsBaseFile::openNext(FsBaseFile*, int)>
    173a:	ldr	r3, [sp, #172]	@ 0xac
class StreamFile : public stream_t, public BaseFile {
    173c:	add	r1, sp, #184	@ 0xb8
    173e:	add	r0, sp, #104	@ 0x68
    1740:	str	r3, [sp, #92]	@ 0x5c
    1742:	ldr	r3, [sp, #176]	@ 0xb0
    1744:	str	r3, [sp, #96]	@ 0x60
    1746:	ldrb.w	r3, [sp, #180]	@ 0xb4
    174a:	strb.w	r3, [sp, #100]	@ 0x64
    174e:	bl	8850 <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    1752:	add	r0, sp, #104	@ 0x68
    1754:	bl	e7e <FsBaseFile::isOpen() const>
    1758:	mov	r8, r0
    while(f2=f1.openNextFile())
    175a:	add	r0, sp, #168	@ 0xa8
    175c:	bl	ef4 <FsFile::~FsFile()>
    1760:	cmp.w	r8, #0
    1764:	bne.n	1784 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8c>
    sd_rmdir(store,file);
    1766:	mov	r2, r5
    1768:	mov	r1, r4
    176a:	mov	r0, r7
    176c:	bl	fb0 <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    1770:	add	r0, sp, #88	@ 0x58
    1772:	bl	ef4 <FsFile::~FsFile()>
}
    1776:	add	r0, sp, #8
    1778:	bl	ef4 <FsFile::~FsFile()>
    177c:	add.w	sp, sp, #764	@ 0x2fc
    1780:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    1784:	add.w	r8, sp, #504	@ 0x1f8
    1788:	mov.w	r2, #256	@ 0x100
    178c:	add	r0, sp, #104	@ 0x68
    178e:	mov	r1, r8
    1790:	bl	ca2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1794:	mov	r2, r9
    1796:	mov.w	r1, #256	@ 0x100
    179a:	mov	r3, r5
    179c:	add	r0, sp, #248	@ 0xf8
    179e:	str.w	r8, [sp]
    17a2:	bl	e988 <sniprintf>
    return BaseFile::isDir();
    17a6:	add	r0, sp, #104	@ 0x68
    17a8:	bl	e5c <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    17ac:	add	r2, sp, #248	@ 0xf8
    17ae:	mov	r1, r4
    17b0:	cbz	r0, 17ba <MTPStorage_SD::removeFile(unsigned long, char*)+0xc2>
    17b2:	mov	r0, r6
    17b4:	bl	16f8 <MTPStorage_SD::removeFile(unsigned long, char*)>
    17b8:	b.n	172a <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    17ba:	mov	r0, r7
    17bc:	bl	f4c <mSD_Base::sd_remove(unsigned long, char const*)>
    17c0:	b.n	172a <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    sd_remove(store,file);
    17c2:	mov	r2, r5
    17c4:	mov	r1, r4
    17c6:	mov	r0, r7
    17c8:	bl	f4c <mSD_Base::sd_remove(unsigned long, char const*)>
    17cc:	b.n	1776 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7e>
    17ce:	nop
    17d0:	.word	0x200010ae

000017d4 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    17d4:	push	{r4, r5, r6, r7, lr}
    17d6:	subw	sp, sp, #1380	@ 0x564
    17da:	mov	r4, r0
    17dc:	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    17de:	mov.w	r3, #256	@ 0x100
    17e2:	add	r2, sp, #280	@ 0x118
    17e4:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    17e8:	mov	r2, r5
    17ea:	mov	r1, r4
    17ec:	add	r0, sp, #536	@ 0x218
    17ee:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    17f2:	add	r2, sp, #280	@ 0x118
    17f4:	ldrh.w	r1, [sp, #550]	@ 0x226
    17f8:	mov	r0, r4
    17fa:	bl	16f8 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    17fe:	movs	r3, #0
    WriteIndexRecord(object, r);
    1800:	add	r2, sp, #536	@ 0x218
    1802:	mov	r1, r5
    1804:	mov	r0, r4
    r.name[0]=0;
    1806:	strb.w	r3, [sp, #560]	@ 0x230
    WriteIndexRecord(object, r);
    180a:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    180e:	ldr	r2, [sp, #536]	@ 0x218
    1810:	mov	r1, r4
    1812:	add	r0, sp, #816	@ 0x330
    1814:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    1818:	ldr	r6, [sp, #820]	@ 0x334
    181a:	cmp	r5, r6
    181c:	bne.n	1832 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      t.child = r.sibling;
    181e:	ldr	r3, [sp, #544]	@ 0x220
      WriteIndexRecord(r.parent, t);
    1820:	add	r2, sp, #816	@ 0x330
    1822:	ldr	r1, [sp, #536]	@ 0x218
      t.child = r.sibling;
    1824:	str	r3, [sp, #820]	@ 0x334
      WriteIndexRecord(is, x);
    1826:	mov	r0, r4
    1828:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    182c:	addw	sp, sp, #1380	@ 0x564
    1830:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    1832:	mov	r2, r6
    1834:	mov	r1, r4
    1836:	add.w	r0, sp, #1096	@ 0x448
    183a:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    183e:	ldr.w	r7, [sp, #1104]	@ 0x450
    1842:	cmp	r5, r7
    1844:	bne.n	1854 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x80>
      x.sibling = r.sibling;
    1846:	ldr	r3, [sp, #544]	@ 0x220
      WriteIndexRecord(is, x);
    1848:	add.w	r2, sp, #1096	@ 0x448
    184c:	mov	r1, r6
      x.sibling = r.sibling;
    184e:	str.w	r3, [sp, #1104]	@ 0x450
      WriteIndexRecord(is, x);
    1852:	b.n	1826 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x52>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1854:	mov	r2, r7
    1856:	mov	r1, r4
    1858:	mov	r0, sp
    185a:	mov	r6, r7
    185c:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1860:	mov.w	r2, #280	@ 0x118
    1864:	mov	r1, sp
    1866:	add.w	r0, sp, #1096	@ 0x448
    186a:	bl	a2f0 <memcpy>
    186e:	b.n	183e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x6a>

00001870 <MTPStorage_SD::DeleteObject(unsigned long)>:
  {
    1870:	push	{r3, lr}
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    1872:	adds	r3, r1, #1
    1874:	beq.n	187a <MTPStorage_SD::DeleteObject(unsigned long)+0xa>
    1876:	bl	17d4 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    187a:	movs	r0, #1
    187c:	pop	{r3, pc}

0000187e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    187e:	push	{r4, r5, r6, lr}
    1880:	add.w	r1, r0, r1, lsl #2
    1884:	sub.w	sp, sp, #2208	@ 0x8a0
    1888:	mov	r5, r0
    188a:	mov	r6, r3
    188c:	ldr	r1, [r1, #84]	@ 0x54
    188e:	movs	r3, #0
    1890:	mov	r0, sp
    1892:	bl	8a54 <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,O_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1896:	add	r0, sp, #16
    1898:	bl	e7e <FsBaseFile::isOpen() const>
    189c:	mov	r4, r0
    189e:	cbnz	r0, 18b6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    18a0:	movw	r0, #690	@ 0x2b2
    18a4:	bl	d24 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    18a8:	mov	r0, sp
    18aa:	bl	ef4 <FsFile::~FsFile()>
    18ae:	mov	r0, r4
    18b0:	add.w	sp, sp, #2208	@ 0x8a0
    18b4:	pop	{r4, r5, r6, pc}
    18b6:	add.w	r5, r5, r6, lsl #2
    18ba:	movw	r3, #514	@ 0x202
    18be:	ldr.w	r2, [sp, #2224]	@ 0x8b0
    18c2:	add	r0, sp, #80	@ 0x50
    18c4:	ldr	r1, [r5, #84]	@ 0x54
    18c6:	bl	8a54 <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    18ca:	add	r0, sp, #96	@ 0x60
    18cc:	bl	e7e <FsBaseFile::isOpen() const>
    18d0:	mov	r4, r0
    18d2:	cbnz	r0, 18ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6e>
    18d4:	add	r0, sp, #16
    18d6:	bl	8824 <FsBaseFile::close()>
    18da:	movw	r0, #693	@ 0x2b5
    18de:	movs	r4, #0
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    18e0:	bl	d24 <dbgPrint(unsigned short)>
}
    18e4:	add	r0, sp, #80	@ 0x50
    18e6:	bl	ef4 <FsFile::~FsFile()>
    18ea:	b.n	18a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    18ec:	mov.w	r5, #4294967295
    return BaseFile::available();
    18f0:	add	r0, sp, #16
    18f2:	bl	e0e <FsBaseFile::available() const>
  while(f1.available()>0)
    18f6:	cmp	r0, #0
    18f8:	ble.n	191a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9c>
    nd=f1.read(buffer,nbuf);
    18fa:	mov.w	r2, #2048	@ 0x800
    18fe:	add	r1, sp, #160	@ 0xa0
    1900:	add	r0, sp, #16
    1902:	bl	eb2 <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    1906:	subs	r5, r0, #0
    1908:	blt.n	191a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9c>
    f2.write(buffer,nd);
    190a:	mov	r2, r5
    190c:	add	r1, sp, #160	@ 0xa0
    190e:	add	r0, sp, #96	@ 0x60
    1910:	bl	1dc <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    1914:	cmp.w	r5, #2048	@ 0x800
    1918:	bge.n	18f0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x72>
  f1.close();
    191a:	add	r0, sp, #16
    191c:	bl	8824 <FsBaseFile::close()>
  f2.close();
    1920:	add	r0, sp, #96	@ 0x60
    1922:	bl	8824 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    1926:	cmp	r5, #0
    1928:	bge.n	18e4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x66>
    192a:	movw	r0, #705	@ 0x2c1
    192e:	b.n	18de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x60>

00001930 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    1930:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1934:	sub.w	sp, sp, #1360	@ 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1938:	cmp.w	r3, #4294967295
    193c:	ite	ne
    193e:	movne	r8, r3
    1940:	moveq	r8, r2
  { 
    1942:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1944:	mov	r2, r1
  { 
    1946:	mov	r7, r1
    Record p1 = ReadIndexRecord(handle);
    1948:	mov	r1, r0
    194a:	add	r0, sp, #520	@ 0x208
    194c:	add	r6, sp, #544	@ 0x220
    194e:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1952:	mov	r2, r8
    1954:	mov	r1, r4
    1956:	add	r0, sp, #800	@ 0x320
    1958:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    195c:	ldrb.w	r5, [sp, #532]	@ 0x214
    1960:	cbz	r5, 19a6 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    1962:	ldrh.w	r1, [sp, #534]	@ 0x216
    1966:	mov	r2, r7
    1968:	mov	r0, r4
    196a:	adds	r1, #1
    196c:	bl	1542 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1970:	ldrb.w	r3, [sp, #532]	@ 0x214
    1974:	ldr	r2, [r4, #0]
    1976:	mov	r0, r4
    1978:	subs	r3, #0
    197a:	str	r6, [sp, #0]
    197c:	ldrh.w	r1, [sp, #814]	@ 0x32e
    1980:	ldr	r5, [r2, #44]	@ 0x2c
    1982:	it	ne
    1984:	movne	r3, #1
    1986:	mov	r2, r8
    1988:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    198a:	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    198c:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    198e:	ldrh.w	r2, [sp, #814]	@ 0x32e
    1992:	ldr	r6, [r3, #84]	@ 0x54
    1994:	mov	r1, r7
    1996:	mov	r3, r0
    1998:	mov	r0, r4
    199a:	blx	r6
  }
    199c:	mov	r0, r5
    199e:	add.w	sp, sp, #1360	@ 0x550
    19a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    19a6:	mov.w	r2, #256	@ 0x100
    19aa:	mov	r1, r6
    19ac:	add.w	r0, sp, #1104	@ 0x450
    19b0:	bl	ec72 <strlcpy>
      r.store = p2.store;
    19b4:	ldrh.w	r3, [sp, #814]	@ 0x32e
      newHandle = p2.child = AppendIndexRecord(r);
    19b8:	add.w	r1, sp, #1080	@ 0x438
    19bc:	mov	r0, r4
      r.store = p2.store;
    19be:	strh.w	r3, [sp, #1094]	@ 0x446
      r.sibling = p2.child;
    19c2:	ldr	r3, [sp, #804]	@ 0x324
      r.child = 0;
    19c4:	str.w	r5, [sp, #1084]	@ 0x43c
      r.sibling = p2.child;
    19c8:	str.w	r3, [sp, #1088]	@ 0x440
      r.isdir = 0;
    19cc:	strh.w	r5, [sp, #1092]	@ 0x444
      r.parent = newParent;
    19d0:	str.w	r8, [sp, #1080]	@ 0x438
      newHandle = p2.child = AppendIndexRecord(r);
    19d4:	bl	10bc <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    19d8:	add	r2, sp, #800	@ 0x320
      newHandle = p2.child = AppendIndexRecord(r);
    19da:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    19dc:	mov	r1, r8
      newHandle = p2.child = AppendIndexRecord(r);
    19de:	str	r0, [sp, #804]	@ 0x324
      WriteIndexRecord(newParent, p2);
    19e0:	mov	r0, r4
    19e2:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    19e6:	add	r2, sp, #8
    19e8:	mov	r1, r7
    19ea:	mov.w	r3, #256	@ 0x100
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    19ee:	add	r7, sp, #264	@ 0x108
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    19f0:	mov	r0, r4
    19f2:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    19f6:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    19f8:	mov	r2, r7
    19fa:	mov	r1, r5
    19fc:	mov.w	r3, #256	@ 0x100
    1a00:	mov	r0, r4
    1a02:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    1a06:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a08:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1a0a:	mov	r1, r6
    1a0c:	adds	r0, r4, #4
    1a0e:	str	r7, [sp, #0]
    1a10:	bl	187e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    1a14:	b.n	199c <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

00001a16 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    1a16:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a1a:	subw	sp, sp, #1644	@ 0x66c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1a1e:	cmp.w	r3, #4294967295
    1a22:	ite	ne
    1a24:	movne	r7, r3
    1a26:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1a28:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1a2a:	mov	r2, r1
    1a2c:	mov	r1, r0
    1a2e:	add	r0, sp, #520	@ 0x208
    1a30:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    1a34:	mov	r2, r7
    1a36:	mov	r1, r4
    1a38:	add	r0, sp, #800	@ 0x320
  Record p1=ReadIndexRecord(handle);
    1a3a:	ldrh.w	r9, [sp, #534]	@ 0x216
  uint32_t iy= 0;
    1a3e:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    1a40:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    1a44:	ldr	r6, [sp, #524]	@ 0x20c
  while(ix)
    1a46:	cbnz	r6, 1a5e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1a48:	mov	r0, r4
    1a4a:	add	r2, sp, #800	@ 0x320
    1a4c:	mov	r1, r7
  p2.child=iy;
    1a4e:	str	r5, [sp, #804]	@ 0x324
  WriteIndexRecord(newHandle,p2);
    1a50:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    1a54:	movs	r0, #1
    1a56:	addw	sp, sp, #1644	@ 0x66c
    1a5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Record px = ReadIndexRecord(ix) ;
    1a5e:	mov	r2, r6
    1a60:	mov	r1, r4
    1a62:	add.w	r0, sp, #1080	@ 0x438
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    1a66:	add.w	r8, sp, #264	@ 0x108
    Record px = ReadIndexRecord(ix) ;
    1a6a:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1a6e:	mov.w	r2, #280	@ 0x118
    1a72:	add.w	r1, sp, #1080	@ 0x438
    1a76:	add.w	r0, sp, #1360	@ 0x550
    1a7a:	bl	a2f0 <memcpy>
    py.store = p2.store;
    1a7e:	ldrh.w	r3, [sp, #814]	@ 0x32e
    iy = AppendIndexRecord(py);
    1a82:	add.w	r1, sp, #1360	@ 0x550
    1a86:	mov	r0, r4
    py.store = p2.store;
    1a88:	strh.w	r3, [sp, #1374]	@ 0x55e
    py.sibling = iy;
    1a8c:	str.w	r5, [sp, #1368]	@ 0x558
    py.parent = newHandle;
    1a90:	str.w	r7, [sp, #1360]	@ 0x550
    iy = AppendIndexRecord(py);
    1a94:	bl	10bc <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1a98:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    1a9a:	mov.w	r3, #256	@ 0x100
    1a9e:	add	r2, sp, #8
    1aa0:	mov	r1, r6
    1aa2:	mov	r0, r4
    1aa4:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    1aa8:	mov.w	r3, #256	@ 0x100
    1aac:	mov	r2, r8
    1aae:	mov	r1, r5
    1ab0:	mov	r0, r4
    1ab2:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    1ab6:	ldrb.w	r2, [sp, #1372]	@ 0x55c
    1aba:	ldrh.w	r3, [sp, #1374]	@ 0x55e
    1abe:	adds	r0, r4, #4
    1ac0:	cbz	r2, 1aec <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd6>
      sd_mkdir(py.store,newfilename);
    1ac2:	mov	r1, r3
    1ac4:	mov	r2, r8
    1ac6:	bl	f0c <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    1aca:	mov	r2, r6
    1acc:	mov	r1, r9
    1ace:	mov	r0, r4
    1ad0:	bl	1542 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    1ad4:	ldr	r3, [r4, #0]
    1ad6:	ldrh.w	r2, [sp, #814]	@ 0x32e
    1ada:	mov	r1, r6
    1adc:	ldr.w	r8, [r3, #84]	@ 0x54
    1ae0:	mov	r0, r4
    1ae2:	mov	r3, r5
    1ae4:	blx	r8
    ix = px.sibling;
    1ae6:	ldr.w	r6, [sp, #1088]	@ 0x440
    1aea:	b.n	1a46 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    1aec:	add	r2, sp, #8
    1aee:	mov	r1, r9
    1af0:	str.w	r8, [sp]
    1af4:	bl	187e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1af8:	b.n	1ae6 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd0>

00001afa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    1afa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1afe:	ldr.w	r9, [sp, #32]
    1b02:	mov	r7, r1
    1b04:	mov	r8, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b06:	mov	r1, r3
    1b08:	mov	r2, r9
{ // old and new are directory paths
    1b0a:	mov	r6, r0
    1b0c:	mov	r5, r3
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b0e:	bl	f0c <mSD_Base::sd_mkdir(unsigned long, char*)>
    1b12:	mov	r4, r0
    1b14:	cbz	r0, 1b2a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x30>
    1b16:	mov	r3, r5
    1b18:	mov	r2, r8
    1b1a:	mov	r1, r7
    1b1c:	mov	r0, r6
    1b1e:	str.w	r9, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1b22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b26:	b.w	1b38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b2a:	movw	r0, #715	@ 0x2cb
    1b2e:	bl	d24 <dbgPrint(unsigned short)>
}
    1b32:	mov	r0, r4
    1b34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00001b38 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1b38:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b3c:	mov	r5, r1
    1b3e:	sub.w	sp, sp, #680	@ 0x2a8
    1b42:	add.w	r1, r0, r1, lsl #2
    1b46:	mov	r4, r0
    1b48:	mov	r7, r3
    1b4a:	add	r0, sp, #8
    1b4c:	movs	r3, #0
    1b4e:	ldr	r1, [r1, #84]	@ 0x54
    1b50:	mov	r6, r2
    1b52:	bl	8a54 <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1b56:	add	r0, sp, #24
    1b58:	bl	e7e <FsBaseFile::isOpen() const>
    1b5c:	cmp	r0, #0
    1b5e:	beq.n	1c14 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xdc>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1b60:	ldr.w	r8, [pc, #264]	@ 1c6c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1b64:	mov.w	r2, #256	@ 0x100
    1b68:	mov	r1, r6
    1b6a:	add	r0, sp, #168	@ 0xa8
    1b6c:	bl	ec72 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1b70:	add	r0, sp, #168	@ 0xa8
    1b72:	bl	ee80 <strlen>
    1b76:	add	r3, sp, #168	@ 0xa8
    1b78:	add	r0, r3
    1b7a:	ldrb.w	r3, [r0, #-1]
    1b7e:	cmp	r3, #47	@ 0x2f
    1b80:	beq.n	1b8e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1b82:	mov.w	r2, #256	@ 0x100
    1b86:	mov	r1, r8
    1b88:	add	r0, sp, #168	@ 0xa8
    1b8a:	bl	ec2a <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1b8e:	mov.w	r2, #256	@ 0x100
    1b92:	ldr	r1, [sp, #704]	@ 0x2c0
    1b94:	add	r0, sp, #424	@ 0x1a8
    1b96:	bl	ec72 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1b9a:	add	r0, sp, #424	@ 0x1a8
    1b9c:	bl	ee80 <strlen>
    1ba0:	add	r3, sp, #424	@ 0x1a8
    1ba2:	add	r0, r3
    1ba4:	ldrb.w	r3, [r0, #-1]
    1ba8:	cmp	r3, #47	@ 0x2f
    1baa:	beq.n	1bb8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1bac:	mov.w	r2, #256	@ 0x100
    1bb0:	mov	r1, r8
    1bb2:	add	r0, sp, #424	@ 0x1a8
    1bb4:	bl	ec2a <strlcat>
    FsFile tmpFile;
    1bb8:	add	r0, sp, #88	@ 0x58
    1bba:	bl	ed8 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1bbe:	movs	r2, #0
    1bc0:	add	r1, sp, #24
    1bc2:	add	r0, sp, #104	@ 0x68
    1bc4:	bl	8924 <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1bc8:	add	r0, sp, #104	@ 0x68
    1bca:	bl	e7e <FsBaseFile::isOpen() const>
    1bce:	cmp	r0, #0
    1bd0:	beq.n	1c48 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x110>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1bd2:	mov.w	r2, #256	@ 0x100
    1bd6:	add	r1, sp, #168	@ 0xa8
    1bd8:	add	r0, sp, #104	@ 0x68
    1bda:	bl	ca2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1bde:	mov.w	r2, #256	@ 0x100
    1be2:	add	r1, sp, #424	@ 0x1a8
    1be4:	add	r0, sp, #104	@ 0x68
    1be6:	bl	ca2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1bea:	add	r0, sp, #104	@ 0x68
    1bec:	bl	e5c <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1bf0:	add	r3, sp, #424	@ 0x1a8
    1bf2:	add	r2, sp, #168	@ 0xa8
    1bf4:	mov	r1, r5
    1bf6:	str	r3, [sp, #0]
    1bf8:	mov	r3, r7
        if(f2.isDirectory())
    1bfa:	cbz	r0, 1c20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe8>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1bfc:	mov	r0, r4
    1bfe:	bl	1afa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1c02:	cbnz	r0, 1c40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x108>
    1c04:	movw	r0, #738	@ 0x2e2
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c08:	bl	d24 <dbgPrint(unsigned short)>
    }
    1c0c:	add	r0, sp, #88	@ 0x58
    1c0e:	bl	ef4 <FsFile::~FsFile()>
    1c12:	b.n	1c1c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe4>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1c14:	movw	r0, #718	@ 0x2ce
    1c18:	bl	d24 <dbgPrint(unsigned short)>
    1c1c:	movs	r4, #0
    1c1e:	b.n	1c5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x122>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c20:	mov	r0, r4
    1c22:	bl	187e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1c26:	cbnz	r0, 1c2e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
    1c28:	movw	r0, #742	@ 0x2e6
    1c2c:	b.n	1c08 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c2e:	add	r2, sp, #168	@ 0xa8
    1c30:	mov	r1, r5
    1c32:	mov	r0, r4
    1c34:	bl	f4c <mSD_Base::sd_remove(unsigned long, char const*)>
    1c38:	cbnz	r0, 1c40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x108>
    1c3a:	movw	r0, #743	@ 0x2e7
    1c3e:	b.n	1c08 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1c40:	add	r0, sp, #88	@ 0x58
    1c42:	bl	ef4 <FsFile::~FsFile()>
  { while(1)
    1c46:	b.n	1b64 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    }
    1c48:	add	r0, sp, #88	@ 0x58
    1c4a:	bl	ef4 <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1c4e:	mov	r0, r4
    1c50:	mov	r2, r6
    1c52:	mov	r1, r5
    1c54:	bl	fb0 <mSD_Base::sd_rmdir(unsigned long, char*)>
    1c58:	mov	r4, r0
}
    1c5a:	add	r0, sp, #8
    1c5c:	bl	ef4 <FsFile::~FsFile()>
    1c60:	mov	r0, r4
    1c62:	add.w	sp, sp, #680	@ 0x2a8
    1c66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c6a:	nop
    1c6c:	.word	0x200012e5

00001c70 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1c70:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c74:	subw	sp, sp, #2760	@ 0xac8
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1c78:	cmp.w	r3, #4294967295
    1c7c:	ite	ne
    1c7e:	movne	r7, r3
    1c80:	moveq	r7, r2
  { 
    1c82:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1c84:	mov	r2, r1
  { 
    1c86:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1c88:	mov	r1, r0
    1c8a:	add	r0, sp, #800	@ 0x320
    1c8c:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1c90:	mov	r2, r7
    1c92:	mov	r1, r4
    1c94:	add.w	r0, sp, #1080	@ 0x438
    1c98:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1c9c:	ldr	r2, [sp, #800]	@ 0x320
    1c9e:	mov	r1, r4
    1ca0:	add.w	r0, sp, #1360	@ 0x550
    1ca4:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1ca8:	ldrb.w	r3, [sp, #812]	@ 0x32c
    1cac:	cbz	r3, 1cca <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1cae:	ldrb.w	r3, [sp, #813]	@ 0x32d
    1cb2:	cbnz	r3, 1cca <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1cb4:	mov	r2, r5
    1cb6:	ldrh.w	r1, [sp, #814]	@ 0x32e
    1cba:	mov	r0, r4
    1cbc:	bl	1542 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1cc0:	add	r2, sp, #800	@ 0x320
    1cc2:	mov	r1, r5
    1cc4:	mov	r0, r4
    1cc6:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1cca:	mov.w	r2, #280	@ 0x118
    1cce:	add	r1, sp, #800	@ 0x320
    1cd0:	add.w	r0, sp, #1640	@ 0x668
    1cd4:	bl	a2f0 <memcpy>
    Record p2o = p2;
    1cd8:	mov.w	r2, #280	@ 0x118
    1cdc:	add.w	r1, sp, #1080	@ 0x438
    1ce0:	add.w	r0, sp, #1920	@ 0x780
    1ce4:	bl	a2f0 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1ce8:	mov.w	r3, #256	@ 0x100
    1cec:	add	r2, sp, #288	@ 0x120
    1cee:	mov	r1, r5
    1cf0:	mov	r0, r4
    1cf2:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1cf6:	ldr.w	r6, [sp, #1364]	@ 0x554
    1cfa:	cmp	r6, r5
    1cfc:	bne.n	1d9a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x12a>
        p3.child = p1.sibling;
    1cfe:	ldr	r3, [sp, #808]	@ 0x328
    uint32_t jx=-1;
    1d00:	mov.w	r6, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1d04:	add.w	r2, sp, #1360	@ 0x550
    1d08:	ldr	r1, [sp, #800]	@ 0x320
    1d0a:	mov	r0, r4
        p3.child = p1.sibling;
    1d0c:	str.w	r3, [sp, #1364]	@ 0x554
        WriteIndexRecord(p1.parent, p3);    
    1d10:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1d14:	ldrh.w	r3, [sp, #1094]	@ 0x446
      WriteIndexRecord(handle, p1);
    1d18:	add	r2, sp, #800	@ 0x320
    1d1a:	mov	r1, r5
    1d1c:	mov	r0, r4
      p1.store = p2.store;
    1d1e:	strh.w	r3, [sp, #814]	@ 0x32e
      p1.sibling = p2.child;
    1d22:	ldr.w	r3, [sp, #1084]	@ 0x43c
      p1.parent = newParent;
    1d26:	str	r7, [sp, #800]	@ 0x320
      p1.sibling = p2.child;
    1d28:	str	r3, [sp, #808]	@ 0x328
      p2.child = handle;
    1d2a:	str.w	r5, [sp, #1084]	@ 0x43c
      WriteIndexRecord(handle, p1);
    1d2e:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1d32:	add.w	r2, sp, #1080	@ 0x438
    1d36:	mov	r1, r7
    1d38:	mov	r0, r4
    1d3a:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1d3e:	mov.w	r3, #256	@ 0x100
    1d42:	mov	r1, r5
    1d44:	add	r2, sp, #544	@ 0x220
    1d46:	mov	r0, r4
    1d48:	bl	1304 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1d4c:	ldrh.w	r1, [sp, #1654]	@ 0x676
    1d50:	ldrh.w	r3, [sp, #1934]	@ 0x78e
    1d54:	cmp	r1, r3
    1d56:	bne.n	1dfa <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x18a>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1d58:	add.w	r3, r4, r1, lsl #2
    1d5c:	add	r2, sp, #544	@ 0x220
    1d5e:	add	r1, sp, #288	@ 0x120
    1d60:	ldr	r0, [r3, #88]	@ 0x58
    1d62:	bl	db2 <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d66:	cmp	r0, #0
    1d68:	bne.n	1e1e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1ae>
    1d6a:	movw	r0, #579	@ 0x243
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d6e:	bl	d24 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1d72:	addw	r2, sp, #2200	@ 0x898
    1d76:	mov	r1, r6
    1d78:	mov	r0, r4
    1d7a:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1d7e:	add.w	r2, sp, #1640	@ 0x668
    1d82:	mov	r1, r5
    1d84:	mov	r0, r4
    1d86:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1d8a:	mov	r0, r4
    1d8c:	add.w	r2, sp, #1920	@ 0x780
    1d90:	mov	r1, r7
    1d92:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1d96:	movs	r0, #0
    1d98:	b.n	1e20 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1b0>
        px = ReadIndexRecord(jx); 
    1d9a:	mov	r2, r6
    1d9c:	mov	r1, r4
    1d9e:	add	r0, sp, #8
    1da0:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1da4:	mov.w	r2, #280	@ 0x118
    1da8:	add	r1, sp, #8
    1daa:	add.w	r0, sp, #2480	@ 0x9b0
    1dae:	bl	a2f0 <memcpy>
        pxo = px;
    1db2:	mov.w	r2, #280	@ 0x118
    1db6:	add.w	r1, sp, #2480	@ 0x9b0
    1dba:	addw	r0, sp, #2200	@ 0x898
    1dbe:	bl	a2f0 <memcpy>
        while(handle != px.sibling)
    1dc2:	ldr.w	r8, [sp, #2488]	@ 0x9b8
    1dc6:	cmp	r8, r5
    1dc8:	bne.n	1dde <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x16e>
        px.sibling = p1.sibling;
    1dca:	ldr	r3, [sp, #808]	@ 0x328
        WriteIndexRecord(jx, px);
    1dcc:	add.w	r2, sp, #2480	@ 0x9b0
    1dd0:	mov	r1, r6
    1dd2:	mov	r0, r4
        px.sibling = p1.sibling;
    1dd4:	str.w	r3, [sp, #2488]	@ 0x9b8
        WriteIndexRecord(jx, px);
    1dd8:	bl	1092 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1ddc:	b.n	1d14 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1dde:	mov	r2, r8
    1de0:	mov	r1, r4
    1de2:	add	r0, sp, #8
          jx = px.sibling;
    1de4:	mov	r6, r8
          px = ReadIndexRecord(jx); 
    1de6:	bl	1138 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1dea:	mov.w	r2, #280	@ 0x118
    1dee:	add	r1, sp, #8
    1df0:	add.w	r0, sp, #2480	@ 0x9b0
    1df4:	bl	a2f0 <memcpy>
          pxo = px;
    1df8:	b.n	1db2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x142>
    else if(!p1o.isdir)
    1dfa:	ldrb.w	r2, [sp, #1652]	@ 0x674
    1dfe:	add.w	r8, r4, #4
    1e02:	cbnz	r2, 1e2e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1be>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e04:	add	r2, sp, #544	@ 0x220
    1e06:	mov	r0, r8
    1e08:	str	r2, [sp, #0]
    1e0a:	add	r2, sp, #288	@ 0x120
    1e0c:	bl	187e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1e10:	cbz	r0, 1e28 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1b8>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1e12:	add	r2, sp, #288	@ 0x120
    1e14:	ldrh.w	r1, [sp, #1934]	@ 0x78e
    1e18:	mov	r0, r8
    1e1a:	bl	f4c <mSD_Base::sd_remove(unsigned long, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e1e:	movs	r0, #1
  }
    1e20:	addw	sp, sp, #2760	@ 0xac8
    1e24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1e28:	movw	r0, #583	@ 0x247
    1e2c:	b.n	1d6e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfe>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e2e:	add	r2, sp, #544	@ 0x220
    1e30:	mov	r0, r8
    1e32:	str	r2, [sp, #0]
    1e34:	add	r2, sp, #288	@ 0x120
    1e36:	bl	1afa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1e3a:	cmp	r0, #0
    1e3c:	bne.n	1e1e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1ae>
    1e3e:	movw	r0, #587	@ 0x24b
    1e42:	b.n	1d6e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfe>

00001e44 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1e44:	push	{r4, r5, r6, lr}
    1e46:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1e4a:	ldr	r4, [pc, #60]	@ (1e88 <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1e4c:	ldr	r0, [r5, #88]	@ 0x58
    1e4e:	bl	d7e <FsVolume::clusterCount() const>
    1e52:	mov	r1, r0
    1e54:	mov	r0, r4
    1e56:	bl	cdc <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1e5a:	ldr	r0, [r5, #88]	@ 0x58
    1e5c:	bl	4d4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1e60:	mov	r1, r0
    1e62:	mov	r0, r4
    1e64:	bl	cdc <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1e68:	ldr	r6, [r5, #88]	@ 0x58
    1e6a:	mov	r0, r6
    1e6c:	bl	d7e <FsVolume::clusterCount() const>
    1e70:	mov	r4, r0
    1e72:	mov	r0, r6
    1e74:	bl	4d4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1e78:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1e7a:	ldr	r0, [r5, #88]	@ 0x58
    1e7c:	bl	d60 <FsVolume::bytesPerCluster() const>
    1e80:	umull	r0, r1, r4, r0
    1e84:	pop	{r4, r5, r6, pc}
    1e86:	nop
    1e88:	.word	0x20001e58

00001e8c <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1e8c:	push	{r4, lr}
    1e8e:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1e90:	bl	c7da <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1e94:	mov	r0, r4
    1e96:	ldmia.w	sp!, {r4, lr}
    1e9a:	b.w	c7ec <Print::println()>

00001e9e <Print::print(char) [clone .isra.0]>:
	size_t print(char c)				{ return write((uint8_t)c); }
    1e9e:	ldr	r3, [r0, #0]
    1ea0:	ldr	r3, [r3, #0]
    1ea2:	bx	r3

00001ea4 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1ea4:	push	{r4, r5, r6, lr}
    1ea6:	mov	r5, r0
    1ea8:	mov	r4, r1
    1eaa:	cbz	r1, 1ec2 <Print::write(char const*) [clone .isra.0]+0x1e>
							  return write((const uint8_t *)str, strlen(str)); }
    1eac:	mov	r0, r1
    1eae:	bl	ee80 <strlen>
    1eb2:	ldr	r3, [r5, #0]
    1eb4:	mov	r2, r0
    1eb6:	mov	r1, r4
    1eb8:	mov	r0, r5
    1eba:	ldr	r3, [r3, #4]
    1ebc:	ldmia.w	sp!, {r4, r5, r6, lr}
    1ec0:	bx	r3
    1ec2:	pop	{r4, r5, r6, pc}

00001ec4 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1ec4:	b.w	1ea4 <Print::write(char const*) [clone .isra.0]>

00001ec8 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1ec8:	push	{r4, lr}
    1eca:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1ecc:	bl	1ea4 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ed0:	mov	r0, r4
    1ed2:	ldmia.w	sp!, {r4, lr}
    1ed6:	b.w	c7ec <Print::println()>
	...

00001edc <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1edc:	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    1ede:	bl	a7e0 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1ee2:	cmp	r0, #0
    1ee4:	beq.n	1ede <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1ee6:	ldr	r4, [pc, #36]	@ (1f0c <menuGetLine()+0x30>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    1ee8:	movw	r3, #5000	@ 0x1388
    1eec:	ldr	r5, [pc, #32]	@ (1f10 <menuGetLine()+0x34>)
    1eee:	movs	r1, #13
    1ef0:	mov	r2, r4
    1ef2:	str	r3, [r5, #8]
    1ef4:	mov	r0, r5
    1ef6:	movs	r3, #40	@ 0x28
    1ef8:	bl	c714 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1efc:	movs	r3, #0
  Serial.println(buffer);
    1efe:	mov	r1, r4
  buffer[count]=0;
    1f00:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1f02:	mov	r0, r5
    1f04:	bl	1ec8 <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1f08:	mov	r0, r4
    1f0a:	pop	{r3, r4, r5, pc}
    1f0c:	.word	0x20012a78
    1f10:	.word	0x20001e58

00001f14 <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1f14:	push	{r0, r1, r4, lr}
    1f16:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f18:	bl	1edc <menuGetLine()>
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1f1c:	add	r2, sp, #4
    1f1e:	ldr	r1, [pc, #12]	@ (1f2c <menuGetInt32(long*) [clone .isra.0]+0x18>)
    1f20:	bl	ea38 <siscanf>
    1f24:	ldr	r3, [sp, #4]
    1f26:	str	r3, [r4, #0]
  return 1;
}
    1f28:	add	sp, #8
    1f2a:	pop	{r4, pc}
    1f2c:	.word	0x20000f1b

00001f30 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1f30:	push	{r0, r1, r4, lr}
    1f32:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f34:	bl	1edc <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1f38:	add	r2, sp, #4
    1f3a:	ldr	r1, [pc, #12]	@ (1f48 <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1f3c:	bl	ea38 <siscanf>
    1f40:	ldr	r3, [sp, #4]
    1f42:	strh	r3, [r4, #0]
}
    1f44:	add	sp, #8
    1f46:	pop	{r4, pc}
    1f48:	.word	0x20000f1b

00001f4c <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    1f4c:	push	{r4, lr}
    1f4e:	sub	sp, #32
    1f50:	bl	a7e0 <usb_serial_available>

    while(!Serial.available()) ;
    1f54:	cmp	r0, #0
    1f56:	beq.n	1f50 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1f58:	bl	a854 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1f5c:	uxtb	r0, r0
    if(ch=='d') // set date
    1f5e:	cmp	r0, #54	@ 0x36
    1f60:	bhi.n	1f7c <menu3()+0x30>
    1f62:	cmp	r0, #47	@ 0x2f
    1f64:	bhi.n	1f6a <menu3()+0x1e>
    }
    else if(ch=='0')
    { 
      menuGetInt16((int16_t *)&d_0);
    }
}
    1f66:	add	sp, #32
    1f68:	pop	{r4, pc}
    1f6a:	subs	r0, #49	@ 0x31
    1f6c:	cmp	r0, #5
    1f6e:	bhi.w	20bc <menu3()+0x170>
    1f72:	tbb	[pc, r0]
    1f76:	.short	0x9997
    1f78:	.word	0xa19f9d9b
    1f7c:	subs	r0, #97	@ 0x61
    1f7e:	uxtb	r3, r0
    1f80:	cmp	r3, #22
    1f82:	bhi.n	1f66 <menu3()+0x1a>
    1f84:	cmp	r0, #22
    1f86:	bhi.n	1f66 <menu3()+0x1a>
    1f88:	add	r3, pc, #4	@ (adr r3, 1f90 <menu3()+0x44>)
    1f8a:	ldr.w	pc, [r3, r0, lsl #2]
    1f8e:	nop
    1f90:	.word	0x00002041
    1f94:	.word	0x00001f67
    1f98:	.word	0x0000207f
    1f9c:	.word	0x00001fed
    1fa0:	.word	0x00001f67
    1fa4:	.word	0x00002055
    1fa8:	.word	0x0000208b
    1fac:	.word	0x00001f67
    1fb0:	.word	0x00001f67
    1fb4:	.word	0x00001f67
    1fb8:	.word	0x00001f67
    1fbc:	.word	0x00001f67
    1fc0:	.word	0x00001f67
    1fc4:	.word	0x00001f67
    1fc8:	.word	0x0000204d
    1fcc:	.word	0x00001f67
    1fd0:	.word	0x00001f67
    1fd4:	.word	0x00002051
    1fd8:	.word	0x00002069
    1fdc:	.word	0x00002017
    1fe0:	.word	0x00001f67
    1fe4:	.word	0x00001f67
    1fe8:	.word	0x000020a1
{ char *buffer=menuGetLine();
    1fec:	bl	1edc <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1ff0:	add	r3, sp, #28
    1ff2:	add	r2, sp, #20
    1ff4:	ldr	r1, [pc, #200]	@ (20c0 <menu3()+0x174>)
    1ff6:	str	r3, [sp, #8]
    1ff8:	add.w	r3, sp, #19
    1ffc:	str	r3, [sp, #4]
    1ffe:	add	r3, sp, #24
    2000:	str	r3, [sp, #0]
    2002:	add.w	r3, sp, #18
    2006:	bl	ea38 <siscanf>
      rtcSetDate(year,month,day);
    200a:	ldr	r0, [sp, #20]
    200c:	ldrd	r1, r2, [sp, #24]
    2010:	bl	3c9e <rtcSetDate(int, int, int)>
    2014:	b.n	1f66 <menu3()+0x1a>
{ char *buffer=menuGetLine();
    2016:	bl	1edc <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    201a:	add	r3, sp, #28
    201c:	add	r2, sp, #20
    201e:	ldr	r1, [pc, #160]	@ (20c0 <menu3()+0x174>)
    2020:	str	r3, [sp, #8]
    2022:	add.w	r3, sp, #19
    2026:	str	r3, [sp, #4]
    2028:	add	r3, sp, #24
    202a:	str	r3, [sp, #0]
    202c:	add.w	r3, sp, #18
    2030:	bl	ea38 <siscanf>
      rtcSetTime(hour,minutes,seconds);
    2034:	ldr	r0, [sp, #20]
    2036:	ldrd	r1, r2, [sp, #24]
    203a:	bl	3cc2 <rtcSetTime(int, int, int)>
    203e:	b.n	1f66 <menu3()+0x1a>
      menuGetInt32((int32_t *)&t_acq);
    2040:	ldr	r0, [pc, #128]	@ (20c4 <menu3()+0x178>)
}
    2042:	add	sp, #32
    2044:	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_on);
    2048:	b.w	1f14 <menuGetInt32(long*) [clone .isra.0]>
    204c:	ldr	r0, [pc, #120]	@ (20c8 <menu3()+0x17c>)
    204e:	b.n	2042 <menu3()+0xf6>
      menuGetInt32((int32_t *)&t_rep);
    2050:	ldr	r0, [pc, #120]	@ (20cc <menu3()+0x180>)
    2052:	b.n	2042 <menu3()+0xf6>
      menuGetInt32((int32_t *)&fsamp);
    2054:	ldr	r4, [pc, #120]	@ (20d0 <menu3()+0x184>)
    2056:	mov	r0, r4
    2058:	bl	1f14 <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    205c:	ldr	r0, [r4, #0]
}
    205e:	add	sp, #32
    2060:	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    2064:	b.w	c08 <acqModifyFrequency(unsigned long)>
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    2068:	ldr	r4, [pc, #104]	@ (20d4 <menu3()+0x188>)
    206a:	mov	r0, r4
    206c:	bl	1f30 <menuGetInt16(short*) [clone .isra.0]>
    2070:	ldrh	r3, [r4, #0]
    2072:	lsls	r3, r3, #16
    2074:	bpl.w	1f66 <menu3()+0x1a>
    2078:	movs	r3, #0
    207a:	strh	r3, [r4, #0]
    207c:	b.n	1f66 <menu3()+0x1a>
      menuGetInt16((int16_t *)&proc);
    207e:	ldr	r0, [pc, #88]	@ (20d8 <menu3()+0x18c>)
}
    2080:	add	sp, #32
    2082:	ldmia.w	sp!, {r4, lr}
      menuGetInt16((int16_t *)&d_0);
    2086:	b.w	1f30 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt16((int16_t *)&again);
    208a:	ldr	r4, [pc, #80]	@ (20dc <menu3()+0x190>)
    208c:	mov	r0, r4
    208e:	bl	1f30 <menuGetInt16(short*) [clone .isra.0]>
      setAGain(again);
    2092:	ldrh	r0, [r4, #0]
    2094:	sxtb	r0, r0
}
    2096:	add	sp, #32
    2098:	ldmia.w	sp!, {r4, lr}
      setAGain(again);
    209c:	b.w	3928 <setAGain(signed char)>
      menuGetInt16((int16_t *)&store[0]);
    20a0:	ldr	r0, [pc, #60]	@ (20e0 <menu3()+0x194>)
    20a2:	b.n	2080 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_1);
    20a4:	ldr	r0, [pc, #60]	@ (20e4 <menu3()+0x198>)
    20a6:	b.n	2080 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_2);
    20a8:	ldr	r0, [pc, #60]	@ (20e8 <menu3()+0x19c>)
    20aa:	b.n	2080 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_3);
    20ac:	ldr	r0, [pc, #60]	@ (20ec <menu3()+0x1a0>)
    20ae:	b.n	2080 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_4);
    20b0:	ldr	r0, [pc, #60]	@ (20f0 <menu3()+0x1a4>)
    20b2:	b.n	2080 <menu3()+0x134>
      menuGetInt16((int16_t *)&d_on);
    20b4:	ldr	r0, [pc, #60]	@ (20f4 <menu3()+0x1a8>)
    20b6:	b.n	2080 <menu3()+0x134>
      menuGetInt16((int16_t *)&d_rep);
    20b8:	ldr	r0, [pc, #60]	@ (20f8 <menu3()+0x1ac>)
    20ba:	b.n	2080 <menu3()+0x134>
      menuGetInt16((int16_t *)&d_0);
    20bc:	ldr	r0, [pc, #60]	@ (20fc <menu3()+0x1b0>)
    20be:	b.n	2080 <menu3()+0x134>
    20c0:	.word	0x200010b4
    20c4:	.word	0x2000241c
    20c8:	.word	0x2000241e
    20cc:	.word	0x20012958
    20d0:	.word	0x200023fc
    20d4:	.word	0x2000241a
    20d8:	.word	0x200128b4
    20dc:	.word	0x20002410
    20e0:	.word	0x20012884
    20e4:	.word	0x200128b0
    20e8:	.word	0x20002414
    20ec:	.word	0x20002416
    20f0:	.word	0x20002418
    20f4:	.word	0x20002412
    20f8:	.word	0x200128aa
    20fc:	.word	0x200128a8

00002100 <storeConfig(unsigned short*, int)>:

/******************** Parameter ******************************/
void storeConfig(uint16_t *store, int ns)
{ 
  #if defined(__IMXRT1062__)
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    2100:	lsls	r2, r1, #1
    2102:	movs	r1, #0
    2104:	b.w	be4c <eeprom_write_block>

00002108 <loadConfig(unsigned short*, int)>:
}

void loadConfig(uint16_t *store, int ns)
{
  #if defined(__IMXRT1062__)
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    2108:	lsls	r2, r1, #1
    210a:	movs	r1, #0
    210c:	b.w	bbb0 <eeprom_read_block>

00002110 <saveParameters()>:
  #endif
}

void saveParameters(void)
{
  store[1]  = t_acq;
    2110:	ldr	r3, [pc, #104]	@ (217c <saveParameters()+0x6c>)
  store[7]  = h_2;
  store[8]  = h_3;
  store[9]  = h_4;
  store[10] = d_on;
  store[11] = d_rep;
  store[12] = fsamp/1000;
    2112:	mov.w	r2, #1000	@ 0x3e8
  store[1]  = t_acq;
    2116:	ldr	r0, [pc, #104]	@ (2180 <saveParameters()+0x70>)
  store[13] = again;
  store[14] = dgain;
  store[15] = d_0;
  
  storeConfig(store, 16);
    2118:	movs	r1, #16
  store[1]  = t_acq;
    211a:	ldrh	r3, [r3, #0]
    211c:	strh	r3, [r0, #2]
  store[2]  = t_on;
    211e:	ldr	r3, [pc, #100]	@ (2184 <saveParameters()+0x74>)
    2120:	ldrh	r3, [r3, #0]
    2122:	strh	r3, [r0, #4]
  store[3]  = t_rep;
    2124:	ldr	r3, [pc, #96]	@ (2188 <saveParameters()+0x78>)
    2126:	ldrh	r3, [r3, #0]
    2128:	strh	r3, [r0, #6]
  store[4]  = proc;
    212a:	ldr	r3, [pc, #96]	@ (218c <saveParameters()+0x7c>)
    212c:	ldrh	r3, [r3, #0]
    212e:	strh	r3, [r0, #8]
  store[5]  = shift;
    2130:	ldr	r3, [pc, #92]	@ (2190 <saveParameters()+0x80>)
    2132:	ldrh	r3, [r3, #0]
    2134:	strh	r3, [r0, #10]
  store[6]  = h_1;
    2136:	ldr	r3, [pc, #92]	@ (2194 <saveParameters()+0x84>)
    2138:	ldrh	r3, [r3, #0]
    213a:	strh	r3, [r0, #12]
  store[7]  = h_2;
    213c:	ldr	r3, [pc, #88]	@ (2198 <saveParameters()+0x88>)
    213e:	ldrh	r3, [r3, #0]
    2140:	strh	r3, [r0, #14]
  store[8]  = h_3;
    2142:	ldr	r3, [pc, #88]	@ (219c <saveParameters()+0x8c>)
    2144:	ldrh	r3, [r3, #0]
    2146:	strh	r3, [r0, #16]
  store[9]  = h_4;
    2148:	ldr	r3, [pc, #84]	@ (21a0 <saveParameters()+0x90>)
    214a:	ldrh	r3, [r3, #0]
    214c:	strh	r3, [r0, #18]
  store[10] = d_on;
    214e:	ldr	r3, [pc, #84]	@ (21a4 <saveParameters()+0x94>)
    2150:	ldrh	r3, [r3, #0]
    2152:	strh	r3, [r0, #20]
  store[11] = d_rep;
    2154:	ldr	r3, [pc, #80]	@ (21a8 <saveParameters()+0x98>)
    2156:	ldrh	r3, [r3, #0]
    2158:	strh	r3, [r0, #22]
  store[12] = fsamp/1000;
    215a:	ldr	r3, [pc, #80]	@ (21ac <saveParameters()+0x9c>)
    215c:	ldr	r3, [r3, #0]
    215e:	sdiv	r3, r3, r2
    2162:	strh	r3, [r0, #24]
  store[13] = again;
    2164:	ldr	r3, [pc, #72]	@ (21b0 <saveParameters()+0xa0>)
    2166:	ldrh	r3, [r3, #0]
    2168:	strh	r3, [r0, #26]
  store[14] = dgain;
    216a:	ldr	r3, [pc, #72]	@ (21b4 <saveParameters()+0xa4>)
    216c:	ldrh	r3, [r3, #0]
    216e:	strh	r3, [r0, #28]
  store[15] = d_0;
    2170:	ldr	r3, [pc, #68]	@ (21b8 <saveParameters()+0xa8>)
    2172:	ldrh	r3, [r3, #0]
    2174:	strh	r3, [r0, #30]
  storeConfig(store, 16);
    2176:	b.w	2100 <storeConfig(unsigned short*, int)>
    217a:	nop
    217c:	.word	0x2000241c
    2180:	.word	0x20012884
    2184:	.word	0x2000241e
    2188:	.word	0x20012958
    218c:	.word	0x200128b4
    2190:	.word	0x2000241a
    2194:	.word	0x200128b0
    2198:	.word	0x20002414
    219c:	.word	0x20002416
    21a0:	.word	0x20002418
    21a4:	.word	0x20002412
    21a8:	.word	0x200128aa
    21ac:	.word	0x200023fc
    21b0:	.word	0x20002410
    21b4:	.word	0x200128ac
    21b8:	.word	0x200128a8

000021bc <menu1(short)>:
{   // have ':'
    21bc:	push	{r3, r4, r5, lr}
    21be:	mov	r5, r0
        virtual int available() { return usb_serial_available(); }
    21c0:	bl	a7e0 <usb_serial_available>
    while(!Serial.available()) ;
    21c4:	cmp	r0, #0
    21c6:	beq.n	21c0 <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    21c8:	bl	a854 <usb_serial_getchar>
    ch=Serial.read();
    21cc:	uxtb	r4, r0
	size_t println(char c)				{ return print(c) + println(); }
    21ce:	ldr	r0, [pc, #80]	@ (2220 <menu1(short)+0x64>)
    21d0:	mov	r1, r4
    21d2:	bl	1e9e <Print::print(char) [clone .isra.0]>
    21d6:	ldr	r0, [pc, #72]	@ (2220 <menu1(short)+0x64>)
    21d8:	bl	c7ec <Print::println()>
    if(ch=='w') 
    21dc:	cmp	r4, #119	@ 0x77
    21de:	bne.n	21ee <menu1(short)+0x32>
    { saveParameters();
    21e0:	bl	2110 <saveParameters()>
      Serial.println("Save parameters");
    21e4:	ldr	r1, [pc, #60]	@ (2224 <menu1(short)+0x68>)
      Serial.print(ch); Serial.println(" not recognized");
    21e6:	ldr	r0, [pc, #56]	@ (2220 <menu1(short)+0x64>)
    21e8:	bl	1ec8 <Print::println(char const*) [clone .isra.0]>
    21ec:	b.n	21f8 <menu1(short)+0x3c>
    else if(ch=='m') // control monitor (needed for gui)
    21ee:	cmp	r4, #109	@ 0x6d
    21f0:	bne.n	2202 <menu1(short)+0x46>
      menuGetInt16((int16_t *)&monitor);
    21f2:	ldr	r0, [pc, #52]	@ (2228 <menu1(short)+0x6c>)
    21f4:	bl	1f30 <menuGetInt16(short*) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    21f8:	bl	a7e0 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    21fc:	cbnz	r0, 2218 <menu1(short)+0x5c>
}
    21fe:	mov	r0, r5
    2200:	pop	{r3, r4, r5, pc}
      else if(ch=='c') // transfer internal rtc to external rtc
    2202:	cmp	r4, #99	@ 0x63
    2204:	bne.n	220c <menu1(short)+0x50>
      { rtcXferTime();
    2206:	bl	3c78 <rtcXferTime()>
    220a:	b.n	21f8 <menu1(short)+0x3c>
      Serial.print(ch); Serial.println(" not recognized");
    220c:	mov	r1, r4
    220e:	ldr	r0, [pc, #16]	@ (2220 <menu1(short)+0x64>)
    2210:	bl	1e9e <Print::print(char) [clone .isra.0]>
    2214:	ldr	r1, [pc, #20]	@ (222c <menu1(short)+0x70>)
    2216:	b.n	21e6 <menu1(short)+0x2a>
        virtual int read() { return usb_serial_getchar(); }
    2218:	bl	a854 <usb_serial_getchar>
    221c:	b.n	21f8 <menu1(short)+0x3c>
    221e:	nop
    2220:	.word	0x20001e58
    2224:	.word	0x200010bf
    2228:	.word	0x200128b2
    222c:	.word	0x200010cf

00002230 <loadParameters()>:
}

uint16_t *loadParameters(void)
{
    2230:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  loadConfig(store,16);
    2234:	ldr	r4, [pc, #252]	@ (2334 <loadParameters()+0x104>)
    2236:	movs	r1, #16
    2238:	ldr.w	sl, [pc, #296]	@ 2364 <loadParameters()+0x134>
    223c:	mov	r0, r4
    223e:	ldr.w	r9, [pc, #296]	@ 2368 <loadParameters()+0x138>
    2242:	bl	2108 <loadConfig(unsigned short*, int)>
  if(store[0]==1)
    2246:	ldrh	r3, [r4, #0]
    2248:	ldr.w	lr, [pc, #288]	@ 236c <loadParameters()+0x13c>
    224c:	cmp	r3, #1
    224e:	ldr	r7, [pc, #232]	@ (2338 <loadParameters()+0x108>)
    2250:	ldr.w	ip, [pc, #284]	@ 2370 <loadParameters()+0x140>
    2254:	ldr	r2, [pc, #228]	@ (233c <loadParameters()+0x10c>)
    2256:	ldr	r6, [pc, #232]	@ (2340 <loadParameters()+0x110>)
    2258:	ldr	r5, [pc, #232]	@ (2344 <loadParameters()+0x114>)
    225a:	ldr	r0, [pc, #236]	@ (2348 <loadParameters()+0x118>)
    225c:	ldr	r1, [pc, #236]	@ (234c <loadParameters()+0x11c>)
    225e:	bne.n	22c4 <loadParameters()+0x94>
  {
    t_acq   = store[1];
    2260:	ldrh	r3, [r4, #2]
    2262:	strh.w	r3, [sl]
    t_on    = store[2];
    2266:	ldrh	r3, [r4, #4]
    2268:	strh.w	r3, [r9]
    t_rep   = store[3];
    226c:	ldrh	r3, [r4, #6]
    226e:	strh.w	r3, [lr]
    proc    = store[4];
    2272:	ldrsh.w	r3, [r4, #8]
    2276:	strh	r3, [r7, #0]
    shift   = store[5];
    2278:	ldrsh.w	r3, [r4, #10]
    227c:	strh.w	r3, [ip]
    h_1     = store[6];
    2280:	ldrh	r3, [r4, #12]
    2282:	strh	r3, [r2, #0]
    h_2     = store[7];
    2284:	ldrh	r3, [r4, #14]
    h_3     = store[8];
    h_4     = store[9];
    d_on    = store[10];
    d_rep   = store[11];
    2286:	ldrh	r2, [r4, #22]
    h_2     = store[7];
    2288:	strh	r3, [r6, #0]
    h_3     = store[8];
    228a:	ldrh	r3, [r4, #16]
    228c:	strh	r3, [r5, #0]
    h_4     = store[9];
    228e:	ldrh	r3, [r4, #18]
    2290:	strh	r3, [r0, #0]
    d_on    = store[10];
    2292:	ldrh	r3, [r4, #20]
    2294:	strh	r3, [r1, #0]
    d_rep   = store[11];
    2296:	ldr	r3, [pc, #184]	@ (2350 <loadParameters()+0x120>)
    2298:	strh	r2, [r3, #0]
    fsamp   = store[12]*1000;
    229a:	mov.w	r2, #1000	@ 0x3e8
    229e:	ldrh	r3, [r4, #24]
    22a0:	muls	r3, r2
    22a2:	ldr	r2, [pc, #176]	@ (2354 <loadParameters()+0x124>)
    22a4:	str	r3, [r2, #0]
    again   = store[13];
    22a6:	ldrsh.w	r2, [r4, #26]
    22aa:	ldr	r3, [pc, #172]	@ (2358 <loadParameters()+0x128>)
    22ac:	strh	r2, [r3, #0]
    dgain   = store[14];
    22ae:	ldrsh.w	r2, [r4, #28]
    22b2:	ldr	r3, [pc, #168]	@ (235c <loadParameters()+0x12c>)
    22b4:	strh	r2, [r3, #0]
    d_0     = store[15];
    22b6:	ldrsh.w	r2, [r4, #30]
    22ba:	ldr	r3, [pc, #164]	@ (2360 <loadParameters()+0x130>)
    22bc:	strh	r2, [r3, #0]
    store[13] = again    = AGAIN;
    store[14] = dgain    = DGAIN;
    store[15] = d_0      = 0; 
  }
  return store;
}
    22be:	ldr	r0, [pc, #116]	@ (2334 <loadParameters()+0x104>)
    22c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    store[1]  = t_acq    = T_ACQ;
    22c4:	mov.w	r8, #20
    store[0]  = 0;
    22c8:	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    22ca:	strh.w	r8, [sl]
    22ce:	strh.w	r8, [r4, #2]
    store[2]  = t_on     = T_ON;
    22d2:	mov.w	r8, #60	@ 0x3c
    store[0]  = 0;
    22d6:	strh	r3, [r4, #0]
    store[2]  = t_on     = T_ON;
    22d8:	strh.w	r8, [r9]
    store[3]  = t_rep    = T_REP;
    22dc:	strh.w	r3, [lr]
    store[4]  = proc     = PROC_MODE;
    22e0:	strh	r3, [r7, #0]
    store[5]  = shift    = SHIFT;
    22e2:	movs	r7, #16
    store[2]  = t_on     = T_ON;
    22e4:	strh.w	r8, [r4, #4]
    store[5]  = shift    = SHIFT;
    22e8:	strh.w	r7, [ip]
    store[6]  = h_1      = H_1;
    22ec:	strh	r3, [r2, #0]
    store[7]  = h_2      = H_2;
    22ee:	movs	r2, #12
    store[3]  = t_rep    = T_REP;
    22f0:	strh	r3, [r4, #6]
    store[7]  = h_2      = H_2;
    22f2:	strh	r2, [r6, #0]
    22f4:	strh	r2, [r4, #14]
    store[8]  = h_3      = H_3;
    22f6:	strh	r2, [r5, #0]
    22f8:	strh	r2, [r4, #16]
    store[9]  = h_4      = H_4;
    22fa:	movs	r2, #24
    store[4]  = proc     = PROC_MODE;
    22fc:	strh	r3, [r4, #8]
    store[9]  = h_4      = H_4;
    22fe:	strh	r2, [r0, #0]
    2300:	strh	r2, [r4, #18]
    store[10] = d_on     = D_ON;
    2302:	movs	r2, #1
    store[5]  = shift    = SHIFT;
    2304:	strh	r7, [r4, #10]
    store[10] = d_on     = D_ON;
    2306:	strh	r2, [r1, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    2308:	movw	r1, #48000	@ 0xbb80
    store[10] = d_on     = D_ON;
    230c:	strh	r2, [r4, #20]
    store[11] = d_rep    = D_REP;
    230e:	ldr	r2, [pc, #64]	@ (2350 <loadParameters()+0x120>)
    store[6]  = h_1      = H_1;
    2310:	strh	r3, [r4, #12]
    store[11] = d_rep    = D_REP;
    2312:	strh	r3, [r2, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    2314:	ldr	r2, [pc, #60]	@ (2354 <loadParameters()+0x124>)
    store[11] = d_rep    = D_REP;
    2316:	strh	r3, [r4, #22]
    store[12] = (fsamp   = FSAMP)/1000; 
    2318:	str	r1, [r2, #0]
    231a:	movs	r2, #48	@ 0x30
    store[13] = again    = AGAIN;
    231c:	ldr	r1, [pc, #56]	@ (2358 <loadParameters()+0x128>)
    store[12] = (fsamp   = FSAMP)/1000; 
    231e:	strh	r2, [r4, #24]
    store[13] = again    = AGAIN;
    2320:	movs	r2, #10
    store[14] = dgain    = DGAIN;
    2322:	strh	r3, [r4, #28]
    store[13] = again    = AGAIN;
    2324:	strh	r2, [r1, #0]
    2326:	strh	r2, [r4, #26]
    store[14] = dgain    = DGAIN;
    2328:	ldr	r2, [pc, #48]	@ (235c <loadParameters()+0x12c>)
    store[15] = d_0      = 0; 
    232a:	strh	r3, [r4, #30]
    store[14] = dgain    = DGAIN;
    232c:	strh	r3, [r2, #0]
    store[15] = d_0      = 0; 
    232e:	ldr	r2, [pc, #48]	@ (2360 <loadParameters()+0x130>)
    2330:	strh	r3, [r2, #0]
    2332:	b.n	22be <loadParameters()+0x8e>
    2334:	.word	0x20012884
    2338:	.word	0x200128b4
    233c:	.word	0x200128b0
    2340:	.word	0x20002414
    2344:	.word	0x20002416
    2348:	.word	0x20002418
    234c:	.word	0x20002412
    2350:	.word	0x200128aa
    2354:	.word	0x200023fc
    2358:	.word	0x20002410
    235c:	.word	0x200128ac
    2360:	.word	0x200128a8
    2364:	.word	0x2000241c
    2368:	.word	0x2000241e
    236c:	.word	0x20012958
    2370:	.word	0x2000241a

00002374 <menu2()>:
{   // have '?'
    2374:	push	{r4, lr}
    2376:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    2378:	bl	a7e0 <usb_serial_available>
    while(!Serial.available()) ;
    237c:	cmp	r0, #0
    237e:	beq.n	2378 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2380:	bl	a854 <usb_serial_getchar>
    ch=Serial.read();
    2384:	uxtb	r0, r0
    if(ch=='p') // get parameters
    2386:	cmp	r0, #54	@ 0x36
    2388:	bhi.n	23b4 <menu2()+0x40>
    238a:	cmp	r0, #47	@ 0x2f
    238c:	bhi.n	239c <menu2()+0x28>
        virtual int available() { return usb_serial_available(); }
    238e:	bl	a7e0 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    2392:	cmp	r0, #0
    2394:	bne.w	2686 <menu2()+0x312>
}
    2398:	add	sp, #32
    239a:	pop	{r4, pc}
    239c:	subs	r0, #49	@ 0x31
    239e:	cmp	r0, #5
    23a0:	bhi.w	257a <menu2()+0x206>
    23a4:	tbh	[pc, r0, lsl #1]
    23a8:	.word	0x01480142
    23ac:	.word	0x0154014e
    23b0:	.word	0x0160015a
    23b4:	subs	r0, #97	@ 0x61
    23b6:	uxtb	r3, r0
    23b8:	cmp	r3, #22
    23ba:	bhi.n	238e <menu2()+0x1a>
    23bc:	cmp	r0, #22
    23be:	bhi.n	238e <menu2()+0x1a>
    23c0:	add	r3, pc, #4	@ (adr r3, 23c8 <menu2()+0x54>)
    23c2:	ldr.w	pc, [r3, r0, lsl #2]
    23c6:	nop
    23c8:	.word	0x000025bd
    23cc:	.word	0x0000238f
    23d0:	.word	0x00002615
    23d4:	.word	0x00002587
    23d8:	.word	0x0000238f
    23dc:	.word	0x000025eb
    23e0:	.word	0x00002621
    23e4:	.word	0x0000238f
    23e8:	.word	0x0000238f
    23ec:	.word	0x0000238f
    23f0:	.word	0x0000238f
    23f4:	.word	0x0000238f
    23f8:	.word	0x0000238f
    23fc:	.word	0x0000238f
    2400:	.word	0x000025d3
    2404:	.word	0x00002425
    2408:	.word	0x0000238f
    240c:	.word	0x000025df
    2410:	.word	0x00002605
    2414:	.word	0x000025a5
    2418:	.word	0x0000238f
    241c:	.word	0x0000238f
    2420:	.word	0x00002675
      Serial.println();
    2424:	ldr	r0, [pc, #612]	@ (268c <menu2()+0x318>)
    2426:	bl	c7ec <Print::println()>
      Serial.println(version);
    242a:	ldr	r1, [pc, #612]	@ (2690 <menu2()+0x31c>)
    242c:	ldr	r0, [pc, #604]	@ (268c <menu2()+0x318>)
    242e:	bl	1ec8 <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    2432:	add	r0, sp, #24
    2434:	bl	3c7e <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    2438:	ldrsb.w	r3, [sp, #28]
    243c:	ldrsh.w	r2, [sp, #24]
    2440:	str	r3, [sp, #16]
    2442:	ldrsb.w	r3, [sp, #31]
    2446:	ldr	r1, [pc, #588]	@ (2694 <menu2()+0x320>)
    2448:	str	r3, [sp, #12]
    244a:	ldrsb.w	r3, [sp, #30]
    244e:	ldr	r0, [pc, #572]	@ (268c <menu2()+0x318>)
    2450:	str	r3, [sp, #8]
    2452:	ldrsb.w	r3, [sp, #29]
    2456:	str	r3, [sp, #4]
    2458:	ldrsb.w	r3, [sp, #27]
    245c:	str	r3, [sp, #0]
    245e:	ldrsb.w	r3, [sp, #26]
    2462:	bl	c824 <Print::printf(char const*, ...)>
      Serial.println(rtcGetTimestamp());
    2466:	bl	3c7a <rtcGetTimestamp()>
    246a:	mov	r1, r0
    246c:	ldr	r0, [pc, #540]	@ (268c <menu2()+0x318>)
    246e:	bl	1ec8 <Print::println(char const*) [clone .isra.0]>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    2472:	ldr	r1, [pc, #548]	@ (2698 <menu2()+0x324>)
    2474:	ldr	r0, [pc, #532]	@ (268c <menu2()+0x318>)
    2476:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    247a:	ldr	r3, [pc, #544]	@ (269c <menu2()+0x328>)
	size_t println(long n)				{ return print(n) + println(); }
    247c:	ldr	r0, [pc, #524]	@ (268c <menu2()+0x318>)
    247e:	ldr	r1, [r3, #0]
    2480:	bl	c7da <Print::print(long)>
    2484:	ldr	r0, [pc, #516]	@ (268c <menu2()+0x318>)
    2486:	bl	c7ec <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    248a:	ldr	r1, [pc, #532]	@ (26a0 <menu2()+0x32c>)
    248c:	ldr	r0, [pc, #508]	@ (268c <menu2()+0x318>)
    248e:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2492:	ldr	r3, [pc, #528]	@ (26a4 <menu2()+0x330>)
    2494:	ldr	r0, [pc, #500]	@ (268c <menu2()+0x318>)
    2496:	ldrh	r1, [r3, #0]
    2498:	sxth	r1, r1
    249a:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    249e:	ldr	r1, [pc, #520]	@ (26a8 <menu2()+0x334>)
    24a0:	ldr	r0, [pc, #488]	@ (268c <menu2()+0x318>)
    24a2:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    24a6:	ldr	r3, [pc, #516]	@ (26ac <menu2()+0x338>)
    24a8:	ldr	r0, [pc, #480]	@ (268c <menu2()+0x318>)
    24aa:	ldrh	r1, [r3, #0]
    24ac:	sxth	r1, r1
    24ae:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    24b2:	ldr	r1, [pc, #508]	@ (26b0 <menu2()+0x33c>)
    24b4:	ldr	r0, [pc, #468]	@ (268c <menu2()+0x318>)
    24b6:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    24ba:	ldr	r3, [pc, #504]	@ (26b4 <menu2()+0x340>)
    24bc:	ldr	r0, [pc, #460]	@ (268c <menu2()+0x318>)
    24be:	ldrh	r1, [r3, #0]
    24c0:	sxth	r1, r1
    24c2:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    24c6:	ldr	r1, [pc, #496]	@ (26b8 <menu2()+0x344>)
    24c8:	ldr	r0, [pc, #448]	@ (268c <menu2()+0x318>)
    24ca:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    24ce:	ldr	r3, [pc, #492]	@ (26bc <menu2()+0x348>)
    24d0:	ldr	r0, [pc, #440]	@ (268c <menu2()+0x318>)
    24d2:	ldrh	r1, [r3, #0]
    24d4:	uxth	r1, r1
    24d6:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    24da:	ldr	r1, [pc, #484]	@ (26c0 <menu2()+0x34c>)
    24dc:	ldr	r0, [pc, #428]	@ (268c <menu2()+0x318>)
    24de:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    24e2:	ldr	r3, [pc, #480]	@ (26c4 <menu2()+0x350>)
    24e4:	ldr	r0, [pc, #420]	@ (268c <menu2()+0x318>)
    24e6:	ldrh	r1, [r3, #0]
    24e8:	uxth	r1, r1
    24ea:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    24ee:	ldr	r1, [pc, #472]	@ (26c8 <menu2()+0x354>)
    24f0:	ldr	r0, [pc, #408]	@ (268c <menu2()+0x318>)
    24f2:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    24f6:	ldr	r3, [pc, #468]	@ (26cc <menu2()+0x358>)
    24f8:	ldr	r0, [pc, #400]	@ (268c <menu2()+0x318>)
    24fa:	ldrh	r1, [r3, #0]
    24fc:	uxth	r1, r1
    24fe:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("h_1   (1) = "); Serial.println(h_1);
    2502:	ldr	r1, [pc, #460]	@ (26d0 <menu2()+0x35c>)
    2504:	ldr	r0, [pc, #388]	@ (268c <menu2()+0x318>)
    2506:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    250a:	ldr	r3, [pc, #456]	@ (26d4 <menu2()+0x360>)
    250c:	ldr	r0, [pc, #380]	@ (268c <menu2()+0x318>)
    250e:	ldrh	r1, [r3, #0]
    2510:	uxth	r1, r1
    2512:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("h_2   (2) = "); Serial.println(h_2);
    2516:	ldr	r1, [pc, #448]	@ (26d8 <menu2()+0x364>)
    2518:	ldr	r0, [pc, #368]	@ (268c <menu2()+0x318>)
    251a:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    251e:	ldr	r3, [pc, #444]	@ (26dc <menu2()+0x368>)
    2520:	ldr	r0, [pc, #360]	@ (268c <menu2()+0x318>)
    2522:	ldrh	r1, [r3, #0]
    2524:	uxth	r1, r1
    2526:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("h_3   (3) = "); Serial.println(h_3);
    252a:	ldr	r1, [pc, #436]	@ (26e0 <menu2()+0x36c>)
    252c:	ldr	r0, [pc, #348]	@ (268c <menu2()+0x318>)
    252e:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2532:	ldr	r3, [pc, #432]	@ (26e4 <menu2()+0x370>)
    2534:	ldr	r0, [pc, #340]	@ (268c <menu2()+0x318>)
    2536:	ldrh	r1, [r3, #0]
    2538:	uxth	r1, r1
    253a:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("h_4   (4) = "); Serial.println(h_4);
    253e:	ldr	r1, [pc, #424]	@ (26e8 <menu2()+0x374>)
    2540:	ldr	r0, [pc, #328]	@ (268c <menu2()+0x318>)
    2542:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2546:	ldr	r3, [pc, #420]	@ (26ec <menu2()+0x378>)
    2548:	ldr	r0, [pc, #320]	@ (268c <menu2()+0x318>)
    254a:	ldrh	r1, [r3, #0]
    254c:	uxth	r1, r1
    254e:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("d_on  (5) = "); Serial.println(d_on);
    2552:	ldr	r1, [pc, #412]	@ (26f0 <menu2()+0x37c>)
    2554:	ldr	r0, [pc, #308]	@ (268c <menu2()+0x318>)
    2556:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    255a:	ldr	r3, [pc, #408]	@ (26f4 <menu2()+0x380>)
    255c:	ldr	r0, [pc, #300]	@ (268c <menu2()+0x318>)
    255e:	ldrh	r1, [r3, #0]
    2560:	uxth	r1, r1
    2562:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    2566:	ldr	r1, [pc, #400]	@ (26f8 <menu2()+0x384>)
    2568:	ldr	r0, [pc, #288]	@ (268c <menu2()+0x318>)
    256a:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    256e:	ldr	r3, [pc, #396]	@ (26fc <menu2()+0x388>)
    2570:	ldr	r0, [pc, #280]	@ (268c <menu2()+0x318>)
    2572:	ldrh	r1, [r3, #0]
    2574:	uxth	r1, r1
    2576:	bl	1e8c <Print::println(int) [clone .isra.0]>
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    257a:	ldr	r1, [pc, #388]	@ (2700 <menu2()+0x38c>)
    257c:	ldr	r0, [pc, #268]	@ (268c <menu2()+0x318>)
    257e:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2582:	ldr	r3, [pc, #384]	@ (2704 <menu2()+0x390>)
    2584:	b.n	260e <menu2()+0x29a>
      rtc_get_datetime(&t);
    2586:	add	r0, sp, #24
    2588:	bl	3c7e <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    258c:	ldrsb.w	r3, [sp, #27]
    2590:	ldrsh.w	r2, [sp, #24]
    2594:	str	r3, [sp, #0]
    2596:	ldr	r1, [pc, #368]	@ (2708 <menu2()+0x394>)
    2598:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    259c:	ldr	r0, [pc, #236]	@ (268c <menu2()+0x318>)
    259e:	bl	c824 <Print::printf(char const*, ...)>
    25a2:	b.n	238e <menu2()+0x1a>
      rtc_get_datetime(&t);
    25a4:	add	r0, sp, #24
    25a6:	bl	3c7e <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    25aa:	ldrsb.w	r3, [sp, #31]
    25ae:	ldrsb.w	r2, [sp, #29]
    25b2:	str	r3, [sp, #0]
    25b4:	ldr	r1, [pc, #340]	@ (270c <menu2()+0x398>)
    25b6:	ldrsb.w	r3, [sp, #30]
    25ba:	b.n	259c <menu2()+0x228>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    25bc:	ldr	r1, [pc, #248]	@ (26b8 <menu2()+0x344>)
    25be:	ldr	r0, [pc, #204]	@ (268c <menu2()+0x318>)
    25c0:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    25c4:	ldr	r3, [pc, #244]	@ (26bc <menu2()+0x348>)
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    25c6:	ldrh	r1, [r3, #0]
    25c8:	uxth	r1, r1
      Serial.print("params[0]  = "); Serial.println(params[0]);
    25ca:	ldr	r0, [pc, #192]	@ (268c <menu2()+0x318>)
    25cc:	bl	1e8c <Print::println(int) [clone .isra.0]>
    25d0:	b.n	238e <menu2()+0x1a>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    25d2:	ldr	r1, [pc, #316]	@ (2710 <menu2()+0x39c>)
    25d4:	ldr	r0, [pc, #180]	@ (268c <menu2()+0x318>)
    25d6:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    25da:	ldr	r3, [pc, #232]	@ (26c4 <menu2()+0x350>)
    25dc:	b.n	25c6 <menu2()+0x252>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    25de:	ldr	r1, [pc, #232]	@ (26c8 <menu2()+0x354>)
    25e0:	ldr	r0, [pc, #168]	@ (268c <menu2()+0x318>)
    25e2:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    25e6:	ldr	r3, [pc, #228]	@ (26cc <menu2()+0x358>)
    25e8:	b.n	25c6 <menu2()+0x252>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    25ea:	ldr	r1, [pc, #172]	@ (2698 <menu2()+0x324>)
    25ec:	ldr	r0, [pc, #156]	@ (268c <menu2()+0x318>)
    25ee:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    25f2:	ldr	r3, [pc, #168]	@ (269c <menu2()+0x328>)
    25f4:	ldr	r0, [pc, #148]	@ (268c <menu2()+0x318>)
    25f6:	ldr	r1, [r3, #0]
    25f8:	bl	c7da <Print::print(long)>
    25fc:	ldr	r0, [pc, #140]	@ (268c <menu2()+0x318>)
    25fe:	bl	c7ec <Print::println()>
    2602:	b.n	238e <menu2()+0x1a>
      Serial.print("shift (s) = "); Serial.println(shift);
    2604:	ldr	r1, [pc, #152]	@ (26a0 <menu2()+0x32c>)
    2606:	ldr	r0, [pc, #132]	@ (268c <menu2()+0x318>)
    2608:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    260c:	ldr	r3, [pc, #148]	@ (26a4 <menu2()+0x330>)
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    260e:	ldrh	r1, [r3, #0]
    2610:	sxth	r1, r1
    2612:	b.n	25ca <menu2()+0x256>
      Serial.print("proc  (c) = "); Serial.println(proc);
    2614:	ldr	r1, [pc, #144]	@ (26a8 <menu2()+0x334>)
    2616:	ldr	r0, [pc, #116]	@ (268c <menu2()+0x318>)
    2618:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    261c:	ldr	r3, [pc, #140]	@ (26ac <menu2()+0x338>)
    261e:	b.n	260e <menu2()+0x29a>
      Serial.print("again (g) = "); Serial.println(again);
    2620:	ldr	r1, [pc, #140]	@ (26b0 <menu2()+0x33c>)
    2622:	ldr	r0, [pc, #104]	@ (268c <menu2()+0x318>)
    2624:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2628:	ldr	r3, [pc, #136]	@ (26b4 <menu2()+0x340>)
    262a:	b.n	260e <menu2()+0x29a>
      Serial.print("h_1  (1) = "); Serial.println(h_1);
    262c:	ldr	r1, [pc, #228]	@ (2714 <menu2()+0x3a0>)
    262e:	ldr	r0, [pc, #92]	@ (268c <menu2()+0x318>)
    2630:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2634:	ldr	r3, [pc, #156]	@ (26d4 <menu2()+0x360>)
    2636:	b.n	25c6 <menu2()+0x252>
      Serial.print("h_2  (2) = "); Serial.println(h_2);
    2638:	ldr	r1, [pc, #220]	@ (2718 <menu2()+0x3a4>)
    263a:	ldr	r0, [pc, #80]	@ (268c <menu2()+0x318>)
    263c:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2640:	ldr	r3, [pc, #152]	@ (26dc <menu2()+0x368>)
    2642:	b.n	25c6 <menu2()+0x252>
      Serial.print("h_3  (3) = "); Serial.println(h_3);
    2644:	ldr	r1, [pc, #212]	@ (271c <menu2()+0x3a8>)
    2646:	ldr	r0, [pc, #68]	@ (268c <menu2()+0x318>)
    2648:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    264c:	ldr	r3, [pc, #148]	@ (26e4 <menu2()+0x370>)
    264e:	b.n	25c6 <menu2()+0x252>
      Serial.print("h_4  (4) = "); Serial.println(h_4);
    2650:	ldr	r1, [pc, #204]	@ (2720 <menu2()+0x3ac>)
    2652:	ldr	r0, [pc, #56]	@ (268c <menu2()+0x318>)
    2654:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2658:	ldr	r3, [pc, #144]	@ (26ec <menu2()+0x378>)
    265a:	b.n	25c6 <menu2()+0x252>
      Serial.print("d_on  (5) = "); Serial.println(d_on);
    265c:	ldr	r1, [pc, #144]	@ (26f0 <menu2()+0x37c>)
    265e:	ldr	r0, [pc, #44]	@ (268c <menu2()+0x318>)
    2660:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2664:	ldr	r3, [pc, #140]	@ (26f4 <menu2()+0x380>)
    2666:	b.n	25c6 <menu2()+0x252>
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    2668:	ldr	r1, [pc, #140]	@ (26f8 <menu2()+0x384>)
    266a:	ldr	r0, [pc, #32]	@ (268c <menu2()+0x318>)
    266c:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2670:	ldr	r3, [pc, #136]	@ (26fc <menu2()+0x388>)
    2672:	b.n	25c6 <menu2()+0x252>
    { uint16_t *params=loadParameters();
    2674:	bl	2230 <loadParameters()>
    2678:	mov	r4, r0
      Serial.print("params[0]  = "); Serial.println(params[0]);
    267a:	ldr	r1, [pc, #168]	@ (2724 <menu2()+0x3b0>)
    267c:	ldr	r0, [pc, #12]	@ (268c <menu2()+0x318>)
    267e:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    2682:	ldrh	r1, [r4, #0]
    2684:	b.n	25ca <menu2()+0x256>
        virtual int read() { return usb_serial_getchar(); }
    2686:	bl	a854 <usb_serial_getchar>
    268a:	b.n	238e <menu2()+0x1a>
    268c:	.word	0x20001e58
    2690:	.word	0x20000dc8
    2694:	.word	0x200010df
    2698:	.word	0x20001105
    269c:	.word	0x200023fc
    26a0:	.word	0x20001112
    26a4:	.word	0x2000241a
    26a8:	.word	0x2000111f
    26ac:	.word	0x200128b4
    26b0:	.word	0x2000112c
    26b4:	.word	0x20002410
    26b8:	.word	0x20001139
    26bc:	.word	0x2000241c
    26c0:	.word	0x20001146
    26c4:	.word	0x2000241e
    26c8:	.word	0x20001153
    26cc:	.word	0x20012958
    26d0:	.word	0x20001160
    26d4:	.word	0x200128b0
    26d8:	.word	0x2000116d
    26dc:	.word	0x20002414
    26e0:	.word	0x2000117a
    26e4:	.word	0x20002416
    26e8:	.word	0x20001187
    26ec:	.word	0x20002418
    26f0:	.word	0x20001194
    26f4:	.word	0x20002412
    26f8:	.word	0x200011a1
    26fc:	.word	0x200128aa
    2700:	.word	0x200011ae
    2704:	.word	0x200128a8
    2708:	.word	0x200011bb
    270c:	.word	0x200011d5
    2710:	.word	0x200011f0
    2714:	.word	0x200011fd
    2718:	.word	0x20001209
    271c:	.word	0x20001215
    2720:	.word	0x20001221
    2724:	.word	0x2000122d

00002728 <menu(short)>:
{
    2728:	push	{r3, r4, r5, lr}
    272a:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    272c:	bl	a7e0 <usb_serial_available>
  if(Serial.available())
    2730:	cmp	r0, #0
    2732:	beq.n	281e <menu(short)+0xf6>
        virtual int read() { return usb_serial_getchar(); }
    2734:	bl	a854 <usb_serial_getchar>
    char ch=Serial.read();
    2738:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    273a:	cmp	r1, #101	@ 0x65
    273c:	beq.n	27be <menu(short)+0x96>
    273e:	bhi.n	2768 <menu(short)+0x40>
    2740:	cmp	r1, #63	@ 0x3f
    2742:	beq.n	27fe <menu(short)+0xd6>
    2744:	bhi.n	275e <menu(short)+0x36>
    2746:	cmp	r1, #33	@ 0x21
    2748:	beq.n	2804 <menu(short)+0xdc>
    274a:	cmp	r1, #58	@ 0x3a
    274c:	beq.n	27f4 <menu(short)+0xcc>
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    274e:	ldr	r0, [pc, #212]	@ (2824 <menu(short)+0xfc>)
    2750:	bl	1e9e <Print::print(char) [clone .isra.0]>
    2754:	ldr	r1, [pc, #208]	@ (2828 <menu(short)+0x100>)
    2756:	ldr	r0, [pc, #204]	@ (2824 <menu(short)+0xfc>)
    2758:	bl	1ec8 <Print::println(char const*) [clone .isra.0]>
    275c:	b.n	27ba <menu(short)+0x92>
    275e:	cmp	r1, #98	@ 0x62
    2760:	bne.n	274e <menu(short)+0x26>
    else if(ch=='b') {reboot();}
    2762:	bl	244 <reboot()>
    2766:	b.n	27ba <menu(short)+0x92>
    2768:	sub.w	r3, r1, #109	@ 0x6d
    276c:	uxtb	r2, r3
    276e:	cmp	r2, #11
    2770:	bhi.n	274e <menu(short)+0x26>
    2772:	cmp	r3, #11
    2774:	bhi.n	274e <menu(short)+0x26>
    2776:	add	r2, pc, #4	@ (adr r2, 277c <menu(short)+0x54>)
    2778:	ldr.w	pc, [r2, r3, lsl #2]
    277c:	.word	0x000027cb
    2780:	.word	0x0000274f
    2784:	.word	0x0000274f
    2788:	.word	0x0000274f
    278c:	.word	0x0000274f
    2790:	.word	0x000027e9
    2794:	.word	0x000027ad
    2798:	.word	0x0000274f
    279c:	.word	0x0000274f
    27a0:	.word	0x0000274f
    27a4:	.word	0x0000274f
    27a8:	.word	0x000027ef
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    27ac:	movs	r4, #0
    27ae:	ldr	r1, [pc, #124]	@ (282c <menu(short)+0x104>)
    27b0:	ldr	r0, [pc, #112]	@ (2824 <menu(short)+0xfc>)
    27b2:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    27b6:	bl	3964 <adcStatus()>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    27ba:	ldr	r5, [pc, #104]	@ (2824 <menu(short)+0xfc>)
    27bc:	b.n	2816 <menu(short)+0xee>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    27be:	ldr	r1, [pc, #112]	@ (2830 <menu(short)+0x108>)
    27c0:	movs	r4, #5
    27c2:	ldr	r0, [pc, #96]	@ (2824 <menu(short)+0xfc>)
    27c4:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
    27c8:	b.n	27ba <menu(short)+0x92>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    27ca:	ldr	r5, [pc, #104]	@ (2834 <menu(short)+0x10c>)
    27cc:	ldr	r1, [pc, #104]	@ (2838 <menu(short)+0x110>)
    27ce:	ldrh	r3, [r5, #0]
    27d0:	ldr	r0, [pc, #80]	@ (2824 <menu(short)+0xfc>)
    27d2:	rsb	r3, r3, #1
    27d6:	strh	r3, [r5, #0]
    27d8:	bl	1ec4 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    27dc:	ldrsh.w	r1, [r5]
    27e0:	ldr	r0, [pc, #64]	@ (2824 <menu(short)+0xfc>)
    27e2:	bl	c7da <Print::print(long)>
    27e6:	b.n	27ba <menu(short)+0x92>
    else if(ch=='r') {resetUSB();}
    27e8:	bl	214 <resetUSB()>
    27ec:	b.n	27ba <menu(short)+0x92>
    else if(ch=='x') {powerDown();}
    27ee:	bl	2fa4 <powerDown()>
    27f2:	b.n	27ba <menu(short)+0x92>
    else if(ch==':') status=menu1(status); 
    27f4:	mov	r0, r4
    27f6:	bl	21bc <menu1(short)>
    27fa:	mov	r4, r0
    27fc:	b.n	27ba <menu(short)+0x92>
    else if(ch=='?') menu2(); 
    27fe:	bl	2374 <menu2()>
    2802:	b.n	27ba <menu(short)+0x92>
    else if(ch=='!') menu3(); 
    2804:	bl	1f4c <menu3()>
    2808:	b.n	27ba <menu(short)+0x92>
    280a:	bl	a854 <usb_serial_getchar>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    280e:	uxtb	r1, r0
    2810:	mov	r0, r5
    2812:	bl	1e9e <Print::print(char) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    2816:	bl	a7e0 <usb_serial_available>
    281a:	cmp	r0, #0
    281c:	bne.n	280a <menu(short)+0xe2>
}
    281e:	mov	r0, r4
    2820:	pop	{r3, r4, r5, pc}
    2822:	nop
    2824:	.word	0x20001e58
    2828:	.word	0x20001255
    282c:	.word	0x2000123b
    2830:	.word	0x20001243
    2834:	.word	0x200128b2
    2838:	.word	0x2000124a

0000283c <getStore()>:

uint16_t *getStore(void) {return store;}
    283c:	ldr	r0, [pc, #0]	@ (2840 <getStore()+0x4>)
    283e:	bx	lr
    2840:	.word	0x20012884

00002844 <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    2844:	ldr	r3, [pc, #16]	@ (2858 <getDataCount()+0x14>)
    2846:	ldr	r0, [r3, #0]
    2848:	ldr	r3, [pc, #16]	@ (285c <getDataCount()+0x18>)
    284a:	ldr	r3, [r3, #0]
    284c:	subs	r0, r0, r3
    284e:	it	mi
    2850:	addmi.w	r0, r0, #4608	@ 0x1200
    2854:	uxth	r0, r0
    2856:	bx	lr
    2858:	.word	0x200116d8
    285c:	.word	0x200116d4

00002860 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    2860:	ldr	r3, [pc, #4]	@ (2868 <queue_isBusy()+0x8>)
    2862:	ldr	r0, [r3, #0]
    2864:	bx	lr
    2866:	nop
    2868:	.word	0x2000b4c4

0000286c <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    286c:	push	{r3, r4, r5, r6, r7, lr}
//    while(queue_busy); 
    queue_busy=1;
    286e:	movs	r4, #1
    2870:	ldr	r5, [pc, #72]	@ (28bc <pushData(unsigned long*)+0x50>)
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2872:	ldr	r6, [pc, #76]	@ (28c0 <pushData(unsigned long*)+0x54>)
    2874:	mov.w	r7, #4608	@ 0x1200
    queue_busy=1;
    2878:	str	r4, [r5, #0]
  {
    287a:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    287c:	ldr	r3, [r6, #0]
    287e:	ldr	r2, [pc, #68]	@ (28c4 <pushData(unsigned long*)+0x58>)
    2880:	add	r3, r4
    2882:	ldr	r2, [r2, #0]
    2884:	sdiv	r0, r3, r7
    2888:	mls	r3, r7, r0, r3
    288c:	cmp	r3, r2
    288e:	bne.n	2896 <pushData(unsigned long*)+0x2a>
    2890:	movs	r0, #0
    2892:	str	r0, [r5, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    2894:	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    2896:	ldr	r3, [pc, #48]	@ (28c8 <pushData(unsigned long*)+0x5c>)
    2898:	mov.w	r2, #512	@ 0x200
    289c:	ldr	r0, [r6, #0]
    289e:	add.w	r0, r3, r0, lsl #9
    28a2:	bl	a2f0 <memcpy>
    tail = (tail+1)%MAXBUF;
    28a6:	ldr	r3, [r6, #0]
    return 1; // signal success.
    28a8:	mov	r0, r4
    tail = (tail+1)%MAXBUF;
    28aa:	adds	r3, #1
    28ac:	sdiv	r2, r3, r7
    28b0:	mls	r3, r7, r2, r3
    28b4:	str	r3, [r6, #0]
    queue_busy=0;
    28b6:	movs	r3, #0
    28b8:	str	r3, [r5, #0]
    return 1; // signal success.
    28ba:	b.n	2894 <pushData(unsigned long*)+0x28>
    28bc:	.word	0x2000b4c4
    28c0:	.word	0x200116d8
    28c4:	.word	0x200116d4
    28c8:	.word	0x70000000

000028cc <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    28cc:	push	{r4, r5, r6, lr}
//    while(queue_busy); 
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    28ce:	ldr	r3, [pc, #64]	@ (2910 <pullData(unsigned long*)+0x44>)
    queue_busy=1;
    28d0:	movs	r4, #1
    28d2:	ldr	r6, [pc, #64]	@ (2914 <pullData(unsigned long*)+0x48>)
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    28d4:	ldr	r5, [pc, #64]	@ (2918 <pullData(unsigned long*)+0x4c>)
    queue_busy=1;
    28d6:	str	r4, [r6, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    28d8:	ldr	r2, [r5, #0]
    28da:	ldr	r3, [r3, #0]
    28dc:	cmp	r2, r3
    28de:	bne.n	28e6 <pullData(unsigned long*)+0x1a>
    28e0:	movs	r0, #0
    28e2:	str	r0, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    head = (head+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    28e4:	pop	{r4, r5, r6, pc}
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    28e6:	ldr	r3, [pc, #52]	@ (291c <pullData(unsigned long*)+0x50>)
    28e8:	mov.w	r2, #512	@ 0x200
    28ec:	ldr	r1, [r5, #0]
    28ee:	add.w	r1, r3, r1, lsl #9
    28f2:	bl	a2f0 <memcpy>
    head = (head+1)%MAXBUF;
    28f6:	ldr	r3, [r5, #0]
    28f8:	mov.w	r2, #4608	@ 0x1200
    return 1; // signal success.
    28fc:	mov	r0, r4
    head = (head+1)%MAXBUF;
    28fe:	adds	r3, #1
    2900:	sdiv	r1, r3, r2
    2904:	mls	r3, r2, r1, r3
    2908:	str	r3, [r5, #0]
    queue_busy=0;
    290a:	movs	r3, #0
    290c:	str	r3, [r6, #0]
    return 1; // signal success.
    290e:	b.n	28e4 <pullData(unsigned long*)+0x18>
    2910:	.word	0x200116d8
    2914:	.word	0x2000b4c4
    2918:	.word	0x200116d4
    291c:	.word	0x70000000

00002920 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    2920:	push	{r0, r1, r4, r5, r6, lr}
    2922:	mov	r6, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2924:	mov	r0, sp
{
    2926:	mov	r4, r1
    2928:	mov	r5, r2
    rtc_get_datetime(&t);
    292a:	bl	3c7e <rtc_get_datetime(datetime_t*)>
  year -= 1980;
    292e:	ldrh.w	r2, [sp]

    *date = FS_DATE(t.year,t.month,t.day);
    2932:	ldrsb.w	r1, [sp, #2]
    2936:	subw	r2, r2, #1980	@ 0x7bc
    293a:	ldrsb.w	r3, [sp, #3]
    293e:	uxth	r2, r2
         year << 9 | month << 5 | day;
    2940:	cmp	r2, #127	@ 0x7f
    2942:	bhi.n	2992 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
  return year > 127 || month > 12 || day > 31 ? 0 :
    2944:	uxtb	r0, r1
    2946:	cmp	r0, #12
    2948:	bhi.n	2992 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
    294a:	uxtb	r0, r3
    294c:	cmp	r0, #31
    294e:	bhi.n	2992 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
         year << 9 | month << 5 | day;
    2950:	orr.w	r3, r3, r1, lsl #5
    2954:	orr.w	r3, r3, r2, lsl #9
    2958:	uxth	r3, r3
         hour << 11 | minute << 5 | second >> 1;
    295a:	ldrb.w	r0, [sp, #5]
    295e:	strh	r3, [r6, #0]
    2960:	cmp	r0, #23
    *time = FS_TIME(t.hour,t.min,t.sec);
    2962:	ldrsb.w	r1, [sp, #5]
    2966:	ldrsb.w	r3, [sp, #6]
    296a:	ldrsb.w	r2, [sp, #7]
    296e:	bhi.n	2996 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x76>
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    2970:	uxtb	r0, r3
    2972:	cmp	r0, #59	@ 0x3b
    2974:	bhi.n	2996 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x76>
    2976:	uxtb	r2, r2
    2978:	cmp	r2, #59	@ 0x3b
    297a:	bhi.n	2996 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x76>
         hour << 11 | minute << 5 | second >> 1;
    297c:	lsls	r3, r3, #5
    297e:	orr.w	r3, r3, r1, lsl #11
    2982:	orr.w	r3, r3, r2, lsr #1
    2986:	uxth	r3, r3
    2988:	strh	r3, [r4, #0]
    *ms10 = 0;
    298a:	movs	r3, #0
    298c:	strb	r3, [r5, #0]
}
    298e:	add	sp, #8
    2990:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    2992:	movs	r3, #0
    2994:	b.n	295a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x3a>
         hour << 11 | minute << 5 | second >> 1;
    2996:	movs	r3, #0
    2998:	b.n	2988 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x68>

0000299a <FsBaseFile::sync() [clone .isra.0]>:
  bool sync() {
    299a:	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
    299c:	ldr	r0, [r0, #56]	@ 0x38
    299e:	cbz	r0, 29a4 <FsBaseFile::sync() [clone .isra.0]+0xa>
    29a0:	b.w	75d8 <FatFile::sync()>
    29a4:	ldr	r0, [r3, #60]	@ 0x3c
           m_xFile ? m_xFile->sync() : false;
    29a6:	cbz	r0, 29ac <FsBaseFile::sync() [clone .isra.0]+0x12>
    29a8:	b.w	694c <ExFatFile::sync()>
  }
    29ac:	bx	lr

000029ae <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    29ae:	push	{r4, r5}
    29b0:	mov	r4, r0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    29b2:	ldr	r0, [r0, #56]	@ 0x38
  bool seekSet(uint64_t pos) {
    29b4:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    29b6:	cbz	r0, 29c0 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    29b8:	cbnz	r3, 29ca <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    29ba:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    29bc:	b.w	7396 <FatFile::seekSet(unsigned long)>
           m_xFile ? m_xFile->seekSet(pos) : false;
    29c0:	ldr	r0, [r4, #60]	@ 0x3c
    29c2:	cbz	r0, 29ca <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    29c4:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    29c6:	b.w	5d2a <ExFatFile::seekSet(unsigned long long)>
  }
    29ca:	pop	{r4, r5}
    29cc:	bx	lr

000029ce <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    29ce:	movs	r3, #0
    29d0:	movs	r2, #10
    29d2:	b.w	c83e <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000029d6 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    29d6:	push	{r4, r5, r6, lr}
    29d8:	mov	r5, r0
    29da:	mov	r4, r1
    29dc:	cbz	r1, 29f4 <Print::write(char const*) [clone .isra.0]+0x1e>
							  return write((const uint8_t *)str, strlen(str)); }
    29de:	mov	r0, r1
    29e0:	bl	ee80 <strlen>
    29e4:	ldr	r3, [r5, #0]
    29e6:	mov	r2, r0
    29e8:	mov	r1, r4
    29ea:	mov	r0, r5
    29ec:	ldr	r3, [r3, #4]
    29ee:	ldmia.w	sp!, {r4, r5, r6, lr}
    29f2:	bx	r3
    29f4:	pop	{r4, r5, r6, pc}

000029f6 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    29f6:	b.w	29d6 <Print::write(char const*) [clone .isra.0]>

000029fa <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    29fa:	push	{r4, lr}
    29fc:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    29fe:	bl	29d6 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    2a02:	mov	r0, r4
    2a04:	ldmia.w	sp!, {r4, lr}
    2a08:	b.w	c7ec <Print::println()>

00002a0c <timeStamp()>:
  // don't do anything more:
  return 0;
}

char * timeStamp(void)
{
    2a0c:	push	{r4, lr}
    2a0e:	sub	sp, #24
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2a10:	ldr	r4, [pc, #52]	@ (2a48 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    2a12:	add	r0, sp, #16
    2a14:	bl	3c7e <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2a18:	ldrsb.w	r3, [sp, #23]
    2a1c:	ldrsh.w	r2, [sp, #16]
    2a20:	mov	r0, r4
    2a22:	str	r3, [sp, #12]
    2a24:	ldrsb.w	r3, [sp, #22]
    2a28:	ldr	r1, [pc, #32]	@ (2a4c <timeStamp()+0x40>)
    2a2a:	str	r3, [sp, #8]
    2a2c:	ldrsb.w	r3, [sp, #21]
    2a30:	str	r3, [sp, #4]
    2a32:	ldrsb.w	r3, [sp, #19]
    2a36:	str	r3, [sp, #0]
    2a38:	ldrsb.w	r3, [sp, #18]
    2a3c:	bl	e9f4 <siprintf>
  return date_time;
}
    2a40:	mov	r0, r4
    2a42:	add	sp, #24
    2a44:	pop	{r4, pc}
    2a46:	nop
    2a48:	.word	0x20012a28
    2a4c:	.word	0x200012b2

00002a50 <wavHeaderInit(long, long, long, int)>:

char * wavHeaderInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
    2a50:	push	{r3, r4, r5, r6, r7, lr}
  int nbytes=nbits/8;

  memcpy(wav_hdr.rId,"RIFF",4);
    2a52:	ldr	r4, [pc, #196]	@ (2b18 <wavHeaderInit(long, long, long, int)+0xc8>)
{
    2a54:	mov	r7, r3
  memcpy(wav_hdr.rId,"RIFF",4);
    2a56:	ldr	r3, [pc, #196]	@ (2b1c <wavHeaderInit(long, long, long, int)+0xcc>)
  int nbytes=nbits/8;
    2a58:	cmp	r2, #0
    2a5a:	mov	r5, r2
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=nchan;
  wav_hdr.nSamplesPerSec=fsamp;
    2a5c:	str	r0, [r4, #24]
  memcpy(wav_hdr.rId,"RIFF",4);
    2a5e:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    2a60:	sub.w	r3, r3, #15728640	@ 0xf00000
  int nbytes=nbits/8;
    2a64:	it	lt
    2a66:	addlt	r5, r2, #7
  wav_hdr.nChannels=nchan;
    2a68:	uxth	r6, r1
  memcpy(wav_hdr.wId,"WAVE",4);
    2a6a:	subw	r3, r3, #2043	@ 0x7fb
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
  wav_hdr.nBitsPerSamples=nbits;
    2a6e:	strh	r2, [r4, #34]	@ 0x22
  int nbytes=nbits/8;
    2a70:	asrs	r5, r5, #3
  wav_hdr.nChannels=nchan;
    2a72:	strh	r6, [r4, #22]
  memcpy(wav_hdr.wId,"WAVE",4);
    2a74:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    2a76:	add.w	r3, r3, #3674210304	@ 0xdb000000
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2a7a:	muls	r0, r5
  wav_hdr.nBlockAlign=nchan*nbytes;
    2a7c:	smulbb	r5, r5, r6
  memcpy(wav_hdr.fId,"fmt ",4);
    2a80:	add.w	r3, r3, #1974272	@ 0x1e2000
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2a84:	muls	r1, r0

  uint32_t tt=millis();
  strcpy(&wav_hdr.info[0], MAGIC);
    2a86:	add.w	r0, r4, #44	@ 0x2c
  memcpy(wav_hdr.fId,"fmt ",4);
    2a8a:	addw	r3, r3, #3087	@ 0xc0f
  wav_hdr.nBlockAlign=nchan*nbytes;
    2a8e:	strh	r5, [r4, #32]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2a90:	str	r1, [r4, #28]
  memcpy(wav_hdr.fId,"fmt ",4);
    2a92:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    2a94:	add.w	r3, r3, #1090519040	@ 0x41000000
  strcpy(&wav_hdr.info[0], MAGIC);
    2a98:	ldr	r1, [pc, #132]	@ (2b20 <wavHeaderInit(long, long, long, int)+0xd0>)
  memcpy(wav_hdr.dId,"data",4);
    2a9a:	subw	r3, r3, #3074	@ 0xc02
    2a9e:	str.w	r3, [r4, #504]	@ 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    2aa2:	add.w	r3, r3, #218107136	@ 0xd000d00
    2aa6:	add.w	r3, r3, #15859712	@ 0xf20000
    2aaa:	adds	r3, #5
    2aac:	str	r3, [r4, #36]	@ 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    2aae:	mov.w	r3, #504	@ 0x1f8
    2ab2:	str	r3, [r4, #4]
  wav_hdr.fLen = 0x10;
    2ab4:	movs	r3, #16
    2ab6:	str	r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
    2ab8:	mov.w	r3, #460	@ 0x1cc
    2abc:	str	r3, [r4, #40]	@ 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    2abe:	movs	r3, #0
    2ac0:	str.w	r3, [r4, #508]	@ 0x1fc
  wav_hdr.nFormatTag=1;
    2ac4:	movs	r3, #1
    2ac6:	strh	r3, [r4, #20]
    2ac8:	ldr	r3, [pc, #88]	@ (2b24 <wavHeaderInit(long, long, long, int)+0xd4>)
    2aca:	ldr	r5, [r3, #0]
  strcpy(&wav_hdr.info[0], MAGIC);
    2acc:	bl	edce <strcpy>
  strcpy(&wav_hdr.info[4], timeStamp());
    2ad0:	bl	2a0c <timeStamp()>
    2ad4:	mov	r1, r0
    2ad6:	add.w	r0, r4, #48	@ 0x30
    2ada:	bl	edce <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    2ade:	mov	r2, r7
    2ae0:	ldr	r1, [pc, #68]	@ (2b28 <wavHeaderInit(long, long, long, int)+0xd8>)
    2ae2:	add.w	r0, r4, #64	@ 0x40
    2ae6:	bl	e9f4 <siprintf>
  memcpy(&wav_hdr.info[32], &tt,4);
  memcpy(&wav_hdr.info[36], getStore(),16*2);
    2aea:	adds	r4, #80	@ 0x50
  memcpy(&wav_hdr.info[32], &tt,4);
    2aec:	str.w	r5, [r4, #-4]
  memcpy(&wav_hdr.info[36], getStore(),16*2);
    2af0:	bl	283c <getStore()>
    2af4:	mov	r3, r0
    2af6:	add.w	r5, r0, #32
    2afa:	ldr	r0, [r3, #0]
    2afc:	adds	r3, #8
    2afe:	ldr.w	r1, [r3, #-4]
    2b02:	mov	r2, r4
    2b04:	cmp	r3, r5
    2b06:	stmia	r2!, {r0, r1}
    2b08:	mov	r4, r2
    2b0a:	bne.n	2afa <wavHeaderInit(long, long, long, int)+0xaa>
  strcpy(&wav_hdr.info[68]," end");
    2b0c:	ldr	r1, [pc, #28]	@ (2b2c <wavHeaderInit(long, long, long, int)+0xdc>)
    2b0e:	ldr	r0, [pc, #32]	@ (2b30 <wavHeaderInit(long, long, long, int)+0xe0>)
    2b10:	bl	edce <strcpy>

  return (char *)&wav_hdr;
}
    2b14:	ldr	r0, [pc, #0]	@ (2b18 <wavHeaderInit(long, long, long, int)+0xc8>)
    2b16:	pop	{r3, r4, r5, r6, r7, pc}
    2b18:	.word	0x200118e4
    2b1c:	.word	0x46464952
    2b20:	.word	0x20001296
    2b24:	.word	0x20012864
    2b28:	.word	0x2000129b
    2b2c:	.word	0x200012a0
    2b30:	.word	0x20011954

00002b34 <wavHeaderUpdate(long)>:

char * wavHeaderUpdate(int32_t nbytes)
{
    2b34:	mov	r3, r0
  wav_hdr.dLen = nbytes;
    2b36:	ldr	r0, [pc, #12]	@ (2b44 <wavHeaderUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    2b38:	ldr	r2, [r0, #4]
  wav_hdr.dLen = nbytes;
    2b3a:	str.w	r3, [r0, #508]	@ 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    2b3e:	add	r2, r3
    2b40:	str	r2, [r0, #4]
  return (char *)&wav_hdr;
}
    2b42:	bx	lr
    2b44:	.word	0x200118e4

00002b48 <wavHeaderWrite(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    2b48:	ldr	r3, [pc, #76]	@ (2b98 <wavHeaderWrite(char*)+0x50>)
    2b4a:	ldr	r2, [r3, #72]	@ 0x48

void wavHeaderWrite(char * wav_hdr) 
{ 
    2b4c:	push	{r4, r5, r6, lr}
    2b4e:	mov	r6, r0
    2b50:	cbz	r2, 2b86 <wavHeaderWrite(char*)+0x3e>
    2b52:	ldr	r4, [r2, #20]
    2b54:	movs	r5, #0
  uint64_t fpos;
  fpos = file.curPosition();
  Serial.printf("\n fpos=%d ",fpos);
    2b56:	mov	r2, r4
    2b58:	mov	r3, r5
    2b5a:	ldr	r1, [pc, #64]	@ (2b9c <wavHeaderWrite(char*)+0x54>)
    2b5c:	ldr	r0, [pc, #64]	@ (2ba0 <wavHeaderWrite(char*)+0x58>)
    2b5e:	bl	c824 <Print::printf(char const*, ...)>
  file.seekSet(0);
    2b62:	movs	r3, #0
    2b64:	movs	r2, #0
    2b66:	ldr	r0, [pc, #60]	@ (2ba4 <wavHeaderWrite(char*)+0x5c>)
    2b68:	bl	29ae <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write((const uint8_t*)wav_hdr,512);
    2b6c:	mov.w	r2, #512	@ 0x200
    2b70:	mov	r1, r6
    2b72:	ldr	r0, [pc, #36]	@ (2b98 <wavHeaderWrite(char*)+0x50>)
    2b74:	bl	1f0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>
  file.seekSet(fpos);
    2b78:	mov	r2, r4
    2b7a:	mov	r3, r5
    2b7c:	ldr	r0, [pc, #36]	@ (2ba4 <wavHeaderWrite(char*)+0x5c>)
}
    2b7e:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    2b82:	b.w	29ae <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    2b86:	ldr	r3, [r3, #76]	@ 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    2b88:	cbz	r3, 2b90 <wavHeaderWrite(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    2b8a:	ldrd	r4, r5, [r3]
    2b8e:	b.n	2b56 <wavHeaderWrite(char*)+0xe>
    2b90:	mov	r4, r3
    2b92:	mov	r5, r3
    2b94:	b.n	2b56 <wavHeaderWrite(char*)+0xe>
    2b96:	nop
    2b98:	.word	0x200120a8
    2b9c:	.word	0x200012a5
    2ba0:	.word	0x20001e58
    2ba4:	.word	0x200120b8

00002ba8 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
    2ba8:	push	{r4, lr}
    2baa:	sub	sp, #32
    2bac:	mov	r4, r0
     * @brief Make file header
     * @param header is pointer to header
     * 
     */
    datetime_t t;
    rtc_get_datetime(&t);
    2bae:	add	r0, sp, #24
    2bb0:	bl	3c7e <rtc_get_datetime(datetime_t*)>

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    2bb4:	ldrsb.w	r3, [sp, #31]
    2bb8:	ldr	r2, [pc, #156]	@ (2c58 <makeHeader(long*)+0xb0>)
    2bba:	mov	r0, r4
    2bbc:	str	r3, [sp, #16]
    2bbe:	ldrsb.w	r3, [sp, #30]
    2bc2:	ldr	r1, [pc, #152]	@ (2c5c <makeHeader(long*)+0xb4>)
    2bc4:	str	r3, [sp, #12]
    2bc6:	ldrsb.w	r3, [sp, #29]
    2bca:	str	r3, [sp, #8]
    2bcc:	ldrsb.w	r3, [sp, #27]
    2bd0:	str	r3, [sp, #4]
    2bd2:	ldrsb.w	r3, [sp, #26]
    2bd6:	str	r3, [sp, #0]
    2bd8:	ldrsh.w	r3, [sp, #24]
    2bdc:	bl	e9f4 <siprintf>
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    header[5] = 20;          // SW version
    2be0:	movs	r3, #20
    2be2:	str	r3, [r4, #20]
    header[6] = SerNum;      // serial number
    2be4:	ldr	r3, [pc, #120]	@ (2c60 <makeHeader(long*)+0xb8>)
    2be6:	ldr	r3, [r3, #0]
    2be8:	str	r3, [r4, #24]
    header[7] = fsamp;
    2bea:	ldr	r3, [pc, #120]	@ (2c64 <makeHeader(long*)+0xbc>)
    2bec:	ldr	r3, [r3, #0]
    2bee:	str	r3, [r4, #28]
    header[8] = NCHAN_ACQ;
    2bf0:	movs	r3, #1
    2bf2:	str	r3, [r4, #32]
    header[9] = t_acq;
    2bf4:	ldr	r3, [pc, #112]	@ (2c68 <makeHeader(long*)+0xc0>)
    2bf6:	ldrh	r3, [r3, #0]
    2bf8:	uxth	r3, r3
    2bfa:	str	r3, [r4, #36]	@ 0x24
    header[10] = t_on;
    2bfc:	ldr	r3, [pc, #108]	@ (2c6c <makeHeader(long*)+0xc4>)
    2bfe:	ldrh	r3, [r3, #0]
    2c00:	uxth	r3, r3
    2c02:	str	r3, [r4, #40]	@ 0x28
    header[11] = t_rep;
    2c04:	ldr	r3, [pc, #104]	@ (2c70 <makeHeader(long*)+0xc8>)
    2c06:	ldrh	r3, [r3, #0]
    2c08:	uxth	r3, r3
    2c0a:	str	r3, [r4, #44]	@ 0x2c
    header[12] = proc;
    2c0c:	ldr	r3, [pc, #100]	@ (2c74 <makeHeader(long*)+0xcc>)
    2c0e:	ldrh	r3, [r3, #0]
    2c10:	sxth	r3, r3
    2c12:	str	r3, [r4, #48]	@ 0x30
    header[13] = shift;
    2c14:	ldr	r3, [pc, #96]	@ (2c78 <makeHeader(long*)+0xd0>)
    2c16:	ldrh	r3, [r3, #0]
    2c18:	sxth	r3, r3
    2c1a:	str	r3, [r4, #52]	@ 0x34
    header[14] = again;
    2c1c:	ldr	r3, [pc, #92]	@ (2c7c <makeHeader(long*)+0xd4>)
    2c1e:	ldrh	r3, [r3, #0]
    2c20:	sxth	r3, r3
    2c22:	str	r3, [r4, #56]	@ 0x38
    header[15] = dgain;
    2c24:	ldr	r3, [pc, #88]	@ (2c80 <makeHeader(long*)+0xd8>)
    2c26:	ldrh	r3, [r3, #0]
    2c28:	sxth	r3, r3
    2c2a:	str	r3, [r4, #60]	@ 0x3c
    2c2c:	ldr	r3, [pc, #84]	@ (2c84 <makeHeader(long*)+0xdc>)
    2c2e:	ldr	r3, [r3, #0]
    header[16] = millis();
    2c30:	str	r3, [r4, #64]	@ 0x40
    memcpy(&header[20], getStore(),16*2);
    2c32:	bl	283c <getStore()>
    2c36:	add.w	r3, r4, #80	@ 0x50
    2c3a:	add.w	r2, r0, #32
    2c3e:	ldr.w	r1, [r0], #4
    2c42:	cmp	r0, r2
    2c44:	str.w	r1, [r3], #4
    2c48:	bne.n	2c3e <makeHeader(long*)+0x96>

    header[127]=0x55555555;
    2c4a:	mov.w	r3, #1431655765	@ 0x55555555
    return 1;
}
    2c4e:	movs	r0, #1
    header[127]=0x55555555;
    2c50:	str.w	r3, [r4, #508]	@ 0x1fc
}
    2c54:	add	sp, #32
    2c56:	pop	{r4, pc}
    2c58:	.word	0x20001296
    2c5c:	.word	0x200012b0
    2c60:	.word	0x200082b8
    2c64:	.word	0x200023fc
    2c68:	.word	0x2000241c
    2c6c:	.word	0x2000241e
    2c70:	.word	0x20012958
    2c74:	.word	0x200128b4
    2c78:	.word	0x2000241a
    2c7c:	.word	0x20002410
    2c80:	.word	0x200128ac
    2c84:	.word	0x20012864

00002c88 <checkEndOfFile(short)>:

int16_t checkEndOfFile(int16_t state)
{ 
  static uint32_t dta=0;

  if(state==RUNNING)
    2c88:	cmp	r0, #2
{ 
    2c8a:	push	{r4, lr}
    2c8c:	mov	r4, r0
  if(state==RUNNING)
    2c8e:	bne.n	2d3a <checkEndOfFile(short)+0xb2>
  {
    uint32_t tt = rtc_get();
    2c90:	bl	ba44 <rtc_get>
    //
    uint32_t dt1 = tt % t_acq;
    2c94:	ldr	r3, [pc, #192]	@ (2d58 <checkEndOfFile(short)+0xd0>)
    2c96:	ldrh	r2, [r3, #0]
    2c98:	uxth	r2, r2
    2c9a:	udiv	r3, r0, r2
    2c9e:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2ca2:	ldr	r2, [pc, #184]	@ (2d5c <checkEndOfFile(short)+0xd4>)
    2ca4:	ldr	r1, [r2, #0]
    dta = dt1;
    2ca6:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2ca8:	cmp	r3, r1
    2caa:	bcs.n	2d3a <checkEndOfFile(short)+0xb2>
    //
    // if file should be closed
    // check also if it should then hibernate 
    if(state == DOCLOSE)                // in case of DOCLOSE
    {
      if(t_rep>t_on)                      // and if foreseen  check for hibernation
    2cac:	ldr	r4, [pc, #176]	@ (2d60 <checkEndOfFile(short)+0xd8>)
    2cae:	ldr	r1, [pc, #180]	@ (2d64 <checkEndOfFile(short)+0xdc>)
    2cb0:	ldrh	r2, [r4, #0]
    2cb2:	ldrh	r3, [r1, #0]
    2cb4:	uxth	r2, r2
    2cb6:	uxth	r3, r3
    2cb8:	cmp	r2, r3
    2cba:	bhi.n	2d3e <checkEndOfFile(short)+0xb6>
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
      }
    }
    if(state == DOCLOSE)                // in case of DOCLOSE
    {
      if(d_rep>d_on)                      // and if foreseen  check for hibernation
    2cbc:	ldr	r4, [pc, #168]	@ (2d68 <checkEndOfFile(short)+0xe0>)
    2cbe:	ldr	r1, [pc, #172]	@ (2d6c <checkEndOfFile(short)+0xe4>)
    2cc0:	ldrh	r2, [r4, #0]
    2cc2:	ldrh	r3, [r1, #0]
    2cc4:	uxth	r2, r2
    2cc6:	uxth	r3, r3
    2cc8:	cmp	r2, r3
    2cca:	bls.n	2ce6 <checkEndOfFile(short)+0x5e>
      { int32_t dd=tt/(24*3600);
    2ccc:	ldr	r3, [pc, #160]	@ (2d70 <checkEndOfFile(short)+0xe8>)
        uint32_t dd2 = (dd % d_rep);
    2cce:	ldrh	r2, [r4, #0]
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    2cd0:	ldrh	r1, [r1, #0]
        uint32_t dd2 = (dd % d_rep);
    2cd2:	uxth	r2, r2
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    2cd4:	uxth	r1, r1
      { int32_t dd=tt/(24*3600);
    2cd6:	udiv	r3, r0, r3
        uint32_t dd2 = (dd % d_rep);
    2cda:	udiv	r4, r3, r2
    2cde:	mls	r3, r2, r4, r3
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    2ce2:	cmp	r3, r1
    2ce4:	bcs.n	2d52 <checkEndOfFile(short)+0xca>
      }
    }
    if(state == DOCLOSE)                // in case of DOCLOSE
    {
      uint32_t hh=(tt%(24*3600)/3600);
    2ce6:	ldr	r2, [pc, #136]	@ (2d70 <checkEndOfFile(short)+0xe8>)
    2ce8:	udiv	r3, r0, r2
    2cec:	mls	r3, r2, r3, r0
    2cf0:	mov.w	r2, #3600	@ 0xe10
    2cf4:	udiv	r3, r3, r2
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    2cf8:	ldr	r2, [pc, #120]	@ (2d74 <checkEndOfFile(short)+0xec>)
    2cfa:	ldrh	r2, [r2, #0]
    2cfc:	uxth	r2, r2
    2cfe:	cmp	r3, r2
    2d00:	bcc.n	2d0c <checkEndOfFile(short)+0x84>
    2d02:	ldr	r2, [pc, #116]	@ (2d78 <checkEndOfFile(short)+0xf0>)
    2d04:	ldrh	r2, [r2, #0]
    2d06:	uxth	r2, r2
    2d08:	cmp	r3, r2
    2d0a:	bcc.n	2d20 <checkEndOfFile(short)+0x98>
    2d0c:	ldr	r2, [pc, #108]	@ (2d7c <checkEndOfFile(short)+0xf4>)
    2d0e:	ldrh	r2, [r2, #0]
    2d10:	uxth	r2, r2
    2d12:	cmp	r3, r2
    2d14:	bcc.n	2d52 <checkEndOfFile(short)+0xca>
    2d16:	ldr	r2, [pc, #104]	@ (2d80 <checkEndOfFile(short)+0xf8>)
    2d18:	ldrh	r2, [r2, #0]
    2d1a:	uxth	r2, r2
    2d1c:	cmp	r3, r2
    2d1e:	bcs.n	2d52 <checkEndOfFile(short)+0xca>
      }
    }
    if(state == DOCLOSE)                // in case of DOCLOSE
    {
      uint32_t dd=tt/(24*3600);
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    2d20:	ldr	r3, [pc, #96]	@ (2d84 <checkEndOfFile(short)+0xfc>)
    2d22:	ldrh	r4, [r3, #0]
      uint32_t dd=tt/(24*3600);
    2d24:	ldr	r3, [pc, #72]	@ (2d70 <checkEndOfFile(short)+0xe8>)
    2d26:	udiv	r0, r0, r3
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    2d2a:	movw	r3, #15000	@ 0x3a98
    2d2e:	sxtah	r4, r3, r4
    2d32:	cmp	r0, r4
    2d34:	ite	cc
    2d36:	movcc	r4, #4
    2d38:	movcs	r4, #3
    }
  }
  return state;

}
    2d3a:	mov	r0, r4
    2d3c:	pop	{r4, pc}
        uint32_t dt2 = (tt % t_rep);
    2d3e:	ldrh	r3, [r4, #0]
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2d40:	ldrh	r2, [r1, #0]
        uint32_t dt2 = (tt % t_rep);
    2d42:	uxth	r3, r3
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2d44:	uxth	r2, r2
        uint32_t dt2 = (tt % t_rep);
    2d46:	udiv	r1, r0, r3
    2d4a:	mls	r3, r3, r1, r0
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2d4e:	cmp	r3, r2
    2d50:	bcc.n	2cbc <checkEndOfFile(short)+0x34>
      if(dd<(uint32_t)(d_0+D_REF)) state=DOHIBERNATE;     // we are too early
    2d52:	movs	r4, #4
    2d54:	b.n	2d3a <checkEndOfFile(short)+0xb2>
    2d56:	nop
    2d58:	.word	0x2000241c
    2d5c:	.word	0x20011d2c
    2d60:	.word	0x20012958
    2d64:	.word	0x2000241e
    2d68:	.word	0x200128aa
    2d6c:	.word	0x20002412
    2d70:	.word	0x00015180
    2d74:	.word	0x200128b0
    2d78:	.word	0x20002414
    2d7c:	.word	0x20002416
    2d80:	.word	0x20002418
    2d84:	.word	0x200128a8

00002d88 <newFolder(int)>:
    return 0;
}

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    2d88:	ldr	r3, [pc, #12]	@ (2d98 <newFolder(int)+0x10>)
    2d8a:	ldr	r2, [r3, #0]
    2d8c:	cmp	r2, r0
  d0=d;
    2d8e:	itte	ne
    2d90:	strne	r0, [r3, #0]
  return 1;
    2d92:	movne	r0, #1
  if(d==d0) return 0; // same day
    2d94:	moveq	r0, #0
}
    2d96:	bx	lr
    2d98:	.word	0x20002228

00002d9c <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    2d9c:	push	{r4, lr}
    2d9e:	sub	sp, #24
    2da0:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2da2:	add	r0, sp, #16
    2da4:	bl	3c7e <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    2da8:	ldrsb.w	r1, [sp, #21]
    2dac:	mov	r0, r1
    2dae:	bl	2d88 <newFolder(int)>
    2db2:	cbz	r0, 2dee <newDirectory(char*)+0x52>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    2db4:	ldrsb.w	r3, [sp, #19]
    2db8:	mov	r0, r4
    2dba:	ldr	r2, [pc, #56]	@ (2df4 <newDirectory(char*)+0x58>)
    2dbc:	str	r3, [sp, #8]
    2dbe:	ldrsb.w	r3, [sp, #18]
    2dc2:	str	r1, [sp, #12]
    2dc4:	str	r3, [sp, #4]
    2dc6:	ldrsh.w	r3, [sp, #16]
    2dca:	ldr	r1, [pc, #44]	@ (2df8 <newDirectory(char*)+0x5c>)
    2dcc:	str	r3, [sp, #0]
    2dce:	ldr	r3, [pc, #44]	@ (2dfc <newDirectory(char*)+0x60>)
    2dd0:	ldr	r3, [r3, #0]
    2dd2:	bl	e9f4 <siprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    2dd6:	ldr	r0, [pc, #40]	@ (2e00 <newDirectory(char*)+0x64>)
    2dd8:	bl	c7ec <Print::println()>
    2ddc:	ldr	r1, [pc, #36]	@ (2e04 <newDirectory(char*)+0x68>)
    2dde:	ldr	r0, [pc, #32]	@ (2e00 <newDirectory(char*)+0x64>)
    2de0:	bl	29f6 <Print::print(char const*) [clone .isra.0]>
    2de4:	ldr	r0, [pc, #24]	@ (2e00 <newDirectory(char*)+0x64>)
    2de6:	mov	r1, r4
    2de8:	bl	29f6 <Print::print(char const*) [clone .isra.0]>
          return 1;   // have new directory
    2dec:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    2dee:	add	sp, #24
    2df0:	pop	{r4, pc}
    2df2:	nop
    2df4:	.word	0x20001413
    2df8:	.word	0x200012cc
    2dfc:	.word	0x200082b8
    2e00:	.word	0x20001e58
    2e04:	.word	0x20000f1f

00002e08 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    2e08:	push	{r4, r5, r6, r7, lr}
    2e0a:	sub	sp, #36	@ 0x24
    2e0c:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2e0e:	add	r0, sp, #24
    2e10:	bl	3c7e <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    2e14:	ldr	r3, [pc, #104]	@ (2e80 <newFileName(char*)+0x78>)
    2e16:	ldrsb.w	r7, [sp, #31]
    2e1a:	ldrh	r2, [r3, #0]
    2e1c:	ldrsb.w	r6, [sp, #30]
    2e20:	ldrsb.w	r5, [sp, #29]
    2e24:	sxth	r2, r2
    2e26:	ldrsb.w	r0, [sp, #27]
    2e2a:	ldrsb.w	r1, [sp, #26]
    2e2e:	ldrsh.w	r3, [sp, #24]
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e32:	str	r1, [sp, #0]
    2e34:	strd	r6, r7, [sp, #12]
    2e38:	strd	r0, r5, [sp, #4]
    if(proc==0)
    2e3c:	cbnz	r2, 2e78 <newFileName(char*)+0x70>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e3e:	ldr	r2, [pc, #68]	@ (2e84 <newFileName(char*)+0x7c>)
    2e40:	ldr	r1, [pc, #68]	@ (2e88 <newFileName(char*)+0x80>)
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e42:	mov	r0, r4
    2e44:	bl	e9f4 <siprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    2e48:	ldr	r0, [pc, #64]	@ (2e8c <newFileName(char*)+0x84>)
    2e4a:	bl	c7ec <Print::println()>
    2e4e:	ldr	r1, [pc, #64]	@ (2e90 <newFileName(char*)+0x88>)
    2e50:	ldr	r0, [pc, #56]	@ (2e8c <newFileName(char*)+0x84>)
    2e52:	bl	29f6 <Print::print(char const*) [clone .isra.0]>
    2e56:	mov	r1, r4
    2e58:	ldr	r0, [pc, #48]	@ (2e8c <newFileName(char*)+0x84>)
    2e5a:	bl	29f6 <Print::print(char const*) [clone .isra.0]>
    Serial.print(" "); Serial.print(micros());
    2e5e:	ldr	r1, [pc, #52]	@ (2e94 <newFileName(char*)+0x8c>)
    2e60:	ldr	r0, [pc, #40]	@ (2e8c <newFileName(char*)+0x84>)
    2e62:	bl	29f6 <Print::print(char const*) [clone .isra.0]>
    2e66:	bl	b7fc <micros>
    2e6a:	mov	r1, r0
    2e6c:	ldr	r0, [pc, #28]	@ (2e8c <newFileName(char*)+0x84>)
    2e6e:	bl	29ce <Print::print(unsigned long) [clone .isra.0]>

    return 1;
}
    2e72:	movs	r0, #1
    2e74:	add	sp, #36	@ 0x24
    2e76:	pop	{r4, r5, r6, r7, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e78:	ldr	r2, [pc, #8]	@ (2e84 <newFileName(char*)+0x7c>)
    2e7a:	ldr	r1, [pc, #28]	@ (2e98 <newFileName(char*)+0x90>)
    2e7c:	b.n	2e42 <newFileName(char*)+0x3a>
    2e7e:	nop
    2e80:	.word	0x200128b4
    2e84:	.word	0x20001c7c
    2e88:	.word	0x200012e7
    2e8c:	.word	0x20001e58
    2e90:	.word	0x20000f1f
    2e94:	.word	0x20000f27
    2e98:	.word	0x20001307

00002e9c <getAlarmTime(unsigned long)>:
    24 hour aquisition is ensured by t_1=0, t_2=12, t_3=12, t_4=24

    wakeup time is estimated by getAlarmTime
*/
uint32_t getAlarmTime(uint32_t secs)
{   // estimate the wakup-time in seconds 
    2e9c:	push	{r4, r5, r6, r7, lr}
    // input: actual time in s
    // output: next wakup time in s
    // wakeup is in absolute seconds
    // 
    // secs is actual time in s
    uint32_t dd = secs/(24*3600);       // full days so far
    2e9e:	ldr	r5, [pc, #220]	@ (2f7c <getAlarmTime(unsigned long)+0xe0>)
    uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    2ea0:	mov.w	r2, #3600	@ 0xe10
    { // we are too early
      secs=(d_x)*(24*3600);
      return secs;
    }
    //
    if(d_rep> d_on)
    2ea4:	ldr	r7, [pc, #216]	@ (2f80 <getAlarmTime(unsigned long)+0xe4>)
    uint32_t dd = secs/(24*3600);       // full days so far
    2ea6:	udiv	r4, r0, r5
    uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    2eaa:	mls	r3, r5, r4, r0
    2eae:	udiv	r3, r3, r2
    uint32_t d_x = (d_0+D_REF);
    2eb2:	ldr	r2, [pc, #208]	@ (2f84 <getAlarmTime(unsigned long)+0xe8>)
    2eb4:	ldrh	r2, [r2, #0]
    if(d_rep> d_on)
    2eb6:	ldr	r2, [pc, #208]	@ (2f88 <getAlarmTime(unsigned long)+0xec>)
    2eb8:	ldrh	r6, [r2, #0]
    2eba:	ldrh	r1, [r7, #0]
    2ebc:	uxth	r6, r6
    2ebe:	uxth	r1, r1
    2ec0:	cmp	r6, r1
    2ec2:	bls.n	2eec <getAlarmTime(unsigned long)+0x50>
    {  // check if day is good for acqisition
      if(dd % d_rep >=d_on)
    2ec4:	ldrh	r1, [r2, #0]
    2ec6:	ldrh	r6, [r7, #0]
    2ec8:	uxth	r1, r1
    2eca:	uxth	r6, r6
    2ecc:	udiv	r7, r4, r1
    2ed0:	mls	r1, r1, r7, r4
    2ed4:	cmp	r1, r6
    2ed6:	bcc.n	2eec <getAlarmTime(unsigned long)+0x50>
      {
        secs = ((dd/d_rep)+1)*d_rep*(24*3600);  
    2ed8:	ldrh	r3, [r2, #0]
    2eda:	ldrh	r0, [r2, #0]
    2edc:	uxth	r3, r3
    2ede:	uxth	r0, r0
    2ee0:	udiv	r3, r4, r3
    2ee4:	mla	r0, r3, r0, r0
    2ee8:	muls	r0, r5
      dd++;
      secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    }
    //
    return secs;
}
    2eea:	pop	{r4, r5, r6, r7, pc}
    if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)) )
    2eec:	ldr	r2, [pc, #156]	@ (2f8c <getAlarmTime(unsigned long)+0xf0>)
    2eee:	ldrh	r1, [r2, #0]
    2ef0:	uxth	r1, r1
    2ef2:	cmp	r1, r3
    2ef4:	bhi.n	2f00 <getAlarmTime(unsigned long)+0x64>
    2ef6:	ldr	r1, [pc, #152]	@ (2f90 <getAlarmTime(unsigned long)+0xf4>)
    2ef8:	ldrh	r1, [r1, #0]
    2efa:	uxth	r1, r1
    2efc:	cmp	r1, r3
    2efe:	bhi.n	2f14 <getAlarmTime(unsigned long)+0x78>
    2f00:	ldr	r1, [pc, #144]	@ (2f94 <getAlarmTime(unsigned long)+0xf8>)
    2f02:	ldrh	r1, [r1, #0]
    2f04:	uxth	r1, r1
    2f06:	cmp	r1, r3
    2f08:	bhi.n	2f36 <getAlarmTime(unsigned long)+0x9a>
    2f0a:	ldr	r1, [pc, #140]	@ (2f98 <getAlarmTime(unsigned long)+0xfc>)
    2f0c:	ldrh	r1, [r1, #0]
    2f0e:	uxth	r1, r1
    2f10:	cmp	r1, r3
    2f12:	bls.n	2f36 <getAlarmTime(unsigned long)+0x9a>
      if(t_rep>t_on)
    2f14:	ldr	r1, [pc, #132]	@ (2f9c <getAlarmTime(unsigned long)+0x100>)
    2f16:	ldr	r5, [pc, #136]	@ (2fa0 <getAlarmTime(unsigned long)+0x104>)
    2f18:	ldrh	r6, [r1, #0]
    2f1a:	ldrh	r5, [r5, #0]
    2f1c:	uxth	r6, r6
    2f1e:	uxth	r5, r5
    2f20:	cmp	r6, r5
    2f22:	bls.n	2f36 <getAlarmTime(unsigned long)+0x9a>
        secs = ((secs/t_rep)+1)*t_rep;
    2f24:	ldrh	r3, [r1, #0]
    2f26:	uxth	r3, r3
    2f28:	udiv	r3, r0, r3
    2f2c:	ldrh	r0, [r1, #0]
    2f2e:	uxth	r0, r0
    2f30:	mla	r0, r3, r0, r0
        return secs;
    2f34:	b.n	2eea <getAlarmTime(unsigned long)+0x4e>
    if (hh<h_1)                // from mid-night to h_1 
    2f36:	ldrh	r1, [r2, #0]
    2f38:	uxth	r1, r1
    2f3a:	cmp	r1, r3
    2f3c:	bls.n	2f50 <getAlarmTime(unsigned long)+0xb4>
      secs = (dd*24+ h_1)*3600;     // next time is h1
    2f3e:	ldrh	r0, [r2, #0]
      secs = (dd*24+h_3)*3600;      // next time is h3
    2f40:	movs	r3, #24
    2f42:	muls	r3, r4
      secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    2f44:	uxtah	r0, r3, r0
    2f48:	mov.w	r3, #3600	@ 0xe10
    2f4c:	muls	r0, r3
    2f4e:	b.n	2eea <getAlarmTime(unsigned long)+0x4e>
    else if ((hh>=h_2) && (hh<h_3)) // between the two recording periods
    2f50:	ldr	r1, [pc, #60]	@ (2f90 <getAlarmTime(unsigned long)+0xf4>)
    2f52:	ldrh	r1, [r1, #0]
    2f54:	uxth	r1, r1
    2f56:	cmp	r1, r3
    2f58:	bhi.n	2f64 <getAlarmTime(unsigned long)+0xc8>
    2f5a:	ldr	r5, [pc, #56]	@ (2f94 <getAlarmTime(unsigned long)+0xf8>)
    2f5c:	ldrh	r1, [r5, #0]
    2f5e:	uxth	r1, r1
    2f60:	cmp	r1, r3
    2f62:	bhi.n	2f78 <getAlarmTime(unsigned long)+0xdc>
    else if (hh>=h_4) // after the second recording period (goes into next day)
    2f64:	ldr	r1, [pc, #48]	@ (2f98 <getAlarmTime(unsigned long)+0xfc>)
    2f66:	ldrh	r1, [r1, #0]
    2f68:	uxth	r1, r1
    2f6a:	cmp	r1, r3
    2f6c:	bhi.n	2eea <getAlarmTime(unsigned long)+0x4e>
      secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    2f6e:	movs	r3, #24
    2f70:	ldrh	r0, [r2, #0]
    2f72:	mla	r3, r4, r3, r3
    2f76:	b.n	2f44 <getAlarmTime(unsigned long)+0xa8>
      secs = (dd*24+h_3)*3600;      // next time is h3
    2f78:	ldrh	r0, [r5, #0]
    2f7a:	b.n	2f40 <getAlarmTime(unsigned long)+0xa4>
    2f7c:	.word	0x00015180
    2f80:	.word	0x20002412
    2f84:	.word	0x200128a8
    2f88:	.word	0x200128aa
    2f8c:	.word	0x200128b0
    2f90:	.word	0x20002414
    2f94:	.word	0x20002416
    2f98:	.word	0x20002418
    2f9c:	.word	0x20012958
    2fa0:	.word	0x2000241e

00002fa4 <powerDown()>:

void powerDown(void)
{
  SNVS_LPCR |= (1 << 6); // turn off power
    2fa4:	ldr	r2, [pc, #12]	@ (2fb4 <powerDown()+0x10>)
    2fa6:	ldr	r3, [r2, #56]	@ 0x38
    2fa8:	orr.w	r3, r3, #64	@ 0x40
    2fac:	str	r3, [r2, #56]	@ 0x38
  while (1) asm("wfi");      
    2fae:	wfi
    2fb0:	b.n	2fae <powerDown()+0xa>
    2fb2:	nop
    2fb4:	.word	0x400d4000

00002fb8 <do_hibernate()>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(void)
{
    uint32_t tmp = SNVS_LPCR;   // save control register
    2fb8:	ldr	r3, [pc, #132]	@ (3040 <do_hibernate()+0x88>)
{
    2fba:	push	{r4, r5, r6, lr}
    uint32_t tmp = SNVS_LPCR;   // save control register
    2fbc:	ldr	r6, [r3, #56]	@ 0x38

    SNVS_LPSR |= 1;
    2fbe:	ldr	r2, [r3, #76]	@ 0x4c
    2fc0:	orr.w	r2, r2, #1
    2fc4:	str	r2, [r3, #76]	@ 0x4c
    asm volatile("DSB");
    2fc6:	dsb	sy

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2fca:	ldr	r2, [r3, #56]	@ 0x38
    2fcc:	bic.w	r2, r2, #2
    2fd0:	str	r2, [r3, #56]	@ 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2fd2:	ldr	r2, [r3, #56]	@ 0x38
    2fd4:	ands.w	r2, r2, #2
    2fd8:	bne.n	2fd2 <do_hibernate()+0x1a>

    // clear alarm value
    SNVS_LPTAR = 0;
    2fda:	str	r2, [r3, #88]	@ 0x58
    while (SNVS_LPTAR != 0);
    2fdc:	ldr	r2, [r3, #88]	@ 0x58
    2fde:	cmp	r2, #0
    2fe0:	bne.n	2fdc <do_hibernate()+0x24>

    __disable_irq();
    2fe2:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    2fe4:	ldr	r5, [pc, #88]	@ (3040 <do_hibernate()+0x88>)
    2fe6:	ldr	r3, [r5, #80]	@ 0x50
      lsb = SNVS_LPSRTCLR;
    2fe8:	ldr	r4, [r5, #84]	@ 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    2fea:	ldr	r1, [r5, #84]	@ 0x54
    2fec:	ldr	r2, [r5, #80]	@ 0x50
    2fee:	cmp	r1, r4
    2ff0:	bne.n	2fe6 <do_hibernate()+0x2e>
    2ff2:	cmp	r2, r3
    2ff4:	bne.n	2fe6 <do_hibernate()+0x2e>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2ff6:	lsrs	r4, r4, #15

    //set alarm
    Serial.print(secs); Serial.print(" -> ");
    2ff8:	ldr	r0, [pc, #72]	@ (3044 <do_hibernate()+0x8c>)
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2ffa:	orr.w	r4, r4, r3, lsl #17
    Serial.print(secs); Serial.print(" -> ");
    2ffe:	mov	r1, r4
    3000:	bl	29ce <Print::print(unsigned long) [clone .isra.0]>
    3004:	ldr	r1, [pc, #64]	@ (3048 <do_hibernate()+0x90>)
    3006:	ldr	r0, [pc, #60]	@ (3044 <do_hibernate()+0x8c>)
    3008:	bl	29f6 <Print::print(char const*) [clone .isra.0]>
    secs = getAlarmTime(secs);
    300c:	mov	r0, r4
    300e:	bl	2e9c <getAlarmTime(unsigned long)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    3012:	mov	r1, r0
    3014:	mov	r4, r0
    3016:	ldr	r0, [pc, #44]	@ (3044 <do_hibernate()+0x8c>)
    3018:	bl	29ce <Print::print(unsigned long) [clone .isra.0]>
    301c:	ldr	r0, [pc, #36]	@ (3044 <do_hibernate()+0x8c>)
    301e:	bl	c7ec <Print::println()>
    Serial.println(secs);

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    3022:	ldr	r3, [pc, #28]	@ (3040 <do_hibernate()+0x88>)
    SNVS_LPTAR = secs;
    3024:	str	r4, [r5, #88]	@ 0x58
    while (SNVS_LPTAR != secs);
    3026:	ldr	r2, [r3, #88]	@ 0x58
    3028:	cmp	r2, r4
    302a:	bne.n	3026 <do_hibernate()+0x6e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    302c:	orr.w	r6, r6, #2
    3030:	str	r6, [r3, #56]	@ 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    3032:	ldr	r2, [r3, #56]	@ 0x38
    3034:	lsls	r2, r2, #30
    3036:	bpl.n	3032 <do_hibernate()+0x7a>

    __enable_irq();
    3038:	cpsie	i
  
    //
    powerDown(); 
    303a:	bl	2fa4 <powerDown()>
    303e:	nop
    3040:	.word	0x400d4000
    3044:	.word	0x20001e58
    3048:	.word	0x20001327

0000304c <storeData(short)>:
{
    304c:	push	{r4, r5, lr}
    if(status==CLOSED) // file closed: should open
    304e:	mov	r4, r0
{
    3050:	sub	sp, #84	@ 0x54
    if(status==CLOSED) // file closed: should open
    3052:	cmp	r0, #0
    3054:	bne.w	315c <storeData(short)+0x110>
        if(newDirectory(dirName))
    3058:	ldr	r0, [pc, #496]	@ (324c <storeData(short)+0x200>)
    305a:	bl	2d9c <newDirectory(char*)>
    305e:	cmp	r0, #0
    3060:	beq.n	30fc <storeData(short)+0xb0>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    3062:	ldr	r5, [pc, #492]	@ (3250 <storeData(short)+0x204>)
    3064:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    3066:	ldr.w	r1, [r3, #1152]	@ 0x480
    306a:	cbz	r1, 309a <storeData(short)+0x4e>
    return tmp.open(this, path, O_RDONLY);
    306c:	mov	r3, r4
    306e:	ldr	r2, [pc, #476]	@ (324c <storeData(short)+0x200>)
    3070:	mov	r0, sp
    3072:	str	r4, [sp, #0]
    3074:	bl	7702 <FatFile::open(FatVolume*, char const*, int)>
    3078:	cbnz	r0, 30d8 <storeData(short)+0x8c>
    307a:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    307c:	ldr.w	r1, [r3, #1152]	@ 0x480
    3080:	cbnz	r1, 30b2 <storeData(short)+0x66>
    3082:	ldr.w	r0, [r3, #1156]	@ 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    3086:	cbz	r0, 30c6 <storeData(short)+0x7a>
  ExFatFile() {}
    3088:	str	r1, [sp, #48]	@ 0x30
    return sub.mkdir(vwd(), path, pFlag);
    308a:	movs	r3, #1
    308c:	add.w	r1, r0, #1096	@ 0x448
    3090:	ldr	r2, [pc, #440]	@ (324c <storeData(short)+0x200>)
    3092:	mov	r0, sp
    3094:	bl	6a82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    3098:	b.n	30c4 <storeData(short)+0x78>
    309a:	ldr.w	r0, [r3, #1156]	@ 0x484
           m_xVol ? m_xVol->exists(path) : false;
    309e:	cmp	r0, #0
    30a0:	beq.n	307a <storeData(short)+0x2e>
    return tmp.open(this, path, O_RDONLY);
    30a2:	mov	r3, r1
    30a4:	str	r1, [sp, #48]	@ 0x30
    30a6:	ldr	r2, [pc, #420]	@ (324c <storeData(short)+0x200>)
    30a8:	mov	r1, r0
    30aa:	mov	r0, sp
    30ac:	bl	621a <ExFatFile::open(ExFatVolume*, char const*, int)>
    30b0:	b.n	3078 <storeData(short)+0x2c>
    30b2:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    30b4:	ldr	r2, [pc, #404]	@ (324c <storeData(short)+0x200>)
    30b6:	add.w	r1, r1, #1096	@ 0x448
    30ba:	mov	r0, sp
    30bc:	str	r3, [sp, #0]
    30be:	movs	r3, #1
    30c0:	bl	7880 <FatFile::mkdir(FatFile*, char const*, bool)>
    30c4:	cbnz	r0, 30d8 <storeData(short)+0x8c>
    30c6:	ldr	r1, [pc, #396]	@ (3254 <storeData(short)+0x208>)
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    30c8:	ldr	r0, [pc, #396]	@ (3258 <storeData(short)+0x20c>)
    30ca:	bl	29fa <Print::println(char const*) [clone .isra.0]>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    30ce:	mov.w	r4, #4294967295
}
    30d2:	mov	r0, r4
    30d4:	add	sp, #84	@ 0x54
    30d6:	pop	{r4, r5, pc}
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    30d8:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    30da:	ldr.w	r0, [r3, #1152]	@ 0x480
    30de:	cbz	r0, 30ec <storeData(short)+0xa0>
    30e0:	ldr	r1, [pc, #360]	@ (324c <storeData(short)+0x200>)
    30e2:	bl	80cc <FatVolume::chdir(char const*)>
    30e6:	cbnz	r0, 30fc <storeData(short)+0xb0>
    30e8:	ldr	r1, [pc, #368]	@ (325c <storeData(short)+0x210>)
    30ea:	b.n	30c8 <storeData(short)+0x7c>
    30ec:	ldr.w	r0, [r3, #1156]	@ 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    30f0:	cmp	r0, #0
    30f2:	beq.n	30e8 <storeData(short)+0x9c>
    30f4:	ldr	r1, [pc, #340]	@ (324c <storeData(short)+0x200>)
    30f6:	bl	6660 <ExFatVolume::chdir(char const*)>
    30fa:	b.n	30e6 <storeData(short)+0x9a>
        if(newFileName(fileName))
    30fc:	ldr	r0, [pc, #352]	@ (3260 <storeData(short)+0x214>)
    30fe:	bl	2e08 <newFileName(char*)>
    3102:	cmp	r0, #0
    3104:	beq.n	30ce <storeData(short)+0x82>
            file = sd->open(fileName, FILE_WRITE); 
    3106:	ldr	r1, [pc, #328]	@ (3250 <storeData(short)+0x204>)
    3108:	movw	r3, #16898	@ 0x4202
    310c:	ldr	r2, [pc, #336]	@ (3260 <storeData(short)+0x214>)
    310e:	mov	r0, sp
    3110:	ldr	r1, [r1, #0]
    3112:	bl	8a54 <FsVolume::open(char const*, int)>
class Print
    3116:	ldr	r4, [pc, #332]	@ (3264 <storeData(short)+0x218>)
    3118:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    311a:	add	r1, sp, #16
    311c:	add.w	r0, r4, #16
    3120:	str	r3, [r4, #4]
class Stream : public Print
    3122:	ldr	r3, [sp, #8]
    3124:	str	r3, [r4, #8]
    3126:	ldrb.w	r3, [sp, #12]
    312a:	strb	r3, [r4, #12]
    312c:	bl	8850 <FsBaseFile::operator=(FsBaseFile const&)>
    3130:	mov	r0, sp
    3132:	bl	ef4 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    3136:	ldr	r3, [r4, #72]	@ 0x48
    3138:	cbz	r3, 3152 <storeData(short)+0x106>
    {   nbuf=0;
    313a:	ldr	r3, [pc, #300]	@ (3268 <storeData(short)+0x21c>)
    313c:	movs	r2, #0
    313e:	str	r2, [r3, #0]
        if(proc==0)
    3140:	ldr	r3, [pc, #296]	@ (326c <storeData(short)+0x220>)
    3142:	ldrh	r3, [r3, #0]
    3144:	sxth	r3, r3
    3146:	cbz	r3, 31a8 <storeData(short)+0x15c>
          makeHeader(fileHeader);
    3148:	ldr	r0, [pc, #292]	@ (3270 <storeData(short)+0x224>)
    314a:	bl	2ba8 <makeHeader(long*)>
          hdr=(char *)fileHeader;
    314e:	ldr	r1, [pc, #288]	@ (3270 <storeData(short)+0x224>)
    3150:	b.n	31ba <storeData(short)+0x16e>
    3152:	ldr	r3, [r4, #76]	@ 0x4c
    3154:	cmp	r3, #0
    3156:	bne.n	313a <storeData(short)+0xee>
            {   Serial.println("Failing open file");
    3158:	ldr	r1, [pc, #280]	@ (3274 <storeData(short)+0x228>)
    315a:	b.n	30c8 <storeData(short)+0x7c>
    if(status==OPENED) // file is open: write first record (header)
    315c:	cmp	r0, #1
    315e:	beq.n	313a <storeData(short)+0xee>
    if(status==RUNNING) // file is open and header written: store data records
    3160:	cmp	r0, #2
    3162:	beq.n	31ca <storeData(short)+0x17e>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    3164:	subs	r3, r4, #3
    3166:	uxth	r3, r3
    3168:	cmp	r3, #2
    316a:	bhi.n	30d2 <storeData(short)+0x86>
    316c:	ldr	r3, [pc, #244]	@ (3264 <storeData(short)+0x218>)
    316e:	ldr	r2, [r3, #72]	@ 0x48
    3170:	cbnz	r2, 3176 <storeData(short)+0x12a>
    3172:	ldr	r3, [r3, #76]	@ 0x4c
    3174:	cbz	r3, 3196 <storeData(short)+0x14a>
        {   if(proc==0)
    3176:	ldr	r3, [pc, #244]	@ (326c <storeData(short)+0x220>)
    3178:	ldrh	r3, [r3, #0]
    317a:	sxth	r3, r3
    317c:	cbnz	r3, 3190 <storeData(short)+0x144>
              char *hdr = wavHeaderUpdate(nbuf*MAX_DISK_BUFFER*4);
    317e:	ldr	r3, [pc, #232]	@ (3268 <storeData(short)+0x21c>)
    3180:	mov.w	r0, #12288	@ 0x3000
    3184:	ldr	r3, [r3, #0]
    3186:	muls	r0, r3
    3188:	bl	2b34 <wavHeaderUpdate(long)>
              wavHeaderWrite(hdr);
    318c:	bl	2b48 <wavHeaderWrite(char*)>
            file.close();
    3190:	ldr	r0, [pc, #228]	@ (3278 <storeData(short)+0x22c>)
    3192:	bl	8824 <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    3196:	cmp	r4, #4
    3198:	bne.n	3238 <storeData(short)+0x1ec>
            adcReset();
    319a:	bl	3774 <adcReset()>
            acqPower(LOW);
    319e:	movs	r0, #0
    31a0:	bl	3760 <acqPower(int)>
            do_hibernate();
    31a4:	bl	2fb8 <do_hibernate()>
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    31a8:	ldr	r3, [pc, #208]	@ (327c <storeData(short)+0x230>)
    31aa:	movs	r1, #1
    31ac:	movs	r2, #16
    31ae:	ldr	r0, [r3, #0]
    31b0:	ldr	r3, [pc, #204]	@ (3280 <storeData(short)+0x234>)
    31b2:	ldr	r3, [r3, #0]
    31b4:	bl	2a50 <wavHeaderInit(long, long, long, int)>
    31b8:	mov	r1, r0
    return BaseFile::write(buffer, size);
    31ba:	mov.w	r2, #512	@ 0x200
    31be:	ldr	r0, [pc, #184]	@ (3278 <storeData(short)+0x22c>)
    31c0:	bl	1dc <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    31c4:	cmp.w	r0, #512	@ 0x200
    31c8:	blt.n	3234 <storeData(short)+0x1e8>
    31ca:	mov.w	r2, #12288	@ 0x3000
    31ce:	ldr	r1, [pc, #180]	@ (3284 <storeData(short)+0x238>)
    31d0:	ldr	r0, [pc, #164]	@ (3278 <storeData(short)+0x22c>)
    31d2:	bl	1dc <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    31d6:	cmp.w	r0, #12288	@ 0x3000
    31da:	mov	r4, r0
    31dc:	ldr	r5, [pc, #136]	@ (3268 <storeData(short)+0x21c>)
    31de:	bcs.n	322a <storeData(short)+0x1de>
        { Serial.print(">"); 
    31e0:	ldr	r1, [pc, #164]	@ (3288 <storeData(short)+0x23c>)
    31e2:	ldr	r0, [pc, #116]	@ (3258 <storeData(short)+0x20c>)
    31e4:	bl	29f6 <Print::print(char const*) [clone .isra.0]>
          Serial.print(nd); 
    31e8:	mov	r1, r4
    31ea:	ldr	r0, [pc, #108]	@ (3258 <storeData(short)+0x20c>)
          status=DOCLOSE; 
    31ec:	movs	r4, #3
          Serial.print(nd); 
    31ee:	bl	29ce <Print::print(unsigned long) [clone .isra.0]>
          Serial.print(" "); 
    31f2:	ldr	r1, [pc, #152]	@ (328c <storeData(short)+0x240>)
    31f4:	ldr	r0, [pc, #96]	@ (3258 <storeData(short)+0x20c>)
    31f6:	bl	29f6 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    31fa:	movs	r1, #2
    31fc:	ldr	r0, [pc, #88]	@ (3258 <storeData(short)+0x20c>)
    31fe:	bl	c7da <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    3202:	ldr	r0, [pc, #84]	@ (3258 <storeData(short)+0x20c>)
    3204:	bl	c7ec <Print::println()>
        disk_count++;
    3208:	ldr	r2, [pc, #132]	@ (3290 <storeData(short)+0x244>)
    320a:	ldr	r3, [r2, #0]
    320c:	adds	r3, #1
    320e:	str	r3, [r2, #0]
    3210:	mov.w	r2, #1000	@ 0x3e8
    3214:	ldr	r3, [r5, #0]
    3216:	udiv	r1, r3, r2
    321a:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    321e:	cmp	r3, #0
    3220:	bne.n	3164 <storeData(short)+0x118>
    BaseFile::sync();
    3222:	ldr	r0, [pc, #84]	@ (3278 <storeData(short)+0x22c>)
    3224:	bl	299a <FsBaseFile::sync() [clone .isra.0]>
  }
    3228:	b.n	3164 <storeData(short)+0x118>
          nbuf++;
    322a:	ldr	r3, [r5, #0]
    322c:	movs	r4, #2
    322e:	adds	r3, #1
    3230:	str	r3, [r5, #0]
    3232:	b.n	3208 <storeData(short)+0x1bc>
        { status = DOCLOSE;
    3234:	movs	r4, #3
    3236:	b.n	3164 <storeData(short)+0x118>
        else if(status==DOCLOSE)
    3238:	cmp	r4, #3
    323a:	beq.n	3246 <storeData(short)+0x1fa>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    323c:	ldr	r3, [pc, #84]	@ (3294 <storeData(short)+0x248>)
    323e:	movs	r2, #8
    3240:	str.w	r2, [r3, #136]	@ 0x88
}
    3244:	b.n	30ce <storeData(short)+0x82>
          status=CLOSED;
    3246:	movs	r4, #0
    3248:	b.n	30d2 <storeData(short)+0x86>
    324a:	nop
    324c:	.word	0x20012984
    3250:	.word	0x20002404
    3254:	.word	0x2000132c
    3258:	.word	0x20001e58
    325c:	.word	0x20001338
    3260:	.word	0x200129d4
    3264:	.word	0x200120a8
    3268:	.word	0x20012124
    326c:	.word	0x200128b4
    3270:	.word	0x2000b2c0
    3274:	.word	0x20001344
    3278:	.word	0x200120b8
    327c:	.word	0x200023fc
    3280:	.word	0x200082b8
    3284:	.word	0x200082c0
    3288:	.word	0x20001356
    328c:	.word	0x20000f27
    3290:	.word	0x20012088
    3294:	.word	0x42004000

00003298 <saveData(short)>:
    if(status==STOPPED) 
    3298:	adds	r3, r0, #1
{
    329a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    329e:	mov	r4, r0
    if(status==STOPPED) 
    32a0:	bne.n	32ca <saveData(short)+0x32>
    { while(queue_isBusy()) {;} //wait if acq writes to queue
    32a2:	bl	2860 <queue_isBusy()>
    32a6:	mov	r5, r0
    32a8:	cmp	r0, #0
    32aa:	bne.n	32a2 <saveData(short)+0xa>
      pullData((uint32_t*)tempBuffer0);
    32ac:	ldr	r0, [pc, #192]	@ (3370 <saveData(short)+0xd8>)
    32ae:	bl	28cc <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    32b2:	ldr	r3, [pc, #188]	@ (3370 <saveData(short)+0xd8>)
    32b4:	ldr	r2, [pc, #188]	@ (3374 <saveData(short)+0xdc>)
    32b6:	ldr.w	r1, [r3], #4
    32ba:	str.w	r1, [r2, r5, lsl #2]
    32be:	adds	r5, #1
    32c0:	cmp	r5, #8
    32c2:	bne.n	32b6 <saveData(short)+0x1e>
}
    32c4:	mov	r0, r4
    32c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(status<CLOSED) return status; // we are stopped: don't do anything
    32ca:	cmp	r0, #0
    32cc:	blt.n	32c4 <saveData(short)+0x2c>
    status=checkEndOfFile(status);
    32ce:	bl	2c88 <checkEndOfFile(short)>
    32d2:	mov	r4, r0
    if(getDataCount() >= NDBL)
    32d4:	bl	2844 <getDataCount()>
    32d8:	cmp	r0, #47	@ 0x2f
    32da:	bls.n	32c4 <saveData(short)+0x2c>
      if(proc==0)
    32dc:	ldr	r3, [pc, #152]	@ (3378 <saveData(short)+0xe0>)
    32de:	ldrh	r5, [r3, #0]
    32e0:	sxth	r5, r5
    32e2:	cbnz	r5, 333c <saveData(short)+0xa4>
    32e4:	ldr	r7, [pc, #136]	@ (3370 <saveData(short)+0xd8>)
    32e6:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    32e8:	bl	2860 <queue_isBusy()>
    32ec:	mov	r6, r0
    32ee:	cmp	r0, #0
    32f0:	bne.n	32e8 <saveData(short)+0x50>
        for(int ii=0; ii<NDBL; ii++)
    32f2:	adds	r5, #1
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    32f4:	mov	r0, r8
    32f6:	bl	28cc <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    32fa:	add.w	r8, r8, #512	@ 0x200
    32fe:	cmp	r5, #48	@ 0x30
    3300:	bne.n	32e8 <saveData(short)+0x50>
    3302:	ldr	r2, [pc, #108]	@ (3370 <saveData(short)+0xd8>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    3304:	mov	r3, r6
    3306:	ldr	r1, [pc, #108]	@ (3374 <saveData(short)+0xdc>)
    3308:	ldr.w	r0, [r2], #4
    330c:	str.w	r0, [r1, r3, lsl #2]
    3310:	adds	r3, #1
    3312:	cmp	r3, #8
    3314:	bne.n	3308 <saveData(short)+0x70>
    3316:	ldr	r2, [pc, #100]	@ (337c <saveData(short)+0xe4>)
            outptr[ii]=(inpp[ii]>>16);
    3318:	ldr.w	r3, [r7], #4
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    331c:	adds	r6, #1
            outptr[ii]=(inpp[ii]>>16);
    331e:	lsrs	r3, r3, #16
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    3320:	cmp.w	r6, #6144	@ 0x1800
            outptr[ii]=(inpp[ii]>>16);
    3324:	strh.w	r3, [r2], #2
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    3328:	bne.n	3318 <saveData(short)+0x80>
      if(haveStore)
    332a:	ldr	r3, [pc, #84]	@ (3380 <saveData(short)+0xe8>)
    332c:	ldr	r3, [r3, #0]
    332e:	cmp	r3, #0
    3330:	beq.n	32c4 <saveData(short)+0x2c>
        status=storeData(status);
    3332:	mov	r0, r4
}
    3334:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status=storeData(status);
    3338:	b.w	304c <storeData(short)>
    333c:	ldr	r6, [pc, #60]	@ (337c <saveData(short)+0xe4>)
        for(int ii=0; ii<NDBL; ii++)
    333e:	movs	r7, #0
      if(proc==0)
    3340:	mov	r8, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    3342:	bl	2860 <queue_isBusy()>
    3346:	mov	r5, r0
    3348:	cmp	r0, #0
    334a:	bne.n	3342 <saveData(short)+0xaa>
        for(int ii=0; ii<NDBL; ii++)
    334c:	adds	r7, #1
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    334e:	mov	r0, r8
    3350:	bl	28cc <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    3354:	add.w	r8, r8, #512	@ 0x200
    3358:	cmp	r7, #48	@ 0x30
    335a:	bne.n	3342 <saveData(short)+0xaa>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    335c:	ldr	r3, [pc, #20]	@ (3374 <saveData(short)+0xdc>)
    335e:	ldr.w	r2, [r6], #4
    3362:	str.w	r2, [r3, r5, lsl #2]
    3366:	adds	r5, #1
    3368:	cmp	r5, #8
    336a:	bne.n	335e <saveData(short)+0xc6>
    336c:	b.n	332a <saveData(short)+0x92>
    336e:	nop
    3370:	.word	0x2000b4cc
    3374:	.word	0x200120fc
    3378:	.word	0x200128b4
    337c:	.word	0x200082c0
    3380:	.word	0x200120f8

00003384 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    3384:	ldr	r0, [pc, #28]	@ (33a4 <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3386:	movs	r3, #0
    3388:	mov.w	r2, #1000	@ 0x3e8
FsFile file;
    338c:	ldr	r1, [pc, #24]	@ (33a8 <_GLOBAL__sub_I_t_acq+0x24>)
    338e:	strb	r3, [r0, #12]
    3390:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    3394:	strd	r3, r3, [r0, #72]	@ 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3398:	ldr	r3, [pc, #16]	@ (33ac <_GLOBAL__sub_I_t_acq+0x28>)
    339a:	ldr	r2, [pc, #20]	@ (33b0 <_GLOBAL__sub_I_t_acq+0x2c>)
    339c:	str	r3, [r0, #0]
    339e:	b.w	ca18 <__aeabi_atexit>
    33a2:	nop
    33a4:	.word	0x200120a8
    33a8:	.word	0x00000ef5
    33ac:	.word	0x200006a4
    33b0:	.word	0x20002230

000033b4 <filing_init()>:
{
    33b4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    33b8:	ldr	r3, [pc, #132]	@ (3440 <filing_init()+0x8c>)
  FsDateTime::callback = dateTime;
    33ba:	movs	r4, #5
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    33bc:	ldr	r2, [pc, #132]	@ (3444 <filing_init()+0x90>)
    33be:	ldr.w	r3, [r3, #544]	@ 0x220
    if (sd->begin(SD_CONFIG)) 
    33c2:	ldr.w	r9, [pc, #156]	@ 3460 <filing_init()+0xac>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    33c6:	bic.w	r3, r3, #4278190080	@ 0xff000000
    { Serial.println("still trying..."); 
    33ca:	ldr.w	r8, [pc, #152]	@ 3464 <filing_init()+0xb0>
    33ce:	ldr	r7, [pc, #120]	@ (3448 <filing_init()+0x94>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    33d0:	str	r3, [r2, #0]
  FsDateTime::callback = dateTime;
    33d2:	ldr	r3, [pc, #120]	@ (344c <filing_init()+0x98>)
    33d4:	ldr	r2, [pc, #120]	@ (3450 <filing_init()+0x9c>)
    33d6:	str	r2, [r3, #0]
    if (sd->begin(SD_CONFIG)) 
    33d8:	ldr.w	r5, [r9]
    spiConfigBackupPin = 255;
    33dc:	movs	r3, #255	@ 0xff
    sdioConfigBackup = sdioConfig;
    33de:	movs	r1, #0
    33e0:	add.w	r6, r5, #1168	@ 0x490
    spiConfigBackupPin = 255;
    33e4:	strb.w	r3, [r5, #1212]	@ 0x4bc
    sdioConfigBackup = sdioConfig;
    33e8:	strb.w	r1, [r5, #1224]	@ 0x4c8
    33ec:	mov	r0, r6
    33ee:	bl	9c44 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    33f2:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    33f4:	str.w	r6, [r5, #1164]	@ 0x48c
    return m_card && !m_card->errorCode();
    33f8:	bl	9340 <SdioCard::errorCode() const>
    33fc:	cbnz	r0, 3420 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    33fe:	movs	r3, #1
    3400:	ldr.w	r1, [r5, #1164]	@ 0x48c
    3404:	mov	r0, r5
    3406:	mov	r2, r3
    3408:	bl	8980 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    340c:	cbz	r0, 3420 <filing_init()+0x6c>
    { Serial.println("card initialized.");
    340e:	ldr	r0, [pc, #56]	@ (3448 <filing_init()+0x94>)
    3410:	ldr	r1, [pc, #64]	@ (3454 <filing_init()+0xa0>)
    3412:	bl	29fa <Print::println(char const*) [clone .isra.0]>
      haveStore=1;
    3416:	movs	r0, #1
    3418:	ldr	r3, [pc, #60]	@ (3458 <filing_init()+0xa4>)
    341a:	str	r0, [r3, #0]
}
    341c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { Serial.println("still trying..."); 
    3420:	mov	r1, r8
    3422:	mov	r0, r7
    3424:	bl	29fa <Print::println(char const*) [clone .isra.0]>
      delay(100);
    3428:	movs	r0, #100	@ 0x64
    342a:	bl	b848 <delay>
  for(int ii=0; ii<5;ii++)
    342e:	subs	r4, #1
    3430:	bne.n	33d8 <filing_init()+0x24>
  Serial.println("Card failed, or not present");
    3432:	ldr	r0, [pc, #20]	@ (3448 <filing_init()+0x94>)
    3434:	ldr	r1, [pc, #36]	@ (345c <filing_init()+0xa8>)
    3436:	bl	29fa <Print::println(char const*) [clone .isra.0]>
  return 0;
    343a:	mov	r0, r4
    343c:	b.n	341c <filing_init()+0x68>
    343e:	nop
    3440:	.word	0x401f4400
    3444:	.word	0x200082b8
    3448:	.word	0x20001e58
    344c:	.word	0x20011cec
    3450:	.word	0x00002921
    3454:	.word	0x20001358
    3458:	.word	0x200120f8
    345c:	.word	0x2000137a
    3460:	.word	0x20002404
    3464:	.word	0x2000136a

00003468 <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    3468:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    346c:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    346e:	bl	ba44 <rtc_get>
    3472:	str	r0, [sp, #0]
  uint32_t t1;
  t1 = micros();
    3474:	bl	b7fc <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3478:	ldr	r3, [pc, #608]	@ (36dc <compress(void*)+0x274>)
  t1 = micros();
    347a:	mov	sl, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    347c:	movs	r2, #0
    347e:	ldr	r3, [r3, #0]
    3480:	ldr.w	r1, [r4, r2, lsl #2]
    3484:	str.w	r1, [r3, r2, lsl #2]
    3488:	adds	r2, #1
    348a:	cmp	r2, #128	@ 0x80
    348c:	bne.n	3480 <compress(void*)+0x18>
    348e:	subs	r4, #4
    3490:	add.w	r0, r3, #508	@ 0x1fc
    3494:	mov	r2, r3
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    3496:	ldr.w	r1, [r2, #4]!
    349a:	ldr.w	r5, [r4, #4]!
    349e:	cmp	r0, r2
    34a0:	sub.w	r1, r1, r5
    34a4:	str	r1, [r2, #0]
    34a6:	bne.n	3496 <compress(void*)+0x2e>

  // find maximum in filtered data 
  int32_t mx = 0;
    34a8:	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    if(dd<0)  dd = -dd; // take absolut value
    34aa:	ldr.w	r1, [r3, #4]!
    34ae:	cmp	r1, #0
    34b0:	it	lt
    34b2:	neglt	r1, r1
    if(dd>mx) mx =  dd; // take maximum
    34b4:	cmp	r2, r1
    34b6:	it	lt
    34b8:	movlt	r2, r1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    34ba:	cmp	r3, r0
    34bc:	bne.n	34aa <compress(void*)+0x42>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    34be:	cmp	r2, #1
    34c0:	mov.w	r4, #2
    34c4:	ble.n	34d8 <compress(void*)+0x70>
    34c6:	movs	r1, #1
    34c8:	mov	r3, r4
    34ca:	adds	r4, #1
    34cc:	cmp	r4, #24
    34ce:	beq.n	34d8 <compress(void*)+0x70>
    34d0:	lsl.w	r3, r1, r3
    34d4:	cmp	r3, r2
    34d6:	ble.n	34c8 <compress(void*)+0x60>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    34d8:	subs	r1, r4, #1
    34da:	ldr	r2, [pc, #516]	@ (36e0 <compress(void*)+0x278>)
    34dc:	ldr.w	r8, [pc, #532]	@ 36f4 <compress(void*)+0x28c>
    34e0:	ldr.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    34e4:	mov	r0, r8
    34e6:	mov	r9, r8
  proc_stat[nb-1]++;
    34e8:	adds	r3, #1
    34ea:	str.w	r3, [r2, r1, lsl #2]
  uint32_t msk = (1 << nb) - 1;
    34ee:	movs	r1, #127	@ 0x7f
  if((uint32_t)nb>max_stat) max_stat=nb;
    34f0:	ldr	r3, [pc, #496]	@ (36e4 <compress(void*)+0x27c>)
    34f2:	ldr	r2, [r3, #0]
    34f4:	cmp	r4, r2
  uint32_t msk = (1 << nb) - 1;
    34f6:	mov.w	r2, #1
    34fa:	lsl.w	r2, r2, r4
  if((uint32_t)nb>max_stat) max_stat=nb;
    34fe:	it	hi
    3500:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    3502:	subs	r2, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    3504:	ldr.w	r5, [r0, #4]!
    3508:	subs	r1, #1
    350a:	and.w	r5, r5, r2
    350e:	str	r5, [r0, #0]
    3510:	bne.n	3504 <compress(void*)+0x9c>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    3512:	ldr	r5, [pc, #468]	@ (36e8 <compress(void*)+0x280>)
    3514:	mov.w	r2, #512	@ 0x200
    3518:	str	r1, [sp, #4]
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    351a:	mov.w	fp, r4, lsl #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    351e:	mov	r0, r5
    3520:	bl	a2ac <memset>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
    3524:	mov.w	r2, #2779096485	@ 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
    3528:	ldr	r3, [sp, #0]
  int ndat = NH + NCHAN_ACQ + ncmp;
    352a:	add.w	r7, fp, #7
  *iptr++ = 0xA5A5A5A5;
    352e:	str	r2, [r5, #0]
  ndat= ((ndat>>1) + 1)<<1;
    3530:	add.w	r6, fp, #8
  *iptr++ = nb | shift<<16;
    3534:	ldr	r2, [pc, #436]	@ (36ec <compress(void*)+0x284>)
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3536:	movs	r0, #7
    3538:	ldr	r1, [sp, #4]
  *iptr++ = nb | shift<<16;
    353a:	ldrh	r2, [r2, #0]
    353c:	orr.w	r2, r4, r2, lsl #16
    3540:	str	r2, [r5, #4]
  *iptr++ = NCHAN_ACQ;
    3542:	movs	r2, #1
    3544:	str	r2, [r5, #16]
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    3546:	add	r2, fp
  *iptr++ = t1;
    3548:	strd	r3, sl, [r5, #8]
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    354c:	str	r2, [r5, #20]
    #error "NCH>8"
  #endif

  // pack data
  // 
  int nx = MBIT;
    354e:	movs	r3, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3550:	ldr.w	r2, [r9]
    3554:	str.w	r1, [r9]
    3558:	str	r2, [r5, #24]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
  {   nx -= nb;
    355a:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    355e:	ldr.w	r9, [r5, r0, lsl #2]
    3562:	ldr.w	r2, [r8], #4
      if(nx > 0)
    3566:	cmp.w	lr, #0
    356a:	ble.n	35b0 <compress(void*)+0x148>
      {   outData[kk] |= (tempData[ii] << nx);
    356c:	lsl.w	r2, r2, lr
  {   nx -= nb;
    3570:	mov	r3, lr
      {   outData[kk] |= (tempData[ii] << nx);
    3572:	orr.w	r2, r2, r9
    3576:	str.w	r2, [r5, r0, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    357a:	adds	r1, #1
    357c:	cmp	r1, #128	@ 0x80
    357e:	bne.n	355a <compress(void*)+0xf2>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    3580:	ldr.w	r8, [pc, #372]	@ 36f8 <compress(void*)+0x290>
    3584:	ldr.w	r4, [r8]
    3588:	add.w	r9, r4, r6
    358c:	cmp.w	r9, #128	@ 0x80
    3590:	bgt.n	35e0 <compress(void*)+0x178>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3592:	ldr	r0, [pc, #348]	@ (36f0 <compress(void*)+0x288>)
    3594:	lsls	r2, r6, #2
    3596:	ldr	r1, [pc, #336]	@ (36e8 <compress(void*)+0x280>)
    3598:	add.w	r0, r0, r4, lsl #2
    359c:	bl	a2f0 <memcpy>
    35a0:	str.w	r9, [r8]
  int ret=1;
    35a4:	mov.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    35a8:	mov	r0, r9
    35aa:	add	sp, #12
    35ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    35b0:	add.w	ip, r0, #1
      else if(nx==0) 
    35b4:	bne.n	35c4 <compress(void*)+0x15c>
      {   outData[kk++] |= tempData[ii];
    35b6:	orr.w	r2, r9, r2
          nx=MBIT;
    35ba:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    35bc:	str.w	r2, [r5, r0, lsl #2]
    35c0:	mov	r0, ip
    35c2:	b.n	357a <compress(void*)+0x112>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    35c4:	subs	r3, r4, r3
    35c6:	lsr.w	r3, r2, r3
    35ca:	orr.w	r3, r3, r9
    35ce:	str.w	r3, [r5, r0, lsl #2]
          nx += MBIT;
    35d2:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    35d6:	mov	r0, ip
          outData[kk] = (tempData[ii] << nx);
    35d8:	lsls	r2, r3
    35da:	str.w	r2, [r5, ip, lsl #2]
    35de:	b.n	357a <compress(void*)+0x112>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    35e0:	cmp	r4, #122	@ 0x7a
    35e2:	ble.n	362e <compress(void*)+0x1c6>
    35e4:	movs	r2, #0
    35e6:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    35e8:	ldr	r1, [pc, #260]	@ (36f0 <compress(void*)+0x288>)
    35ea:	mov	r0, r2
    35ec:	cmp	r3, #127	@ 0x7f
    35ee:	ble.n	3624 <compress(void*)+0x1bc>
    35f0:	cbz	r2, 3602 <compress(void*)+0x19a>
    35f2:	cmp	r4, #128	@ 0x80
    35f4:	rsb	r3, r4, #128	@ 0x80
    35f8:	it	gt
    35fa:	movgt	r3, #0
    35fc:	add	r3, r4
    35fe:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    3602:	ldr	r0, [pc, #236]	@ (36f0 <compress(void*)+0x288>)
    3604:	bl	286c <pushData(unsigned long*)>
    3608:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    360c:	mov.w	r2, r6, lsl #2
    3610:	ldr	r1, [pc, #212]	@ (36e8 <compress(void*)+0x280>)
    3612:	ldr	r0, [pc, #220]	@ (36f0 <compress(void*)+0x288>)
      if(!pushData(dout)) ret = 0;
    3614:	it	ne
    3616:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    361a:	bl	a2f0 <memcpy>
    361e:	str.w	r6, [r8]
    3622:	b.n	35a8 <compress(void*)+0x140>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    3624:	str.w	r0, [r1, r3, lsl #2]
    3628:	movs	r2, #1
    362a:	adds	r3, #1
    362c:	b.n	35ec <compress(void*)+0x184>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    362e:	ldr	r2, [r5, #20]
    3630:	rsb	r3, r4, #122	@ 0x7a
    3634:	ldr	r1, [pc, #176]	@ (36e8 <compress(void*)+0x280>)
    3636:	orr.w	r3, r3, r2, lsl #16
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    363a:	ldr.w	fp, [pc, #180]	@ 36f0 <compress(void*)+0x288>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    363e:	mov	r2, r4
    3640:	str	r3, [r5, #20]
    3642:	mov	r3, r1
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3644:	ldr.w	r0, [r3], #4
    3648:	str.w	r0, [fp, r2, lsl #2]
    364c:	adds	r2, #1
    364e:	cmp	r2, #128	@ 0x80
    3650:	bne.n	3644 <compress(void*)+0x1dc>
    3652:	rsb	sl, r4, #128	@ 0x80
      if(!pushData(dout)) ret = 0;
    3656:	ldr	r0, [pc, #152]	@ (36f0 <compress(void*)+0x288>)
    3658:	str	r1, [sp, #4]
    365a:	str.w	r2, [r8]
      nr=ndat0-ii; // for header
    365e:	sub.w	r7, r7, sl
    3662:	str.w	sl, [sp]
      if(!pushData(dout)) ret = 0;
    3666:	bl	286c <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    366a:	ldr	r2, [r5, #20]
      if(!pushData(dout)) ret = 0;
    366c:	subs.w	r9, r0, #0
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3670:	mov.w	r0, #7
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3674:	bfc	r2, #0, #16
      if(!pushData(dout)) ret = 0;
    3678:	it	ne
    367a:	movne.w	r9, #1
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    367e:	orrs	r2, r7
    3680:	ldr	r7, [pc, #108]	@ (36f0 <compress(void*)+0x288>)
    3682:	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3684:	movs	r2, #0
    3686:	ldrd	r3, r1, [sp]
    368a:	str.w	r2, [r8]
    368e:	subs	r0, #1
    3690:	bne.n	36c0 <compress(void*)+0x258>
    3692:	cbz	r2, 369a <compress(void*)+0x232>
    3694:	movs	r2, #6
    3696:	str.w	r2, [r8]
    369a:	ldr.w	r1, [r8]
    369e:	movs	r2, #0
    36a0:	add.w	fp, fp, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    36a4:	cmp	r6, sl
    36a6:	bgt.n	36cc <compress(void*)+0x264>
    36a8:	cmp	r2, #0
    36aa:	beq.w	35a8 <compress(void*)+0x140>
    36ae:	subs	r4, #128	@ 0x80
    36b0:	add	r4, r6
    36b2:	cmp	r6, r3
    36b4:	it	lt
    36b6:	movlt	r4, #0
    36b8:	add	r4, r1
    36ba:	str.w	r4, [r8]
  return ret;
    36be:	b.n	35a8 <compress(void*)+0x140>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    36c0:	ldr.w	r2, [r1], #4
    36c4:	str.w	r2, [r7], #4
    36c8:	movs	r2, #1
    36ca:	b.n	368e <compress(void*)+0x226>
      while (ii < ndat) dout[nout++] = outData[ii++];
    36cc:	ldr.w	r2, [r5, sl, lsl #2]
    36d0:	add.w	sl, sl, #1
    36d4:	str.w	r2, [fp], #4
    36d8:	movs	r2, #1
    36da:	b.n	36a4 <compress(void*)+0x23c>
    36dc:	.word	0x2000240c
    36e0:	.word	0x20012148
    36e4:	.word	0x2001211c
    36e8:	.word	0x200116e4
    36ec:	.word	0x2000241a
    36f0:	.word	0x200114d4
    36f4:	.word	0x20011ae4
    36f8:	.word	0x20011d38

000036fc <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    36fc:	push	{r4, r5, r6, lr}
    36fe:	mov	r5, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    3700:	mov	r4, r1
    3702:	cbz	r1, 371a <Print::print(char const*) [clone .isra.0]+0x1e>
							  return write((const uint8_t *)str, strlen(str)); }
    3704:	mov	r0, r1
    3706:	bl	ee80 <strlen>
    370a:	ldr	r3, [r5, #0]
    370c:	mov	r2, r0
    370e:	mov	r1, r4
    3710:	mov	r0, r5
    3712:	ldr	r3, [r3, #4]
	size_t print(const char s[])			{ return write(s); }
    3714:	ldmia.w	sp!, {r4, r5, r6, lr}
							  return write((const uint8_t *)str, strlen(str)); }
    3718:	bx	r3
	size_t print(const char s[])			{ return write(s); }
    371a:	pop	{r4, r5, r6, pc}

0000371c <usbPowerInit()>:
    static const uint8_t i2c_addr[2]= {I2C_ADDRESS1, I2C_ADDRESS2};
    static const uint8_t regs[4]={0x3C, 0x41, 0x46, 0x4B};

    void usbPowerInit()
    {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    371c:	ldr	r3, [pc, #24]	@ (3738 <usbPowerInit()+0x1c>)
    371e:	movs	r2, #5
    3720:	str.w	r2, [r3, #180]	@ 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    3724:	movs	r2, #8
    3726:	str.w	r2, [r3, #676]	@ 0x2a4

      GPIO8_GDIR |= 1<<26;
    372a:	ldr	r2, [pc, #16]	@ (373c <usbPowerInit()+0x20>)
    372c:	ldr	r3, [r2, #4]
    372e:	orr.w	r3, r3, #67108864	@ 0x4000000
    3732:	str	r3, [r2, #4]
    }
    3734:	bx	lr
    3736:	nop
    3738:	.word	0x401f8000
    373c:	.word	0x42008000

00003740 <usbPowerSetup()>:
    {
      GPIO8_DR_CLEAR = 1<<26;
    }

    void usbPowerSetup(void)
    {
    3740:	push	{r3, lr}
      #if USB_POWER==1
        usbPowerInit();
    3742:	bl	371c <usbPowerInit()>
      GPIO8_DR_SET = 1<<26;
    3746:	ldr	r3, [pc, #20]	@ (375c <usbPowerSetup()+0x1c>)
    3748:	mov.w	r2, #67108864	@ 0x4000000
        usbPowerOn();
        delay(1000);
    374c:	mov.w	r0, #1000	@ 0x3e8
      GPIO8_DR_SET = 1<<26;
    3750:	str.w	r2, [r3, #132]	@ 0x84
      #endif
    }
    3754:	ldmia.w	sp!, {r3, lr}
        delay(1000);
    3758:	b.w	b848 <delay>
    375c:	.word	0x42008000

00003760 <acqPower(int)>:

    void acqPower(int flag)
    {   
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
    3760:	uxtb	r1, r0
    3762:	movs	r0, #2
    {   
    3764:	push	{r3, lr}
            digitalWrite(ADC_EN,flag);
    3766:	bl	bf78 <digitalWrite>
            delay(100);
    376a:	movs	r0, #100	@ 0x64
        #else
            (void) flag;
        #endif
    }
    376c:	ldmia.w	sp!, {r3, lr}
            delay(100);
    3770:	b.w	b848 <delay>

00003774 <adcReset()>:

    void adcReset(void) 
    { digitalWrite(ADC_SHDNZ,LOW); 
    3774:	movs	r1, #0
    3776:	movs	r0, #3
    3778:	b.w	bf78 <digitalWrite>

0000377c <adcStart()>:
    }
    void adcStart(void) 
    { digitalWrite(ADC_SHDNZ,HIGH); 
    377c:	movs	r1, #1
    377e:	movs	r0, #3
    3780:	b.w	bf78 <digitalWrite>

00003784 <adc_init()>:
    }


    void adc_init(void)
    {
    3784:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        #if defined(ADC_EN)
            pinMode(ADC_EN,OUTPUT);
    3788:	movs	r1, #1
    378a:	movs	r0, #2
    378c:	bl	bfb8 <pinMode>
        #endif
        acqPower(HIGH);
    3790:	movs	r0, #1
    3792:	bl	3760 <acqPower(int)>

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
    3796:	movs	r1, #1
    3798:	movs	r0, #3
    379a:	bl	bfb8 <pinMode>
        adcReset();
    379e:	bl	3774 <adcReset()>
        delay(100);
    37a2:	movs	r0, #100	@ 0x64
    37a4:	bl	b848 <delay>
        adcStart();
    37a8:	bl	377c <adcStart()>

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
    37ac:	ldr	r2, [pc, #332]	@ (38fc <adc_init()+0x178>)
    37ae:	ldr	r1, [pc, #336]	@ (3900 <adc_init()+0x17c>)
    37b0:	add	r0, sp, #4
    37b2:	bl	39cc <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
    37b6:	movs	r1, #76	@ 0x4c
    37b8:	add	r0, sp, #4
    37ba:	bl	39ee <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
    37be:	movs	r2, #76	@ 0x4c
            if(i2c.exist(i2c_addr[ii]))
    37c0:	cmp	r0, #0
    37c2:	beq.w	38f6 <adc_init()+0x172>
                Serial.printf("found %x\n",i2c_addr[ii]);
    37c6:	ldr	r1, [pc, #316]	@ (3904 <adc_init()+0x180>)
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    37c8:	ldr	r0, [pc, #316]	@ (3908 <adc_init()+0x184>)

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    37ca:	movs	r4, #11
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    37cc:	bl	c824 <Print::printf(char const*, ...)>
            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
    37d0:	movs	r3, #129	@ 0x81
    37d2:	movs	r2, #2
    37d4:	movs	r1, #76	@ 0x4c
    37d6:	add	r0, sp, #4
    37d8:	ldr	r5, [pc, #304]	@ (390c <adc_init()+0x188>)
    37da:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
    37de:	movs	r3, #48	@ 0x30
    37e0:	movs	r2, #7
    37e2:	movs	r1, #76	@ 0x4c
    37e4:	add	r0, sp, #4
    37e6:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    37ea:	movs	r3, #0
    37ec:	movs	r2, #8
    37ee:	movs	r1, #76	@ 0x4c
    37f0:	add	r0, sp, #4
    37f2:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    37f6:	mov	r2, r4
            for(int jj=0;jj<4;jj++)
    37f8:	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    37fa:	ldrb.w	r3, [r5], #1
    37fe:	movs	r1, #76	@ 0x4c
            for(int jj=0;jj<4;jj++)
    3800:	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    3802:	add	r0, sp, #4
    3804:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
    3808:	cmp	r4, #15
    380a:	bne.n	37f6 <adc_init()+0x72>
            }
            //
            //Enable Input Ch-1 to Ch-8 by I2C write into P0_R115
            //i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	 
            i2c.write(i2c_addr[ii],0x73,0x30);
    380c:	movs	r3, #48	@ 0x30
    380e:	movs	r2, #115	@ 0x73
    3810:	movs	r1, #76	@ 0x4c
    3812:	add	r0, sp, #4
    3814:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //
            //Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
            //i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	
            i2c.write(i2c_addr[ii],0x74,0x20);	
    3818:	movs	r3, #32
    381a:	movs	r2, #116	@ 0x74
    381c:	movs	r1, #76	@ 0x4c
    381e:	add	r0, sp, #4
    3820:	ldr	r6, [pc, #236]	@ (3910 <adc_init()+0x18c>)
    3822:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //
   			//Power-up ADC and PLL by I2C write into P0_R117 
            i2c.write(i2c_addr[ii],0x75,0xE0);
    3826:	movs	r3, #224	@ 0xe0
    3828:	movs	r2, #117	@ 0x75
    382a:	movs	r1, #76	@ 0x4c
    382c:	add	r0, sp, #4

            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2

            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V

            for(int jj=0; jj<4; jj++)
    382e:	movs	r5, #0
            i2c.write(i2c_addr[ii],0x75,0xE0);
    3830:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3834:	ldr.w	r8, [pc, #236]	@ 3924 <adc_init()+0x1a0>
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    3838:	movs	r3, #37	@ 0x25
    383a:	movs	r2, #107	@ 0x6b
    383c:	movs	r1, #76	@ 0x4c
    383e:	add	r0, sp, #4
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    3840:	ldr	r7, [pc, #208]	@ (3914 <adc_init()+0x190>)
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    3842:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
    3846:	movs	r3, #96	@ 0x60
    3848:	movs	r2, #59	@ 0x3b
    384a:	movs	r1, #76	@ 0x4c
    384c:	add	r0, sp, #4
    384e:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3852:	ldrb.w	r4, [r6], #1
    3856:	movs	r3, #136	@ 0x88
    3858:	movs	r1, #76	@ 0x4c
    385a:	add	r0, sp, #4
    385c:	mov	r2, r4
            for(int jj=0; jj<4; jj++)
    385e:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3860:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3864:	ldrh.w	r3, [r8]
    3868:	adds	r2, r4, #1
    386a:	movs	r1, #76	@ 0x4c
    386c:	uxtb	r3, r3
    386e:	add	r0, sp, #4
    3870:	uxtb	r2, r2
    3872:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    3876:	ldrh	r3, [r7, #0]
    3878:	adds	r2, r4, #2
    387a:	movs	r1, #76	@ 0x4c
    387c:	subs	r3, #55	@ 0x37
    387e:	add	r0, sp, #4
    3880:	uxtb	r2, r2
    3882:	uxtb	r3, r3
    3884:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
    3888:	adds	r2, r4, #3
    388a:	movs	r3, #128	@ 0x80
    388c:	movs	r1, #76	@ 0x4c
    388e:	uxtb	r2, r2
    3890:	add	r0, sp, #4
    3892:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
    3896:	adds	r2, r4, #4
    3898:	movs	r3, #0
    389a:	movs	r1, #76	@ 0x4c
    389c:	uxtb	r2, r2
    389e:	add	r0, sp, #4
    38a0:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    38a4:	cmp	r5, #4
    38a6:	bne.n	3852 <adc_init()+0xce>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
    38a8:	ldr	r1, [pc, #108]	@ (3918 <adc_init()+0x194>)
    38aa:	ldr	r0, [pc, #92]	@ (3908 <adc_init()+0x184>)
    38ac:	bl	36fc <Print::print(char const*) [clone .isra.0]>
    38b0:	movs	r2, #21
    38b2:	movs	r1, #76	@ 0x4c
    38b4:	add	r0, sp, #4
    38b6:	bl	3a10 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    38ba:	movs	r3, #0
    38bc:	mov	r1, r0
    38be:	movs	r2, #16
    38c0:	ldr	r0, [pc, #68]	@ (3908 <adc_init()+0x184>)
    38c2:	bl	c83e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    38c6:	ldr	r0, [pc, #64]	@ (3908 <adc_init()+0x184>)
    38c8:	bl	c7ec <Print::println()>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
    38cc:	ldr	r1, [pc, #76]	@ (391c <adc_init()+0x198>)
    38ce:	ldr	r0, [pc, #56]	@ (3908 <adc_init()+0x184>)
    38d0:	bl	36fc <Print::print(char const*) [clone .isra.0]>
    38d4:	movs	r2, #118	@ 0x76
    38d6:	movs	r1, #76	@ 0x4c
    38d8:	add	r0, sp, #4
    38da:	bl	3a10 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    38de:	movs	r3, #0
    38e0:	mov	r1, r0
    38e2:	movs	r2, #16
    38e4:	ldr	r0, [pc, #32]	@ (3908 <adc_init()+0x184>)
    38e6:	bl	c83e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    38ea:	ldr	r0, [pc, #28]	@ (3908 <adc_init()+0x184>)
    38ec:	bl	c7ec <Print::println()>
            
        }
    }
    38f0:	add	sp, #8
    38f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    38f6:	ldr	r1, [pc, #40]	@ (3920 <adc_init()+0x19c>)
    38f8:	b.n	37c8 <adc_init()+0x44>
    38fa:	nop
    38fc:	.word	0x000186a0
    3900:	.word	0x20001e68
    3904:	.word	0x20001396
    3908:	.word	0x20001e58
    390c:	.word	0x20000dc0
    3910:	.word	0x20000dbc
    3914:	.word	0x200128ac
    3918:	.word	0x200013b7
    391c:	.word	0x200013bf
    3920:	.word	0x200013a0
    3924:	.word	0x20002410

00003928 <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
    3928:	push	{r0, r1, r4, r5, r6, lr}
    392a:	mov	r4, r0
    392c:	ldr	r6, [pc, #40]	@ (3958 <setAGain(signed char)+0x30>)
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
    392e:	movs	r5, #0
        i2c_class i2c(&mWire,100'000);
    3930:	ldr	r2, [pc, #40]	@ (395c <setAGain(signed char)+0x34>)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3932:	uxtb	r4, r4
        i2c_class i2c(&mWire,100'000);
    3934:	ldr	r1, [pc, #40]	@ (3960 <setAGain(signed char)+0x38>)
    3936:	add	r0, sp, #4
    3938:	bl	39cc <i2c_class::i2c_class(TwoWire*, unsigned long)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    393c:	ldrb.w	r2, [r6], #1
            for(int jj=0; jj<4; jj++)
    3940:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3942:	mov	r3, r4
    3944:	movs	r1, #76	@ 0x4c
    3946:	adds	r2, #1
    3948:	add	r0, sp, #4
    394a:	uxtb	r2, r2
    394c:	bl	3a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    3950:	cmp	r5, #4
    3952:	bne.n	393c <setAGain(signed char)+0x14>
            }
    }
    3954:	add	sp, #8
    3956:	pop	{r4, r5, r6, pc}
    3958:	.word	0x20000dbc
    395c:	.word	0x000186a0
    3960:	.word	0x20001e68

00003964 <adcStatus()>:
    void adcStatus(void)
    {
    3964:	push	{r0, r1, r4, lr}
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    3966:	ldr	r4, [pc, #80]	@ (39b8 <adcStatus()+0x54>)
        i2c_class i2c(&mWire,100'000);
    3968:	add	r0, sp, #4
    396a:	ldr	r2, [pc, #80]	@ (39bc <adcStatus()+0x58>)
    396c:	ldr	r1, [pc, #80]	@ (39c0 <adcStatus()+0x5c>)
    396e:	bl	39cc <i2c_class::i2c_class(TwoWire*, unsigned long)>
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    3972:	mov	r0, r4
    3974:	ldr	r1, [pc, #76]	@ (39c4 <adcStatus()+0x60>)
    3976:	bl	36fc <Print::print(char const*) [clone .isra.0]>
    397a:	movs	r2, #21
    397c:	movs	r1, #76	@ 0x4c
    397e:	add	r0, sp, #4
    3980:	bl	3a10 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3984:	movs	r3, #0
    3986:	mov	r1, r0
    3988:	movs	r2, #16
    398a:	mov	r0, r4
    398c:	bl	c83e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    3990:	mov	r0, r4
    3992:	ldr	r1, [pc, #52]	@ (39c8 <adcStatus()+0x64>)
    3994:	bl	36fc <Print::print(char const*) [clone .isra.0]>
    3998:	movs	r2, #118	@ 0x76
    399a:	movs	r1, #76	@ 0x4c
    399c:	add	r0, sp, #4
    399e:	bl	3a10 <i2c_class::read(unsigned char, unsigned char)>
    39a2:	movs	r3, #0
    39a4:	mov	r1, r0
    39a6:	movs	r2, #16
    39a8:	mov	r0, r4
    39aa:	bl	c83e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    39ae:	mov	r0, r4
    39b0:	bl	c7ec <Print::println()>
    }
    39b4:	add	sp, #8
    39b6:	pop	{r4, pc}
    39b8:	.word	0x20001e58
    39bc:	.word	0x000186a0
    39c0:	.word	0x20001e68
    39c4:	.word	0x200013b6
    39c8:	.word	0x200013be

000039cc <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    39cc:	push	{r4, r5, r6, lr}
    39ce:	mov	r4, r1
    39d0:	mov	r6, r2
    {   this->wire = wire;
    39d2:	str	r1, [r0, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    39d4:	mov	r5, r0
        wire->begin();
    39d6:	mov	r0, r1
    39d8:	bl	120d0 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    39dc:	movs	r0, #100	@ 0x64
    39de:	bl	b848 <delay>
        wire->setClock(speed);
    39e2:	mov	r0, r4
    39e4:	mov	r1, r6
    39e6:	bl	55e4 <TwoWire::setClock(unsigned long)>
    }
    39ea:	mov	r0, r5
    39ec:	pop	{r4, r5, r6, pc}

000039ee <i2c_class::exist(unsigned char)>:
    {
    39ee:	push	{r3, lr}
		txBuffer[0] = (address << 1);
    39f0:	lsls	r1, r1, #1
        wire->beginTransmission(addr);
    39f2:	ldr	r3, [r0, #0]
    39f4:	strb.w	r1, [r3, #165]	@ 0xa5
		transmitting = 1;
    39f8:	movs	r1, #1
    39fa:	strb.w	r1, [r3, #304]	@ 0x130
		txBufferLength = 1;
    39fe:	strb.w	r1, [r3, #303]	@ 0x12f
		return endTransmission(1);
    3a02:	ldr	r0, [r0, #0]
    3a04:	bl	5308 <TwoWire::endTransmission(unsigned char)>
    }
    3a08:	clz	r0, r0
    3a0c:	lsrs	r0, r0, #5
    3a0e:	pop	{r3, pc}

00003a10 <i2c_class::read(unsigned char, unsigned char)>:
    { 
    3a10:	push	{r4, r5, r6, lr}
        wire->beginTransmission(addr);
    3a12:	ldr	r3, [r0, #0]
		transmitting = 1;
    3a14:	movs	r6, #1
    { 
    3a16:	mov	r5, r1
		txBuffer[0] = (address << 1);
    3a18:	lsls	r1, r1, #1
		transmitting = 1;
    3a1a:	strb.w	r6, [r3, #304]	@ 0x130
    3a1e:	mov	r4, r0
		txBuffer[0] = (address << 1);
    3a20:	strb.w	r1, [r3, #165]	@ 0xa5
        wire->write(reg);
    3a24:	mov	r1, r2
		txBufferLength = 1;
    3a26:	strb.w	r6, [r3, #303]	@ 0x12f
    3a2a:	ldr	r0, [r0, #0]
    3a2c:	ldr	r3, [r0, #0]
    3a2e:	ldr	r3, [r3, #0]
    3a30:	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    3a32:	movs	r1, #0
    3a34:	ldr	r0, [r4, #0]
    3a36:	bl	5308 <TwoWire::endTransmission(unsigned char)>
    3a3a:	cbz	r0, 3a40 <i2c_class::read(unsigned char, unsigned char)+0x30>
    3a3c:	movs	r0, #0
    }
    3a3e:	pop	{r4, r5, r6, pc}
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    3a40:	mov	r3, r6
    3a42:	mov	r2, r6
    3a44:	mov	r1, r5
    3a46:	ldr	r0, [r4, #0]
    3a48:	bl	53e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    3a4c:	cmp	r0, #0
    3a4e:	beq.n	3a3c <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    3a50:	ldr	r0, [r4, #0]
    3a52:	ldr	r3, [r0, #0]
    3a54:	ldr	r3, [r3, #20]
    3a56:	blx	r3
        return val;
    3a58:	uxtb	r0, r0
    3a5a:	b.n	3a3e <i2c_class::read(unsigned char, unsigned char)+0x2e>

00003a5c <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
    { 
    3a5c:	push	{r4, r5, r6, lr}
    3a5e:	mov	r4, r0
		transmitting = 1;
    3a60:	movs	r5, #1
    3a62:	mov	r6, r3
        wire->beginTransmission(addr);
    3a64:	ldr	r3, [r0, #0]
		txBuffer[0] = (address << 1);
    3a66:	lsls	r0, r1, #1
        wire->write(reg);
    3a68:	mov	r1, r2
		transmitting = 1;
    3a6a:	strb.w	r5, [r3, #304]	@ 0x130
		txBufferLength = 1;
    3a6e:	strb.w	r5, [r3, #303]	@ 0x12f
		txBuffer[0] = (address << 1);
    3a72:	strb.w	r0, [r3, #165]	@ 0xa5
    3a76:	ldr	r0, [r4, #0]
    3a78:	ldr	r3, [r0, #0]
    3a7a:	ldr	r3, [r3, #0]
    3a7c:	blx	r3
        wire->write(val);
    3a7e:	ldr	r0, [r4, #0]
    3a80:	mov	r1, r6
    3a82:	ldr	r3, [r0, #0]
    3a84:	ldr	r3, [r3, #0]
    3a86:	blx	r3
		return endTransmission(1);
    3a88:	mov	r1, r5
    3a8a:	ldr	r0, [r4, #0]
    3a8c:	bl	5308 <TwoWire::endTransmission(unsigned char)>
    }
    3a90:	clz	r0, r0
    3a94:	lsrs	r0, r0, #5
    3a96:	pop	{r4, r5, r6, pc}

00003a98 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    3a98:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now time is minutes
    3a9c:	movs	r4, #60	@ 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3a9e:	movw	r8, #365	@ 0x16d
    3aa2:	mov.w	ip, #100	@ 0x64
    3aa6:	mov.w	lr, #400	@ 0x190
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3aaa:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now time is hours
    3aae:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3ab2:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now time is hours
    3ab6:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3aba:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now time is days
    3abc:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now time is hours
    3abe:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now time is days
    3ac0:	udiv	r2, r3, r0
    3ac4:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3ac8:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now time is days
    3aca:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3acc:	movs	r3, #7
    3ace:	udiv	r3, r0, r3
    3ad2:	rsb	r3, r3, r3, lsl #3
    3ad6:	subs	r0, r0, r3
    3ad8:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3ada:	movs	r0, #0
    days = 0;
    3adc:	mov	r4, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3ade:	uxtb	r5, r0
    3ae0:	addw	r3, r5, #1970	@ 0x7b2
    3ae4:	ands.w	r6, r3, #3
    3ae8:	bne.n	3b82 <time2date(unsigned long, datetime_t*)+0xea>
    3aea:	sdiv	r7, r3, ip
    3aee:	mls	r7, ip, r7, r3
    3af2:	cmp	r7, #0
    3af4:	bne.n	3b88 <time2date(unsigned long, datetime_t*)+0xf0>
    3af6:	sdiv	r7, r3, lr
    3afa:	mls	r7, lr, r7, r3
    3afe:	cmp	r7, #0
    3b00:	ite	eq
    3b02:	moveq.w	r7, #366	@ 0x16e
    3b06:	movne	r7, r8
    3b08:	add	r4, r7
    3b0a:	adds	r0, #1
    3b0c:	cmp	r2, r4
    3b0e:	bcs.n	3ade <time2date(unsigned long, datetime_t*)+0x46>
      year++;
    }
    tm->year = year+YEAR0;
    3b10:	addw	r5, r5, #1970	@ 0x7b2
    3b14:	strh	r5, [r1, #0]
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    3b16:	cbnz	r6, 3b8e <time2date(unsigned long, datetime_t*)+0xf6>
    3b18:	movs	r5, #100	@ 0x64
    3b1a:	sdiv	r0, r3, r5
    3b1e:	mls	r0, r5, r0, r3
    3b22:	cbnz	r0, 3b94 <time2date(unsigned long, datetime_t*)+0xfc>
    3b24:	mov.w	r5, #400	@ 0x190
    3b28:	sdiv	r0, r3, r5
    3b2c:	mls	r0, r5, r0, r3
    3b30:	cmp	r0, #0
    3b32:	movw	r0, #365	@ 0x16d
    3b36:	it	eq
    3b38:	moveq.w	r0, #366	@ 0x16e
    time -= days; // now time is days in this year, starting at 0
    3b3c:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    3b3e:	ldr	r7, [pc, #108]	@ (3bac <time2date(unsigned long, datetime_t*)+0x114>)
    time -= days; // now time is days in this year, starting at 0
    3b40:	add	r2, r0
    3b42:	movs	r0, #0
      if (month==1) { // february
    3b44:	cmp	r0, #1
    3b46:	bne.n	3b9a <time2date(unsigned long, datetime_t*)+0x102>
        if (LEAP_YEAR(year)) {
    3b48:	cbnz	r6, 3b9e <time2date(unsigned long, datetime_t*)+0x106>
    3b4a:	movs	r5, #100	@ 0x64
    3b4c:	sdiv	r4, r3, r5
    3b50:	mls	r4, r5, r4, r3
    3b54:	cbnz	r4, 3ba2 <time2date(unsigned long, datetime_t*)+0x10a>
    3b56:	mov.w	r5, #400	@ 0x190
    3b5a:	sdiv	r4, r3, r5
    3b5e:	mls	r4, r5, r4, r3
          monthLength=28;
    3b62:	cmp	r4, #0
    3b64:	ite	eq
    3b66:	moveq	r4, #29
    3b68:	movne	r4, #28
      }
      
      if (time >= monthLength) {
    3b6a:	cmp	r2, r4
    3b6c:	bcc.n	3ba6 <time2date(unsigned long, datetime_t*)+0x10e>
    for (month=0; month<12; month++) {
    3b6e:	adds	r0, #1
        time -= monthLength;
    3b70:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    3b72:	cmp	r0, #12
    3b74:	bne.n	3b44 <time2date(unsigned long, datetime_t*)+0xac>
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    3b76:	adds	r0, #1
    tm->day = time + 1;     // day of month
    3b78:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    3b7a:	strb	r0, [r1, #2]
    tm->day = time + 1;     // day of month
    3b7c:	strb	r2, [r1, #3]
  }
    3b7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3b82:	movw	r7, #365	@ 0x16d
    3b86:	b.n	3b08 <time2date(unsigned long, datetime_t*)+0x70>
    3b88:	mov.w	r7, #366	@ 0x16e
    3b8c:	b.n	3b08 <time2date(unsigned long, datetime_t*)+0x70>
    days -= LEAP_YEAR(year) ? 366 : 365;
    3b8e:	movw	r0, #365	@ 0x16d
    3b92:	b.n	3b3c <time2date(unsigned long, datetime_t*)+0xa4>
    3b94:	mov.w	r0, #366	@ 0x16e
    3b98:	b.n	3b3c <time2date(unsigned long, datetime_t*)+0xa4>
        monthLength = monthDays[month];
    3b9a:	ldrb	r4, [r7, r0]
    3b9c:	b.n	3b6a <time2date(unsigned long, datetime_t*)+0xd2>
          monthLength=28;
    3b9e:	movs	r4, #28
    3ba0:	b.n	3b6a <time2date(unsigned long, datetime_t*)+0xd2>
          monthLength=29;
    3ba2:	movs	r4, #29
    3ba4:	b.n	3b6a <time2date(unsigned long, datetime_t*)+0xd2>
    3ba6:	uxtb	r0, r0
    3ba8:	b.n	3b76 <time2date(unsigned long, datetime_t*)+0xde>
    3baa:	nop
    3bac:	.word	0x20000df0

00003bb0 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    3bb0:	ldrh	r2, [r0, #0]
      if (LEAP_YEAR(ii)) {
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    #endif
    uint32_t days= year*365;
    3bb2:	movw	r3, #365	@ 0x16d
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    3bb6:	adds	r2, #78	@ 0x4e
    3bb8:	uxtb	r2, r2
  {
    3bba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t days= year*365;
    3bbe:	muls	r3, r2
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3bc0:	movs	r4, #0
    3bc2:	movs	r6, #100	@ 0x64
    3bc4:	mov.w	r7, #400	@ 0x190
    3bc8:	cmp	r2, r4
    3bca:	bgt.n	3c1c <date2time(datetime_t*)+0x6c>
    seconds = days*SECS_PER_DAY;

    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3bcc:	addw	r2, r2, #1970	@ 0x7b2
    3bd0:	movs	r1, #100	@ 0x64
    seconds = days*SECS_PER_DAY;
    3bd2:	ldr	r7, [pc, #156]	@ (3c70 <date2time(datetime_t*)+0xc0>)
    for (ii = 1; ii < tm->month; ii++) {
    3bd4:	ldrsb.w	lr, [r0, #2]
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3bd8:	and.w	r8, r2, #3
    seconds = days*SECS_PER_DAY;
    3bdc:	muls	r3, r7
    for (ii = 1; ii < tm->month; ii++) {
    3bde:	ldr	r5, [pc, #148]	@ (3c74 <date2time(datetime_t*)+0xc4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3be0:	udiv	r4, r2, r1
    3be4:	mls	r4, r1, r4, r2
    for (ii = 1; ii < tm->month; ii++) {
    3be8:	movs	r1, #1
    3bea:	cmp	lr, r1
    3bec:	bgt.n	3c3e <date2time(datetime_t*)+0x8e>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    3bee:	ldrsb.w	r2, [r0, #6]
    seconds+= tm->sec;
    3bf2:	mov.w	r4, #3600	@ 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    3bf6:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    3bfa:	rsb	r2, r2, r2, lsl #4
    3bfe:	lsls	r2, r2, #2
    seconds+= tm->sec;
    3c00:	mla	r2, r4, r1, r2
    3c04:	ldrsb.w	r1, [r0, #7]
    3c08:	add	r2, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3c0a:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    3c0e:	ldr	r0, [pc, #96]	@ (3c70 <date2time(datetime_t*)+0xc0>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3c10:	subs	r1, #1
    seconds+= tm->sec;
    3c12:	mla	r0, r0, r1, r2
    return seconds; 
  }
    3c16:	add	r0, r3
    3c18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3c1c:	addw	r1, r4, #1970	@ 0x7b2
    3c20:	lsls	r5, r1, #30
    3c22:	bne.n	3c3a <date2time(datetime_t*)+0x8a>
    3c24:	sdiv	r5, r1, r6
    3c28:	mls	r5, r6, r5, r1
    3c2c:	cbnz	r5, 3c38 <date2time(datetime_t*)+0x88>
    3c2e:	sdiv	r5, r1, r7
    3c32:	mls	r1, r7, r5, r1
    3c36:	cbnz	r1, 3c3a <date2time(datetime_t*)+0x8a>
    3c38:	adds	r3, #1
    3c3a:	adds	r4, #1
    3c3c:	b.n	3bc8 <date2time(datetime_t*)+0x18>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3c3e:	cmp	r1, #2
    3c40:	bne.n	3c66 <date2time(datetime_t*)+0xb6>
    3c42:	cmp.w	r8, #0
    3c46:	bne.n	3c66 <date2time(datetime_t*)+0xb6>
    3c48:	cbnz	r4, 3c58 <date2time(datetime_t*)+0xa8>
    3c4a:	mov.w	ip, #400	@ 0x190
    3c4e:	sdiv	r6, r2, ip
    3c52:	mls	r6, ip, r6, r2
    3c56:	cbnz	r6, 3c66 <date2time(datetime_t*)+0xb6>
        seconds += SECS_PER_DAY * 29;
    3c58:	add.w	r3, r3, #2490368	@ 0x260000
    3c5c:	add.w	r3, r3, #15232	@ 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    3c60:	adds	r1, #1
    3c62:	adds	r5, #1
    3c64:	b.n	3bea <date2time(datetime_t*)+0x3a>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    3c66:	ldrb	r6, [r5, #0]
    3c68:	mla	r3, r7, r6, r3
    3c6c:	b.n	3c60 <date2time(datetime_t*)+0xb0>
    3c6e:	nop
    3c70:	.word	0x00015180
    3c74:	.word	0x20000df0

00003c78 <rtcXferTime()>:
    
    return 1;
  }


  void rtcXferTime(void)
    3c78:	bx	lr

00003c7a <rtcGetTimestamp()>:
      return rtc.stringTimeStamp();
    }
    #else
      return 0;
    #endif
  }
    3c7a:	movs	r0, #0
    3c7c:	bx	lr

00003c7e <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    3c7e:	push	{r4, lr}
    3c80:	mov	r4, r0
    time2date(rtc_get(), t);
    3c82:	bl	ba44 <rtc_get>
    3c86:	mov	r1, r4
    3c88:	bl	3a98 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    3c8c:	movs	r0, #1
    3c8e:	pop	{r4, pc}

00003c90 <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    3c90:	push	{r3, lr}
    rtc_set(date2time(t));
    3c92:	bl	3bb0 <date2time(datetime_t*)>
    3c96:	bl	ba6c <rtc_set>
    return 1;
  }
    3c9a:	movs	r0, #1
    3c9c:	pop	{r3, pc}

00003c9e <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    3c9e:	push	{r0, r1, r4, r5, r6, lr}
    3ca0:	mov	r5, r1
    3ca2:	mov	r4, r2
    3ca4:	mov	r6, r0
    rtc_get_datetime(&t);
    3ca6:	mov	r0, sp
    3ca8:	bl	3c7e <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    3cac:	mov	r0, sp
    t.year=year;
    3cae:	strh.w	r6, [sp]
    t.month=month;
    3cb2:	strb.w	r5, [sp, #2]
    t.day=day;
    3cb6:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    3cba:	bl	3c90 <rtc_set_datetime(datetime_t*)>
  }
    3cbe:	add	sp, #8
    3cc0:	pop	{r4, r5, r6, pc}

00003cc2 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    3cc2:	push	{r0, r1, r4, r5, r6, lr}
    3cc4:	mov	r5, r1
    3cc6:	mov	r4, r2
    3cc8:	mov	r6, r0
    rtc_get_datetime(&t);
    3cca:	mov	r0, sp
    3ccc:	bl	3c7e <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    3cd0:	mov	r0, sp
    t.hour=hour;
    3cd2:	strb.w	r6, [sp, #5]
    t.min=minutes;
    3cd6:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    3cda:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    3cde:	bl	3c90 <rtc_set_datetime(datetime_t*)>
  }
    3ce2:	add	sp, #8
    3ce4:	pop	{r4, r5, r6, pc}

00003ce6 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    3ce6:	push	{r3, r4, r5, lr}
    3ce8:	mov	r4, r0
    3cea:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3cec:	movs	r2, #60	@ 0x3c
    3cee:	mov	r1, r5
    3cf0:	mov	r0, r4
    3cf2:	bl	c338 <usb_mtp_send>
    3cf6:	cmp	r0, #0
    3cf8:	ble.n	3cec <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    3cfa:	pop	{r3, r4, r5, pc}

00003cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::mwrite(const uint8_t *data, int len) 
    3cfc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d00:	mov	r7, r1
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3d02:	add.w	r1, r0, #8192	@ 0x2000
    void MTPD::mwrite(const uint8_t *data, int len) 
    3d06:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    3d08:	ldr.w	r3, [r1, #1064]	@ 0x428
    3d0c:	cbnz	r3, 3d16 <MTPD::mwrite(unsigned char const*, int) [clone .part.0]+0x1a>
    3d0e:	add.w	r2, r0, #544	@ 0x220
    3d12:	ldr	r4, [pc, #92]	@ (3d70 <MTPD::mwrite(unsigned char const*, int) [clone .part.0]+0x74>)
    3d14:	str	r2, [r4, #0]
        write_length_ += len;
    3d16:	add	r3, r6
        
        const uint8_t * src=data;
        //
        int pos = 0; // into data
    3d18:	mov.w	r8, #0
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3d1c:	add.w	r9, r0, #1056	@ 0x420
    3d20:	ldr.w	sl, [pc, #76]	@ 3d70 <MTPD::mwrite(unsigned char const*, int) [clone .part.0]+0x74>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d24:	add.w	r4, r0, #544	@ 0x220
        write_length_ += len;
    3d28:	str.w	r3, [r1, #1064]	@ 0x428
        while(pos<len)
    3d2c:	cmp	r6, r8
    3d2e:	bgt.n	3d34 <MTPD::mwrite(unsigned char const*, int) [clone .part.0]+0x38>
            dst=tx_data_buffer;
          }
        }
      }
    }
    3d30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3d34:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    3d38:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    3d3c:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3d3e:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    3d42:	mov	r0, r3
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    3d44:	cmp	r5, r2
    3d46:	it	ge
    3d48:	movge	r5, r2
    3d4a:	mov	r2, r5
          pos += to_copy;
    3d4c:	add	r8, r5
          memcpy(dst,src,to_copy);
    3d4e:	bl	a2f0 <memcpy>
    3d52:	mov	r3, r0
          src += to_copy;
    3d54:	add	r7, r5
          dst += to_copy;
    3d56:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d58:	cmp	r9, r3
          dst += to_copy;
    3d5a:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d5e:	bne.n	3d2c <MTPD::mwrite(unsigned char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d60:	mov.w	r1, #512	@ 0x200
    3d64:	mov	r0, r4
    3d66:	bl	3ce6 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    3d6a:	str.w	r4, [sl]
    3d6e:	b.n	3d2c <MTPD::mwrite(unsigned char const*, int) [clone .part.0]+0x30>
    3d70:	.word	0x20011d40

00003d74 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3d74:	push	{r4, r5, r6, lr}
    3d76:	mov	r5, r0
    storage_->StartGetObjectHandles(store, parent);
    3d78:	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    3d7a:	subs	r4, r1, #1
    int num = 0;
    3d7c:	movs	r6, #0
    storage_->StartGetObjectHandles(store, parent);
    3d7e:	ldr	r3, [r0, #0]
    3d80:	mov	r1, r4
    3d82:	ldr	r3, [r3, #28]
    3d84:	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    3d86:	ldr	r0, [r5, #0]
    3d88:	mov	r1, r4
    3d8a:	ldr	r3, [r0, #0]
    3d8c:	ldr	r3, [r3, #32]
    3d8e:	blx	r3
    3d90:	cbnz	r0, 3d96 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x22>
  }
    3d92:	mov	r0, r6
    3d94:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    3d96:	adds	r6, #1
    3d98:	b.n	3d86 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>

00003d9a <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3d9a:	ldr	r0, [r0, #0]
    3d9c:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3d9e:	push	{r4, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3da0:	ldr	r4, [r0, #0]
    3da2:	ldr	r4, [r4, #76]	@ 0x4c
    3da4:	blx	r4
    }
    3da6:	movw	r2, #8197	@ 0x2005
    3daa:	movw	r3, #8193	@ 0x2001
    3dae:	cmp	r0, #0
    3db0:	ite	eq
    3db2:	moveq	r0, r2
    3db4:	movne	r0, r3
    3db6:	pop	{r4, pc}

00003db8 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    3db8:	ldr	r0, [r0, #0]
    3dba:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3dbc:	push	{r4}
      return storage_->copy(handle,store1,newHandle);
    3dbe:	ldr	r4, [r0, #0]
    3dc0:	ldr	r4, [r4, #80]	@ 0x50
    3dc2:	mov	ip, r4
    }
    3dc4:	ldr.w	r4, [sp], #4
      return storage_->copy(handle,store1,newHandle);
    3dc8:	bx	ip
	...

00003dcc <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    3dcc:	ldr	r3, [pc, #8]	@ (3dd8 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    3dce:	ldr	r0, [r0, #0]
      sessionID_ = id;
    3dd0:	str	r1, [r3, #0]
      storage_->ResetIndex();
    3dd2:	ldr	r3, [r0, #0]
    3dd4:	ldr	r3, [r3, #68]	@ 0x44
    3dd6:	bx	r3
    3dd8:	.word	0x200126a0

00003ddc <MTPD::pull_packet(unsigned char*)>:
    {
    3ddc:	push	{r4, lr}
    3dde:	mov	r4, r1
      while(!usb_mtp_available());
    3de0:	bl	c308 <usb_mtp_available>
    3de4:	cmp	r0, #0
    3de6:	beq.n	3de0 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    3de8:	mov	r0, r4
    3dea:	movs	r1, #60	@ 0x3c
    }
    3dec:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    3df0:	b.w	c274 <usb_mtp_recv>

00003df4 <MTPD::mwrite(unsigned char const*, int)>:
    { if (write_get_length_) 
    3df4:	add.w	r3, r0, #8192	@ 0x2000
    3df8:	push	{r4, r5}
    3dfa:	ldrb.w	r5, [r3, #1060]	@ 0x424
    3dfe:	cbz	r5, 3e0e <MTPD::mwrite(unsigned char const*, int)+0x1a>
        write_length_ += len;
    3e00:	ldr.w	r1, [r3, #1064]	@ 0x428
    3e04:	add	r1, r2
    }
    3e06:	pop	{r4, r5}
        write_length_ += len;
    3e08:	str.w	r1, [r3, #1064]	@ 0x428
    }
    3e0c:	bx	lr
    3e0e:	pop	{r4, r5}
    3e10:	b.w	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>

00003e14 <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { mwrite((const uint8_t*)&x, sizeof(x)); }
    3e14:	push	{r0, r1, r2, lr}
    3e16:	movs	r2, #1
    3e18:	strb.w	r1, [sp, #7]
    3e1c:	add.w	r1, sp, #7
    3e20:	bl	3df4 <MTPD::mwrite(unsigned char const*, int)>
    3e24:	add	sp, #12
    3e26:	ldr.w	pc, [sp], #4

00003e2a <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { mwrite((const uint8_t*)&x, sizeof(x)); }
    3e2a:	push	{r0, r1, r2, lr}
    3e2c:	movs	r2, #2
    3e2e:	strh.w	r1, [sp, #6]
    3e32:	add.w	r1, sp, #6
    3e36:	bl	3df4 <MTPD::mwrite(unsigned char const*, int)>
    3e3a:	add	sp, #12
    3e3c:	ldr.w	pc, [sp], #4

00003e40 <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    3e40:	push	{r3, r4, r5, lr}
    3e42:	mov	r4, r1
    if (*str) 
    3e44:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    3e46:	mov	r5, r0
    if (*str) 
    3e48:	cbz	r1, 3e72 <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    3e4a:	mov	r0, r4
    3e4c:	subs	r4, #1
    3e4e:	bl	ee80 <strlen>
    3e52:	adds	r1, r0, #1
    3e54:	mov	r0, r5
    3e56:	uxtb	r1, r1
    3e58:	bl	3e14 <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3e5c:	ldrb.w	r1, [r4, #1]!
    3e60:	mov	r0, r5
    3e62:	cbnz	r1, 3e6c <MTPD::writestring(char const*)+0x2c>
  }
    3e64:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3e68:	b.w	3e2a <MTPD::write16(unsigned short)>
    3e6c:	bl	3e2a <MTPD::write16(unsigned short)>
    3e70:	b.n	3e5c <MTPD::writestring(char const*)+0x1c>
  }
    3e72:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    3e76:	b.w	3e14 <MTPD::write8(unsigned char)>
	...

00003e7c <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    3e7c:	movw	r3, #54274	@ 0xd402
    3e80:	cmp	r1, r3
    3e82:	bne.n	3e8a <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    3e84:	ldr	r1, [pc, #4]	@ (3e8c <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    3e86:	b.w	3e40 <MTPD::writestring(char const*)>
  }
    3e8a:	bx	lr
    3e8c:	.word	0x200013c6

00003e90 <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    3e90:	movw	r3, #54274	@ 0xd402
    3e94:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    3e96:	push	{r4, lr}
    3e98:	mov	r4, r0
    switch (prop) {
    3e9a:	bne.n	3ece <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    3e9c:	bl	3e2a <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    3ea0:	mov	r0, r4
    3ea2:	movw	r1, #65535	@ 0xffff
    3ea6:	bl	3e2a <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    3eaa:	mov	r0, r4
    3eac:	movs	r1, #0
    3eae:	bl	3e14 <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    3eb2:	mov	r0, r4
    3eb4:	ldr	r1, [pc, #24]	@ (3ed0 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3eb6:	bl	3e40 <MTPD::writestring(char const*)>
    3eba:	mov	r0, r4
    3ebc:	ldr	r1, [pc, #16]	@ (3ed0 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3ebe:	bl	3e40 <MTPD::writestring(char const*)>
        write8(0);       // no form
    3ec2:	mov	r0, r4
    3ec4:	movs	r1, #0
  }
    3ec6:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    3eca:	b.w	3e14 <MTPD::write8(unsigned char)>
  }
    3ece:	pop	{r4, pc}
    3ed0:	.word	0x200013c6

00003ed4 <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { mwrite((const uint8_t*)&x, sizeof(x)); }
    3ed4:	push	{r0, r1, r2, lr}
    3ed6:	movs	r2, #4
    3ed8:	str	r1, [sp, #4]
    3eda:	add.w	r1, sp, r2
    3ede:	bl	3df4 <MTPD::mwrite(unsigned char const*, int)>
    3ee2:	add	sp, #12
    3ee4:	ldr.w	pc, [sp], #4

00003ee8 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    3ee8:	push	{r4, r5, r6, lr}
    3eea:	mov	r4, r0
    3eec:	sub	sp, #24
    write16(100);  // MTP version
    3eee:	movs	r1, #100	@ 0x64
    3ef0:	ldr	r6, [pc, #240]	@ (3fe4 <MTPD::WriteDescriptor()+0xfc>)
    3ef2:	bl	3e2a <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    3ef6:	movs	r1, #6
    3ef8:	mov	r0, r4
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3efa:	movs	r5, #0
    write32(6);    // MTP extension
    3efc:	bl	3ed4 <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    3f00:	movs	r1, #100	@ 0x64
    3f02:	mov	r0, r4
    3f04:	bl	3e2a <MTPD::write16(unsigned short)>
    writestring("microsoft.com: 1.0;");
    3f08:	ldr	r1, [pc, #220]	@ (3fe8 <MTPD::WriteDescriptor()+0x100>)
    3f0a:	mov	r0, r4
    3f0c:	bl	3e40 <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    3f10:	movs	r1, #0
    3f12:	mov	r0, r4
    3f14:	bl	3e2a <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    3f18:	movs	r1, #20
    3f1a:	mov	r0, r4
    3f1c:	bl	3ed4 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3f20:	adds	r5, #1
    3f22:	ldrh.w	r1, [r6], #2
    3f26:	mov	r0, r4
    3f28:	bl	3e2a <MTPD::write16(unsigned short)>
    3f2c:	cmp	r5, #20
    3f2e:	bne.n	3f20 <MTPD::WriteDescriptor()+0x38>
    write32(supported_event_num);      
    3f30:	movs	r1, #4
    3f32:	mov	r0, r4
    3f34:	bl	3ed4 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    3f38:	movw	r1, #16388	@ 0x4004
    3f3c:	mov	r0, r4
    3f3e:	bl	3e2a <MTPD::write16(unsigned short)>
    3f42:	movw	r1, #16389	@ 0x4005
    3f46:	mov	r0, r4
    3f48:	bl	3e2a <MTPD::write16(unsigned short)>
    3f4c:	movw	r1, #16395	@ 0x400b
    3f50:	mov	r0, r4
    3f52:	bl	3e2a <MTPD::write16(unsigned short)>
    3f56:	movw	r1, #16396	@ 0x400c
    3f5a:	mov	r0, r4
    3f5c:	bl	3e2a <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    3f60:	movs	r1, #1
    3f62:	mov	r0, r4
    3f64:	bl	3ed4 <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    3f68:	movw	r1, #54274	@ 0xd402
    3f6c:	mov	r0, r4
    3f6e:	bl	3e2a <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    3f72:	movs	r1, #0
    3f74:	mov	r0, r4
    3f76:	bl	3ed4 <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    3f7a:	movs	r1, #2
    3f7c:	mov	r0, r4
    3f7e:	bl	3ed4 <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    3f82:	mov.w	r1, #12288	@ 0x3000
    3f86:	mov	r0, r4
    3f88:	bl	3e2a <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    3f8c:	movw	r1, #12289	@ 0x3001
    3f90:	mov	r0, r4
    3f92:	bl	3e2a <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    3f96:	ldr	r1, [pc, #84]	@ (3fec <MTPD::WriteDescriptor()+0x104>)
    3f98:	mov	r0, r4
    3f9a:	bl	3e40 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    3f9e:	ldr	r1, [pc, #80]	@ (3ff0 <MTPD::WriteDescriptor()+0x108>)
    3fa0:	mov	r0, r4
    3fa2:	bl	3e40 <MTPD::writestring(char const*)>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    3fa6:	vldr	s0, [pc, #76]	@ 3ff4 <MTPD::WriteDescriptor()+0x10c>
    3faa:	add	r2, sp, #4
    3fac:	movs	r1, #2
    3fae:	movs	r0, #3
    3fb0:	bl	b598 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    3fb4:	mov	r2, r5
    3fb6:	ldr	r1, [pc, #64]	@ (3ff8 <MTPD::WriteDescriptor()+0x110>)
    3fb8:	add	r0, sp, #4
    3fba:	bl	ec2a <strlcat>
    writestring( buf );    
    3fbe:	add	r1, sp, #4
    3fc0:	mov	r0, r4
    3fc2:	bl	3e40 <MTPD::writestring(char const*)>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3fc6:	ldr	r1, [pc, #52]	@ (3ffc <MTPD::WriteDescriptor()+0x114>)
    3fc8:	add	r2, sp, #4
    writestring( buf );    
    3fca:	movs	r3, #10
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3fcc:	ldrh.w	r0, [r1, #2]!
    3fd0:	subs	r3, #1
    3fd2:	strb.w	r0, [r2], #1
    3fd6:	bne.n	3fcc <MTPD::WriteDescriptor()+0xe4>
    writestring(buf);    
    3fd8:	add	r1, sp, #4
    3fda:	mov	r0, r4
    3fdc:	bl	3e40 <MTPD::writestring(char const*)>
  }
    3fe0:	add	sp, #24
    3fe2:	pop	{r4, r5, r6, pc}
    3fe4:	.word	0x20000cc0
    3fe8:	.word	0x200013cd
    3fec:	.word	0x200013e1
    3ff0:	.word	0x200013c6
    3ff4:	.word	0x3fcb851f
    3ff8:	.word	0x200013e6
    3ffc:	.word	0x20002420

00004000 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    4000:	push	{r4, r5, r6, lr}
    4002:	mov	r4, r0
    uint32_t num=storage_->get_FSCount();
    4004:	ldr	r0, [r0, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    4006:	movs	r6, #0
    uint32_t num=storage_->get_FSCount();
    4008:	ldr	r3, [r0, #0]
    400a:	ldr	r3, [r3, #4]
    400c:	blx	r3
    write32(num); // number of storages (disks)
    400e:	mov	r1, r0
    uint32_t num=storage_->get_FSCount();
    4010:	mov	r5, r0
    write32(num); // number of storages (disks)
    4012:	mov	r0, r4
    4014:	bl	3ed4 <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    4018:	cmp	r6, r5
    401a:	bne.n	401e <MTPD::WriteStorageIDs()+0x1e>
  }
    401c:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    401e:	adds	r6, #1
    4020:	mov	r0, r4
    4022:	mov	r1, r6
    4024:	bl	3ed4 <MTPD::write32(unsigned long)>
    4028:	b.n	4018 <MTPD::WriteStorageIDs()+0x18>

0000402a <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    402a:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    402c:	add.w	r7, r0, #8192	@ 0x2000
  { uint32_t store = Storage2Store(storage);
    4030:	mov	r4, r0
    4032:	mov	r6, r2
    if (write_get_length_) {
    4034:	ldrb.w	r3, [r7, #1060]	@ 0x424
    4038:	cbz	r3, 4048 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    403a:	bl	3d74 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    403e:	adds	r0, #1
      write_length_ *= 4;
    4040:	lsls	r0, r0, #2
    4042:	str.w	r0, [r7, #1064]	@ 0x428
  }
    4046:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    4048:	subs	r5, r1, #1
      write32(GetNumObjects(storage, parent));
    404a:	bl	3d74 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    404e:	mov	r1, r0
    4050:	mov	r0, r4
    4052:	bl	3ed4 <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    4056:	ldr	r0, [r4, #0]
    4058:	mov	r2, r6
    405a:	mov	r1, r5
    405c:	ldr	r3, [r0, #0]
    405e:	ldr	r3, [r3, #28]
    4060:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    4062:	ldr	r0, [r4, #0]
    4064:	mov	r1, r5
    4066:	ldr	r3, [r0, #0]
    4068:	ldr	r3, [r3, #32]
    406a:	blx	r3
    406c:	mov	r1, r0
    406e:	cmp	r0, #0
    4070:	beq.n	4046 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    4072:	mov	r0, r4
    4074:	bl	3ed4 <MTPD::write32(unsigned long)>
    4078:	b.n	4062 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
	...

0000407c <MTPD::GetObjectInfo(unsigned long)>:
  {
    407c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4080:	mov	r4, r0
    4082:	sub	sp, #420	@ 0x1a4
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    4084:	ldr	r0, [r0, #0]
    4086:	add	r5, sp, #96	@ 0x60
    4088:	add	r6, sp, #32
    408a:	ldr	r3, [r0, #0]
    408c:	add.w	r8, sp, #22
    4090:	add	r7, sp, #28
    4092:	add	r2, sp, #160	@ 0xa0
    4094:	str	r5, [sp, #12]
    4096:	str	r6, [sp, #8]
    4098:	str.w	r8, [sp, #4]
    409c:	str	r7, [sp, #0]
    409e:	ldr.w	r9, [r3, #36]	@ 0x24
    40a2:	add	r3, sp, #24
    40a4:	blx	r9
    uint32_t storage = Store2Storage(store);
    40a6:	ldrh.w	r1, [sp, #22]
    write32(storage); // storage
    40aa:	mov	r0, r4
    40ac:	adds	r1, #1
    40ae:	bl	3ed4 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    40b2:	ldr	r3, [sp, #24]
    40b4:	movw	r1, #12289	@ 0x3001
    40b8:	mov	r0, r4
    40ba:	adds	r3, #1
    40bc:	it	ne
    40be:	movne	r1, #0
    40c0:	bl	3e2a <MTPD::write16(unsigned short)>
    write16(0);  // protection
    40c4:	mov	r0, r4
    40c6:	movs	r1, #0
    40c8:	bl	3e2a <MTPD::write16(unsigned short)>
    write32(size); // size
    40cc:	ldr	r1, [sp, #24]
    40ce:	mov	r0, r4
    40d0:	bl	3ed4 <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    40d4:	mov	r0, r4
    40d6:	movs	r1, #0
    40d8:	bl	3e2a <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    40dc:	mov	r0, r4
    40de:	movs	r1, #0
    40e0:	bl	3ed4 <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    40e4:	mov	r0, r4
    40e6:	movs	r1, #0
    40e8:	bl	3ed4 <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    40ec:	mov	r0, r4
    40ee:	movs	r1, #0
    40f0:	bl	3ed4 <MTPD::write32(unsigned long)>
    write32(0); // pix width
    40f4:	mov	r0, r4
    40f6:	movs	r1, #0
    40f8:	bl	3ed4 <MTPD::write32(unsigned long)>
    write32(0); // pix height
    40fc:	mov	r0, r4
    40fe:	movs	r1, #0
    4100:	bl	3ed4 <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    4104:	mov	r0, r4
    4106:	movs	r1, #0
    4108:	bl	3ed4 <MTPD::write32(unsigned long)>
    write32(parent); // parent
    410c:	ldr	r1, [sp, #28]
    410e:	mov	r0, r4
    4110:	bl	3ed4 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    4114:	ldr	r1, [sp, #24]
    4116:	mov	r0, r4
    4118:	adds	r3, r1, #1
    411a:	negs	r1, r3
    411c:	adcs	r1, r3
    411e:	bl	3e2a <MTPD::write16(unsigned short)>
    write32(0); // association description
    4122:	mov	r0, r4
    4124:	movs	r1, #0
    4126:	bl	3ed4 <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    412a:	mov	r0, r4
    412c:	movs	r1, #0
    412e:	bl	3ed4 <MTPD::write32(unsigned long)>
    writestring(filename);
    4132:	add	r1, sp, #160	@ 0xa0
    4134:	mov	r0, r4
    4136:	bl	3e40 <MTPD::writestring(char const*)>
    writestring(create);  // date created
    413a:	mov	r1, r6
    413c:	mov	r0, r4
    413e:	bl	3e40 <MTPD::writestring(char const*)>
    writestring(modify);  // date modified
    4142:	mov	r1, r5
    4144:	mov	r0, r4
    4146:	bl	3e40 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    414a:	ldr	r1, [pc, #12]	@ (4158 <MTPD::GetObjectInfo(unsigned long)+0xdc>)
    414c:	mov	r0, r4
    414e:	bl	3e40 <MTPD::writestring(char const*)>
  }
    4152:	add	sp, #420	@ 0x1a4
    4154:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4158:	.word	0x20001052

0000415c <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    415c:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    415e:	ldr	r6, [pc, #36]	@ (4184 <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4160:	movs	r4, #0
    4162:	ldr	r7, [pc, #36]	@ (4188 <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    4164:	mov	r5, r0
      write32(propertyListNum);
    4166:	ldr	r1, [r6, #0]
    4168:	bl	3ed4 <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    416c:	ldr	r3, [r6, #0]
    416e:	cmp	r3, r4
    4170:	bhi.n	4174 <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    4172:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4174:	ldrh.w	r1, [r7], #2
    4178:	mov	r0, r5
    417a:	adds	r4, #1
    417c:	bl	3e2a <MTPD::write16(unsigned short)>
    4180:	b.n	416c <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    4182:	nop
    4184:	.word	0x20002400
    4188:	.word	0x20000cac

0000418c <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    418c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4190:	mov	r4, r0
    4192:	sub	sp, #420	@ 0x1a4
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    4194:	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    4196:	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    4198:	add.w	r8, sp, #22
    419c:	add.w	r9, sp, #96	@ 0x60
    41a0:	ldr	r3, [r0, #0]
    41a2:	add.w	sl, sp, #32
    41a6:	add	r6, sp, #28
    41a8:	str.w	r8, [sp, #4]
    41ac:	add	r2, sp, #160	@ 0xa0
    41ae:	str.w	r9, [sp, #12]
    41b2:	str.w	sl, [sp, #8]
    { char name[MAX_FILENAME_LEN];
    41b6:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    41b8:	str	r6, [sp, #0]
    41ba:	ldr.w	fp, [r3, #36]	@ 0x24
    41be:	add	r3, sp, #24
    41c0:	blx	fp
      switch(p2)
    41c2:	movw	r2, #56331	@ 0xdc0b
      uint32_t storage = Store2Storage(store);
    41c6:	ldrh.w	r3, [sp, #22]
      switch(p2)
    41ca:	cmp	r5, r2
      dir = size == 0xFFFFFFFFUL;
    41cc:	ldr	r1, [sp, #24]
      uint32_t storage = Store2Storage(store);
    41ce:	add.w	r8, r3, #1
      switch(p2)
    41d2:	bhi.n	41f4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    41d4:	cmp.w	r5, #56320	@ 0xdc00
    41d8:	bls.n	4204 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    41da:	sub.w	r5, r5, #56320	@ 0xdc00
    41de:	subs	r5, #1
    41e0:	cmp	r5, #10
    41e2:	bhi.n	4204 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    41e4:	tbb	[pc, r5]
    41e8:	.word	0x39201611
    41ec:	.word	0x27220e0e
    41f0:	.short	0x0e29
    41f2:	.byte	0x2b
    41f3:	.byte	0x00
    41f4:	movw	r3, #56385	@ 0xdc41
    41f8:	cmp	r5, r3
    41fa:	beq.n	4248 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbc>
    41fc:	movw	r3, #56388	@ 0xdc44
    4200:	cmp	r5, r3
    4202:	beq.n	422c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa0>
    }
    4204:	add	sp, #420	@ 0x1a4
    4206:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          write32(storage);
    420a:	mov	r1, r8
          write32(0);
    420c:	mov	r0, r4
    420e:	bl	3ed4 <MTPD::write32(unsigned long)>
    }
    4212:	b.n	4204 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(dir?0x3001:0x3000);
    4214:	adds	r1, #1
    4216:	movw	r1, #12289	@ 0x3001
    421a:	it	ne
    421c:	movne.w	r1, #12288	@ 0x3000
          write16(0);
    4220:	mov	r0, r4
    4222:	bl	3e2a <MTPD::write16(unsigned short)>
          break;
    4226:	b.n	4204 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(0);
    4228:	movs	r1, #0
    422a:	b.n	4220 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
          writestring(name);
    422c:	add	r1, sp, #160	@ 0xa0
          writestring(modify);
    422e:	mov	r0, r4
    4230:	bl	3e40 <MTPD::writestring(char const*)>
          break;
    4234:	b.n	4204 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          writestring(create);
    4236:	mov	r1, sl
    4238:	b.n	422e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          writestring(modify);
    423a:	mov	r1, r9
    423c:	b.n	422e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          write32((store==parent)? 0: parent);
    423e:	ldr	r1, [r6, #0]
    4240:	cmp	r3, r1
    4242:	it	eq
    4244:	moveq	r1, #0
    4246:	b.n	420c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
          write32(p1);
    4248:	mov	r1, r7
    424a:	mov	r0, r4
    424c:	bl	3ed4 <MTPD::write32(unsigned long)>
          write32(parent);
    4250:	ldr	r1, [r6, #0]
    4252:	mov	r0, r4
    4254:	bl	3ed4 <MTPD::write32(unsigned long)>
          write32(storage);
    4258:	mov	r1, r8
    425a:	mov	r0, r4
    425c:	bl	3ed4 <MTPD::write32(unsigned long)>
          write32(0);
    4260:	movs	r1, #0
    4262:	b.n	420c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>

00004264 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    4264:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4268:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    426a:	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    426c:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    426e:	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4270:	ldr	r3, [r0, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4272:	mov.w	fp, #0
    4276:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    4278:	ldr	r6, [pc, #228]	@ (4360 <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    427a:	ldr	r3, [r3, #20]
    427c:	blx	r3
    427e:	cmp	r0, #0
    4280:	mov	r0, r4
    4282:	ite	eq
    4284:	moveq	r1, #4
    4286:	movne	r1, #1
    4288:	bl	3e2a <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    428c:	ldr	r0, [r4, #0]
    428e:	mov	r1, r7
    4290:	ldr	r3, [r0, #0]
    4292:	ldr	r3, [r3, #24]
    4294:	blx	r3
    4296:	adds	r1, r0, #1
    4298:	mov	r0, r4
    429a:	uxth	r1, r1
    429c:	bl	3e2a <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    42a0:	mov	r0, r4
    42a2:	movs	r1, #0
    42a4:	bl	3e2a <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    42a8:	ldr	r0, [r4, #0]
    42aa:	mov	r1, r7
    42ac:	ldr	r3, [r0, #0]
    42ae:	ldr	r3, [r3, #12]
    42b0:	blx	r3
    42b2:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    42b4:	ldr	r0, [r4, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    42b6:	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    42b8:	mov	r1, r7
    42ba:	ldr	r3, [r0, #0]
    42bc:	ldr	r3, [r3, #16]
    42be:	blx	r3
    42c0:	ldr	r3, [r6, #0]
    42c2:	mov	r9, r0
    42c4:	mov	sl, r1
    42c6:	ldr	r3, [r3, #4]
    42c8:	movs	r2, #5
    42ca:	ldr	r1, [pc, #152]	@ (4364 <MTPD::GetStorageInfo(unsigned long)+0x100>)
    42cc:	mov	r0, r6
    42ce:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    42d0:	movs	r3, #10
    42d2:	mov	r2, r5
    42d4:	mov	r0, r6
    42d6:	strd	r3, fp, [sp]
    42da:	mov	r3, r8
    42dc:	bl	c852 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    42e0:	mov	r0, r6
    42e2:	bl	c7ec <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    42e6:	ldr	r3, [r6, #0]
    42e8:	ldr	r1, [pc, #124]	@ (4368 <MTPD::GetStorageInfo(unsigned long)+0x104>)
    42ea:	movs	r2, #5
    42ec:	ldr	r3, [r3, #4]
    42ee:	mov	r0, r6
    42f0:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    42f2:	movs	r3, #10
    42f4:	mov	r2, r9
    42f6:	mov	r0, r6
    42f8:	str	r3, [sp, #0]
    42fa:	mov	r3, sl
    42fc:	str.w	fp, [sp, #4]
    4300:	bl	c852 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    4304:	mov	r0, r6
    4306:	bl	c7ec <Print::println()>
  void MTPD::write64(uint64_t x) { mwrite((const uint8_t*)&x, sizeof(x)); }
    430a:	movs	r2, #8
    430c:	mov	r0, r4
    430e:	add.w	r1, sp, r2
    4312:	strd	r5, r8, [sp, #8]
    4316:	bl	3df4 <MTPD::mwrite(unsigned char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    431a:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { mwrite((const uint8_t*)&x, sizeof(x)); }
    431e:	mov.w	r2, #8
    4322:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    4324:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { mwrite((const uint8_t*)&x, sizeof(x)); }
    4328:	add.w	r1, sp, r2
    432c:	strd	r5, r3, [sp, #8]
    4330:	bl	3df4 <MTPD::mwrite(unsigned char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    4334:	mov	r0, r4
    4336:	mov.w	r1, #4294967295
    433a:	bl	3ed4 <MTPD::write32(unsigned long)>
    const char *name = storage_->get_FSName(store);
    433e:	ldr	r0, [r4, #0]
    4340:	mov	r1, r7
    4342:	ldr	r3, [r0, #0]
    4344:	ldr	r3, [r3, #8]
    4346:	blx	r3
    4348:	mov	r1, r0
    writestring(name);  // storage descriptor
    434a:	mov	r0, r4
    434c:	bl	3e40 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    4350:	ldr	r1, [pc, #24]	@ (436c <MTPD::GetStorageInfo(unsigned long)+0x108>)
    4352:	mov	r0, r4
  }
    4354:	add	sp, #20
    4356:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    435a:	b.w	3e40 <MTPD::writestring(char const*)>
    435e:	nop
    4360:	.word	0x20001e58
    4364:	.word	0x200013f1
    4368:	.word	0x200013f7
    436c:	.word	0x20001052

00004370 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    4370:	movw	r2, #56331	@ 0xdc0b
    4374:	cmp	r1, r2
    {
    4376:	push	{r0, r1, r4, r6, r7, lr}
    4378:	mov	r4, r0
      switch(p1)
    437a:	bhi.n	439c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    437c:	cmp.w	r1, #56320	@ 0xdc00
    4380:	bls.n	43ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    4382:	sub.w	r3, r1, #56320	@ 0xdc00
    4386:	subs	r3, #1
    4388:	cmp	r3, #10
    438a:	bhi.n	43ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    438c:	tbb	[pc, r3]
    4390:	.word	0x413e2210
    4394:	.word	0x69570e0e
    4398:	.short	0x0e75
    439a:	.byte	0x78
    439b:	.byte	0x00
    439c:	movw	r2, #56385	@ 0xdc41
    43a0:	cmp	r1, r2
    43a2:	beq.n	4486 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    43a4:	movw	r2, #56388	@ 0xdc44
    43a8:	cmp	r1, r2
    43aa:	beq.n	4468 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    43ac:	add	sp, #8
    43ae:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    43b0:	movw	r1, #56321	@ 0xdc01
          write16(0xDC0B);
    43b4:	mov	r0, r4
    43b6:	bl	3e2a <MTPD::write16(unsigned short)>
          write16(6);
    43ba:	mov	r0, r4
    43bc:	movs	r1, #6
    43be:	bl	3e2a <MTPD::write16(unsigned short)>
          write8(0); //get
    43c2:	mov	r0, r4
    43c4:	movs	r1, #0
    43c6:	bl	3e14 <MTPD::write8(unsigned char)>
          write32(0);
    43ca:	movs	r1, #0
    43cc:	mov	r0, r4
    43ce:	bl	3ed4 <MTPD::write32(unsigned long)>
          write32(0);
    43d2:	b.n	43f6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    43d4:	movw	r1, #56322	@ 0xdc02
          write16(0xDC03);
    43d8:	mov	r0, r4
    43da:	bl	3e2a <MTPD::write16(unsigned short)>
          write16(0x004);
    43de:	movs	r1, #4
    43e0:	mov	r0, r4
    43e2:	bl	3e2a <MTPD::write16(unsigned short)>
          write8(0); //get
    43e6:	movs	r1, #0
    43e8:	mov	r0, r4
    43ea:	bl	3e14 <MTPD::write8(unsigned char)>
          write16(0);
    43ee:	movs	r1, #0
    43f0:	mov	r0, r4
    43f2:	bl	3e2a <MTPD::write16(unsigned short)>
          write32(0);
    43f6:	mov	r0, r4
    43f8:	movs	r1, #0
    43fa:	bl	3ed4 <MTPD::write32(unsigned long)>
          write8(0);
    43fe:	movs	r1, #0
    4400:	mov	r0, r4
    }
    4402:	add	sp, #8
    4404:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    4408:	b.w	3e14 <MTPD::write8(unsigned char)>
          write16(0xDC03);
    440c:	movw	r1, #56323	@ 0xdc03
    4410:	b.n	43d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    4412:	movw	r1, #56324	@ 0xdc04
    4416:	bl	3e2a <MTPD::write16(unsigned short)>
          write16(0x008);
    441a:	movs	r1, #8
    441c:	mov	r0, r4
    441e:	bl	3e2a <MTPD::write16(unsigned short)>
          write8(0); //get
    4422:	movs	r1, #0
    4424:	mov	r0, r4
    4426:	bl	3e14 <MTPD::write8(unsigned char)>
          write64(0);
    442a:	movs	r2, #0
    442c:	movs	r3, #0
    442e:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { mwrite((const uint8_t*)&x, sizeof(x)); }
    4432:	movs	r2, #8
    4434:	mov	r1, sp
    4436:	mov	r0, r4
    4438:	bl	3df4 <MTPD::mwrite(unsigned char const*, int)>
          write32(0);
    443c:	b.n	43f6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    443e:	movw	r1, #56327	@ 0xdc07
    4442:	bl	3e2a <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    4446:	movw	r1, #65535	@ 0xffff
    444a:	mov	r0, r4
    444c:	bl	3e2a <MTPD::write16(unsigned short)>
          write8(1); //get/set
    4450:	movs	r1, #1
          write8(0); //get
    4452:	mov	r0, r4
    4454:	bl	3e14 <MTPD::write8(unsigned char)>
          write8(0);
    4458:	movs	r1, #0
    445a:	mov	r0, r4
    445c:	bl	3e14 <MTPD::write8(unsigned char)>
    4460:	b.n	43f6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    4462:	movw	r1, #56328	@ 0xdc08
          write16(0xDC09);
    4466:	mov	r0, r4
          write16(0xDC44);
    4468:	bl	3e2a <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    446c:	movw	r1, #65535	@ 0xffff
    4470:	mov	r0, r4
    4472:	bl	3e2a <MTPD::write16(unsigned short)>
          write8(0); //get
    4476:	movs	r1, #0
    4478:	b.n	4452 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    447a:	movw	r1, #56329	@ 0xdc09
    447e:	b.n	4466 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    4480:	movw	r1, #56331	@ 0xdc0b
    4484:	b.n	43b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    4486:	bl	3e2a <MTPD::write16(unsigned short)>
          write16(0x0A);
    448a:	movs	r1, #10
    448c:	mov	r0, r4
    448e:	movs	r6, #0
    4490:	bl	3e2a <MTPD::write16(unsigned short)>
          write8(0); //get
    4494:	movs	r7, #0
    4496:	movs	r1, #0
    4498:	mov	r0, r4
    449a:	bl	3e14 <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { mwrite((const uint8_t*)&x, sizeof(x)); }
    449e:	movs	r2, #8
    44a0:	mov	r1, sp
    44a2:	mov	r0, r4
    44a4:	strd	r6, r7, [sp]
    44a8:	bl	3df4 <MTPD::mwrite(unsigned char const*, int)>
          write64(0);
    44ac:	strd	r6, r7, [sp]
    44b0:	b.n	4432 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

000044b2 <MTPD::GetObject(unsigned long)>:

    void MTPD::GetObject(uint32_t object_id) 
    {
    44b2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44b6:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    44b8:	ldr	r0, [r0, #0]
    {
    44ba:	sub	sp, #20
      uint32_t size = storage_->GetSize(object_id);
    44bc:	ldr	r3, [r0, #0]

      if (write_get_length_) {
    44be:	add.w	r5, r6, #8192	@ 0x2000
    {
    44c2:	str	r1, [sp, #12]
      uint32_t size = storage_->GetSize(object_id);
    44c4:	ldr	r3, [r3, #40]	@ 0x28
    44c6:	blx	r3
      if (write_get_length_) {
    44c8:	ldrb.w	r4, [r5, #1060]	@ 0x424
      uint32_t size = storage_->GetSize(object_id);
    44cc:	mov	r8, r0
      if (write_get_length_) {
    44ce:	cbz	r4, 44e0 <MTPD::GetObject(unsigned long)+0x2e>
        write_length_ += size;
    44d0:	ldr.w	r3, [r5, #1064]	@ 0x428
    44d4:	add	r3, r0
    44d6:	str.w	r3, [r5, #1064]	@ 0x428
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    44da:	add	sp, #20
    44dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    44e0:	mov.w	r3, #8192	@ 0x2000
        uint32_t len = sizeof(MTPHeader);
    44e4:	movs	r7, #12
    44e6:	add.w	fp, r6, #1056	@ 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    44ea:	add.w	r9, r6, #544	@ 0x220
        disk_pos=DISK_BUFFER_SIZE;
    44ee:	str.w	r3, [r5, #1056]	@ 0x420
        uint32_t pos = 0; // into data
    44f2:	str	r4, [sp, #8]
        while(pos<size)
    44f4:	ldr	r3, [sp, #8]
    44f6:	cmp	r3, r8
    44f8:	bcc.n	4510 <MTPD::GetObject(unsigned long)+0x5e>
        if(len>0)
    44fa:	cmp	r7, #0
    44fc:	beq.n	44da <MTPD::GetObject(unsigned long)+0x28>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    44fe:	mov.w	r1, #512	@ 0x200
    4502:	add.w	r0, r6, #544	@ 0x220
    }
    4506:	add	sp, #20
    4508:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    450c:	b.w	3ce6 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4510:	ldr	r3, [sp, #8]
    4512:	sub.w	sl, r8, r3
          if(disk_pos==DISK_BUFFER_SIZE)
    4516:	ldr.w	r3, [r5, #1056]	@ 0x420
    451a:	cmp.w	r3, #8192	@ 0x2000
    451e:	bne.n	4544 <MTPD::GetObject(unsigned long)+0x92>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    4520:	ldr	r0, [r6, #0]
    4522:	cmp.w	sl, #8192	@ 0x2000
    4526:	mov	r2, sl
    4528:	ldr	r3, [r0, #0]
    452a:	it	cs
    452c:	movcs.w	r2, #8192	@ 0x2000
    4530:	str	r2, [sp, #0]
    4532:	ldr	r3, [r3, #48]	@ 0x30
    4534:	ldrd	r2, r1, [sp, #8]
    4538:	mov	r4, r3
    453a:	mov	r3, fp
    453c:	blx	r4
            disk_pos=0;
    453e:	movs	r3, #0
    4540:	str.w	r3, [r5, #1056]	@ 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    4544:	rsb	r3, r7, #512	@ 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4548:	ldr.w	r1, [r5, #1056]	@ 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    454c:	add.w	r0, r9, r7
    4550:	cmp	sl, r3
    4552:	it	cs
    4554:	movcs	sl, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4556:	rsb	r3, r1, #8192	@ 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    455a:	add	r1, fp
    455c:	cmp	sl, r3
    455e:	it	cs
    4560:	movcs	sl, r3
    4562:	mov	r2, sl
          len += to_copy;
    4564:	add	r7, sl
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4566:	bl	a2f0 <memcpy>
          disk_pos += to_copy;
    456a:	ldr.w	r3, [r5, #1056]	@ 0x420
          if(len==MTP_TX_SIZE)
    456e:	cmp.w	r7, #512	@ 0x200
          disk_pos += to_copy;
    4572:	add	r3, sl
    4574:	str.w	r3, [r5, #1056]	@ 0x420
          pos += to_copy;
    4578:	ldr	r3, [sp, #8]
    457a:	add	r3, sl
    457c:	str	r3, [sp, #8]
          if(len==MTP_TX_SIZE)
    457e:	bne.n	44f4 <MTPD::GetObject(unsigned long)+0x42>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4580:	mov	r1, r7
    4582:	mov	r0, r9
            len=0;
    4584:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4586:	bl	3ce6 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    458a:	b.n	44f4 <MTPD::GetObject(unsigned long)+0x42>

0000458c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    458c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4590:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    4592:	ldr	r0, [r0, #0]
    {
    4594:	sub	sp, #28
    4596:	mov	r4, r3
      uint32_t size = storage_->GetSize(object_id);
    4598:	ldr	r3, [r0, #0]
    {
    459a:	mov	r6, r2
    459c:	str	r1, [sp, #20]

      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
    459e:	add.w	r5, r8, #8192	@ 0x2000
      uint32_t size = storage_->GetSize(object_id);
    45a2:	ldr	r3, [r3, #40]	@ 0x28
    45a4:	blx	r3
      size -= offset;
    45a6:	subs	r0, r0, r6
      if(NumBytes == 0xffffffff) NumBytes=size;
    45a8:	cmp.w	r4, #4294967295
    45ac:	it	eq
    45ae:	moveq	r4, r0
      if (NumBytes<size) size=NumBytes;
    45b0:	cmp	r4, r0
    45b2:	mov	r3, r4
    45b4:	it	cs
    45b6:	movcs	r3, r0
    45b8:	str	r3, [sp, #12]
      if (write_get_length_) {
    45ba:	ldrb.w	r3, [r5, #1060]	@ 0x424
    45be:	str	r3, [sp, #16]
    45c0:	cbz	r3, 45d6 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x4a>
        write_length_ += size;
    45c2:	ldr.w	r3, [r5, #1064]	@ 0x428
    45c6:	ldr	r2, [sp, #12]
    45c8:	add	r3, r2
    45ca:	str.w	r3, [r5, #1064]	@ 0x428
            len=0;
          }
        }
      }
      return size;
    }
    45ce:	ldr	r0, [sp, #12]
    45d0:	add	sp, #28
    45d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    45d6:	mov.w	r3, #8192	@ 0x2000
        uint32_t len = sizeof(MTPHeader);
    45da:	movs	r7, #12
    45dc:	add.w	fp, r8, #1056	@ 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    45e0:	add.w	r9, r8, #544	@ 0x220
        disk_pos=DISK_BUFFER_SIZE;
    45e4:	str.w	r3, [r5, #1056]	@ 0x420
        while(pos<size)
    45e8:	ldr	r3, [sp, #12]
    45ea:	cmp	r3, r6
    45ec:	bls.n	45ce <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x42>
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    45ee:	ldr	r3, [sp, #12]
    45f0:	sub.w	sl, r3, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    45f4:	ldr.w	r3, [r5, #1056]	@ 0x420
    45f8:	cmp.w	r3, #8192	@ 0x2000
    45fc:	bne.n	4624 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x98>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    45fe:	ldr.w	r0, [r8]
    4602:	cmp.w	sl, #8192	@ 0x2000
    4606:	mov	r2, sl
    4608:	ldr	r1, [sp, #20]
    460a:	ldr	r3, [r0, #0]
    460c:	it	cs
    460e:	movcs.w	r2, #8192	@ 0x2000
    4612:	str	r2, [sp, #0]
    4614:	mov	r2, r6
    4616:	ldr	r3, [r3, #48]	@ 0x30
    4618:	mov	r4, r3
    461a:	mov	r3, fp
    461c:	blx	r4
            disk_pos=0;
    461e:	ldr	r3, [sp, #16]
    4620:	str.w	r3, [r5, #1056]	@ 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    4624:	rsb	r3, r7, #512	@ 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4628:	ldr.w	r1, [r5, #1056]	@ 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    462c:	add.w	r0, r9, r7
    4630:	cmp	sl, r3
    4632:	it	cs
    4634:	movcs	sl, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4636:	rsb	r3, r1, #8192	@ 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    463a:	add	r1, fp
    463c:	cmp	sl, r3
    463e:	it	cs
    4640:	movcs	sl, r3
    4642:	mov	r2, sl
          len += to_copy;
    4644:	add	r7, sl
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4646:	bl	a2f0 <memcpy>
          disk_pos += to_copy;
    464a:	ldr.w	r3, [r5, #1056]	@ 0x420
          if(len==MTP_TX_SIZE)
    464e:	cmp.w	r7, #512	@ 0x200
          pos += to_copy;
    4652:	add	r6, sl
          disk_pos += to_copy;
    4654:	add	r3, sl
    4656:	str.w	r3, [r5, #1056]	@ 0x420
          if(len==MTP_TX_SIZE)
    465a:	bne.n	45e8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x5c>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    465c:	mov	r1, r7
    465e:	mov	r0, r9
            len=0;
    4660:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4662:	bl	3ce6 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4666:	b.n	45e8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x5c>

00004668 <MTPD::read(char*, unsigned long)>:
      printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    4668:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    466c:	mov	r8, r0
    466e:	mov	r5, r1
      static int index=0;
      if(!size) 
    4670:	mov	r4, r2
    4672:	ldr.w	fp, [pc, #84]	@ 46c8 <MTPD::read(char*, unsigned long)+0x60>
    4676:	cbz	r2, 46be <MTPD::read(char*, unsigned long)+0x56>

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    4678:	add.w	r9, r0, #32
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
          index=0;
    467c:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    4680:	ldr.w	r6, [fp]
    4684:	rsb	r7, r6, #512	@ 0x200
    4688:	cmp	r7, r4
    468a:	it	cs
    468c:	movcs	r7, r4
        if (data) {
    468e:	cbz	r5, 469e <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    4690:	mov	r0, r5
          data += to_copy;
    4692:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    4694:	mov	r2, r7
    4696:	add.w	r1, r9, r6
    469a:	bl	a2f0 <memcpy>
        index += to_copy;
    469e:	add	r6, r7
        size -= to_copy;
    46a0:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    46a2:	cmp.w	r6, #512	@ 0x200
        index += to_copy;
    46a6:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    46aa:	bne.n	46b8 <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    46ac:	mov	r1, r9
    46ae:	mov	r0, r8
    46b0:	bl	3ddc <MTPD::pull_packet(unsigned char*)>
          index=0;
    46b4:	str.w	sl, [fp]
      while (size) {
    46b8:	cmp	r4, #0
    46ba:	bne.n	4680 <MTPD::read(char*, unsigned long)+0x18>
    46bc:	b.n	46c2 <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    46be:	str.w	r2, [fp]
        }
      }
    }
    46c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46c6:	nop
    46c8:	.word	0x20011d3c

000046cc <MTPD::ReadMTPHeader()>:
  {
    46cc:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    46ce:	movs	r2, #12
    46d0:	add	r1, sp, #4
    46d2:	bl	4668 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    46d6:	ldrh.w	r3, [sp, #8]
    46da:	cmp	r3, #2
      return header.len - 12;
    46dc:	itet	eq
    46de:	ldreq	r0, [sp, #4]
      return 0;
    46e0:	movne	r0, #0
      return header.len - 12;
    46e2:	subeq	r0, #12
  }
    46e4:	add	sp, #20
    46e6:	ldr.w	pc, [sp], #4

000046ea <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    46ea:	push	{r0, r1, r2, lr}
    46ec:	movs	r2, #1
    46ee:	add.w	r1, sp, #7
    46f2:	bl	4668 <MTPD::read(char*, unsigned long)>
    46f6:	ldrb.w	r0, [sp, #7]
    46fa:	add	sp, #12
    46fc:	ldr.w	pc, [sp], #4

00004700 <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4700:	push	{r0, r1, r2, lr}
    4702:	movs	r2, #2
    4704:	add.w	r1, sp, #6
    4708:	bl	4668 <MTPD::read(char*, unsigned long)>
    470c:	ldrh.w	r0, [sp, #6]
    4710:	add	sp, #12
    4712:	ldr.w	pc, [sp], #4

00004716 <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4716:	push	{r0, r1, r2, lr}
    4718:	movs	r2, #4
    471a:	add.w	r1, sp, r2
    471e:	bl	4668 <MTPD::read(char*, unsigned long)>
    4722:	ldr	r0, [sp, #4]
    4724:	add	sp, #12
    4726:	ldr.w	pc, [sp], #4

0000472a <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    472a:	push	{r4, r5, r6, lr}
    472c:	mov	r5, r1
    472e:	mov	r6, r0
    int len = read8();
    4730:	bl	46ea <MTPD::read8()>
    if (!buffer) {
    4734:	cbz	r5, 473e <MTPD::readstring(char*)+0x14>
    4736:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    4738:	cmp	r5, r4
    473a:	bne.n	474e <MTPD::readstring(char*)+0x24>
  }
    473c:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    473e:	sxth	r2, r0
    4740:	mov	r1, r5
    4742:	mov	r0, r6
    4744:	lsls	r2, r2, #1
  }
    4746:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    474a:	b.w	4668 <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    474e:	mov	r0, r6
    4750:	bl	4700 <MTPD::read16()>
    4754:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    4758:	b.n	4738 <MTPD::readstring(char*)+0xe>

0000475a <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    475a:	push	{r4, r5, lr}
    475c:	mov	r4, r0
    475e:	sub	sp, #260	@ 0x104
    4760:	mov	r5, r1
      //printContainer(); 
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
    4762:	bl	46cc <MTPD::ReadMTPHeader()>
        readstring(filename);
    4766:	mov	r1, sp
    4768:	mov	r0, r4
    476a:	bl	472a <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    476e:	ldr	r0, [r4, #0]
    4770:	mov	r2, sp
    4772:	mov	r1, r5
    4774:	ldr	r3, [r0, #0]
    4776:	ldr	r3, [r3, #72]	@ 0x48
    4778:	blx	r3
      }
      else
        return 0x2005;
    }
    477a:	movw	r2, #8197	@ 0x2005
    477e:	movw	r3, #8193	@ 0x2001
    4782:	cmp	r0, #0
    4784:	ite	eq
    4786:	moveq	r0, r2
    4788:	movne	r0, r3
    478a:	add	sp, #260	@ 0x104
    478c:	pop	{r4, r5, pc}
	...

00004790 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4790:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4794:	mov	r4, r0
    4796:	sub	sp, #264	@ 0x108
    4798:	mov	r6, r1
      pull_packet(rx_data_buffer);
    479a:	add.w	r1, r0, #32
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    479e:	mov	r7, r2
      pull_packet(rx_data_buffer);
    47a0:	bl	3ddc <MTPD::pull_packet(unsigned char*)>
        index=0;
    47a4:	movs	r2, #0
    47a6:	ldr	r3, [pc, #200]	@ (4870 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xe0>)
      int len=ReadMTPHeader();
    47a8:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    47aa:	add.w	r9, sp, #8
        index=0;
    47ae:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    47b0:	bl	46cc <MTPD::ReadMTPHeader()>
    47b4:	mov	sl, r0
      read32(); len -=4; // storage
    47b6:	mov	r0, r4
    47b8:	bl	4716 <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    47bc:	mov	r0, r4
    47be:	bl	4700 <MTPD::read16()>
    47c2:	movw	r3, #12289	@ 0x3001
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    47c6:	mvn.w	r5, #2
      read32(); len -=4; // sequence number
    47ca:	sub.w	sl, sl, #52	@ 0x34
      bool dir = (read16() == 0x3001); len -=2; // format
    47ce:	subs	r3, r0, r3
      read16(); len -=2; // protection
    47d0:	mov	r0, r4
      uint32_t store = Storage2Store(storage);
    47d2:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    47d4:	rsbs	r8, r3, #0
    47d8:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    47dc:	bl	4700 <MTPD::read16()>
      read32(); len -=4; // size
    47e0:	mov	r0, r4
    47e2:	bl	4716 <MTPD::read32()>
      read16(); len -=2; // thumb format
    47e6:	mov	r0, r4
    47e8:	bl	4700 <MTPD::read16()>
      read32(); len -=4; // thumb size
    47ec:	mov	r0, r4
    47ee:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // thumb width
    47f2:	mov	r0, r4
    47f4:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // thumb height
    47f8:	mov	r0, r4
    47fa:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // pix width
    47fe:	mov	r0, r4
    4800:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // pix height
    4804:	mov	r0, r4
    4806:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // bit depth
    480a:	mov	r0, r4
    480c:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // parent
    4810:	mov	r0, r4
    4812:	bl	4716 <MTPD::read32()>
      read16(); len -=2; // association type
    4816:	mov	r0, r4
    4818:	bl	4700 <MTPD::read16()>
      read32(); len -=4; // association description
    481c:	mov	r0, r4
    481e:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // sequence number
    4822:	mov	r0, r4
    4824:	bl	4716 <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4828:	mov	r1, r9
    482a:	mov	r0, r4
    482c:	bl	472a <MTPD::readstring(char*)>
    4830:	mov	r0, r9
    4832:	bl	ee80 <strlen>
    4836:	sub.w	r5, r5, r0, lsl #1
    483a:	add	r5, sl
      while(len>=4) { read32(); len-=4;}
    483c:	cmp	r5, #3
    483e:	bgt.n	485a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xca>
      while(len) {read8(); len--;}
    4840:	cbnz	r5, 4864 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd4>
      return storage_->Create(store, parent, dir, filename);
    4842:	ldr	r0, [r4, #0]
    4844:	mov	r2, r7
    4846:	mov	r1, r6
    4848:	ldr	r3, [r0, #0]
    484a:	str.w	r9, [sp]
    484e:	ldr	r4, [r3, #44]	@ 0x2c
    4850:	mov	r3, r8
    4852:	blx	r4
    }
    4854:	add	sp, #264	@ 0x108
    4856:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while(len>=4) { read32(); len-=4;}
    485a:	mov	r0, r4
    485c:	subs	r5, #4
    485e:	bl	4716 <MTPD::read32()>
    4862:	b.n	483c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
      while(len) {read8(); len--;}
    4864:	mov	r0, r4
    4866:	subs	r5, #1
    4868:	bl	46ea <MTPD::read8()>
    486c:	b.n	4840 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xb0>
    486e:	nop
    4870:	.word	0x20011d3c

00004874 <MTPD::SendObject()>:
    { 
    4874:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4878:	add.w	r9, r0, #32
    { 
    487c:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    487e:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    4882:	mov	r1, r9
      disk_pos=0;
    4884:	add.w	r7, r4, #8192	@ 0x2000
      pull_packet(rx_data_buffer);
    4888:	bl	3ddc <MTPD::pull_packet(unsigned char*)>
        index=0;
    488c:	ldr	r3, [pc, #208]	@ (4960 <MTPD::SendObject()+0xec>)
    488e:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    4890:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4892:	add.w	fp, r4, #1056	@ 0x420
        index=0;
    4896:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4898:	bl	46cc <MTPD::ReadMTPHeader()>
      disk_pos=0;
    489c:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    489e:	mov	r6, r0
      disk_pos=0;
    48a0:	str.w	r3, [r7, #1056]	@ 0x420
      while((int)len>0)
    48a4:	cmp	r6, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    48a6:	ldr.w	r3, [r7, #1056]	@ 0x420
      while((int)len>0)
    48aa:	bgt.n	48c0 <MTPD::SendObject()+0x4c>
        if(storage_->mwrite((const uint8_t *)disk_buffer, disk_pos)<disk_pos) return false;
    48ac:	ldr	r0, [r4, #0]
    48ae:	ldr	r2, [r0, #0]
      if(disk_pos)
    48b0:	cmp	r3, #0
    48b2:	bne.n	494a <MTPD::SendObject()+0xd6>
      storage_->close();
    48b4:	ldr	r0, [r4, #0]
    48b6:	ldr	r3, [r0, #0]
    48b8:	ldr	r3, [r3, #56]	@ 0x38
    48ba:	blx	r3
      return true;
    48bc:	movs	r0, #1
    48be:	b.n	4918 <MTPD::SendObject()+0xa4>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    48c0:	rsb	r8, sl, #512	@ 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    48c4:	rsb	r5, r3, #8192	@ 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    48c8:	add.w	r1, r9, sl
    48cc:	add.w	r0, fp, r3
    48d0:	cmp	r8, r6
    48d2:	it	cs
    48d4:	movcs	r8, r6
    48d6:	cmp	r5, r8
    48d8:	it	cs
    48da:	movcs	r5, r8
    48dc:	mov	r2, r5
    48de:	bl	a2f0 <memcpy>
        disk_pos += to_copy;
    48e2:	ldr.w	r2, [r7, #1056]	@ 0x420
    48e6:	add	r2, r5
        if(disk_pos==DISK_BUFFER_SIZE)
    48e8:	cmp.w	r2, #8192	@ 0x2000
        disk_pos += to_copy;
    48ec:	str.w	r2, [r7, #1056]	@ 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    48f0:	beq.n	4906 <MTPD::SendObject()+0x92>
        len -= to_copy;
    48f2:	subs	r6, r6, r5
        if(len>0)  // we have still data to be transfered
    48f4:	cmp	r6, #0
    48f6:	beq.n	48a4 <MTPD::SendObject()+0x30>
        { pull_packet(rx_data_buffer);
    48f8:	mov	r1, r9
    48fa:	mov	r0, r4
          index=0;
    48fc:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    4900:	bl	3ddc <MTPD::pull_packet(unsigned char*)>
          index=0;
    4904:	b.n	48a4 <MTPD::SendObject()+0x30>
          if(storage_->mwrite((const uint8_t *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    4906:	ldr	r0, [r4, #0]
    4908:	mov	r1, fp
    490a:	ldr	r3, [r0, #0]
    490c:	ldr	r3, [r3, #52]	@ 0x34
    490e:	blx	r3
    4910:	cmp.w	r0, #8192	@ 0x2000
    4914:	bcs.n	491e <MTPD::SendObject()+0xaa>
    4916:	movs	r0, #0
    }
    4918:	add	sp, #12
    491a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    491e:	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4920:	subs.w	r2, r8, r5
          disk_pos =0;
    4924:	str.w	r3, [r7, #1056]	@ 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4928:	beq.n	48f2 <MTPD::SendObject()+0x7e>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    492a:	add.w	r1, sl, r5
    492e:	mov	r0, fp
    4930:	str	r2, [sp, #4]
            len -= bytes;
    4932:	sub.w	r6, r6, r8
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    4936:	add	r1, r9
    4938:	bl	a2f0 <memcpy>
            disk_pos += bytes;
    493c:	ldr.w	r3, [r7, #1056]	@ 0x420
    4940:	ldr	r2, [sp, #4]
    4942:	add	r3, r2
    4944:	str.w	r3, [r7, #1056]	@ 0x420
            len -= bytes;
    4948:	b.n	48f4 <MTPD::SendObject()+0x80>
        if(storage_->mwrite((const uint8_t *)disk_buffer, disk_pos)<disk_pos) return false;
    494a:	ldr	r5, [r2, #52]	@ 0x34
    494c:	add.w	r1, r4, #1056	@ 0x420
    4950:	mov	r2, r3
    4952:	blx	r5
    4954:	ldr.w	r3, [r7, #1056]	@ 0x420
    4958:	cmp	r0, r3
    495a:	bcs.n	48b4 <MTPD::SendObject()+0x40>
    495c:	b.n	4916 <MTPD::SendObject()+0xa2>
    495e:	nop
    4960:	.word	0x20011d3c

00004964 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4964:	push	{r4, r5, r6, lr}
    4966:	mov	r5, r1
    4968:	add.w	r1, r0, #32
    496c:	mov	r6, r2
    496e:	mov	r4, r0
    4970:	bl	3ddc <MTPD::pull_packet(unsigned char*)>
        index=0;
    4974:	ldr	r3, [pc, #28]	@ (4994 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    4976:	movs	r2, #0
    4978:	str	r2, [r3, #0]
      if(p2==0xDC07)
    497a:	movw	r3, #56327	@ 0xdc07
    497e:	cmp	r6, r3
    4980:	bne.n	498e <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    4982:	mov	r1, r5
    4984:	mov	r0, r4
    }
    4986:	ldmia.w	sp!, {r4, r5, r6, lr}
    498a:	b.w	475a <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    498e:	movw	r0, #8197	@ 0x2005
    4992:	pop	{r4, r5, r6, pc}
    4994:	.word	0x20011d3c

00004998 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    4998:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    499c:	sub	sp, #60	@ 0x3c
    499e:	mov	r4, r0
    49a0:	bl	c308 <usb_mtp_available>
    49a4:	cmp	r0, #0
    49a6:	beq.w	4dc2 <MTPD::loop()+0x42a>
      if(fetch_packet(rx_data_buffer))
    49aa:	add.w	r3, r4, #32
      return usb_mtp_recv(data_buffer,60);
    49ae:	movs	r1, #60	@ 0x3c
    49b0:	mov	r0, r3
      if(fetch_packet(rx_data_buffer))
    49b2:	str	r3, [sp, #12]
      return usb_mtp_recv(data_buffer,60);
    49b4:	bl	c274 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    49b8:	cmp	r0, #0
    49ba:	beq.w	4dc2 <MTPD::loop()+0x42a>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    49be:	ldr	r3, [r4, #40]	@ 0x28
    49c0:	ldr	r1, [pc, #696]	@ (4c7c <MTPD::loop()+0x2e4>)
    49c2:	str	r3, [sp, #4]
    49c4:	ldrh	r3, [r4, #36]	@ 0x24
    49c6:	ldr	r0, [pc, #696]	@ (4c80 <MTPD::loop()+0x2e8>)
    49c8:	str	r3, [sp, #0]
    49ca:	ldr	r3, [r4, #32]
    49cc:	ldrh	r2, [r4, #38]	@ 0x26
    49ce:	bl	c824 <Print::printf(char const*, ...)>
    49d2:	ldr	r3, [r4, #32]
    49d4:	cmp	r3, #12
    49d6:	bls.n	4a02 <MTPD::loop()+0x6a>
    49d8:	ldr	r2, [r4, #44]	@ 0x2c
    49da:	ldr	r1, [pc, #680]	@ (4c84 <MTPD::loop()+0x2ec>)
    49dc:	ldr	r0, [pc, #672]	@ (4c80 <MTPD::loop()+0x2e8>)
    49de:	bl	c824 <Print::printf(char const*, ...)>
    49e2:	ldr	r3, [r4, #32]
    49e4:	cmp	r3, #16
    49e6:	bls.n	4a02 <MTPD::loop()+0x6a>
    49e8:	ldr	r2, [r4, #48]	@ 0x30
    49ea:	ldr	r1, [pc, #664]	@ (4c84 <MTPD::loop()+0x2ec>)
    49ec:	ldr	r0, [pc, #656]	@ (4c80 <MTPD::loop()+0x2e8>)
    49ee:	bl	c824 <Print::printf(char const*, ...)>
    49f2:	ldr	r3, [r4, #32]
    49f4:	cmp	r3, #20
    49f6:	bls.n	4a02 <MTPD::loop()+0x6a>
    49f8:	ldr	r2, [r4, #52]	@ 0x34
    49fa:	ldr	r1, [pc, #648]	@ (4c84 <MTPD::loop()+0x2ec>)
    49fc:	ldr	r0, [pc, #640]	@ (4c80 <MTPD::loop()+0x2e8>)
    49fe:	bl	c824 <Print::printf(char const*, ...)>
    4a02:	ldr	r1, [pc, #644]	@ (4c88 <MTPD::loop()+0x2f0>)
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    4a04:	add.w	r5, r4, #8192	@ 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4a08:	ldr	r0, [pc, #628]	@ (4c80 <MTPD::loop()+0x2e8>)

        int return_code =0x2001; //OK use as default value
    4a0a:	movw	r7, #8193	@ 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4a0e:	bl	c824 <Print::printf(char const*, ...)>
        int id = CONTAINER->transaction_id;
    4a12:	ldr	r1, [r4, #40]	@ 0x28
        int typ= CONTAINER->type;
    4a14:	ldrh	r0, [r4, #36]	@ 0x24
        int op = CONTAINER->op;
    4a16:	ldrh	r2, [r4, #38]	@ 0x26
        int p1 = CONTAINER->params[0];
    4a18:	ldr.w	r9, [r4, #44]	@ 0x2c
        int len= CONTAINER->len;
    4a1c:	ldr.w	sl, [r4, #32]
        int id = CONTAINER->transaction_id;
    4a20:	str	r1, [sp, #16]
        int p1 = CONTAINER->params[0];
    4a22:	mov	r6, r9
        int p3 = CONTAINER->params[2];
    4a24:	ldrd	r8, r3, [r4, #48]	@ 0x30
        TID=id;
    4a28:	str.w	r1, [r5, #1068]	@ 0x42c
        int return_code =0x2001; //OK use as default value
    4a2c:	movw	r1, #8197	@ 0x2005
    4a30:	cmp	r0, #2
    4a32:	it	eq
    4a34:	moveq	r7, r1

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    4a36:	movw	r0, #4123	@ 0x101b
    4a3a:	cmp	r2, r0
    4a3c:	bhi.n	4a8e <MTPD::loop()+0xf6>
    4a3e:	cmp.w	r2, #4096	@ 0x1000
    4a42:	bhi.n	4a48 <MTPD::loop()+0xb0>
    4a44:	mov	r7, r1
    4a46:	b.n	4b0c <MTPD::loop()+0x174>
    4a48:	sub.w	r2, r2, #4096	@ 0x1000
    4a4c:	subs	r2, #1
    4a4e:	cmp	r2, #26
    4a50:	bhi.w	4f38 <MTPD::loop()+0x5a0>
    4a54:	tbh	[pc, r2, lsl #1]
    4a58:	.word	0x0056002c
    4a5c:	.word	0x0070005a
    4a60:	.word	0x00b70092
    4a64:	.word	0x00ed00c2
    4a68:	.word	0x0270011a
    4a6c:	.word	0x014e013f
    4a70:	.word	0x02700158
    4a74:	.word	0x02700270
    4a78:	.word	0x02700270
    4a7c:	.word	0x01600270
    4a80:	.word	0x02700185
    4a84:	.word	0x02700270
    4a88:	.word	0x01b801aa
    4a8c:	.short	0x01cc
    4a8e:	add.w	r3, r2, #26496	@ 0x6780
    4a92:	adds	r3, #127	@ 0x7f
    4a94:	uxth	r3, r3
    4a96:	cmp	r3, #3
    4a98:	bhi.n	4a44 <MTPD::loop()+0xac>
    4a9a:	sub.w	r2, r2, #38912	@ 0x9800
    4a9e:	subs	r2, #2
    4aa0:	cmp	r2, #2
    4aa2:	bhi.w	4e44 <MTPD::loop()+0x4ac>
    4aa6:	tbh	[pc, r2, lsl #1]
    4aaa:	.short	0x01f2
    4aac:	.word	0x02400219
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    4ab0:	movs	r6, #0
    4ab2:	movs	r3, #1
    4ab4:	mov	r0, r4
    4ab6:	strb.w	r3, [r5, #1060]	@ 0x424
    4aba:	str.w	r6, [r5, #1064]	@ 0x428
    4abe:	bl	3ee8 <MTPD::WriteDescriptor()>
    4ac2:	ldr.w	r3, [r5, #1064]	@ 0x428
    4ac6:	mov	r0, r4
    4ac8:	movs	r2, #12
    4aca:	adds	r3, #12
    4acc:	add	r1, sp, #24
    4ace:	str	r3, [sp, #24]
    4ad0:	movs	r3, #2
    4ad2:	strh.w	r3, [sp, #28]
    4ad6:	ldrh	r3, [r4, #38]	@ 0x26
    4ad8:	strh.w	r3, [sp, #30]
    4adc:	ldr	r3, [r4, #40]	@ 0x28
    4ade:	str.w	r6, [r5, #1064]	@ 0x428
    4ae2:	strb.w	r6, [r5, #1060]	@ 0x424
    4ae6:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4ae8:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    4aec:	mov	r0, r4
    4aee:	bl	3ee8 <MTPD::WriteDescriptor()>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    4af2:	ldr	r1, [sp, #24]
    4af4:	ubfx	r1, r1, #0, #9
    4af8:	cbz	r1, 4b0c <MTPD::loop()+0x174>
    4afa:	add.w	r0, r4, #544	@ 0x220
    4afe:	bl	3ce6 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    4b02:	b.n	4b0c <MTPD::loop()+0x174>
            openSession(p1);
    4b04:	mov	r1, r9
    4b06:	mov	r0, r4
    4b08:	bl	3dcc <MTPD::openSession(unsigned long)>
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    4b0c:	movs	r3, #3
            CONTAINER->len=len;
    4b0e:	str.w	sl, [r4, #32]
            CONTAINER->op=return_code;
    4b12:	strh	r7, [r4, #38]	@ 0x26
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    4b14:	mov	r2, sl
            CONTAINER->type=3;
    4b16:	strh	r3, [r4, #36]	@ 0x24
            CONTAINER->transaction_id=id;
    4b18:	ldr	r3, [sp, #16]
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4b1a:	ldr	r1, [sp, #12]
            CONTAINER->params[0]=p1;
    4b1c:	strd	r3, r9, [r4, #40]	@ 0x28
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4b20:	add.w	r4, r4, #544	@ 0x220
    4b24:	mov	r0, r4
    4b26:	bl	a2f0 <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4b2a:	mov	r1, sl
    4b2c:	mov	r0, r4
        }
      }
    }
    4b2e:	add	sp, #60	@ 0x3c
    4b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4b34:	b.w	3ce6 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    4b38:	movs	r6, #0
    4b3a:	movs	r3, #1
    4b3c:	mov	r0, r4
    4b3e:	strb.w	r3, [r5, #1060]	@ 0x424
    4b42:	str.w	r6, [r5, #1064]	@ 0x428
    4b46:	bl	4000 <MTPD::WriteStorageIDs()>
    4b4a:	ldr.w	r3, [r5, #1064]	@ 0x428
    4b4e:	mov	r0, r4
    4b50:	movs	r2, #12
    4b52:	adds	r3, #12
    4b54:	add	r1, sp, #24
    4b56:	str	r3, [sp, #24]
    4b58:	movs	r3, #2
    4b5a:	strh.w	r3, [sp, #28]
    4b5e:	ldrh	r3, [r4, #38]	@ 0x26
    4b60:	strh.w	r3, [sp, #30]
    4b64:	ldr	r3, [r4, #40]	@ 0x28
    4b66:	str.w	r6, [r5, #1064]	@ 0x428
    4b6a:	strb.w	r6, [r5, #1060]	@ 0x424
    4b6e:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4b70:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    4b74:	mov	r0, r4
    4b76:	bl	4000 <MTPD::WriteStorageIDs()>
    4b7a:	b.n	4af2 <MTPD::loop()+0x15a>
            TRANSMIT(GetStorageInfo(p1));
    4b7c:	mov.w	r8, #0
    4b80:	movs	r3, #1
    4b82:	mov	r1, r9
    4b84:	mov	r0, r4
    4b86:	strb.w	r3, [r5, #1060]	@ 0x424
    4b8a:	str.w	r8, [r5, #1064]	@ 0x428
    4b8e:	bl	4264 <MTPD::GetStorageInfo(unsigned long)>
    4b92:	ldr.w	r3, [r5, #1064]	@ 0x428
    4b96:	add	r1, sp, #24
    4b98:	mov	r0, r4
    4b9a:	adds	r3, #12
    4b9c:	movs	r2, #12
    4b9e:	str	r3, [sp, #24]
    4ba0:	movs	r3, #2
    4ba2:	strh.w	r3, [sp, #28]
    4ba6:	ldrh	r3, [r4, #38]	@ 0x26
    4ba8:	strh.w	r3, [sp, #30]
    4bac:	ldr	r3, [r4, #40]	@ 0x28
    4bae:	str.w	r8, [r5, #1064]	@ 0x428
    4bb2:	strb.w	r8, [r5, #1060]	@ 0x424
    4bb6:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4bb8:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    4bbc:	mov	r1, r9
    4bbe:	mov	r0, r4
    4bc0:	bl	4264 <MTPD::GetStorageInfo(unsigned long)>
    4bc4:	b.n	4af2 <MTPD::loop()+0x15a>
            if (p2) 
    4bc6:	cmp.w	r8, #0
    4bca:	bne.w	4f3e <MTPD::loop()+0x5a6>
                p1 = GetNumObjects(p1, p3);
    4bce:	mov	r1, r9
    4bd0:	mov	r2, r3
    4bd2:	mov	r0, r4
    4bd4:	bl	3d74 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    4bd8:	mov	r9, r0
    4bda:	b.n	4b0c <MTPD::loop()+0x174>
            if (p2) 
    4bdc:	cmp.w	r8, #0
    4be0:	bne.w	4f3e <MTPD::loop()+0x5a6>
              TRANSMIT(GetObjectHandles(p1, p3));
    4be4:	movs	r2, #1
    4be6:	mov	r1, r9
    4be8:	mov	r0, r4
    4bea:	str.w	r8, [r5, #1064]	@ 0x428
    4bee:	strb.w	r2, [r5, #1060]	@ 0x424
    4bf2:	mov	r2, r3
    4bf4:	str	r3, [sp, #20]
    4bf6:	bl	402a <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4bfa:	ldr.w	r2, [r5, #1064]	@ 0x428
    4bfe:	add	r1, sp, #24
    4c00:	mov	r0, r4
    4c02:	adds	r2, #12
    4c04:	str	r2, [sp, #24]
    4c06:	movs	r2, #2
    4c08:	strh.w	r2, [sp, #28]
    4c0c:	ldrh	r2, [r4, #38]	@ 0x26
    4c0e:	strh.w	r2, [sp, #30]
    4c12:	ldr	r2, [r4, #40]	@ 0x28
    4c14:	str.w	r8, [r5, #1064]	@ 0x428
    4c18:	str	r2, [sp, #32]
    4c1a:	movs	r2, #12
    4c1c:	strb.w	r8, [r5, #1060]	@ 0x424
    { if (write_get_length_) 
    4c20:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    4c24:	ldr	r3, [sp, #20]
    4c26:	mov	r1, r9
    4c28:	mov	r0, r4
    4c2a:	mov	r2, r3
    4c2c:	bl	402a <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4c30:	b.n	4af2 <MTPD::loop()+0x15a>
            TRANSMIT(GetObjectInfo(p1));
    4c32:	mov.w	r8, #0
    4c36:	movs	r3, #1
    4c38:	mov	r1, r9
    4c3a:	mov	r0, r4
    4c3c:	strb.w	r3, [r5, #1060]	@ 0x424
    4c40:	str.w	r8, [r5, #1064]	@ 0x428
    4c44:	bl	407c <MTPD::GetObjectInfo(unsigned long)>
    4c48:	ldr.w	r3, [r5, #1064]	@ 0x428
    4c4c:	add	r1, sp, #24
    4c4e:	mov	r0, r4
    4c50:	adds	r3, #12
    4c52:	movs	r2, #12
    4c54:	str	r3, [sp, #24]
    4c56:	movs	r3, #2
    4c58:	strh.w	r3, [sp, #28]
    4c5c:	ldrh	r3, [r4, #38]	@ 0x26
    4c5e:	strh.w	r3, [sp, #30]
    4c62:	ldr	r3, [r4, #40]	@ 0x28
    4c64:	str.w	r8, [r5, #1064]	@ 0x428
    4c68:	strb.w	r8, [r5, #1060]	@ 0x424
    4c6c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4c6e:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    4c72:	mov	r1, r9
    4c74:	mov	r0, r4
    4c76:	bl	407c <MTPD::GetObjectInfo(unsigned long)>
    4c7a:	b.n	4af2 <MTPD::loop()+0x15a>
    4c7c:	.word	0x200013fd
    4c80:	.word	0x20001e58
    4c84:	.word	0x2000140b
    4c88:	.word	0x20001050
            TRANSMIT(GetObject(p1));
    4c8c:	mov.w	r8, #0
    4c90:	movs	r3, #1
    4c92:	mov	r1, r9
    4c94:	mov	r0, r4
    4c96:	strb.w	r3, [r5, #1060]	@ 0x424
    4c9a:	str.w	r8, [r5, #1064]	@ 0x428
    4c9e:	bl	44b2 <MTPD::GetObject(unsigned long)>
    4ca2:	ldr.w	r3, [r5, #1064]	@ 0x428
    4ca6:	add	r1, sp, #24
    4ca8:	mov	r0, r4
    4caa:	adds	r3, #12
    4cac:	movs	r2, #12
    4cae:	str	r3, [sp, #24]
    4cb0:	movs	r3, #2
    4cb2:	strh.w	r3, [sp, #28]
    4cb6:	ldrh	r3, [r4, #38]	@ 0x26
    4cb8:	strh.w	r3, [sp, #30]
    4cbc:	ldr	r3, [r4, #40]	@ 0x28
    4cbe:	str.w	r8, [r5, #1064]	@ 0x428
    4cc2:	strb.w	r8, [r5, #1060]	@ 0x424
    4cc6:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4cc8:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    4ccc:	mov	r1, r9
    4cce:	mov	r0, r4
    4cd0:	bl	44b2 <MTPD::GetObject(unsigned long)>
    4cd4:	b.n	4af2 <MTPD::loop()+0x15a>
              if (p2) {
    4cd6:	cmp.w	r8, #0
    4cda:	bne.w	4f3e <MTPD::loop()+0x5a6>
                if (!storage_->DeleteObject(p1)) {
    4cde:	ldr	r0, [r4, #0]
    4ce0:	mov	r1, r9
    4ce2:	ldr	r3, [r0, #0]
    4ce4:	ldr	r3, [r3, #60]	@ 0x3c
    4ce6:	blx	r3
                  return_code = 0x2012; // partial deletion
    4ce8:	movw	r3, #8210	@ 0x2012
              len = 12;
    4cec:	cmp	r0, #0
    4cee:	it	eq
    4cf0:	moveq	r7, r3
    4cf2:	b.n	4b0c <MTPD::loop()+0x174>
              p3 = SendObjectInfo(p1, // storage
    4cf4:	mov	r2, r8
    4cf6:	mov	r1, r9
    4cf8:	mov	r0, r4
              len = 12 + 3 * 4;
    4cfa:	mov.w	sl, #24
              p3 = SendObjectInfo(p1, // storage
    4cfe:	bl	4790 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    4d02:	strd	r8, r0, [r4, #48]	@ 0x30
              break;
    4d06:	b.n	4b0c <MTPD::loop()+0x174>
              if(!SendObject()) return_code = 0x2005;
    4d08:	mov	r0, r4
              len = 12;
    4d0a:	mov.w	sl, #12
              if(!SendObject()) return_code = 0x2005;
    4d0e:	bl	4874 <MTPD::SendObject()>
              len = 12;
    4d12:	movw	r3, #8197	@ 0x2005
    4d16:	b.n	4cec <MTPD::loop()+0x354>
              TRANSMIT(GetDevicePropDesc(p1));
    4d18:	mov.w	r8, #0
    4d1c:	movs	r3, #1
    4d1e:	mov	r1, r9
    4d20:	mov	r0, r4
    4d22:	strb.w	r3, [r5, #1060]	@ 0x424
    4d26:	str.w	r8, [r5, #1064]	@ 0x428
    4d2a:	bl	3e90 <MTPD::GetDevicePropDesc(unsigned long)>
    4d2e:	ldr.w	r3, [r5, #1064]	@ 0x428
    4d32:	add	r1, sp, #24
    4d34:	mov	r0, r4
    4d36:	adds	r3, #12
    4d38:	movs	r2, #12
    4d3a:	str	r3, [sp, #24]
    4d3c:	movs	r3, #2
    4d3e:	strh.w	r3, [sp, #28]
    4d42:	ldrh	r3, [r4, #38]	@ 0x26
    4d44:	strh.w	r3, [sp, #30]
    4d48:	ldr	r3, [r4, #40]	@ 0x28
    4d4a:	str.w	r8, [r5, #1064]	@ 0x428
    4d4e:	strb.w	r8, [r5, #1060]	@ 0x424
    4d52:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4d54:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    4d58:	mov	r1, r9
    4d5a:	mov	r0, r4
    4d5c:	bl	3e90 <MTPD::GetDevicePropDesc(unsigned long)>
    4d60:	b.n	4af2 <MTPD::loop()+0x15a>
              TRANSMIT(GetDevicePropValue(p1));
    4d62:	mov.w	r8, #0
    4d66:	movs	r3, #1
    4d68:	mov	r1, r9
    4d6a:	mov	r0, r4
    4d6c:	strb.w	r3, [r5, #1060]	@ 0x424
    4d70:	str.w	r8, [r5, #1064]	@ 0x428
    4d74:	bl	3e7c <MTPD::GetDevicePropValue(unsigned long)>
    4d78:	ldr.w	r3, [r5, #1064]	@ 0x428
    4d7c:	add	r1, sp, #24
    4d7e:	mov	r0, r4
    4d80:	adds	r3, #12
    4d82:	movs	r2, #12
    4d84:	str	r3, [sp, #24]
    4d86:	movs	r3, #2
    4d88:	strh.w	r3, [sp, #28]
    4d8c:	ldrh	r3, [r4, #38]	@ 0x26
    4d8e:	strh.w	r3, [sp, #30]
    4d92:	ldr	r3, [r4, #40]	@ 0x28
    4d94:	str.w	r8, [r5, #1064]	@ 0x428
    4d98:	strb.w	r8, [r5, #1060]	@ 0x424
    4d9c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4d9e:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    4da2:	mov	r1, r9
    4da4:	mov	r0, r4
    4da6:	bl	3e7c <MTPD::GetDevicePropValue(unsigned long)>
    4daa:	b.n	4af2 <MTPD::loop()+0x15a>
              return_code = moveObject(p1,p2,p3);
    4dac:	mov	r2, r8
    4dae:	mov	r1, r9
    4db0:	mov	r0, r4
              len = 12;
    4db2:	mov.w	sl, #12
              return_code = moveObject(p1,p2,p3);
    4db6:	bl	3d9a <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    4dba:	mov	r7, r0
        if(return_code)
    4dbc:	cmp	r7, #0
    4dbe:	bne.w	4b0c <MTPD::loop()+0x174>
    }
    4dc2:	add	sp, #60	@ 0x3c
    4dc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    4dc8:	mov	r1, r9
    4dca:	mov	r2, r8
    4dcc:	mov	r0, r4
              { return_code=0x2005; len = 12; }
    4dce:	movw	r7, #8193	@ 0x2001
              return_code = copyObject(p1,p2,p3);
    4dd2:	bl	3db8 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              { return_code=0x2005; len = 12; }
    4dd6:	movw	r3, #8197	@ 0x2005
    4dda:	cmp	r0, #0
    4ddc:	itete	eq
    4dde:	moveq	r7, r3
    4de0:	movne.w	sl, #16
    4de4:	moveq.w	sl, #12
    4de8:	movne	r9, r0
    4dea:	it	eq
    4dec:	moveq	r9, r6
    4dee:	b.n	4b0c <MTPD::loop()+0x174>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4df0:	mov.w	fp, #0
    4df4:	movs	r2, #1
    4df6:	mov	r1, r9
    4df8:	mov	r0, r4
    4dfa:	strb.w	r2, [r5, #1060]	@ 0x424
    4dfe:	mov	r2, r8
    4e00:	str.w	fp, [r5, #1064]	@ 0x428
    4e04:	str	r3, [sp, #20]
    4e06:	bl	458c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4e0a:	ldr.w	r2, [r5, #1064]	@ 0x428
    4e0e:	add	r1, sp, #24
    4e10:	adds	r2, #12
    4e12:	str	r2, [sp, #24]
    4e14:	movs	r2, #2
    4e16:	strh.w	r2, [sp, #28]
    4e1a:	ldrh	r2, [r4, #38]	@ 0x26
    4e1c:	strh.w	r2, [sp, #30]
    4e20:	ldr	r2, [r4, #40]	@ 0x28
    4e22:	str.w	fp, [r5, #1064]	@ 0x428
    4e26:	strb.w	fp, [r5, #1060]	@ 0x424
    4e2a:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    4e2e:	mov	r0, r4
    4e30:	movs	r2, #32
    4e32:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4e36:	ldr	r3, [sp, #20]
    4e38:	mov	r2, r8
    4e3a:	mov	r1, r9
    4e3c:	mov	r0, r4
    4e3e:	bl	458c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4e42:	b.n	4af2 <MTPD::loop()+0x15a>
              TRANSMIT(getObjectPropsSupported(p1));
    4e44:	mov.w	r8, #0
    4e48:	movs	r3, #1
    4e4a:	mov	r1, r6
    4e4c:	mov	r0, r4
    4e4e:	strb.w	r3, [r5, #1060]	@ 0x424
    4e52:	str.w	r8, [r5, #1064]	@ 0x428
    4e56:	bl	415c <MTPD::getObjectPropsSupported(unsigned long)>
    4e5a:	ldr.w	r3, [r5, #1064]	@ 0x428
    4e5e:	add	r1, sp, #24
    4e60:	mov	r0, r4
    4e62:	adds	r3, #12
    4e64:	movs	r2, #12
    4e66:	str	r3, [sp, #24]
    4e68:	movs	r3, #2
    4e6a:	strh.w	r3, [sp, #28]
    4e6e:	ldrh	r3, [r4, #38]	@ 0x26
    4e70:	strh.w	r3, [sp, #30]
    4e74:	ldr	r3, [r4, #40]	@ 0x28
    4e76:	str.w	r8, [r5, #1064]	@ 0x428
    4e7a:	strb.w	r8, [r5, #1060]	@ 0x424
    4e7e:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4e80:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    4e84:	mov	r1, r6
    4e86:	mov	r0, r4
    4e88:	bl	415c <MTPD::getObjectPropsSupported(unsigned long)>
    4e8c:	b.n	4af2 <MTPD::loop()+0x15a>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4e8e:	mov.w	fp, #0
    4e92:	movs	r3, #1
    4e94:	mov	r2, r8
    4e96:	mov	r1, r6
    4e98:	mov	r0, r4
    4e9a:	strb.w	r3, [r5, #1060]	@ 0x424
    4e9e:	str.w	fp, [r5, #1064]	@ 0x428
    4ea2:	bl	4370 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4ea6:	ldr.w	r3, [r5, #1064]	@ 0x428
    4eaa:	add	r1, sp, #24
    4eac:	mov	r0, r4
    4eae:	adds	r3, #12
    4eb0:	movs	r2, #12
    4eb2:	str	r3, [sp, #24]
    4eb4:	movs	r3, #2
    4eb6:	strh.w	r3, [sp, #28]
    4eba:	ldrh	r3, [r4, #38]	@ 0x26
    4ebc:	strh.w	r3, [sp, #30]
    4ec0:	ldr	r3, [r4, #40]	@ 0x28
    4ec2:	str.w	fp, [r5, #1064]	@ 0x428
    4ec6:	strb.w	fp, [r5, #1060]	@ 0x424
    4eca:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4ecc:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4ed0:	mov	r2, r8
    4ed2:	mov	r1, r6
    4ed4:	mov	r0, r4
    4ed6:	bl	4370 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4eda:	b.n	4af2 <MTPD::loop()+0x15a>
              TRANSMIT(getObjectPropValue(p1,p2));
    4edc:	mov.w	fp, #0
    4ee0:	movs	r3, #1
    4ee2:	mov	r2, r8
    4ee4:	mov	r1, r6
    4ee6:	mov	r0, r4
    4ee8:	strb.w	r3, [r5, #1060]	@ 0x424
    4eec:	str.w	fp, [r5, #1064]	@ 0x428
    4ef0:	bl	418c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4ef4:	ldr.w	r3, [r5, #1064]	@ 0x428
    4ef8:	add	r1, sp, #24
    4efa:	mov	r0, r4
    4efc:	adds	r3, #12
    4efe:	movs	r2, #12
    4f00:	str	r3, [sp, #24]
    4f02:	movs	r3, #2
    4f04:	strh.w	r3, [sp, #28]
    4f08:	ldrh	r3, [r4, #38]	@ 0x26
    4f0a:	strh.w	r3, [sp, #30]
    4f0e:	ldr	r3, [r4, #40]	@ 0x28
    4f10:	str.w	fp, [r5, #1064]	@ 0x428
    4f14:	strb.w	fp, [r5, #1060]	@ 0x424
    4f18:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4f1a:	bl	3cfc <MTPD::mwrite(unsigned char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    4f1e:	mov	r2, r8
    4f20:	mov	r1, r6
    4f22:	mov	r0, r4
    4f24:	bl	418c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4f28:	b.n	4af2 <MTPD::loop()+0x15a>
              return_code = setObjectPropValue(p1,p2);
    4f2a:	mov	r2, r8
    4f2c:	mov	r1, r6
    4f2e:	mov	r0, r4
    4f30:	bl	4964 <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    4f34:	mov	r7, r0
              break;
    4f36:	b.n	4dbc <MTPD::loop()+0x424>
        switch (op)
    4f38:	movw	r7, #8197	@ 0x2005
    4f3c:	b.n	4b0c <MTPD::loop()+0x174>
                return_code = 0x2014; // spec by format unsupported
    4f3e:	movw	r7, #8212	@ 0x2014
    4f42:	b.n	4b0c <MTPD::loop()+0x174>

00004f44 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]>:
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4f44:	ldrh	r3, [r0, #30]
		tcd->BITER = len & 0x7fff;
    4f46:	uxth	r1, r1
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4f48:	lsls	r3, r3, #16
    4f4a:	bmi.n	4f5a <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]+0x16>
		tcd->BITER = len & 0x7fff;
    4f4c:	ubfx	r1, r1, #0, #15
    4f50:	strh	r1, [r0, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    4f52:	ldrh	r3, [r0, #30]
    4f54:	uxth	r3, r3
    4f56:	strh	r3, [r0, #22]
}
    4f58:	bx	lr
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4f5a:	ldrh	r3, [r0, #30]
    4f5c:	ubfx	r1, r1, #0, #9
    4f60:	and.w	r3, r3, #65024	@ 0xfe00
    4f64:	orrs	r3, r1
    4f66:	strh	r3, [r0, #30]
    4f68:	b.n	4f52 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]+0xe>

00004f6a <SPIClass::SPIClass(unsigned int, unsigned int)>:
#if defined(__IMXRT1062__)
	static const SPI_Hardware_t spiclass_lpspi3_hardware;
	static const SPI_Hardware_t spiclass_lpspi1_hardware;
#endif	
public:
	constexpr SPIClass(uintptr_t myport, uintptr_t myhardware)
    4f6a:	push	{r4, r5, r6, lr}
		: port_addr(myport), hardware_addr(myhardware) {
    4f6c:	movs	r5, #0
    4f6e:	movs	r6, #20
	constexpr SPIClass(uintptr_t myport, uintptr_t myhardware)
    4f70:	mov	r4, r0
		: port_addr(myport), hardware_addr(myhardware) {
    4f72:	str	r5, [r0, #16]
    4f74:	strd	r1, r2, [r0]
    4f78:	strd	r5, r5, [r0, #8]
    4f7c:	mov	r2, r6
    4f7e:	mov	r1, r5
    4f80:	add	r0, r6
    4f82:	bl	a2ac <memset>
    4f86:	mov	r2, r6
    4f88:	mov	r1, r5
    4f8a:	add.w	r0, r4, #40	@ 0x28
    4f8e:	bl	a2ac <memset>
	}
    4f92:	mov	r0, r4
		: port_addr(myport), hardware_addr(myhardware) {
    4f94:	strh	r5, [r4, #60]	@ 0x3c
    4f96:	strd	r5, r5, [r4, #64]	@ 0x40
    4f9a:	strd	r5, r5, [r4, #72]	@ 0x48
	}
    4f9e:	pop	{r4, r5, r6, pc}

00004fa0 <SPIClass::transfer(void const*, void*, unsigned int)>:
{
    4fa0:	push	{r4, r5, r6, lr}
	if (count == 0) return;
    4fa2:	cbz	r3, 4fda <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4fa4:	ldr	r4, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4fa6:	movw	r5, #513	@ 0x201
    4faa:	str	r5, [r4, #16]
    size_t count_read = count;
    4fac:	mov	r4, r3
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4fae:	cbz	r1, 4fdc <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    4fb0:	ldrb.w	r5, [r1], #1
    4fb4:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    4fb6:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4fb8:	str	r5, [r6, #100]	@ 0x64
    4fba:	ldr	r5, [r0, #0]
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4fbc:	ldr	r6, [r5, #112]	@ 0x70
    4fbe:	lsls	r6, r6, #30
    4fc0:	bmi.n	4fcc <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4fc2:	ldr	r5, [r5, #116]	@ 0x74
				if (p_read) *p_read++ = b; 
    4fc4:	cbz	r2, 4fca <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4fc6:	strb.w	r5, [r2], #1
				count_read--;
    4fca:	subs	r4, #1
    4fcc:	ldr	r5, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4fce:	ldr	r5, [r5, #20]
    4fd0:	lsls	r5, r5, #31
    4fd2:	bpl.n	4fba <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    4fd4:	cmp	r3, #0
    4fd6:	bne.n	4fae <SPIClass::transfer(void const*, void*, unsigned int)+0xe>
	while (count_read) {
    4fd8:	cbnz	r4, 4fe2 <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
}
    4fda:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4fdc:	ldrb.w	r5, [r0, #60]	@ 0x3c
    4fe0:	b.n	4fb4 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    4fe2:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4fe4:	ldr	r1, [r3, #112]	@ 0x70
    4fe6:	lsls	r1, r1, #30
    4fe8:	bmi.n	4fe2 <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4fea:	ldr	r3, [r3, #116]	@ 0x74
			if (p_read) *p_read++ = b; 
    4fec:	cbz	r2, 4ff2 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4fee:	strb.w	r3, [r2], #1
			count_read--;
    4ff2:	subs	r4, #1
    4ff4:	b.n	4fd8 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

00004ff6 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4ff6:	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4ff8:	ldr	r2, [r3, #0]
    4ffa:	ldr	r1, [r2, #0]
    4ffc:	ldr	r2, [r3, #4]
    4ffe:	tst	r1, r2
void SPIClass::end() {
    5000:	push	{r4, lr}
    5002:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    5004:	beq.n	503c <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    5006:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    5008:	movs	r1, #0
    500a:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    500c:	movs	r1, #5
    500e:	ldrb	r2, [r0, #16]
    5010:	add	r3, r2
    5012:	ldrb	r0, [r3, #16]
    5014:	bl	bfb8 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    5018:	ldrb	r2, [r4, #17]
    501a:	ldr	r3, [r4, #4]
    501c:	movs	r1, #5
    501e:	add	r3, r2
    5020:	ldrb.w	r0, [r3, #36]	@ 0x24
    5024:	bl	bfb8 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    5028:	ldr	r3, [r4, #4]
    502a:	ldrb	r2, [r4, #18]
    502c:	movs	r1, #5
    502e:	add	r3, r2
}
    5030:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    5034:	ldrb.w	r0, [r3, #56]	@ 0x38
    5038:	b.w	bfb8 <pinMode>
}
    503c:	pop	{r4, pc}
	...

00005040 <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    5040:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_dmaRX->clearInterrupt();
    5044:	ldr	r7, [r0, #72]	@ 0x48
void SPIClass::dma_rxisr(void) {
    5046:	mov	r4, r0
		DMA_CINT = channel;
    5048:	ldr	r3, [pc, #100]	@ (50b0 <SPIClass::dma_rxisr()+0x70>)
    504a:	ldrb	r5, [r7, #4]
    504c:	strb	r5, [r3, #31]
	_dmaTX->clearComplete();
    504e:	ldr	r0, [r0, #68]	@ 0x44
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    5050:	ldrb	r6, [r0, #4]
    5052:	strb	r6, [r3, #28]
    5054:	strb	r5, [r3, #28]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    5056:	ldr	r2, [r4, #64]	@ 0x40
    5058:	cbz	r2, 5086 <SPIClass::dma_rxisr()+0x46>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    505a:	cmp.w	r2, #32768	@ 0x8000
    505e:	bcc.n	5072 <SPIClass::dma_rxisr()+0x32>
			_dma_count_remaining -= MAX_DMA_COUNT;
    5060:	sub.w	r2, r2, #32640	@ 0x7f80
    5064:	subs	r2, #127	@ 0x7f
		DMA_SERQ = channel;
    5066:	ldr	r3, [pc, #72]	@ (50b0 <SPIClass::dma_rxisr()+0x70>)
    5068:	str	r2, [r4, #64]	@ 0x40
    506a:	strb	r5, [r3, #27]
    506c:	strb	r6, [r3, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    506e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    5072:	mov	r1, r2
    5074:	ldr	r0, [r0, #0]
    5076:	bl	4f44 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]>
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    507a:	mov	r1, r2
    507c:	ldr	r0, [r7, #0]
    507e:	movs	r2, #0
    5080:	bl	4f44 <DMAChanneltransferCount(DMAChannel*, unsigned int) [clone .isra.0]>
			_dma_count_remaining = 0;
    5084:	b.n	5066 <SPIClass::dma_rxisr()+0x26>
    5086:	ldr	r3, [r4, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    5088:	movs	r1, #15
		_dma_event_responder->triggerEvent();
    508a:	ldr	r0, [r4, #76]	@ 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    508c:	str	r1, [r3, #88]	@ 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    508e:	movw	r1, #769	@ 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    5092:	str	r2, [r3, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    5094:	str	r1, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    5096:	mov.w	r1, #16128	@ 0x3f00
    509a:	str	r1, [r3, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    509c:	movs	r3, #3
		_dma_event_responder->triggerEvent();
    509e:	mov	r1, r2
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    50a0:	strb.w	r3, [r4, #61]	@ 0x3d
		_dma_event_responder->triggerEvent();
    50a4:	ldr	r3, [r0, #0]
}
    50a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		_dma_event_responder->triggerEvent();
    50aa:	ldr	r3, [r3, #0]
    50ac:	bx	r3
    50ae:	nop
    50b0:	.word	0x400e8000

000050b4 <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    50b4:	ldr	r0, [pc, #8]	@ (50c0 <_spi_dma_rxISR0()+0xc>)
    50b6:	push	{r3, lr}
    50b8:	bl	5040 <SPIClass::dma_rxisr()>
    50bc:	pop	{r3, pc}
    50be:	nop
    50c0:	.word	0x200081c8

000050c4 <_spi_dma_rxISR1()>:
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    50c4:	ldr	r0, [pc, #8]	@ (50d0 <_spi_dma_rxISR1()+0xc>)
    50c6:	push	{r3, lr}
    50c8:	bl	5040 <SPIClass::dma_rxisr()>
    50cc:	pop	{r3, pc}
    50ce:	nop
    50d0:	.word	0x20008218

000050d4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:
}
    50d4:	push	{r3, lr}
SPIClass SPI(IMXRT_LPSPI4_ADDRESS, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    50d6:	ldr	r2, [pc, #32]	@ (50f8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    50d8:	ldr	r1, [pc, #32]	@ (50fc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    50da:	ldr	r0, [pc, #36]	@ (5100 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    50dc:	bl	4f6a <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1(IMXRT_LPSPI3_ADDRESS, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    50e0:	ldr	r2, [pc, #32]	@ (5104 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    50e2:	ldr	r1, [pc, #36]	@ (5108 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    50e4:	ldr	r0, [pc, #36]	@ (510c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    50e6:	bl	4f6a <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2(IMXRT_LPSPI1_ADDRESS, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    50ea:	ldr	r2, [pc, #36]	@ (5110 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    50ec:	ldr	r1, [pc, #36]	@ (5114 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    50ee:	ldr	r0, [pc, #40]	@ (5118 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    50f0:	bl	4f6a <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    50f4:	pop	{r3, pc}
    50f6:	nop
    50f8:	.word	0x20000504
    50fc:	.word	0x403a0000
    5100:	.word	0x200081c8
    5104:	.word	0x20000494
    5108:	.word	0x4039c000
    510c:	.word	0x20008218
    5110:	.word	0x20000424
    5114:	.word	0x40394000
    5118:	.word	0x20008268

0000511c <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    511c:	ldrb.w	r2, [r0, #163]	@ 0xa3
    5120:	ldrb.w	r0, [r0, #162]	@ 0xa2
	}
    5124:	subs	r0, r2, r0
    5126:	bx	lr

00005128 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    5128:	ldrb.w	r3, [r0, #162]	@ 0xa2
    512c:	ldrb.w	r2, [r0, #163]	@ 0xa3
    5130:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    5132:	itttt	hi
    5134:	addhi	r2, r3, #1
    5136:	strbhi.w	r2, [r0, #162]	@ 0xa2
    513a:	addhi	r0, r0, r3
    513c:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    513e:	it	ls
    5140:	movls.w	r0, #4294967295
	}
    5144:	bx	lr

00005146 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    5146:	ldrb.w	r3, [r0, #162]	@ 0xa2
    514a:	ldrb.w	r2, [r0, #163]	@ 0xa3
    514e:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    5150:	itte	hi
    5152:	addhi	r0, r0, r3
    5154:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    5156:	movls.w	r0, #4294967295
	}
    515a:	bx	lr

0000515c <TwoWire::flush()>:
	virtual void flush(void) {
	}
    515c:	bx	lr

0000515e <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    515e:	ldrh.w	r3, [r0, #304]	@ 0x130
    5162:	cbnz	r3, 5168 <TwoWire::write(unsigned char)+0xa>
			return 0;
    5164:	movs	r0, #0
    5166:	bx	lr
		if (txBufferLength >= BUFFER_LENGTH+1) {
    5168:	ldrb.w	r3, [r0, #303]	@ 0x12f
    516c:	cmp	r3, #136	@ 0x88
    516e:	bls.n	5176 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    5170:	movs	r3, #1
    5172:	str	r3, [r0, #4]
			return 0;
    5174:	b.n	5164 <TwoWire::write(unsigned char)+0x6>
		txBuffer[txBufferLength++] = data;
    5176:	adds	r2, r3, #1
    5178:	strb.w	r2, [r0, #303]	@ 0x12f
    517c:	add	r0, r3
    517e:	strb.w	r1, [r0, #165]	@ 0xa5
		return 1;
    5182:	movs	r0, #1
}
    5184:	bx	lr

00005186 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    5186:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    5188:	ldrh.w	r3, [r0, #304]	@ 0x130
{
    518c:	mov	r5, r0
    518e:	mov	r4, r2
	if (transmitting || slave_mode) {
    5190:	cbz	r3, 51be <TwoWire::write(unsigned char const*, unsigned int)+0x38>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    5192:	ldrb.w	r3, [r0, #303]	@ 0x12f
    5196:	rsb	r2, r3, #137	@ 0x89
		if (quantity > avail) {
    519a:	cmp	r4, r2
    519c:	ittt	hi
    519e:	movhi	r0, #1
			quantity = avail;
    51a0:	movhi	r4, r2
    51a2:	strhi	r0, [r5, #4]
		memcpy(txBuffer + txBufferLength, data, quantity);
    51a4:	add.w	r0, r5, #165	@ 0xa5
    51a8:	mov	r2, r4
    51aa:	add	r0, r3
    51ac:	bl	a2f0 <memcpy>
		txBufferLength += quantity;
    51b0:	ldrb.w	r3, [r5, #303]	@ 0x12f
    51b4:	add	r3, r4
    51b6:	strb.w	r3, [r5, #303]	@ 0x12f
}
    51ba:	mov	r0, r4
    51bc:	pop	{r3, r4, r5, pc}
	return 0;
    51be:	mov	r4, r3
    51c0:	b.n	51ba <TwoWire::write(unsigned char const*, unsigned int)+0x34>
	...

000051c4 <TwoWire::force_clock()>:
{
    51c4:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    51c8:	ldr	r2, [r0, #20]
{
    51ca:	mov	r3, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    51cc:	ldrb	r1, [r0, #24]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    51ce:	mov.w	lr, #21
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    51d2:	ldr	r4, [pc, #240]	@ (52c4 <TwoWire::force_clock()+0x100>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    51d4:	add.w	r1, r2, r1, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    51d8:	ldr.w	r8, [pc, #240]	@ 52cc <TwoWire::force_clock()+0x108>
    51dc:	ldrb	r0, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    51de:	ldrb	r1, [r3, #25]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    51e0:	lsls	r6, r0, #4
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    51e2:	add.w	r1, r2, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    51e6:	add.w	r0, r4, r0, lsl #4
	*portSetRegister(sda_pin) = sda_mask;
    51ea:	ldr	r6, [r4, r6]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    51ec:	ldrb.w	r1, [r1, #40]	@ 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    51f0:	ldr.w	ip, [r0, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    51f4:	ldr.w	r9, [r0, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    51f8:	lsls	r7, r1, #4
    51fa:	add.w	r1, r4, r1, lsl #4
    51fe:	ldr	r5, [r1, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    5200:	str.w	lr, [r9]
	*portSetRegister(sda_pin) = sda_mask;
    5204:	str.w	ip, [r6, #132]	@ 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    5208:	ldr	r0, [r6, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    520a:	ldr	r1, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    520c:	orr.w	r0, r0, ip
	*portConfigRegister(scl_pin) = 5 | 0x10;
    5210:	str	r1, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    5212:	str	r0, [r6, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    5214:	str.w	lr, [r1]
	*portSetRegister(scl_pin) = scl_mask;
    5218:	ldr	r1, [r4, r7]
    521a:	ldr.w	lr, [pc, #180]	@ 52d0 <TwoWire::force_clock()+0x10c>
    521e:	str.w	r5, [r1, #132]	@ 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    5222:	ldr	r0, [r1, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    5224:	ldr	r4, [pc, #160]	@ (52c8 <TwoWire::force_clock()+0x104>)
    5226:	orrs	r0, r5
    5228:	str	r0, [r1, #4]
    522a:	ldr	r7, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    522c:	ldr.w	r0, [lr]
    5230:	udiv	r0, r0, r8
    5234:	mov.w	r8, #10
    5238:	mul.w	r0, r8, r0
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    523c:	ldr.w	r8, [r4, #4]
    5240:	sub.w	r8, r8, r7
    5244:	cmp	r0, r8
    5246:	bhi.n	523c <TwoWire::force_clock()+0x78>
    5248:	movs	r0, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    524a:	ldr	r7, [pc, #124]	@ (52c8 <TwoWire::force_clock()+0x104>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    524c:	ldr.w	sl, [pc, #124]	@ 52cc <TwoWire::force_clock()+0x108>
		if ((*portInputRegister(sda_pin) & sda_mask)
    5250:	ldr	r4, [r6, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    5252:	tst.w	r4, ip
    5256:	beq.n	525e <TwoWire::force_clock()+0x9a>
    5258:	ldr	r4, [r1, #8]
    525a:	tst	r4, r5
    525c:	bne.n	52c0 <TwoWire::force_clock()+0xfc>
		*portClearRegister(scl_pin) = scl_mask;
    525e:	str.w	r5, [r1, #136]	@ 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    5262:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5266:	ldr.w	r4, [lr]
    526a:	udiv	r4, r4, sl
    526e:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    5272:	ldr.w	r8, [r7, #4]
    5276:	sub.w	r8, r8, fp
    527a:	cmp	r4, r8
    527c:	bhi.n	5272 <TwoWire::force_clock()+0xae>
		*portSetRegister(scl_pin) = scl_mask;
    527e:	str.w	r5, [r1, #132]	@ 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    5282:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5286:	ldr.w	r4, [lr]
    528a:	udiv	r4, r4, sl
    528e:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    5292:	ldr.w	r8, [r7, #4]
    5296:	sub.w	r8, r8, fp
    529a:	cmp	r4, r8
    529c:	bhi.n	5292 <TwoWire::force_clock()+0xce>
	for (int i=0; i < 9; i++) {
    529e:	subs	r0, #1
    52a0:	bne.n	5250 <TwoWire::force_clock()+0x8c>
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    52a2:	ldrb	r1, [r3, #24]
    52a4:	add.w	r1, r2, r1, lsl #4
    52a8:	ldr	r1, [r1, #12]
    52aa:	str.w	r1, [r9]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    52ae:	ldrb	r3, [r3, #25]
    52b0:	add.w	r2, r2, r3, lsl #4
    52b4:	ldr	r3, [r2, #44]	@ 0x2c
    52b6:	ldr	r2, [sp, #4]
    52b8:	str	r3, [r2, #0]
}
    52ba:	add	sp, #12
    52bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    52c0:	movs	r0, #1
    52c2:	b.n	52a2 <TwoWire::force_clock()+0xde>
    52c4:	.word	0x20000764
    52c8:	.word	0xe0001000
    52cc:	.word	0x000f4240
    52d0:	.word	0x20001e54

000052d4 <TwoWire::wait_idle()>:
	return systick_millis_count;
    52d4:	ldr	r2, [pc, #44]	@ (5304 <TwoWire::wait_idle()+0x30>)
{
    52d6:	push	{r4, lr}
    52d8:	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    52da:	ldr	r4, [r0, #16]
		uint32_t status = port->MSR; // pg 2899 & 2892
    52dc:	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    52de:	tst.w	r3, #33554432	@ 0x2000000
    52e2:	bne.n	52ee <TwoWire::wait_idle()+0x1a>
	port->MSR = 0x00007F00; // clear all prior flags
    52e4:	mov.w	r3, #32512	@ 0x7f00
	return true;
    52e8:	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    52ea:	str	r3, [r4, #20]
}
    52ec:	pop	{r4, pc}
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    52ee:	lsls	r3, r3, #7
    52f0:	bmi.n	52e4 <TwoWire::wait_idle()+0x10>
    52f2:	ldr	r3, [r2, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    52f4:	subs	r3, r3, r1
		if (timeout > 16) {
    52f6:	cmp	r3, #16
    52f8:	bls.n	52dc <TwoWire::wait_idle()+0x8>
			if (force_clock()) break;
    52fa:	bl	51c4 <TwoWire::force_clock()>
    52fe:	cmp	r0, #0
    5300:	bne.n	52e4 <TwoWire::wait_idle()+0x10>
    5302:	b.n	52ec <TwoWire::wait_idle()+0x18>
    5304:	.word	0x20012864

00005308 <TwoWire::endTransmission(unsigned char)>:
{
    5308:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    530c:	ldrb.w	r8, [r0, #303]	@ 0x12f
{
    5310:	mov	r7, r0
    5312:	mov	r6, r1
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5314:	ldr	r4, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    5316:	cmp.w	r8, #0
    531a:	beq.n	5378 <TwoWire::endTransmission(unsigned char)+0x70>
	if (!wait_idle()) return 4;
    531c:	bl	52d4 <TwoWire::wait_idle()>
    5320:	cbz	r0, 5378 <TwoWire::endTransmission(unsigned char)+0x70>
    5322:	ldr.w	r9, [pc, #192]	@ 53e4 <TwoWire::endTransmission(unsigned char)+0xdc>
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    5326:	movs	r5, #0
    5328:	ldr.w	sl, [r9]
		if (tx_index <= tx_len) {
    532c:	cmp	r5, r8
    532e:	bhi.n	536a <TwoWire::endTransmission(unsigned char)+0x62>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    5330:	ldr	r3, [r4, #92]	@ 0x5c
    5332:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    5336:	cmp	r3, #3
    5338:	bhi.n	536a <TwoWire::endTransmission(unsigned char)+0x62>
				if (tx_index == 0) {
    533a:	cbnz	r5, 534e <TwoWire::endTransmission(unsigned char)+0x46>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    533c:	ldrb.w	r2, [r7, #165]	@ 0xa5
    5340:	orr.w	r2, r2, #1024	@ 0x400
    5344:	str	r2, [r4, #96]	@ 0x60
					tx_index = 1;
    5346:	movs	r2, #1
				fifo_used++;
    5348:	adds	r3, #1
    534a:	mov	r5, r2
    534c:	b.n	5336 <TwoWire::endTransmission(unsigned char)+0x2e>
				} else if (tx_index < tx_len) {
    534e:	cmp	r5, r8
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    5350:	add.w	r2, r5, #1
				} else if (tx_index < tx_len) {
    5354:	bcs.n	5360 <TwoWire::endTransmission(unsigned char)+0x58>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    5356:	add	r5, r7
    5358:	ldrb.w	r1, [r5, #165]	@ 0xa5
    535c:	str	r1, [r4, #96]	@ 0x60
    535e:	b.n	5348 <TwoWire::endTransmission(unsigned char)+0x40>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5360:	cbz	r6, 5368 <TwoWire::endTransmission(unsigned char)+0x60>
    5362:	mov.w	r3, #512	@ 0x200
    5366:	str	r3, [r4, #96]	@ 0x60
					tx_index++;
    5368:	mov	r5, r2
		uint32_t status = port->MSR; // pg 2884 & 2891
    536a:	ldr	r3, [r4, #20]
		if (status & LPI2C_MSR_ALF) {
    536c:	lsls	r2, r3, #20
    536e:	bpl.n	5380 <TwoWire::endTransmission(unsigned char)+0x78>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5370:	ldr	r3, [r4, #16]
    5372:	orr.w	r3, r3, #768	@ 0x300
    5376:	str	r3, [r4, #16]
	if (!tx_len) return 4; // no address for transmit
    5378:	movs	r6, #4
}
    537a:	mov	r0, r6
    537c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (status & LPI2C_MSR_FEF) {
    5380:	lsls	r0, r3, #19
    5382:	bpl.n	5390 <TwoWire::endTransmission(unsigned char)+0x88>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5384:	ldr	r3, [r4, #16]
			return 5; // FIFO error
    5386:	movs	r6, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5388:	orr.w	r3, r3, #768	@ 0x300
    538c:	str	r3, [r4, #16]
			return 5; // FIFO error
    538e:	b.n	537a <TwoWire::endTransmission(unsigned char)+0x72>
		if (status & LPI2C_MSR_NDF) {
    5390:	lsls	r1, r3, #21
    5392:	bpl.n	53a6 <TwoWire::endTransmission(unsigned char)+0x9e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5394:	ldr	r3, [r4, #16]
			return 2; // NACK (assume address, TODO: how to tell address from data)
    5396:	movs	r6, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5398:	orr.w	r3, r3, #768	@ 0x300
    539c:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    539e:	mov.w	r3, #512	@ 0x200
    53a2:	str	r3, [r4, #96]	@ 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    53a4:	b.n	537a <TwoWire::endTransmission(unsigned char)+0x72>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    53a6:	lsls	r2, r3, #18
    53a8:	bmi.n	53b6 <TwoWire::endTransmission(unsigned char)+0xae>
    53aa:	ldr.w	r2, [r9]
    53ae:	sub.w	r2, r2, sl
    53b2:	cmp	r2, #50	@ 0x32
    53b4:	bls.n	53c6 <TwoWire::endTransmission(unsigned char)+0xbe>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    53b6:	ldr	r3, [r4, #16]
    53b8:	orr.w	r3, r3, #768	@ 0x300
    53bc:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    53be:	mov.w	r3, #512	@ 0x200
    53c2:	str	r3, [r4, #96]	@ 0x60
			return 4; // clock stretched too long or generic timeout
    53c4:	b.n	5378 <TwoWire::endTransmission(unsigned char)+0x70>
		if (tx_index > tx_len) {
    53c6:	cmp	r5, r8
    53c8:	bls.n	53da <TwoWire::endTransmission(unsigned char)+0xd2>
			uint32_t tx_fifo = port->MFSR & 0x07;
    53ca:	ldr	r2, [r4, #92]	@ 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    53cc:	ands.w	r2, r2, #7
    53d0:	bne.n	53da <TwoWire::endTransmission(unsigned char)+0xd2>
    53d2:	lsls	r3, r3, #22
    53d4:	bmi.n	53e0 <TwoWire::endTransmission(unsigned char)+0xd8>
    53d6:	cmp	r6, #0
    53d8:	beq.n	537a <TwoWire::endTransmission(unsigned char)+0x72>
		yield();
    53da:	bl	c4a4 <yield>
	}
    53de:	b.n	532c <TwoWire::endTransmission(unsigned char)+0x24>
				return 0;
    53e0:	mov	r6, r2
    53e2:	b.n	537a <TwoWire::endTransmission(unsigned char)+0x72>
    53e4:	.word	0x20012864

000053e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    53e8:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53ec:	mov	r5, r0
    53ee:	mov	r6, r1
    53f0:	mov	r7, r2
    53f2:	mov	r8, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    53f4:	ldr	r4, [r0, #16]
	if (!wait_idle()) return 4;
    53f6:	bl	52d4 <TwoWire::wait_idle()>
    53fa:	cmp	r0, #0
    53fc:	beq.w	551e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
	address = (address & 0x7F) << 1;
    5400:	cmp	r7, #1
	rxBufferIndex = 0;
    5402:	mov.w	r3, #0
	address = (address & 0x7F) << 1;
    5406:	mov.w	r6, r6, lsl #1
    540a:	ldr.w	sl, [pc, #280]	@ 5524 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>
    540e:	it	cc
    5410:	movcc	r7, #1
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    5412:	mov	fp, r3
    5414:	ldr.w	r2, [sl]
	address = (address & 0x7F) << 1;
    5418:	uxtb	r6, r6
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    541a:	add.w	r9, r7, #4294967295
	rxBufferIndex = 0;
    541e:	strh.w	r3, [r5, #162]	@ 0xa2
    5422:	str	r2, [sp, #4]
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    5424:	orr.w	r9, r9, #256	@ 0x100
		if (tx_state < 3) {
    5428:	cmp.w	fp, #2
    542c:	bhi.n	5452 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6a>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    542e:	ldr	r2, [r4, #92]	@ 0x5c
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    5430:	orr.w	r1, r6, #1024	@ 0x400
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5434:	mov.w	r0, #512	@ 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    5438:	and.w	r2, r2, #7
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    543c:	orr.w	r1, r1, #1
    5440:	add	r2, fp
			while (tx_fifo < 4 && tx_state < 3) {
    5442:	sub.w	ip, r2, fp
    5446:	cmp.w	ip, #3
    544a:	bhi.n	5452 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6a>
    544c:	cmp.w	fp, #3
    5450:	bne.n	5482 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
		if (rxBufferLength < sizeof(rxBuffer)) {
    5452:	ldrb.w	r2, [r5, #163]	@ 0xa3
    5456:	cmp	r2, #135	@ 0x87
    5458:	bls.n	54a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
		uint32_t status = port->MSR; // pg 2884 & 2891
    545a:	ldr	r2, [r4, #20]
		if (status & LPI2C_MSR_ALF) {
    545c:	lsls	r0, r2, #20
    545e:	bpl.n	54ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5460:	ldr	r3, [r4, #16]
    5462:	orr.w	r3, r3, #768	@ 0x300
    5466:	str	r3, [r4, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    5468:	ldr	r3, [r4, #92]	@ 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    546a:	tst.w	r3, #458752	@ 0x70000
    546e:	beq.n	5478 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
    5470:	ldr	r3, [r4, #16]
    5472:	orr.w	r3, r3, #512	@ 0x200
    5476:	str	r3, [r4, #16]
	return rxBufferLength;
    5478:	ldrb.w	r0, [r5, #163]	@ 0xa3
}
    547c:	add	sp, #12
    547e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (tx_state == 0) {
    5482:	cmp.w	fp, #0
    5486:	bne.n	5490 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa8>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    5488:	str	r1, [r4, #96]	@ 0x60
				tx_state++;
    548a:	add.w	fp, fp, #1
				tx_fifo--;
    548e:	b.n	5442 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5a>
				} else if (tx_state == 1) {
    5490:	cmp.w	fp, #1
    5494:	bne.n	549c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    5496:	str.w	r9, [r4, #96]	@ 0x60
    549a:	b.n	548a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa2>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    549c:	cmp.w	r8, #0
    54a0:	beq.n	548a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa2>
    54a2:	str	r0, [r4, #96]	@ 0x60
    54a4:	b.n	548a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa2>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    54a6:	ldr	r1, [r4, #92]	@ 0x5c
    54a8:	ubfx	r1, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    54ac:	cmp	r1, #0
    54ae:	beq.n	545a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    54b0:	ldrb.w	r2, [r5, #163]	@ 0xa3
    54b4:	cmp	r2, #135	@ 0x87
    54b6:	bhi.n	545a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
				rxBuffer[rxBufferLength++] = port->MRDR;
    54b8:	ldr	r0, [r4, #112]	@ 0x70
    54ba:	add.w	ip, r2, #1
    54be:	add	r2, r5
				rx_fifo--;
    54c0:	subs	r1, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    54c2:	strb.w	ip, [r5, #163]	@ 0xa3
    54c6:	strb	r0, [r2, #26]
				rx_fifo--;
    54c8:	b.n	54ac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc4>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    54ca:	tst.w	r2, #9216	@ 0x2400
    54ce:	bne.n	54dc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf4>
    54d0:	ldr.w	r1, [sl]
    54d4:	ldr	r3, [sp, #4]
    54d6:	subs	r1, r1, r3
    54d8:	cmp	r1, #50	@ 0x32
    54da:	bls.n	54ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    54dc:	ldr	r3, [r4, #16]
    54de:	orr.w	r3, r3, #768	@ 0x300
    54e2:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    54e4:	mov.w	r3, #512	@ 0x200
    54e8:	str	r3, [r4, #96]	@ 0x60
			break;
    54ea:	b.n	5468 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength >= length && tx_state >= 3) {
    54ec:	ldrb.w	r1, [r5, #163]	@ 0xa3
    54f0:	cmp	r1, r7
    54f2:	bcc.n	5518 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x130>
    54f4:	cmp.w	fp, #2
    54f8:	bhi.n	5500 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x118>
		yield();
    54fa:	bl	c4a4 <yield>
		if (tx_state < 3) {
    54fe:	b.n	542e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t tx_fifo = port->MFSR & 0x07;
    5500:	ldr	r1, [r4, #92]	@ 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    5502:	lsls	r1, r1, #29
    5504:	beq.n	550c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x124>
		yield();
    5506:	bl	c4a4 <yield>
		if (tx_state < 3) {
    550a:	b.n	5452 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6a>
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    550c:	lsls	r3, r2, #22
    550e:	bmi.n	5468 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
    5510:	cmp.w	r8, #0
    5514:	bne.n	5506 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11e>
    5516:	b.n	5468 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		yield();
    5518:	bl	c4a4 <yield>
	}
    551c:	b.n	5428 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
	if (!wait_idle()) return 4;
    551e:	movs	r0, #4
    5520:	b.n	547c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x94>
    5522:	nop
    5524:	.word	0x20012864

00005528 <TwoWire::isr()>:
{
    5528:	push	{r4, r5, r6, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    552a:	ldr	r6, [r0, #16]
{
    552c:	mov	r4, r0
	uint32_t status = port->SSR;
    552e:	ldr.w	r5, [r6, #276]	@ 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    5532:	ands.w	r3, r5, #3840	@ 0xf00
    5536:	beq.n	553c <TwoWire::isr()+0x14>
    5538:	str.w	r3, [r6, #276]	@ 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    553c:	lsls	r0, r5, #30
    553e:	bpl.n	5560 <TwoWire::isr()+0x38>
		int rx = port->SRDR;
    5540:	ldr.w	r2, [r6, #368]	@ 0x170
		if (rx & 0x8000) {
    5544:	lsls	r1, r2, #16
			rxBufferIndex = 0;
    5546:	itt	mi
    5548:	movmi	r3, #0
    554a:	strhmi.w	r3, [r4, #162]	@ 0xa2
		if (rxBufferLength < BUFFER_LENGTH) {
    554e:	ldrb.w	r3, [r4, #163]	@ 0xa3
    5552:	cmp	r3, #135	@ 0x87
			rxBuffer[rxBufferLength++] = rx & 255;
    5554:	itttt	ls
    5556:	addls	r1, r3, #1
    5558:	addls	r3, r3, r4
    555a:	strbls.w	r1, [r4, #163]	@ 0xa3
    555e:	strbls	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    5560:	lsls	r2, r5, #31
    5562:	bpl.n	559e <TwoWire::isr()+0x76>
		if (!transmitting) {
    5564:	ldrb.w	r3, [r4, #304]	@ 0x130
    5568:	cbnz	r3, 557e <TwoWire::isr()+0x56>
			if (user_onRequest != nullptr) {
    556a:	ldr.w	r3, [r4, #312]	@ 0x138
    556e:	cbz	r3, 5572 <TwoWire::isr()+0x4a>
				(*user_onRequest)();
    5570:	blx	r3
			txBufferIndex = 0;
    5572:	movs	r3, #0
    5574:	strb.w	r3, [r4, #302]	@ 0x12e
			transmitting = 1;
    5578:	movs	r3, #1
    557a:	strb.w	r3, [r4, #304]	@ 0x130
		if (txBufferIndex < txBufferLength) {
    557e:	ldrb.w	r3, [r4, #302]	@ 0x12e
    5582:	ldrb.w	r2, [r4, #303]	@ 0x12f
    5586:	cmp	r2, r3
			port->STDR = txBuffer[txBufferIndex++];
    5588:	ittet	hi
    558a:	addhi	r2, r3, #1
    558c:	addhi	r3, r3, r4
			port->STDR = 0;
    558e:	movls	r3, #0
			port->STDR = txBuffer[txBufferIndex++];
    5590:	strbhi.w	r2, [r4, #302]	@ 0x12e
    5594:	it	hi
    5596:	ldrbhi.w	r3, [r3, #165]	@ 0xa5
			port->STDR = 0;
    559a:	str.w	r3, [r6, #352]	@ 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    559e:	lsls	r3, r5, #22
    55a0:	bpl.n	55be <TwoWire::isr()+0x96>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    55a2:	ldrb.w	r0, [r4, #163]	@ 0xa3
    55a6:	cbz	r0, 55b0 <TwoWire::isr()+0x88>
    55a8:	ldr.w	r3, [r4, #316]	@ 0x13c
    55ac:	cbz	r3, 55b0 <TwoWire::isr()+0x88>
			(*user_onReceive)(rxBufferLength);
    55ae:	blx	r3
		rxBufferIndex = 0;
    55b0:	movs	r3, #0
    55b2:	strh.w	r3, [r4, #162]	@ 0xa2
		txBufferIndex = 0;
    55b6:	strh.w	r3, [r4, #302]	@ 0x12e
		transmitting = 0;
    55ba:	strb.w	r3, [r4, #304]	@ 0x130
}
    55be:	pop	{r4, r5, r6, pc}

000055c0 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    55c0:	ldr	r0, [pc, #4]	@ (55c8 <lpi2c1_isr()+0x8>)
    55c2:	b.w	5528 <TwoWire::isr()>
    55c6:	nop
    55c8:	.word	0x20001e68

000055cc <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    55cc:	ldr	r0, [pc, #4]	@ (55d4 <lpi2c3_isr()+0x8>)
    55ce:	b.w	5528 <TwoWire::isr()>
    55d2:	nop
    55d4:	.word	0x20001fa8

000055d8 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    55d8:	ldr	r0, [pc, #4]	@ (55e0 <lpi2c4_isr()+0x8>)
    55da:	b.w	5528 <TwoWire::isr()>
    55de:	nop
    55e0:	.word	0x200020e8

000055e4 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    55e4:	ldr	r3, [r0, #16]
	port->MCR = 0;
    55e6:	movs	r2, #0
	if (frequency < 400000) {
    55e8:	ldr	r0, [pc, #76]	@ (5638 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    55ea:	str	r2, [r3, #16]
	if (frequency < 400000) {
    55ec:	cmp	r1, r0
    55ee:	bhi.n	5616 <TwoWire::setClock(unsigned long)+0x32>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    55f0:	ldr	r2, [pc, #72]	@ (563c <TwoWire::setClock(unsigned long)+0x58>)
    55f2:	str	r2, [r3, #72]	@ 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    55f4:	movs	r2, #1
    55f6:	str	r2, [r3, #36]	@ 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    55f8:	ldr	r2, [pc, #68]	@ (5640 <TwoWire::setClock(unsigned long)+0x5c>)
    55fa:	str	r2, [r3, #40]	@ 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    55fc:	mov.w	r2, #180224	@ 0x2c000
    5600:	str	r2, [r3, #44]	@ 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    5602:	ldr	r2, [r3, #72]	@ 0x48
    5604:	str	r2, [r3, #80]	@ 0x50
	port->MCFGR0 = 0;
    5606:	movs	r2, #0
    5608:	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    560a:	mov.w	r2, #65537	@ 0x10001
    560e:	str	r2, [r3, #88]	@ 0x58
	port->MCR = LPI2C_MCR_MEN;
    5610:	movs	r2, #1
    5612:	str	r2, [r3, #16]
}
    5614:	bx	lr
	} else if (frequency < 1000000) {
    5616:	ldr	r0, [pc, #44]	@ (5644 <TwoWire::setClock(unsigned long)+0x60>)
    5618:	cmp	r1, r0
    561a:	ldr	r1, [pc, #44]	@ (5648 <TwoWire::setClock(unsigned long)+0x64>)
    561c:	bhi.n	562c <TwoWire::setClock(unsigned long)+0x48>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    561e:	ldr	r0, [pc, #44]	@ (564c <TwoWire::setClock(unsigned long)+0x68>)
    5620:	str	r0, [r3, #72]	@ 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    5622:	str	r2, [r3, #36]	@ 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    5624:	ldr	r2, [pc, #40]	@ (5650 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    5626:	str	r2, [r3, #40]	@ 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    5628:	str	r1, [r3, #44]	@ 0x2c
    562a:	b.n	5602 <TwoWire::setClock(unsigned long)+0x1e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    562c:	ldr	r0, [pc, #36]	@ (5654 <TwoWire::setClock(unsigned long)+0x70>)
    562e:	str	r0, [r3, #72]	@ 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    5630:	str	r2, [r3, #36]	@ 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    5632:	ldr	r2, [pc, #36]	@ (5658 <TwoWire::setClock(unsigned long)+0x74>)
    5634:	b.n	5626 <TwoWire::setClock(unsigned long)+0x42>
    5636:	nop
    5638:	.word	0x00061a7f
    563c:	.word	0x1928373b
    5640:	.word	0x05050bb8
    5644:	.word	0x000f423f
    5648:	.word	0x00057f00
    564c:	.word	0x0c121a1c
    5650:	.word	0x02020e10
    5654:	.word	0x0407090a
    5658:	.word	0x01010960

0000565c <FsUtf::cpToMb(unsigned long, char*, char*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsUtf.h"
namespace FsUtf {
  //----------------------------------------------------------------------------
  char* cpToMb(uint32_t cp, char* str, char* end) {
    565c:	mov	r3, r0
    size_t n = end - str;
    565e:	subs	r0, r2, r1
    if (cp < 0X80) {
    5660:	cmp	r3, #127	@ 0x7f
    5662:	bhi.n	5670 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    5664:	cmp	r0, #0
    5666:	beq.n	56ec <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    5668:	mov	r0, r1
    566a:	strb.w	r3, [r0], #1
    566e:	bx	lr
    } else if (cp < 0X800) {
    5670:	cmp.w	r3, #2048	@ 0x800
    5674:	bcs.n	5692 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    5676:	cmp	r0, #1
    5678:	bls.n	56ea <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    567a:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    567c:	and.w	r3, r3, #63	@ 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5680:	mov	r0, r1
    5682:	orn	r2, r2, #63	@ 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5686:	orn	r3, r3, #127	@ 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    568a:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    568e:	strb	r3, [r1, #1]
    5690:	bx	lr
    } else if (cp < 0X10000) {
    5692:	cmp.w	r3, #65536	@ 0x10000
    5696:	bcs.n	56bc <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    5698:	cmp	r0, #2
    569a:	bls.n	56ea <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    569c:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    569e:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    56a0:	orn	r2, r2, #31
    56a4:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    56a6:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    56aa:	and.w	r3, r3, #63	@ 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    56ae:	orn	r2, r2, #127	@ 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    56b2:	orn	r3, r3, #127	@ 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    56b6:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    56b8:	strb	r3, [r1, #2]
    56ba:	bx	lr
    } else {
       if (n < 4) goto fail;
    56bc:	cmp	r0, #3
    56be:	bls.n	56ea <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    56c0:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    56c2:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    56c4:	orn	r2, r2, #15
    56c8:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    56ca:	ubfx	r2, r3, #12, #6
    56ce:	orn	r2, r2, #127	@ 0x7f
    56d2:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    56d4:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    56d8:	and.w	r3, r3, #63	@ 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    56dc:	orn	r2, r2, #127	@ 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    56e0:	orn	r3, r3, #127	@ 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    56e4:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    56e6:	strb	r3, [r1, #3]
    56e8:	bx	lr
    }
    return str;

   fail:
    return nullptr;
    56ea:	movs	r0, #0
  }
    56ec:	bx	lr
	...

000056f0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
  //----------------------------------------------------------------------------
  // to do?  improve error check
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    size_t n;
    uint32_t cp;
    if (str >= end) {
    56f0:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    56f2:	push	{r4, r5, lr}
    56f4:	mov	r5, r0
    if (str >= end) {
    56f6:	bcs.n	576e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      return nullptr;
    }
    uint8_t ch = str[0];
    56f8:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    56fa:	ldrsb.w	r0, [r0]
    56fe:	cmp	r0, #0
    5700:	blt.n	5708 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      *rtn = ch;
      return str + 1;
    5702:	adds	r0, r5, #1
      *rtn = ch;
    5704:	str	r3, [r2, #0]
    if (cp < 0X80 || !isValidCp(cp)) {
      return nullptr;
    }
    *rtn = cp;
    return str + n;
  }
    5706:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    5708:	and.w	r0, r3, #224	@ 0xe0
    570c:	cmp	r0, #192	@ 0xc0
    570e:	bne.n	574e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    5710:	and.w	r3, r3, #31
      n = 2;
    5714:	movs	r4, #2
    if ((str + n) > end) {
    5716:	adds	r0, r5, r4
    5718:	cmp	r0, r1
    571a:	bhi.n	576e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    571c:	adds	r5, #1
      ch = str[i];
    571e:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    5722:	and.w	r4, r1, #192	@ 0xc0
    5726:	cmp	r4, #128	@ 0x80
    5728:	bne.n	576e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    572a:	and.w	r1, r1, #63	@ 0x3f
    for (size_t i = 1; i < n; i++) {
    572e:	cmp	r5, r0
      cp |= ch & 0X3F;
    5730:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    5734:	bne.n	571e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    5736:	sub.w	r4, r3, #128	@ 0x80
    573a:	ldr	r1, [pc, #56]	@ (5774 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    573c:	cmp	r4, r1
    573e:	bhi.n	576e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    5740:	sub.w	r1, r3, #55296	@ 0xd800
    5744:	cmp.w	r1, #2048	@ 0x800
    5748:	bcc.n	576e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    574a:	str	r3, [r2, #0]
    return str + n;
    574c:	b.n	5706 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    574e:	and.w	r0, r3, #240	@ 0xf0
    5752:	cmp	r0, #224	@ 0xe0
    5754:	bne.n	575e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    5756:	and.w	r3, r3, #15
      n = 3;
    575a:	movs	r4, #3
    575c:	b.n	5716 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    575e:	and.w	r0, r3, #248	@ 0xf8
    5762:	cmp	r0, #240	@ 0xf0
    5764:	bne.n	576e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    5766:	and.w	r3, r3, #7
      n = 4;
    576a:	movs	r4, #4
    576c:	b.n	5716 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    576e:	movs	r0, #0
    5770:	b.n	5706 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    5772:	nop
    5774:	.word	0x0010ff7f

00005778 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    5778:	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    577a:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    577c:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    577e:	lsls	r2, r3, #31
    5780:	bpl.n	57a6 <FsCache::sync()+0x2e>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    5782:	ldr	r0, [r0, #4]
    5784:	add.w	r5, r4, #16
    5788:	ldr	r1, [r4, #12]
    578a:	ldr	r3, [r0, #0]
    578c:	mov	r2, r5
    578e:	ldr	r3, [r3, #36]	@ 0x24
    5790:	blx	r3
    5792:	cbnz	r0, 5798 <FsCache::sync()+0x20>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    5794:	movs	r0, #0
}
    5796:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5798:	ldrb	r3, [r4, #0]
    579a:	lsls	r3, r3, #30
    579c:	bmi.n	57aa <FsCache::sync()+0x32>
    m_status &= ~CACHE_STATUS_DIRTY;
    579e:	ldrb	r3, [r4, #0]
    57a0:	bic.w	r3, r3, #1
    57a4:	strb	r3, [r4, #0]
  return true;
    57a6:	movs	r0, #1
    57a8:	b.n	5796 <FsCache::sync()+0x1e>
      uint32_t sector = m_sector + m_mirrorOffset;
    57aa:	adds	r0, r4, #4
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    57ac:	mov	r2, r5
      uint32_t sector = m_sector + m_mirrorOffset;
    57ae:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    57b0:	ldr	r3, [r0, #0]
    57b2:	add	r1, r6
    57b4:	ldr	r3, [r3, #36]	@ 0x24
    57b6:	blx	r3
    57b8:	cmp	r0, #0
    57ba:	bne.n	579e <FsCache::sync()+0x26>
    57bc:	b.n	5794 <FsCache::sync()+0x1c>

000057be <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    57be:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    57c0:	push	{r4, r5, r6, lr}
    57c2:	mov	r4, r0
    57c4:	mov	r6, r1
    57c6:	mov	r5, r2
  if (!m_blockDev) {
    57c8:	cbnz	r3, 57ce <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    57ca:	movs	r0, #0
}
    57cc:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    57ce:	ldr	r3, [r0, #12]
    57d0:	cmp	r3, r1
    57d2:	beq.n	57e6 <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    57d4:	bl	5778 <FsCache::sync()>
    57d8:	cmp	r0, #0
    57da:	beq.n	57ca <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    57dc:	lsls	r3, r5, #29
    57de:	bpl.n	57f6 <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    57e0:	movs	r3, #0
    m_sector = sector;
    57e2:	str	r6, [r4, #12]
    m_status = 0;
    57e4:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    57e6:	ldrb	r3, [r4, #0]
    57e8:	and.w	r5, r5, #3
    57ec:	mov	r0, r4
    57ee:	orrs	r3, r5
    57f0:	strb.w	r3, [r0], #16
  return m_buffer;
    57f4:	b.n	57cc <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    57f6:	ldr	r0, [r4, #4]
    57f8:	add.w	r2, r4, #16
    57fc:	mov	r1, r6
    57fe:	ldr	r3, [r0, #0]
    5800:	ldr	r3, [r3, #16]
    5802:	blx	r3
    5804:	cmp	r0, #0
    5806:	bne.n	57e0 <FsCache::prepare(unsigned long, unsigned char)+0x22>
    5808:	b.n	57ca <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

0000580c <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    580c:	cmp	r0, #126	@ 0x7e
uint16_t toUpcase(uint16_t chr) {
    580e:	push	{r4, r5, lr}
  if (chr < 127) {
    5810:	bhi.n	5862 <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    5812:	sub.w	r3, r0, #97	@ 0x61
    5816:	cmp	r3, #25
    5818:	ite	hi
    581a:	movhi	r3, #0
    581c:	movls	r3, #1
    581e:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    5822:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    5824:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    5826:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    582a:	ldrh.w	r5, [r1, r2, lsl #2]
    582e:	cmp	r5, r0
    5830:	ite	hi
    5832:	movhi	r4, r2
    5834:	movls	r3, r2
  while (right - left > 1) {
    5836:	subs	r2, r4, r3
    5838:	cmp	r2, #1
    583a:	bhi.n	5826 <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    583c:	uxth	r2, r3
    583e:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    5842:	cmp	r0, r3
    5844:	bcc.n	58a2 <toUpcase(unsigned short)+0x96>
    5846:	add.w	r1, r1, r2, lsl #2
    584a:	subs	r3, r0, r3
    584c:	ldrb	r2, [r1, #3]
    584e:	cmp	r3, r2
    5850:	bge.n	58a2 <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    5852:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    5856:	cmp	r2, #1
    5858:	bne.n	586a <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    585a:	and.w	r3, r3, #1
    585e:	subs	r3, r0, r3
    5860:	b.n	5822 <toUpcase(unsigned short)+0x16>
  size_t right = size;
    5862:	movs	r4, #53	@ 0x35
  size_t left = 0;
    5864:	movs	r3, #0
    5866:	ldr	r1, [pc, #68]	@ (58ac <toUpcase(unsigned short)+0xa0>)
    5868:	b.n	5836 <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    586a:	cbz	r2, 5874 <toUpcase(unsigned short)+0x68>
    586c:	uxth	r2, r2
    586e:	add	r2, r0
    5870:	uxth	r0, r2
    5872:	b.n	5824 <toUpcase(unsigned short)+0x18>
    5874:	movw	r2, #58272	@ 0xe3a0
    5878:	b.n	586e <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    587a:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    587e:	ldrh.w	r5, [r1, r2, lsl #2]
    5882:	cmp	r5, r0
    5884:	ite	hi
    5886:	movhi	r4, r2
    5888:	movls	r3, r2
  while (right - left > 1) {
    588a:	subs	r2, r4, r3
    588c:	cmp	r2, #1
    588e:	bhi.n	587a <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    5890:	uxth	r3, r3
    5892:	ldrh.w	r2, [r1, r3, lsl #2]
    5896:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    5898:	itt	eq
    589a:	addeq.w	r1, r1, r3, lsl #2
    589e:	ldrheq	r0, [r1, #2]
    58a0:	b.n	5824 <toUpcase(unsigned short)+0x18>
    58a2:	movs	r4, #75	@ 0x4b
    58a4:	movs	r3, #0
    58a6:	ldr	r1, [pc, #8]	@ (58b0 <toUpcase(unsigned short)+0xa4>)
    58a8:	b.n	588a <toUpcase(unsigned short)+0x7e>
    58aa:	nop
    58ac:	.word	0x20000ce8
    58b0:	.word	0x20000b80

000058b4 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    58b4:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    58b6:	push	{r0, r1, r4, lr}
    58b8:	mov	r4, r0
  if (ls) {
    58ba:	cbz	r3, 58c6 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    58bc:	movs	r2, #0
    58be:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    58c0:	mov	r0, r3
    58c2:	add	sp, #8
    58c4:	pop	{r4, pc}
  } else if (next >= end) {
    58c6:	ldrd	r0, r1, [r0, #4]
    58ca:	cmp	r0, r1
    58cc:	bcs.n	58c0 <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    58ce:	add	r2, sp, #4
    58d0:	bl	56f0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    58d4:	cbnz	r0, 58dc <FsName::get16()+0x28>
  return 0XFFFF;
    58d6:	movw	r3, #65535	@ 0xffff
    58da:	b.n	58c0 <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    58dc:	ldr	r2, [sp, #4]
    next = ptr;
    58de:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    58e0:	cmp.w	r2, #65536	@ 0x10000
      rtn = cp;
    58e4:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    58e6:	bcc.n	58c0 <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    58e8:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    58ec:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    58ee:	sub.w	r3, r3, #9216	@ 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    58f2:	sub.w	r2, r2, #10304	@ 0x2840
      ls = FsUtf::lowSurrogate(cp);
    58f6:	strh	r3, [r4, #12]
    58f8:	uxth	r3, r2
    58fa:	b.n	58c0 <FsName::get16()+0xc>

000058fc <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    58fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5900:	mov	r6, r2
    5902:	mov	r5, r1
    5904:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    5908:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    590a:	ldrh.w	r4, [r5, #2]!
    590e:	cbnz	r3, 5922 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    5910:	ldrd	r2, r3, [r6, #4]
    5914:	cmp	r2, r3
    5916:	bne.n	5922 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
  for (uint8_t i = 0; i < 15; i++) {
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    5918:	clz	r0, r4
    591c:	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
    591e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    5922:	mov	r0, r6
    5924:	bl	58b4 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    5928:	bl	580c <toUpcase(unsigned short)>
    592c:	mov	r7, r0
    592e:	mov	r0, r4
    5930:	bl	580c <toUpcase(unsigned short)>
    5934:	cmp	r7, r0
    5936:	bne.n	5940 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    5938:	cmp	r5, r8
    593a:	bne.n	5908 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    593c:	movs	r0, #1
    593e:	b.n	591e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    5940:	movs	r0, #0
    5942:	b.n	591e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

00005944 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    5944:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    5948:	ldrb.w	r3, [r0, #49]	@ 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    594c:	mov	sl, r0
    594e:	mov	r8, r1
  if (!isOpen()) {
    5950:	cmp	r3, #0
    5952:	beq.n	59e8 <ExFatFile::getName8(char*, unsigned int)+0xa4>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5954:	subs	r7, r2, #1
  char* str = name;
    5956:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5958:	mov.w	r9, #2
  uint16_t hs = 0;
    595c:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    595e:	adds	r3, r1, r7
    5960:	str	r3, [sp, #4]
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5962:	ldrb.w	r3, [sl, #48]	@ 0x30
    5966:	cmp	r3, r9
    5968:	bcc.n	59d0 <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    596a:	movs	r2, #0
    596c:	mov	r1, r9
    596e:	mov	r0, sl
    5970:	bl	5a54 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    5974:	mov	r6, r0
    5976:	cbz	r0, 59e8 <ExFatFile::getName8(char*, unsigned int)+0xa4>
    5978:	ldrb	r3, [r0, #0]
    597a:	cmp	r3, #193	@ 0xc1
    597c:	bne.n	59e8 <ExFatFile::getName8(char*, unsigned int)+0xa4>
    597e:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5982:	ldr	r7, [pc, #108]	@ (59f0 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    5984:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    5988:	cbz	r5, 59c0 <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    598a:	add.w	r2, r0, #9216	@ 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    598e:	uxth	r2, r2
    5990:	cmp.w	r2, #1024	@ 0x400
    5994:	bcs.n	59e8 <ExFatFile::getName8(char*, unsigned int)+0xa4>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5996:	and.w	r5, r7, r5, lsl #10
    599a:	ubfx	r0, r0, #0, #10
    599e:	orrs	r0, r5
    59a0:	add.w	r0, r0, #65536	@ 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    59a4:	mov	r1, r4
    59a6:	ldr	r2, [sp, #4]
    59a8:	bl	565c <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    59ac:	mov	r4, r0
    59ae:	cbz	r0, 59e8 <ExFatFile::getName8(char*, unsigned int)+0xa4>
    59b0:	movs	r5, #0
    for (uint8_t in = 0; in < 15; in++) {
    59b2:	cmp	r6, fp
    59b4:	bne.n	5984 <ExFatFile::getName8(char*, unsigned int)+0x40>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    59b6:	add.w	r9, r9, #1
    59ba:	uxtb.w	r9, r9
    59be:	b.n	5962 <ExFatFile::getName8(char*, unsigned int)+0x1e>
    return 0XD800 <= c && c <= 0XDFFF;
    59c0:	add.w	r2, r0, #10240	@ 0x2800
    59c4:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    59c6:	cmp.w	r2, #2048	@ 0x800
    59ca:	bcc.n	59de <ExFatFile::getName8(char*, unsigned int)+0x9a>
        if (c == 0) {
    59cc:	cmp	r0, #0
    59ce:	bne.n	59a4 <ExFatFile::getName8(char*, unsigned int)+0x60>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    59d0:	movs	r3, #0
  return str - name;
    59d2:	sub.w	r0, r4, r8
  *str = '\0';
    59d6:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    59d8:	add	sp, #12
    59da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    59de:	cmp.w	r2, #1024	@ 0x400
    59e2:	bcs.n	59e8 <ExFatFile::getName8(char*, unsigned int)+0xa4>
        hs = c;
    59e4:	mov	r5, r0
    59e6:	b.n	59b2 <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    59e8:	movs	r0, #0
    59ea:	strb.w	r0, [r8]
  return 0;
    59ee:	b.n	59d8 <ExFatFile::getName8(char*, unsigned int)+0x94>
    59f0:	.word	0x000ffc00

000059f4 <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    59f4:	movs	r0, #0
    next = begin;
    59f6:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    59f8:	push	{r4, r5, r6, lr}
    59fa:	mov	r4, r1
  uint16_t hash = 0;
    59fc:	mov	r5, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    59fe:	movw	r6, #65535	@ 0xffff
    5a02:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    5a04:	strh	r0, [r1, #12]
    return !ls && next == end;
    5a06:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    5a08:	str	r0, [r4, #16]
    5a0a:	cbnz	r3, 5a46 <ExFatFile::hashName(ExName_t*)+0x52>
    5a0c:	ldrd	r2, r3, [r4, #4]
    5a10:	cmp	r2, r3
    5a12:	bne.n	5a46 <ExFatFile::hashName(ExName_t*)+0x52>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5a14:	subs	r0, #1
  fname->nameHash = hash;
    5a16:	strh	r5, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5a18:	cmp	r0, #254	@ 0xfe
    5a1a:	ite	hi
    5a1c:	movhi	r0, #0
    5a1e:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    5a20:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    5a22:	bl	580c <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5a26:	lsls	r3, r5, #15
    5a28:	orr.w	r3, r3, r5, lsr #1
    5a2c:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5a30:	lsrs	r0, r0, #8
    5a32:	ubfx	r5, r3, #1, #15
    5a36:	orr.w	r5, r5, r3, lsl #15
    5a3a:	uxtah	r5, r0, r5
    fname->nameLength++;
    5a3e:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5a40:	uxth	r5, r5
    fname->nameLength++;
    5a42:	adds	r0, #1
    5a44:	b.n	5a06 <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    5a46:	mov	r0, r4
    5a48:	bl	58b4 <FsName::get16()>
    if (u == 0XFFFF) {
    5a4c:	cmp	r0, r6
    5a4e:	bne.n	5a22 <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    5a50:	movs	r0, #0
    5a52:	b.n	5a20 <ExFatFile::hashName(ExName_t*)+0x2c>

00005a54 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5a54:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    5a56:	add.w	r3, r0, #36	@ 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5a5a:	sub	sp, #20
    5a5c:	mov	r4, r0
    5a5e:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    5a60:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5a62:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    5a64:	ldmia.w	r3, {r0, r1, r2}
    5a68:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    5a6c:	lsls	r2, r7, #5
    5a6e:	mov	r1, r5
    5a70:	ldr	r0, [r4, #32]
    5a72:	bl	6434 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5a76:	cmp	r0, #1
    5a78:	bne.n	5a88 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    5a7a:	mov	r2, r6
    5a7c:	mov	r1, r5
    5a7e:	ldr	r0, [r4, #32]
    5a80:	bl	639a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    5a84:	add	sp, #20
    5a86:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    5a88:	movs	r0, #0
    5a8a:	b.n	5a84 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00005a8c <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    5a8c:	push	{r4, lr}
    5a8e:	mov	r4, r0
  bool rtn = sync();
    5a90:	bl	694c <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5a94:	movs	r3, #0
    5a96:	strb.w	r3, [r4, #49]	@ 0x31
  m_flags = 0;
    5a9a:	strb.w	r3, [r4, #51]	@ 0x33
  return rtn;
}
    5a9e:	pop	{r4, pc}

00005aa0 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5aa0:	push	{r3, r4, r5, lr}
    5aa2:	mov	r5, r1
    5aa4:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5aa6:	add.w	r1, r0, #36	@ 0x24
    5aaa:	movs	r2, #0
    5aac:	ldr	r0, [r0, #32]
    5aae:	bl	639a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5ab2:	cbz	r0, 5abe <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    5ab4:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    5ab6:	strh	r3, [r5, #0]
    5ab8:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    5aba:	movs	r0, #1
  *ptime = getLe16(df->createTime);
    5abc:	strh	r3, [r4, #0]

 fail:
  return false;
}
    5abe:	pop	{r3, r4, r5, pc}

00005ac0 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5ac0:	push	{r3, r4, r5, lr}
    5ac2:	mov	r5, r1
    5ac4:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5ac6:	add.w	r1, r0, #36	@ 0x24
    5aca:	movs	r2, #0
    5acc:	ldr	r0, [r0, #32]
    5ace:	bl	639a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5ad2:	cbz	r0, 5ade <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    5ad4:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    5ad6:	strh	r3, [r5, #0]
    5ad8:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    5ada:	movs	r0, #1
  *ptime = getLe16(df->modifyTime);
    5adc:	strh	r3, [r4, #0]

 fail:
  return false;
}
    5ade:	pop	{r3, r4, r5, pc}

00005ae0 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5ae0:	push	{r3, r4, r5, lr}
    5ae2:	mov	r5, r1
  if (isOpen()) {
    5ae4:	ldrb.w	r1, [r0, #49]	@ 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5ae8:	mov	r4, r0
  if (isOpen()) {
    5aea:	cbnz	r1, 5b02 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    5aec:	movs	r2, #56	@ 0x38
    5aee:	bl	a2ac <memset>
  m_attributes = FILE_ATTR_ROOT;
    5af2:	movs	r3, #64	@ 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    5af4:	movs	r0, #1
  m_vol = vol;
    5af6:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    5af8:	strb.w	r3, [r4, #49]	@ 0x31
  m_flags = FILE_FLAG_READ;
    5afc:	strb.w	r0, [r4, #51]	@ 0x33
  return true;

 fail:
  return false;
}
    5b00:	pop	{r3, r4, r5, pc}
  return false;
    5b02:	movs	r0, #0
    5b04:	b.n	5b00 <ExFatFile::openRoot(ExFatVolume*)+0x20>
	...

00005b08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    5b08:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    5b0a:	mov	r5, r1
    5b0c:	ldrb.w	r4, [r1], #1
    5b10:	cmp	r4, #32
    5b12:	beq.n	5b0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    5b14:	ldr	r7, [pc, #108]	@ (5b84 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    5b16:	str	r5, [r2, #0]
  fname->end = path;
    5b18:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    5b1a:	mov	r6, r5
    5b1c:	ldrb.w	r4, [r6], #1
    5b20:	cbz	r4, 5b26 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5b22:	cmp	r4, #47	@ 0x2f
    5b24:	bne.n	5b3e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    5b26:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    5b28:	ldrb.w	r1, [r5], #1
    5b2c:	cmp	r1, #32
    5b2e:	beq.n	5b26 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5b30:	cmp	r1, #47	@ 0x2f
    5b32:	beq.n	5b26 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    5b34:	str	r4, [r3, #0]
  return hashName(fname);
    5b36:	mov	r1, r2

 fail:
  return false;
}
    5b38:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    5b3a:	b.w	59f4 <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    5b3e:	cmp	r4, #60	@ 0x3c
    5b40:	bhi.n	5b64 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5c>
    5b42:	cmp	r4, #33	@ 0x21
    5b44:	bhi.n	5b52 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    5b46:	subs	r1, r4, #1
    5b48:	cmp	r1, #30
    5b4a:	bhi.n	5b7a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x72>
}
    5b4c:	movs	r0, #0
    5b4e:	pop	{r4, r5, r6, r7}
    5b50:	bx	lr
    5b52:	sub.w	r1, r4, #34	@ 0x22
    5b56:	uxtb	r1, r1
    5b58:	lsr.w	r1, r7, r1
    5b5c:	lsls	r1, r1, #31
    5b5e:	bmi.n	5b4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x44>
    if (c != '.' && c != ' ') {
    5b60:	cmp	r4, #46	@ 0x2e
    5b62:	b.n	5b7c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    5b64:	cmp	r4, #92	@ 0x5c
    5b66:	beq.n	5b4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x44>
    5b68:	bhi.n	5b74 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    5b6a:	subs	r4, #62	@ 0x3e
    5b6c:	cmp	r4, #1
    5b6e:	bls.n	5b4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x44>
      fname->end = path;
    5b70:	str	r6, [r2, #8]
    5b72:	b.n	5b7e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    5b74:	cmp	r4, #124	@ 0x7c
    5b76:	bne.n	5b70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x68>
    5b78:	b.n	5b4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x44>
    if (c != '.' && c != ' ') {
    5b7a:	cmp	r4, #32
    5b7c:	bne.n	5b70 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x68>
                            ExName_t* fname, const char** ptr) {
    5b7e:	mov	r5, r6
    5b80:	b.n	5b1a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    5b82:	nop
    5b84:	.word	0x05002101

00005b88 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    5b88:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5b8c:	ldrb.w	r3, [r0, #51]	@ 0x33
    5b90:	mov	r4, r0
    5b92:	mov	r9, r1
    5b94:	mov	r6, r2
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    5b96:	lsls	r5, r3, #31
    5b98:	bpl.w	5cd6 <ExFatFile::read(void*, unsigned int)+0x14e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5b9c:	lsls	r0, r3, #25
    5b9e:	bmi.n	5ba8 <ExFatFile::read(void*, unsigned int)+0x20>
    5ba0:	ldrb.w	r3, [r4, #49]	@ 0x31
    5ba4:	lsls	r1, r3, #28
    5ba6:	bpl.n	5bc0 <ExFatFile::read(void*, unsigned int)+0x38>
    if ((m_curPosition + count) > m_validLength) {
    5ba8:	ldrd	r2, r3, [r4]
    5bac:	ldrd	r1, r0, [r4, #16]
    5bb0:	adds	r5, r6, r2
    5bb2:	adc.w	r3, r3, #0
    5bb6:	cmp	r1, r5
    5bb8:	sbcs.w	r3, r0, r3
    5bbc:	bcs.n	5bc0 <ExFatFile::read(void*, unsigned int)+0x38>
      count = toRead = m_validLength - m_curPosition;
    5bbe:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5bc0:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5bc4:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5bc6:	str	r3, [sp, #0]
    5bc8:	b.n	5c34 <ExFatFile::read(void*, unsigned int)+0xac>
      } else if (isContiguous()) {
    5bca:	ldrb.w	r3, [r4, #51]	@ 0x33
        m_curCluster++;
    5bce:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    5bd0:	lsls	r3, r3, #25
    5bd2:	bpl.n	5bda <ExFatFile::read(void*, unsigned int)+0x52>
        m_curCluster++;
    5bd4:	adds	r1, #1
    5bd6:	str	r1, [r4, #24]
    5bd8:	b.n	5c60 <ExFatFile::read(void*, unsigned int)+0xd8>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5bda:	ldr	r2, [sp, #0]
    5bdc:	bl	63ce <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5be0:	cmp	r0, #0
    5be2:	blt.n	5cd6 <ExFatFile::read(void*, unsigned int)+0x14e>
        if (fg == 0) {
    5be4:	bne.n	5c60 <ExFatFile::read(void*, unsigned int)+0xd8>
          if (isDir()) {
    5be6:	ldrb.w	r3, [r4, #49]	@ 0x31
    5bea:	tst.w	r3, #80	@ 0x50
    5bee:	beq.n	5cd6 <ExFatFile::read(void*, unsigned int)+0x14e>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    5bf0:	sub.w	r0, r6, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    5bf4:	add	sp, #12
    5bf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    5bfa:	rsb	r7, sl, #512	@ 0x200
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    5bfe:	movs	r2, #0
    5c00:	mov	r1, r5
    5c02:	add.w	r0, fp, #528	@ 0x210
      if (n > toRead) {
    5c06:	cmp	r7, r8
    5c08:	it	cs
    5c0a:	movcs	r7, r8
    5c0c:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5c10:	cmp	r0, #0
    5c12:	beq.n	5cd6 <ExFatFile::read(void*, unsigned int)+0x14e>
      memcpy(dst, src, n);
    5c14:	add.w	r1, r0, sl
    5c18:	mov	r2, r7
    5c1a:	mov	r0, r9
    5c1c:	bl	a2f0 <memcpy>
    dst += n;
    5c20:	add	r9, r7
    toRead -= n;
    5c22:	sub.w	r8, r8, r7
    m_curPosition += n;
    5c26:	ldrd	r3, r2, [r4]
    5c2a:	adds	r3, r3, r7
    5c2c:	adc.w	r2, r2, #0
    5c30:	strd	r3, r2, [r4]
  while (toRead) {
    5c34:	cmp.w	r8, #0
    5c38:	beq.n	5bf0 <ExFatFile::read(void*, unsigned int)+0x68>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5c3a:	ldr	r0, [r4, #32]
    5c3c:	ldrd	r3, r2, [r4]
    5c40:	ldr.w	r7, [r0, #1080]	@ 0x438
    5c44:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5c46:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    5c4a:	cbnz	r7, 5c60 <ExFatFile::read(void*, unsigned int)+0xd8>
      if (m_curPosition == 0) {
    5c4c:	orrs	r3, r2
    5c4e:	bne.n	5bca <ExFatFile::read(void*, unsigned int)+0x42>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5c50:	ldrb.w	r3, [r4, #49]	@ 0x31
    5c54:	lsls	r2, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5c56:	ite	mi
    5c58:	ldrmi.w	r3, [r0, #1076]	@ 0x434
    5c5c:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    5c5e:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    5c60:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5c64:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5c66:	ldr	r2, [r4, #24]
    5c68:	ldrb.w	r1, [fp, #1093]	@ 0x445
    5c6c:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5c6e:	ldr.w	r2, [fp, #1068]	@ 0x42c
    5c72:	lsls	r5, r1
    5c74:	add.w	r5, r5, r7, lsr #9
    5c78:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    5c7a:	cmp.w	sl, #0
    5c7e:	bne.n	5bfa <ExFatFile::read(void*, unsigned int)+0x72>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5c80:	cmp.w	r8, #512	@ 0x200
    5c84:	bcc.n	5bfa <ExFatFile::read(void*, unsigned int)+0x72>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5c86:	ldr.w	r2, [fp, #540]	@ 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5c8a:	cmp	r5, r2
    5c8c:	beq.n	5bfa <ExFatFile::read(void*, unsigned int)+0x72>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5c8e:	cmp.w	r8, #1024	@ 0x400
    5c92:	bcs.n	5caa <ExFatFile::read(void*, unsigned int)+0x122>
    return m_blockDev->readSector(sector, dst);
    5c94:	ldr.w	r0, [fp, #532]	@ 0x214
    5c98:	mov	r2, r9
    5c9a:	mov	r1, r5
    5c9c:	ldr	r3, [r0, #0]
    5c9e:	ldr	r3, [r3, #16]
    5ca0:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5ca2:	cbz	r0, 5cd6 <ExFatFile::read(void*, unsigned int)+0x14e>
      n = m_vol->bytesPerSector();
    5ca4:	mov.w	r7, #512	@ 0x200
    5ca8:	b.n	5c20 <ExFatFile::read(void*, unsigned int)+0x98>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5caa:	movs	r3, #1
    5cac:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5cae:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5cb2:	subs	r3, r3, r0
      if (ns > maxNs) {
    5cb4:	cmp	r3, r1
    5cb6:	it	cs
    5cb8:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    5cba:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    5cbc:	mov.w	r7, r3, lsl #9
    5cc0:	bls.n	5ce8 <ExFatFile::read(void*, unsigned int)+0x160>
    return m_blockDev->readSectors(sector, dst, count);
    5cc2:	ldr.w	r0, [fp, #532]	@ 0x214
    5cc6:	mov	r1, r5
    5cc8:	ldr	r2, [r0, #0]
    5cca:	ldr.w	fp, [r2, #20]
    5cce:	mov	r2, r9
    5cd0:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5cd2:	cmp	r0, #0
    5cd4:	bne.n	5c20 <ExFatFile::read(void*, unsigned int)+0x98>
  m_error |= READ_ERROR;
    5cd6:	ldrb.w	r3, [r4, #50]	@ 0x32
  return -1;
    5cda:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    5cde:	orr.w	r3, r3, #2
    5ce2:	strb.w	r3, [r4, #50]	@ 0x32
  return -1;
    5ce6:	b.n	5bf4 <ExFatFile::read(void*, unsigned int)+0x6c>
    return sector <= m_sector && m_sector < (sector + count);
    5ce8:	adds	r1, r5, r3
    5cea:	cmp	r2, r1
    5cec:	bcs.n	5cc2 <ExFatFile::read(void*, unsigned int)+0x13a>
    if (isCached(sector, count) && !sync()) {
    5cee:	add.w	r0, fp, #528	@ 0x210
    5cf2:	str	r3, [sp, #4]
    5cf4:	bl	5778 <FsCache::sync()>
    5cf8:	ldr	r3, [sp, #4]
    5cfa:	cmp	r0, #0
    5cfc:	bne.n	5cc2 <ExFatFile::read(void*, unsigned int)+0x13a>
    5cfe:	b.n	5cd6 <ExFatFile::read(void*, unsigned int)+0x14e>

00005d00 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5d00:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5d02:	movs	r2, #1
    5d04:	add.w	r1, sp, #7
    5d08:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    5d0a:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    5d0c:	ldrd	r6, r7, [r0]
    5d10:	bl	5b88 <ExFatFile::read(void*, unsigned int)>
    5d14:	cmp	r0, #1
  m_curCluster = curCluster;
    5d16:	str	r5, [r4, #24]
    5d18:	ite	eq
    5d1a:	ldrbeq.w	r0, [sp, #7]
    5d1e:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    5d22:	strd	r6, r7, [r4]
}
    5d26:	add	sp, #12
    5d28:	pop	{r4, r5, r6, r7, pc}

00005d2a <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5d2a:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    5d2e:	ldrb.w	ip, [r0, #49]	@ 0x31
    5d32:	mov	r4, r0
    5d34:	mov	r6, r2
    5d36:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5d38:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    5d3c:	cmp.w	ip, #0
    5d40:	beq.n	5dfc <ExFatFile::seekSet(unsigned long long)+0xd2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5d42:	ldrd	r0, r3, [r0]
    5d46:	cmp	r3, r7
    5d48:	it	eq
    5d4a:	cmpeq	r0, r2
    5d4c:	beq.n	5d5c <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    5d4e:	orrs.w	r2, r6, r7
    5d52:	bne.n	5d62 <ExFatFile::seekSet(unsigned long long)+0x38>
    // set position to start of file
    m_curCluster = 0;
    5d54:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    5d56:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    5d58:	strd	r6, r7, [r4]
    return true;
    5d5c:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    5d5e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isFile()) {
    5d62:	tst.w	ip, #8
    5d66:	beq.n	5d72 <ExFatFile::seekSet(unsigned long long)+0x48>
    if (pos > m_validLength) {
    5d68:	ldrd	r1, r2, [r4, #16]
    5d6c:	cmp	r1, r6
    5d6e:	sbcs	r2, r7
    5d70:	bcc.n	5dfc <ExFatFile::seekSet(unsigned long long)+0xd2>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    5d72:	ldr.w	lr, [r4, #32]
    5d76:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5d78:	ldrb.w	r1, [lr, #1093]	@ 0x445
    5d7c:	adc.w	sl, r7, #4294967295
    5d80:	adds	r1, #9
    5d82:	uxtb	r1, r1
    5d84:	rsb	r9, r1, #32
    5d88:	sub.w	r2, r1, #32
    5d8c:	lsrs	r5, r1
    5d8e:	lsl.w	r9, sl, r9
    5d92:	lsr.w	r2, sl, r2
    5d96:	sub.w	sl, r1, #32
    5d9a:	orr.w	r5, r5, r9
    5d9e:	rsb	r9, r1, #32
    5da2:	orrs	r5, r2
  if (isContiguous()) {
    5da4:	ldrb.w	r2, [r4, #51]	@ 0x33
    5da8:	tst.w	r2, #64	@ 0x40
    5dac:	beq.n	5db4 <ExFatFile::seekSet(unsigned long long)+0x8a>
    m_curCluster = m_firstCluster + nNew;
    5dae:	ldr	r3, [r4, #28]
    5db0:	add	r3, r5
    5db2:	b.n	5d56 <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5db4:	adds.w	fp, r0, #4294967295
    5db8:	adc.w	r2, r3, #4294967295
    5dbc:	lsr.w	r1, fp, r1
    5dc0:	lsl.w	r9, r2, r9
    5dc4:	lsr.w	r2, r2, sl
    5dc8:	orr.w	r1, r1, r9
    5dcc:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    5dce:	cmp	r5, r1
    5dd0:	bcc.n	5dd6 <ExFatFile::seekSet(unsigned long long)+0xac>
    5dd2:	orrs	r3, r0
    5dd4:	bne.n	5e04 <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5dd6:	tst.w	ip, #64	@ 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5dda:	ite	ne
    5ddc:	ldrne.w	r3, [lr, #1076]	@ 0x434
    5de0:	ldreq	r3, [r4, #28]
    5de2:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5de4:	add.w	r9, r4, #24
  while (nNew--) {
    5de8:	cmp	r5, #0
    5dea:	beq.n	5d58 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5dec:	mov	r2, r9
    5dee:	ldr	r1, [r4, #24]
    5df0:	ldr	r0, [r4, #32]
    5df2:	subs	r5, #1
    5df4:	bl	63ce <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5df8:	cmp	r0, #0
    5dfa:	bgt.n	5de8 <ExFatFile::seekSet(unsigned long long)+0xbe>
  return false;
    5dfc:	movs	r0, #0
  m_curCluster = tmp;
    5dfe:	str.w	r8, [r4, #24]
  return false;
    5e02:	b.n	5d5e <ExFatFile::seekSet(unsigned long long)+0x34>
    nNew -= nCur;
    5e04:	subs	r5, r5, r1
    5e06:	b.n	5de4 <ExFatFile::seekSet(unsigned long long)+0xba>

00005e08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5e08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e0c:	mov	sl, r3
    5e0e:	ldrb.w	r3, [r0, #49]	@ 0x31
    5e12:	sub	sp, #52	@ 0x34
    5e14:	mov	r4, r0
    5e16:	mov	r6, r1
    5e18:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    5e1a:	cmp	r3, #0
    5e1c:	bne.n	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5e1e:	ldrb.w	r3, [r1, #49]	@ 0x31
    5e22:	tst.w	r3, #80	@ 0x50
    5e26:	beq.n	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5e28:	and.w	r9, sl, #3
    5e2c:	cmp.w	r9, #3
    5e30:	beq.n	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    5e32:	add.w	r9, r9, #1
    5e36:	and.w	r3, sl, #8
    5e3a:	orr.w	r9, r9, r3
  if (fname) {
    5e3e:	cmp	r2, #0
    5e40:	beq.n	5eb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    5e42:	ldr	r7, [r2, #16]
    5e44:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5e46:	movs	r2, #0
    5e48:	mov	r0, r1
    5e4a:	adds	r7, #14
    5e4c:	udiv	r7, r7, r3
    5e50:	adds	r7, #2
    5e52:	movs	r3, #0
    5e54:	uxtb	r7, r7
    5e56:	bl	5d2a <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    5e5a:	mov.w	fp, #0
    5e5e:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    5e60:	movs	r2, #32
    5e62:	add	r1, sp, #16
    5e64:	mov	r0, r6
    5e66:	bl	5b88 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5e6a:	cmp	r0, #0
    5e6c:	beq.w	5ff6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    5e70:	cmp	r0, #32
    5e72:	bne.n	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    5e74:	ldrsb.w	r1, [sp, #16]
    5e78:	ldrb.w	r2, [sp, #16]
    5e7c:	cmp	r1, #0
    5e7e:	blt.n	5ebe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    5e80:	cmp.w	fp, #0
    5e84:	bne.n	5e92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5e86:	ldr	r1, [r6, #0]
    5e88:	sub.w	r3, r1, #32
    5e8c:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5e8e:	ldr	r3, [r6, #24]
    5e90:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    5e92:	cmp	fp, r7
        freeCount++;
    5e94:	itt	cc
    5e96:	addcc.w	r3, fp, #1
    5e9a:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    5e9e:	cbnz	r2, 5eb8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    5ea0:	cmp	r5, #0
    5ea2:	bne.w	5ff6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    5ea6:	mov.w	r8, #0
    5eaa:	strb.w	r8, [r4, #49]	@ 0x31
  m_flags = 0;
    5eae:	strb.w	r8, [r4, #51]	@ 0x33
  return false;
    5eb2:	b.n	5f8a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    5eb4:	movs	r7, #3
    5eb6:	b.n	5e5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    5eb8:	movs	r0, #0
    5eba:	mov	r8, r0
    5ebc:	b.n	5e60 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    5ebe:	cmp.w	r8, #0
    5ec2:	bne.n	5f14 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    5ec4:	cmp	fp, r7
    5ec6:	it	cc
    5ec8:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    5ecc:	cmp	r2, #133	@ 0x85
    5ece:	bne.n	5eb8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    5ed0:	movs	r2, #56	@ 0x38
    5ed2:	mov	r1, r8
    5ed4:	mov	r0, r4
    5ed6:	bl	a2ac <memset>
      m_setCount = dirFile->setCount;
    5eda:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5ede:	ldrb.w	r1, [sp, #20]
      inSet = true;
    5ee2:	movs	r0, #1
      m_setCount = dirFile->setCount;
    5ee4:	strb.w	r2, [r4, #48]	@ 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5ee8:	and.w	r2, r1, #55	@ 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5eec:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    5eee:	it	pl
    5ef0:	orrpl.w	r2, r2, #8
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5ef4:	strb.w	r2, [r4, #49]	@ 0x31
  ExFatVolume* volume() const {return m_vol;}
    5ef8:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    5efa:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    5efc:	ldr	r2, [r6, #24]
    5efe:	str	r2, [r4, #36]	@ 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5f00:	ldr	r2, [r6, #0]
    5f02:	subs	r2, #32
    5f04:	str	r2, [r4, #40]	@ 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5f06:	ldrb.w	r2, [r6, #51]	@ 0x33
    5f0a:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    5f0e:	strb.w	r2, [r4, #44]	@ 0x2c
    5f12:	b.n	5eba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5f14:	cmp	r2, #192	@ 0xc0
    5f16:	bne.n	5fba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5f18:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    5f1c:	strb.w	r9, [r4, #51]	@ 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5f20:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    5f22:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5f26:	it	mi
    5f28:	orrmi.w	r2, r9, #64	@ 0x40
      m_validLength = getLe64(dirStream->validLength);
    5f2c:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5f30:	it	mi
    5f32:	strbmi.w	r2, [r4, #51]	@ 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    5f36:	ldr	r2, [sp, #36]	@ 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    5f38:	ldrd	r0, r1, [sp, #40]	@ 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    5f3c:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    5f3e:	strd	r0, r1, [r4, #8]
      if (!fname) {
    5f42:	cbnz	r5, 5f92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    5f44:	tst.w	sl, #2048	@ 0x800
    5f48:	bne.n	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    5f4a:	tst.w	sl, #17408	@ 0x4400
    5f4e:	bne.n	5f58 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    5f50:	ldrb.w	r3, [r4, #51]	@ 0x33
    5f54:	lsls	r0, r3, #30
    5f56:	bpl.n	5f8a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    5f58:	ldrb.w	r3, [r4, #49]	@ 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    5f5c:	lsls	r1, r3, #27
    5f5e:	bmi.n	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5f60:	lsls	r2, r3, #31
    5f62:	bmi.n	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    5f64:	tst.w	sl, #1024	@ 0x400
    5f68:	beq.n	5fe4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    5f6a:	ldrb.w	r3, [r4, #51]	@ 0x33
    5f6e:	lsls	r3, r3, #30
    5f70:	bpl.n	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    5f72:	movs	r2, #0
    5f74:	movs	r3, #0
    5f76:	mov	r0, r4
    5f78:	bl	5d2a <ExFatFile::seekSet(unsigned long long)>
    5f7c:	cmp	r0, #0
    5f7e:	beq.n	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5f80:	mov	r0, r4
    5f82:	bl	6bd4 <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5f86:	cmp	r0, #0
    5f88:	beq.n	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    5f8a:	mov	r0, r8
    5f8c:	add	sp, #52	@ 0x34
    5f8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    5f92:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    5f94:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    5f98:	ldr	r1, [r5, #16]
    next = begin;
    5f9a:	str	r2, [r5, #4]
    5f9c:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    5fa0:	strh	r3, [r5, #12]
    5fa2:	cmp	r1, r2
    5fa4:	bne.n	5eb8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    5fa6:	ldrh	r0, [r5, #20]
    5fa8:	ldrh.w	r2, [sp, #20]
    5fac:	sub.w	ip, r0, r2
    5fb0:	rsbs	r0, ip, #0
    5fb4:	adc.w	r0, r0, ip
    5fb8:	b.n	5eba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    5fba:	cmp	r2, #193	@ 0xc1
    5fbc:	bne.w	5eb8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    5fc0:	mov	r2, r5
    5fc2:	add	r1, sp, #16
    5fc4:	mov	r0, r4
    5fc6:	bl	58fc <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    5fca:	cmp	r0, #0
    5fcc:	beq.w	5eba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    5fd0:	ldrh	r2, [r5, #12]
    5fd2:	cmp	r2, #0
    5fd4:	bne.w	5eba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5fd8:	ldrd	r1, r2, [r5, #4]
    5fdc:	cmp	r1, r2
    5fde:	bne.w	5eba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5fe2:	b.n	5f44 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5fe4:	tst.w	sl, #16384	@ 0x4000
    5fe8:	beq.n	5f8a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    5fea:	mov	r0, r4
    5fec:	ldrd	r2, r3, [r4, #16]
    5ff0:	bl	5d2a <ExFatFile::seekSet(unsigned long long)>
    5ff4:	b.n	5f86 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5ff6:	tst.w	sl, #512	@ 0x200
    5ffa:	beq.w	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5ffe:	tst.w	r9, #2
    6002:	beq.w	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    6006:	cmp	r5, #0
    6008:	beq.w	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    600c:	cmp	fp, r7
    600e:	bcc.n	605e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    6010:	movs	r2, #56	@ 0x38
    6012:	movs	r1, #0
    6014:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6016:	ldrb.w	r8, [r6, #51]	@ 0x33
    601a:	bl	a2ac <memset>
  ExFatVolume* volume() const {return m_vol;}
    601e:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    6020:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    6024:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    6028:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    602a:	movs	r3, #8
  m_dirPos = freePos;
    602c:	strb.w	r8, [r4, #44]	@ 0x2c
      m_setCount = freeNeed - 1;
    6030:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    6034:	strb.w	r3, [r4, #49]	@ 0x31
    ls = 0;  // lowSurrogate
    6038:	mov.w	r8, #0
  m_dirPos = freePos;
    603c:	ldr	r3, [sp, #0]
    603e:	str	r3, [r4, #36]	@ 0x24
    6040:	ldr	r3, [sp, #4]
    6042:	str	r3, [r4, #40]	@ 0x28
    next = begin;
    6044:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    6046:	strh.w	r8, [r5, #12]
    next = begin;
    604a:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    604c:	uxtb.w	r1, r8
    6050:	cmp	r1, r7
    6052:	bcc.n	60a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    6054:	mov	r0, r4
    6056:	bl	694c <ExFatFile::sync()>
    605a:	mov	r8, r0
    605c:	b.n	5f8a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    605e:	movs	r2, #32
    6060:	add	r1, sp, #16
    6062:	mov	r0, r6
    6064:	bl	5b88 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6068:	cbnz	r0, 6080 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    606a:	mov	r0, r6
      curCluster = dir->m_curCluster;
    606c:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    6070:	bl	698e <ExFatFile::addDirCluster()>
    6074:	cmp	r0, #0
    6076:	beq.w	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    607a:	str.w	r8, [r6, #24]
      continue;
    607e:	b.n	600c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    6080:	cmp	r0, #32
    6082:	bne.w	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    6086:	cmp.w	fp, #0
    608a:	bne.n	6098 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    608c:	ldr	r2, [r6, #0]
    608e:	sub.w	r3, r2, #32
    6092:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    6094:	ldr	r3, [r6, #24]
    6096:	str	r3, [sp, #0]
    freeCount++;
    6098:	add.w	r3, fp, #1
    609c:	uxtb.w	fp, r3
    60a0:	b.n	600c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    60a2:	movs	r2, #1
    60a4:	mov	r0, r4
    60a6:	bl	5a54 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    60aa:	mov	r6, r0
    60ac:	cmp	r0, #0
    60ae:	beq.w	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    60b2:	ldrsb.w	r3, [r0]
    60b6:	cmp	r3, #0
    60b8:	blt.w	5ea6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    60bc:	movs	r2, #32
    60be:	movs	r1, #0
    60c0:	bl	a2ac <memset>
    if (i == 0) {
    60c4:	cmp.w	r8, #0
    60c8:	bne.n	610c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x304>
      dirFile->type = EXFAT_TYPE_FILE;
    60ca:	movs	r3, #133	@ 0x85
    60cc:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    60ce:	ldr	r3, [pc, #128]	@ (6150 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x348>)
      m_setCount = freeNeed - 1;
    60d0:	strb.w	sl, [r4, #48]	@ 0x30
      dirFile->setCount = m_setCount;
    60d4:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    60d8:	ldr	r3, [r3, #0]
    60da:	cbz	r3, 6100 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f8>
        FsDateTime::callback(&date, &time, &ms10);
    60dc:	add.w	r2, sp, #11
    60e0:	add.w	r1, sp, #14
    60e4:	add	r0, sp, #12
    60e6:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    60e8:	ldrh.w	r3, [sp, #12]
    60ec:	strh	r3, [r6, #10]
    60ee:	ldrh.w	r3, [sp, #14]
    60f2:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    60f4:	ldrb.w	r3, [sp, #11]
    60f8:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    60fa:	add.w	r8, r8, #1
    60fe:	b.n	604c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    6100:	movw	r3, #22561	@ 0x5821
    6104:	strh	r3, [r6, #10]
    6106:	strh	r3, [r6, #14]
    6108:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    610a:	b.n	60fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f2>
    } else if (i == 1) {
    610c:	cmp.w	r8, #1
    6110:	bne.n	612c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      dirStream->type = EXFAT_TYPE_STREAM;
    6112:	movs	r3, #192	@ 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    6114:	strb.w	r8, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    6118:	strb	r3, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    611a:	orn	r3, r9, #127	@ 0x7f
    611e:	strb.w	r3, [r4, #51]	@ 0x33
      dirStream->nameLength = fname->nameLength;
    6122:	ldr	r3, [r5, #16]
    6124:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    6126:	ldrh	r3, [r5, #20]
    6128:	strh	r3, [r6, #4]
}
    612a:	b.n	60fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f2>
      dirName->type = EXFAT_TYPE_NAME;
    612c:	movs	r3, #193	@ 0xc1
    612e:	add.w	fp, r6, #30
    6132:	strb	r3, [r6, #0]
    return !ls && next == end;
    6134:	ldrh	r2, [r5, #12]
    6136:	cbnz	r2, 6140 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x338>
    6138:	ldrd	r1, r2, [r5, #4]
    613c:	cmp	r1, r2
    613e:	beq.n	60fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f2>
        uint16_t u = fname->get16();
    6140:	mov	r0, r5
    6142:	bl	58b4 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    6146:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    614a:	cmp	fp, r6
    614c:	bne.n	6134 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32c>
    614e:	b.n	60fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f2>
    6150:	.word	0x20011cec

00006154 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    6154:	push	{r4, r5, r6, r7, lr}
    6156:	mov	r7, r3
    6158:	sub	sp, #92	@ 0x5c
  ExFatFile() {}
    615a:	movs	r3, #0
    615c:	mov	r5, r0
    615e:	mov	r4, r1
    6160:	str	r2, [sp, #4]
    6162:	str	r3, [sp, #80]	@ 0x50
class FsName {
    6164:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    6168:	ldrb.w	r3, [r0, #49]	@ 0x31
    616c:	cbz	r3, 6174 <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    616e:	movs	r0, #0
}
    6170:	add	sp, #92	@ 0x5c
    6172:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    6174:	ldrb.w	r1, [r1, #49]	@ 0x31
    6178:	tst.w	r1, #80	@ 0x50
    617c:	beq.n	616e <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    617e:	ldrb	r1, [r2, #0]
    6180:	cmp	r1, #47	@ 0x2f
    6182:	bne.n	61be <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    6184:	mov	r0, r2
    while (isDirSeparator(*path)) {
    6186:	ldrb.w	r1, [r2], #1
    618a:	cmp	r1, #47	@ 0x2f
    618c:	beq.n	61a0 <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    618e:	cbz	r3, 6192 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    6190:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6192:	ldr	r4, [r4, #32]
    if (*path == 0) {
    6194:	cbnz	r1, 61a4 <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    6196:	mov	r1, r4
    6198:	mov	r0, r5
    619a:	bl	5ae0 <ExFatFile::openRoot(ExFatVolume*)>
    619e:	b.n	6170 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    61a0:	movs	r3, #1
    61a2:	b.n	6184 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    61a4:	movs	r2, #56	@ 0x38
    61a6:	movs	r1, #0
    61a8:	add	r0, sp, #32
    61aa:	bl	a2ac <memset>
  m_attributes = FILE_ATTR_ROOT;
    61ae:	movs	r3, #64	@ 0x40
  m_vol = vol;
    61b0:	str	r4, [sp, #64]	@ 0x40
    dirFile = &tmpDir;
    61b2:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    61b4:	strb.w	r3, [sp, #81]	@ 0x51
  m_flags = FILE_FLAG_READ;
    61b8:	movs	r3, #1
    61ba:	strb.w	r3, [sp, #83]	@ 0x53
    if (!parsePathName(path, &fname, &path)) {
    61be:	add	r3, sp, #4
    61c0:	add	r2, sp, #8
    61c2:	ldr	r1, [sp, #4]
    61c4:	mov	r0, r5
    61c6:	bl	5b08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    61ca:	cmp	r0, #0
    61cc:	beq.n	616e <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    61ce:	ldr	r3, [sp, #4]
    61d0:	ldrb	r3, [r3, #0]
    61d2:	cbz	r3, 620c <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    61d4:	movs	r3, #0
    61d6:	add	r2, sp, #8
    61d8:	mov	r1, r4
    61da:	mov	r0, r5
    61dc:	bl	5e08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    61e0:	cmp	r0, #0
    61e2:	beq.n	616e <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    61e4:	add	r6, sp, #32
    61e6:	mov	r2, r5
    61e8:	add.w	ip, r5, #48	@ 0x30
    61ec:	mov	r4, r6
    61ee:	ldr	r0, [r2, #0]
    61f0:	adds	r2, #8
    61f2:	ldr.w	r1, [r2, #-4]
    61f6:	mov	r3, r6
    61f8:	cmp	r2, ip
    61fa:	stmia	r3!, {r0, r1}
    61fc:	mov	r6, r3
    61fe:	bne.n	61ee <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    6200:	ldr	r0, [r2, #0]
    6202:	str	r0, [r3, #0]
    close();
    6204:	mov	r0, r5
    6206:	bl	5a8c <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    620a:	b.n	61be <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    620c:	mov	r3, r7
    620e:	add	r2, sp, #8
    6210:	mov	r1, r4
    6212:	mov	r0, r5
    6214:	bl	5e08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6218:	b.n	6170 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

0000621a <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    621a:	cbz	r1, 6224 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    621c:	add.w	r1, r1, #1096	@ 0x448
    6220:	b.w	6154 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    6224:	mov	r0, r1
    6226:	bx	lr

00006228 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    6228:	mov	r3, r2
    622a:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    622c:	ldrb.w	r2, [r0, #49]	@ 0x31
    6230:	cbnz	r2, 624c <ExFatFile::openNext(ExFatFile*, int)+0x24>
    6232:	ldrb.w	r2, [r1, #49]	@ 0x31
    6236:	tst.w	r2, #80	@ 0x50
    623a:	beq.n	624c <ExFatFile::openNext(ExFatFile*, int)+0x24>
    623c:	ldr	r2, [r1, #0]
    623e:	ands.w	r2, r2, #31
    6242:	bne.n	624c <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    6244:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    6248:	b.w	5e08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    624c:	movs	r0, #0
    624e:	ldr.w	r4, [sp], #4
    6252:	bx	lr

00006254 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6254:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6258:	mov	r7, r0
    625a:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    625c:	mov	sl, r1
    625e:	cbz	r1, 62ba <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x66>
    6260:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    6262:	ldr.w	r3, [r7, #1072]	@ 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    6266:	movs	r4, #1
    start = 0;
    6268:	cmp	r3, r5
    626a:	it	ls
    626c:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    626e:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    6272:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    6276:	mov	r8, r5
  uint32_t endAlloc = start;
    6278:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    627a:	lsls	r4, r3
    627c:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    627e:	ldr.w	r1, [r7, #1068]	@ 0x42c
    return m_bitmapCache.prepare(sector, option);
    6282:	movs	r2, #0
    6284:	mov	r0, r7
    6286:	add.w	r1, r1, r6, lsr #12
    628a:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    628e:	cbz	r0, 62b6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x62>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    6290:	ldrb.w	r3, [r0, r9]
        endAlloc++;
    6294:	adds	r6, #1
        if (!(mask & cache[i])) {
    6296:	tst	r4, r3
    6298:	bne.n	62c0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6c>
          if ((endAlloc - bgnAlloc) == count) {
    629a:	sub.w	r3, r6, r8
    629e:	cmp	r3, fp
    62a0:	bne.n	62c2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
            if (cluster == 0 && count == 1) {
    62a2:	cmp.w	sl, #0
    62a6:	bne.n	62b2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5e>
    62a8:	cmp.w	fp, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    62ac:	it	eq
    62ae:	streq.w	r8, [r7, #1056]	@ 0x420
            }
            return bgnAlloc + 2;
    62b2:	add.w	r0, r8, #2
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    62b6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    62ba:	ldr.w	r5, [r0, #1056]	@ 0x420
    62be:	b.n	6262 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
          bgnAlloc = endAlloc;
    62c0:	mov	r8, r6
        if (endAlloc == start) {
    62c2:	cmp	r5, r6
    62c4:	beq.n	62f6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa2>
        if (endAlloc >= m_clusterCount) {
    62c6:	ldr.w	r3, [r7, #1072]	@ 0x430
    62ca:	cmp	r3, r6
    62cc:	bls.n	62ea <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
      for (; mask; mask <<= 1) {
    62ce:	lsls	r4, r4, #1
    62d0:	ands.w	r4, r4, #255	@ 0xff
    62d4:	bne.n	6290 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
    for (; i < sectorSize; i++) {
    62d6:	add.w	r3, r9, #1
    62da:	movs	r4, #1
    i = 0;
    62dc:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    62e0:	cmp.w	r3, #512	@ 0x200
    62e4:	bcs.n	627e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    62e6:	mov	r9, r3
      for (; mask; mask <<= 1) {
    62e8:	b.n	6290 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    62ea:	mov.w	r8, #0
          i = sectorSize;
    62ee:	mov.w	r9, #512	@ 0x200
          endAlloc = bgnAlloc = 0;
    62f2:	mov	r6, r8
    62f4:	b.n	62d6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
          return 1;
    62f6:	movs	r0, #1
    62f8:	b.n	62b6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x62>

000062fa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    62fa:	subs	r1, #2
                                  uint32_t count, bool value) {
    62fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6300:	mov	r5, r0
    6302:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    6304:	ldr.w	r0, [r0, #1072]	@ 0x430
    6308:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    630a:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    630c:	cmp	r3, r0
    630e:	bhi.n	6390 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6310:	ldr.w	r2, [r5, #1056]	@ 0x420
  if (value) {
    6314:	cbz	r7, 6386 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6316:	cmp	r1, r2
    6318:	bhi.n	6328 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    631a:	cmp	r3, r2
    631c:	bls.n	6328 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    631e:	cmp	r3, r0
    6320:	it	cs
    6322:	movcs	r3, #0
    6324:	str.w	r3, [r5, #1056]	@ 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    6328:	and.w	r3, r1, #7
    632c:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    6330:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    6334:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    6338:	ldr.w	r3, [r5, #1068]	@ 0x42c
  mask = 1 << (start & 7);
    633c:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    6340:	add.w	r8, r3, r1, lsr #12
    6344:	movs	r2, #1
    6346:	mov	r1, r8
    6348:	mov	r0, r5
    634a:	add	r8, r2
    634c:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    6350:	cbz	r0, 6390 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    6352:	adds	r3, r0, r4
    6354:	mov	r1, r9
    6356:	add.w	r0, r0, #512	@ 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    635a:	ldrb	r2, [r3, #0]
    635c:	tst	r2, r1
    635e:	ite	ne
    6360:	movne	r4, #1
    6362:	moveq	r4, #0
    6364:	cmp	r4, r7
    6366:	beq.n	6390 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    6368:	eors	r2, r1
        if (--count == 0) {
    636a:	subs	r6, #1
        cache[i] ^= mask;
    636c:	strb	r2, [r3, #0]
        if (--count == 0) {
    636e:	beq.n	6396 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    6370:	lsls	r1, r1, #1
    6372:	ands.w	r1, r1, #255	@ 0xff
    6376:	bne.n	635a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    6378:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    637a:	mov	r4, r1
    637c:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    637e:	cmp	r0, r3
    6380:	mov	r9, r1
    6382:	bne.n	635a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    6384:	b.n	6344 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    6386:	cmp	r1, r2
      m_bitmapStart = start;
    6388:	it	cc
    638a:	strcc.w	r1, [r5, #1056]	@ 0x420
    638e:	b.n	6328 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    6390:	movs	r0, #0
}
    6392:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    6396:	movs	r0, #1
    6398:	b.n	6392 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

0000639a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    639a:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    639c:	ldr.w	r3, [r0, #1080]	@ 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    63a0:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    63a2:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    63a4:	add.w	r0, r0, #528	@ 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    63a8:	ldrb.w	r5, [r0, #565]	@ 0x235
    63ac:	ands	r1, r3
    63ae:	ldr	r3, [r4, #0]
    63b0:	subs	r3, #2
    63b2:	lsls	r3, r5
    63b4:	add.w	r3, r3, r1, lsr #9
    63b8:	ldr.w	r1, [r0, #540]	@ 0x21c
    return m_dataCache.prepare(sector, option);
    63bc:	add	r1, r3
    63be:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    63c2:	cbz	r0, 63cc <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    63c4:	ldr	r3, [r4, #4]
    63c6:	ubfx	r3, r3, #0, #9
    63ca:	add	r0, r3
}
    63cc:	pop	{r3, r4, r5, pc}

000063ce <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    63ce:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    63d0:	ldr.w	r3, [r0, #1072]	@ 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    63d4:	mov	r4, r1
    63d6:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    63d8:	adds	r3, #1
    63da:	cmp	r3, r1
    63dc:	bcs.n	63e4 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    63de:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    63e2:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    63e4:	ldr.w	r1, [r0, #1060]	@ 0x424
    63e8:	movs	r2, #0
    63ea:	add.w	r0, r0, #528	@ 0x210
    63ee:	add.w	r1, r1, r4, lsr #7
    63f2:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    63f6:	cmp	r0, #0
    63f8:	beq.n	63de <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    63fa:	lsls	r4, r4, #2
    63fc:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    6400:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    6402:	adds	r2, r3, #1
  return 1;
    6404:	itet	ne
    6406:	movne	r0, #1
    return 0;
    6408:	moveq	r0, #0
  *value = next;
    640a:	strne	r3, [r5, #0]
  return 1;
    640c:	b.n	63e2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

0000640e <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    640e:	push	{r0, r1, r2, r4, r5, lr}
    6410:	mov	r5, r0
  uint32_t n = 0;
    6412:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6414:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    6416:	add	r2, sp, #4
    6418:	ldr	r1, [sp, #4]
    641a:	mov	r0, r5
    641c:	bl	63ce <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    6420:	cmp	r0, #0
    6422:	blt.n	6430 <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    6424:	add.w	r4, r4, #1
  } while (status);
    6428:	bne.n	6416 <ExFatPartition::chainSize(unsigned long)+0x8>
}
    642a:	mov	r0, r4
    642c:	add	sp, #12
    642e:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    6430:	movs	r4, #0
    6432:	b.n	642a <ExFatPartition::chainSize(unsigned long)+0x1c>

00006434 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6434:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6436:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6438:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    643a:	ldr.w	r4, [r0, #1080]	@ 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    643e:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6440:	ands	r4, r3
  pos->position += offset;
    6442:	add	r3, r2
    6444:	str	r3, [r1, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6446:	add	r4, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6448:	ldrb.w	r3, [r0, #1093]	@ 0x445
    644c:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    644e:	uxtb	r3, r3
    6450:	lsrs	r4, r3
  while (tmp--) {
    6452:	cbnz	r4, 6458 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    6454:	movs	r0, #1
    6456:	b.n	6472 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    6458:	ldrb	r3, [r5, #8]
      pos->cluster++;
    645a:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    645c:	cbz	r3, 6466 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    645e:	adds	r1, #1
    6460:	str	r1, [r5, #0]
    6462:	subs	r4, #1
    6464:	b.n	6452 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    6466:	mov	r2, r5
    6468:	mov	r0, r6
    646a:	bl	63ce <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    646e:	cmp	r0, #1
    6470:	beq.n	6462 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    6472:	pop	{r4, r5, r6, pc}

00006474 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6474:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6476:	push	{r3, r4, r5, lr}
    6478:	mov	r4, r1
    647a:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    647c:	bhi.n	6482 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    647e:	movs	r0, #0
}
    6480:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6482:	ldr.w	r3, [r0, #1072]	@ 0x430
    6486:	adds	r3, #1
    6488:	cmp	r3, r1
    648a:	bcc.n	647e <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    648c:	ldr.w	r1, [r0, #1060]	@ 0x424
    return m_dataCache.prepare(sector, option);
    6490:	movs	r2, #1
    6492:	add.w	r0, r0, #528	@ 0x210
    6496:	add.w	r1, r1, r4, lsr #7
    649a:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    649e:	cmp	r0, #0
    64a0:	beq.n	647e <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    64a2:	lsls	r4, r4, #2
    64a4:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    64a8:	str	r5, [r0, r4]
  return true;
    64aa:	movs	r0, #1
    64ac:	b.n	6480 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

000064ae <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    64ae:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    64b2:	mov	r7, r0
    64b4:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    64b6:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    64b8:	add	r2, sp, #4
    64ba:	mov	r1, r4
    64bc:	mov	r0, r7
    64be:	bl	63ce <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    64c2:	subs	r6, r0, #0
    64c4:	bge.n	64d0 <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    64c6:	movs	r5, #0
}
    64c8:	mov	r0, r5
    64ca:	add	sp, #8
    64cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    64d0:	movs	r2, #0
    64d2:	mov	r1, r4
    64d4:	mov	r0, r7
    64d6:	bl	6474 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    64da:	mov	r5, r0
    64dc:	cmp	r0, #0
    64de:	beq.n	64c6 <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    64e0:	adds	r2, r4, #1
    64e2:	cbz	r6, 64ea <ExFatPartition::freeChain(unsigned long)+0x3c>
    64e4:	ldr	r3, [sp, #4]
    64e6:	cmp	r3, r2
    64e8:	beq.n	6500 <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    64ea:	movs	r3, #0
    64ec:	sub.w	r2, r2, r8
    64f0:	mov	r1, r8
    64f2:	mov	r0, r7
    64f4:	bl	62fa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    64f8:	cmp	r0, #0
    64fa:	beq.n	64c6 <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    64fc:	ldr.w	r8, [sp, #4]
    cluster = next;
    6500:	ldr	r4, [sp, #4]
  } while (status);
    6502:	cmp	r6, #0
    6504:	bne.n	64b8 <ExFatPartition::freeChain(unsigned long)+0xa>
    6506:	b.n	64c8 <ExFatPartition::freeChain(unsigned long)+0x1a>

00006508 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    6508:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    650c:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    650e:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    6510:	ldr.w	r8, [r0, #1068]	@ 0x42c
    6514:	add.w	r7, r0, #528	@ 0x210
  uint32_t nc = 0;
    6518:	mov	r5, r4
    651a:	mov	r1, r8
    651c:	movs	r2, #0
    651e:	mov	r0, r7
    6520:	add.w	r8, r8, #1
    6524:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6528:	cbz	r0, 6548 <ExFatPartition::freeClusterCount()+0x40>
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    652a:	ldr.w	ip, [r6, #1072]	@ 0x430
    652e:	subs	r3, r0, #1
    6530:	add.w	lr, r5, #4096	@ 0x1000
      if (cache[i] == 0XFF) {
    6534:	ldrb.w	r0, [r3, #1]!
    6538:	cmp	r0, #255	@ 0xff
    653a:	bne.n	654c <ExFatPartition::freeClusterCount()+0x44>
        usedCount+= 8;
    653c:	adds	r4, #8
      nc += 8;
    653e:	adds	r5, #8
      if (nc >= m_clusterCount) {
    6540:	cmp	ip, r5
    6542:	bhi.n	6566 <ExFatPartition::freeClusterCount()+0x5e>
        return m_clusterCount - usedCount;
    6544:	sub.w	r0, ip, r4
      }
    }
  }
}
    6548:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    654c:	cmp	r0, #0
    654e:	beq.n	653e <ExFatPartition::freeClusterCount()+0x36>
    6550:	movs	r1, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6552:	movs	r2, #1
          if ((mask & cache[i])) {
    6554:	tst	r0, r2
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6556:	mov.w	r2, r2, lsl #1
            usedCount++;
    655a:	it	ne
    655c:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    655e:	subs	r1, #1
    6560:	uxtb	r2, r2
    6562:	bne.n	6554 <ExFatPartition::freeClusterCount()+0x4c>
    6564:	b.n	653e <ExFatPartition::freeClusterCount()+0x36>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    6566:	cmp	r5, lr
    6568:	bne.n	6534 <ExFatPartition::freeClusterCount()+0x2c>
    656a:	b.n	651a <ExFatPartition::freeClusterCount()+0x12>

0000656c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    656c:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    656e:	mov.w	r3, #4294967295
    6572:	mov	r5, r2
    6574:	add.w	r7, r0, #528	@ 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    6578:	movs	r2, #0
  m_blockDev = dev;
    657a:	str.w	r1, [r0, #1088]	@ 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    657e:	mov	r4, r0
    m_blockDev = blockDev;
    6580:	str	r1, [r0, #4]
    6582:	str.w	r1, [r0, #532]	@ 0x214
    6586:	mov	r1, r2
  m_fatType = 0;
    6588:	strb.w	r2, [r0, #1092]	@ 0x444
    m_status = 0;
    658c:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    658e:	str	r3, [r0, #12]
    m_status = 0;
    6590:	strb.w	r2, [r0, #528]	@ 0x210
    m_sector = 0XFFFFFFFF;
    6594:	str.w	r3, [r0, #540]	@ 0x21c
    6598:	mov	r0, r7
    659a:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    659e:	cmp	r5, #4
    65a0:	mov	r6, r0
    65a2:	bls.n	65a8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    65a4:	movs	r0, #0
}
    65a6:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    65a8:	cmp	r0, #0
    65aa:	beq.n	65a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    65ac:	cbz	r5, 65d8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6c>
    mp = &mbr->part[part - 1];
    65ae:	subs	r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    65b0:	add.w	r0, r0, r5, lsl #4
    65b4:	ldrb.w	r2, [r0, #446]	@ 0x1be
    65b8:	ands.w	r2, r2, #127	@ 0x7f
    65bc:	bne.n	65a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    65be:	ldrb.w	r3, [r0, #450]	@ 0x1c2
    65c2:	cmp	r3, #0
    65c4:	beq.n	65a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    65c6:	ldr.w	r5, [r0, #454]	@ 0x1c6
    65ca:	mov	r0, r7
    65cc:	mov	r1, r5
    65ce:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    65d2:	mov	r6, r0
    65d4:	cmp	r0, #0
    65d6:	beq.n	65a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    65d8:	ldr	r1, [pc, #104]	@ (6644 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xd8>)
    65da:	movs	r2, #5
    65dc:	adds	r0, r6, #3
    65de:	bl	ec9a <strncmp>
    65e2:	mov	r1, r0
    65e4:	cmp	r0, #0
    65e6:	bne.n	65a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    65e8:	ldrb.w	r3, [r6, #108]	@ 0x6c
    65ec:	cmp	r3, #9
    65ee:	bne.n	65a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    65f0:	ldr	r3, [r6, #80]	@ 0x50
    65f2:	add	r3, r5
    65f4:	str.w	r3, [r4, #1060]	@ 0x424
    65f8:	ldr	r3, [r6, #84]	@ 0x54
  m_fatLength = getLe32(bpb->fatLength);
    65fa:	str.w	r3, [r4, #1064]	@ 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    65fe:	ldr	r3, [r6, #88]	@ 0x58
    6600:	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6602:	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6604:	str.w	r3, [r4, #1068]	@ 0x42c
  bitmapFind(0, 1);
    6608:	mov	r2, r5
    660a:	ldr	r3, [r6, #92]	@ 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    660c:	str.w	r3, [r4, #1072]	@ 0x430
    6610:	ldr	r3, [r6, #96]	@ 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    6612:	str.w	r3, [r4, #1076]	@ 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6616:	ldrb.w	r3, [r6, #109]	@ 0x6d
  m_bitmapStart = 0;
    661a:	str.w	r0, [r4, #1056]	@ 0x420
  bitmapFind(0, 1);
    661e:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6620:	strb.w	r3, [r4, #1093]	@ 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6624:	adds	r3, #9
    6626:	lsl.w	r3, r5, r3
    662a:	str.w	r3, [r4, #1084]	@ 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    662e:	subs	r3, #1
    6630:	str.w	r3, [r4, #1080]	@ 0x438
  bitmapFind(0, 1);
    6634:	bl	6254 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    6638:	movs	r3, #64	@ 0x40
  return true;
    663a:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    663c:	strb.w	r3, [r4, #1092]	@ 0x444
  return true;
    6640:	b.n	65a6 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    6642:	nop
    6644:	.word	0x2000140f

00006648 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    6648:	push	{r4, lr}
    664a:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    664c:	ldr.w	r1, [r0, #1076]	@ 0x434
    6650:	bl	640e <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6654:	ldrb.w	r3, [r4, #1093]	@ 0x445
    6658:	adds	r3, #9
  return nc << bytesPerClusterShift();
    665a:	uxtb	r3, r3
}
    665c:	lsls	r0, r3
    665e:	pop	{r4, pc}

00006660 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    6660:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    6662:	add.w	r4, r0, #1096	@ 0x448
    6666:	sub	sp, #56	@ 0x38
    6668:	movs	r3, #0
    666a:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    666c:	mov	r0, sp
    666e:	mov	r1, r4
    6670:	str	r3, [sp, #48]	@ 0x30
    6672:	bl	6154 <ExFatFile::open(ExFatFile*, char const*, int)>
    6676:	mov	r5, r0
    6678:	cbz	r0, 66a2 <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    667a:	ldrb.w	r3, [sp, #49]	@ 0x31
    667e:	ands.w	r3, r3, #80	@ 0x50
    6682:	beq.n	66a8 <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    6684:	mov	r2, sp
    6686:	mov	r3, r4
    6688:	add	r6, sp, #48	@ 0x30
    668a:	mov	r4, r2
    668c:	adds	r3, #8
    668e:	ldmia	r4!, {r0, r1}
    6690:	cmp	r4, r6
    6692:	str.w	r0, [r3, #-8]
    6696:	str.w	r1, [r3, #-4]
    669a:	mov	r2, r4
    669c:	bne.n	668a <ExFatVolume::chdir(char const*)+0x2a>
    669e:	ldr	r0, [r4, #0]
    66a0:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    66a2:	mov	r0, r5
    66a4:	add	sp, #56	@ 0x38
    66a6:	pop	{r4, r5, r6, pc}
  return false;
    66a8:	mov	r5, r3
    66aa:	b.n	66a2 <ExFatVolume::chdir(char const*)+0x42>

000066ac <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    66ac:	push	{r4, r5, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    66ae:	movs	r3, #0
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    66b0:	mov	r4, r0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    66b2:	ldrb	r5, [r0, #0]
    66b4:	mov	r0, r1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    66b6:	lsls	r2, r0, #15
    66b8:	ldrb	r1, [r4, r3]
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    66ba:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    66bc:	orr.w	r2, r2, r0, lsr #1
    66c0:	uxtah	r2, r1, r2
    66c4:	uxth	r0, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    66c6:	bne.n	66d8 <exFatDirChecksum(unsigned char const*, unsigned short)+0x2c>
    66c8:	cmp	r5, #133	@ 0x85
    66ca:	ite	eq
    66cc:	moveq	r2, #3
    66ce:	movne	r2, #1
    66d0:	add	r3, r2
    66d2:	cmp	r3, #31
    66d4:	bls.n	66b6 <exFatDirChecksum(unsigned char const*, unsigned short)+0xa>
  }
  return checksum;
}
    66d6:	pop	{r4, r5, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    66d8:	movs	r2, #1
    66da:	b.n	66d0 <exFatDirChecksum(unsigned char const*, unsigned short)+0x24>

000066dc <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    66dc:	push	{r4, lr}
    66de:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    66e0:	bl	5778 <FsCache::sync()>
    66e4:	cbz	r0, 66fe <ExFatPartition::cacheSync()+0x22>
    66e6:	add.w	r0, r4, #528	@ 0x210
    66ea:	bl	5778 <FsCache::sync()>
    66ee:	cbz	r0, 66fe <ExFatPartition::cacheSync()+0x22>
    66f0:	ldr.w	r0, [r4, #1088]	@ 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    66f4:	ldr	r3, [r0, #0]
  }
    66f6:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    66fa:	ldr	r3, [r3, #32]
    66fc:	bx	r3
  }
    66fe:	movs	r0, #0
    6700:	pop	{r4, pc}

00006702 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    6702:	push	{r3, r4, r5, r6, r7, lr}
    6704:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6706:	ldr	r0, [r0, #32]
    6708:	ldr	r1, [r4, #24]
    670a:	cbz	r1, 670e <ExFatFile::addCluster()+0xc>
    670c:	adds	r1, #1
    670e:	movs	r2, #1
    6710:	bl	6254 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    6714:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6716:	mov	r5, r0
  if (find < 2) {
    6718:	bhi.n	6720 <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    671a:	movs	r6, #0
}
    671c:	mov	r0, r6
    671e:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    6720:	movs	r3, #1
    6722:	mov	r1, r0
    6724:	ldr	r0, [r4, #32]
    6726:	mov	r2, r3
    6728:	bl	62fa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    672c:	mov	r6, r0
    672e:	cmp	r0, #0
    6730:	beq.n	671a <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    6732:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6734:	ldrb.w	r3, [r4, #51]	@ 0x33
  if (m_curCluster == 0) {
    6738:	cbnz	r2, 6746 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    673a:	orr.w	r3, r3, #64	@ 0x40
    673e:	strb.w	r3, [r4, #51]	@ 0x33
  m_curCluster = find;
    6742:	str	r5, [r4, #24]
  return true;
    6744:	b.n	671c <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    6746:	lsls	r1, r3, #25
    6748:	bmi.n	676e <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    674a:	mov.w	r2, #4294967295
    674e:	mov	r1, r5
    6750:	ldr	r0, [r4, #32]
    6752:	bl	6474 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6756:	cmp	r0, #0
    6758:	beq.n	671a <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    675a:	ldr	r1, [r4, #24]
    675c:	cmp	r1, #0
    675e:	beq.n	6742 <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    6760:	mov	r2, r5
    6762:	ldr	r0, [r4, #32]
    6764:	bl	6474 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6768:	cmp	r0, #0
    676a:	bne.n	6742 <ExFatFile::addCluster()+0x40>
    676c:	b.n	671a <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    676e:	adds	r2, #1
    6770:	cmp	r2, r5
    6772:	beq.n	6742 <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6774:	bic.w	r3, r3, #64	@ 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6778:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    677a:	strb.w	r3, [r4, #51]	@ 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    677e:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    6780:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6782:	cmp	r3, r1
    6784:	bls.n	674a <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    6786:	adds	r7, r1, #1
    6788:	mov	r2, r7
    678a:	bl	6474 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    678e:	cmp	r0, #0
    6790:	beq.n	671a <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6792:	mov	r1, r7
    6794:	b.n	677e <ExFatFile::addCluster()+0x7c>

00006796 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6796:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6798:	ldrb.w	r3, [r0, #51]	@ 0x33
    679c:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    679e:	lsls	r2, r3, #30
    67a0:	bmi.n	67a6 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    67a2:	movs	r0, #0
}
    67a4:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    67a6:	ldr	r1, [r0, #28]
    67a8:	cbnz	r1, 67e0 <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    67aa:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    67ac:	movs	r2, #1
    67ae:	uxtb	r1, r5
    67b0:	mov	r0, r4
    67b2:	bl	5a54 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    67b6:	cmp	r0, #0
    67b8:	beq.n	67a2 <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    67ba:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    67bc:	adds	r5, #1
    cache[0] &= 0x7F;
    67be:	and.w	r3, r3, #127	@ 0x7f
    67c2:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    67c4:	uxtb	r3, r5
    67c6:	ldrb.w	r2, [r4, #48]	@ 0x30
    67ca:	cmp	r2, r3
    67cc:	bcs.n	67ac <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    67ce:	movs	r3, #0
  return m_vol->cacheSync();
    67d0:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    67d2:	strb.w	r3, [r4, #49]	@ 0x31
  m_flags = 0;
    67d6:	strb.w	r3, [r4, #51]	@ 0x33
  return m_vol->cacheSync();
    67da:	bl	66dc <ExFatPartition::cacheSync()>
    67de:	b.n	67a4 <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    67e0:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    67e2:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    67e4:	bpl.n	681c <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    67e6:	ldrb.w	r3, [r0, #1093]	@ 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    67ea:	ldrd	r2, r5, [r4, #8]
    67ee:	adds	r3, #9
    67f0:	subs	r2, #1
    67f2:	uxtb	r3, r3
    67f4:	adc.w	r5, r5, #4294967295
    67f8:	rsb	r7, r3, #32
    67fc:	sub.w	r6, r3, #32
    6800:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6802:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6804:	lsl.w	r7, r5, r7
    6808:	lsr.w	r6, r5, r6
    680c:	orrs	r2, r7
    680e:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6810:	adds	r2, #1
    6812:	bl	62fa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    6816:	cmp	r0, #0
    6818:	bne.n	67aa <ExFatFile::remove()+0x14>
    681a:	b.n	67a2 <ExFatFile::remove()+0xc>
    681c:	bl	64ae <ExFatPartition::freeChain(unsigned long)>
    6820:	b.n	6816 <ExFatFile::remove()+0x80>

00006822 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    6822:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    6824:	ldrb.w	r3, [r0, #49]	@ 0x31
bool ExFatFile::rmdir() {
    6828:	sub	sp, #32
    682a:	mov	r4, r0
  if (!isSubDir()) {
    682c:	lsls	r3, r3, #27
    682e:	bmi.n	6836 <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    6830:	movs	r0, #0
}
    6832:	add	sp, #32
    6834:	pop	{r4, pc}
    seekSet(0);
    6836:	movs	r2, #0
    6838:	movs	r3, #0
    683a:	bl	5d2a <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    683e:	movs	r2, #32
    6840:	mov	r1, sp
    6842:	mov	r0, r4
    6844:	bl	5b88 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6848:	cbz	r0, 685e <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    684a:	cmp	r0, #32
    684c:	bne.n	6830 <ExFatFile::rmdir()+0xe>
    684e:	ldrsb.w	r2, [sp]
    6852:	ldrb.w	r3, [sp]
    6856:	cmp	r2, #0
    6858:	blt.n	6830 <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    685a:	cmp	r3, #0
    685c:	bne.n	683e <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    685e:	movs	r3, #8
  return remove();
    6860:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6862:	strb.w	r3, [r4, #49]	@ 0x31
  m_flags |= FILE_FLAG_WRITE;
    6866:	ldrb.w	r3, [r4, #51]	@ 0x33
    686a:	orr.w	r3, r3, #2
    686e:	strb.w	r3, [r4, #51]	@ 0x33
  return remove();
    6872:	bl	6796 <ExFatFile::remove()>
    6876:	b.n	6832 <ExFatFile::rmdir()+0x10>

00006878 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    6878:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    687a:	movs	r7, #0
    687c:	mov	r4, r0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    687e:	mov	r6, r7

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6880:	movs	r2, #0
    6882:	uxtb	r1, r7
    6884:	mov	r0, r4
    6886:	bl	5a54 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    688a:	mov	r5, r0
    688c:	cmp	r0, #0
    688e:	beq.n	690c <ExFatFile::syncDir()+0x94>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    6890:	ldrb	r3, [r0, #0]
    6892:	cmp	r3, #192	@ 0xc0
    6894:	beq.n	691e <ExFatFile::syncDir()+0xa6>
    6896:	cmp	r3, #193	@ 0xc1
    6898:	beq.n	68de <ExFatFile::syncDir()+0x66>
    689a:	cmp	r3, #133	@ 0x85
    689c:	bne.n	690c <ExFatFile::syncDir()+0x94>
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    689e:	ldrb.w	r3, [r4, #49]	@ 0x31
    68a2:	and.w	r3, r3, #55	@ 0x37
    68a6:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    68a8:	ldr	r3, [pc, #156]	@ (6948 <ExFatFile::syncDir()+0xd0>)
    68aa:	ldr	r3, [r3, #0]
    68ac:	cbz	r3, 68d0 <ExFatFile::syncDir()+0x58>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    68ae:	add.w	r2, sp, #3
    68b2:	add.w	r1, sp, #6
    68b6:	add	r0, sp, #4
    68b8:	blx	r3
          df->modifyTimeMs = ms10;
    68ba:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    68be:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    68c2:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    68c4:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    68c8:	strh	r2, [r5, #12]
    68ca:	strh	r3, [r5, #14]
    68cc:	strh	r2, [r5, #16]
    68ce:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    68d0:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    68d2:	ldrb.w	r3, [r2, #528]	@ 0x210
    68d6:	orr.w	r3, r3, #1
    68da:	strb.w	r3, [r2, #528]	@ 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    68de:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    68e0:	mov	r1, r6
    68e2:	mov	r0, r5
    68e4:	bl	66ac <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    68e8:	ldrb.w	r2, [r4, #48]	@ 0x30
    68ec:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    68ee:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    68f0:	cmp	r2, r3
    68f2:	bcs.n	6880 <ExFatFile::syncDir()+0x8>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    68f4:	movs	r2, #1
    68f6:	add.w	r1, r4, #36	@ 0x24
    68fa:	ldr	r0, [r4, #32]
    68fc:	bl	639a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6900:	cbz	r0, 690c <ExFatFile::syncDir()+0x94>
    6902:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    6904:	ldr	r0, [r4, #32]
    6906:	bl	66dc <ExFatPartition::cacheSync()>
    690a:	cbnz	r0, 691a <ExFatFile::syncDir()+0xa2>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    690c:	ldrb.w	r3, [r4, #50]	@ 0x32
  return false;
    6910:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6912:	orr.w	r3, r3, #1
    6916:	strb.w	r3, [r4, #50]	@ 0x32
}
    691a:	add	sp, #12
    691c:	pop	{r4, r5, r6, r7, pc}
        if (isContiguous()) {
    691e:	ldrb.w	r2, [r4, #51]	@ 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6922:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    6924:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6926:	ite	mi
    6928:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    692c:	andpl.w	r3, r3, #253	@ 0xfd
    6930:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    6932:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    6936:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    693a:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    693c:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    693e:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    6942:	strd	r2, r3, [r0, #24]
    6946:	b.n	68d0 <ExFatFile::syncDir()+0x58>
    6948:	.word	0x20011cec

0000694c <ExFatFile::sync()>:
bool ExFatFile::sync() {
    694c:	push	{r4, lr}
  if (!isOpen()) {
    694e:	ldrb.w	r3, [r0, #49]	@ 0x31
bool ExFatFile::sync() {
    6952:	mov	r4, r0
  if (!isOpen()) {
    6954:	cbnz	r3, 695a <ExFatFile::sync()+0xe>
    return true;
    6956:	movs	r0, #1
}
    6958:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    695a:	ldrsb.w	r2, [r0, #51]	@ 0x33
    695e:	ldrb.w	r3, [r0, #51]	@ 0x33
    6962:	cmp	r2, #0
    6964:	bge.n	6976 <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6966:	and.w	r3, r3, #127	@ 0x7f
    696a:	strb.w	r3, [r0, #51]	@ 0x33
}
    696e:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    6972:	b.w	6878 <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    6976:	ldr	r0, [r0, #32]
    6978:	bl	66dc <ExFatPartition::cacheSync()>
    697c:	cmp	r0, #0
    697e:	bne.n	6956 <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    6980:	ldrb.w	r3, [r4, #50]	@ 0x32
    6984:	orr.w	r3, r3, #1
    6988:	strb.w	r3, [r4, #50]	@ 0x32
  return false;
    698c:	b.n	6958 <ExFatFile::sync()+0xc>

0000698e <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    698e:	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6990:	ldrb.w	r3, [r0, #49]	@ 0x31
bool ExFatFile::addDirCluster() {
    6994:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6996:	lsls	r2, r3, #25
    6998:	bpl.n	6a32 <ExFatFile::addDirCluster()+0xa4>
    699a:	ldr	r0, [r0, #32]
    699c:	bl	6648 <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    69a0:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    69a2:	ldr.w	r3, [r3, #1084]	@ 0x43c
    69a6:	add	r0, r3
  if (dl >= 0X4000000) {
    69a8:	cmp.w	r0, #67108864	@ 0x4000000
    69ac:	bcs.n	6a36 <ExFatFile::addDirCluster()+0xa8>
  if (!addCluster()) {
    69ae:	mov	r0, r4
    69b0:	bl	6702 <ExFatFile::addCluster()>
    69b4:	cmp	r0, #0
    69b6:	beq.n	6a36 <ExFatFile::addDirCluster()+0xa8>
  sector = m_vol->clusterStartSector(m_curCluster);
    69b8:	ldr	r0, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    69ba:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    69bc:	ldr	r5, [r4, #24]
    69be:	ldrb.w	r3, [r0, #1093]	@ 0x445
    69c2:	subs	r5, #2
    69c4:	lsls	r5, r3
    69c6:	ldr.w	r3, [r0, #1068]	@ 0x42c
    69ca:	add	r5, r3
    return m_dataCache.prepare(sector, option);
    69cc:	movs	r2, #5
    69ce:	adds	r1, r5, r6
    69d0:	add.w	r0, r0, #528	@ 0x210
    69d4:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    69d8:	cbz	r0, 6a36 <ExFatFile::addDirCluster()+0xa8>
    memset(cache, 0, m_vol->bytesPerSector());
    69da:	mov.w	r2, #512	@ 0x200
    69de:	movs	r1, #0
    69e0:	bl	a2ac <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    69e4:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    69e6:	movs	r3, #1
    69e8:	adds	r6, #1
    69ea:	ldrb.w	r2, [r0, #1093]	@ 0x445
    69ee:	lsls	r3, r2
    69f0:	cmp	r6, r3
    69f2:	bcc.n	69cc <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    69f4:	ldrb.w	r3, [r4, #49]	@ 0x31
    69f8:	lsls	r3, r3, #25
    69fa:	bmi.n	6a28 <ExFatFile::addDirCluster()+0x9a>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    69fc:	ldrb.w	r3, [r4, #51]	@ 0x33
    6a00:	orn	r3, r3, #127	@ 0x7f
    6a04:	strb.w	r3, [r4, #51]	@ 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6a08:	ldr.w	r2, [r0, #1084]	@ 0x43c
    6a0c:	ldrd	r3, r1, [r4, #8]
    6a10:	adds	r3, r3, r2
    6a12:	adc.w	r1, r1, #0
    6a16:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    6a1a:	ldrd	r3, r1, [r4, #16]
    6a1e:	adds	r3, r3, r2
    6a20:	adc.w	r1, r1, #0
    6a24:	strd	r3, r1, [r4, #16]
  return sync();
    6a28:	mov	r0, r4
}
    6a2a:	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    6a2e:	b.w	694c <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6a32:	ldr	r0, [r0, #8]
    6a34:	b.n	69a0 <ExFatFile::addDirCluster()+0x12>
}
    6a36:	movs	r0, #0
    6a38:	pop	{r4, r5, r6, pc}

00006a3a <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6a3a:	push	{r4, lr}
  if (!parent->isDir()) {
    6a3c:	ldrb.w	r3, [r1, #49]	@ 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6a40:	mov	r4, r0
  if (!parent->isDir()) {
    6a42:	tst.w	r3, #80	@ 0x50
    6a46:	beq.n	6a7e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6a48:	movw	r3, #2562	@ 0xa02
    6a4c:	bl	5e08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6a50:	cbz	r0, 6a7e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    6a52:	movs	r3, #16
  if (!addDirCluster()) {
    6a54:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    6a56:	strb.w	r3, [r4, #49]	@ 0x31
  if (!addDirCluster()) {
    6a5a:	bl	698e <ExFatFile::addDirCluster()>
    6a5e:	cbz	r0, 6a7e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    6a60:	ldr	r3, [r4, #24]
    6a62:	mov	r0, r4
    6a64:	movs	r2, #0
    6a66:	str	r3, [r4, #28]
    6a68:	movs	r3, #0
    6a6a:	bl	5d2a <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6a6e:	movs	r3, #193	@ 0xc1
  return sync();
    6a70:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6a72:	strb.w	r3, [r4, #51]	@ 0x33
}
    6a76:	ldmia.w	sp!, {r4, lr}
  return sync();
    6a7a:	b.w	694c <ExFatFile::sync()>
}
    6a7e:	movs	r0, #0
    6a80:	pop	{r4, pc}

00006a82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    6a82:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a86:	mov	r8, r3
    6a88:	sub	sp, #88	@ 0x58
    6a8a:	movs	r3, #0
    6a8c:	mov	r5, r0
    6a8e:	mov	r4, r1
    6a90:	str	r2, [sp, #4]
    6a92:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    6a96:	str	r3, [sp, #80]	@ 0x50
  if (isOpen() || !parent->isDir()) {
    6a98:	ldrb.w	r3, [r0, #49]	@ 0x31
    6a9c:	cbz	r3, 6aa6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    6a9e:	movs	r0, #0
}
    6aa0:	add	sp, #88	@ 0x58
    6aa2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    6aa6:	ldrb.w	r3, [r1, #49]	@ 0x31
    6aaa:	tst.w	r3, #80	@ 0x50
    6aae:	beq.n	6a9e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    6ab0:	ldrb	r3, [r2, #0]
    6ab2:	cmp	r3, #47	@ 0x2f
    6ab4:	bne.n	6acc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    6ab6:	ldr	r2, [sp, #4]
    6ab8:	ldrb	r3, [r2, #0]
    6aba:	cmp	r3, #47	@ 0x2f
    6abc:	beq.n	6b18 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6abe:	ldr	r1, [r4, #32]
    6ac0:	add	r0, sp, #32
    6ac2:	bl	5ae0 <ExFatFile::openRoot(ExFatVolume*)>
    6ac6:	cmp	r0, #0
    6ac8:	beq.n	6a9e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    6aca:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6acc:	add	r3, sp, #4
    6ace:	add	r2, sp, #8
    6ad0:	ldr	r1, [sp, #4]
    6ad2:	mov	r0, r5
    6ad4:	bl	5b08 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6ad8:	cmp	r0, #0
    6ada:	beq.n	6a9e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    6adc:	ldr	r3, [sp, #4]
    6ade:	ldrb	r3, [r3, #0]
    6ae0:	cbz	r3, 6b34 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6ae2:	movs	r3, #0
    6ae4:	add	r2, sp, #8
    6ae6:	mov	r1, r4
    6ae8:	mov	r0, r5
    6aea:	bl	5e08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6aee:	cbz	r0, 6b1e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    6af0:	add	r6, sp, #32
    6af2:	mov	r2, r5
    6af4:	add.w	r3, r5, #48	@ 0x30
    6af8:	mov	r4, r6
    6afa:	ldr	r0, [r2, #0]
    6afc:	adds	r2, #8
    6afe:	ldr.w	r1, [r2, #-4]
    6b02:	mov	r7, r6
    6b04:	cmp	r2, r3
    6b06:	stmia	r7!, {r0, r1}
    6b08:	mov	r6, r7
    6b0a:	bne.n	6afa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    6b0c:	ldr	r0, [r2, #0]
    6b0e:	str	r0, [r7, #0]
    close();
    6b10:	mov	r0, r5
    6b12:	bl	5a8c <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    6b16:	b.n	6acc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    6b18:	adds	r2, #1
    6b1a:	str	r2, [sp, #4]
    6b1c:	b.n	6ab6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    6b1e:	cmp.w	r8, #0
    6b22:	beq.n	6a9e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    6b24:	add	r2, sp, #8
    6b26:	mov	r1, r4
    6b28:	mov	r0, r5
    6b2a:	bl	6a3a <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6b2e:	cmp	r0, #0
    6b30:	bne.n	6af0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    6b32:	b.n	6a9e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    6b34:	add	r2, sp, #8
    6b36:	mov	r1, r4
    6b38:	mov	r0, r5
    6b3a:	bl	6a3a <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6b3e:	b.n	6aa0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

00006b40 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    6b40:	push	{r4, r5, r6, r7, lr}
    6b42:	mov	r4, r0
    6b44:	sub	sp, #116	@ 0x74
    6b46:	movs	r0, #0
    6b48:	str	r0, [sp, #48]	@ 0x30
    6b4a:	str	r0, [sp, #104]	@ 0x68
  if (!(isFile() || isSubDir())) {
    6b4c:	ldrb.w	r0, [r4, #49]	@ 0x31
    6b50:	tst.w	r0, #24
    6b54:	bne.n	6b5c <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    6b56:	movs	r0, #0
}
    6b58:	add	sp, #116	@ 0x74
    6b5a:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    6b5c:	ldr	r0, [r4, #32]
    6b5e:	ldr	r3, [r1, #32]
    6b60:	cmp	r0, r3
    6b62:	bne.n	6b56 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6b64:	movw	r3, #2561	@ 0xa01
    6b68:	mov	r0, sp
    6b6a:	bl	6154 <ExFatFile::open(ExFatFile*, char const*, int)>
    6b6e:	cmp	r0, #0
    6b70:	beq.n	6b56 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    6b72:	add	r2, sp, #56	@ 0x38
    6b74:	mov	r3, r4
    6b76:	add.w	r7, r4, #48	@ 0x30
    6b7a:	mov	r6, r2
    6b7c:	ldr	r0, [r3, #0]
    6b7e:	adds	r3, #8
    6b80:	ldr.w	r1, [r3, #-4]
    6b84:	mov	r5, r2
    6b86:	cmp	r3, r7
    6b88:	stmia	r5!, {r0, r1}
    6b8a:	mov	r2, r5
    6b8c:	bne.n	6b7c <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    6b8e:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    6b90:	add	r2, sp, #36	@ 0x24
    6b92:	add.w	r3, r4, #36	@ 0x24
  oldFile = *this;
    6b96:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    6b98:	ldmia	r2, {r0, r1, r2}
    6b9a:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    6b9e:	ldrb.w	r3, [sp, #48]	@ 0x30
  if (!sync()) {
    6ba2:	mov	r0, r4
  m_setCount = file.m_setCount;
    6ba4:	strb.w	r3, [r4, #48]	@ 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6ba8:	ldrb.w	r3, [r4, #51]	@ 0x33
    6bac:	orn	r3, r3, #127	@ 0x7f
    6bb0:	strb.w	r3, [r4, #51]	@ 0x33
  if (!sync()) {
    6bb4:	bl	694c <ExFatFile::sync()>
    6bb8:	cmp	r0, #0
    6bba:	beq.n	6b56 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    6bbc:	movs	r3, #0
  return oldFile.remove();
    6bbe:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    6bc0:	str	r3, [sp, #84]	@ 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    6bc2:	movs	r3, #2
    6bc4:	strb.w	r3, [sp, #107]	@ 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    6bc8:	movs	r3, #8
    6bca:	strb.w	r3, [sp, #105]	@ 0x69
  return oldFile.remove();
    6bce:	bl	6796 <ExFatFile::remove()>
    6bd2:	b.n	6b58 <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00006bd4 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    6bd4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6bd6:	ldrb.w	r2, [r0, #51]	@ 0x33
    6bda:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6bdc:	lsls	r3, r2, #30
    6bde:	bmi.n	6be6 <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    6be0:	movs	r0, #0
}
    6be2:	add	sp, #12
    6be4:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    6be6:	ldr	r3, [r0, #28]
    6be8:	cmp	r3, #0
    6bea:	beq.n	6c9a <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    6bec:	ands.w	r2, r2, #64	@ 0x40
    if (m_curCluster) {
    6bf0:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    6bf2:	beq.n	6c64 <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6bf4:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6bf6:	ldrb.w	r5, [r0, #1093]	@ 0x445
    6bfa:	ldrd	r2, r6, [r4, #8]
    6bfe:	adds	r5, #9
    6c00:	subs	r2, #1
    6c02:	uxtb	r5, r5
    6c04:	adc.w	r6, r6, #4294967295
    6c08:	rsb	ip, r5, #32
    6c0c:	sub.w	r7, r5, #32
    6c10:	lsrs	r2, r5
    6c12:	lsl.w	ip, r6, ip
    6c16:	lsr.w	r7, r6, r7
    6c1a:	orr.w	r2, r2, ip
    6c1e:	orrs	r2, r7
    6c20:	adds	r2, #1
    if (m_curCluster) {
    6c22:	cbz	r1, 6c50 <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    6c24:	subs	r3, #1
      toFree = m_curCluster + 1;
    6c26:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    6c28:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    6c2a:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    6c2c:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6c2e:	cbnz	r2, 6c56 <ExFatFile::truncate()+0x82>
  return sync();
    6c30:	mov	r0, r4
  m_dataLength = m_curPosition;
    6c32:	ldrd	r2, r3, [r4]
    6c36:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    6c3a:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6c3e:	ldrb.w	r3, [r4, #51]	@ 0x33
    6c42:	orn	r3, r3, #127	@ 0x7f
    6c46:	strb.w	r3, [r4, #51]	@ 0x33
  return sync();
    6c4a:	bl	694c <ExFatFile::sync()>
    6c4e:	b.n	6be2 <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    6c50:	str	r3, [sp, #4]
      m_firstCluster = 0;
    6c52:	str	r1, [r4, #28]
    6c54:	b.n	6c2e <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6c56:	movs	r3, #0
    6c58:	ldr	r1, [sp, #4]
    6c5a:	bl	62fa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    6c5e:	cmp	r0, #0
    6c60:	bne.n	6c30 <ExFatFile::truncate()+0x5c>
    6c62:	b.n	6be0 <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    6c64:	cbz	r1, 6c94 <ExFatFile::truncate()+0xc0>
      toFree = 0;
    6c66:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6c68:	add	r2, sp, #4
    6c6a:	ldr	r0, [r0, #32]
    6c6c:	bl	63ce <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    6c70:	cmp	r0, #0
    6c72:	blt.n	6be0 <ExFatFile::truncate()+0xc>
      if (fg) {
    6c74:	beq.n	6c86 <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    6c76:	mov.w	r2, #4294967295
    6c7a:	ldr	r1, [r4, #24]
    6c7c:	ldr	r0, [r4, #32]
    6c7e:	bl	6474 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6c82:	cmp	r0, #0
    6c84:	beq.n	6be0 <ExFatFile::truncate()+0xc>
    if (toFree) {
    6c86:	ldr	r1, [sp, #4]
    6c88:	cmp	r1, #0
    6c8a:	beq.n	6c30 <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    6c8c:	ldr	r0, [r4, #32]
    6c8e:	bl	64ae <ExFatPartition::freeChain(unsigned long)>
    6c92:	b.n	6c5e <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    6c94:	str	r3, [sp, #4]
      m_firstCluster = 0;
    6c96:	str	r1, [r0, #28]
    6c98:	b.n	6c86 <ExFatFile::truncate()+0xb2>
      return true;
    6c9a:	movs	r0, #1
    6c9c:	b.n	6be2 <ExFatFile::truncate()+0xe>
	...

00006ca0 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6ca0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ca4:	ldrb.w	r3, [r0, #51]	@ 0x33
    6ca8:	mov	r9, r1
    6caa:	mov	r4, r0
    6cac:	mov	r7, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6cae:	lsls	r1, r3, #30
    6cb0:	bpl.n	6cfa <ExFatFile::write(void const*, unsigned int)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6cb2:	lsls	r2, r3, #28
    6cb4:	bmi.n	6cee <ExFatFile::write(void const*, unsigned int)+0x4e>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    6cb6:	mov	r8, r7
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6cb8:	add.w	fp, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6cbc:	mov.w	sl, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6cc0:	ldrd	r5, r3, [r4]
  while (toWrite) {
    6cc4:	cmp.w	r8, #0
    6cc8:	bne.n	6d0a <ExFatFile::write(void const*, unsigned int)+0x6a>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    6cca:	ldrd	r1, r2, [r4, #8]
    6cce:	cmp	r1, r5
    6cd0:	sbcs	r2, r3
    6cd2:	bcs.w	6ea8 <ExFatFile::write(void const*, unsigned int)+0x208>
    m_dataLength = m_curPosition;
    6cd6:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6cda:	ldrb.w	r3, [r4, #51]	@ 0x33
    6cde:	orn	r3, r3, #127	@ 0x7f
    6ce2:	strb.w	r3, [r4, #51]	@ 0x33
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
  }
  return nbyte;
    6ce6:	mov	r0, r7

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return 0;
}
    6ce8:	add	sp, #12
    6cea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!seekSet(m_validLength)) {
    6cee:	ldrd	r2, r3, [r0, #16]
    6cf2:	bl	5d2a <ExFatFile::seekSet(unsigned long long)>
    6cf6:	cmp	r0, #0
    6cf8:	bne.n	6cb6 <ExFatFile::write(void const*, unsigned int)+0x16>
  m_error |= WRITE_ERROR;
    6cfa:	ldrb.w	r3, [r4, #50]	@ 0x32
  return 0;
    6cfe:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6d00:	orr.w	r3, r3, #1
    6d04:	strb.w	r3, [r4, #50]	@ 0x32
  return 0;
    6d08:	b.n	6ce8 <ExFatFile::write(void const*, unsigned int)+0x48>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6d0a:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    6d0c:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6d0e:	ldr.w	r3, [r0, #1080]	@ 0x438
    6d12:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6d14:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    6d18:	cbnz	r5, 6d64 <ExFatFile::write(void const*, unsigned int)+0xc4>
      if (m_curCluster != 0) {
    6d1a:	cmp	r1, #0
    6d1c:	beq.n	6dcc <ExFatFile::write(void const*, unsigned int)+0x12c>
        if (isContiguous()) {
    6d1e:	ldrb.w	r3, [r4, #51]	@ 0x33
    6d22:	lsls	r3, r3, #25
    6d24:	bpl.n	6dbe <ExFatFile::write(void const*, unsigned int)+0x11e>
    6d26:	ldrb.w	r0, [r0, #1093]	@ 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6d2a:	ldrd	r3, r2, [r4, #8]
    6d2e:	adds	r0, #9
    6d30:	subs	r3, #1
    6d32:	uxtb	r0, r0
    6d34:	adc.w	r2, r2, #4294967295
    6d38:	rsb	lr, r0, #32
    6d3c:	sub.w	ip, r0, #32
    6d40:	lsrs	r3, r0
    6d42:	lsl.w	lr, r2, lr
    6d46:	lsr.w	ip, r2, ip
    6d4a:	ldr	r2, [r4, #28]
    6d4c:	orr.w	r3, r3, lr
    6d50:	orr.w	r3, r3, ip
    6d54:	add	r3, r2
          if (m_curCluster < lc) {
    6d56:	cmp	r3, r1
    6d58:	bhi.n	6db8 <ExFatFile::write(void const*, unsigned int)+0x118>
          if (!addCluster()) {
    6d5a:	mov	r0, r4
    6d5c:	bl	6702 <ExFatFile::addCluster()>
    6d60:	cmp	r0, #0
    6d62:	beq.n	6cfa <ExFatFile::write(void const*, unsigned int)+0x5a>
    sector = m_vol->clusterStartSector(m_curCluster) +
    6d64:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6d68:	mov.w	lr, r5, lsr #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    6d6c:	ldr	r1, [r4, #24]
    6d6e:	ldrb.w	r2, [ip, #1093]	@ 0x445
    6d72:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    6d74:	ldr.w	r3, [ip, #1068]	@ 0x42c
    6d78:	lsls	r1, r2
    6d7a:	add.w	r1, r1, r5, lsr #9
    6d7e:	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    6d80:	cbnz	r6, 6de4 <ExFatFile::write(void const*, unsigned int)+0x144>
    6d82:	cmp.w	r8, #512	@ 0x200
    6d86:	bcc.n	6de4 <ExFatFile::write(void const*, unsigned int)+0x144>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    6d88:	cmp.w	r8, #1024	@ 0x400
    6d8c:	ldr.w	r0, [ip, #532]	@ 0x214
    6d90:	bcs.n	6e6c <ExFatFile::write(void const*, unsigned int)+0x1cc>
    if (isCached(sector)) {
    6d92:	ldr.w	r3, [ip, #540]	@ 0x21c
    return m_blockDev->writeSector(sector, src);
    6d96:	mov	r2, r9
    if (isCached(sector)) {
    6d98:	cmp	r1, r3
    m_sector = 0XFFFFFFFF;
    6d9a:	ittt	eq
    6d9c:	moveq.w	r3, #4294967295
    m_status = 0;
    6da0:	strbeq.w	r6, [ip, #528]	@ 0x210
    m_sector = 0XFFFFFFFF;
    6da4:	streq.w	r3, [ip, #540]	@ 0x21c
    return m_blockDev->writeSector(sector, src);
    6da8:	ldr	r3, [r0, #0]
    6daa:	ldr	r3, [r3, #36]	@ 0x24
    6dac:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6dae:	cmp	r0, #0
    6db0:	beq.n	6cfa <ExFatFile::write(void const*, unsigned int)+0x5a>
      n = m_vol->bytesPerSector();
    6db2:	mov.w	r5, #512	@ 0x200
    6db6:	b.n	6e36 <ExFatFile::write(void const*, unsigned int)+0x196>
            m_curCluster++;
    6db8:	adds	r1, #1
    6dba:	str	r1, [r4, #24]
        if (fg == 0) {
    6dbc:	b.n	6d64 <ExFatFile::write(void const*, unsigned int)+0xc4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6dbe:	mov	r2, fp
    6dc0:	bl	63ce <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6dc4:	cmp	r0, #0
    6dc6:	blt.n	6cfa <ExFatFile::write(void const*, unsigned int)+0x5a>
        if (fg == 0) {
    6dc8:	beq.n	6d5a <ExFatFile::write(void const*, unsigned int)+0xba>
    6dca:	b.n	6d64 <ExFatFile::write(void const*, unsigned int)+0xc4>
        if (m_firstCluster == 0) {
    6dcc:	ldr	r3, [r4, #28]
    6dce:	cbnz	r3, 6de0 <ExFatFile::write(void const*, unsigned int)+0x140>
          if (!addCluster()) {
    6dd0:	mov	r0, r4
    6dd2:	bl	6702 <ExFatFile::addCluster()>
    6dd6:	cmp	r0, #0
    6dd8:	beq.n	6cfa <ExFatFile::write(void const*, unsigned int)+0x5a>
          m_firstCluster = m_curCluster;
    6dda:	ldr	r3, [r4, #24]
    6ddc:	str	r3, [r4, #28]
    6dde:	b.n	6d64 <ExFatFile::write(void const*, unsigned int)+0xc4>
          m_curCluster = m_firstCluster;
    6de0:	str	r3, [r4, #24]
    6de2:	b.n	6d64 <ExFatFile::write(void const*, unsigned int)+0xc4>
      n = m_vol->bytesPerSector() - sectorOffset;
    6de4:	rsb	r5, r6, #512	@ 0x200
      if (n > toWrite) {
    6de8:	cmp	r5, r8
    6dea:	it	cs
    6dec:	movcs	r5, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6dee:	cbnz	r6, 6e04 <ExFatFile::write(void const*, unsigned int)+0x164>
    6df0:	ldr	r3, [r4, #20]
    6df2:	ldr	r0, [r4, #0]
    6df4:	str	r3, [sp, #4]
    6df6:	ldr	r3, [r4, #16]
    6df8:	ldr	r2, [r4, #4]
    6dfa:	cmp	r0, r3
    6dfc:	ldr	r3, [sp, #4]
    6dfe:	sbcs.w	r3, r2, r3
    6e02:	bcs.n	6e68 <ExFatFile::write(void const*, unsigned int)+0x1c8>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6e04:	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    6e06:	add.w	r0, ip, #528	@ 0x210
    6e0a:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6e0e:	cmp	r0, #0
    6e10:	beq.w	6cfa <ExFatFile::write(void const*, unsigned int)+0x5a>
      memcpy(dst, src, n);
    6e14:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6e16:	add	r6, r5
      memcpy(dst, src, n);
    6e18:	mov	r2, r5
    6e1a:	mov	r1, r9
    6e1c:	bl	a2f0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6e20:	cmp.w	r6, #512	@ 0x200
    6e24:	ldr	r0, [r4, #32]
    6e26:	bne.n	6e36 <ExFatFile::write(void const*, unsigned int)+0x196>
  bool dataCacheSync() {return m_dataCache.sync();}
    6e28:	add.w	r0, r0, #528	@ 0x210
    6e2c:	bl	5778 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    6e30:	cmp	r0, #0
    6e32:	beq.w	6cfa <ExFatFile::write(void const*, unsigned int)+0x5a>
    src += n;
    6e36:	add	r9, r5
    toWrite -= n;
    6e38:	sub.w	r8, r8, r5
    m_curPosition += n;
    6e3c:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    6e40:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    6e44:	adds	r3, r5, r3
    6e46:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    6e4a:	cmp	r0, r3
    6e4c:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6e4e:	itt	cc
    6e50:	ldrbcc.w	r1, [r4, #51]	@ 0x33
    6e54:	orncc	r1, r1, #127	@ 0x7f
    m_curPosition += n;
    6e58:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6e5c:	itt	cc
    6e5e:	strbcc.w	r1, [r4, #51]	@ 0x33
      m_validLength = m_curPosition;
    6e62:	strdcc	r3, r2, [r4, #16]
    6e66:	b.n	6cc0 <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6e68:	movs	r2, #5
    6e6a:	b.n	6e06 <ExFatFile::write(void const*, unsigned int)+0x166>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6e6c:	lsl.w	r3, sl, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6e70:	mov.w	r2, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6e74:	sub.w	r3, r3, lr
      if (ns > maxNs) {
    6e78:	cmp	r3, r2
    6e7a:	it	cs
    6e7c:	movcs	r3, r2
      n = ns << m_vol->bytesPerSectorShift();
    6e7e:	ldr.w	r2, [ip, #540]	@ 0x21c
    return sector <= m_sector && m_sector < (sector + count);
    6e82:	cmp	r1, r2
    6e84:	mov.w	r5, r3, lsl #9
    6e88:	bhi.n	6e9e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    6e8a:	add.w	lr, r3, r1
    6e8e:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    6e90:	ittt	cc
    6e92:	movcc.w	r2, #4294967295
    m_status = 0;
    6e96:	strbcc.w	r6, [ip, #528]	@ 0x210
    m_sector = 0XFFFFFFFF;
    6e9a:	strcc.w	r2, [ip, #540]	@ 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    6e9e:	ldr	r2, [r0, #0]
    6ea0:	ldr	r6, [r2, #40]	@ 0x28
    6ea2:	mov	r2, r9
    6ea4:	blx	r6
    6ea6:	b.n	6e30 <ExFatFile::write(void const*, unsigned int)+0x190>
  } else if (FsDateTime::callback) {
    6ea8:	ldr	r3, [pc, #8]	@ (6eb4 <ExFatFile::write(void const*, unsigned int)+0x214>)
    6eaa:	ldr	r3, [r3, #0]
    6eac:	cmp	r3, #0
    6eae:	bne.w	6cda <ExFatFile::write(void const*, unsigned int)+0x3a>
    6eb2:	b.n	6ce6 <ExFatFile::write(void const*, unsigned int)+0x46>
    6eb4:	.word	0x20011cec

00006eb8 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    6eb8:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6eba:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    6ebc:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6ebe:	bl	7396 <FatFile::seekSet(unsigned long)>
    6ec2:	cbz	r0, 6ed0 <FatFile::cacheDir(unsigned short)+0x18>
    6ec4:	mov	r0, r4
    6ec6:	movs	r1, #0
  }
    6ec8:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6ecc:	b.w	7358 <FatFile::readDirCache(bool)>
  }
    6ed0:	pop	{r4, pc}

00006ed2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    6ed2:	cmp	r2, #4
    6ed4:	bhi.n	6ee0 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    6ed6:	add.w	r1, r1, r2, lsl #1
    6eda:	ldrh.w	r0, [r1, #1]
    return getLe16(ldir->unicode1 + 2*i);
    6ede:	bx	lr
  } else if (i < 11) {
    6ee0:	cmp	r2, #10
    6ee2:	bhi.n	6eec <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    6ee4:	add.w	r1, r1, r2, lsl #1
    6ee8:	ldrh	r0, [r1, #4]
    6eea:	bx	lr
  } else if (i < 13) {
    6eec:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    6eee:	itte	ls
    6ef0:	addls.w	r1, r1, r2, lsl #1
    6ef4:	ldrhls	r0, [r1, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    6ef6:	movhi	r0, #0
}
    6ef8:	bx	lr

00006efa <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    6efa:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    6efc:	ldrb	r4, [r0, #0]
    6efe:	mov	r5, r1
    6f00:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    6f02:	cbz	r4, 6f74 <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6f04:	ands.w	r4, r4, #96	@ 0x60
    6f08:	beq.n	6f1a <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    6f0a:	cmp	r2, #1
    6f0c:	bls.n	6f74 <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    6f0e:	movs	r3, #47	@ 0x2f
    name[1] = '\0';
    return 1;
    6f10:	movs	r0, #1
    name[0] = '/';
    6f12:	strb	r3, [r1, #0]
    name[1] = '\0';
    6f14:	movs	r3, #0
    6f16:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    6f18:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6f1a:	mov	r1, r4
    6f1c:	bl	713c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6f20:	cbz	r0, 6f74 <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    6f22:	mov	r6, r0
    6f24:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    6f26:	movs	r2, #8
    if (i == 8) {
    6f28:	cmp	r1, #8
      if (*ptr == ' ') {
    6f2a:	ldrb	r3, [r6, #0]
    if (i == 8) {
    6f2c:	bne.n	6f46 <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    6f2e:	cmp	r3, #32
    6f30:	beq.n	6f6c <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    6f32:	movs	r2, #16
      c = '.';
    6f34:	movs	r3, #46	@ 0x2e
    if ((j + 1u) >= size) {
    6f36:	mov	ip, r4
    6f38:	adds	r4, #1
    6f3a:	cmp	r4, r7
    6f3c:	bcs.n	6f74 <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    6f3e:	uxtb	r4, r4
    6f40:	strb.w	r3, [r5, ip]
    6f44:	b.n	6f66 <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6f46:	sub.w	ip, r3, #65	@ 0x41
      c = *ptr++;
    6f4a:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6f4c:	cmp.w	ip, #25
    6f50:	bhi.n	6f62 <FatFile::getSFN(char*, unsigned int)+0x68>
    6f52:	ldrb.w	ip, [r0, #12]
    6f56:	tst.w	r2, ip
    6f5a:	beq.n	6f36 <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    6f5c:	adds	r3, #32
    6f5e:	uxtb	r3, r3
      if (c == ' ') {
    6f60:	b.n	6f36 <FatFile::getSFN(char*, unsigned int)+0x3c>
    6f62:	cmp	r3, #32
    6f64:	bne.n	6f36 <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    6f66:	adds	r1, #1
    6f68:	cmp	r1, #12
    6f6a:	bne.n	6f28 <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    6f6c:	movs	r3, #0
    6f6e:	mov	r0, r4
    6f70:	strb	r3, [r5, r4]
  return j;
    6f72:	b.n	6f18 <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    6f74:	movs	r0, #0
    6f76:	strb	r0, [r5, #0]
  return 0;
    6f78:	b.n	6f18 <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

00006f7c <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    6f7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    6f80:	movs	r5, #0
    6f82:	sub	sp, #52	@ 0x34
  if (!isOpen()) {
    6f84:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    6f86:	mov	r6, r0
    6f88:	mov	r8, r1
    6f8a:	mov	r7, r2
    6f8c:	str	r5, [sp, #12]
  if (!isOpen()) {
    6f8e:	cbz	r3, 6faa <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    6f90:	ldrb	r3, [r0, #3]
    6f92:	cbnz	r3, 6f9e <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    6f94:	bl	6efa <FatFile::getSFN(char*, unsigned int)>
}
    6f98:	add	sp, #52	@ 0x34
    6f9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    6f9e:	mov	r1, r0
    6fa0:	add	r0, sp, #12
    6fa2:	bl	718c <FatFile::openCluster(FatFile*)>
    6fa6:	cmp	r0, #0
    6fa8:	bne.n	7056 <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    6faa:	movs	r0, #0
    6fac:	strb.w	r0, [r8]
  return 0;
    6fb0:	b.n	6f98 <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    6fb2:	ldrh	r1, [r6, #4]
    6fb4:	add	r0, sp, #12
    6fb6:	sub.w	r1, r1, r9
    6fba:	uxth	r1, r1
    6fbc:	bl	6eb8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    6fc0:	mov	sl, r0
    6fc2:	cmp	r0, #0
    6fc4:	beq.n	6faa <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6fc6:	ldrb	r3, [r0, #11]
    6fc8:	cmp	r3, #15
    6fca:	bne.n	6faa <FatFile::getName8(char*, unsigned int)+0x2e>
    6fcc:	ldrb	r3, [r0, #0]
    6fce:	and.w	r3, r3, #31
    6fd2:	cmp	r3, fp
    6fd4:	bne.n	6faa <FatFile::getName8(char*, unsigned int)+0x2e>
    6fd6:	mov.w	fp, #0
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6fda:	ldr	r7, [pc, #140]	@ (7068 <FatFile::getName8(char*, unsigned int)+0xec>)
      uint16_t c = getLfnChar(ldir, i);
    6fdc:	uxtb.w	r2, fp
    6fe0:	mov	r1, sl
    6fe2:	mov	r0, r6
    6fe4:	bl	6ed2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    6fe8:	cbz	r5, 7032 <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    6fea:	add.w	r2, r0, #9216	@ 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6fee:	uxth	r2, r2
    6ff0:	cmp.w	r2, #1024	@ 0x400
    6ff4:	bcs.n	6faa <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6ff6:	and.w	r5, r7, r5, lsl #10
    6ffa:	ubfx	r0, r0, #0, #10
    6ffe:	orrs	r0, r5
    7000:	add.w	r0, r0, #65536	@ 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7004:	mov	r1, r4
    7006:	ldr	r2, [sp, #4]
    7008:	bl	565c <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    700c:	mov	r4, r0
    700e:	cmp	r0, #0
    7010:	beq.n	6faa <FatFile::getName8(char*, unsigned int)+0x2e>
    7012:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    7014:	add.w	fp, fp, #1
    7018:	cmp.w	fp, #13
    701c:	bne.n	6fdc <FatFile::getName8(char*, unsigned int)+0x60>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    701e:	add.w	r9, r9, #1
    7022:	uxth.w	r9, r9
    7026:	uxtb.w	fp, r9
    702a:	ldrb	r3, [r6, #3]
    702c:	cmp	r3, fp
    702e:	bcs.n	6fb2 <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    7030:	b.n	7042 <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    7032:	add.w	r2, r0, #10240	@ 0x2800
    7036:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    7038:	cmp.w	r2, #2048	@ 0x800
    703c:	bcc.n	704c <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    703e:	cmp	r0, #0
    7040:	bne.n	7004 <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    7042:	movs	r3, #0
  return str - name;
    7044:	sub.w	r0, r4, r8
  *str = '\0';
    7048:	strb	r3, [r4, #0]
  return str - name;
    704a:	b.n	6f98 <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    704c:	cmp.w	r2, #1024	@ 0x400
    7050:	bcs.n	6faa <FatFile::getName8(char*, unsigned int)+0x2e>
        hs = c;
    7052:	mov	r5, r0
    7054:	b.n	7014 <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7056:	subs	r7, #1
  char* str = name;
    7058:	mov	r4, r8
    705a:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    705e:	add.w	r3, r8, r7
    7062:	str	r3, [sp, #4]
    7064:	b.n	7026 <FatFile::getName8(char*, unsigned int)+0xaa>
    7066:	nop
    7068:	.word	0x000ffc00

0000706c <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    706c:	b.w	6f7c <FatFile::getName8(char*, unsigned int)>

00007070 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    7070:	push	{r4, lr}
    7072:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7074:	adds	r0, #40	@ 0x28
    7076:	bl	5778 <FsCache::sync()>
    707a:	cbz	r0, 7092 <FatPartition::cacheSync()+0x22>
    707c:	add.w	r0, r4, #568	@ 0x238
    7080:	bl	5778 <FsCache::sync()>
    7084:	cbz	r0, 7092 <FatPartition::cacheSync()+0x22>
    7086:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    7088:	ldr	r3, [r0, #0]
  }
    708a:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    708e:	ldr	r3, [r3, #32]
    7090:	bx	r3
  }
    7092:	movs	r0, #0
    7094:	pop	{r4, pc}

00007096 <FatFile::addCluster()>:
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    7096:	mov	r2, r0
bool FatFile::addCluster() {
    7098:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    709a:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    709e:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    70a0:	ldr	r0, [r0, #8]
    70a2:	mov	r1, r5
    70a4:	bl	7e52 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    70a8:	cbz	r0, 70bc <FatFile::addCluster()+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    70aa:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    70ac:	cbnz	r5, 70be <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    70ae:	orr.w	r3, r3, #64	@ 0x40
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    70b2:	strb	r3, [r4, #2]
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    70b4:	ldrb	r3, [r4, #2]
    70b6:	orn	r3, r3, #127	@ 0x7f
    70ba:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    70bc:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    70be:	adds	r5, #1
    70c0:	ldr	r2, [r4, #16]
    70c2:	cmp	r2, r5
    70c4:	beq.n	70b4 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    70c6:	bic.w	r3, r3, #64	@ 0x40
    70ca:	b.n	70b2 <FatFile::addCluster()+0x1c>

000070cc <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    70cc:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
    70ce:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    70d0:	mov	r4, r0
  if (isRootFixed()) {
    70d2:	ands.w	r5, r5, #32
    70d6:	beq.n	70de <FatFile::addDirCluster()+0x12>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    70d8:	movs	r6, #0
}
    70da:	mov	r0, r6
    70dc:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    70de:	ldr	r2, [r0, #20]
    70e0:	ldr	r3, [pc, #84]	@ (7138 <FatFile::addDirCluster()+0x6c>)
    70e2:	cmp	r2, r3
    70e4:	bcs.n	70d8 <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    70e6:	bl	7096 <FatFile::addCluster()>
    70ea:	mov	r6, r0
    70ec:	cmp	r0, #0
    70ee:	beq.n	70d8 <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    70f0:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    70f2:	ldr	r3, [r4, #16]
    70f4:	ldrb	r1, [r2, #6]
    70f6:	subs	r3, #2
    70f8:	ldr	r7, [r2, #20]
    70fa:	lsls	r3, r1
    70fc:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    70fe:	ldr	r0, [r4, #8]
    7100:	uxtb	r1, r5
    7102:	ldrb	r3, [r0, #4]
    7104:	cmp	r3, r1
    7106:	bhi.n	711a <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    7108:	ldrb	r2, [r0, #6]
    710a:	mov.w	r3, #512	@ 0x200
    710e:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    7110:	ldr	r2, [r4, #20]
    7112:	uxtah	r3, r2, r3
    7116:	str	r3, [r4, #20]
  return true;
    7118:	b.n	70da <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    711a:	movs	r2, #5
    711c:	add	r1, r7
    711e:	adds	r0, #40	@ 0x28
    if (!pc) {
    7120:	adds	r5, #1
    7122:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
    7126:	cmp	r0, #0
    7128:	beq.n	70d8 <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    712a:	mov.w	r2, #512	@ 0x200
    712e:	movs	r1, #0
    7130:	bl	a2ac <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7134:	b.n	70fe <FatFile::addDirCluster()+0x32>
    7136:	nop
    7138:	.word	0x001ffe00

0000713c <FatFile::cacheDirEntry(unsigned char)>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    713c:	push	{r4, lr}
    713e:	mov	r4, r0
    7140:	ldr	r0, [r0, #8]
    7142:	mov	r2, r1
    7144:	adds	r0, #40	@ 0x28
    7146:	ldr	r1, [r4, #24]
    7148:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    714c:	cbz	r0, 7158 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
    714e:	ldrh	r3, [r4, #4]
    7150:	and.w	r3, r3, #15
    7154:	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    7158:	pop	{r4, pc}

0000715a <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    715a:	push	{r3, r4, r5, lr}
    715c:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    715e:	ldrb	r1, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
    7160:	mov	r4, r0
  if (isOpen()) {
    7162:	cbz	r1, 7168 <FatFile::openRoot(FatVolume*)+0xe>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    7164:	movs	r0, #0
}
    7166:	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(FatFile));
    7168:	movs	r2, #36	@ 0x24
    716a:	bl	a2ac <memset>
  m_vol = vol;
    716e:	str	r5, [r4, #8]
    return m_fatType;
    7170:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7172:	cmp	r3, #16
    7174:	beq.n	717e <FatFile::openRoot(FatVolume*)+0x24>
    7176:	cmp	r3, #32
    7178:	beq.n	7188 <FatFile::openRoot(FatVolume*)+0x2e>
    717a:	cmp	r3, #12
    717c:	bne.n	7164 <FatFile::openRoot(FatVolume*)+0xa>
    717e:	movs	r3, #32
  m_flags = FILE_FLAG_READ;
    7180:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7182:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7184:	strb	r0, [r4, #2]
  return true;
    7186:	b.n	7166 <FatFile::openRoot(FatVolume*)+0xc>
  switch (vol->fatType()) {
    7188:	movs	r3, #64	@ 0x40
    718a:	b.n	7180 <FatFile::openRoot(FatVolume*)+0x26>

0000718c <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    718c:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    718e:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    7190:	mov	r4, r0
    7192:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    7194:	cbnz	r3, 71a0 <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    7196:	ldr	r1, [r1, #8]
}
    7198:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    719c:	b.w	715a <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    71a0:	movs	r2, #35	@ 0x23
    71a2:	movs	r1, #0
    71a4:	adds	r0, #1
    71a6:	bl	a2ac <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    71aa:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    71ac:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    71ae:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    71b0:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    71b2:	ldr	r3, [r5, #8]
    71b4:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    71b6:	ldr	r3, [r5, #12]
    71b8:	str	r3, [r4, #32]
}
    71ba:	pop	{r3, r4, r5, pc}

000071bc <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    71bc:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    71c0:	ldrb	r3, [r0, #2]
    71c2:	mov	r4, r0
    71c4:	mov	r8, r1
    71c6:	mov	r6, r2
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    71c8:	lsls	r7, r3, #31
    71ca:	bpl.w	730a <FatFile::read(void*, unsigned int)+0x14e>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    71ce:	ldrb	r3, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    71d0:	lsls	r5, r3, #28
    71d2:	bpl.n	7230 <FatFile::read(void*, unsigned int)+0x74>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    71d4:	ldr	r3, [r0, #28]
    71d6:	ldr	r2, [r0, #20]
    71d8:	subs	r3, r3, r2
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    uint16_t tmp16 =
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
    71da:	cmp	r6, r3
    71dc:	it	cs
    71de:	movcs	r6, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
    71e0:	mov	r7, r6
  uint8_t sectorOfCluster = 0;
    71e2:	mov.w	r9, #0
  while (toRead) {
    71e6:	cmp	r7, #0
    71e8:	beq.n	729c <FatFile::read(void*, unsigned int)+0xe0>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    71ea:	ldrb	r3, [r4, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    71ec:	ldr	r2, [r4, #20]
    if (isRootFixed()) {
    71ee:	lsls	r1, r3, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    71f0:	ldr	r0, [r4, #8]
    71f2:	ubfx	sl, r2, #0, #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    71f6:	mov.w	r5, r2, lsr #9
    if (isRootFixed()) {
    71fa:	bpl.n	7242 <FatFile::read(void*, unsigned int)+0x86>
      sector = m_vol->rootDirStart()
    71fc:	ldr	r3, [r0, #32]
    71fe:	add	r5, r3
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7200:	ldr	r3, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    7202:	cmp.w	sl, #0
    7206:	bne.n	72a4 <FatFile::read(void*, unsigned int)+0xe8>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7208:	cmp.w	r7, #512	@ 0x200
    720c:	bcc.n	72a4 <FatFile::read(void*, unsigned int)+0xe8>
    return m_sector;
    720e:	ldr	r1, [r3, #52]	@ 0x34
        || sector == m_vol->cacheSectorNumber()) {
    7210:	cmp	r5, r1
    7212:	beq.n	72a4 <FatFile::read(void*, unsigned int)+0xe8>
        goto fail;
      }
      uint8_t* src = pc + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7214:	cmp.w	r7, #1024	@ 0x400
    7218:	bcs.n	72d6 <FatFile::read(void*, unsigned int)+0x11a>
    return m_blockDev->readSector(sector, dst);
    721a:	ldr	r0, [r3, #44]	@ 0x2c
    721c:	mov	r2, r8
    721e:	mov	r1, r5
    7220:	ldr	r3, [r0, #0]
    7222:	ldr	r3, [r3, #16]
    7224:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    7226:	cmp	r0, #0
    7228:	beq.n	730a <FatFile::read(void*, unsigned int)+0x14e>
      n = m_vol->bytesPerSector();
    722a:	mov.w	fp, #512	@ 0x200
    722e:	b.n	72c8 <FatFile::read(void*, unsigned int)+0x10c>
  } else if (isRootFixed()) {
    7230:	lsls	r0, r3, #26
    7232:	bpl.n	71e0 <FatFile::read(void*, unsigned int)+0x24>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7234:	ldr	r3, [r4, #8]
    7236:	ldrh	r2, [r3, #10]
    7238:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    723a:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    723e:	uxth	r3, r3
    7240:	b.n	71da <FatFile::read(void*, unsigned int)+0x1e>
    return (position >> 9) & m_clusterSectorMask;
    7242:	ldrb.w	r9, [r0, #5]
    7246:	and.w	r9, r9, r5
      if (offset == 0 && sectorOfCluster == 0) {
    724a:	cmp.w	sl, #0
    724e:	bne.n	7262 <FatFile::read(void*, unsigned int)+0xa6>
    7250:	cmp.w	r9, #0
    7254:	bne.n	7262 <FatFile::read(void*, unsigned int)+0xa6>
        if (m_curPosition == 0) {
    7256:	cbnz	r2, 7274 <FatFile::read(void*, unsigned int)+0xb8>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7258:	lsls	r2, r3, #25
    return m_rootDirStart;
    725a:	ite	mi
    725c:	ldrmi	r3, [r0, #32]
    725e:	ldrpl	r3, [r4, #32]
    7260:	str	r3, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7262:	ldr	r3, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7264:	ldr	r5, [r4, #16]
    7266:	ldrb	r2, [r3, #6]
    7268:	subs	r5, #2
    726a:	ldr	r3, [r3, #20]
    726c:	lsls	r5, r2
    726e:	add	r5, r3
    7270:	add	r5, r9
    7272:	b.n	7200 <FatFile::read(void*, unsigned int)+0x44>
        } else if (isFile() && isContiguous()) {
    7274:	lsls	r3, r3, #28
          m_curCluster++;
    7276:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    7278:	bpl.n	7286 <FatFile::read(void*, unsigned int)+0xca>
    727a:	ldrb	r3, [r4, #2]
    727c:	lsls	r5, r3, #25
    727e:	bpl.n	7286 <FatFile::read(void*, unsigned int)+0xca>
          m_curCluster++;
    7280:	adds	r1, #1
    7282:	str	r1, [r4, #16]
    7284:	b.n	7262 <FatFile::read(void*, unsigned int)+0xa6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7286:	add.w	r2, r4, #16
    728a:	bl	7cc6 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    728e:	cmp	r0, #0
    7290:	blt.n	730a <FatFile::read(void*, unsigned int)+0x14e>
          if (fg == 0) {
    7292:	bne.n	7262 <FatFile::read(void*, unsigned int)+0xa6>
            if (isDir()) {
    7294:	ldrb	r3, [r4, #0]
    7296:	tst.w	r3, #112	@ 0x70
    729a:	beq.n	730a <FatFile::read(void*, unsigned int)+0x14e>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    729c:	subs	r0, r6, r7

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    729e:	add	sp, #12
    72a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - offset;
    72a4:	rsb	fp, sl, #512	@ 0x200
    return m_cache.prepare(sector, options);
    72a8:	movs	r2, #0
    72aa:	mov	r1, r5
    72ac:	add.w	r0, r3, #40	@ 0x28
      if (n > toRead) {
    72b0:	cmp	fp, r7
    72b2:	it	cs
    72b4:	movcs	fp, r7
    72b6:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    72ba:	cbz	r0, 730a <FatFile::read(void*, unsigned int)+0x14e>
      memcpy(dst, src, n);
    72bc:	add.w	r1, r0, sl
    72c0:	mov	r2, fp
    72c2:	mov	r0, r8
    72c4:	bl	a2f0 <memcpy>
    m_curPosition += n;
    72c8:	ldr	r3, [r4, #20]
    dst += n;
    72ca:	add	r8, fp
    toRead -= n;
    72cc:	sub.w	r7, r7, fp
    m_curPosition += n;
    72d0:	add	r3, fp
    72d2:	str	r3, [r4, #20]
    toRead -= n;
    72d4:	b.n	71e6 <FatFile::read(void*, unsigned int)+0x2a>
      if (!isRootFixed()) {
    72d6:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    72d8:	mov.w	sl, r7, lsr #9
      if (!isRootFixed()) {
    72dc:	lsls	r2, r0, #26
    72de:	bmi.n	72ec <FatFile::read(void*, unsigned int)+0x130>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    72e0:	ldrb	r0, [r3, #4]
    72e2:	sub.w	r0, r0, r9
        if (mb < ns) {
    72e6:	cmp	sl, r0
    72e8:	it	cs
    72ea:	movcs	sl, r0
    return sector <= m_sector && m_sector < (sector + count);
    72ec:	cmp	r5, r1
      n = ns << m_vol->bytesPerSectorShift();
    72ee:	mov.w	fp, sl, lsl #9
    72f2:	bls.n	7318 <FatFile::read(void*, unsigned int)+0x15c>
    return m_blockDev->readSectors(sector, dst, count);
    72f4:	ldr	r0, [r3, #44]	@ 0x2c
    72f6:	mov	r1, r5
    72f8:	mov	r2, r8
    72fa:	ldr	r3, [r0, #0]
    72fc:	ldr	r3, [r3, #20]
    72fe:	mov	ip, r3
    7300:	mov	r3, sl
    7302:	mov	r5, ip
    7304:	blx	r5
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    7306:	cmp	r0, #0
    7308:	bne.n	72c8 <FatFile::read(void*, unsigned int)+0x10c>
  m_error |= READ_ERROR;
    730a:	ldrb	r3, [r4, #1]
  return -1;
    730c:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    7310:	orr.w	r3, r3, #2
    7314:	strb	r3, [r4, #1]
  return -1;
    7316:	b.n	729e <FatFile::read(void*, unsigned int)+0xe2>
    return sector <= m_sector && m_sector < (sector + count);
    7318:	add.w	r0, r5, sl
    731c:	cmp	r1, r0
    731e:	bcs.n	72f4 <FatFile::read(void*, unsigned int)+0x138>
    if (isCached(sector, count) && !sync()) {
    7320:	add.w	r0, r3, #40	@ 0x28
    7324:	str	r3, [sp, #4]
    7326:	bl	5778 <FsCache::sync()>
    732a:	ldr	r3, [sp, #4]
    732c:	cmp	r0, #0
    732e:	bne.n	72f4 <FatFile::read(void*, unsigned int)+0x138>
    7330:	b.n	730a <FatFile::read(void*, unsigned int)+0x14e>

00007332 <FatFile::peek()>:
int FatFile::peek() {
    7332:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    7334:	movs	r2, #1
    7336:	add.w	r1, sp, #7
    733a:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    733c:	ldrd	r5, r6, [r0, #16]
    7340:	bl	71bc <FatFile::read(void*, unsigned int)>
    7344:	cmp	r0, #1
    7346:	ite	eq
    7348:	ldrbeq.w	r0, [sp, #7]
    734c:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    7350:	strd	r5, r6, [r4, #16]
}
    7354:	add	sp, #8
    7356:	pop	{r4, r5, r6, pc}

00007358 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7358:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    735a:	tst.w	r3, #480	@ 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    735e:	push	{r0, r1, r2, r4, r5, lr}
    7360:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7362:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    7366:	beq.n	736a <FatFile::readDirCache(bool)+0x12>
    7368:	cbnz	r1, 7392 <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    736a:	movs	r2, #1
    736c:	add.w	r1, sp, #7
    7370:	mov	r0, r4
    7372:	bl	71bc <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    7376:	sxtb	r0, r0
    7378:	cmp	r0, #1
    737a:	beq.n	7382 <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    737c:	movs	r0, #0
}
    737e:	add	sp, #12
    7380:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    7382:	ldr	r3, [r4, #20]
    7384:	adds	r3, #31
    return m_buffer;
    7386:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    7388:	str	r3, [r4, #20]
    738a:	adds	r0, #56	@ 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    738c:	add.w	r0, r0, r5, lsl #5
    7390:	b.n	737e <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    7392:	adds	r3, #32
    7394:	b.n	7386 <FatFile::readDirCache(bool)+0x2e>

00007396 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    7396:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    739a:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    739c:	ldrb	r1, [r0, #0]
    739e:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    73a0:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    73a2:	cbz	r1, 73c8 <FatFile::seekSet(unsigned long)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    73a4:	ldr	r0, [r0, #20]
    73a6:	cmp	r0, r5
    73a8:	beq.n	73b8 <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    73aa:	cbnz	r5, 73be <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    73ac:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    73ae:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    73b0:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    73b2:	bic.w	r3, r3, #32
    73b6:	strb	r3, [r4, #2]
    return true;
    73b8:	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    73ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFile()) {
    73be:	lsls	r3, r1, #28
    73c0:	bpl.n	73ce <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    73c2:	ldr	r3, [r4, #28]
    73c4:	cmp	r3, r5
    73c6:	bcs.n	73de <FatFile::seekSet(unsigned long)+0x48>
  return false;
    73c8:	movs	r0, #0
  m_curCluster = tmp;
    73ca:	str	r7, [r4, #16]
  return false;
    73cc:	b.n	73ba <FatFile::seekSet(unsigned long)+0x24>
  } else if (isRootFixed()) {
    73ce:	lsls	r6, r1, #26
    73d0:	bpl.n	73de <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    73d2:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    73d4:	ldrh	r3, [r3, #10]
    73d6:	cmp.w	r5, r3, lsl #5
    73da:	bhi.n	73c8 <FatFile::seekSet(unsigned long)+0x32>
    73dc:	b.n	73ae <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    73de:	ldr.w	ip, [r4, #8]
    73e2:	subs	r6, r5, #1
  if (isContiguous()) {
    73e4:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    73e6:	ldrb.w	r3, [ip, #6]
    73ea:	lsls	r2, r2, #25
    73ec:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    73f0:	uxtb	r3, r3
    73f2:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    73f6:	bpl.n	7400 <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    73f8:	ldr	r3, [r4, #32]
    73fa:	add	r3, r6
    73fc:	str	r3, [r4, #16]
    goto done;
    73fe:	b.n	73ae <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    7400:	subs	r2, r0, #1
    7402:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    7406:	cmp	r6, r3
    7408:	bcc.n	740c <FatFile::seekSet(unsigned long)+0x76>
    740a:	cbnz	r0, 7432 <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    740c:	lsls	r3, r1, #25
    return m_rootDirStart;
    740e:	ite	mi
    7410:	ldrmi.w	r3, [ip, #32]
    7414:	ldrpl	r3, [r4, #32]
    7416:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7418:	add.w	r8, r4, #16
  while (nNew--) {
    741c:	cmp	r6, #0
    741e:	beq.n	73ae <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7420:	mov	r2, r8
    7422:	ldr	r1, [r4, #16]
    7424:	ldr	r0, [r4, #8]
    7426:	subs	r6, #1
    7428:	bl	7cc6 <FatPartition::fatGet(unsigned long, unsigned long*)>
    742c:	cmp	r0, #0
    742e:	bgt.n	741c <FatFile::seekSet(unsigned long)+0x86>
    7430:	b.n	73c8 <FatFile::seekSet(unsigned long)+0x32>
    nNew -= nCur;
    7432:	subs	r6, r6, r3
    7434:	b.n	7418 <FatFile::seekSet(unsigned long)+0x82>

00007436 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    7436:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7438:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    743a:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    743c:	lsls	r2, r3, #27
    743e:	bpl.n	7454 <FatFile::rmdir()+0x1e>
    seekSet(0);
    7440:	movs	r1, #0
    7442:	bl	7396 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    7446:	movs	r1, #1
    7448:	mov	r0, r4
    744a:	bl	7358 <FatFile::readDirCache(bool)>
    if (!dir) {
    744e:	cbnz	r0, 7458 <FatFile::rmdir()+0x22>
      if (!getError()) {
    7450:	ldrb	r3, [r4, #1]
    7452:	cbz	r3, 746c <FatFile::rmdir()+0x36>
}
    7454:	movs	r0, #0
    7456:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    7458:	ldrb	r3, [r0, #0]
    745a:	cbz	r3, 746c <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    745c:	cmp	r3, #229	@ 0xe5
    745e:	beq.n	7446 <FatFile::rmdir()+0x10>
    7460:	cmp	r3, #46	@ 0x2e
    7462:	beq.n	7446 <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    7464:	ldrb	r3, [r0, #11]
    7466:	lsls	r3, r3, #28
    7468:	bmi.n	7446 <FatFile::rmdir()+0x10>
    746a:	b.n	7454 <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    746c:	movs	r3, #8
  return remove();
    746e:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    7470:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    7472:	ldrb	r3, [r4, #2]
    7474:	orr.w	r3, r3, #2
    7478:	strb	r3, [r4, #2]
}
    747a:	ldmia.w	sp!, {r4, lr}
  return remove();
    747e:	b.w	876c <FatFile::remove()>

00007482 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    7482:	push	{r3, r4, r5, r6, r7, lr}
    7484:	mov	r7, r1
    7486:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    7488:	movs	r1, #0
    748a:	movs	r2, #36	@ 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    748c:	mov	r4, r0
    748e:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    7490:	bl	a2ac <memset>
  m_vol = dirFile->m_vol;
    7494:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    7496:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    7498:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    749a:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    749e:	str	r3, [r4, #12]
    74a0:	add.w	r3, r0, #56	@ 0x38
  m_vol = dirFile->m_vol;
    74a4:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    74a6:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    74aa:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    74ac:	lsls	r1, r2, #28
    74ae:	bmi.n	7526 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    74b0:	and.w	r2, r2, #23
    74b4:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    74b6:	ldrb	r1, [r3, #11]
    74b8:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    74bc:	itt	eq
    74be:	orreq.w	r2, r2, #8
    74c2:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    74c4:	ldrb.w	r2, [sp, #24]
    74c8:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    74ca:	and.w	r2, r5, #3
    74ce:	cmp	r2, #1
    74d0:	beq.n	7516 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    74d2:	cmp	r2, #2
    74d4:	beq.n	751a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    74d6:	cbnz	r2, 7526 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    74d8:	lsls	r2, r5, #21
    74da:	bmi.n	7526 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    74dc:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    74de:	lsls	r7, r2, #30
    74e0:	bpl.n	74ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    74e2:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    74e4:	lsls	r6, r1, #27
    74e6:	bmi.n	7526 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    74e8:	lsls	r1, r1, #31
    74ea:	bmi.n	7526 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    74ec:	and.w	r1, r5, #8
    74f0:	orrs	r2, r1
    74f2:	strb	r2, [r4, #2]
    return m_sector;
    74f4:	ldr	r2, [r0, #52]	@ 0x34
                 | getLe16(dir->firstClusterLow);
    74f6:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    74f8:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    74fa:	ldrh	r2, [r3, #20]
    74fc:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    7500:	lsls	r2, r5, #21
    7502:	bpl.n	752e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7504:	cbnz	r1, 751e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7506:	ldrb	r3, [r4, #2]
    7508:	orn	r3, r3, #127	@ 0x7f
    750c:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    750e:	lsls	r3, r5, #17
    7510:	bmi.n	7536 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    7512:	movs	r0, #1
}
    7514:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    7516:	movs	r2, #2
    7518:	b.n	74de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    751a:	movs	r2, #3
    751c:	b.n	74de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    751e:	bl	7ed0 <FatPartition::freeChain(unsigned long)>
    7522:	cmp	r0, #0
    7524:	bne.n	7506 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    7526:	movs	r0, #0
    7528:	strb	r0, [r4, #0]
  m_flags = 0;
    752a:	strb	r0, [r4, #2]
  return false;
    752c:	b.n	7514 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    752e:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7530:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    7532:	str	r3, [r4, #28]
    7534:	b.n	750e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7536:	ldr	r1, [r4, #28]
    7538:	mov	r0, r4
    753a:	bl	7396 <FatFile::seekSet(unsigned long)>
    753e:	cmp	r0, #0
    7540:	bne.n	7512 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    7542:	b.n	7526 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

00007544 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7544:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  bool isOpen() const {return m_attributes;}
    7548:	ldrb	r3, [r0, #0]
    754a:	mov	r7, r0
    754c:	mov	r6, r1
    754e:	mov	r8, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7550:	cmp	r3, #0
    7552:	bne.n	75d4 <FatFile::openNext(FatFile*, int)+0x90>
    7554:	ldrb	r3, [r1, #0]
    7556:	tst.w	r3, #112	@ 0x70
    755a:	beq.n	75d4 <FatFile::openNext(FatFile*, int)+0x90>
    755c:	ldr	r4, [r1, #20]
    755e:	ands.w	r4, r4, #31
    7562:	bne.n	75d4 <FatFile::openNext(FatFile*, int)+0x90>
  uint8_t checksum = 0;
    7564:	mov	sl, r4
    DirFat_t* dir = dirFile->readDirCache();
    7566:	movs	r1, #0
    7568:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    756a:	ldr.w	r9, [r6, #20]
    756e:	bl	7358 <FatFile::readDirCache(bool)>
    if (!dir) {
    7572:	cbz	r0, 75d4 <FatFile::openNext(FatFile*, int)+0x90>
    if (dir->name[0] == FAT_NAME_FREE) {
    7574:	ldrb	r1, [r0, #0]
    7576:	cbz	r1, 75d4 <FatFile::openNext(FatFile*, int)+0x90>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7578:	cmp	r1, #46	@ 0x2e
    757a:	beq.n	75be <FatFile::openNext(FatFile*, int)+0x7a>
    757c:	cmp	r1, #229	@ 0xe5
    757e:	beq.n	75be <FatFile::openNext(FatFile*, int)+0x7a>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7580:	ldrb	r3, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    7582:	ands.w	r2, r3, #8
    7586:	bne.n	75c2 <FatFile::openNext(FatFile*, int)+0x7e>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    7588:	cbz	r4, 75a8 <FatFile::openNext(FatFile*, int)+0x64>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    758a:	subs	r1, r0, #1
    758c:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7590:	lsls	r3, r2, #7
    7592:	orr.w	r3, r3, r2, lsr #1
    7596:	ldrb.w	r2, [r1, #1]!
    759a:	uxtab	r3, r2, r3
    for (uint8_t i = 0; i < 11; i++) {
    759e:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    75a0:	uxtb	r2, r3
    for (uint8_t i = 0; i < 11; i++) {
    75a2:	bne.n	7590 <FatFile::openNext(FatFile*, int)+0x4c>
    75a4:	cmp	sl, r2
    75a6:	bne.n	75d4 <FatFile::openNext(FatFile*, int)+0x90>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    75a8:	mov	r3, r8
    75aa:	ubfx	r2, r9, #5, #16
    75ae:	mov	r1, r6
    75b0:	mov	r0, r7
    75b2:	str	r4, [sp, #0]
    75b4:	bl	7482 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    75b8:	add	sp, #8
    75ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    75be:	movs	r4, #0
    75c0:	b.n	7566 <FatFile::openNext(FatFile*, int)+0x22>
    } else if (isLongName(dir)) {
    75c2:	cmp	r3, #15
    75c4:	bne.n	75be <FatFile::openNext(FatFile*, int)+0x7a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    75c6:	lsls	r3, r1, #25
    75c8:	bpl.n	7566 <FatFile::openNext(FatFile*, int)+0x22>
        lfnOrd = ldir->order & 0X1F;
    75ca:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    75ce:	ldrb.w	sl, [r0, #13]
    75d2:	b.n	7566 <FatFile::openNext(FatFile*, int)+0x22>
  return false;
    75d4:	movs	r0, #0
    75d6:	b.n	75b8 <FatFile::openNext(FatFile*, int)+0x74>

000075d8 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    75d8:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    75da:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    75dc:	mov	r4, r0
  if (!isOpen()) {
    75de:	cbnz	r3, 75e6 <FatFile::sync()+0xe>
    return true;
    75e0:	movs	r0, #1
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    75e2:	add	sp, #12
    75e4:	pop	{r4, r5, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    75e6:	ldrsb.w	r3, [r0, #2]
    75ea:	cmp	r3, #0
    75ec:	bge.n	7644 <FatFile::sync()+0x6c>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    75ee:	movs	r1, #1
    75f0:	bl	713c <FatFile::cacheDirEntry(unsigned char)>
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    75f4:	mov	r5, r0
    75f6:	cbnz	r0, 7604 <FatFile::sync()+0x2c>
  m_error |= WRITE_ERROR;
    75f8:	ldrb	r3, [r4, #1]
  return false;
    75fa:	movs	r0, #0
  m_error |= WRITE_ERROR;
    75fc:	orr.w	r3, r3, #1
    7600:	strb	r3, [r4, #1]
  return false;
    7602:	b.n	75e2 <FatFile::sync()+0xa>
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7604:	ldrb	r3, [r0, #0]
    7606:	cmp	r3, #229	@ 0xe5
    7608:	beq.n	75f8 <FatFile::sync()+0x20>
    if (isFile()) {
    760a:	ldrb	r3, [r4, #0]
    760c:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    760e:	itt	mi
    7610:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7612:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7614:	ldr	r3, [r4, #32]
    7616:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7618:	lsrs	r3, r3, #16
    761a:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    761c:	ldr	r3, [pc, #48]	@ (7650 <FatFile::sync()+0x78>)
    761e:	ldr	r3, [r3, #0]
    7620:	cbz	r3, 763c <FatFile::sync()+0x64>
      FsDateTime::callback(&date, &time, &ms10);
    7622:	add.w	r2, sp, #3
    7626:	add.w	r1, sp, #6
    762a:	add	r0, sp, #4
    762c:	blx	r3
      setLe16(dir->modifyDate, date);
    762e:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7632:	strh	r3, [r5, #24]
    7634:	strh	r3, [r5, #18]
    7636:	ldrh.w	r3, [sp, #6]
    763a:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    763c:	ldrb	r3, [r4, #2]
    763e:	and.w	r3, r3, #127	@ 0x7f
    7642:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    7644:	ldr	r0, [r4, #8]
    7646:	bl	7070 <FatPartition::cacheSync()>
    764a:	cmp	r0, #0
    764c:	beq.n	75f8 <FatFile::sync()+0x20>
    764e:	b.n	75e0 <FatFile::sync()+0x8>
    7650:	.word	0x20011cec

00007654 <FatFile::close()>:
bool FatFile::close() {
    7654:	push	{r4, lr}
    7656:	mov	r4, r0
  bool rtn = sync();
    7658:	bl	75d8 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    765c:	movs	r3, #0
    765e:	strb	r3, [r4, #0]
  m_flags = 0;
    7660:	strb	r3, [r4, #2]
}
    7662:	pop	{r4, pc}

00007664 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7664:	push	{r4, r5, r6, r7, lr}
    7666:	mov	r7, r3
    7668:	sub	sp, #84	@ 0x54
  FatFile() {}
    766a:	movs	r3, #0
    766c:	mov	r6, r0
    766e:	mov	r4, r1
    7670:	str	r2, [sp, #4]
    7672:	str	r3, [sp, #8]
    7674:	strh.w	r3, [sp, #56]	@ 0x38
  if (isOpen() || !dirFile->isDir()) {
    7678:	ldrb	r3, [r0, #0]
    767a:	cbz	r3, 7682 <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    767c:	movs	r0, #0
}
    767e:	add	sp, #84	@ 0x54
    7680:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    7682:	ldrb	r3, [r1, #0]
    7684:	tst.w	r3, #112	@ 0x70
    7688:	beq.n	767c <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    768a:	ldrb	r3, [r2, #0]
    768c:	cmp	r3, #47	@ 0x2f
    768e:	bne.n	76b6 <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    7690:	ldr	r2, [sp, #4]
    7692:	ldrb	r3, [r2, #0]
    7694:	cmp	r3, #47	@ 0x2f
    7696:	beq.n	76a4 <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    7698:	ldr	r1, [r4, #8]
    if (*path == 0) {
    769a:	cbnz	r3, 76aa <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    769c:	mov	r0, r6
    769e:	bl	715a <FatFile::openRoot(FatVolume*)>
    76a2:	b.n	767e <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    76a4:	adds	r2, #1
    76a6:	str	r2, [sp, #4]
    76a8:	b.n	7690 <FatFile::open(FatFile*, char const*, int)+0x2c>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    76aa:	add	r0, sp, #8
    76ac:	bl	715a <FatFile::openRoot(FatVolume*)>
    76b0:	cmp	r0, #0
    76b2:	beq.n	767c <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    76b4:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    76b6:	add	r3, sp, #4
    76b8:	add	r2, sp, #44	@ 0x2c
    76ba:	ldr	r1, [sp, #4]
    76bc:	mov	r0, r6
    76be:	bl	86c8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    76c2:	cmp	r0, #0
    76c4:	beq.n	767c <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    76c6:	ldr	r3, [sp, #4]
    76c8:	ldrb	r3, [r3, #0]
    76ca:	cbz	r3, 76f4 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    76cc:	movs	r3, #0
    76ce:	add	r2, sp, #44	@ 0x2c
    76d0:	mov	r1, r4
    76d2:	mov	r0, r6
    76d4:	bl	844c <FatFile::open(FatFile*, FatLfn_t*, int)>
    76d8:	cmp	r0, #0
    76da:	beq.n	767c <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    76dc:	mov	r5, r6
    76de:	add	r4, sp, #8
    76e0:	ldmia	r5!, {r0, r1, r2, r3}
    76e2:	stmia	r4!, {r0, r1, r2, r3}
    76e4:	ldmia	r5!, {r0, r1, r2, r3}
    76e6:	stmia	r4!, {r0, r1, r2, r3}
    76e8:	ldr	r3, [r5, #0]
    close();
    76ea:	mov	r0, r6
    tmpDir = *this;
    76ec:	str	r3, [r4, #0]
    close();
    76ee:	bl	7654 <FatFile::close()>
  while (1) {
    76f2:	b.n	76b4 <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    76f4:	mov	r3, r7
    76f6:	add	r2, sp, #44	@ 0x2c
    76f8:	mov	r1, r4
    76fa:	mov	r0, r6
    76fc:	bl	844c <FatFile::open(FatFile*, FatLfn_t*, int)>
    7700:	b.n	767e <FatFile::open(FatFile*, char const*, int)+0x1a>

00007702 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    7702:	cbz	r1, 770c <FatFile::open(FatVolume*, char const*, int)+0xa>
    7704:	add.w	r1, r1, #1096	@ 0x448
    7708:	b.w	7664 <FatFile::open(FatFile*, char const*, int)>
}
    770c:	mov	r0, r1
    770e:	bx	lr

00007710 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    7710:	push	{r4, r5, r6, lr}
    7712:	mov	r6, r0
    7714:	mov	r4, r1
  if (!sync()) {
    7716:	bl	75d8 <FatFile::sync()>
    771a:	mov	r5, r0
    771c:	cbnz	r0, 7724 <FatFile::dirEntry(DirFat_t*)+0x14>
  return false;
    771e:	movs	r5, #0
}
    7720:	mov	r0, r5
    7722:	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7724:	movs	r1, #0
    7726:	mov	r0, r6
    7728:	bl	713c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    772c:	mov	r3, r0
    772e:	cmp	r0, #0
    7730:	beq.n	771e <FatFile::dirEntry(DirFat_t*)+0xe>
  memcpy(dst, dir, sizeof(DirFat_t));
    7732:	mov	r1, r4
    7734:	add.w	r2, r0, #32
    7738:	ldr.w	r0, [r3], #4
    773c:	cmp	r3, r2
    773e:	str.w	r0, [r1], #4
    7742:	bne.n	7738 <FatFile::dirEntry(DirFat_t*)+0x28>
    7744:	b.n	7720 <FatFile::dirEntry(DirFat_t*)+0x10>

00007746 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7746:	push	{r4, r5, lr}
    7748:	sub	sp, #36	@ 0x24
    774a:	mov	r5, r1
    774c:	mov	r4, r2
  if (!dirEntry(&dir)) {
    774e:	mov	r1, sp
    7750:	bl	7710 <FatFile::dirEntry(DirFat_t*)>
    7754:	cbz	r0, 7762 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    7756:	ldrh.w	r3, [sp, #16]
    775a:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    775c:	ldrh.w	r3, [sp, #14]
    7760:	strh	r3, [r4, #0]
}
    7762:	add	sp, #36	@ 0x24
    7764:	pop	{r4, r5, pc}

00007766 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7766:	push	{r4, r5, lr}
    7768:	sub	sp, #36	@ 0x24
    776a:	mov	r5, r1
    776c:	mov	r4, r2
  if (!dirEntry(&dir)) {
    776e:	mov	r1, sp
    7770:	bl	7710 <FatFile::dirEntry(DirFat_t*)>
    7774:	cbz	r0, 7782 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    7776:	ldrh.w	r3, [sp, #24]
    777a:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    777c:	ldrh.w	r3, [sp, #22]
    7780:	strh	r3, [r4, #0]
}
    7782:	add	sp, #36	@ 0x24
    7784:	pop	{r4, r5, pc}

00007786 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7786:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    7788:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    778a:	sub	sp, #36	@ 0x24
    778c:	mov	r4, r0
    778e:	mov	r6, r1
  if (!parent->isDir()) {
    7790:	tst.w	r3, #112	@ 0x70
    7794:	bne.n	779c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    7796:	movs	r0, #0
}
    7798:	add	sp, #36	@ 0x24
    779a:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    779c:	movw	r3, #2562	@ 0xa02
    77a0:	bl	844c <FatFile::open(FatFile*, FatLfn_t*, int)>
    77a4:	cmp	r0, #0
    77a6:	beq.n	7796 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    77a8:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    77aa:	movs	r5, #16
  if (!addDirCluster()) {
    77ac:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    77ae:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    77b0:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    77b2:	bl	70cc <FatFile::addDirCluster()>
    77b6:	cmp	r0, #0
    77b8:	beq.n	7796 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    77ba:	ldr	r3, [r4, #16]
    seekSet(0);
    77bc:	movs	r1, #0
    77be:	mov	r0, r4
    77c0:	str	r3, [r4, #32]
    77c2:	bl	7396 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    77c6:	mov	r0, r4
    77c8:	bl	75d8 <FatFile::sync()>
    77cc:	cmp	r0, #0
    77ce:	beq.n	7796 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    77d0:	mov	r1, r7
    77d2:	mov	r0, r4
    77d4:	bl	713c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    77d8:	mov	r3, r0
    77da:	cmp	r0, #0
    77dc:	beq.n	7796 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    77de:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    77e0:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    77e2:	add.w	ip, r0, #32
    77e6:	mov	r5, r2
    77e8:	ldr	r0, [r3, #0]
    77ea:	adds	r3, #8
    77ec:	ldr.w	r1, [r3, #-4]
    77f0:	mov	r7, r2
    77f2:	cmp	r3, ip
    77f4:	stmia	r7!, {r0, r1}
    77f6:	mov	r2, r7
    77f8:	bne.n	77e8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    77fa:	mov.w	r3, #538976288	@ 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    77fe:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7800:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    7802:	movs	r2, #1
    dot.name[i] = ' ';
    7804:	str.w	r3, [sp, #1]
    7808:	adds	r0, #40	@ 0x28
    780a:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    780e:	subs	r1, #2
    7810:	strh.w	r3, [sp, #9]
    7814:	ldrb.w	r3, [r0, #-34]
    7818:	lsls	r1, r3
    781a:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    781e:	add	r1, r3
    7820:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7824:	mov	r3, r0
    7826:	cmp	r0, #0
    7828:	beq.n	7796 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    782a:	movs	r2, #46	@ 0x2e
    782c:	mov	ip, r5
    782e:	mov	r7, r0
    7830:	add.w	lr, sp, #32
    7834:	strb.w	r2, [sp]
    7838:	mov	r2, ip
    783a:	adds	r7, #8
    783c:	ldmia	r2!, {r0, r1}
    783e:	cmp	r2, lr
    7840:	str.w	r0, [r7, #-8]
    7844:	str.w	r1, [r7, #-4]
    7848:	mov	ip, r2
    784a:	bne.n	7838 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    784c:	movs	r2, #46	@ 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    784e:	adds	r3, #32
  dot.name[1] = '.';
    7850:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7854:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    7856:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7858:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    785a:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    785e:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7860:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    7864:	mov	r5, r2
    7866:	adds	r3, #8
    7868:	ldmia	r5!, {r0, r1}
    786a:	cmp	r5, r6
    786c:	str.w	r0, [r3, #-8]
    7870:	str.w	r1, [r3, #-4]
    7874:	mov	r2, r5
    7876:	bne.n	7864 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    7878:	ldr	r0, [r4, #8]
    787a:	bl	7070 <FatPartition::cacheSync()>
    787e:	b.n	7798 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

00007880 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7880:	push	{r4, r5, r6, r7, lr}
    7882:	mov	r7, r3
    7884:	sub	sp, #84	@ 0x54
    7886:	movs	r3, #0
    7888:	mov	r6, r0
    788a:	mov	r4, r1
    788c:	str	r2, [sp, #4]
    788e:	strh.w	r3, [sp, #20]
  FatFile() {}
    7892:	str	r3, [sp, #44]	@ 0x2c
  if (isOpen() || !parent->isDir()) {
    7894:	ldrb	r3, [r0, #0]
    7896:	cbz	r3, 789e <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    7898:	movs	r0, #0
}
    789a:	add	sp, #84	@ 0x54
    789c:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    789e:	ldrb	r3, [r1, #0]
    78a0:	tst.w	r3, #112	@ 0x70
    78a4:	beq.n	7898 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    78a6:	ldrb	r3, [r2, #0]
    78a8:	cmp	r3, #47	@ 0x2f
    78aa:	bne.n	78c2 <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    78ac:	ldr	r2, [sp, #4]
    78ae:	ldrb	r3, [r2, #0]
    78b0:	cmp	r3, #47	@ 0x2f
    78b2:	beq.n	78fe <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
    if (!tmpDir.openRoot(parent->m_vol)) {
    78b4:	ldr	r1, [r4, #8]
    78b6:	add	r0, sp, #44	@ 0x2c
    78b8:	bl	715a <FatFile::openRoot(FatVolume*)>
    78bc:	cmp	r0, #0
    78be:	beq.n	7898 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    78c0:	add	r4, sp, #44	@ 0x2c
    if (!parsePathName(path, &fname, &path)) {
    78c2:	add	r3, sp, #4
    78c4:	add	r2, sp, #8
    78c6:	ldr	r1, [sp, #4]
    78c8:	mov	r0, r6
    78ca:	bl	86c8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    78ce:	cmp	r0, #0
    78d0:	beq.n	7898 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    78d2:	ldr	r3, [sp, #4]
    78d4:	ldrb	r3, [r3, #0]
    78d6:	cbz	r3, 7918 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    78d8:	movs	r3, #0
    78da:	add	r2, sp, #8
    78dc:	mov	r1, r4
    78de:	mov	r0, r6
    78e0:	bl	844c <FatFile::open(FatFile*, FatLfn_t*, int)>
    78e4:	cbz	r0, 7904 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    78e6:	mov	r5, r6
    78e8:	add	r4, sp, #44	@ 0x2c
    78ea:	ldmia	r5!, {r0, r1, r2, r3}
    78ec:	stmia	r4!, {r0, r1, r2, r3}
    78ee:	ldmia	r5!, {r0, r1, r2, r3}
    78f0:	stmia	r4!, {r0, r1, r2, r3}
    78f2:	ldr	r3, [r5, #0]
    close();
    78f4:	mov	r0, r6
    tmpDir = *this;
    78f6:	str	r3, [r4, #0]
    close();
    78f8:	bl	7654 <FatFile::close()>
  while (1) {
    78fc:	b.n	78c0 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    78fe:	adds	r2, #1
    7900:	str	r2, [sp, #4]
    7902:	b.n	78ac <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    7904:	cmp	r7, #0
    7906:	beq.n	7898 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    7908:	add	r2, sp, #8
    790a:	mov	r1, r4
    790c:	mov	r0, r6
    790e:	bl	7786 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7912:	cmp	r0, #0
    7914:	bne.n	78e6 <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    7916:	b.n	7898 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    7918:	add	r2, sp, #8
    791a:	mov	r1, r4
    791c:	mov	r0, r6
    791e:	bl	7786 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7922:	b.n	789a <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

00007924 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7924:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    7928:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    792a:	sub	sp, #108	@ 0x6c
    792c:	mov.w	r9, #0
    7930:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    7932:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7936:	mov	r7, r1
    7938:	mov	r8, r2
    793a:	str.w	r9, [sp, #32]
    793e:	str.w	r9, [sp, #68]	@ 0x44
  if (!(isFile() || isSubDir())) {
    7942:	bne.n	794c <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    7944:	movs	r0, #0
}
    7946:	add	sp, #108	@ 0x6c
    7948:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    794c:	ldr	r2, [r0, #8]
    794e:	ldr	r3, [r1, #8]
    7950:	cmp	r2, r3
    7952:	bne.n	7944 <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    7954:	mov	r6, r4
  sync();
    7956:	bl	75d8 <FatFile::sync()>
  oldFile = *this;
    795a:	add	r5, sp, #68	@ 0x44
    795c:	ldmia	r6!, {r0, r1, r2, r3}
    795e:	stmia	r5!, {r0, r1, r2, r3}
    7960:	ldmia	r6!, {r0, r1, r2, r3}
    7962:	stmia	r5!, {r0, r1, r2, r3}
    7964:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7966:	mov	r1, r9
    7968:	mov	r0, r4
  oldFile = *this;
    796a:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    796c:	bl	713c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7970:	mov	r3, r0
    7972:	cmp	r0, #0
    7974:	beq.n	7944 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    7976:	mov	r2, sp
    7978:	add.w	ip, r0, #32
    797c:	mov	r5, r2
    797e:	ldr	r0, [r3, #0]
    7980:	adds	r3, #8
    7982:	ldr.w	r1, [r3, #-4]
    7986:	mov	r6, r2
    7988:	cmp	r3, ip
    798a:	stmia	r6!, {r0, r1}
    798c:	mov	r2, r6
    798e:	bne.n	797e <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    7990:	ldrb	r3, [r4, #0]
    7992:	add	r6, sp, #32
    7994:	ands.w	r3, r3, #8
    7998:	beq.n	79b0 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    799a:	movw	r3, #2561	@ 0xa01
    799e:	mov	r2, r8
    79a0:	mov	r1, r7
    79a2:	mov	r0, r6
    79a4:	bl	7664 <FatFile::open(FatFile*, char const*, int)>
    79a8:	cmp	r0, #0
    79aa:	beq.n	7944 <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    79ac:	movs	r7, #0
    79ae:	b.n	79c0 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    79b0:	mov	r2, r8
    79b2:	mov	r1, r7
    79b4:	mov	r0, r6
    79b6:	bl	7880 <FatFile::mkdir(FatFile*, char const*, bool)>
    79ba:	cmp	r0, #0
    79bc:	beq.n	7944 <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    79be:	ldr	r7, [sp, #64]	@ 0x40
  m_dirSector = file.m_dirSector;
    79c0:	ldr	r3, [sp, #56]	@ 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    79c2:	movs	r1, #1
    79c4:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    79c6:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    79c8:	ldrh.w	r3, [sp, #36]	@ 0x24
    79cc:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    79ce:	ldrb.w	r3, [sp, #35]	@ 0x23
    79d2:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    79d4:	ldr	r3, [sp, #44]	@ 0x2c
    79d6:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    79d8:	movs	r3, #0
    79da:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    79de:	strb.w	r3, [sp, #34]	@ 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    79e2:	bl	713c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    79e6:	cmp	r0, #0
    79e8:	beq.n	7944 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    79ea:	add.w	r3, sp, #13
    79ee:	add.w	r2, r0, #13
    79f2:	add.w	r1, sp, #29
    79f6:	ldr.w	ip, [r3], #4
    79fa:	cmp	r3, r1
    79fc:	str.w	ip, [r2], #4
    7a00:	bne.n	79f6 <FatFile::rename(FatFile*, char const*)+0xd2>
    7a02:	ldrh	r1, [r3, #0]
    7a04:	strh	r1, [r2, #0]
    7a06:	ldrb	r3, [r3, #2]
    7a08:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    7a0a:	ldrb.w	r3, [sp, #11]
    7a0e:	strb	r3, [r0, #11]
  if (dirCluster) {
    7a10:	cmp	r7, #0
    7a12:	beq.n	7a90 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    7a14:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a16:	subs	r3, r7, #2
    7a18:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    7a1a:	adds	r0, #40	@ 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a1c:	ldr.w	r1, [r0, #-20]
    7a20:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    7a22:	movs	r2, #0
    7a24:	add	r1, r3
    7a26:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7a2a:	cmp	r0, #0
    7a2c:	beq.n	7944 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    7a2e:	add.w	r2, r0, #32
    7a32:	mov	lr, r5
    7a34:	add.w	r3, r0, #64	@ 0x40
    7a38:	ldr	r0, [r2, #0]
    7a3a:	adds	r2, #8
    7a3c:	ldr.w	r1, [r2, #-4]
    7a40:	mov	ip, lr
    7a42:	cmp	r2, r3
    7a44:	stmia.w	ip!, {r0, r1}
    7a48:	mov	lr, ip
    7a4a:	bne.n	7a38 <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    7a4c:	mov	r1, r7
    7a4e:	ldr	r0, [r4, #8]
    7a50:	bl	7ed0 <FatPartition::freeChain(unsigned long)>
    7a54:	cmp	r0, #0
    7a56:	beq.w	7944 <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    7a5a:	ldr	r0, [r4, #8]
    7a5c:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a5e:	ldr	r1, [r4, #32]
    7a60:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    7a62:	adds	r0, #40	@ 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a64:	subs	r1, #2
    7a66:	lsls	r1, r3
    7a68:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7a6c:	add	r1, r3
    7a6e:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7a72:	cmp	r0, #0
    7a74:	beq.w	7944 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    7a78:	add.w	r3, r0, #32
    7a7c:	mov	r2, r5
    7a7e:	adds	r3, #8
    7a80:	ldmia	r2!, {r0, r1}
    7a82:	cmp	r2, r6
    7a84:	str.w	r0, [r3, #-8]
    7a88:	str.w	r1, [r3, #-4]
    7a8c:	mov	r5, r2
    7a8e:	bne.n	7a7c <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    7a90:	movs	r3, #0
  if (!oldFile.remove()) {
    7a92:	add	r0, sp, #68	@ 0x44
  oldFile.m_firstCluster = 0;
    7a94:	str	r3, [sp, #100]	@ 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    7a96:	movs	r3, #2
    7a98:	strb.w	r3, [sp, #70]	@ 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    7a9c:	movs	r3, #8
    7a9e:	strb.w	r3, [sp, #68]	@ 0x44
  if (!oldFile.remove()) {
    7aa2:	bl	876c <FatFile::remove()>
    7aa6:	cmp	r0, #0
    7aa8:	beq.w	7944 <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    7aac:	ldr	r0, [r4, #8]
    7aae:	bl	7070 <FatPartition::cacheSync()>
    7ab2:	b.n	7946 <FatFile::rename(FatFile*, char const*)+0x22>

00007ab4 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    7ab4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7ab8:	ldrb	r3, [r0, #2]
    7aba:	mov	r4, r0
    7abc:	mov	r9, r1
    7abe:	mov	r6, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    7ac0:	lsls	r5, r3, #30
    7ac2:	bpl.n	7afe <FatFile::write(void const*, unsigned int)+0x4a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7ac4:	lsls	r1, r3, #28
    7ac6:	bmi.n	7af4 <FatFile::write(void const*, unsigned int)+0x40>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    7ac8:	ldr	r3, [r4, #20]
    7aca:	adds	r3, r3, r6
    7acc:	bcs.n	7afe <FatFile::write(void const*, unsigned int)+0x4a>
  size_t nToWrite = nbyte;
    7ace:	mov	r8, r6
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7ad0:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7ad4:	ldr	r3, [r4, #20]
  while (nToWrite) {
    7ad6:	cmp.w	r8, #0
    7ada:	bne.n	7b0a <FatFile::write(void const*, unsigned int)+0x56>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    7adc:	ldr	r2, [r4, #28]
    7ade:	cmp	r2, r3
    7ae0:	bcs.w	7c4a <FatFile::write(void const*, unsigned int)+0x196>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    7ae4:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7ae6:	ldrb	r3, [r4, #2]
    7ae8:	orn	r3, r3, #127	@ 0x7f
    7aec:	strb	r3, [r4, #2]
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
  }
  return nbyte;
    7aee:	mov	r0, r6

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return 0;
}
    7af0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!seekSet(m_fileSize)) {
    7af4:	ldr	r1, [r0, #28]
    7af6:	bl	7396 <FatFile::seekSet(unsigned long)>
    7afa:	cmp	r0, #0
    7afc:	bne.n	7ac8 <FatFile::write(void const*, unsigned int)+0x14>
  m_error |= WRITE_ERROR;
    7afe:	ldrb	r3, [r4, #1]
  return 0;
    7b00:	movs	r0, #0
  m_error |= WRITE_ERROR;
    7b02:	orr.w	r3, r3, #1
    7b06:	strb	r3, [r4, #1]
  return 0;
    7b08:	b.n	7af0 <FatFile::write(void const*, unsigned int)+0x3c>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7b0a:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    7b0c:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    7b10:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    7b12:	ldrb	r7, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    7b14:	ands.w	r7, r7, r3, lsr #9
    7b18:	bne.n	7b30 <FatFile::write(void const*, unsigned int)+0x7c>
    7b1a:	cbnz	r5, 7b30 <FatFile::write(void const*, unsigned int)+0x7c>
      if (m_curCluster != 0) {
    7b1c:	cmp	r1, #0
    7b1e:	beq.n	7b98 <FatFile::write(void const*, unsigned int)+0xe4>
        if (isContiguous() && m_fileSize > m_curPosition) {
    7b20:	ldrb	r2, [r4, #2]
    7b22:	lsls	r2, r2, #25
    7b24:	bpl.n	7b80 <FatFile::write(void const*, unsigned int)+0xcc>
    7b26:	ldr	r2, [r4, #28]
    7b28:	cmp	r2, r3
    7b2a:	bls.n	7b80 <FatFile::write(void const*, unsigned int)+0xcc>
          m_curCluster++;
    7b2c:	adds	r1, #1
    7b2e:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    7b30:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7b34:	ldr	r1, [r4, #16]
    7b36:	ldrb.w	r3, [ip, #6]
    7b3a:	subs	r1, #2
    7b3c:	lsls	r1, r3
    7b3e:	ldr.w	r3, [ip, #20]
    7b42:	add	r1, r3
                      + sectorOfCluster;
    7b44:	add	r1, r7
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    7b46:	cmp	r5, #0
    7b48:	bne.n	7bb0 <FatFile::write(void const*, unsigned int)+0xfc>
    7b4a:	cmp.w	r8, #512	@ 0x200
    7b4e:	bcc.n	7bb0 <FatFile::write(void const*, unsigned int)+0xfc>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    7b50:	cmp.w	r8, #1024	@ 0x400
    7b54:	ldr.w	r0, [ip, #44]	@ 0x2c
    7b58:	bcs.n	7c10 <FatFile::write(void const*, unsigned int)+0x15c>
    if (isCached(sector)) {
    7b5a:	ldr.w	r3, [ip, #52]	@ 0x34
    return m_blockDev->writeSector(sector, src);
    7b5e:	mov	r2, r9
    if (isCached(sector)) {
    7b60:	cmp	r1, r3
    m_sector = 0XFFFFFFFF;
    7b62:	ittt	eq
    7b64:	moveq.w	r3, #4294967295
    m_status = 0;
    7b68:	strbeq.w	r5, [ip, #40]	@ 0x28
    m_sector = 0XFFFFFFFF;
    7b6c:	streq.w	r3, [ip, #52]	@ 0x34
    return m_blockDev->writeSector(sector, src);
    7b70:	ldr	r3, [r0, #0]
    7b72:	ldr	r3, [r3, #36]	@ 0x24
    7b74:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    7b76:	cmp	r0, #0
    7b78:	beq.n	7afe <FatFile::write(void const*, unsigned int)+0x4a>
      n = m_vol->bytesPerSector();
    7b7a:	mov.w	r7, #512	@ 0x200
    7b7e:	b.n	7bfa <FatFile::write(void const*, unsigned int)+0x146>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7b80:	mov	r2, sl
    7b82:	bl	7cc6 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7b86:	cmp	r0, #0
    7b88:	blt.n	7afe <FatFile::write(void const*, unsigned int)+0x4a>
        if (fg == 0) {
    7b8a:	bne.n	7b30 <FatFile::write(void const*, unsigned int)+0x7c>
          if (!addCluster()) {
    7b8c:	mov	r0, r4
    7b8e:	bl	7096 <FatFile::addCluster()>
    7b92:	cmp	r0, #0
    7b94:	bne.n	7b30 <FatFile::write(void const*, unsigned int)+0x7c>
    7b96:	b.n	7afe <FatFile::write(void const*, unsigned int)+0x4a>
        if (m_firstCluster == 0) {
    7b98:	ldr	r3, [r4, #32]
    7b9a:	cbnz	r3, 7bac <FatFile::write(void const*, unsigned int)+0xf8>
          if (!addCluster()) {
    7b9c:	mov	r0, r4
    7b9e:	bl	7096 <FatFile::addCluster()>
    7ba2:	cmp	r0, #0
    7ba4:	beq.n	7afe <FatFile::write(void const*, unsigned int)+0x4a>
          m_firstCluster = m_curCluster;
    7ba6:	ldr	r3, [r4, #16]
    7ba8:	str	r3, [r4, #32]
    7baa:	b.n	7b30 <FatFile::write(void const*, unsigned int)+0x7c>
          m_curCluster = m_firstCluster;
    7bac:	str	r3, [r4, #16]
    7bae:	b.n	7b30 <FatFile::write(void const*, unsigned int)+0x7c>
      n = m_vol->bytesPerSector() - sectorOffset;
    7bb0:	rsb	r7, r5, #512	@ 0x200
      if (n > nToWrite) {
    7bb4:	cmp	r7, r8
    7bb6:	it	cs
    7bb8:	movcs	r7, r8
      if (sectorOffset == 0 &&
    7bba:	cbnz	r5, 7c08 <FatFile::write(void const*, unsigned int)+0x154>
    7bbc:	ldr	r2, [r4, #20]
    7bbe:	ldr	r3, [r4, #28]
    7bc0:	cmp	r2, r3
    7bc2:	bcs.n	7c0c <FatFile::write(void const*, unsigned int)+0x158>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    7bc4:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7bc6:	tst.w	r3, #32
    7bca:	ite	ne
    7bcc:	movne	r2, #5
    7bce:	moveq	r2, #1
    return m_cache.prepare(sector, options);
    7bd0:	add.w	r0, ip, #40	@ 0x28
    7bd4:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7bd8:	cmp	r0, #0
    7bda:	beq.n	7afe <FatFile::write(void const*, unsigned int)+0x4a>
      memcpy(dst, src, n);
    7bdc:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7bde:	add	r5, r7
      memcpy(dst, src, n);
    7be0:	mov	r2, r7
    7be2:	mov	r1, r9
    7be4:	bl	a2f0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7be8:	cmp.w	r5, #512	@ 0x200
    7bec:	ldr	r0, [r4, #8]
    7bee:	bne.n	7bfa <FatFile::write(void const*, unsigned int)+0x146>
    return m_cache.sync();
    7bf0:	adds	r0, #40	@ 0x28
    7bf2:	bl	5778 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    7bf6:	cmp	r0, #0
    7bf8:	beq.n	7afe <FatFile::write(void const*, unsigned int)+0x4a>
    m_curPosition += n;
    7bfa:	ldr	r3, [r4, #20]
    src += n;
    7bfc:	add	r9, r7
    nToWrite -= n;
    7bfe:	sub.w	r8, r8, r7
    m_curPosition += n;
    7c02:	add	r3, r7
    7c04:	str	r3, [r4, #20]
    nToWrite -= n;
    7c06:	b.n	7ad4 <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7c08:	movs	r2, #1
    7c0a:	b.n	7bd0 <FatFile::write(void const*, unsigned int)+0x11c>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7c0c:	movs	r2, #5
    7c0e:	b.n	7bd0 <FatFile::write(void const*, unsigned int)+0x11c>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    7c10:	ldrb.w	r3, [ip, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    7c14:	mov.w	r2, r8, lsr #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    7c18:	subs	r3, r3, r7
      if (nSector > maxSectors) {
    7c1a:	cmp	r3, r2
    7c1c:	it	cs
    7c1e:	movcs	r3, r2
      n = nSector << m_vol->bytesPerSectorShift();
    7c20:	ldr.w	r2, [ip, #52]	@ 0x34
    return sector <= m_sector && m_sector < (sector + count);
    7c24:	cmp	r1, r2
    7c26:	mov.w	r7, r3, lsl #9
    7c2a:	bhi.n	7c40 <FatFile::write(void const*, unsigned int)+0x18c>
    7c2c:	add.w	lr, r3, r1
    7c30:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    7c32:	ittt	cc
    7c34:	movcc.w	r2, #4294967295
    m_status = 0;
    7c38:	strbcc.w	r5, [ip, #40]	@ 0x28
    m_sector = 0XFFFFFFFF;
    7c3c:	strcc.w	r2, [ip, #52]	@ 0x34
    return m_blockDev->writeSectors(sector, src, count);
    7c40:	ldr	r2, [r0, #0]
    7c42:	ldr	r5, [r2, #40]	@ 0x28
    7c44:	mov	r2, r9
    7c46:	blx	r5
    7c48:	b.n	7bf6 <FatFile::write(void const*, unsigned int)+0x142>
  } else if (FsDateTime::callback) {
    7c4a:	ldr	r3, [pc, #12]	@ (7c58 <FatFile::write(void const*, unsigned int)+0x1a4>)
    7c4c:	ldr	r3, [r3, #0]
    7c4e:	cmp	r3, #0
    7c50:	bne.w	7ae6 <FatFile::write(void const*, unsigned int)+0x32>
    7c54:	b.n	7aee <FatFile::write(void const*, unsigned int)+0x3a>
    7c56:	nop
    7c58:	.word	0x20011cec

00007c5c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    7c5c:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    7c5e:	cmp.w	r3, #256	@ 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    7c62:	push	{r4, r5, lr}
  if (n > 256) n = 256;
    7c64:	mov	r4, r3
    7c66:	it	cs
    7c68:	movcs.w	r4, #256	@ 0x100
  uint16_t *e = p + n;
    7c6c:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    7c70:	cmp	r1, r5
    7c72:	bcc.n	7c7a <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7c74:	subs	r3, r3, r4
    7c76:	str	r3, [r2, #0]
}
    7c78:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    7c7a:	ldrh.w	r0, [r1], #2
    7c7e:	cmp	r0, #0
    7c80:	bne.n	7c70 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    7c82:	ldr	r0, [r2, #4]
    7c84:	adds	r0, #1
    7c86:	str	r0, [r2, #4]
    7c88:	b.n	7c70 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

00007c8a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    7c8a:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    7c8c:	cmp	r3, #128	@ 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    7c8e:	push	{r4, r5, lr}
  if (n > 128) n = 128;
    7c90:	mov	r4, r3
    7c92:	it	cs
    7c94:	movcs	r4, #128	@ 0x80
  uint32_t *e = p + n;
    7c96:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    7c9a:	cmp	r1, r5
    7c9c:	bcc.n	7ca4 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7c9e:	subs	r3, r3, r4
    7ca0:	str	r3, [r2, #0]
}
    7ca2:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    7ca4:	ldr.w	r0, [r1], #4
    7ca8:	cmp	r0, #0
    7caa:	bne.n	7c9a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    7cac:	ldr	r0, [r2, #4]
    7cae:	adds	r0, #1
    7cb0:	str	r0, [r2, #4]
    7cb2:	b.n	7c9a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00007cb4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7cb4:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    7cb6:	add.w	r0, r0, #568	@ 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7cba:	cmp	r3, #2
    7cbc:	it	eq
    7cbe:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    7cc2:	b.w	57be <FsCache::prepare(unsigned long, unsigned char)>

00007cc6 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7cc6:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7cc8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ccc:	mov	r6, r0
    7cce:	mov	r4, r1
    7cd0:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7cd2:	bhi.n	7cdc <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    7cd4:	mov.w	r0, #4294967295
}
    7cd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7cdc:	ldr	r3, [r0, #28]
    7cde:	cmp	r3, r1
    7ce0:	bcc.n	7cd4 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    7ce2:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7ce4:	cmp	r3, #32
    7ce6:	bne.n	7d0e <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7ce8:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7cea:	movs	r2, #0
    7cec:	add.w	r1, r1, r4, lsr #7
    7cf0:	bl	7cb4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7cf4:	cmp	r0, #0
    7cf6:	beq.n	7cd4 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7cf8:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    7cfa:	and.w	r4, r4, #508	@ 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    7cfe:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    7d00:	ldr	r2, [r6, #28]
    7d02:	cmp	r3, r2
  return 1;
    7d04:	itet	ls
    7d06:	movls	r0, #1
    return 0;
    7d08:	movhi	r0, #0
  *value = next;
    7d0a:	strls	r3, [r7, #0]
  return 1;
    7d0c:	b.n	7cd8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    7d0e:	cmp	r3, #16
    7d10:	bne.n	7d2e <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7d12:	ubfx	r1, r1, #8, #8
    7d16:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7d18:	movs	r2, #0
    7d1a:	add	r1, r3
    7d1c:	bl	7cb4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7d20:	cmp	r0, #0
    7d22:	beq.n	7cd4 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7d24:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    7d26:	and.w	r4, r4, #510	@ 0x1fe
    7d2a:	ldrh	r3, [r0, r4]
    7d2c:	b.n	7d00 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    7d2e:	cmp	r3, #12
    7d30:	bne.n	7cd4 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    7d32:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7d36:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7d38:	movs	r2, #0
    index += index >> 1;
    7d3a:	uxtah	r8, r8, r1
    7d3e:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7d42:	ubfx	r8, r8, #9, #7
    7d46:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7d48:	mov	r1, r8
    7d4a:	bl	7cb4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7d4e:	cmp	r0, #0
    7d50:	beq.n	7cd4 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    7d52:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    7d56:	ldrb	r5, [r0, r3]
    index++;
    7d58:	adds	r3, #1
    if (index == m_bytesPerSector) {
    7d5a:	cmp.w	r3, #512	@ 0x200
    7d5e:	bne.n	7d72 <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    7d60:	movs	r2, #0
    7d62:	add.w	r1, r8, #1
    7d66:	mov	r0, r6
    7d68:	bl	7cb4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7d6c:	cmp	r0, #0
    7d6e:	beq.n	7cd4 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    7d70:	movs	r3, #0
    tmp |= pc[index] << 8;
    7d72:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7d74:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    7d76:	orr.w	r3, r5, r3, lsl #8
    7d7a:	sxth	r3, r3
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7d7c:	ite	mi
    7d7e:	ubfxmi	r3, r3, #4, #12
    7d82:	ubfxpl	r3, r3, #0, #12
    7d86:	b.n	7d00 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

00007d88 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7d88:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7d8a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d8e:	mov	r8, r0
    7d90:	mov	r4, r1
    7d92:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7d94:	bhi.n	7d9c <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    7d96:	movs	r0, #0
}
    7d98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7d9c:	ldr	r3, [r0, #28]
    7d9e:	cmp	r3, r1
    7da0:	bcc.n	7d96 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    7da2:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7da4:	cmp	r3, #32
    7da6:	bne.n	7dc4 <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7da8:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7daa:	movs	r2, #1
    7dac:	add.w	r1, r1, r4, lsr #7
    7db0:	bl	7cb4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7db4:	cmp	r0, #0
    7db6:	beq.n	7d96 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7db8:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    7dba:	and.w	r4, r4, #508	@ 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    7dbe:	str	r5, [r0, r4]
    return true;
    7dc0:	movs	r0, #1
    7dc2:	b.n	7d98 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    7dc4:	cmp	r3, #16
    7dc6:	bne.n	7de4 <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7dc8:	ubfx	r1, r1, #8, #8
    7dcc:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7dce:	movs	r2, #1
    7dd0:	add	r1, r3
    7dd2:	bl	7cb4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7dd6:	cmp	r0, #0
    7dd8:	beq.n	7d96 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7dda:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    7ddc:	and.w	r4, r4, #510	@ 0x1fe
    7de0:	strh	r5, [r0, r4]
    return true;
    7de2:	b.n	7dc0 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    7de4:	cmp	r3, #12
    7de6:	bne.n	7d96 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    7de8:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7dec:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7dee:	movs	r2, #1
    index += index >> 1;
    7df0:	uxtah	r7, r7, r1
    7df4:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7df6:	ubfx	r7, r7, #9, #7
    7dfa:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7dfc:	mov	r1, r7
    7dfe:	bl	7cb4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7e02:	cmp	r0, #0
    7e04:	beq.n	7d96 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index &= m_sectorMask;
    7e06:	ubfx	r3, r6, #0, #9
    if (cluster & 1) {
    7e0a:	ands.w	r4, r4, #1
    uint8_t tmp = value;
    7e0e:	uxtb	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    7e10:	add.w	r6, r0, r3
    if (cluster & 1) {
    7e14:	beq.n	7e22 <FatPartition::fatPut(unsigned long, unsigned long)+0x9a>
      tmp = (pc[index] & 0XF) | tmp << 4;
    7e16:	lsls	r2, r2, #4
    7e18:	ldrb	r1, [r0, r3]
    7e1a:	uxtb	r2, r2
    7e1c:	and.w	r1, r1, #15
    7e20:	orrs	r2, r1
    index++;
    7e22:	adds	r3, #1
    pc[index] = tmp;
    7e24:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    7e26:	cmp.w	r3, #512	@ 0x200
    7e2a:	bne.n	7e3c <FatPartition::fatPut(unsigned long, unsigned long)+0xb4>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7e2c:	movs	r2, #1
    7e2e:	mov	r0, r8
    7e30:	adds	r1, r7, r2
    7e32:	bl	7cb4 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7e36:	cmp	r0, #0
    7e38:	beq.n	7d96 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    7e3a:	movs	r3, #0
    tmp = value >> 4;
    7e3c:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7e40:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    7e42:	cbnz	r4, 7e4e <FatPartition::fatPut(unsigned long, unsigned long)+0xc6>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7e44:	ldrb	r3, [r0, r3]
    7e46:	bic.w	r3, r3, #15
    7e4a:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    7e4e:	strb	r5, [r2, #0]
    return true;
    7e50:	b.n	7dc0 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

00007e52 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7e52:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    7e56:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7e58:	mov	r5, r0
    7e5a:	mov	r6, r1
    7e5c:	mov	r8, r2
  if (m_allocSearchStart < current) {
    7e5e:	cmp	r4, r1
    7e60:	bcs.n	7e72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x20>
    find = current;
    7e62:	mov	r4, r1
    setStart = false;
    7e64:	movs	r7, #0
    find++;
    7e66:	adds	r4, #1
    if (find > m_lastCluster) {
    7e68:	ldr	r3, [r5, #28]
    7e6a:	cmp	r3, r4
    7e6c:	bcs.n	7e76 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      if (setStart) {
    7e6e:	cbnz	r7, 7ec0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6e>
      find = m_allocSearchStart;
    7e70:	ldr	r4, [r5, #12]
    setStart = true;
    7e72:	movs	r7, #1
    7e74:	b.n	7e66 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    if (find == current) {
    7e76:	cmp	r6, r4
    7e78:	beq.n	7ec0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6e>
    int8_t fg = fatGet(find, &f);
    7e7a:	add	r2, sp, #4
    7e7c:	mov	r1, r4
    7e7e:	mov	r0, r5
    7e80:	bl	7cc6 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7e84:	cmp	r0, #0
    7e86:	blt.n	7ec0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6e>
    if (fg && f == 0) {
    7e88:	beq.n	7e66 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    7e8a:	ldr	r3, [sp, #4]
    7e8c:	cmp	r3, #0
    7e8e:	bne.n	7e66 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    7e90:	cbz	r7, 7e94 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x42>
    m_allocSearchStart = find;
    7e92:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    7e94:	mvn.w	r2, #4026531840	@ 0xf0000000
    7e98:	mov	r1, r4
    7e9a:	mov	r0, r5
    7e9c:	bl	7d88 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    7ea0:	mov	r7, r0
    7ea2:	cbz	r0, 7ec0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6e>
  if (current) {
    7ea4:	cbnz	r6, 7eb2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    if (m_freeClusterCount >= 0) {
    7ea6:	ldr	r3, [r5, #36]	@ 0x24
    7ea8:	cmp	r3, #0
    7eaa:	bge.n	7eca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
  *next = find;
    7eac:	str.w	r4, [r8]
  return true;
    7eb0:	b.n	7ec2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
    if (!fatPut(current, find)) {
    7eb2:	mov	r2, r4
    7eb4:	mov	r1, r6
    7eb6:	mov	r0, r5
    7eb8:	bl	7d88 <FatPartition::fatPut(unsigned long, unsigned long)>
    7ebc:	cmp	r0, #0
    7ebe:	bne.n	7ea6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
  return false;
    7ec0:	movs	r7, #0
}
    7ec2:	mov	r0, r7
    7ec4:	add	sp, #8
    7ec6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m_freeClusterCount += change;
    7eca:	subs	r3, #1
    7ecc:	str	r3, [r5, #36]	@ 0x24
    7ece:	b.n	7eac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5a>

00007ed0 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    7ed0:	push	{r0, r1, r4, r5, r6, lr}
    7ed2:	mov	r5, r0
    7ed4:	mov	r4, r1
    fg = fatGet(cluster, &next);
    7ed6:	add	r2, sp, #4
    7ed8:	mov	r1, r4
    7eda:	mov	r0, r5
    7edc:	bl	7cc6 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7ee0:	subs	r6, r0, #0
    7ee2:	blt.n	7f10 <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    7ee4:	movs	r2, #0
    7ee6:	mov	r1, r4
    7ee8:	mov	r0, r5
    7eea:	bl	7d88 <FatPartition::fatPut(unsigned long, unsigned long)>
    7eee:	cbz	r0, 7f10 <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    7ef0:	ldr	r3, [r5, #36]	@ 0x24
    7ef2:	cmp	r3, #0
      m_freeClusterCount += change;
    7ef4:	itt	ge
    7ef6:	addge	r3, #1
    7ef8:	strge	r3, [r5, #36]	@ 0x24
    if (cluster < m_allocSearchStart) {
    7efa:	ldr	r3, [r5, #12]
    7efc:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    7efe:	itt	hi
    7f00:	addhi.w	r4, r4, #4294967295
    7f04:	strhi	r4, [r5, #12]
    cluster = next;
    7f06:	ldr	r4, [sp, #4]
  } while (fg);
    7f08:	cmp	r6, #0
    7f0a:	bne.n	7ed6 <FatPartition::freeChain(unsigned long)+0x6>
}
    7f0c:	add	sp, #8
    7f0e:	pop	{r4, r5, r6, pc}
  return false;
    7f10:	movs	r0, #0
    7f12:	b.n	7f0c <FatPartition::freeChain(unsigned long)+0x3c>

00007f14 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    7f14:	push	{r4, r5, r6, r7, lr}
    7f16:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    7f18:	ldr	r0, [r0, #36]	@ 0x24
int32_t FatPartition::freeClusterCount() {
    7f1a:	sub	sp, #20
  if (m_freeClusterCount >= 0) {
    7f1c:	cmp	r0, #0
    7f1e:	bge.n	7f8e <FatPartition::freeClusterCount()+0x7a>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    7f20:	ldrb	r3, [r4, #7]
    7f22:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    7f24:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    7f26:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    7f28:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    7f2c:	beq.n	7f92 <FatPartition::freeClusterCount()+0x7e>
    return m_status & CACHE_STATUS_DIRTY;
    7f2e:	ldrb.w	r3, [r4, #568]	@ 0x238
    if (isDirty() && !sync()) {
    7f32:	lsls	r3, r3, #31
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
  state.clusters_to_do = m_lastCluster + 1;
    7f34:	strd	r6, r5, [sp, #8]
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    7f38:	ldr	r5, [r4, #16]
    7f3a:	bmi.n	7f96 <FatPartition::freeClusterCount()+0x82>
    m_status = 0;
    7f3c:	movs	r3, #0
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7f3e:	ldr	r0, [r4, #0]
    return m_buffer;
    7f40:	add.w	r2, r4, #584	@ 0x248
    7f44:	ldr	r1, [r4, #24]
    m_status = 0;
    7f46:	strb.w	r3, [r4, #568]	@ 0x238
    m_sector = 0XFFFFFFFF;
    7f4a:	mov.w	r3, #4294967295
    7f4e:	add	r6, sp, #8
    7f50:	str.w	r3, [r4, #580]	@ 0x244
  if (fatType() == FAT_TYPE_FAT32) {
    7f54:	ldrb	r3, [r4, #7]
    7f56:	cmp	r3, #32
    7f58:	ldr	r3, [r0, #0]
    7f5a:	bne.n	7fa8 <FatPartition::freeClusterCount()+0x94>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7f5c:	str	r6, [sp, #4]
    7f5e:	ldr	r6, [pc, #80]	@ (7fb0 <FatPartition::freeClusterCount()+0x9c>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7f60:	str	r6, [sp, #0]
    7f62:	ldr	r6, [r3, #24]
    7f64:	mov	r3, r5
    7f66:	blx	r6
    7f68:	cbz	r0, 7fa2 <FatPartition::freeClusterCount()+0x8e>
  }

  setFreeClusterCount(state.free_count);
    7f6a:	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    7f6c:	str	r0, [r4, #36]	@ 0x24
  return state.free_count;
    7f6e:	b.n	7f8e <FatPartition::freeClusterCount()+0x7a>
      int8_t fg = fatGet(i, &c);
    7f70:	add	r2, sp, #8
    7f72:	mov	r1, r7
    7f74:	mov	r0, r4
    7f76:	bl	7cc6 <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    7f7a:	cmp	r0, #0
    7f7c:	blt.n	7fa2 <FatPartition::freeClusterCount()+0x8e>
      if (fg && c == 0) {
    7f7e:	beq.n	7f86 <FatPartition::freeClusterCount()+0x72>
    7f80:	ldr	r3, [sp, #8]
    7f82:	cbnz	r3, 7f86 <FatPartition::freeClusterCount()+0x72>
        free++;
    7f84:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    7f86:	adds	r7, #1
    7f88:	cmp	r7, r6
    7f8a:	bcc.n	7f70 <FatPartition::freeClusterCount()+0x5c>
    return free;
    7f8c:	mov	r0, r5
}
    7f8e:	add	sp, #20
    7f90:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    7f92:	movs	r7, #2
    7f94:	b.n	7f88 <FatPartition::freeClusterCount()+0x74>
    if (isDirty() && !sync()) {
    7f96:	add.w	r0, r4, #568	@ 0x238
    7f9a:	bl	5778 <FsCache::sync()>
    7f9e:	cmp	r0, #0
    7fa0:	bne.n	7f3c <FatPartition::freeClusterCount()+0x28>
        return -1;
    7fa2:	mov.w	r0, #4294967295
    7fa6:	b.n	7f8e <FatPartition::freeClusterCount()+0x7a>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7fa8:	str	r6, [sp, #4]
    7faa:	ldr	r6, [pc, #8]	@ (7fb4 <FatPartition::freeClusterCount()+0xa0>)
    7fac:	b.n	7f60 <FatPartition::freeClusterCount()+0x4c>
    7fae:	nop
    7fb0:	.word	0x00007c8b
    7fb4:	.word	0x00007c5d

00007fb8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7fb8:	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    7fba:	movs	r3, #1
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7fbc:	mov	r5, r2
  m_fatType = 0;
    7fbe:	movs	r2, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7fc0:	mov	r4, r0
  m_allocSearchStart = 1;
    7fc2:	str	r3, [r0, #12]
    m_sector = 0XFFFFFFFF;
    7fc4:	mov.w	r3, #4294967295
  m_blockDev = dev;
    7fc8:	str	r1, [r0, #0]
  m_fatType = 0;
    7fca:	strb	r2, [r0, #7]
    m_blockDev = blockDev;
    7fcc:	str	r1, [r0, #44]	@ 0x2c
    m_status = 0;
    7fce:	strb.w	r2, [r0, #40]	@ 0x28
    m_sector = 0XFFFFFFFF;
    7fd2:	str	r3, [r0, #52]	@ 0x34
    m_blockDev = blockDev;
    7fd4:	str.w	r1, [r0, #572]	@ 0x23c
    m_status = 0;
    7fd8:	strb.w	r2, [r0, #568]	@ 0x238
    m_sector = 0XFFFFFFFF;
    7fdc:	str.w	r3, [r0, #580]	@ 0x244
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    7fe0:	cbz	r5, 8014 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x5c>
    if (part > 4) {
    7fe2:	cmp	r5, #4
    7fe4:	bls.n	7fea <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    7fe6:	movs	r0, #0
}
    7fe8:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    7fea:	add.w	r5, r5, #268435456	@ 0x10000000
    return m_cache.prepare(sector, options);
    7fee:	mov	r1, r2
    7ff0:	adds	r0, #40	@ 0x28
    7ff2:	subs	r5, #1
    7ff4:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
    7ff8:	add.w	r3, r0, #446	@ 0x1be
    7ffc:	lsls	r2, r5, #4
    7ffe:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    8002:	cmp	r0, #0
    8004:	beq.n	7fe6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
    8006:	ldrb	r1, [r5, #4]
    8008:	cmp	r1, #0
    800a:	beq.n	7fe6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
    800c:	ldrb	r3, [r3, r2]
    800e:	lsls	r3, r3, #25
    8010:	bne.n	7fe6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
  return *reinterpret_cast<const uint32_t*>(src);
    8012:	ldr	r5, [r5, #8]
    8014:	movs	r2, #0
    8016:	mov	r1, r5
    8018:	add.w	r0, r4, #40	@ 0x28
    801c:	bl	57be <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    8020:	cmp	r0, #0
    8022:	beq.n	7fe6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
    8024:	ldrh.w	r3, [r0, #11]
    8028:	cmp.w	r3, #512	@ 0x200
    802c:	bne.n	7fe6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
  m_fatCount = bpb->fatCount;
    802e:	ldrb	r3, [r0, #16]
    8030:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    8032:	subs	r3, #1
    8034:	cmp	r3, #1
    8036:	bhi.n	7fe6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    8038:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    803a:	movs	r6, #9
    803c:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    803e:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    8040:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    8042:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8044:	movs	r3, #1
    8046:	cmp	r1, r3
    8048:	bne.n	80b2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfa>
    804a:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    804c:	ldrh	r3, [r0, #22]
    804e:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    8050:	cbnz	r3, 8056 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x9e>
    8052:	ldr	r3, [r0, #36]	@ 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    8054:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    8056:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    8058:	ldrh.w	r1, [r0, #17]
    805c:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    805e:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    8060:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    8062:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    8064:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    8066:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    8068:	addw	r1, r1, #511	@ 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    806c:	mla	r3, r6, r7, r3
    8070:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    8072:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    8076:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    807a:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    807c:	cbnz	r1, 8080 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xc8>
  return *reinterpret_cast<const uint32_t*>(src);
    807e:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    8080:	subs	r5, r5, r3
    8082:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    8084:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    8086:	adds	r3, r5, #1
    8088:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    808a:	mov.w	r3, #4294967295
    808e:	str	r3, [r4, #36]	@ 0x24
  if (clusterCount < 4085) {
    8090:	movw	r3, #4084	@ 0xff4
    8094:	cmp	r5, r3
    8096:	bls.n	80c4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  } else if (clusterCount < 65525) {
    8098:	movw	r3, #65524	@ 0xfff4
    809c:	cmp	r5, r3
    809e:	bls.n	80c8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
    80a0:	ldr	r3, [r0, #44]	@ 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    80a2:	str	r3, [r4, #32]
    80a4:	movs	r3, #32
  return true;
    80a6:	movs	r0, #1
    m_fatType = 12;
    80a8:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    80aa:	str	r6, [r4, #48]	@ 0x30
    80ac:	str.w	r6, [r4, #576]	@ 0x240
  return true;
    80b0:	b.n	7fe8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x30>
    if (tmp == 0) {
    80b2:	subs	r6, #1
    80b4:	bne.n	80ba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x102>
    80b6:	strb	r2, [r4, #6]
    80b8:	b.n	7fe6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x2e>
    m_sectorsPerClusterShift++;
    80ba:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    80bc:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    80be:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    80c0:	uxtb	r3, r3
    80c2:	b.n	8046 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x8e>
    80c4:	movs	r3, #12
    80c6:	b.n	80a6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xee>
    80c8:	movs	r3, #16
    80ca:	b.n	80a6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xee>

000080cc <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    80cc:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    80ce:	add.w	r4, r0, #1096	@ 0x448
    80d2:	sub	sp, #40	@ 0x28
  FatFile() {}
    80d4:	movs	r3, #0
    80d6:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    80d8:	add	r0, sp, #4
    80da:	mov	r1, r4
    80dc:	str	r3, [sp, #4]
    80de:	bl	7664 <FatFile::open(FatFile*, char const*, int)>
    80e2:	mov	r6, r0
    80e4:	cbz	r0, 8102 <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    80e6:	ldrb.w	r3, [sp, #4]
    80ea:	ands.w	r3, r3, #112	@ 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    80ee:	itett	ne
    80f0:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    80f2:	moveq	r6, r3
  m_vwd = dir;
    80f4:	ldmiane	r5!, {r0, r1, r2, r3}
    80f6:	stmiane	r4!, {r0, r1, r2, r3}
    80f8:	itttt	ne
    80fa:	ldmiane	r5!, {r0, r1, r2, r3}
    80fc:	stmiane	r4!, {r0, r1, r2, r3}
    80fe:	ldrne	r3, [r5, #0]
    8100:	strne	r3, [r4, #0]
}
    8102:	mov	r0, r6
    8104:	add	sp, #40	@ 0x28
    8106:	pop	{r4, r5, r6, pc}

00008108 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    8108:	subs	r1, r0, #1
    810a:	add.w	r3, r0, #10
    uint8_t sum = 0;
    810e:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8110:	lsls	r2, r0, #7
    8112:	orr.w	r2, r2, r0, lsr #1
    8116:	ldrb.w	r0, [r1, #1]!
    811a:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    811e:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8120:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    8122:	bne.n	8110 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    8124:	bx	lr

00008126 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8126:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    812a:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    812c:	sub	sp, #52	@ 0x34
    812e:	mov	r6, r2
    8130:	mov	r7, r0
    8132:	mov	r9, r1
    8134:	mov	r8, r3
  FatFile dir = *this;
    8136:	add	r4, sp, #12
    8138:	ldmia	r5!, {r0, r1, r2, r3}
    813a:	stmia	r4!, {r0, r1, r2, r3}
    813c:	ldmia	r5!, {r0, r1, r2, r3}
    813e:	stmia	r4!, {r0, r1, r2, r3}
    8140:	ldr	r3, [r5, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8142:	movs	r5, #1
  FatFile dir = *this;
    8144:	str	r3, [r4, #0]
    next = begin;
    8146:	ldr	r3, [r6, #0]
    8148:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    814a:	movs	r3, #0
    814c:	strh	r3, [r6, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    814e:	cmp	r5, r8
    8150:	bls.n	8156 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    8152:	movs	r0, #1
    8154:	b.n	8168 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8156:	sub.w	r1, r9, r5
    815a:	add	r0, sp, #12
    815c:	uxth	r1, r1
    815e:	bl	6eb8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    8162:	mov	sl, r0
    8164:	cbnz	r0, 816e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>
        return false;
    8166:	movs	r0, #0

 fail:
  return false;
}
    8168:	add	sp, #52	@ 0x34
    816a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    816e:	mov.w	fp, #0
      uint16_t u = getLfnChar(ldir, i);
    8172:	uxtb.w	r2, fp
    8176:	mov	r1, sl
    8178:	mov	r0, r7
    817a:	bl	6ed2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    817e:	ldrh	r2, [r6, #12]
    8180:	mov	r4, r0
    8182:	cbnz	r2, 8194 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6e>
    8184:	ldrd	r1, r2, [r6, #4]
    8188:	cmp	r1, r2
    818a:	bne.n	8194 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6e>
        return u == 0;
    818c:	clz	r0, r0
    8190:	lsrs	r0, r0, #5
    8192:	b.n	8168 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    8194:	mov	r0, r6
    8196:	bl	58b4 <FsName::get16()>
    819a:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    819c:	mov	r0, r4
    819e:	bl	580c <toUpcase(unsigned short)>
    81a2:	mov	r4, r0
    81a4:	ldr	r0, [sp, #4]
    81a6:	bl	580c <toUpcase(unsigned short)>
    81aa:	cmp	r4, r0
    81ac:	bne.n	8166 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    81ae:	add.w	fp, fp, #1
    81b2:	cmp.w	fp, #13
    81b6:	bne.n	8172 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4c>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    81b8:	adds	r5, #1
    81ba:	uxtb	r5, r5
    81bc:	b.n	814e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

000081be <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    81be:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    81c2:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    81c4:	sub	sp, #52	@ 0x34
    81c6:	mov	r4, r2
    81c8:	mov	r9, r1
    81ca:	mov	r7, r3
  FatFile dir = *this;
    81cc:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    81ce:	mov.w	sl, #15
  FatFile dir = *this;
    81d2:	ldmia	r5!, {r0, r1, r2, r3}
    81d4:	stmia	r6!, {r0, r1, r2, r3}
    81d6:	ldmia	r5!, {r0, r1, r2, r3}
    81d8:	stmia	r6!, {r0, r1, r2, r3}
    81da:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    81dc:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    81e0:	movs	r5, #1
  FatFile dir = *this;
    81e2:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    81e4:	bl	8108 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    81e8:	movs	r6, #0
    next = begin;
    81ea:	ldr	r3, [r4, #0]
    81ec:	mov	r8, r0
    81ee:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    81f0:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    81f2:	cmp	r5, r7
    81f4:	bls.n	81fe <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    81f6:	movs	r0, #1

 fail:
  return false;
}
    81f8:	add	sp, #52	@ 0x34
    81fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    81fe:	sub.w	r1, r9, r5
    8202:	add	r0, sp, #12
    8204:	uxth	r1, r1
    8206:	bl	6eb8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    820a:	cmp	r0, #0
    820c:	beq.n	81f8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    820e:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8210:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    8212:	mov.w	r1, #0
    8216:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    821a:	ldrb.w	r3, [r2, #40]	@ 0x28
    821e:	orr.w	r3, r3, #1
    8222:	strb.w	r3, [r2, #40]	@ 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8226:	ite	eq
    8228:	orreq.w	r3, r5, #64	@ 0x40
    822c:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    822e:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    8232:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8234:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    8236:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    823a:	strh	r1, [r0, #26]
    return !ls && next == end;
    823c:	ldrh	r0, [r4, #12]
    823e:	cbnz	r0, 826a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xac>
    8240:	ldrd	r2, r3, [r4, #4]
    8244:	cmp	r2, r3
    8246:	bne.n	826a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xac>
        cp = fc++ ? 0XFFFF : 0;
    8248:	cbz	r6, 8276 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    824a:	adds	r6, #1
    824c:	movw	r0, #65535	@ 0xffff
    8250:	uxtb	r6, r6
  if (i < 5) {
    8252:	cmp	r1, #4
    8254:	bhi.n	827a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    8256:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    825a:	adds	r1, #1
    825c:	add.w	fp, fp, #2
    8260:	cmp	r1, #13
    8262:	bne.n	823c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8264:	adds	r5, #1
    8266:	uxtb	r5, r5
    8268:	b.n	81f2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    826a:	mov	r0, r4
    826c:	str	r1, [sp, #4]
    826e:	bl	58b4 <FsName::get16()>
    8272:	ldr	r1, [sp, #4]
    8274:	b.n	8252 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
        cp = fc++ ? 0XFFFF : 0;
    8276:	movs	r6, #1
    8278:	b.n	8252 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    827a:	cmp	r1, #10
    827c:	ite	ls
    827e:	strhls.w	r0, [fp, #3]
    8282:	strhhi.w	r0, [fp, #5]
}
    8286:	b.n	825a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00008288 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    8288:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    828a:	mov.w	r1, #538976288	@ 0x20202020
  const char* ptr = fname->begin;
    828e:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    8292:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    8296:	str.w	r1, [r0, #22]
  const char* end = fname->end;
    829a:	ldr	r6, [r0, #8]
    fname->sfn[k] = ' ';
    829c:	str	r1, [r2, #4]
    829e:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    82a2:	ldrb	r2, [r3, #0]
    82a4:	subs	r2, #46	@ 0x2e
    82a6:	it	ne
    82a8:	movne	r2, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    82aa:	mov	r7, r3
    82ac:	ldrb.w	r1, [r3], #1
    82b0:	cmp	r1, #46	@ 0x2e
    82b2:	beq.n	82aa <FatFile::makeSFN(FatLfn_t*)+0x22>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    82b4:	subs	r3, r6, #1
    82b6:	cmp	r3, r7
    82b8:	mov	lr, r3
    82ba:	bls.n	82c4 <FatFile::makeSFN(FatLfn_t*)+0x3c>
    82bc:	ldrb.w	r1, [r3], #-1
    82c0:	cmp	r1, #46	@ 0x2e
    82c2:	bne.n	82b6 <FatFile::makeSFN(FatLfn_t*)+0x2e>
    82c4:	movs	r1, #0
    82c6:	mov.w	ip, #7
    82ca:	mov.w	r9, #8
    82ce:	mov	r4, r1
    82d0:	mov	r8, r1
    82d2:	b.n	835a <FatFile::makeSFN(FatLfn_t*)+0xd2>

  for (; ptr < end; ptr++) {
    c = *ptr;
    82d4:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    82d6:	cmp	r3, #46	@ 0x2e
    82d8:	bne.n	82e4 <FatFile::makeSFN(FatLfn_t*)+0x5c>
    82da:	cmp	lr, r7
    82dc:	beq.n	8384 <FatFile::makeSFN(FatLfn_t*)+0xfc>
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
          continue;
        }
        c = '_';
    82de:	movs	r3, #95	@ 0x5f
        is83 = false;
    82e0:	movs	r2, #0
    82e2:	b.n	8300 <FatFile::makeSFN(FatLfn_t*)+0x78>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    82e4:	cmp	r3, #34	@ 0x22
    82e6:	beq.n	82de <FatFile::makeSFN(FatLfn_t*)+0x56>
    82e8:	cmp	r3, #124	@ 0x7c
    82ea:	beq.n	82de <FatFile::makeSFN(FatLfn_t*)+0x56>
    82ec:	sub.w	r5, r3, #91	@ 0x5b
    82f0:	cmp	r5, #2
    82f2:	bls.n	82de <FatFile::makeSFN(FatLfn_t*)+0x56>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    82f4:	sub.w	r5, r3, #42	@ 0x2a
    82f8:	cmp	r5, #5
    82fa:	bhi.n	8306 <FatFile::makeSFN(FatLfn_t*)+0x7e>
    82fc:	cmp	r3, #45	@ 0x2d
    82fe:	bne.n	82de <FatFile::makeSFN(FatLfn_t*)+0x56>
      }
      if (i > in) {
    8300:	cmp	r4, ip
    8302:	bhi.n	8326 <FatFile::makeSFN(FatLfn_t*)+0x9e>
    8304:	b.n	8348 <FatFile::makeSFN(FatLfn_t*)+0xc0>
    8306:	sub.w	r5, r3, #58	@ 0x3a
    830a:	cmp	r5, #5
    830c:	bls.n	82de <FatFile::makeSFN(FatLfn_t*)+0x56>
      if (sfnReservedChar(c)) {
    830e:	sub.w	r5, r3, #33	@ 0x21
    8312:	cmp	r5, #93	@ 0x5d
    8314:	bls.n	8322 <FatFile::makeSFN(FatLfn_t*)+0x9a>
        if ((c & 0XC0) == 0X80) {
    8316:	and.w	r3, r3, #192	@ 0xc0
    831a:	cmp	r3, #128	@ 0x80
    831c:	bne.n	82de <FatFile::makeSFN(FatLfn_t*)+0x56>
        is83 = false;
    831e:	movs	r2, #0
    8320:	b.n	8358 <FatFile::makeSFN(FatLfn_t*)+0xd0>
      if (i > in) {
    8322:	cmp	r4, ip
    8324:	bls.n	8336 <FatFile::makeSFN(FatLfn_t*)+0xae>
        is83 = false;
        if (in == 10 || ptr > dot) {
    8326:	cmp.w	ip, #10
    832a:	beq.n	8390 <FatFile::makeSFN(FatLfn_t*)+0x108>
    832c:	cmp	lr, r7
    832e:	bcc.n	8390 <FatFile::makeSFN(FatLfn_t*)+0x108>
         // Done - extension longer than three characters or no extension.
          break;
        }
        // Skip to dot.
        ptr = dot - 1;
    8330:	add.w	r7, lr, #4294967295
        continue;
    8334:	b.n	831e <FatFile::makeSFN(FatLfn_t*)+0x96>
      }
      if (isLower(c)) {
    8336:	sub.w	r5, r3, #97	@ 0x61
    833a:	cmp	r5, #25
    833c:	bhi.n	8376 <FatFile::makeSFN(FatLfn_t*)+0xee>
        c += 'A' - 'a';
    833e:	subs	r3, #32
        lc |= bit;
    8340:	orr.w	r1, r9, r1
        c += 'A' - 'a';
    8344:	uxtb	r3, r3
        lc |= bit;
    8346:	uxtb	r1, r1
      } else if (isUpper(c)) {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    8348:	adds	r5, r4, #1
    834a:	add	r4, r0
    834c:	uxtb	r5, r5
    834e:	strb	r3, [r4, #22]
      if (i < 7) {
    8350:	cmp	r5, #6
      fname->sfn[i++] = c;
    8352:	mov	r4, r5
        fname->seqPos = i;
    8354:	it	ls
    8356:	strbls	r5, [r0, #20]
  for (; ptr < end; ptr++) {
    8358:	adds	r7, #1
    835a:	cmp	r7, r6
    835c:	bcc.n	82d4 <FatFile::makeSFN(FatLfn_t*)+0x4c>
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    835e:	ldrb	r3, [r0, #22]
    8360:	cmp	r3, #32
    8362:	beq.n	83a6 <FatFile::makeSFN(FatLfn_t*)+0x11e>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    8364:	cbz	r2, 8394 <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    8366:	tst.w	r8, r1
    836a:	it	ne
    836c:	movne	r1, #2
    836e:	strb	r1, [r0, #21]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    8370:	movs	r0, #1

 fail:
  return false;
}
    8372:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      } else if (isUpper(c)) {
    8376:	sub.w	r5, r3, #65	@ 0x41
    837a:	cmp	r5, #25
        uc |= bit;
    837c:	it	ls
    837e:	orrls.w	r8, r9, r8
    8382:	b.n	8348 <FatFile::makeSFN(FatLfn_t*)+0xc0>
      in = 10;  // Max index for full 8.3 name.
    8384:	mov.w	ip, #10
      i = 8;    // Place for extension.
    8388:	movs	r4, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    838a:	mov.w	r9, #16
    838e:	b.n	8358 <FatFile::makeSFN(FatLfn_t*)+0xd0>
        is83 = false;
    8390:	movs	r2, #0
    8392:	b.n	835e <FatFile::makeSFN(FatLfn_t*)+0xd6>
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8394:	movs	r3, #1
    fname->sfn[fname->seqPos] = '~';
    8396:	movs	r2, #126	@ 0x7e
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8398:	strb	r3, [r0, #21]
    fname->sfn[fname->seqPos] = '~';
    839a:	ldrb	r3, [r0, #20]
    839c:	add	r3, r0
    839e:	strb	r2, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    83a0:	movs	r2, #49	@ 0x31
    83a2:	strb	r2, [r3, #23]
    83a4:	b.n	8370 <FatFile::makeSFN(FatLfn_t*)+0xe8>
  return false;
    83a6:	movs	r0, #0
    83a8:	b.n	8372 <FatFile::makeSFN(FatLfn_t*)+0xea>
	...

000083ac <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    83ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83b0:	mov	r6, r0
    83b2:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    83b4:	ldrb	r7, [r1, #20]
    83b6:	movs	r4, #98	@ 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    83b8:	mov.w	sl, #0
    83bc:	ldr.w	r8, [pc, #136]	@ 8448 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    83c0:	add.w	r9, r1, #22
    if (pos > 3) {
    83c4:	cmp	r7, #3
    83c6:	ldr.w	r3, [r8]
    83ca:	mov.w	r1, #4
    83ce:	it	cs
    83d0:	movcs	r7, #3
    hex += millis();
    83d2:	add	r3, sl
    83d4:	add.w	r2, r7, #27
    83d8:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    83dc:	uxtab	r2, r5, r2
      uint8_t h = hex & 0XF;
    83e0:	and.w	r3, sl, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    83e4:	subs	r1, #1
      hex >>= 4;
    83e6:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    83ea:	cmp	r3, #9
    83ec:	ite	ls
    83ee:	addls	r3, #48	@ 0x30
    83f0:	addhi	r3, #55	@ 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    83f2:	ands.w	r1, r1, #255	@ 0xff
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    83f6:	strb.w	r3, [r2, #-1]!
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    83fa:	bne.n	83e0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x34>
    fname->sfn[pos] = '~';
    83fc:	adds	r3, r5, r7
    83fe:	movs	r2, #126	@ 0x7e
    seekSet(0);
    8400:	mov	r0, r6
    8402:	strb	r2, [r3, #22]
    8404:	bl	7396 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    8408:	movs	r1, #1
    840a:	mov	r0, r6
    840c:	bl	7358 <FatFile::readDirCache(bool)>
      if (!dir) {
    8410:	mov	r1, r0
    8412:	cbnz	r0, 8420 <FatFile::makeUniqueSfn(FatLfn_t*)+0x74>
        if (!getError()) {
    8414:	ldrb	r0, [r6, #1]
    8416:	clz	r0, r0
    841a:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    841c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    8420:	ldrb	r3, [r0, #0]
    8422:	cbz	r3, 8442 <FatFile::makeUniqueSfn(FatLfn_t*)+0x96>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8424:	ldrb	r3, [r0, #11]
    8426:	lsls	r3, r3, #28
    8428:	bmi.n	8408 <FatFile::makeUniqueSfn(FatLfn_t*)+0x5c>
    842a:	movs	r2, #11
    842c:	mov	r0, r9
    842e:	bl	ebd6 <memcmp>
    8432:	cmp	r0, #0
    8434:	bne.n	8408 <FatFile::makeUniqueSfn(FatLfn_t*)+0x5c>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8436:	subs	r0, r4, #1
    8438:	ands.w	r4, r0, #255	@ 0xff
    843c:	bne.n	83c4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    843e:	mov	r0, r4
 fail:
    8440:	b.n	841c <FatFile::makeUniqueSfn(FatLfn_t*)+0x70>
  return true;
    8442:	movs	r0, #1
    8444:	b.n	841c <FatFile::makeUniqueSfn(FatLfn_t*)+0x70>
    8446:	nop
    8448:	.word	0x20012864

0000844c <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    844c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8450:	sub	sp, #52	@ 0x34
    8452:	mov	r5, r1
    8454:	mov	r6, r2
    8456:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    8458:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    845a:	str	r0, [sp, #32]
  auto vol = dirFile->m_vol;
    845c:	str	r3, [sp, #24]

  if (!dirFile->isDir() || isOpen()) {
    845e:	ldrb	r3, [r1, #0]
    8460:	tst.w	r3, #112	@ 0x70
    8464:	bne.n	846e <FatFile::open(FatFile*, FatLfn_t*, int)+0x22>
    goto fail;
  }
  return true;

 fail:
  return false;
    8466:	movs	r0, #0
}
    8468:	add	sp, #52	@ 0x34
    846a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    846e:	ldr	r3, [sp, #32]
    8470:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    8472:	cmp	r3, #0
    8474:	bne.n	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
  nameOrd = (fname->len + 12)/13;
    8476:	ldr	r3, [r2, #16]
    8478:	movs	r2, #13
  uint8_t checksum = 0;
    847a:	mov.w	sl, #0
    seekSet(0);
    847e:	movs	r1, #0
  nameOrd = (fname->len + 12)/13;
    8480:	adds	r3, #12
  uint8_t order = 0;
    8482:	mov	r9, sl
  uint8_t freeFound = 0;
    8484:	mov	r4, sl
  bool fnameFound = false;
    8486:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    8488:	udiv	r3, r3, r2
    848c:	uxtb	r3, r3
    848e:	str	r3, [sp, #28]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8490:	ldrb	r3, [r6, #21]
    8492:	lsls	r0, r3, #30
    8494:	mov	r0, r5
    8496:	itett	ne
    8498:	ldrne	r3, [sp, #28]
    849a:	moveq	r3, #1
    849c:	addne.w	r8, r3, #1
    84a0:	uxtbne.w	r3, r8
  uint8_t lfnOrd = 0;
    84a4:	mov	r8, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    84a6:	str	r3, [sp, #12]
    84a8:	bl	7396 <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    84ac:	add.w	r3, r6, #22
  uint16_t freeIndex = 0;
    84b0:	str.w	sl, [sp, #20]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    84b4:	str	r3, [sp, #36]	@ 0x24
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    84b6:	ldr	r7, [r5, #20]
    dir = dirFile->readDirCache();
    84b8:	movs	r1, #0
    84ba:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    84bc:	ubfx	r7, r7, #5, #16
    dir = dirFile->readDirCache();
    84c0:	bl	7358 <FatFile::readDirCache(bool)>
    if (!dir) {
    84c4:	cmp	r0, #0
    84c6:	bne.n	858c <FatFile::open(FatFile*, FatLfn_t*, int)+0x140>
      if (dirFile->getError()) {
    84c8:	ldrb	r3, [r5, #1]
    84ca:	cmp	r3, #0
    84cc:	bne.n	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    84ce:	ldr	r3, [sp, #16]
    84d0:	lsls	r2, r3, #22
    84d2:	bpl.n	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    84d4:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    84d8:	subs	r3, #1
    84da:	cmp	r3, #1
    84dc:	bhi.n	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
  if (freeFound == 0) {
    84de:	ldr	r3, [sp, #20]
    84e0:	cmp	r4, #0
    84e2:	it	ne
    84e4:	movne	r7, r3
  while (freeFound < freeNeed) {
    84e6:	ldr	r3, [sp, #12]
    84e8:	cmp	r4, r3
    84ea:	bcc.w	8670 <FatFile::open(FatFile*, FatLfn_t*, int)+0x224>
  if (fnameFound) {
    84ee:	cmp.w	fp, #0
    84f2:	bne.w	86a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25c>
  lfnOrd = freeNeed - 1;
    84f6:	ldr	r3, [sp, #12]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    84f8:	mov	r2, r6
    84fa:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    84fc:	add.w	r8, r3, #4294967295
    8500:	uxtb.w	fp, r8
  curIndex = freeIndex + lfnOrd;
    8504:	uxtab	r8, r7, r8
    8508:	uxth.w	r7, r8
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    850c:	mov	r3, fp
    850e:	mov	r1, r7
    8510:	bl	81be <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8514:	cmp	r0, #0
    8516:	beq.n	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
  dir = dirFile->cacheDir(curIndex);
    8518:	mov	r1, r7
    851a:	mov	r0, r5
    851c:	bl	6eb8 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    8520:	mov	r4, r0
    8522:	cmp	r0, #0
    8524:	beq.n	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
  memset(dir, 0, sizeof(DirFat_t));
    8526:	movs	r2, #32
    8528:	movs	r1, #0
    852a:	bl	a2ac <memset>
  memcpy(dir->name, fname->sfn, 11);
    852e:	ldr.w	r3, [r6, #22]
    8532:	str	r3, [r4, #0]
    8534:	ldr.w	r3, [r6, #26]
    8538:	str	r3, [r4, #4]
    853a:	ldrh	r3, [r6, #30]
    853c:	strh	r3, [r4, #8]
    853e:	ldrb.w	r3, [r6, #32]
    8542:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    8544:	ldrb	r3, [r6, #21]
    8546:	and.w	r3, r3, #24
    854a:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    854c:	ldr	r3, [pc, #372]	@ (86c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x278>)
    854e:	ldr	r3, [r3, #0]
    8550:	cmp	r3, #0
    8552:	beq.w	86b8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x26c>
    FsDateTime::callback(&date, &time, &ms10);
    8556:	add.w	r2, sp, #43	@ 0x2b
    855a:	add.w	r1, sp, #46	@ 0x2e
    855e:	add	r0, sp, #44	@ 0x2c
    8560:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    8562:	ldrh.w	r3, [sp, #44]	@ 0x2c
    8566:	strh	r3, [r4, #16]
    8568:	ldrh.w	r3, [sp, #46]	@ 0x2e
    856c:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    856e:	ldrb.w	r3, [sp, #43]	@ 0x2b
    8572:	strb	r3, [r4, #13]
    8574:	ldr	r3, [sp, #24]
    8576:	ldr	r2, [sp, #24]
    8578:	ldrb.w	r3, [r3, #40]	@ 0x28
    857c:	orr.w	r3, r3, #1
    8580:	strb.w	r3, [r2, #40]	@ 0x28
  }
    8584:	b.n	865e <FatFile::open(FatFile*, FatLfn_t*, int)+0x212>
        fnameFound = true;
    8586:	mov.w	fp, #1
    858a:	b.n	84b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6a>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    858c:	ldrb	r2, [r0, #0]
    858e:	cmp	r2, #229	@ 0xe5
    8590:	beq.n	8594 <FatFile::open(FatFile*, FatLfn_t*, int)+0x148>
    8592:	cbnz	r2, 85b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x166>
        freeIndex = curIndex;
    8594:	ldr	r3, [sp, #20]
    8596:	cmp	r4, #0
    8598:	it	eq
    859a:	moveq	r3, r7
    859c:	str	r3, [sp, #20]
      if (freeFound < freeNeed) {
    859e:	ldr	r3, [sp, #12]
    85a0:	cmp	r4, r3
        freeFound++;
    85a2:	itt	cc
    85a4:	addcc	r4, #1
    85a6:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    85a8:	cmp	r2, #0
    85aa:	beq.n	84ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x82>
      lfnOrd = 0;
    85ac:	mov.w	r8, #0
    85b0:	b.n	84b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6a>
        freeFound = 0;
    85b2:	ldr	r3, [sp, #12]
    85b4:	cmp	r4, r3
    85b6:	it	cc
    85b8:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    85ba:	cmp	r2, #46	@ 0x2e
    85bc:	beq.n	85ac <FatFile::open(FatFile*, FatLfn_t*, int)+0x160>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    85be:	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    85c2:	cmp.w	ip, #15
    85c6:	bne.n	861c <FatFile::open(FatFile*, FatLfn_t*, int)+0x1d0>
      if (!lfnOrd) {
    85c8:	cmp.w	r8, #0
    85cc:	bne.n	8608 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1bc>
        order = ldir->order & 0X1F;
    85ce:	and.w	r9, r2, #31
        if (order != nameOrd ||
    85d2:	ldr	r3, [sp, #28]
    85d4:	cmp	r3, r9
    85d6:	bne.w	84b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6a>
    85da:	ands.w	r8, r2, #64	@ 0x40
    85de:	beq.w	84b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6a>
        checksum = ldir->checksum;
    85e2:	ldrb.w	sl, [r0, #13]
        lfnOrd = nameOrd;
    85e6:	mov	r8, r3
      if (order == 1) {
    85e8:	cmp.w	r9, #1
    85ec:	bne.w	84b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6a>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    85f0:	adds	r1, r7, #1
    85f2:	mov	r3, r8
    85f4:	mov	r2, r6
    85f6:	mov	r0, r5
    85f8:	uxth	r1, r1
    85fa:	bl	8126 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    85fe:	cmp	r0, #0
    8600:	it	eq
    8602:	moveq.w	r8, #0
    8606:	b.n	84b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6a>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    8608:	add.w	r9, r9, #4294967295
    860c:	uxtb.w	r9, r9
    8610:	cmp	r2, r9
    8612:	bne.n	85ac <FatFile::open(FatFile*, FatLfn_t*, int)+0x160>
    8614:	ldrb	r2, [r0, #13]
    8616:	cmp	r2, sl
    8618:	beq.n	85e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x19c>
    861a:	b.n	85ac <FatFile::open(FatFile*, FatLfn_t*, int)+0x160>
    } else if (isFileOrSubdir(dir)) {
    861c:	tst.w	ip, #8
    8620:	bne.n	85ac <FatFile::open(FatFile*, FatLfn_t*, int)+0x160>
      if (lfnOrd) {
    8622:	cmp.w	r8, #0
    8626:	beq.n	863e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f2>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    8628:	cmp.w	r9, #1
    862c:	bne.w	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
    8630:	bl	8108 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    8634:	cmp	r0, sl
    8636:	bne.w	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
    863a:	mov	fp, r8
    863c:	b.n	8656 <FatFile::open(FatFile*, FatLfn_t*, int)+0x20a>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    863e:	movs	r2, #11
    8640:	ldr	r1, [sp, #36]	@ 0x24
    8642:	bl	ebd6 <memcmp>
    8646:	cmp	r0, #0
    8648:	bne.w	84b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    864c:	ldrb.w	fp, [r6, #21]
    8650:	ands.w	fp, fp, #1
    8654:	bne.n	8586 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
  if (oflag & O_EXCL) {
    8656:	ldr	r3, [sp, #16]
    8658:	lsls	r1, r3, #20
    865a:	bmi.w	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    865e:	ldr	r3, [sp, #16]
    8660:	mov	r2, r7
    8662:	mov	r1, r5
    8664:	ldr	r0, [sp, #32]
    8666:	str.w	fp, [sp]
    866a:	bl	7482 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    866e:	b.n	8468 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c>
    dir = dirFile->readDirCache();
    8670:	movs	r1, #0
    8672:	mov	r0, r5
    8674:	bl	7358 <FatFile::readDirCache(bool)>
    if (!dir) {
    8678:	cbnz	r0, 86a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x256>
      if (dirFile->getError()) {
    867a:	ldrb	r3, [r5, #1]
    867c:	cmp	r3, #0
    867e:	bne.w	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
  while (freeFound < freeNeed) {
    8682:	ldr	r3, [sp, #12]
    8684:	cmp	r4, r3
    8686:	bcs.w	84ee <FatFile::open(FatFile*, FatLfn_t*, int)+0xa2>
    if (!dirFile->addDirCluster()) {
    868a:	mov	r0, r5
    868c:	bl	70cc <FatFile::addDirCluster()>
    8690:	cmp	r0, #0
    8692:	beq.w	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8696:	ldr	r3, [sp, #24]
    8698:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    869a:	add.w	r3, r4, r3, lsl #4
    869e:	uxtb	r4, r3
    86a0:	b.n	8682 <FatFile::open(FatFile*, FatLfn_t*, int)+0x236>
    freeFound++;
    86a2:	adds	r4, #1
    86a4:	uxtb	r4, r4
    86a6:	b.n	84e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x9a>
    if (!dirFile->makeUniqueSfn(fname)) {
    86a8:	mov	r1, r6
    86aa:	mov	r0, r5
    86ac:	bl	83ac <FatFile::makeUniqueSfn(FatLfn_t*)>
    86b0:	cmp	r0, #0
    86b2:	bne.w	84f6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xaa>
    86b6:	b.n	8466 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a>
  *reinterpret_cast<uint16_t*>(dst) = src;
    86b8:	movw	r3, #22561	@ 0x5821
    86bc:	strh	r3, [r4, #16]
    86be:	strh	r3, [r4, #24]
    86c0:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    86c2:	b.n	8574 <FatFile::open(FatFile*, FatLfn_t*, int)+0x128>
    86c4:	.word	0x20011cec

000086c8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    86c8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    86ca:	mov	r4, r2
    86cc:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    86ce:	mov	r0, r1
    86d0:	ldrb.w	r3, [r1], #1
    86d4:	cmp	r3, #32
    86d6:	beq.n	86ce <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    86d8:	movs	r5, #0
    86da:	ldr	r7, [pc, #140]	@ (8768 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa0>)
    path++;
  }
  fname->begin = path;
    86dc:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    86de:	ldrb	r3, [r0, #0]
    86e0:	cbnz	r3, 8734 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6c>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    86e2:	ldr	r3, [r4, #16]
    86e4:	subs	r3, #1
    86e6:	cmp	r3, #254	@ 0xfe
    86e8:	bhi.n	8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
    86ea:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    86ec:	ldrb.w	r3, [r0], #1
    86f0:	cmp	r3, #32
    86f2:	beq.n	86ea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    86f4:	cmp	r3, #47	@ 0x2f
    86f6:	beq.n	86ea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    86f8:	mov	r0, r4
  *ptr = path;
    86fa:	str	r2, [r6, #0]

 fail:
  return false;
}
    86fc:	add	sp, #12
    86fe:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    8702:	b.w	8288 <FatFile::makeSFN(FatLfn_t*)>
    8706:	subs	r1, #34	@ 0x22
    8708:	uxtb	r1, r1
    870a:	lsr.w	r1, r7, r1
    870e:	lsls	r2, r1, #31
    8710:	bmi.n	8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
    if (cp != '.' && cp != ' ') {
    8712:	cmp	r3, #46	@ 0x2e
    8714:	b.n	8730 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
    8716:	cmp	r1, #92	@ 0x5c
    8718:	beq.n	8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
    871a:	bhi.n	8728 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x60>
    871c:	subs	r1, #62	@ 0x3e
    871e:	cmp	r1, #1
    8720:	bls.n	8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
      fname->len = len;
    8722:	str	r5, [r4, #16]
      fname->end = path;
    8724:	str	r0, [r4, #8]
    8726:	b.n	86de <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8728:	cmp	r1, #124	@ 0x7c
    872a:	bne.n	8722 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5a>
    872c:	b.n	8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
    if (cp != '.' && cp != ' ') {
    872e:	cmp	r3, #32
    8730:	beq.n	86de <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8732:	b.n	8722 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5a>
  while (*path && !isDirSeparator(*path)) {
    8734:	cmp	r3, #47	@ 0x2f
    8736:	beq.n	86e2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8738:	add	r2, sp, #4
    873a:	adds	r1, r0, #4
    873c:	bl	56f0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8740:	cbz	r0, 8762 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9a>
    len += cp <= 0XFFFF ? 1 : 2;
    8742:	ldr	r3, [sp, #4]
    8744:	cmp.w	r3, #65536	@ 0x10000
    8748:	ite	cs
    874a:	movcs	r2, #2
    874c:	movcc	r2, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    874e:	cmp	r3, #127	@ 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    8750:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8752:	bhi.n	8722 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5a>
    8754:	uxtb	r1, r3
    8756:	cmp	r1, #60	@ 0x3c
    8758:	bhi.n	8716 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    875a:	cmp	r1, #33	@ 0x21
    875c:	bhi.n	8706 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    875e:	cmp	r1, #31
    8760:	bhi.n	872e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
}
    8762:	movs	r0, #0
    8764:	add	sp, #12
    8766:	pop	{r4, r5, r6, r7, pc}
    8768:	.word	0x05002101

0000876c <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    876c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    8770:	movs	r3, #0
    8772:	sub	sp, #40	@ 0x28
    8774:	mov	r4, r0
    8776:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8778:	ldrb	r3, [r0, #2]
    877a:	lsls	r2, r3, #30
    877c:	bmi.n	8786 <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    877e:	movs	r0, #0
}
    8780:	add	sp, #40	@ 0x28
    8782:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8786:	ldr	r1, [r0, #32]
    8788:	cmp	r1, #0
    878a:	bne.n	8818 <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    878c:	movs	r1, #1
    878e:	mov	r0, r4
    8790:	bl	713c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8794:	mov	r5, r0
    8796:	cmp	r0, #0
    8798:	beq.n	877e <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    879a:	bl	8108 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    879e:	movs	r7, #229	@ 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    87a0:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    87a2:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    87a4:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    87a6:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    87a8:	ldr	r0, [r4, #8]
  m_flags = 0;
    87aa:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    87ac:	bl	7070 <FatPartition::cacheSync()>
    87b0:	cmp	r0, #0
    87b2:	beq.n	877e <FatFile::remove()+0x12>
  if (!isLFN()) {
    87b4:	ldrb	r3, [r4, #3]
    87b6:	cmp	r3, #0
    87b8:	beq.n	8780 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    87ba:	mov	r1, r4
    87bc:	add	r0, sp, #4
    87be:	bl	718c <FatFile::openCluster(FatFile*)>
    87c2:	cmp	r0, #0
    87c4:	beq.n	877e <FatFile::remove()+0x12>
    87c6:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    87c8:	uxtb.w	r8, r5
    87cc:	ldrb	r3, [r4, #3]
    87ce:	cmp	r3, r8
    87d0:	bcc.n	877e <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    87d2:	ldrh	r1, [r4, #4]
    87d4:	add	r0, sp, #4
    87d6:	subs	r1, r1, r5
    87d8:	uxth	r1, r1
    87da:	bl	6eb8 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    87de:	cmp	r0, #0
    87e0:	beq.n	877e <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    87e2:	ldrb	r3, [r0, #11]
    87e4:	cmp	r3, #15
    87e6:	bne.n	877e <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    87e8:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    87ea:	and.w	r3, r2, #31
    87ee:	cmp	r3, r8
    87f0:	bne.n	877e <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    87f2:	ldrb	r3, [r0, #13]
    87f4:	cmp	r3, r6
    87f6:	bne.n	877e <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    87f8:	strb	r7, [r0, #0]
    if (last) {
    87fa:	adds	r5, #1
    m_vol->cacheDirty();
    87fc:	ldr	r1, [r4, #8]
    if (last) {
    87fe:	uxth	r5, r5
    8800:	ldrb.w	r3, [r1, #40]	@ 0x28
    8804:	orr.w	r3, r3, #1
    8808:	strb.w	r3, [r1, #40]	@ 0x28
    880c:	lsls	r3, r2, #25
    880e:	bpl.n	87c8 <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    8810:	ldr	r0, [r4, #8]
    8812:	bl	7070 <FatPartition::cacheSync()>
    8816:	b.n	8780 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8818:	ldr	r0, [r0, #8]
    881a:	bl	7ed0 <FatPartition::freeChain(unsigned long)>
    881e:	cmp	r0, #0
    8820:	bne.n	878c <FatFile::remove()+0x20>
    8822:	b.n	877e <FatFile::remove()+0x12>

00008824 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    8824:	push	{r4, lr}
    8826:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8828:	ldr	r0, [r0, #56]	@ 0x38
    882a:	cbz	r0, 883a <FsBaseFile::close()+0x16>
    882c:	bl	7654 <FatFile::close()>
    8830:	cbz	r0, 883a <FsBaseFile::close()+0x16>
    m_fFile = nullptr;
    8832:	movs	r3, #0
    8834:	str	r3, [r4, #56]	@ 0x38
    return true;
    8836:	movs	r0, #1
    8838:	b.n	8840 <FsBaseFile::close()+0x1c>
  }
  if (m_xFile && m_xFile->close()) {
    883a:	ldr	r0, [r4, #60]	@ 0x3c
    883c:	cbnz	r0, 8842 <FsBaseFile::close()+0x1e>
    m_xFile = nullptr;
    return true;
  }
  return false;
    883e:	movs	r0, #0
}
    8840:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    8842:	bl	5a8c <ExFatFile::close()>
    8846:	cmp	r0, #0
    8848:	beq.n	883e <FsBaseFile::close()+0x1a>
    m_xFile = nullptr;
    884a:	movs	r3, #0
    884c:	str	r3, [r4, #60]	@ 0x3c
    return true;
    884e:	b.n	8836 <FsBaseFile::close()+0x12>

00008850 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    8850:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    8852:	push	{r4, r5, r6, lr}
    8854:	mov	r6, r0
    8856:	mov	r5, r1
  if (this == &from) return *this;
    8858:	beq.n	8882 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    885a:	bl	8824 <FsBaseFile::close()>
  if (from.m_fFile) {
    885e:	ldr	r4, [r5, #56]	@ 0x38
    8860:	cbz	r4, 8886 <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8862:	mov	r1, r6
    8864:	movs	r0, #36	@ 0x24
    8866:	bl	8a7c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    886a:	movs	r3, #0
    886c:	mov	r4, r0
    886e:	strh	r3, [r0, #0]
    8870:	strb	r3, [r0, #2]
    8872:	str	r0, [r6, #56]	@ 0x38
    *m_fFile = *from.m_fFile;
    8874:	ldr	r5, [r5, #56]	@ 0x38
    8876:	ldmia	r5!, {r0, r1, r2, r3}
    8878:	stmia	r4!, {r0, r1, r2, r3}
    887a:	ldmia	r5!, {r0, r1, r2, r3}
    887c:	stmia	r4!, {r0, r1, r2, r3}
    887e:	ldr	r3, [r5, #0]
    8880:	str	r3, [r4, #0]
}
    8882:	mov	r0, r6
    8884:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    8886:	ldr	r3, [r5, #60]	@ 0x3c
    8888:	cmp	r3, #0
    888a:	beq.n	8882 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    888c:	mov	r1, r6
    888e:	movs	r0, #56	@ 0x38
    8890:	bl	8a7c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    8894:	strb.w	r4, [r0, #49]	@ 0x31
    8898:	strh	r4, [r0, #50]	@ 0x32
    889a:	str	r0, [r6, #60]	@ 0x3c
    *m_xFile = *from.m_xFile;
    889c:	ldr	r3, [r5, #60]	@ 0x3c
    889e:	add.w	r2, r3, #52	@ 0x34
    88a2:	ldr.w	r1, [r3], #4
    88a6:	cmp	r3, r2
    88a8:	str.w	r1, [r0], #4
    88ac:	bne.n	88a2 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    88ae:	b.n	8882 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

000088b0 <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    88b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88b4:	mov	r4, r0
    88b6:	mov	r6, r2
    88b8:	mov	r7, r3
  if (!vol) {
    88ba:	mov	r5, r1
    88bc:	cbz	r1, 88f2 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
    return false;
  }
  close();
    88be:	bl	8824 <FsBaseFile::close()>
  if (vol->m_fVol) {
    88c2:	ldr.w	r8, [r5, #1152]	@ 0x480
    88c6:	cmp.w	r8, #0
    88ca:	beq.n	88f6 <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    m_fFile = new (m_fileMem) FatFile;
    88cc:	mov	r1, r4
    88ce:	movs	r0, #36	@ 0x24
    88d0:	bl	8a7c <operator new(unsigned int, unsigned long*)>
    88d4:	movs	r3, #0
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    88d6:	mov	r2, r6
    88d8:	strh	r3, [r0, #0]
    88da:	strb	r3, [r0, #2]
    88dc:	mov	r3, r7
    88de:	ldr.w	r1, [r5, #1152]	@ 0x480
    m_fFile = new (m_fileMem) FatFile;
    88e2:	str	r0, [r4, #56]	@ 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    88e4:	bl	7702 <FatFile::open(FatVolume*, char const*, int)>
    88e8:	cbz	r0, 88f0 <FsBaseFile::open(FsVolume*, char const*, int)+0x40>
      return true;
    88ea:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    88ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    88f0:	str	r0, [r4, #56]	@ 0x38
    return false;
    88f2:	movs	r0, #0
    88f4:	b.n	88ec <FsBaseFile::open(FsVolume*, char const*, int)+0x3c>
  } else if (vol->m_xVol) {
    88f6:	ldr.w	r3, [r5, #1156]	@ 0x484
    88fa:	cmp	r3, #0
    88fc:	beq.n	88f2 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
    m_xFile = new (m_fileMem) ExFatFile;
    88fe:	mov	r1, r4
    8900:	movs	r0, #56	@ 0x38
    8902:	bl	8a7c <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    8906:	mov	r3, r7
    8908:	strb.w	r8, [r0, #49]	@ 0x31
    890c:	mov	r2, r6
    890e:	strh.w	r8, [r0, #50]	@ 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    8912:	str	r0, [r4, #60]	@ 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    8914:	ldr.w	r1, [r5, #1156]	@ 0x484
    8918:	bl	621a <ExFatFile::open(ExFatVolume*, char const*, int)>
    891c:	cmp	r0, #0
    891e:	bne.n	88ea <FsBaseFile::open(FsVolume*, char const*, int)+0x3a>
    m_xFile = nullptr;
    8920:	str	r0, [r4, #60]	@ 0x3c
    8922:	b.n	88f2 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>

00008924 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    8924:	push	{r3, r4, r5, r6, r7, lr}
    8926:	mov	r5, r1
    8928:	mov	r4, r0
    892a:	mov	r6, r2
  close();
    892c:	bl	8824 <FsBaseFile::close()>
  if (dir->m_fFile) {
    8930:	ldr	r7, [r5, #56]	@ 0x38
    8932:	cbz	r7, 8958 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    8934:	mov	r1, r4
    8936:	movs	r0, #36	@ 0x24
    8938:	bl	8a7c <operator new(unsigned int, unsigned long*)>
    893c:	movs	r2, #0
    893e:	strh	r2, [r0, #0]
    8940:	strb	r2, [r0, #2]
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8942:	mov	r2, r6
    m_fFile = new (m_fileMem) FatFile;
    8944:	str	r0, [r4, #56]	@ 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8946:	ldr	r1, [r5, #56]	@ 0x38
    8948:	bl	7544 <FatFile::openNext(FatFile*, int)>
    894c:	cbz	r0, 8952 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
      return true;
    894e:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8950:	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    8952:	str	r0, [r4, #56]	@ 0x38
  return false;
    8954:	movs	r0, #0
    8956:	b.n	8950 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
  } else if (dir->m_xFile) {
    8958:	ldr	r3, [r5, #60]	@ 0x3c
    895a:	cmp	r3, #0
    895c:	beq.n	8954 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    895e:	mov	r1, r4
    8960:	movs	r0, #56	@ 0x38
    8962:	bl	8a7c <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8966:	mov	r2, r6
    8968:	strb.w	r7, [r0, #49]	@ 0x31
    896c:	strh	r7, [r0, #50]	@ 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    896e:	str	r0, [r4, #60]	@ 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8970:	ldr	r1, [r5, #60]	@ 0x3c
    8972:	bl	6228 <ExFatFile::openNext(ExFatFile*, int)>
    8976:	cmp	r0, #0
    8978:	bne.n	894e <FsBaseFile::openNext(FsBaseFile*, int)+0x2a>
    m_xFile = nullptr;
    897a:	str	r0, [r4, #60]	@ 0x3c
    897c:	b.n	8954 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
	...

00008980 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8980:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    8984:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8986:	mov	r4, r0
    8988:	mov	r6, r3
  m_blockDev = blockDev;
    898a:	str.w	r1, [r0, #1160]	@ 0x488
  m_fVol = nullptr;
    898e:	str.w	r7, [r0, #1152]	@ 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    8992:	mov	r1, r0
    8994:	mov.w	r0, #1152	@ 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8998:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    899a:	bl	8a7c <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    899e:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    89a0:	strb.w	r7, [r0, #1092]	@ 0x444
    89a4:	mov	r5, r0
    89a6:	strb.w	r7, [r0, #1145]	@ 0x479
    89aa:	strh.w	r7, [r0, #1146]	@ 0x47a
    89ae:	str.w	r0, [r4, #1156]	@ 0x484
    89b2:	ldr.w	r1, [r4, #1160]	@ 0x488
    89b6:	ldr.w	r8, [pc, #152]	@ 8a50 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    89ba:	bl	656c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    89be:	cbz	r0, 89ec <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    89c0:	add.w	r7, r5, #1096	@ 0x448
    89c4:	mov	r0, r7
    89c6:	bl	5a8c <ExFatFile::close()>
    return m_vwd.openRoot(this);
    89ca:	mov	r1, r5
    89cc:	mov	r0, r7
    89ce:	bl	5ae0 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    89d2:	cbz	r0, 89ec <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    89d4:	ldr	r3, [pc, #112]	@ (8a48 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    89d6:	ldr	r2, [r3, #0]
    89d8:	cbnz	r2, 89dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    89da:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    89dc:	cmp.w	r9, #0
    89e0:	bne.n	8a42 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
    89e2:	ldr.w	r3, [r8]
    89e6:	cbz	r3, 8a42 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
    m_cwv = this;
  }
  return true;
    89e8:	movs	r0, #1
    89ea:	b.n	8a3e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xbe>
  m_xVol = nullptr;
    89ec:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    89ee:	mov	r1, r4
    89f0:	movw	r0, #1132	@ 0x46c
  m_xVol = nullptr;
    89f4:	str.w	r7, [r4, #1156]	@ 0x484
  m_fVol = new (m_volMem) FatVolume;
    89f8:	bl	8a7c <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    89fc:	movs	r3, #2
    89fe:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    8a00:	mov	r2, r6
    8a02:	strb	r3, [r0, #8]
    8a04:	mov	r5, r0
    8a06:	strh.w	r7, [r0, #1096]	@ 0x448
    8a0a:	strb.w	r7, [r0, #1098]	@ 0x44a
    8a0e:	str.w	r0, [r4, #1152]	@ 0x480
    8a12:	ldr.w	r1, [r4, #1160]	@ 0x488
    8a16:	bl	7fb8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    8a1a:	cbz	r0, 8a34 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb4>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8a1c:	add.w	r6, r5, #1096	@ 0x448
    8a20:	mov	r0, r6
    8a22:	bl	7654 <FatFile::close()>
    return m_vwd.openRoot(this);
    8a26:	mov	r1, r5
    8a28:	mov	r0, r6
    8a2a:	bl	715a <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    8a2e:	cbz	r0, 8a34 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb4>
    if (setCwv || !m_cwv) {
    8a30:	ldr	r3, [pc, #24]	@ (8a4c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    8a32:	b.n	89d6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    8a34:	movs	r0, #0
    8a36:	str.w	r0, [r8]
  m_fVol = nullptr;
    8a3a:	str.w	r0, [r4, #1152]	@ 0x480
}
    8a3e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    m_cwv = this;
    8a42:	str.w	r4, [r8]
    8a46:	b.n	89e8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    8a48:	.word	0x20011cf0
    8a4c:	.word	0x20011d28
    8a50:	.word	0x20011d24

00008a54 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    8a54:	push	{r3, r4, r5, lr}
    8a56:	mov	r4, r0
    8a58:	mov.w	r5, #1000	@ 0x3e8
    8a5c:	movs	r0, #0
    8a5e:	strd	r0, r5, [r4, #4]
    8a62:	strb	r0, [r4, #12]
    8a64:	ldr	r5, [pc, #16]	@ (8a78 <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    8a66:	strd	r0, r0, [r4, #72]	@ 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    8a6a:	mov	r0, r4
    8a6c:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    8a70:	bl	88b0 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    8a74:	mov	r0, r4
    8a76:	pop	{r3, r4, r5, pc}
    8a78:	.word	0x200006a4

00008a7c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    8a7c:	mov	r0, r1
    8a7e:	bx	lr

00008a80 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    8a80:	mov.w	r0, #4294967295
    8a84:	bx	lr

00008a86 <SharedSpiCard::errorCode() const>:
  }
    8a86:	ldrb	r0, [r0, #17]
    8a88:	bx	lr

00008a8a <SharedSpiCard::errorData() const>:
  }
    8a8a:	ldrb	r0, [r0, #20]
    8a8c:	bx	lr

00008a8e <SharedSpiCard::type() const>:
  }
    8a8e:	ldrb	r0, [r0, #21]
    8a90:	bx	lr

00008a92 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    8a92:	movs	r0, #1
    8a94:	bx	lr

00008a96 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    8a96:	ldrb	r0, [r0, #28]
    8a98:	bx	lr

00008a9a <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    8a9a:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    8a9c:	push	{r4}
  return readSectors(sector, dst, 1);
    8a9e:	ldr	r4, [r3, #20]
    8aa0:	movs	r3, #1
    8aa2:	mov	ip, r4
}
    8aa4:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    8aa8:	bx	ip

00008aaa <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8aaa:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    8aac:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8aae:	mov	r4, r0
    8ab0:	mov	r5, r1
  if (!syncDevice()) {
    8ab2:	ldr	r3, [r3, #32]
    8ab4:	blx	r3
    8ab6:	cbz	r0, 8aba <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    8ab8:	strb	r5, [r4, #28]
  return true;
}
    8aba:	pop	{r3, r4, r5, pc}

00008abc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
    8abc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ac0:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8ac2:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8ac4:	mov	r4, r0
    8ac6:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8ac8:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    8aca:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8acc:	bne.n	8ad4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    8ace:	ldr	r3, [r0, #24]
    8ad0:	cmp	r3, r1
    8ad2:	beq.n	8ae8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    8ad4:	ldr	r3, [r4, #0]
    8ad6:	mov	r1, r5
    8ad8:	mov	r0, r4
    8ada:	ldr	r3, [r3, #96]	@ 0x60
    8adc:	blx	r3
    8ade:	cbnz	r0, 8ae6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

fail:
  return false;
    8ae0:	movs	r0, #0
}
    8ae2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    8ae6:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8ae8:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    8aea:	cmp	r5, r6
    8aec:	add.w	r1, r7, r5, lsl #9
    8af0:	bne.n	8b0a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    8af2:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8af4:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8af6:	add	r3, r5
    8af8:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8afa:	cmp	r0, #0
    8afc:	bne.n	8ae2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    8afe:	ldr	r3, [r4, #0]
    8b00:	mov	r0, r4
    8b02:	ldr	r3, [r3, #100]	@ 0x64
}
    8b04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    8b08:	bx	r3
    if (!writeData(src)) {
    8b0a:	ldr	r3, [r4, #0]
    8b0c:	mov	r0, r4
    8b0e:	ldr	r3, [r3, #92]	@ 0x5c
    8b10:	blx	r3
    8b12:	cmp	r0, #0
    8b14:	beq.n	8ae0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8b16:	adds	r5, #1
    8b18:	b.n	8aea <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

00008b1a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8b1a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b1e:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8b20:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8b22:	mov	r4, r0
    8b24:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8b26:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8b28:	mov	r6, r2
    8b2a:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8b2e:	bne.n	8b36 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    8b30:	ldr	r3, [r0, #24]
    8b32:	cmp	r3, r1
    8b34:	beq.n	8b4a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    8b36:	ldr	r3, [r4, #0]
    8b38:	mov	r1, r5
    8b3a:	mov	r0, r4
    8b3c:	ldr	r3, [r3, #96]	@ 0x60
    8b3e:	blx	r3
    8b40:	cbnz	r0, 8b48 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    8b42:	movs	r0, #0
}
    8b44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8b48:	str	r5, [r4, #24]
    8b4a:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8b4e:	cmp	r5, r8
    8b50:	bne.n	8b6a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    8b52:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8b54:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8b56:	add	r3, r6
    8b58:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8b5a:	cmp	r0, #0
    8b5c:	bne.n	8b44 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    8b5e:	ldr	r3, [r4, #0]
    8b60:	mov	r0, r4
    8b62:	ldr	r3, [r3, #100]	@ 0x64
}
    8b64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    8b68:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    8b6a:	mov	r1, r9
    8b6c:	mov	r0, r5
    8b6e:	blx	r7
    if (!writeData(src)) {
    8b70:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    8b72:	mov	r1, r0
    if (!writeData(src)) {
    8b74:	mov	r0, r4
    8b76:	ldr	r3, [r3, #92]	@ 0x5c
    8b78:	adds	r5, #1
    8b7a:	blx	r3
    8b7c:	cmp	r0, #0
    8b7e:	bne.n	8b4e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    8b80:	b.n	8b42 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

00008b82 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8b82:	bx	lr

00008b84 <SharedSpiCard::end()>:
    m_spiDriver.end();
    8b84:	adds	r0, #4
    8b86:	b.w	a230 <SdSpiArduinoDriver::end()>

00008b8a <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8b8a:	push	{r4, lr}
    8b8c:	mov	r4, r0
    8b8e:	movs	r1, #32
    8b90:	bl	ca14 <operator delete(void*, unsigned int)>
    8b94:	mov	r0, r4
    8b96:	pop	{r4, pc}

00008b98 <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    8b98:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8b9a:	ldr	r3, [r0, #0]
    8b9c:	mov	r1, sp
    8b9e:	ldr	r3, [r3, #76]	@ 0x4c
    8ba0:	blx	r3
    8ba2:	cbz	r0, 8bec <SharedSpiCard::sectorCount()+0x54>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8ba4:	ldrb.w	r3, [sp]
    8ba8:	cmp	r3, #63	@ 0x3f
    8baa:	bhi.n	8bf2 <SharedSpiCard::sectorCount()+0x5a>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8bac:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8bb0:	ldrb.w	r0, [sp, #7]
    8bb4:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8bb8:	ldrb.w	r2, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8bbc:	lsls	r0, r0, #2
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8bbe:	ubfx	r2, r2, #0, #2
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8bc2:	orr.w	r0, r0, r3, lsl #10
    8bc6:	ldrb.w	r3, [sp, #8]
    8bca:	orr.w	r0, r0, r3, lsr #6
                          | csd->v1.c_size_mult_low;
    8bce:	ldrb.w	r3, [sp, #10]
    8bd2:	ubfx	r3, r3, #7, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8bd6:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    8bd8:	orr.w	r3, r3, r2, lsl #1
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8bdc:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8be0:	sxtb	r3, r3
    8be2:	and.w	r2, r2, #15
    8be6:	add	r3, r2
    8be8:	subs	r3, #7
    8bea:	lsls	r0, r3
}
    8bec:	add	sp, #20
    8bee:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    8bf2:	and.w	r3, r3, #192	@ 0xc0
    8bf6:	cmp	r3, #64	@ 0x40
    8bf8:	bne.n	8c18 <SharedSpiCard::sectorCount()+0x80>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8bfa:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8bfe:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8c02:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8c04:	and.w	r3, r3, #63	@ 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8c08:	add.w	r0, r0, r3, lsl #16
    8c0c:	ldrb.w	r3, [sp, #8]
    8c10:	add.w	r0, r0, r3, lsl #8
    8c14:	lsls	r0, r0, #10
    8c16:	b.n	8bec <SharedSpiCard::sectorCount()+0x54>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8c18:	movs	r0, #0
    8c1a:	b.n	8bec <SharedSpiCard::sectorCount()+0x54>

00008c1c <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    8c1c:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    8c1e:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    8c20:	mov	r4, r0
  if (!m_spiActive) {
    8c22:	cbnz	r6, 8c40 <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    8c24:	adds	r5, r0, #4
    8c26:	mov	r0, r5
    8c28:	bl	a1d4 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    8c2c:	mov	r1, r6
    8c2e:	ldrb	r0, [r4, #16]
    8c30:	bl	a2a8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8c34:	movs	r1, #255	@ 0xff
    8c36:	mov	r0, r5
    8c38:	bl	a260 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    8c3c:	movs	r3, #1
    8c3e:	strb	r3, [r4, #18]
}
    8c40:	pop	{r4, r5, r6, pc}

00008c42 <SharedSpiCard::spiStop()>:
void SharedSpiCard::spiStop() {
    8c42:	push	{r3, r4, r5, lr}
  if (m_spiActive) {
    8c44:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    8c46:	mov	r4, r0
  if (m_spiActive) {
    8c48:	cbz	r3, 8c66 <SharedSpiCard::spiStop()+0x24>
    8c4a:	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    8c4c:	movs	r1, #1
    8c4e:	ldrb	r0, [r0, #16]
    8c50:	bl	a2a8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8c54:	movs	r1, #255	@ 0xff
    8c56:	mov	r0, r5
    8c58:	bl	a260 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8c5c:	mov	r0, r5
    8c5e:	bl	a1e2 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8c62:	movs	r3, #0
    8c64:	strb	r3, [r4, #18]
}
    8c66:	pop	{r3, r4, r5, pc}

00008c68 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    8c68:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    8c6a:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    8c6c:	mov	r4, r0
  if (m_state == READ_STATE) {
    8c6e:	cmp	r3, #1
    8c70:	beq.n	8c94 <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    8c72:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    8c74:	cbnz	r6, 8c7a <SharedSpiCard::isBusy()+0x12>
    spiStart();
    8c76:	bl	8c1c <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    8c7a:	adds	r0, r4, #4
    8c7c:	bl	a236 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    8c80:	subs.w	r5, r0, #255	@ 0xff
    8c84:	it	ne
    8c86:	movne	r5, #1
  if (!spiActive) {
    8c88:	cbnz	r6, 8c90 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    8c8a:	mov	r0, r4
    8c8c:	bl	8c42 <SharedSpiCard::spiStop()>
}
    8c90:	mov	r0, r5
    8c92:	pop	{r4, r5, r6, pc}
    return false;
    8c94:	movs	r5, #0
    8c96:	b.n	8c90 <SharedSpiCard::isBusy()+0x28>

00008c98 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    8c98:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c9c:	ldr.w	r9, [pc, #100]	@ 8d04 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x6c>
    8ca0:	mov	r4, r0
    8ca2:	mov	r7, r1
    8ca4:	mov	r8, r2
    8ca6:	ldr.w	r5, [r9]
    8caa:	adds	r6, r0, #4
    m_endTime = ms + millis16();
    8cac:	add.w	r5, r5, #300	@ 0x12c
    8cb0:	uxth	r5, r5
    8cb2:	mov	r0, r6
    8cb4:	bl	a236 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    8cb8:	cmp	r0, #255	@ 0xff
    8cba:	strb	r0, [r4, #20]
    8cbc:	beq.n	8ce2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4a>
  if (m_status != DATA_START_SECTOR) {
    8cbe:	cmp	r0, #254	@ 0xfe
    8cc0:	bne.n	8cfa <SharedSpiCard::readData(unsigned char*, unsigned int)+0x62>
    return m_spiDriver.receive(buf, n);
    8cc2:	mov	r2, r8
    8cc4:	mov	r1, r7
    8cc6:	mov	r0, r6
    8cc8:	bl	a240 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    8ccc:	strb	r0, [r4, #20]
    8cce:	cbnz	r0, 8cfe <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    return m_spiDriver.receive();
    8cd0:	mov	r0, r6
    8cd2:	bl	a236 <SdSpiArduinoDriver::receive()>
    8cd6:	mov	r0, r6
    8cd8:	bl	a236 <SdSpiArduinoDriver::receive()>
  return true;
    8cdc:	movs	r0, #1
}
    8cde:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8ce2:	ldr.w	r3, [r9]
    return (int16_t)(m_endTime - millis16()) < 0;
    8ce6:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    8ce8:	lsls	r3, r3, #16
    8cea:	bpl.n	8cb2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x1a>
    8cec:	movs	r3, #29
  spiStop();
    8cee:	mov	r0, r4
    m_errorCode = code;
    8cf0:	strb	r3, [r4, #17]
    8cf2:	bl	8c42 <SharedSpiCard::spiStop()>
  return false;
    8cf6:	movs	r0, #0
    8cf8:	b.n	8cde <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
    8cfa:	movs	r3, #24
    8cfc:	b.n	8cee <SharedSpiCard::readData(unsigned char*, unsigned int)+0x56>
    8cfe:	movs	r3, #37	@ 0x25
    8d00:	b.n	8cee <SharedSpiCard::readData(unsigned char*, unsigned int)+0x56>
    8d02:	nop
    8d04:	.word	0x20012864

00008d08 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    8d08:	mov.w	r2, #512	@ 0x200
    8d0c:	b.w	8c98 <SharedSpiCard::readData(unsigned char*, unsigned int)>

00008d10 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    8d10:	push	{r4, r5, r6, lr}
    8d12:	ldr	r6, [pc, #36]	@ (8d38 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    8d14:	adds	r5, r0, #4
    8d16:	ldr	r4, [r6, #0]
    m_endTime = ms + millis16();
    8d18:	add	r4, r1
    8d1a:	uxth	r4, r4
    8d1c:	mov	r0, r5
    8d1e:	bl	a236 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8d22:	cmp	r0, #255	@ 0xff
    8d24:	bne.n	8d2a <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    8d26:	movs	r0, #1
}
    8d28:	pop	{r4, r5, r6, pc}
    8d2a:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    8d2c:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8d2e:	lsls	r3, r3, #16
    8d30:	bpl.n	8d1c <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    8d32:	movs	r0, #0
    8d34:	b.n	8d28 <SharedSpiCard::waitReady(unsigned short)+0x18>
    8d36:	nop
    8d38:	.word	0x20012864

00008d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    8d3c:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8d3e:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    8d42:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8d44:	mov	r4, r0
    8d46:	str	r2, [sp, #4]
    8d48:	mov	r5, r1
  if (!syncDevice()) {
    8d4a:	blx	r3
    8d4c:	cmp	r0, #0
    8d4e:	beq.n	8dc2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    8d50:	ldrb	r3, [r4, #18]
    8d52:	cbnz	r3, 8d5a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    8d54:	mov	r0, r4
    8d56:	bl	8c1c <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    8d5a:	cmp	r5, #12
    8d5c:	bne.n	8db0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    8d5e:	adds	r6, r4, #4
    8d60:	movs	r7, #3
    spiSend(pa[i]);
    8d62:	add.w	r8, sp, #4
    8d66:	orr.w	r1, r5, #64	@ 0x40
    8d6a:	mov	r0, r6
    8d6c:	bl	a260 <SdSpiArduinoDriver::send(unsigned char)>
    8d70:	ldrb.w	r1, [r8, r7]
    8d74:	mov	r0, r6
    8d76:	bl	a260 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    8d7a:	subs	r7, #1
    8d7c:	bcs.n	8d70 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    8d7e:	cmp	r5, #0
    8d80:	mov	r0, r6
    return m_spiDriver.receive();
    8d82:	mov.w	r5, #10
    m_spiDriver.send(data);
    8d86:	ite	ne
    8d88:	movne	r1, #135	@ 0x87
    8d8a:	moveq	r1, #149	@ 0x95
    8d8c:	bl	a260 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8d90:	mov	r0, r6
    8d92:	bl	a236 <SdSpiArduinoDriver::receive()>
    8d96:	mov	r0, r6
    8d98:	bl	a236 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    8d9c:	lsls	r3, r0, #24
    m_status = spiReceive();
    8d9e:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    8da0:	bpl.n	8daa <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    8da2:	subs	r5, #1
    8da4:	uxth	r5, r5
    8da6:	cmp	r5, #0
    8da8:	bne.n	8d96 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    8daa:	add	sp, #8
    8dac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    8db0:	mov.w	r1, #300	@ 0x12c
    8db4:	mov	r0, r4
    8db6:	bl	8d10 <SharedSpiCard::waitReady(unsigned short)>
    8dba:	cmp	r0, #0
    8dbc:	bne.n	8d5e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    8dbe:	cmp	r5, #0
    8dc0:	beq.n	8d5e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    8dc2:	movs	r0, #255	@ 0xff
    8dc4:	b.n	8daa <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00008dc6 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8dc6:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    8dc8:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8dca:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    8dcc:	movs	r1, #58	@ 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8dce:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    8dd0:	bl	8d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8dd4:	cbz	r0, 8de4 <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    8dd6:	movs	r3, #18
  spiStop();
    8dd8:	mov	r0, r4
    8dda:	strb	r3, [r4, #17]
    8ddc:	bl	8c42 <SharedSpiCard::spiStop()>
  return false;
    8de0:	movs	r0, #0
}
    8de2:	pop	{r3, r4, r5, r6, r7, pc}
    8de4:	adds	r6, r5, #4
    return m_spiDriver.receive();
    8de6:	adds	r7, r4, #4
    8de8:	mov	r0, r7
    8dea:	bl	a236 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    8dee:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    8df2:	cmp	r6, r5
    8df4:	bne.n	8de8 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    8df6:	mov	r0, r4
    8df8:	bl	8c42 <SharedSpiCard::spiStop()>
    8dfc:	movs	r0, #1
    8dfe:	b.n	8de2 <SharedSpiCard::readOCR(unsigned long*)+0x1c>

00008e00 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8e00:	push	{r3, r4, r5, lr}
    8e02:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    8e04:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8e06:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    8e08:	bl	8d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8e0c:	cbz	r0, 8e1c <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    8e0e:	movs	r3, #27
    8e10:	strb	r3, [r4, #17]
  spiStop();
    8e12:	mov	r0, r4
  return false;
    8e14:	movs	r5, #0
  spiStop();
    8e16:	bl	8c42 <SharedSpiCard::spiStop()>
  return false;
    8e1a:	b.n	8e32 <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    8e1c:	mov	r1, r5
    8e1e:	movs	r2, #16
    8e20:	mov	r0, r4
    8e22:	bl	8c98 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8e26:	mov	r5, r0
    8e28:	cmp	r0, #0
    8e2a:	beq.n	8e12 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    8e2c:	mov	r0, r4
    8e2e:	bl	8c42 <SharedSpiCard::spiStop()>
}
    8e32:	mov	r0, r5
    8e34:	pop	{r3, r4, r5, pc}

00008e36 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    8e36:	mov	r2, r1
    return readRegister(CMD9, csd);
    8e38:	movs	r1, #9
    8e3a:	b.w	8e00 <SharedSpiCard::readRegister(unsigned char, void*)>

00008e3e <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    8e3e:	mov	r2, r1
    return readRegister(CMD10, cid);
    8e40:	movs	r1, #10
    8e42:	b.w	8e00 <SharedSpiCard::readRegister(unsigned char, void*)>

00008e46 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    8e46:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8e48:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    8e4a:	mov	r5, r1
    8e4c:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8e4e:	ldr	r3, [r3, #88]	@ 0x58
    8e50:	blx	r3
    8e52:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8e54:	mov.w	r1, #18
    8e58:	mov	r0, r4
    sector <<= 9;
    8e5a:	it	ne
    8e5c:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    8e5e:	mov	r2, r5
    8e60:	bl	8d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8e64:	cbz	r0, 8e74 <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    8e66:	movs	r3, #12
  spiStop();
    8e68:	mov	r0, r4
    8e6a:	strb	r3, [r4, #17]
    8e6c:	bl	8c42 <SharedSpiCard::spiStop()>
  return false;
    8e70:	movs	r0, #0
}
    8e72:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    8e74:	movs	r0, #1
    8e76:	strb	r0, [r4, #19]
  return true;
    8e78:	b.n	8e72 <SharedSpiCard::readStart(unsigned long)+0x2c>

00008e7a <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    8e7a:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    8e7c:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    8e7e:	movs	r1, #12
bool SharedSpiCard::readStop() {
    8e80:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    8e82:	mov	r2, r4
  m_state = IDLE_STATE;
    8e84:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    8e86:	bl	8d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8e8a:	cbz	r0, 8e9a <SharedSpiCard::readStop()+0x20>
    8e8c:	movs	r3, #9
  spiStop();
    8e8e:	mov	r0, r5
    8e90:	strb	r3, [r5, #17]
    8e92:	bl	8c42 <SharedSpiCard::spiStop()>
  return false;
    8e96:	mov	r0, r4
}
    8e98:	pop	{r3, r4, r5, pc}
  spiStop();
    8e9a:	mov	r0, r5
    8e9c:	bl	8c42 <SharedSpiCard::spiStop()>
  return true;
    8ea0:	movs	r0, #1
    8ea2:	b.n	8e98 <SharedSpiCard::readStop()+0x1e>

00008ea4 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    8ea4:	ldrb	r2, [r0, #19]
    8ea6:	cmp	r2, #2
    8ea8:	bne.n	8eb0 <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    8eaa:	ldr	r3, [r0, #0]
    8eac:	ldr	r3, [r3, #100]	@ 0x64
    8eae:	bx	r3
  if (m_state == READ_STATE) {
    8eb0:	cmp	r2, #1
    8eb2:	bne.n	8eb8 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    8eb4:	b.w	8e7a <SharedSpiCard::readStop()>
}
    8eb8:	movs	r0, #1
    8eba:	bx	lr

00008ebc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    8ebc:	push	{r3, r4, r5, r6, r7, lr}
    8ebe:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8ec0:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8ec2:	mov	r4, r0
    8ec4:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8ec6:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    8ec8:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8eca:	bne.n	8ed2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    8ecc:	ldr	r3, [r0, #24]
    8ece:	cmp	r3, r1
    8ed0:	beq.n	8ee2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    8ed2:	mov	r1, r5
    8ed4:	mov	r0, r4
    8ed6:	bl	8e46 <SharedSpiCard::readStart(unsigned long)>
    8eda:	cbnz	r0, 8ee0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    8edc:	movs	r0, #0
}
    8ede:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    8ee0:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8ee2:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8ee4:	cmp	r5, r6
    8ee6:	add.w	r1, r7, r5, lsl #9
    8eea:	bne.n	8f02 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    8eec:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8eee:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8ef0:	add	r3, r5
    8ef2:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8ef4:	cmp	r0, #0
    8ef6:	bne.n	8ede <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    8ef8:	mov	r0, r4
}
    8efa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    8efe:	b.w	8e7a <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    8f02:	mov	r0, r4
    8f04:	bl	8d08 <SharedSpiCard::readData(unsigned char*)>
    8f08:	cmp	r0, #0
    8f0a:	beq.n	8edc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8f0c:	adds	r5, #1
    8f0e:	b.n	8ee4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

00008f10 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8f10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f14:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8f16:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8f18:	mov	r4, r0
    8f1a:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8f1c:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8f1e:	mov	r7, r2
    8f20:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    8f24:	bne.n	8f2c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    8f26:	ldr	r3, [r0, #24]
    8f28:	cmp	r3, r1
    8f2a:	beq.n	8f3e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    8f2c:	mov	r1, r5
    8f2e:	mov	r0, r4
    8f30:	bl	8e46 <SharedSpiCard::readStart(unsigned long)>
    8f34:	cbnz	r0, 8f3c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    8f36:	movs	r0, #0
}
    8f38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8f3c:	str	r5, [r4, #24]
    8f3e:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8f42:	cmp	r5, r8
    8f44:	bne.n	8f5c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    8f46:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8f48:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8f4a:	add	r3, r6
    8f4c:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8f4e:	cmp	r0, #0
    8f50:	bne.n	8f38 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    8f52:	mov	r0, r4
}
    8f54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    8f58:	b.w	8e7a <SharedSpiCard::readStop()>
    if (readData(dst)) {
    8f5c:	mov	r1, r7
    8f5e:	mov	r0, r4
    8f60:	bl	8d08 <SharedSpiCard::readData(unsigned char*)>
    8f64:	cmp	r0, #0
    8f66:	beq.n	8f36 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    8f68:	mov	r0, r5
    8f6a:	mov	r2, sl
    8f6c:	mov	r1, r7
    8f6e:	adds	r5, #1
    8f70:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    8f72:	b.n	8f42 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

00008f74 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    8f74:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8f76:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    8f78:	mov	r5, r1
    8f7a:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8f7c:	ldr	r3, [r3, #88]	@ 0x58
    8f7e:	blx	r3
    8f80:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8f82:	mov.w	r1, #25
    8f86:	mov	r0, r4
    sector <<= 9;
    8f88:	it	ne
    8f8a:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    8f8c:	mov	r2, r5
    8f8e:	bl	8d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8f92:	cbz	r0, 8fa2 <SharedSpiCard::writeStart(unsigned long)+0x2e>
    8f94:	movs	r3, #14
  spiStop();
    8f96:	mov	r0, r4
    8f98:	strb	r3, [r4, #17]
    8f9a:	bl	8c42 <SharedSpiCard::spiStop()>
  return false;
    8f9e:	movs	r0, #0
}
    8fa0:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    8fa2:	movs	r3, #2
  return true;
    8fa4:	movs	r0, #1
  m_state = WRITE_STATE;
    8fa6:	strb	r3, [r4, #19]
  return true;
    8fa8:	b.n	8fa0 <SharedSpiCard::writeStart(unsigned long)+0x2c>

00008faa <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8faa:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    8fac:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8fae:	mov	r6, r1
  if (!readCSD(&csd)) {
    8fb0:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8fb2:	mov	r4, r0
  if (!readCSD(&csd)) {
    8fb4:	ldr	r3, [r3, #76]	@ 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8fb6:	mov	r5, r2
  if (!readCSD(&csd)) {
    8fb8:	blx	r3
    8fba:	cbz	r0, 8fe2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x38>
  if (!csd.v1.erase_blk_en) {
    8fbc:	ldrb.w	r3, [sp, #10]
    8fc0:	lsls	r2, r3, #25
    8fc2:	bmi.n	8fec <SharedSpiCard::erase(unsigned long, unsigned long)+0x42>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    8fc4:	ubfx	r2, r3, #0, #6
    8fc8:	ldrb.w	r3, [sp, #11]
    8fcc:	ubfx	r3, r3, #7, #1
    8fd0:	orr.w	r3, r3, r2, lsl #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8fd4:	adds	r2, r5, #1
    8fd6:	sxtb	r3, r3
    8fd8:	orrs	r2, r6
    8fda:	tst	r3, r2
    8fdc:	beq.n	8fec <SharedSpiCard::erase(unsigned long, unsigned long)+0x42>
    8fde:	movs	r3, #39	@ 0x27
    8fe0:	strb	r3, [r4, #17]
  spiStop();
    8fe2:	mov	r0, r4
  return false;
    8fe4:	movs	r5, #0
  spiStop();
    8fe6:	bl	8c42 <SharedSpiCard::spiStop()>
  return false;
    8fea:	b.n	903a <SharedSpiCard::erase(unsigned long, unsigned long)+0x90>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8fec:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    8fee:	movs	r1, #32
    8ff0:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    8ff2:	cmp	r3, #3
    firstSector <<= 9;
    8ff4:	itt	ne
    8ff6:	lslne	r6, r6, #9
    lastSector <<= 9;
    8ff8:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    8ffa:	mov	r2, r6
    8ffc:	bl	8d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    9000:	cbz	r0, 9006 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
    9002:	movs	r3, #38	@ 0x26
    9004:	b.n	8fe0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x36>
      || cardCommand(CMD33, lastSector)
    9006:	mov	r2, r5
    9008:	movs	r1, #33	@ 0x21
    900a:	mov	r0, r4
    900c:	bl	8d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9010:	mov	r2, r0
    9012:	cmp	r0, #0
    9014:	bne.n	9002 <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
      || cardCommand(CMD38, 0)) {
    9016:	movs	r1, #38	@ 0x26
    9018:	mov	r0, r4
    901a:	bl	8d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    901e:	cmp	r0, #0
    9020:	bne.n	9002 <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    9022:	movw	r1, #10000	@ 0x2710
    9026:	mov	r0, r4
    9028:	bl	8d10 <SharedSpiCard::waitReady(unsigned short)>
    902c:	mov	r5, r0
    902e:	cbnz	r0, 9034 <SharedSpiCard::erase(unsigned long, unsigned long)+0x8a>
    9030:	movs	r3, #40	@ 0x28
    9032:	b.n	8fe0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x36>
  spiStop();
    9034:	mov	r0, r4
    9036:	bl	8c42 <SharedSpiCard::spiStop()>
}
    903a:	mov	r0, r5
    903c:	add	sp, #16
    903e:	pop	{r4, r5, r6, pc}

00009040 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    9040:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    9042:	mov.w	r1, #600	@ 0x258
bool SharedSpiCard::writeStop() {
    9046:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    9048:	bl	8d10 <SharedSpiCard::waitReady(unsigned short)>
    904c:	mov	r5, r0
    904e:	cbnz	r0, 905e <SharedSpiCard::writeStop()+0x1e>
    9050:	movs	r3, #30
  spiStop();
    9052:	mov	r0, r4
    9054:	strb	r3, [r4, #17]
    9056:	bl	8c42 <SharedSpiCard::spiStop()>
}
    905a:	mov	r0, r5
    905c:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    905e:	movs	r1, #253	@ 0xfd
    9060:	adds	r0, r4, #4
    9062:	bl	a260 <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    9066:	mov	r0, r4
    9068:	bl	8c42 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    906c:	movs	r3, #0
    906e:	strb	r3, [r4, #19]
  return true;
    9070:	b.n	905a <SharedSpiCard::writeStop()+0x1a>

00009072 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    9072:	push	{r4, r5, r6, lr}
    9074:	adds	r5, r0, #4
    9076:	mov	r6, r2
    9078:	mov	r4, r0
    907a:	mov	r0, r5
    907c:	bl	a260 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    9080:	mov.w	r2, #512	@ 0x200
    9084:	mov	r1, r6
    9086:	mov	r0, r5
    9088:	bl	a268 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    908c:	movs	r1, #255	@ 0xff
    908e:	mov	r0, r5
    9090:	bl	a260 <SdSpiArduinoDriver::send(unsigned char)>
    9094:	movs	r1, #255	@ 0xff
    9096:	mov	r0, r5
    9098:	bl	a260 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    909c:	mov	r0, r5
    909e:	bl	a236 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    90a2:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    90a4:	and.w	r0, r0, #31
    90a8:	cmp	r0, #5
    90aa:	beq.n	90ba <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
    m_errorCode = code;
    90ac:	movs	r3, #32
  spiStop();
    90ae:	mov	r0, r4
    90b0:	strb	r3, [r4, #17]
    90b2:	bl	8c42 <SharedSpiCard::spiStop()>
  return false;
    90b6:	movs	r0, #0
}
    90b8:	pop	{r4, r5, r6, pc}
  return true;
    90ba:	movs	r0, #1
    90bc:	b.n	90b8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

000090be <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    90be:	push	{r3, r4, r5, lr}
    90c0:	mov	r5, r1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    90c2:	mov.w	r1, #600	@ 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    90c6:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    90c8:	bl	8d10 <SharedSpiCard::waitReady(unsigned short)>
    90cc:	cbnz	r0, 90dc <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    90ce:	movs	r3, #36	@ 0x24
    90d0:	strb	r3, [r4, #17]
  spiStop();
    90d2:	mov	r0, r4
    90d4:	bl	8c42 <SharedSpiCard::spiStop()>
  return false;
    90d8:	movs	r0, #0
    90da:	b.n	90ea <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    90dc:	mov	r2, r5
    90de:	movs	r1, #252	@ 0xfc
    90e0:	mov	r0, r4
    90e2:	bl	9072 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    90e6:	cmp	r0, #0
    90e8:	beq.n	90d2 <SharedSpiCard::writeData(unsigned char const*)+0x14>
}
    90ea:	pop	{r3, r4, r5, pc}

000090ec <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    90ec:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    90ee:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    90f0:	ldr	r3, [r3, #88]	@ 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    90f2:	mov	r5, r1
    90f4:	mov	r4, r0
    90f6:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    90f8:	blx	r3
    90fa:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    90fc:	mov.w	r1, #24
    9100:	mov	r0, r4
    sector <<= 9;
    9102:	it	ne
    9104:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    9106:	mov	r2, r5
    9108:	bl	8d3c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    910c:	cbz	r0, 911c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    910e:	movs	r3, #13
    9110:	strb	r3, [r4, #17]
  spiStop();
    9112:	mov	r0, r4
  return false;
    9114:	movs	r5, #0
  spiStop();
    9116:	bl	8c42 <SharedSpiCard::spiStop()>
  return false;
    911a:	b.n	9132 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    911c:	mov	r2, r6
    911e:	movs	r1, #254	@ 0xfe
    9120:	mov	r0, r4
    9122:	bl	9072 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    9126:	mov	r5, r0
    9128:	cmp	r0, #0
    912a:	beq.n	9112 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    912c:	mov	r0, r4
    912e:	bl	8c42 <SharedSpiCard::spiStop()>
}
    9132:	mov	r0, r5
    9134:	pop	{r4, r5, r6, pc}

00009136 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    9136:	push	{r4}
  if (m_dedicatedSpi) {
    9138:	ldrb	r4, [r0, #28]
    913a:	cbz	r4, 914a <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    913c:	ldr	r3, [r0, #0]
    913e:	ldr	r4, [r3, #40]	@ 0x28
    9140:	movs	r3, #1
    9142:	mov	ip, r4
}
    9144:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    9148:	bx	ip
}
    914a:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    914e:	b.w	90ec <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00009152 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    9152:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9156:	ldr	r5, [sp, #32]
    9158:	mov	r6, r0
    915a:	mov	r4, r1
    915c:	mov	r7, r2
    915e:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    9162:	cmp	r4, r8
    9164:	bne.n	916c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    9166:	movs	r0, #1
  }
    9168:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    916c:	ldr	r3, [r6, #0]
    916e:	mov	r2, r7
    9170:	mov	r1, r4
    9172:	mov	r0, r6
    9174:	ldr	r3, [r3, #16]
    9176:	add.w	r9, r4, #1
    917a:	blx	r3
    917c:	cmp	r0, #0
    917e:	beq.n	9168 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    9180:	mov	r0, r4
    9182:	ldr	r2, [sp, #36]	@ 0x24
    9184:	mov	r1, r7
    9186:	mov	r4, r9
    9188:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    918a:	b.n	9162 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

0000918c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    918c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9190:	mov	r5, r0
    9192:	mov	r4, r1
    9194:	mov	r7, r3
    9196:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    9198:	cmp	r4, r6
    919a:	bne.n	91a0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    919c:	movs	r0, #1
    919e:	b.n	91ba <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    91a0:	ldr	r3, [r5, #0]
    91a2:	mov	r0, r4
    91a4:	ldr	r1, [sp, #24]
    91a6:	ldr.w	r8, [r3, #36]	@ 0x24
    91aa:	blx	r7
    91ac:	mov	r1, r4
    91ae:	mov	r2, r0
    91b0:	mov	r0, r5
    91b2:	adds	r4, #1
    91b4:	blx	r8
    91b6:	cmp	r0, #0
    91b8:	bne.n	9198 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    91ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000091be <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    91be:	movs	r0, #0
    91c0:	bx	lr

000091c2 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    91c2:	movs	r0, #0
    91c4:	bx	lr

000091c6 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    91c6:	movs	r0, #0
    91c8:	bx	lr

000091ca <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    91ca:	bx	lr

000091cc <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    91cc:	ldr	r3, [pc, #28]	@ (91ec <sdIrs()+0x20>)
    91ce:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    91d0:	ldr	r2, [pc, #28]	@ (91f0 <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    91d2:	str	r1, [r3, #56]	@ 0x38
  m_irqstat = SDHC_IRQSTAT;
    91d4:	ldr	r0, [r3, #48]	@ 0x30
    91d6:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    91d8:	ldr	r2, [r2, #0]
    91da:	str	r2, [r3, #48]	@ 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    91dc:	ldr	r2, [r3, #72]	@ 0x48
    91de:	bic.w	r2, r2, #129	@ 0x81
    91e2:	str	r2, [r3, #72]	@ 0x48
#endif
  m_dmaBusy = false;
    91e4:	ldr	r3, [pc, #12]	@ (91f4 <sdIrs()+0x28>)
    91e6:	strb	r1, [r3, #0]
}
    91e8:	bx	lr
    91ea:	nop
    91ec:	.word	0x402c0000
    91f0:	.word	0x20011ce8
    91f4:	.word	0x20012a24

000091f8 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    91f8:	ldr	r3, [pc, #24]	@ (9214 <gpioMux(unsigned char)+0x1c>)
    91fa:	str.w	r0, [r3, #460]	@ 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    91fe:	str.w	r0, [r3, #464]	@ 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    9202:	str.w	r0, [r3, #444]	@ 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9206:	str.w	r0, [r3, #448]	@ 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    920a:	str.w	r0, [r3, #452]	@ 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    920e:	str.w	r0, [r3, #456]	@ 0x1c8
}
    9212:	bx	lr
    9214:	.word	0x401f8000

00009218 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    9218:	ldr	r3, [pc, #12]	@ (9228 <isBusyCommandComplete()+0x10>)
    921a:	ldr	r0, [pc, #16]	@ (922c <isBusyCommandComplete()+0x14>)
    921c:	ldr	r3, [r3, #48]	@ 0x30
    921e:	ands	r0, r3
}
    9220:	clz	r0, r0
    9224:	lsrs	r0, r0, #5
    9226:	bx	lr
    9228:	.word	0x402c0000
    922c:	.word	0x000f0001

00009230 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    9230:	ldr	r3, [pc, #8]	@ (923c <isBusyCommandInhibit()+0xc>)
    9232:	ldr	r0, [r3, #36]	@ 0x24
}
    9234:	and.w	r0, r0, #1
    9238:	bx	lr
    923a:	nop
    923c:	.word	0x402c0000

00009240 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9240:	ldr	r3, [pc, #12]	@ (9250 <isBusyDat()+0x10>)
    9242:	ldr	r0, [r3, #36]	@ 0x24
    9244:	eor.w	r0, r0, #16777216	@ 0x1000000
}
    9248:	ubfx	r0, r0, #24, #1
    924c:	bx	lr
    924e:	nop
    9250:	.word	0x402c0000

00009254 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    9254:	ldr	r3, [pc, #4]	@ (925c <isBusyDMA()+0x8>)
    9256:	ldrb	r0, [r3, #0]
}
    9258:	bx	lr
    925a:	nop
    925c:	.word	0x20012a24

00009260 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    9260:	ldr	r3, [pc, #12]	@ (9270 <isBusyFifoRead()+0x10>)
    9262:	ldr	r0, [r3, #36]	@ 0x24
    9264:	eor.w	r0, r0, #2048	@ 0x800
}
    9268:	ubfx	r0, r0, #11, #1
    926c:	bx	lr
    926e:	nop
    9270:	.word	0x402c0000

00009274 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    9274:	ldr	r3, [pc, #12]	@ (9284 <isBusyFifoWrite()+0x10>)
    9276:	ldr	r0, [r3, #36]	@ 0x24
    9278:	eor.w	r0, r0, #1024	@ 0x400
}
    927c:	ubfx	r0, r0, #10, #1
    9280:	bx	lr
    9282:	nop
    9284:	.word	0x402c0000

00009288 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9288:	ldr	r3, [pc, #12]	@ (9298 <isBusyTransferComplete()+0x10>)
    928a:	ldr	r0, [pc, #16]	@ (929c <isBusyTransferComplete()+0x14>)
    928c:	ldr	r3, [r3, #48]	@ 0x30
    928e:	ands	r0, r3
}
    9290:	clz	r0, r0
    9294:	lsrs	r0, r0, #5
    9296:	bx	lr
    9298:	.word	0x402c0000
    929c:	.word	0x117f0002

000092a0 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    92a0:	mov.w	r3, #1000	@ 0x3e8
    92a4:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    92a6:	ldr	r3, [pc, #136]	@ (9330 <setSdclk(unsigned long)+0x90>)
    92a8:	ldr	r2, [r3, #36]	@ 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    92aa:	sub.w	r3, r3, #147456	@ 0x24000
    92ae:	ldr.w	r1, [r3, #256]	@ 0x100
    92b2:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    92b4:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    92b8:	and.w	r1, r1, #63	@ 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    92bc:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    92be:	udiv	r1, r1, r3
    92c2:	ldr	r3, [pc, #112]	@ (9334 <setSdclk(unsigned long)+0x94>)
    92c4:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    92c8:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    92ca:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    92ce:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    92d0:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    92d2:	lsls	r4, r2, #4
    92d4:	udiv	r4, r3, r4
    92d8:	cmp	r4, r0
    92da:	bls.n	92e0 <setSdclk(unsigned long)+0x40>
    92dc:	subs	r1, #1
    92de:	bne.n	9324 <setSdclk(unsigned long)+0x84>
    92e0:	mov	r4, r2
    92e2:	movs	r1, #1
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    92e4:	udiv	r5, r3, r4
    92e8:	cmp	r5, r0
    92ea:	bls.n	92f4 <setSdclk(unsigned long)+0x54>
    92ec:	cmp	r1, #16
    92ee:	add.w	r5, r2, r4
    92f2:	bne.n	9328 <setSdclk(unsigned long)+0x88>
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    92f4:	mov.w	r0, #1000	@ 0x3e8
  sdclkfs >>= 1;
  dvs--;
    92f8:	subs	r1, #1
  sdclkfs >>= 1;
    92fa:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    92fc:	muls	r4, r0
    92fe:	ldr	r0, [pc, #56]	@ (9338 <setSdclk(unsigned long)+0x98>)
    9300:	udiv	r3, r3, r4
    9304:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    9306:	ldr	r0, [pc, #52]	@ (933c <setSdclk(unsigned long)+0x9c>)
    9308:	ldr	r3, [r0, #44]	@ 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    930a:	bfc	r3, #4, #16

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    930e:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    9312:	orr.w	r3, r3, r2, lsl #8
    9316:	orr.w	r3, r3, #917504	@ 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    931a:	str	r3, [r0, #44]	@ 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    931c:	ldr	r3, [r0, #36]	@ 0x24
    931e:	lsls	r3, r3, #28
    9320:	bpl.n	931c <setSdclk(unsigned long)+0x7c>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    9322:	pop	{r4, r5, pc}
    sdclkfs <<= 1;
    9324:	lsls	r2, r2, #1
    9326:	b.n	92d2 <setSdclk(unsigned long)+0x32>
    dvs++;
    9328:	adds	r1, #1
    932a:	mov	r4, r5
    932c:	b.n	92e4 <setSdclk(unsigned long)+0x44>
    932e:	nop
    9330:	.word	0x400fc000
    9334:	.word	0x5e69ec00
    9338:	.word	0x2000b4c0
    933c:	.word	0x402c0000

00009340 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    9340:	ldr	r3, [pc, #4]	@ (9348 <SdioCard::errorCode() const+0x8>)
    9342:	ldrb	r0, [r3, #0]
    9344:	bx	lr
    9346:	nop
    9348:	.word	0x20002436

0000934c <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    934c:	ldr	r3, [pc, #4]	@ (9354 <SdioCard::errorData() const+0x8>)
    934e:	ldr	r0, [r3, #0]
}
    9350:	bx	lr
    9352:	nop
    9354:	.word	0x20011ce8

00009358 <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    9358:	ldr	r3, [pc, #20]	@ (9370 <SdioCard::readCID(CID*)+0x18>)
    935a:	add.w	r2, r3, #16
    935e:	ldr.w	r0, [r3], #4
    9362:	cmp	r3, r2
    9364:	str.w	r0, [r1], #4
    9368:	bne.n	935e <SdioCard::readCID(CID*)+0x6>
  return true;
}
    936a:	movs	r0, #1
    936c:	bx	lr
    936e:	nop
    9370:	.word	0x20012964

00009374 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    9374:	ldr	r3, [pc, #20]	@ (938c <SdioCard::readCSD(csd_t*)+0x18>)
    9376:	add.w	r2, r3, #16
    937a:	ldr.w	r0, [r3], #4
    937e:	cmp	r3, r2
    9380:	str.w	r0, [r1], #4
    9384:	bne.n	937a <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    9386:	movs	r0, #1
    9388:	bx	lr
    938a:	nop
    938c:	.word	0x20012974

00009390 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    9390:	ldr	r3, [pc, #8]	@ (939c <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    9392:	movs	r0, #1
  *ocr = m_ocr;
    9394:	ldr	r3, [r3, #0]
    9396:	str	r3, [r1, #0]
}
    9398:	bx	lr
    939a:	nop
    939c:	.word	0x200116dc

000093a0 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    93a0:	bx	lr
	...

000093a4 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    93a4:	push	{r3, r4, r5, r6, r7, lr}
    93a6:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    93a8:	ldr	r7, [pc, #24]	@ (93c4 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    93aa:	bl	b7fc <micros>
    93ae:	mov	r6, r0
  while (fcn()) {
    93b0:	blx	r5
    93b2:	mov	r4, r0
    93b4:	cbz	r0, 93c0 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    93b6:	bl	b7fc <micros>
    93ba:	subs	r0, r0, r6
    93bc:	cmp	r0, r7
    93be:	bls.n	93b0 <waitTimeout(bool (*)())+0xc>
}
    93c0:	mov	r0, r4
    93c2:	pop	{r3, r4, r5, r6, r7, pc}
    93c4:	.word	0x000f4240

000093c8 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    93c8:	push	{r3, r4, r5, lr}
    93ca:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    93cc:	ldr	r0, [pc, #84]	@ (9424 <cardCommand(unsigned long, unsigned long)+0x5c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    93ce:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    93d0:	bl	93a4 <waitTimeout(bool (*)())>
    93d4:	cbz	r0, 93da <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
    93d6:	movs	r0, #0
}
    93d8:	pop	{r3, r4, r5, pc}
  SDHC_CMDARG = arg;
    93da:	ldr	r3, [pc, #76]	@ (9428 <cardCommand(unsigned long, unsigned long)+0x60>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    93dc:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    93de:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    93e0:	bpl.n	93f2 <cardCommand(unsigned long, unsigned long)+0x2a>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    93e2:	ldr	r2, [r3, #72]	@ 0x48
    93e4:	bic.w	r2, r2, #255	@ 0xff
    93e8:	str	r2, [r3, #72]	@ 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    93ea:	uxtb	r2, r4
    93ec:	ldr	r1, [r3, #72]	@ 0x48
    93ee:	orrs	r2, r1
    93f0:	str	r2, [r3, #72]	@ 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    93f2:	bic.w	r4, r4, #255	@ 0xff
  SDHC_XFERTYP = xfertyp;
    93f6:	ldr	r5, [pc, #48]	@ (9428 <cardCommand(unsigned long, unsigned long)+0x60>)
  if (waitTimeout(isBusyCommandComplete)) {
    93f8:	ldr	r0, [pc, #48]	@ (942c <cardCommand(unsigned long, unsigned long)+0x64>)
  SDHC_XFERTYP = xfertyp;
    93fa:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    93fc:	bl	93a4 <waitTimeout(bool (*)())>
    9400:	cmp	r0, #0
    9402:	bne.n	93d6 <cardCommand(unsigned long, unsigned long)+0xe>
  m_irqstat = SDHC_IRQSTAT;
    9404:	ldr	r2, [r5, #48]	@ 0x30
    9406:	ldr	r3, [pc, #40]	@ (9430 <cardCommand(unsigned long, unsigned long)+0x68>)
    9408:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    940a:	ldr	r2, [r3, #0]
    940c:	str	r2, [r5, #48]	@ 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    940e:	ldr	r2, [r3, #0]
    9410:	lsls	r2, r2, #31
    9412:	bpl.n	93d6 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    9414:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9416:	tst.w	r3, #983040	@ 0xf0000
    941a:	ite	eq
    941c:	moveq	r0, #1
    941e:	movne	r0, #0
    9420:	b.n	93d8 <cardCommand(unsigned long, unsigned long)+0x10>
    9422:	nop
    9424:	.word	0x00009231
    9428:	.word	0x402c0000
    942c:	.word	0x00009219
    9430:	.word	0x20011ce8

00009434 <statusCMD13()>:
static uint32_t statusCMD13() {
    9434:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9436:	ldr	r3, [pc, #16]	@ (9448 <statusCMD13()+0x14>)
    9438:	ldr	r0, [pc, #16]	@ (944c <statusCMD13()+0x18>)
    943a:	ldr	r1, [r3, #0]
    943c:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9440:	cbz	r0, 9446 <statusCMD13()+0x12>
    9442:	ldr	r3, [pc, #12]	@ (9450 <statusCMD13()+0x1c>)
    9444:	ldr	r0, [r3, #16]
}
    9446:	pop	{r3, pc}
    9448:	.word	0x200116e0
    944c:	.word	0x0d1a0000
    9450:	.word	0x402c0000

00009454 <isBusyCMD13()>:
static bool isBusyCMD13() {
    9454:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    9456:	bl	9434 <statusCMD13()>
    945a:	eor.w	r0, r0, #256	@ 0x100
}
    945e:	ubfx	r0, r0, #8, #1
    9462:	pop	{r3, pc}

00009464 <SdioCard::isBusy()>:
  bool useDma() {return m_options & DMA_SDIO;}
    9464:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    9466:	lsls	r3, r3, #31
    9468:	bpl.n	947c <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    946a:	ldr	r3, [pc, #40]	@ (9494 <SdioCard::isBusy()+0x30>)
    946c:	ldr	r3, [r3, #0]
    946e:	cbz	r3, 9472 <SdioCard::isBusy()+0xe>
    9470:	bx	r3
    9472:	ldr	r3, [pc, #36]	@ (9498 <SdioCard::isBusy()+0x34>)
    9474:	ldrb	r0, [r3, #0]
    9476:	cbz	r0, 9492 <SdioCard::isBusy()+0x2e>
    9478:	b.w	9454 <isBusyCMD13()>
    if (m_transferActive) {
    947c:	ldr	r3, [pc, #28]	@ (949c <SdioCard::isBusy()+0x38>)
    947e:	ldrb	r3, [r3, #0]
    9480:	cbz	r3, 9486 <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    9482:	b.w	9288 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9486:	ldr	r3, [pc, #24]	@ (94a0 <SdioCard::isBusy()+0x3c>)
    9488:	ldr	r0, [r3, #36]	@ 0x24
    948a:	eor.w	r0, r0, #16777216	@ 0x1000000
    948e:	ubfx	r0, r0, #24, #1
}
    9492:	bx	lr
    9494:	.word	0x20011ce4
    9498:	.word	0x20012960
    949c:	.word	0x20012963
    94a0:	.word	0x402c0000

000094a4 <SdioCard::status()>:
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
    94a4:	b.w	9434 <statusCMD13()>

000094a8 <SdioCard::erase(unsigned long, unsigned long)>:
  if (!m_csd.v1.erase_blk_en) {
    94a8:	ldr	r0, [pc, #160]	@ (954c <SdioCard::erase(unsigned long, unsigned long)+0xa4>)
    94aa:	ldrb	r3, [r0, #10]
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    94ac:	push	{r4, lr}
    94ae:	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    94b0:	lsls	r2, r3, #25
    94b2:	bmi.n	94e0 <SdioCard::erase(unsigned long, unsigned long)+0x38>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    94b4:	ubfx	r2, r3, #0, #6
    94b8:	ldrb	r3, [r0, #11]
    94ba:	ubfx	r3, r3, #7, #1
    94be:	orr.w	r3, r3, r2, lsl #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    94c2:	adds	r2, r4, #1
    94c4:	sxtb	r3, r3
    94c6:	orrs	r2, r1
    94c8:	tst	r3, r2
    94ca:	beq.n	94e0 <SdioCard::erase(unsigned long, unsigned long)+0x38>
  m_errorCode = code;
    94cc:	ldr	r3, [pc, #128]	@ (9550 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    94ce:	movs	r2, #39	@ 0x27
    94d0:	strb	r2, [r3, #0]
  m_errorLine = line;
    94d2:	movw	r2, #770	@ 0x302
    94d6:	ldr	r3, [pc, #124]	@ (9554 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    94d8:	movs	r4, #0
  m_errorLine = line;
    94da:	str	r2, [r3, #0]
}
    94dc:	mov	r0, r4
    94de:	pop	{r4, pc}
  if (!m_highCapacity) {
    94e0:	ldr	r3, [pc, #116]	@ (9558 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    94e2:	ldrb	r3, [r3, #0]
    94e4:	cbnz	r3, 94ea <SdioCard::erase(unsigned long, unsigned long)+0x42>
    firstSector <<= 9;
    94e6:	lsls	r1, r1, #9
    lastSector <<= 9;
    94e8:	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    94ea:	ldr	r0, [pc, #112]	@ (955c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    94ec:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    94f0:	cbnz	r0, 9500 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  m_errorCode = code;
    94f2:	ldr	r3, [pc, #92]	@ (9550 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    94f4:	movs	r2, #15
    94f6:	strb	r2, [r3, #0]
  m_errorLine = line;
    94f8:	movw	r2, #778	@ 0x30a
    94fc:	ldr	r3, [pc, #84]	@ (9554 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    94fe:	b.n	94d8 <SdioCard::erase(unsigned long, unsigned long)+0x30>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9500:	mov	r1, r4
    9502:	ldr	r0, [pc, #92]	@ (9560 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    9504:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9508:	cbnz	r0, 9518 <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    950a:	ldr	r3, [pc, #68]	@ (9550 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    950c:	movs	r2, #16
    950e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9510:	movw	r2, #781	@ 0x30d
    9514:	ldr	r3, [pc, #60]	@ (9554 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9516:	b.n	94d8 <SdioCard::erase(unsigned long, unsigned long)+0x30>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9518:	movs	r1, #0
    951a:	ldr	r0, [pc, #72]	@ (9564 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    951c:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9520:	mov	r4, r0
    9522:	cbnz	r0, 9532 <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    9524:	ldr	r3, [pc, #40]	@ (9550 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    9526:	movs	r2, #17
    9528:	strb	r2, [r3, #0]
  m_errorLine = line;
    952a:	mov.w	r2, #784	@ 0x310
    952e:	ldr	r3, [pc, #36]	@ (9554 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9530:	b.n	94d8 <SdioCard::erase(unsigned long, unsigned long)+0x30>
  if (waitTimeout(isBusyCMD13)) {
    9532:	ldr	r0, [pc, #52]	@ (9568 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    9534:	bl	93a4 <waitTimeout(bool (*)())>
    9538:	cmp	r0, #0
    953a:	beq.n	94dc <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    953c:	ldr	r3, [pc, #16]	@ (9550 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    953e:	movs	r2, #40	@ 0x28
    9540:	strb	r2, [r3, #0]
  m_errorLine = line;
    9542:	movw	r2, #787	@ 0x313
    9546:	ldr	r3, [pc, #12]	@ (9554 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9548:	b.n	94d8 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    954a:	nop
    954c:	.word	0x20012974
    9550:	.word	0x20002436
    9554:	.word	0x2000b4c8
    9558:	.word	0x20012962
    955c:	.word	0x201a0000
    9560:	.word	0x211a0000
    9564:	.word	0x261b0000
    9568:	.word	0x00009455

0000956c <waitTransferComplete()>:
static bool waitTransferComplete() {
    956c:	push	{r4, lr}
  if (!m_transferActive) {
    956e:	ldr	r4, [pc, #60]	@ (95ac <waitTransferComplete()+0x40>)
    9570:	ldrb	r3, [r4, #0]
    9572:	cbnz	r3, 9578 <waitTransferComplete()+0xc>
    return true;
    9574:	movs	r0, #1
}
    9576:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    9578:	ldr	r0, [pc, #52]	@ (95b0 <waitTransferComplete()+0x44>)
    957a:	bl	93a4 <waitTimeout(bool (*)())>
  m_transferActive = false;
    957e:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    9580:	ldr	r2, [pc, #48]	@ (95b4 <waitTransferComplete()+0x48>)
  m_transferActive = false;
    9582:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    9584:	ldr	r1, [r2, #48]	@ 0x30
    9586:	ldr	r3, [pc, #48]	@ (95b8 <waitTransferComplete()+0x4c>)
    9588:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    958a:	ldr	r1, [r3, #0]
    958c:	str	r1, [r2, #48]	@ 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    958e:	cbnz	r0, 9598 <waitTransferComplete()+0x2c>
    9590:	ldr	r2, [r3, #0]
    9592:	ldr	r3, [pc, #40]	@ (95bc <waitTransferComplete()+0x50>)
    9594:	tst	r2, r3
    9596:	beq.n	9574 <waitTransferComplete()+0x8>
  m_errorCode = code;
    9598:	ldr	r3, [pc, #36]	@ (95c0 <waitTransferComplete()+0x54>)
    959a:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    959c:	movs	r0, #0
  m_errorCode = code;
    959e:	strb	r2, [r3, #0]
  m_errorLine = line;
    95a0:	movw	r2, #634	@ 0x27a
    95a4:	ldr	r3, [pc, #28]	@ (95c4 <waitTransferComplete()+0x58>)
    95a6:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    95a8:	b.n	9576 <waitTransferComplete()+0xa>
    95aa:	nop
    95ac:	.word	0x20012963
    95b0:	.word	0x00009289
    95b4:	.word	0x402c0000
    95b8:	.word	0x20011ce8
    95bc:	.word	0x117f0000
    95c0:	.word	0x20002436
    95c4:	.word	0x2000b4c8

000095c8 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    95c8:	push	{r4, r5, r6, lr}
    95ca:	mov	r4, r1
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    95cc:	bl	956c <waitTransferComplete()>
    95d0:	mov	r5, r0
    95d2:	cbz	r0, 960a <SdioCard::writeData(unsigned char const*)+0x42>
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    95d4:	ldr	r3, [pc, #100]	@ (963c <SdioCard::writeData(unsigned char const*)+0x74>)
    95d6:	ldr	r2, [r3, #36]	@ 0x24
    95d8:	lsls	r2, r2, #23
    95da:	bmi.n	95ec <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    95dc:	ldr	r2, [r3, #40]	@ 0x28
    95de:	bic.w	r2, r2, #65536	@ 0x10000
    95e2:	str	r2, [r3, #40]	@ 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    95e4:	ldr	r2, [r3, #40]	@ 0x28
    95e6:	orr.w	r2, r2, #131072	@ 0x20000
    95ea:	str	r2, [r3, #40]	@ 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    95ec:	ldr	r2, [r3, #40]	@ 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    95ee:	ldr	r0, [pc, #80]	@ (9640 <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    95f0:	orr.w	r2, r2, #65536	@ 0x10000
    95f4:	str	r2, [r3, #40]	@ 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    95f6:	bl	93a4 <waitTimeout(bool (*)())>
    95fa:	cbz	r0, 9610 <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    95fc:	ldr	r3, [pc, #68]	@ (9644 <SdioCard::writeData(unsigned char const*)+0x7c>)
    95fe:	movs	r2, #33	@ 0x21
    9600:	strb	r2, [r3, #0]
  m_errorLine = line;
    9602:	mov.w	r2, #1016	@ 0x3f8
    9606:	ldr	r3, [pc, #64]	@ (9648 <SdioCard::writeData(unsigned char const*)+0x80>)
    9608:	str	r2, [r3, #0]
    return false;
    960a:	movs	r5, #0
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    960c:	mov	r0, r5
    960e:	pop	{r4, r5, r6, pc}
    9610:	add.w	r1, r4, #512	@ 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    9614:	ldr	r2, [pc, #36]	@ (963c <SdioCard::writeData(unsigned char const*)+0x74>)
    9616:	ldr	r3, [r2, #36]	@ 0x24
    9618:	lsls	r3, r3, #21
    961a:	bpl.n	9616 <SdioCard::writeData(unsigned char const*)+0x4e>
    961c:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    961e:	add.w	r0, r4, #60	@ 0x3c
      SDHC_DATPORT = p32[i];
    9622:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9626:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    9628:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    962a:	bne.n	9622 <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    962c:	adds	r4, #64	@ 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    962e:	cmp	r4, r1
    9630:	bne.n	9616 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    9632:	ldr	r3, [pc, #24]	@ (964c <SdioCard::writeData(unsigned char const*)+0x84>)
    9634:	movs	r2, #1
    9636:	strb	r2, [r3, #0]
  return true;
    9638:	b.n	960c <SdioCard::writeData(unsigned char const*)+0x44>
    963a:	nop
    963c:	.word	0x402c0000
    9640:	.word	0x00009275
    9644:	.word	0x20002436
    9648:	.word	0x2000b4c8
    964c:	.word	0x20012963

00009650 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    9650:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    9654:	ldr	r7, [pc, #44]	@ (9684 <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    9656:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9658:	ldr.w	r8, [pc, #44]	@ 9688 <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    965c:	str	r0, [r7, #0]
  uint32_t m = micros();
    965e:	bl	b7fc <micros>
    9662:	mov	r6, r0
  while (fcn()) {
    9664:	blx	r5
    9666:	mov	r4, r0
    9668:	cbnz	r0, 9674 <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    966a:	movs	r3, #0
}
    966c:	mov	r0, r4
      m_busyFcn = 0;
    966e:	str	r3, [r7, #0]
}
    9670:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9674:	bl	b7fc <micros>
    9678:	subs	r0, r0, r6
    967a:	cmp	r0, r8
    967c:	bhi.n	966a <yieldTimeout(bool (*)())+0x1a>
    yield();
    967e:	bl	c4a4 <yield>
    9682:	b.n	9664 <yieldTimeout(bool (*)())+0x14>
    9684:	.word	0x20011ce4
    9688:	.word	0x000f4240

0000968c <waitDmaStatus()>:
static bool waitDmaStatus() {
    968c:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    968e:	ldr	r0, [pc, #32]	@ (96b0 <waitDmaStatus()+0x24>)
    9690:	bl	9650 <yieldTimeout(bool (*)())>
    9694:	cbnz	r0, 96ac <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9696:	ldr	r3, [pc, #28]	@ (96b4 <waitDmaStatus()+0x28>)
    9698:	ldr	r2, [r3, #0]
    969a:	lsls	r2, r2, #30
    969c:	bpl.n	96aa <waitDmaStatus()+0x1e>
    969e:	ldr	r2, [r3, #0]
    96a0:	ldr	r3, [pc, #20]	@ (96b8 <waitDmaStatus()+0x2c>)
    96a2:	tst	r2, r3
    96a4:	ite	eq
    96a6:	moveq	r0, #1
    96a8:	movne	r0, #0
}
    96aa:	pop	{r3, pc}
    return false;  // Caller will set errorCode.
    96ac:	movs	r0, #0
    96ae:	b.n	96aa <waitDmaStatus()+0x1e>
    96b0:	.word	0x00009255
    96b4:	.word	0x20011ce8
    96b8:	.word	0x117f0000

000096bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    96bc:	push	{r3, r4, r5, r6, r7, lr}
    96be:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    96c0:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    96c2:	mov	r7, r0
    96c4:	mov	r4, r1
    96c6:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    96c8:	bne.n	96cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    96ca:	cbnz	r5, 96de <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    96cc:	ldr	r3, [pc, #96]	@ (9730 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    96ce:	movs	r2, #37	@ 0x25
    96d0:	strb	r2, [r3, #0]
  m_errorLine = line;
    96d2:	movw	r2, #501	@ 0x1f5
    96d6:	ldr	r3, [pc, #92]	@ (9734 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    96d8:	str	r2, [r3, #0]
}
    96da:	movs	r0, #0
    96dc:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    96de:	ldr	r0, [pc, #88]	@ (9738 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    96e0:	bl	9650 <yieldTimeout(bool (*)())>
    96e4:	cbz	r0, 96f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    96e6:	ldr	r3, [pc, #72]	@ (9730 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    96e8:	movs	r2, #10
    96ea:	strb	r2, [r3, #0]
  m_errorLine = line;
    96ec:	mov.w	r2, #504	@ 0x1f8
    96f0:	ldr	r3, [pc, #64]	@ (9734 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    96f2:	b.n	96d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    96f4:	ldr	r3, [pc, #68]	@ (973c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    96f6:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    96f8:	ldr	r1, [pc, #68]	@ (9740 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    96fa:	strb	r2, [r3, #0]
  m_irqstat = 0;
    96fc:	ldr	r3, [pc, #68]	@ (9744 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    96fe:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9700:	ldr	r3, [pc, #68]	@ (9748 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    9702:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9704:	and.w	r3, r3, r5, lsl #16
    9708:	orr.w	r3, r3, #512	@ 0x200
    970c:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    970e:	ldr	r3, [pc, #60]	@ (974c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    9710:	str	r3, [r1, #56]	@ 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    9712:	ldr	r3, [pc, #60]	@ (9750 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    9714:	ldrb	r3, [r3, #0]
    9716:	cbnz	r3, 971a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    9718:	lsls	r4, r4, #9
    971a:	mov	r1, r4
    971c:	mov	r0, r7
    971e:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9722:	cmp	r0, #0
    9724:	beq.n	96da <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    9726:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    972a:	b.w	968c <waitDmaStatus()>
    972e:	nop
    9730:	.word	0x20002436
    9734:	.word	0x2000b4c8
    9738:	.word	0x00009455
    973c:	.word	0x20012a24
    9740:	.word	0x402c0000
    9744:	.word	0x20011ce8
    9748:	.word	0x1fff0000
    974c:	.word	0x117f0002
    9750:	.word	0x20012962

00009754 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9754:	push	{r3, r4, r5, r6, r7, lr}
    9756:	mov	r7, r0
    9758:	ldrb	r0, [r0, #8]
    975a:	mov	r4, r1
    975c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    975e:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9760:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    9762:	bmi.n	9782 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    9764:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    9766:	cmp	r4, r6
    9768:	beq.n	978c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    976a:	ldr	r3, [r7, #0]
    976c:	mov	r2, r5
    976e:	mov	r1, r4
    9770:	mov	r0, r7
    9772:	ldr	r3, [r3, #16]
    9774:	adds	r4, #1
    9776:	add.w	r5, r5, #512	@ 0x200
    977a:	blx	r3
    977c:	cmp	r0, #0
    977e:	bne.n	9766 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    9780:	b.n	97be <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    if ((uint32_t)dst & 3) {
    9782:	lsls	r0, r2, #30
    9784:	beq.n	97a6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x52>
    9786:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9788:	cmp	r4, r6
    978a:	bne.n	9790 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    978c:	movs	r0, #1
}
    978e:	pop	{r3, r4, r5, r6, r7, pc}
        if (!readSector(sector, dst)) {
    9790:	ldr	r3, [r7, #0]
    9792:	mov	r2, r5
    9794:	mov	r1, r4
    9796:	mov	r0, r7
    9798:	ldr	r3, [r3, #16]
    979a:	blx	r3
    979c:	cbz	r0, 97be <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    979e:	adds	r4, #1
    97a0:	add.w	r5, r5, #512	@ 0x200
    97a4:	b.n	9788 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    97a6:	ldr	r0, [pc, #28]	@ (97c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    97a8:	bl	96bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    97ac:	cmp	r0, #0
    97ae:	bne.n	978c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    97b0:	ldr	r3, [pc, #20]	@ (97c8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    97b2:	movs	r2, #12
    97b4:	strb	r2, [r3, #0]
  m_errorLine = line;
    97b6:	movw	r2, #929	@ 0x3a1
    97ba:	ldr	r3, [pc, #16]	@ (97cc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    97bc:	str	r2, [r3, #0]
          return false;  // readSector will set errorCode.
    97be:	movs	r0, #0
    97c0:	b.n	978e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3a>
    97c2:	nop
    97c4:	.word	0x123a0037
    97c8:	.word	0x20002436
    97cc:	.word	0x2000b4c8

000097d0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    97d0:	push	{r4, r5, r6, lr}
    97d2:	ldrb	r3, [r0, #8]
    97d4:	mov	r5, r2
    97d6:	sub.w	sp, sp, #512	@ 0x200
    97da:	mov	r4, r0
  if (m_sdioConfig.useDma()) {
    97dc:	lsls	r2, r3, #31
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    97de:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    97e0:	bpl.n	9816 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    97e2:	lsls	r3, r5, #30
    97e4:	beq.n	97f4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x24>
      ptr = aligned;
      memcpy(aligned, src, 512);
    97e6:	mov	r1, r5
      ptr = aligned;
    97e8:	mov	r5, sp
      memcpy(aligned, src, 512);
    97ea:	mov.w	r2, #512	@ 0x200
    97ee:	mov	r0, sp
    97f0:	bl	a2f0 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    97f4:	movs	r3, #1
    97f6:	mov	r2, r5
    97f8:	mov	r1, r6
    97fa:	ldr	r0, [pc, #108]	@ (9868 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    97fc:	bl	96bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9800:	cmp	r0, #0
    9802:	bne.n	985e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
  m_errorCode = code;
    9804:	ldr	r3, [pc, #100]	@ (986c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    9806:	movs	r2, #13
    9808:	strb	r2, [r3, #0]
  m_errorLine = line;
    980a:	movw	r2, #1041	@ 0x411
    980e:	ldr	r3, [pc, #96]	@ (9870 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    9810:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD24);
    9812:	movs	r0, #0
    9814:	b.n	9860 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x90>
    }
  } else {
    if (!waitTransferComplete()) {
    9816:	bl	956c <waitTransferComplete()>
    981a:	cmp	r0, #0
    981c:	beq.n	9812 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x42>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    981e:	ldrb	r3, [r4, #9]
    9820:	cmp	r3, #2
    9822:	bne.n	982a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    9824:	ldr	r3, [r4, #4]
    9826:	cmp	r3, r6
    9828:	beq.n	984a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7a>
      if (!syncDevice()) {
    982a:	ldr	r3, [r4, #0]
    982c:	mov	r0, r4
    982e:	ldr	r3, [r3, #32]
    9830:	blx	r3
    9832:	cmp	r0, #0
    9834:	beq.n	9812 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x42>
        return false;
      }
      if (!writeStart(sector )) {
    9836:	ldr	r3, [r4, #0]
    9838:	mov	r1, r6
    983a:	mov	r0, r4
    983c:	ldr	r3, [r3, #96]	@ 0x60
    983e:	blx	r3
    9840:	cmp	r0, #0
    9842:	beq.n	9812 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x42>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    9844:	movs	r3, #2
      m_curSector = sector;
    9846:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    9848:	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    984a:	ldr	r3, [r4, #0]
    984c:	mov	r1, r5
    984e:	mov	r0, r4
    9850:	ldr	r3, [r3, #92]	@ 0x5c
    9852:	blx	r3
    9854:	cmp	r0, #0
    9856:	beq.n	9812 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x42>
      return false;
    }
    m_curSector++;
    9858:	ldr	r3, [r4, #4]
    985a:	adds	r3, #1
    985c:	str	r3, [r4, #4]
  }
  return true;
    985e:	movs	r0, #1
}
    9860:	add.w	sp, sp, #512	@ 0x200
    9864:	pop	{r4, r5, r6, pc}
    9866:	nop
    9868:	.word	0x183a0001
    986c:	.word	0x20002436
    9870:	.word	0x2000b4c8

00009874 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9874:	push	{r3, r4, r5, r6, r7, lr}
    9876:	mov	r7, r0
    9878:	ldrb	r0, [r0, #8]
    987a:	mov	r4, r1
    987c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    987e:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9880:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    9882:	bmi.n	98a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    9884:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    9886:	cmp	r4, r6
    9888:	beq.n	98ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    988a:	ldr	r3, [r7, #0]
    988c:	mov	r2, r5
    988e:	mov	r1, r4
    9890:	mov	r0, r7
    9892:	ldr	r3, [r3, #36]	@ 0x24
    9894:	adds	r4, #1
    9896:	add.w	r5, r5, #512	@ 0x200
    989a:	blx	r3
    989c:	cmp	r0, #0
    989e:	bne.n	9886 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    98a0:	b.n	98de <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    if (3 & (uint32_t)ptr) {
    98a2:	lsls	r0, r2, #30
    98a4:	beq.n	98c6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x52>
    98a6:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    98a8:	cmp	r4, r6
    98aa:	bne.n	98b0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    98ac:	movs	r0, #1
        return false;
      }
    }
  }
  return true;
}
    98ae:	pop	{r3, r4, r5, r6, r7, pc}
        if (!writeSector(sector, ptr)) {
    98b0:	ldr	r3, [r7, #0]
    98b2:	mov	r2, r5
    98b4:	mov	r1, r4
    98b6:	mov	r0, r7
    98b8:	ldr	r3, [r3, #36]	@ 0x24
    98ba:	blx	r3
    98bc:	cbz	r0, 98de <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    98be:	adds	r4, #1
    98c0:	add.w	r5, r5, #512	@ 0x200
    98c4:	b.n	98a8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    98c6:	ldr	r0, [pc, #28]	@ (98e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    98c8:	bl	96bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    98cc:	cmp	r0, #0
    98ce:	bne.n	98ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    98d0:	ldr	r3, [pc, #20]	@ (98e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    98d2:	movs	r2, #14
    98d4:	strb	r2, [r3, #0]
  m_errorLine = line;
    98d6:	movw	r2, #1085	@ 0x43d
    98da:	ldr	r3, [pc, #16]	@ (98ec <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    98dc:	str	r2, [r3, #0]
          return false;  // writeSector will set errorCode.
    98de:	movs	r0, #0
    98e0:	b.n	98ae <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3a>
    98e2:	nop
    98e4:	.word	0x193a0027
    98e8:	.word	0x20002436
    98ec:	.word	0x2000b4c8

000098f0 <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    98f0:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    98f2:	ldr	r0, [pc, #76]	@ (9940 <SdioCard::writeStart(unsigned long)+0x50>)
bool SdioCard::writeStart(uint32_t sector) {
    98f4:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    98f6:	bl	9650 <yieldTimeout(bool (*)())>
    98fa:	cbz	r0, 990e <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    98fc:	ldr	r3, [pc, #68]	@ (9944 <SdioCard::writeStart(unsigned long)+0x54>)
    98fe:	movs	r2, #10
    9900:	strb	r2, [r3, #0]
  m_errorLine = line;
    9902:	movw	r2, #1099	@ 0x44b
    9906:	ldr	r3, [pc, #64]	@ (9948 <SdioCard::writeStart(unsigned long)+0x58>)
    return sdError(SD_CARD_ERROR_CMD13);
    9908:	movs	r0, #0
  m_errorLine = line;
    990a:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    990c:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    990e:	ldr	r3, [pc, #60]	@ (994c <SdioCard::writeStart(unsigned long)+0x5c>)
    9910:	ldr	r2, [r3, #40]	@ 0x28
    9912:	bic.w	r2, r2, #65536	@ 0x10000
    9916:	str	r2, [r3, #40]	@ 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9918:	mov.w	r2, #512	@ 0x200
    991c:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    991e:	ldr	r3, [pc, #48]	@ (9950 <SdioCard::writeStart(unsigned long)+0x60>)
    9920:	ldrb	r3, [r3, #0]
    9922:	cbnz	r3, 9926 <SdioCard::writeStart(unsigned long)+0x36>
    9924:	lsls	r4, r4, #9
    9926:	mov	r1, r4
    9928:	ldr	r0, [pc, #40]	@ (9954 <SdioCard::writeStart(unsigned long)+0x64>)
    992a:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    992e:	cmp	r0, #0
    9930:	bne.n	990c <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    9932:	ldr	r3, [pc, #16]	@ (9944 <SdioCard::writeStart(unsigned long)+0x54>)
    9934:	movs	r2, #14
    9936:	strb	r2, [r3, #0]
  m_errorLine = line;
    9938:	movw	r2, #1111	@ 0x457
    993c:	ldr	r3, [pc, #8]	@ (9948 <SdioCard::writeStart(unsigned long)+0x58>)
    993e:	b.n	9908 <SdioCard::writeStart(unsigned long)+0x18>
    9940:	.word	0x00009455
    9944:	.word	0x20002436
    9948:	.word	0x2000b4c8
    994c:	.word	0x402c0000
    9950:	.word	0x20012962
    9954:	.word	0x193a0020

00009958 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    9958:	push	{r4, lr}
    995a:	mov	r4, r0
    995c:	movs	r1, #12
    995e:	bl	ca14 <operator delete(void*, unsigned int)>
    9962:	mov	r0, r4
    9964:	pop	{r4, pc}
	...

00009968 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    9968:	push	{r3, lr}
    gpioMux(0);
    996a:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    996c:	movw	r2, #28856	@ 0x70b8
    gpioMux(0);
    9970:	bl	91f8 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9974:	movw	r1, #4280	@ 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9978:	ldr	r3, [pc, #24]	@ (9994 <enableGPIO(bool) [clone .part.0]+0x2c>)
    997a:	str.w	r2, [r3, #956]	@ 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    997e:	str.w	r2, [r3, #960]	@ 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    9982:	str.w	r2, [r3, #940]	@ 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9986:	str.w	r1, [r3, #944]	@ 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    998a:	str.w	r2, [r3, #948]	@ 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    998e:	str.w	r2, [r3, #952]	@ 0x3b8
}
    9992:	pop	{r3, pc}
    9994:	.word	0x401f8000

00009998 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9998:	ldr	r3, [pc, #184]	@ (9a54 <initSDHC()+0xbc>)
    gpioMux(5);
    999a:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    999c:	ldr.w	r2, [r3, #256]	@ 0x100
    99a0:	orr.w	r2, r2, #128	@ 0x80
static void initSDHC() {
    99a4:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    99a6:	str.w	r2, [r3, #256]	@ 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    99aa:	ldr.w	r2, [r3, #256]	@ 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    99ae:	ldr	r4, [pc, #168]	@ (9a58 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    99b0:	bic.w	r2, r2, #63	@ 0x3f
    99b4:	str.w	r2, [r3, #256]	@ 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    99b8:	ldr.w	r2, [r3, #256]	@ 0x100
    99bc:	orr.w	r2, r2, #24
    99c0:	str.w	r2, [r3, #256]	@ 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    99c4:	ldr.w	r2, [r3, #256]	@ 0x100
    99c8:	bic.w	r2, r2, #128	@ 0x80
    99cc:	str.w	r2, [r3, #256]	@ 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    99d0:	add.w	r3, r3, #147456	@ 0x24000
    99d4:	ldr.w	r2, [r3, #128]	@ 0x80
    99d8:	orr.w	r2, r2, #12
    99dc:	str.w	r2, [r3, #128]	@ 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    99e0:	ldr	r2, [r3, #36]	@ 0x24
    99e2:	bic.w	r2, r2, #14336	@ 0x3800
    99e6:	str	r2, [r3, #36]	@ 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    99e8:	ldr	r2, [r3, #28]
    99ea:	orr.w	r2, r2, #65536	@ 0x10000
    99ee:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    99f0:	ldr	r2, [r3, #36]	@ 0x24
    99f2:	orr.w	r2, r2, #2048	@ 0x800
    99f6:	str	r2, [r3, #36]	@ 0x24
    gpioMux(5);
    99f8:	bl	91f8 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    99fc:	ldr	r3, [r4, #72]	@ 0x48
    99fe:	orr.w	r3, r3, #2147483648	@ 0x80000000
    9a02:	str	r3, [r4, #72]	@ 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    9a04:	ldr	r3, [r4, #44]	@ 0x2c
    9a06:	orr.w	r3, r3, #16777216	@ 0x1000000
    9a0a:	orr.w	r3, r3, #32768	@ 0x8000
    9a0e:	str	r3, [r4, #44]	@ 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    9a10:	ldr	r3, [r4, #44]	@ 0x2c
    9a12:	lsls	r2, r3, #7
    9a14:	bmi.n	9a10 <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    9a16:	mov.w	r0, #400	@ 0x190
    9a1a:	bl	92a0 <setSdclk(unsigned long)>
  if (enable) {
    9a1e:	bl	9968 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    9a22:	ldr	r3, [pc, #56]	@ (9a5c <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    9a24:	ldr	r2, [pc, #56]	@ (9a60 <initSDHC()+0xc8>)
    9a26:	str	r3, [r4, #52]	@ 0x34
    9a28:	ldr	r3, [pc, #56]	@ (9a64 <initSDHC()+0xcc>)
    9a2a:	str.w	r2, [r3, #504]	@ 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    9a2e:	ldr	r3, [pc, #56]	@ (9a68 <initSDHC()+0xd0>)
    9a30:	movs	r2, #96	@ 0x60
    9a32:	strb.w	r2, [r3, #110]	@ 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    9a36:	mov.w	r3, #3758153728	@ 0xe000e000
    9a3a:	mov.w	r2, #16384	@ 0x4000
    9a3e:	str.w	r2, [r3, #268]	@ 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    9a42:	ldr	r3, [r4, #44]	@ 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9a44:	ldr	r2, [pc, #16]	@ (9a58 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    9a46:	orr.w	r3, r3, #134217728	@ 0x8000000
    9a4a:	str	r3, [r4, #44]	@ 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9a4c:	ldr	r3, [r2, #44]	@ 0x2c
    9a4e:	lsls	r3, r3, #4
    9a50:	bmi.n	9a4c <initSDHC()+0xb4>
}
    9a52:	pop	{r4, pc}
    9a54:	.word	0x400d8000
    9a58:	.word	0x402c0000
    9a5c:	.word	0x117f000b
    9a60:	.word	0x000091cd
    9a64:	.word	0x20002800
    9a68:	.word	0xe000e400

00009a6c <SdioCard::type() const>:
  return  m_version2 ? m_highCapacity ?
    9a6c:	ldr	r3, [pc, #16]	@ (9a80 <SdioCard::type() const+0x14>)
    9a6e:	ldrb	r3, [r3, #0]
    9a70:	cbz	r3, 9a7c <SdioCard::type() const+0x10>
    9a72:	ldr	r3, [pc, #16]	@ (9a84 <SdioCard::type() const+0x18>)
    9a74:	ldrb	r0, [r3, #0]
    9a76:	adds	r0, #2
    9a78:	uxtb	r0, r0
    9a7a:	bx	lr
    9a7c:	movs	r0, #1
}
    9a7e:	bx	lr
    9a80:	.word	0x20012961
    9a84:	.word	0x20012962

00009a88 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    9a88:	ldr	r3, [pc, #76]	@ (9ad8 <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    9a8a:	push	{r4, r5, lr}
    9a8c:	mov	r4, r1
    9a8e:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    9a90:	ldr	r1, [r3, #0]
    9a92:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9a96:	cbz	r0, 9ad4 <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    9a98:	ldr	r3, [pc, #64]	@ (9adc <readReg16(unsigned long, void*)+0x54>)
    9a9a:	add.w	r5, r4, #15
    9a9e:	ldr	r2, [r3, #16]
    9aa0:	str	r2, [sp, #0]
    9aa2:	ldr	r2, [r3, #20]
    9aa4:	str	r2, [sp, #4]
    9aa6:	ldr	r2, [r3, #24]
    9aa8:	str	r2, [sp, #8]
    9aaa:	ldr	r3, [r3, #28]
    9aac:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    9aae:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9ab0:	bic.w	r2, r3, #3
    9ab4:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    9ab8:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9aba:	adds	r2, #16
    9abc:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    9abe:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9ac0:	add	r2, sp
    9ac2:	ldr.w	r2, [r2, #-16]
    9ac6:	lsr.w	r2, r2, r1
    9aca:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    9ace:	bne.n	9ab0 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    9ad0:	movs	r3, #0
    9ad2:	strb	r3, [r4, #15]
}
    9ad4:	add	sp, #20
    9ad6:	pop	{r4, r5, pc}
    9ad8:	.word	0x200116e0
    9adc:	.word	0x402c0000

00009ae0 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    9ae0:	ldr	r2, [pc, #96]	@ (9b44 <SdioCard::sectorCount()+0x64>)
    9ae2:	ldrb	r3, [r2, #0]
    9ae4:	cmp	r3, #63	@ 0x3f
    9ae6:	bhi.n	9b1e <SdioCard::sectorCount()+0x3e>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9ae8:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9aea:	ldrb	r0, [r2, #7]
    9aec:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9af0:	ldrb	r1, [r2, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9af2:	lsls	r0, r0, #2
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9af4:	ubfx	r1, r1, #0, #2
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9af8:	orr.w	r0, r0, r3, lsl #10
    9afc:	ldrb	r3, [r2, #8]
    9afe:	orr.w	r0, r0, r3, lsr #6
                          | csd->v1.c_size_mult_low;
    9b02:	ldrb	r3, [r2, #10]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9b04:	ldrb	r2, [r2, #5]
                          | csd->v1.c_size_mult_low;
    9b06:	ubfx	r3, r3, #7, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9b0a:	adds	r0, #1
    9b0c:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    9b10:	orr.w	r3, r3, r1, lsl #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9b14:	sxtb	r3, r3
    9b16:	add	r3, r2
    9b18:	subs	r3, #7
    9b1a:	lsls	r0, r3
    9b1c:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    9b1e:	and.w	r3, r3, #192	@ 0xc0
    9b22:	cmp	r3, #64	@ 0x40
    9b24:	bne.n	9b3e <SdioCard::sectorCount()+0x5e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9b26:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9b28:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9b2a:	and.w	r3, r3, #63	@ 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9b2e:	adds	r0, #1
    9b30:	add.w	r0, r0, r3, lsl #16
    9b34:	ldrb	r3, [r2, #8]
    9b36:	add.w	r0, r0, r3, lsl #8
    9b3a:	lsls	r0, r0, #10
    9b3c:	bx	lr
  } else {
    return 0;
    9b3e:	movs	r0, #0
}
    9b40:	bx	lr
    9b42:	nop
    9b44:	.word	0x20012974

00009b48 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    9b48:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b4a:	ldr	r4, [pc, #92]	@ (9ba8 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b4c:	movs	r1, #0
    9b4e:	ldr	r0, [pc, #92]	@ (9bac <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b50:	ldr	r3, [r4, #40]	@ 0x28
    9b52:	bic.w	r3, r3, #65536	@ 0x10000
    9b56:	str	r3, [r4, #40]	@ 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b58:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9b5c:	mov	r5, r0
    9b5e:	cbnz	r0, 9b74 <SdioCard::readStop()+0x2c>
  m_errorCode = code;
    9b60:	ldr	r3, [pc, #76]	@ (9bb0 <SdioCard::readStop()+0x68>)
    9b62:	movs	r2, #9
    9b64:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b66:	movw	r2, #573	@ 0x23d
    9b6a:	ldr	r3, [pc, #72]	@ (9bb4 <SdioCard::readStop()+0x6c>)
    return sdError(SD_CARD_ERROR_CMD12);
    9b6c:	movs	r5, #0
  m_errorLine = line;
    9b6e:	str	r2, [r3, #0]
}
    9b70:	mov	r0, r5
    9b72:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    9b74:	ldr	r0, [pc, #64]	@ (9bb8 <SdioCard::readStop()+0x70>)
    9b76:	bl	9650 <yieldTimeout(bool (*)())>
    9b7a:	cbz	r0, 9b8a <SdioCard::readStop()+0x42>
  m_errorCode = code;
    9b7c:	ldr	r3, [pc, #48]	@ (9bb0 <SdioCard::readStop()+0x68>)
    9b7e:	movs	r2, #10
    9b80:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b82:	mov.w	r2, #576	@ 0x240
    9b86:	ldr	r3, [pc, #44]	@ (9bb4 <SdioCard::readStop()+0x6c>)
    9b88:	b.n	9b6c <SdioCard::readStop()+0x24>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9b8a:	ldr	r3, [r4, #36]	@ 0x24
    9b8c:	lsls	r3, r3, #30
    9b8e:	bpl.n	9b70 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    9b90:	ldr	r1, [r4, #52]	@ 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9b92:	ldr	r3, [r4, #40]	@ 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9b94:	ldr	r2, [r4, #44]	@ 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9b96:	bic.w	r3, r3, #65536	@ 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9b9a:	orr.w	r2, r2, #67108864	@ 0x4000000
    9b9e:	str	r2, [r4, #44]	@ 0x2c
    SDHC_IRQSTATEN = irqsststen;
    9ba0:	str	r1, [r4, #52]	@ 0x34
    SDHC_PROCTL = proctl;
    9ba2:	str	r3, [r4, #40]	@ 0x28
    9ba4:	b.n	9b70 <SdioCard::readStop()+0x28>
    9ba6:	nop
    9ba8:	.word	0x402c0000
    9bac:	.word	0x0cdb0000
    9bb0:	.word	0x20002436
    9bb4:	.word	0x2000b4c8
    9bb8:	.word	0x00009241

00009bbc <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9bbc:	push	{r3, r4, r5, lr}
    9bbe:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    9bc0:	ldr	r0, [pc, #92]	@ (9c20 <cardCMD6(unsigned long, unsigned char*)+0x64>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9bc2:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    9bc4:	bl	93a4 <waitTimeout(bool (*)())>
    9bc8:	cbz	r0, 9bdc <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    9bca:	ldr	r3, [pc, #88]	@ (9c24 <cardCMD6(unsigned long, unsigned char*)+0x68>)
    9bcc:	movs	r2, #10
    9bce:	strb	r2, [r3, #0]
  m_errorLine = line;
    9bd0:	mov.w	r2, #408	@ 0x198
    9bd4:	ldr	r3, [pc, #80]	@ (9c28 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    return sdError(SD_CARD_ERROR_CMD13);
    9bd6:	movs	r0, #0
  m_errorLine = line;
    9bd8:	str	r2, [r3, #0]
}
    9bda:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    9bdc:	ldr	r3, [pc, #76]	@ (9c2c <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9bde:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9be0:	mov	r1, r4
  m_dmaBusy = true;
    9be2:	strb	r2, [r3, #0]
  m_irqstat = 0;
    9be4:	ldr	r3, [pc, #72]	@ (9c30 <cardCMD6(unsigned long, unsigned char*)+0x74>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9be6:	ldr	r2, [pc, #76]	@ (9c34 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  m_irqstat = 0;
    9be8:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    9bea:	ldr	r3, [pc, #76]	@ (9c38 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9bec:	ldr	r0, [pc, #76]	@ (9c3c <cardCMD6(unsigned long, unsigned char*)+0x80>)
  SDHC_DSADDR  = (uint32_t)status;
    9bee:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9bf0:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9bf2:	ldr	r2, [pc, #76]	@ (9c40 <cardCMD6(unsigned long, unsigned char*)+0x84>)
    9bf4:	str	r2, [r3, #56]	@ 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9bf6:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9bfa:	cbnz	r0, 9c0a <cardCMD6(unsigned long, unsigned char*)+0x4e>
  m_errorCode = code;
    9bfc:	ldr	r3, [pc, #36]	@ (9c24 <cardCMD6(unsigned long, unsigned char*)+0x68>)
    9bfe:	movs	r2, #4
    9c00:	strb	r2, [r3, #0]
  m_errorLine = line;
    9c02:	movw	r2, #415	@ 0x19f
    9c06:	ldr	r3, [pc, #32]	@ (9c28 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9c08:	b.n	9bd6 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  if (!waitDmaStatus()) {
    9c0a:	bl	968c <waitDmaStatus()>
    9c0e:	cmp	r0, #0
    9c10:	bne.n	9bda <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    9c12:	ldr	r3, [pc, #16]	@ (9c24 <cardCMD6(unsigned long, unsigned char*)+0x68>)
    9c14:	movs	r2, #37	@ 0x25
    9c16:	strb	r2, [r3, #0]
  m_errorLine = line;
    9c18:	mov.w	r2, #418	@ 0x1a2
    9c1c:	ldr	r3, [pc, #8]	@ (9c28 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9c1e:	b.n	9bd6 <cardCMD6(unsigned long, unsigned char*)+0x1a>
    9c20:	.word	0x00009455
    9c24:	.word	0x20002436
    9c28:	.word	0x2000b4c8
    9c2c:	.word	0x20012a24
    9c30:	.word	0x20011ce8
    9c34:	.word	0x00010040
    9c38:	.word	0x402c0000
    9c3c:	.word	0x063a0011
    9c40:	.word	0x117f0002

00009c44 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    9c44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    9c48:	movs	r4, #0
  m_initDone = false;
    9c4a:	ldr	r7, [pc, #480]	@ (9e2c <SdioCard::begin(SdioConfig)+0x1e8>)
  m_errorCode = SD_CARD_ERROR_NONE;
    9c4c:	ldr	r6, [pc, #480]	@ (9e30 <SdioCard::begin(SdioConfig)+0x1ec>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9c4e:	sub	sp, #68	@ 0x44
  m_highCapacity = false;
    9c50:	ldr.w	r8, [pc, #544]	@ 9e74 <SdioCard::begin(SdioConfig)+0x230>
  m_version2 = false;
    9c54:	ldr	r5, [pc, #476]	@ (9e34 <SdioCard::begin(SdioConfig)+0x1f0>)
  m_sdioConfig = sdioConfig;
    9c56:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    9c58:	strb	r4, [r0, #9]
  m_initDone = false;
    9c5a:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    9c5c:	strb	r4, [r6, #0]
  m_highCapacity = false;
    9c5e:	strb.w	r4, [r8]
  m_version2 = false;
    9c62:	strb	r4, [r5, #0]
  initSDHC();
    9c64:	bl	9998 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9c68:	mov	r1, r4
    9c6a:	mov	r0, r4
    9c6c:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9c70:	cbz	r0, 9ca4 <SdioCard::begin(SdioConfig)+0x60>
    9c72:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9c74:	ldr.w	r9, [pc, #512]	@ 9e78 <SdioCard::begin(SdioConfig)+0x234>
    9c78:	mov.w	r1, #426	@ 0x1aa
    9c7c:	mov	r0, r9
    9c7e:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9c82:	cbz	r0, 9cdc <SdioCard::begin(SdioConfig)+0x98>
      if (SDHC_CMDRSP0 != 0X1AA) {
    9c84:	ldr	r3, [pc, #432]	@ (9e38 <SdioCard::begin(SdioConfig)+0x1f4>)
    9c86:	ldr	r3, [r3, #16]
    9c88:	cmp.w	r3, #426	@ 0x1aa
    9c8c:	beq.n	9cd4 <SdioCard::begin(SdioConfig)+0x90>
    9c8e:	movs	r2, #6
    9c90:	mov.w	r3, #660	@ 0x294
  m_errorCode = code;
    9c94:	strb	r2, [r6, #0]
    return sdError(SD_CARD_ERROR_CMD0);
    9c96:	movs	r5, #0
  m_errorLine = line;
    9c98:	ldr	r2, [pc, #416]	@ (9e3c <SdioCard::begin(SdioConfig)+0x1f8>)
    9c9a:	str	r3, [r2, #0]
}
    9c9c:	mov	r0, r5
    9c9e:	add	sp, #68	@ 0x44
    9ca0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ca4:	movs	r2, #1
    9ca6:	movw	r3, #654	@ 0x28e
    9caa:	b.n	9c94 <SdioCard::begin(SdioConfig)+0x50>
    9cac:	movs	r2, #2
    9cae:	movw	r3, #689	@ 0x2b1
    9cb2:	b.n	9c94 <SdioCard::begin(SdioConfig)+0x50>
    9cb4:	movs	r2, #3
    9cb6:	mov.w	r3, #692	@ 0x2b4
    9cba:	b.n	9c94 <SdioCard::begin(SdioConfig)+0x50>
    9cbc:	movs	r2, #7
    9cbe:	movw	r3, #697	@ 0x2b9
    9cc2:	b.n	9c94 <SdioCard::begin(SdioConfig)+0x50>
    9cc4:	movs	r2, #8
    9cc6:	mov.w	r3, #700	@ 0x2bc
    9cca:	b.n	9c94 <SdioCard::begin(SdioConfig)+0x50>
    9ccc:	movs	r2, #5
    9cce:	movw	r3, #703	@ 0x2bf
    9cd2:	b.n	9c94 <SdioCard::begin(SdioConfig)+0x50>
      m_version2 = true;
    9cd4:	movs	r3, #1
    9cd6:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9cd8:	ldr	r5, [pc, #356]	@ (9e40 <SdioCard::begin(SdioConfig)+0x1fc>)
    9cda:	b.n	9cfc <SdioCard::begin(SdioConfig)+0xb8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9cdc:	subs	r4, #1
    9cde:	bne.n	9c78 <SdioCard::begin(SdioConfig)+0x34>
  if (!m_version2) {
    9ce0:	ldrb	r3, [r5, #0]
    9ce2:	cmp	r3, #0
    9ce4:	bne.n	9cd8 <SdioCard::begin(SdioConfig)+0x94>
    initSDHC();
    9ce6:	bl	9998 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    9cea:	mov	r1, r4
    9cec:	mov	r0, r4
    9cee:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9cf2:	ldrb	r3, [r5, #0]
    9cf4:	cmp	r3, #0
    9cf6:	bne.n	9cd8 <SdioCard::begin(SdioConfig)+0x94>
    9cf8:	mov.w	r5, #3145728	@ 0x300000
  int m = micros();
    9cfc:	bl	b7fc <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9d00:	ldr.w	r9, [pc, #356]	@ 9e68 <SdioCard::begin(SdioConfig)+0x224>
  int m = micros();
    9d04:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9d06:	ldr.w	sl, [pc, #372]	@ 9e7c <SdioCard::begin(SdioConfig)+0x238>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9d0a:	ldr.w	fp, [pc, #372]	@ 9e80 <SdioCard::begin(SdioConfig)+0x23c>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9d0e:	movs	r1, #0
    9d10:	mov	r0, r9
    9d12:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9d16:	cbnz	r0, 9d20 <SdioCard::begin(SdioConfig)+0xdc>
      return sdError(SD_CARD_ERROR_ACMD41);
    9d18:	movs	r2, #23
    9d1a:	mov.w	r3, #680	@ 0x2a8
    9d1e:	b.n	9c94 <SdioCard::begin(SdioConfig)+0x50>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9d20:	mov	r1, r5
    9d22:	mov	r0, sl
    9d24:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9d28:	cmp	r0, #0
    9d2a:	beq.n	9d18 <SdioCard::begin(SdioConfig)+0xd4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    9d2c:	bl	b7fc <micros>
    9d30:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9d32:	cmp	r0, fp
    9d34:	bhi.n	9d18 <SdioCard::begin(SdioConfig)+0xd4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9d36:	ldr	r3, [pc, #256]	@ (9e38 <SdioCard::begin(SdioConfig)+0x1f4>)
    9d38:	ldr	r2, [r3, #16]
    9d3a:	cmp	r2, #0
    9d3c:	bge.n	9d0e <SdioCard::begin(SdioConfig)+0xca>
  m_ocr = SDHC_CMDRSP0;
    9d3e:	ldr	r1, [r3, #16]
    9d40:	ldr	r2, [pc, #256]	@ (9e44 <SdioCard::begin(SdioConfig)+0x200>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9d42:	ldr	r0, [pc, #260]	@ (9e48 <SdioCard::begin(SdioConfig)+0x204>)
  m_ocr = SDHC_CMDRSP0;
    9d44:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9d46:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    9d48:	ldr	r3, [r3, #16]
    9d4a:	lsls	r2, r3, #1
    m_highCapacity = true;
    9d4c:	itt	mi
    9d4e:	movmi	r3, #1
    9d50:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9d54:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9d58:	cmp	r0, #0
    9d5a:	beq.n	9cac <SdioCard::begin(SdioConfig)+0x68>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    9d5c:	movs	r1, #0
    9d5e:	ldr	r0, [pc, #236]	@ (9e4c <SdioCard::begin(SdioConfig)+0x208>)
    9d60:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9d64:	cmp	r0, #0
    9d66:	beq.n	9cb4 <SdioCard::begin(SdioConfig)+0x70>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9d68:	ldr	r4, [pc, #204]	@ (9e38 <SdioCard::begin(SdioConfig)+0x1f4>)
    9d6a:	ldr	r5, [pc, #228]	@ (9e50 <SdioCard::begin(SdioConfig)+0x20c>)
    9d6c:	ldr	r3, [r4, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9d6e:	ldr	r1, [pc, #228]	@ (9e54 <SdioCard::begin(SdioConfig)+0x210>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9d70:	bfc	r3, #0, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9d74:	ldr	r0, [pc, #224]	@ (9e58 <SdioCard::begin(SdioConfig)+0x214>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9d76:	str	r3, [r5, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9d78:	bl	9a88 <readReg16(unsigned long, void*)>
    9d7c:	cmp	r0, #0
    9d7e:	beq.n	9cbc <SdioCard::begin(SdioConfig)+0x78>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9d80:	ldr	r1, [pc, #216]	@ (9e5c <SdioCard::begin(SdioConfig)+0x218>)
    9d82:	ldr	r0, [pc, #220]	@ (9e60 <SdioCard::begin(SdioConfig)+0x21c>)
    9d84:	bl	9a88 <readReg16(unsigned long, void*)>
    9d88:	cmp	r0, #0
    9d8a:	beq.n	9cc4 <SdioCard::begin(SdioConfig)+0x80>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9d8c:	ldr	r1, [r5, #0]
    9d8e:	ldr	r0, [pc, #212]	@ (9e64 <SdioCard::begin(SdioConfig)+0x220>)
    9d90:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9d94:	cmp	r0, #0
    9d96:	beq.n	9ccc <SdioCard::begin(SdioConfig)+0x88>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9d98:	ldr	r1, [r5, #0]
    9d9a:	ldr	r0, [pc, #204]	@ (9e68 <SdioCard::begin(SdioConfig)+0x224>)
    9d9c:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9da0:	cbz	r0, 9dea <SdioCard::begin(SdioConfig)+0x1a6>
    9da2:	movs	r1, #2
    9da4:	ldr	r0, [pc, #196]	@ (9e6c <SdioCard::begin(SdioConfig)+0x228>)
    9da6:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9daa:	mov	r5, r0
    9dac:	cbz	r0, 9dea <SdioCard::begin(SdioConfig)+0x1a6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9dae:	ldr	r3, [r4, #40]	@ 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9db0:	mov	r1, sp
    9db2:	mvn.w	r0, #4278190080	@ 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9db6:	bic.w	r3, r3, #6
    9dba:	str	r3, [r4, #40]	@ 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9dbc:	ldr	r3, [r4, #40]	@ 0x28
    9dbe:	orr.w	r3, r3, #2
    9dc2:	str	r3, [r4, #40]	@ 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9dc4:	mov.w	r3, #1048592	@ 0x100010
    9dc8:	str	r3, [r4, #68]	@ 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9dca:	bl	9bbc <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9dce:	cbnz	r0, 9df2 <SdioCard::begin(SdioConfig)+0x1ae>
  kHzSdClk = 25000;
    9dd0:	movw	r2, #25000	@ 0x61a8
    gpioMux(5);
    9dd4:	movs	r0, #5
    9dd6:	bl	91f8 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    9dda:	mov	r0, r2
    9ddc:	bl	92a0 <setSdclk(unsigned long)>
  if (enable) {
    9de0:	bl	9968 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    9de4:	movs	r3, #1
    9de6:	strb	r3, [r7, #0]
  return true;
    9de8:	b.n	9c9c <SdioCard::begin(SdioConfig)+0x58>
    return sdError(SD_CARD_ERROR_ACMD6);
    9dea:	movs	r2, #20
    9dec:	movw	r3, #707	@ 0x2c3
    9df0:	b.n	9c94 <SdioCard::begin(SdioConfig)+0x50>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9df2:	ldrb.w	r3, [sp, #13]
    9df6:	lsls	r3, r3, #30
    9df8:	bpl.n	9dd0 <SdioCard::begin(SdioConfig)+0x18c>
    uint32_t m_errorLine_before = m_errorLine;
    9dfa:	ldr	r4, [pc, #64]	@ (9e3c <SdioCard::begin(SdioConfig)+0x1f8>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9dfc:	mov	r1, sp
    9dfe:	ldr	r0, [pc, #112]	@ (9e70 <SdioCard::begin(SdioConfig)+0x22c>)
    uint8_t err_code_before = m_errorCode;
    9e00:	ldrb.w	r9, [r6]
    uint32_t m_errorLine_before = m_errorLine;
    9e04:	ldr.w	r8, [r4]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9e08:	bl	9bbc <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    9e0c:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    9e10:	cbz	r0, 9e1a <SdioCard::begin(SdioConfig)+0x1d6>
    9e12:	and.w	r3, r3, #15
    9e16:	cmp	r3, #1
    9e18:	beq.n	9e24 <SdioCard::begin(SdioConfig)+0x1e0>
      m_errorCode = err_code_before;
    9e1a:	strb.w	r9, [r6]
      m_errorLine = m_errorLine_before;
    9e1e:	str.w	r8, [r4]
    9e22:	b.n	9dd0 <SdioCard::begin(SdioConfig)+0x18c>
      kHzSdClk = 50000;
    9e24:	movw	r2, #50000	@ 0xc350
    9e28:	b.n	9dd4 <SdioCard::begin(SdioConfig)+0x190>
    9e2a:	nop
    9e2c:	.word	0x20012960
    9e30:	.word	0x20002436
    9e34:	.word	0x20012961
    9e38:	.word	0x402c0000
    9e3c:	.word	0x2000b4c8
    9e40:	.word	0x40300000
    9e44:	.word	0x200116dc
    9e48:	.word	0x02090000
    9e4c:	.word	0x031a0000
    9e50:	.word	0x200116e0
    9e54:	.word	0x20012974
    9e58:	.word	0x09090000
    9e5c:	.word	0x20012964
    9e60:	.word	0x0a090000
    9e64:	.word	0x071b0000
    9e68:	.word	0x371a0000
    9e6c:	.word	0x061a0000
    9e70:	.word	0x80fffff1
    9e74:	.word	0x20012962
    9e78:	.word	0x081a0000
    9e7c:	.word	0x29020000
    9e80:	.word	0x000f4240

00009e84 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    9e84:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9e86:	ldr	r3, [pc, #148]	@ (9f1c <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    9e88:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9e8a:	ldr	r2, [r3, #36]	@ 0x24
    9e8c:	lsls	r0, r2, #22
    9e8e:	bmi.n	9eac <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9e90:	ldr	r2, [r3, #40]	@ 0x28
    9e92:	bic.w	r2, r2, #65536	@ 0x10000
    9e96:	str	r2, [r3, #40]	@ 0x28
    noInterrupts();
    9e98:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9e9a:	ldr	r2, [r3, #40]	@ 0x28
    9e9c:	orr.w	r2, r2, #131072	@ 0x20000
    9ea0:	str	r2, [r3, #40]	@ 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9ea2:	ldr	r2, [r3, #40]	@ 0x28
    9ea4:	orr.w	r2, r2, #65536	@ 0x10000
    9ea8:	str	r2, [r3, #40]	@ 0x28
    interrupts();
    9eaa:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    9eac:	ldr	r0, [pc, #112]	@ (9f20 <SdioCard::readData(unsigned char*)+0x9c>)
    9eae:	bl	93a4 <waitTimeout(bool (*)())>
    9eb2:	cbz	r0, 9ec6 <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    9eb4:	ldr	r3, [pc, #108]	@ (9f24 <SdioCard::readData(unsigned char*)+0xa0>)
    9eb6:	movs	r2, #26
    9eb8:	strb	r2, [r3, #0]
  m_errorLine = line;
    9eba:	movw	r2, #854	@ 0x356
    9ebe:	ldr	r3, [pc, #104]	@ (9f28 <SdioCard::readData(unsigned char*)+0xa4>)
    9ec0:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_FIFO);
    9ec2:	movs	r0, #0
}
    9ec4:	pop	{r3, r4, r5, pc}
    9ec6:	add.w	r2, r4, #512	@ 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9eca:	ldr	r5, [pc, #80]	@ (9f1c <SdioCard::readData(unsigned char*)+0x98>)
    9ecc:	ldr	r3, [r5, #36]	@ 0x24
    9ece:	lsls	r1, r3, #20
    9ed0:	bpl.n	9ecc <SdioCard::readData(unsigned char*)+0x48>
    9ed2:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9ed4:	add.w	r1, r4, #60	@ 0x3c
      p32[i] = SDHC_DATPORT;
    9ed8:	ldr	r0, [r5, #32]
    9eda:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9ede:	cmp	r3, r1
    9ee0:	bne.n	9ed8 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    9ee2:	adds	r4, #64	@ 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9ee4:	cmp	r4, r2
    9ee6:	bne.n	9ecc <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    9ee8:	ldr	r0, [pc, #64]	@ (9f2c <SdioCard::readData(unsigned char*)+0xa8>)
    9eea:	bl	93a4 <waitTimeout(bool (*)())>
    9eee:	cbz	r0, 9efe <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    9ef0:	ldr	r3, [pc, #48]	@ (9f24 <SdioCard::readData(unsigned char*)+0xa0>)
    9ef2:	movs	r2, #29
    9ef4:	strb	r2, [r3, #0]
  m_errorLine = line;
    9ef6:	movw	r2, #865	@ 0x361
    9efa:	ldr	r3, [pc, #44]	@ (9f28 <SdioCard::readData(unsigned char*)+0xa4>)
    9efc:	b.n	9ec0 <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    9efe:	ldr	r2, [r5, #48]	@ 0x30
    9f00:	ldr	r3, [pc, #44]	@ (9f30 <SdioCard::readData(unsigned char*)+0xac>)
    9f02:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9f04:	ldr	r2, [r3, #0]
    9f06:	str	r2, [r5, #48]	@ 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9f08:	ldr	r2, [r3, #0]
    9f0a:	lsls	r2, r2, #30
    9f0c:	bpl.n	9ec2 <SdioCard::readData(unsigned char*)+0x3e>
    9f0e:	ldr	r2, [r3, #0]
    9f10:	ldr	r3, [pc, #32]	@ (9f34 <SdioCard::readData(unsigned char*)+0xb0>)
    9f12:	tst	r2, r3
    9f14:	ite	eq
    9f16:	moveq	r0, #1
    9f18:	movne	r0, #0
    9f1a:	b.n	9ec4 <SdioCard::readData(unsigned char*)+0x40>
    9f1c:	.word	0x402c0000
    9f20:	.word	0x00009261
    9f24:	.word	0x20002436
    9f28:	.word	0x2000b4c8
    9f2c:	.word	0x00009289
    9f30:	.word	0x20011ce8
    9f34:	.word	0x117f0000

00009f38 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9f38:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9f3a:	ldr	r0, [pc, #76]	@ (9f88 <SdioCard::readStart(unsigned long)+0x50>)
bool SdioCard::readStart(uint32_t sector) {
    9f3c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9f3e:	bl	9650 <yieldTimeout(bool (*)())>
    9f42:	cbz	r0, 9f56 <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    9f44:	ldr	r3, [pc, #68]	@ (9f8c <SdioCard::readStart(unsigned long)+0x54>)
    9f46:	movs	r2, #10
    9f48:	strb	r2, [r3, #0]
  m_errorLine = line;
    9f4a:	movw	r2, #945	@ 0x3b1
    9f4e:	ldr	r3, [pc, #64]	@ (9f90 <SdioCard::readStart(unsigned long)+0x58>)
    return sdError(SD_CARD_ERROR_CMD13);
    9f50:	movs	r0, #0
  m_errorLine = line;
    9f52:	str	r2, [r3, #0]
}
    9f54:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9f56:	ldr	r3, [pc, #60]	@ (9f94 <SdioCard::readStart(unsigned long)+0x5c>)
    9f58:	ldr	r2, [r3, #40]	@ 0x28
    9f5a:	orr.w	r2, r2, #65536	@ 0x10000
    9f5e:	str	r2, [r3, #40]	@ 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9f60:	mov.w	r2, #512	@ 0x200
    9f64:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9f66:	ldr	r3, [pc, #48]	@ (9f98 <SdioCard::readStart(unsigned long)+0x60>)
    9f68:	ldrb	r3, [r3, #0]
    9f6a:	cbnz	r3, 9f6e <SdioCard::readStart(unsigned long)+0x36>
    9f6c:	lsls	r4, r4, #9
    9f6e:	mov	r1, r4
    9f70:	ldr	r0, [pc, #40]	@ (9f9c <SdioCard::readStart(unsigned long)+0x64>)
    9f72:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    9f76:	cmp	r0, #0
    9f78:	bne.n	9f54 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    9f7a:	ldr	r3, [pc, #16]	@ (9f8c <SdioCard::readStart(unsigned long)+0x54>)
    9f7c:	movs	r2, #12
    9f7e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9f80:	movw	r2, #957	@ 0x3bd
    9f84:	ldr	r3, [pc, #8]	@ (9f90 <SdioCard::readStart(unsigned long)+0x58>)
    9f86:	b.n	9f50 <SdioCard::readStart(unsigned long)+0x18>
    9f88:	.word	0x00009455
    9f8c:	.word	0x20002436
    9f90:	.word	0x2000b4c8
    9f94:	.word	0x402c0000
    9f98:	.word	0x20012962
    9f9c:	.word	0x123a0030

00009fa0 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9fa0:	push	{r4, r5, r6, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    9fa2:	ldrb	r3, [r0, #8]
    9fa4:	mov	r5, r2
    9fa6:	sub.w	sp, sp, #512	@ 0x200
    9faa:	mov	r4, r0
  if (m_sdioConfig.useDma()) {
    9fac:	lsls	r2, r3, #31
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9fae:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    9fb0:	bpl.n	9ff2 <SdioCard::readSector(unsigned long, unsigned char*)+0x52>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9fb2:	lsls	r3, r5, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9fb4:	ldr	r0, [pc, #128]	@ (a038 <SdioCard::readSector(unsigned long, unsigned char*)+0x98>)
    9fb6:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9fba:	ite	ne
    9fbc:	movne	r4, sp
    9fbe:	moveq	r4, r5
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9fc0:	mov	r2, r4
    9fc2:	bl	96bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9fc6:	cbnz	r0, 9fda <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
  m_errorCode = code;
    9fc8:	ldr	r3, [pc, #112]	@ (a03c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    9fca:	movs	r2, #11
    9fcc:	strb	r2, [r3, #0]
  m_errorLine = line;
    9fce:	mov.w	r2, #884	@ 0x374
    9fd2:	ldr	r3, [pc, #108]	@ (a040 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    9fd4:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD17);
    9fd6:	movs	r0, #0
    9fd8:	b.n	9fec <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    if (ptr != dst) {
    9fda:	cmp	r4, r5
    9fdc:	beq.n	9fea <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
      memcpy(dst, aligned, 512);
    9fde:	mov.w	r2, #512	@ 0x200
    9fe2:	mov	r1, sp
    9fe4:	mov	r0, r5
    9fe6:	bl	a2f0 <memcpy>
  return true;
    9fea:	movs	r0, #1
}
    9fec:	add.w	sp, sp, #512	@ 0x200
    9ff0:	pop	{r4, r5, r6, pc}
    if (!waitTransferComplete()) {
    9ff2:	bl	956c <waitTransferComplete()>
    9ff6:	cmp	r0, #0
    9ff8:	beq.n	9fd6 <SdioCard::readSector(unsigned long, unsigned char*)+0x36>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9ffa:	ldrb	r3, [r4, #9]
    9ffc:	cmp	r3, #1
    9ffe:	bne.n	a006 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    a000:	ldr	r3, [r4, #4]
    a002:	cmp	r3, r6
    a004:	beq.n	a024 <SdioCard::readSector(unsigned long, unsigned char*)+0x84>
      if (!syncDevice()) {
    a006:	ldr	r3, [r4, #0]
    a008:	mov	r0, r4
    a00a:	ldr	r3, [r3, #32]
    a00c:	blx	r3
    a00e:	cmp	r0, #0
    a010:	beq.n	9fd6 <SdioCard::readSector(unsigned long, unsigned char*)+0x36>
      if (!readStart(sector)) {
    a012:	mov	r1, r6
    a014:	mov	r0, r4
    a016:	bl	9f38 <SdioCard::readStart(unsigned long)>
    a01a:	cmp	r0, #0
    a01c:	beq.n	9fd6 <SdioCard::readSector(unsigned long, unsigned char*)+0x36>
      m_curState = READ_STATE;
    a01e:	movs	r3, #1
      m_curSector = sector;
    a020:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    a022:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    a024:	mov	r1, r5
    a026:	mov	r0, r4
    a028:	bl	9e84 <SdioCard::readData(unsigned char*)>
    a02c:	cmp	r0, #0
    a02e:	beq.n	9fd6 <SdioCard::readSector(unsigned long, unsigned char*)+0x36>
    m_curSector++;
    a030:	ldr	r3, [r4, #4]
    a032:	adds	r3, #1
    a034:	str	r3, [r4, #4]
    a036:	b.n	9fea <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
    a038:	.word	0x113a0011
    a03c:	.word	0x20002436
    a040:	.word	0x2000b4c8

0000a044 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    a044:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a046:	ldr	r2, [pc, #72]	@ (a090 <SdioCard::stopTransmission(bool)+0x4c>)
bool SdioCard::stopTransmission(bool blocking) {
    a048:	mov	r5, r1
  m_curState = IDLE_STATE;
    a04a:	movs	r1, #0
    a04c:	strb	r1, [r0, #9]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a04e:	ldr	r3, [r2, #40]	@ 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a050:	ldr	r0, [pc, #64]	@ (a094 <SdioCard::stopTransmission(bool)+0x50>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a052:	bic.w	r3, r3, #65536	@ 0x10000
    a056:	str	r3, [r2, #40]	@ 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a058:	bl	93c8 <cardCommand(unsigned long, unsigned long)>
    a05c:	mov	r4, r0
    a05e:	cbnz	r0, a074 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    a060:	ldr	r3, [pc, #52]	@ (a098 <SdioCard::stopTransmission(bool)+0x54>)
    a062:	movs	r2, #9
    a064:	strb	r2, [r3, #0]
  m_errorLine = line;
    a066:	movw	r2, #979	@ 0x3d3
    a06a:	ldr	r3, [pc, #48]	@ (a09c <SdioCard::stopTransmission(bool)+0x58>)
    return sdError(SD_CARD_ERROR_CMD12);
    a06c:	movs	r4, #0
  m_errorLine = line;
    a06e:	str	r2, [r3, #0]
}
    a070:	mov	r0, r4
    a072:	pop	{r3, r4, r5, pc}
  if (blocking) {
    a074:	cmp	r5, #0
    a076:	beq.n	a070 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    a078:	ldr	r0, [pc, #36]	@ (a0a0 <SdioCard::stopTransmission(bool)+0x5c>)
    a07a:	bl	9650 <yieldTimeout(bool (*)())>
    a07e:	cmp	r0, #0
    a080:	beq.n	a070 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    a082:	ldr	r3, [pc, #20]	@ (a098 <SdioCard::stopTransmission(bool)+0x54>)
    a084:	movs	r2, #10
    a086:	strb	r2, [r3, #0]
  m_errorLine = line;
    a088:	movw	r2, #983	@ 0x3d7
    a08c:	ldr	r3, [pc, #12]	@ (a09c <SdioCard::stopTransmission(bool)+0x58>)
    a08e:	b.n	a06c <SdioCard::stopTransmission(bool)+0x28>
    a090:	.word	0x402c0000
    a094:	.word	0x0cdb0000
    a098:	.word	0x20002436
    a09c:	.word	0x2000b4c8
    a0a0:	.word	0x00009241

0000a0a4 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    a0a4:	push	{r4, lr}
    a0a6:	mov	r4, r0
  if (!waitTransferComplete()) {
    a0a8:	bl	956c <waitTransferComplete()>
    a0ac:	cbz	r0, a0be <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    a0ae:	ldrb	r3, [r4, #9]
    a0b0:	cbz	r3, a0be <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    a0b2:	mov	r0, r4
    a0b4:	movs	r1, #1
}
    a0b6:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    a0ba:	b.w	a044 <SdioCard::stopTransmission(bool)>
}
    a0be:	pop	{r4, pc}

0000a0c0 <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    a0c0:	str	r1, [r0, #100]	@ 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a0c2:	ldr	r3, [r0, #92]	@ 0x5c
			if (fifo > 0) return port().RDR;
    a0c4:	tst.w	r3, #2031616	@ 0x1f0000
    a0c8:	beq.n	a0c2 <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    a0ca:	ldr	r0, [r0, #116]	@ 0x74
	}
    a0cc:	uxtb	r0, r0
    a0ce:	bx	lr

0000a0d0 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    a0d0:	push	{r0, r1, r2, r4, r5, lr}
    a0d2:	add	r3, sp, #8
    a0d4:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    a0d8:	ldrb	r2, [r0, #19]
    a0da:	mov	r3, r1
    a0dc:	cmp	r2, #0
    a0de:	beq.n	a154 <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    a0e0:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    a0e2:	ldrb	r2, [r0, #19]
    a0e4:	lsls	r1, r2, #31
    a0e6:	bpl.n	a0fa <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    a0e8:	mov.w	r4, #3758153728	@ 0xe000e000
    a0ec:	ldr	r5, [r0, #20]
    a0ee:	ldr.w	r1, [r4, #384]	@ 0x180
    a0f2:	ands	r1, r5
    a0f4:	str	r1, [r0, #40]	@ 0x28
				NVIC_ICER0 = interruptSave[0];
    a0f6:	str.w	r1, [r4, #384]	@ 0x180
			if (interruptMasksUsed & 0x02) {
    a0fa:	lsls	r5, r2, #30
    a0fc:	bpl.n	a110 <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    a0fe:	mov.w	r4, #3758153728	@ 0xe000e000
    a102:	ldr	r5, [r0, #24]
    a104:	ldr.w	r1, [r4, #388]	@ 0x184
    a108:	ands	r1, r5
    a10a:	str	r1, [r0, #44]	@ 0x2c
				NVIC_ICER1 = interruptSave[1];
    a10c:	str.w	r1, [r4, #388]	@ 0x184
			if (interruptMasksUsed & 0x04) {
    a110:	lsls	r4, r2, #29
    a112:	bpl.n	a126 <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    a114:	mov.w	r4, #3758153728	@ 0xe000e000
    a118:	ldr	r5, [r0, #28]
    a11a:	ldr.w	r1, [r4, #392]	@ 0x188
    a11e:	ands	r1, r5
    a120:	str	r1, [r0, #48]	@ 0x30
				NVIC_ICER2 = interruptSave[2];
    a122:	str.w	r1, [r4, #392]	@ 0x188
			if (interruptMasksUsed & 0x08) {
    a126:	lsls	r1, r2, #28
    a128:	bpl.n	a13c <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    a12a:	mov.w	r4, #3758153728	@ 0xe000e000
    a12e:	ldr	r5, [r0, #32]
    a130:	ldr.w	r1, [r4, #396]	@ 0x18c
    a134:	ands	r1, r5
    a136:	str	r1, [r0, #52]	@ 0x34
				NVIC_ICER3 = interruptSave[3];
    a138:	str.w	r1, [r4, #396]	@ 0x18c
			if (interruptMasksUsed & 0x10) {
    a13c:	lsls	r2, r2, #27
    a13e:	bpl.n	a152 <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    a140:	mov.w	r1, #3758153728	@ 0xe000e000
    a144:	ldr	r4, [r0, #36]	@ 0x24
    a146:	ldr.w	r2, [r1, #400]	@ 0x190
    a14a:	ands	r2, r4
    a14c:	str	r2, [r0, #56]	@ 0x38
				NVIC_ICER4 = interruptSave[4];
    a14e:	str.w	r2, [r1, #400]	@ 0x190
			__enable_irq();
    a152:	cpsie	i
		if (settings.clock() != _clock) {
    a154:	ldr	r2, [r0, #8]
    a156:	cmp	r3, r2
    a158:	beq.n	a1a8 <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    a15a:	ldr	r2, [pc, #112]	@ (a1cc <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    a15c:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    a15e:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a160:	ldr	r1, [pc, #108]	@ (a1d0 <SPIClass::beginTransaction(SPISettings)+0x100>)
    a162:	ubfx	r4, r2, #4, #2
    a166:	ubfx	r2, r2, #26, #3
    a16a:	ldr.w	r4, [r1, r4, lsl #2]
    a16e:	adds	r2, #1
    a170:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    a174:	cbz	r3, a1c2 <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    a176:	cmp	r3, r1
    a178:	bhi.n	a192 <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    a17a:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    a17e:	udiv	r1, r1, r2
    a182:	cmp	r3, r1
    a184:	bcs.n	a188 <SPIClass::beginTransaction(SPISettings)+0xb8>
    a186:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    a188:	cmp.w	r2, #258	@ 0x102
    a18c:	bcs.n	a196 <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    a18e:	cmp	r2, #2
    a190:	bhi.n	a19a <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    a192:	movs	r3, #0
    a194:	b.n	a19c <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    a196:	movw	r2, #257	@ 0x101
				div = d-2;
    a19a:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    a19c:	lsrs	r2, r3, #1
    a19e:	add.w	r2, r2, r2, lsl #8
    a1a2:	orr.w	r2, r3, r2, lsl #8
    a1a6:	str	r2, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a1a8:	ldr	r3, [r0, #0]
		port().CR = 0;
    a1aa:	movs	r2, #0
    a1ac:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    a1ae:	movs	r2, #3
    a1b0:	str	r2, [r3, #36]	@ 0x24
		port().CCR = _ccr;
    a1b2:	ldr	r2, [r0, #12]
    a1b4:	str	r2, [r3, #64]	@ 0x40
		port().TCR = settings.tcr;
    a1b6:	ldr	r2, [sp, #4]
    a1b8:	str	r2, [r3, #96]	@ 0x60
		port().CR = LPSPI_CR_MEN;
    a1ba:	movs	r2, #1
    a1bc:	str	r2, [r3, #16]
	}
    a1be:	add	sp, #12
    a1c0:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    a1c2:	cmp	r4, r2
    a1c4:	bcc.n	a19c <SPIClass::beginTransaction(SPISettings)+0xcc>
			d = _clock ? clkhz/_clock : clkhz;
    a1c6:	mov	r2, r1
    a1c8:	b.n	a186 <SPIClass::beginTransaction(SPISettings)+0xb6>
    a1ca:	nop
    a1cc:	.word	0x400fc000
    a1d0:	.word	0x20000754

0000a1d4 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    a1d4:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    a1d8:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    a1da:	ldr	r0, [r0, #0]
    a1dc:	bl	a0d0 <SPIClass::beginTransaction(SPISettings)>
}
    a1e0:	pop	{r3, pc}

0000a1e2 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    a1e2:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    a1e4:	ldrb	r2, [r3, #19]
    a1e6:	cbz	r2, a22e <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    a1e8:	lsls	r0, r2, #31
    a1ea:	bpl.n	a1f6 <SdSpiArduinoDriver::deactivate()+0x14>
    a1ec:	ldr	r0, [r3, #40]	@ 0x28
    a1ee:	mov.w	r1, #3758153728	@ 0xe000e000
    a1f2:	str.w	r0, [r1, #256]	@ 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    a1f6:	lsls	r1, r2, #30
    a1f8:	bpl.n	a204 <SdSpiArduinoDriver::deactivate()+0x22>
    a1fa:	ldr	r0, [r3, #44]	@ 0x2c
    a1fc:	mov.w	r1, #3758153728	@ 0xe000e000
    a200:	str.w	r0, [r1, #260]	@ 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    a204:	lsls	r0, r2, #29
    a206:	bpl.n	a212 <SdSpiArduinoDriver::deactivate()+0x30>
    a208:	ldr	r0, [r3, #48]	@ 0x30
    a20a:	mov.w	r1, #3758153728	@ 0xe000e000
    a20e:	str.w	r0, [r1, #264]	@ 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a212:	lsls	r1, r2, #28
    a214:	bpl.n	a220 <SdSpiArduinoDriver::deactivate()+0x3e>
    a216:	ldr	r0, [r3, #52]	@ 0x34
    a218:	mov.w	r1, #3758153728	@ 0xe000e000
    a21c:	str.w	r0, [r1, #268]	@ 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a220:	lsls	r2, r2, #27
    a222:	bpl.n	a22e <SdSpiArduinoDriver::deactivate()+0x4c>
    a224:	ldr	r2, [r3, #56]	@ 0x38
    a226:	mov.w	r3, #3758153728	@ 0xe000e000
    a22a:	str.w	r2, [r3, #272]	@ 0x110
}
    a22e:	bx	lr

0000a230 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    a230:	ldr	r0, [r0, #0]
    a232:	b.w	4ff6 <SPIClass::end()>

0000a236 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    a236:	ldr	r3, [r0, #0]
    a238:	movs	r1, #255	@ 0xff
    a23a:	ldr	r0, [r3, #0]
    a23c:	b.w	a0c0 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a240 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a240:	push	{r4, r5, r6, lr}
    a242:	mov	r4, r1
    a244:	mov	r6, r2
    a246:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a248:	movs	r1, #255	@ 0xff
    a24a:	mov	r0, r4
    a24c:	bl	a2ac <memset>
		transfer(buf, buf, count);
    a250:	ldr	r0, [r5, #0]
    a252:	mov	r3, r6
    a254:	mov	r2, r4
    a256:	mov	r1, r4
    a258:	bl	4fa0 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a25c:	movs	r0, #0
    a25e:	pop	{r4, r5, r6, pc}

0000a260 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    a260:	ldr	r3, [r0, #0]
    a262:	ldr	r0, [r3, #0]
    a264:	b.w	a0c0 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a268 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a268:	subs	r3, r2, #1
    a26a:	cmp.w	r3, #512	@ 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    a26e:	push	{r4, r5, r6, lr}
    a270:	mov	r6, r0
    a272:	sub.w	sp, sp, #512	@ 0x200
    a276:	mov	r4, r1
    a278:	mov	r5, r2
  if (0 < count && count <= 512) {
    a27a:	bcc.n	a290 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    a27c:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a27e:	cmp	r4, r5
    a280:	beq.n	a2a2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    a282:	ldr	r3, [r6, #0]
    a284:	ldrb.w	r1, [r4], #1
    a288:	ldr	r0, [r3, #0]
    a28a:	bl	a0c0 <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    a28e:	b.n	a27e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    a290:	mov	r0, sp
    a292:	bl	a2f0 <memcpy>
    a296:	mov	r2, sp
    a298:	mov	r3, r5
    a29a:	ldr	r0, [r6, #0]
    a29c:	mov	r1, r2
    a29e:	bl	4fa0 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    a2a2:	add.w	sp, sp, #512	@ 0x200
    a2a6:	pop	{r4, r5, r6, pc}

0000a2a8 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    a2a8:	b.w	bf78 <digitalWrite>

0000a2ac <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    a2ac:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    a2ae:	cbz	r2, a2ec <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    a2b0:	cmp	r2, #16
    blt     .L_bytewise
    a2b2:	blt.n	a2e4 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    a2b4:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    a2b8:	cbz	r3, a2c8 <memset+0x1c>
    rsb     r3, #8
    a2ba:	rsb	r3, r3, #8
    subs    r2, r3
    a2be:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    a2c0:	subs	r3, #1
    strb    r1, [r0], #1
    a2c2:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    a2c6:	bgt.n	a2c0 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    a2c8:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    a2ca:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    a2ce:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    a2d2:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    a2d4:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    a2d6:	subs	r3, #1
    strd    r1, r12, [r0], #8
    a2d8:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    a2dc:	bgt.n	a2d6 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    a2de:	ands.w	r2, r2, #7
    beq     .L_done
    a2e2:	beq.n	a2ec <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    a2e4:	subs	r2, #1
    strb    r1, [r0], #1
    a2e6:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    a2ea:	bgt.n	a2e4 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    a2ec:	pop	{r0, pc}
    a2ee:	nop

0000a2f0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a2f0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a2f2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a2f6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a2fa:	bne.n	a3d8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a2fc:	subs	r2, #64	@ 0x40
	blo	.Lmid_block
    a2fe:	bcc.n	a384 <memcpy+0x94>
	/* Kernel loop for big block copy */
	.align 2
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
    a300:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a304:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a308:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a30c:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a310:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a314:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a318:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a31c:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a320:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a324:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a328:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a32c:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a330:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a334:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a338:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a33c:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a340:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a344:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a348:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a34c:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a350:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a354:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a358:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a35c:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a360:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a364:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a368:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a36c:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a370:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a374:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a378:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a37c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a380:	subs	r2, #64	@ 0x40
	bhs .Lbig_block_loop
    a382:	bcs.n	a300 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a384:	adds	r2, #48	@ 0x30
	blo	.Lcopy_word_by_word
    a386:	bcc.n	a3ac <memcpy+0xbc>
	/* Kernel loop for mid-block copy */
	.align 2
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
    a388:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a38c:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a390:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a394:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a398:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a39c:	str.w	r3, [r0], #4
	ldr	r3, [r1], #4
    a3a0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a3a4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a3a8:	subs	r2, #16
	bhs	.Lmid_block_loop
    a3aa:	bcs.n	a388 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a3ac:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a3ae:	bcc.n	a3bc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a3b0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a3b4:	str.w	r3, [r0], #4
	subs	r2, #4
    a3b8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a3ba:	bcs.n	a3b0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a3bc:	adds	r2, #4
	beq	.Ldone
    a3be:	beq.n	a3d2 <memcpy+0xe2>

	lsls	r2, r2, #31
    a3c0:	lsls	r2, r2, #31
	itt ne
    a3c2:	itt	ne
	ldrbne  r3, [r1], #1
    a3c4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a3c8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a3cc:	bcc.n	a3d2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a3ce:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a3d0:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a3d2:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a3d4:	bx	lr
    a3d6:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a3d8:	cmp	r2, #8
	blo	.Lbyte_copy
    a3da:	bcc.n	a404 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a3dc:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a3de:	beq.n	a2fc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a3e0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a3e4:	beq.n	a2fc <memcpy+0xc>

	rsb	r3, #4
    a3e6:	rsb	r3, r3, #4
	subs	r2, r3
    a3ea:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a3ec:	lsls	r3, r3, #31
	itt ne
    a3ee:	itt	ne
	ldrbne  r3, [r1], #1
    a3f0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a3f4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a3f8:	bcc.n	a2fc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a3fa:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a3fe:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a402:	b.n	a2fc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a404:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a406:	bcc.n	a3bc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a408:	subs	r2, #1
	ldrb    r3, [r1], #1
    a40a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a40e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a412:	bcs.n	a408 <memcpy+0x118>

	ldrb	r3, [r1]
    a414:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a416:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a418:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a41a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a41c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a41e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a420:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a422:	bx	lr

0000a424 <rx_queue_transfer>:
    a424:	push	{r3, r4, r5, r6, r7, lr}

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a426:	ldr	r4, [pc, #80]	@ (a478 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a428:	mov.w	r6, #3758153728	@ 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a42c:	ldr	r5, [pc, #76]	@ (a47c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a42e:	mov.w	r2, #131072	@ 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a432:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a436:	ldr	r7, [pc, #72]	@ (a480 <rx_queue_transfer+0x5c>)
    a438:	add.w	r5, r5, r0, lsl #5
{
    a43c:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a43e:	str.w	r2, [r6, #396]	@ 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a442:	mov	r1, r4
    a444:	ldrh	r2, [r7, #0]
    a446:	mov	r0, r5
    a448:	bl	b4c0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a44c:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a44e:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a450:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a454:	str.w	r4, [r6, #3932]	@ 0xf5c
		location += 32;
    a458:	adds	r4, #32
	} while (location < end_addr);
    a45a:	cmp	r3, r4
    a45c:	bhi.n	a454 <rx_queue_transfer+0x30>
	asm("dsb");
    a45e:	dsb	sy
	asm("isb");
    a462:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a466:	movs	r0, #3
    a468:	mov	r1, r5
    a46a:	bl	b50c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a46e:	mov.w	r3, #131072	@ 0x20000
    a472:	str.w	r3, [r6, #268]	@ 0x10c
}
    a476:	pop	{r3, r4, r5, r6, r7, pc}
    a478:	.word	0x20004f40
    a47c:	.word	0x20005f40
    a480:	.word	0x200128d6

0000a484 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a484:	ldr	r3, [r0, #4]
    a486:	ldr	r2, [pc, #136]	@ (a510 <rx_event+0x8c>)
    a488:	ubfx	r3, r3, #16, #15
{
    a48c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a490:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    a492:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a494:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a496:	cmp	r4, #0
    a498:	ble.n	a4e2 <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    a49a:	ldr	r2, [pc, #120]	@ (a514 <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    a49c:	uxth.w	sl, r4
		if (head != rx_tail) {
    a4a0:	ldr	r0, [pc, #116]	@ (a518 <rx_event+0x94>)
		uint32_t head = rx_head;
    a4a2:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    a4a4:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a4a6:	uxtb	r3, r1
		if (head != rx_tail) {
    a4a8:	ldr.w	r8, [pc, #128]	@ a52c <rx_event+0xa8>
    a4ac:	cmp	r1, r0
    a4ae:	ldr	r7, [pc, #108]	@ (a51c <rx_event+0x98>)
    a4b0:	ldr	r1, [pc, #108]	@ (a520 <rx_event+0x9c>)
    a4b2:	beq.n	a4ec <rx_event+0x68>
			uint32_t ii = rx_list[head];
    a4b4:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    a4b8:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a4bc:	rsb	r0, r6, #512	@ 0x200
    a4c0:	cmp	r4, r0
    a4c2:	bhi.n	a4ec <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a4c4:	ldr	r3, [pc, #92]	@ (a524 <rx_event+0xa0>)
    a4c6:	add.w	r0, r6, r9, lsl #9
    a4ca:	mov	r2, r4
				rx_count[ii] = count + len;
    a4cc:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a4ce:	add.w	r1, r3, r5, lsl #9
    a4d2:	add	r0, r3
    a4d4:	bl	a2f0 <memcpy>
				rx_available += len;
    a4d8:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    a4da:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    a4de:	add	r3, r4
    a4e0:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    a4e2:	mov	r0, r5
	}
}
    a4e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    a4e8:	b.w	a424 <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    a4ec:	adds	r3, #1
		rx_index[i] = 0;
    a4ee:	movs	r6, #0
    a4f0:	ldr	r0, [pc, #52]	@ (a528 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    a4f2:	cmp	r3, #9
		rx_count[i] = len;
    a4f4:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    a4f8:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a4fc:	it	cs
    a4fe:	movcs	r3, r6
		rx_list[head] = i;
    a500:	strb	r5, [r1, r3]
		rx_head = head;
    a502:	uxtb	r3, r3
    a504:	strb	r3, [r2, #0]
		rx_available += len;
    a506:	ldr	r3, [r7, #0]
    a508:	add	r4, r3
    a50a:	str	r4, [r7, #0]
}
    a50c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a510:	.word	0x200128d6
    a514:	.word	0x20012ab5
    a518:	.word	0x20012ac5
    a51c:	.word	0x200121a8
    a520:	.word	0x20012ab7
    a524:	.word	0x20004f40
    a528:	.word	0x200128c6
    a52c:	.word	0x200128b6

0000a530 <usb_serial_flush_callback>:
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    a530:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush) return;
    a534:	ldr	r3, [pc, #116]	@ (a5ac <usb_serial_flush_callback+0x7c>)
    a536:	ldrb	r3, [r3, #0]
    a538:	and.w	r7, r3, #255	@ 0xff
    a53c:	cbnz	r3, a5a6 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    a53e:	ldr	r3, [pc, #112]	@ (a5b0 <usb_serial_flush_callback+0x80>)
    a540:	ldrb	r3, [r3, #0]
    a542:	cbz	r3, a5a6 <usb_serial_flush_callback+0x76>
	if (tx_available == 0) return;
    a544:	ldr.w	r8, [pc, #120]	@ a5c0 <usb_serial_flush_callback+0x90>
    a548:	ldrh.w	r5, [r8]
    a54c:	cbz	r5, a5a6 <usb_serial_flush_callback+0x76>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a54e:	ldr	r6, [pc, #100]	@ (a5b4 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a550:	rsb	r5, r5, #2048	@ 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a554:	ldr	r2, [pc, #96]	@ (a5b8 <usb_serial_flush_callback+0x88>)
    a556:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a558:	ldr	r4, [pc, #96]	@ (a5bc <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a55a:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a55e:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a560:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a564:	mov	r3, r7
    a566:	mov	r0, r9
    a568:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a56a:	add	r5, r4
    a56c:	bl	b4c0 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    a570:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a574:	mov.w	r3, #3758153728	@ 0xe000e000
    a578:	str.w	r4, [r3, #3952]	@ 0xf70
		location += 32;
    a57c:	adds	r4, #32
	} while (location < end_addr);
    a57e:	cmp	r5, r4
    a580:	bhi.n	a578 <usb_serial_flush_callback+0x48>
	asm("dsb");
    a582:	dsb	sy
	asm("isb");
    a586:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a58a:	movs	r0, #3
    a58c:	mov	r1, r9
    a58e:	bl	b4ec <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a592:	ldrb	r3, [r6, #0]
    a594:	adds	r3, #1
    a596:	uxtb	r3, r3
    a598:	cmp	r3, #3
    a59a:	it	ls
    a59c:	movls	r7, r3
	tx_available = 0;
    a59e:	movs	r3, #0
	if (++tx_head >= TX_NUM) tx_head = 0;
    a5a0:	strb	r7, [r6, #0]
	tx_available = 0;
    a5a2:	strh.w	r3, [r8]
}
    a5a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a5aa:	nop
    a5ac:	.word	0x20012acb
    a5b0:	.word	0x20012acd
    a5b4:	.word	0x20012ac9
    a5b8:	.word	0x200060c0
    a5bc:	.word	0x200061c0
    a5c0:	.word	0x2001295a

0000a5c4 <usb_serial_reset>:
}
    a5c4:	bx	lr
	...

0000a5c8 <usb_serial_configure>:
	if (usb_high_speed) {
    a5c8:	ldr	r3, [pc, #180]	@ (a680 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a5ca:	movs	r2, #128	@ 0x80
    a5cc:	movs	r1, #0
    a5ce:	ldr	r0, [pc, #180]	@ (a684 <usb_serial_configure+0xbc>)
{
    a5d0:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a5d2:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a5d4:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a5d6:	ldr	r5, [pc, #176]	@ (a688 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    a5d8:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    a5da:	ldr	r6, [pc, #176]	@ (a68c <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    a5dc:	ite	ne
    a5de:	movne.w	r3, #512	@ 0x200
    a5e2:	moveq	r3, #64	@ 0x40
		tx_packet_size = CDC_TX_SIZE_480;
    a5e4:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a5e6:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a5e8:	bl	a2ac <memset>
	tx_head = 0;
    a5ec:	ldr	r3, [pc, #160]	@ (a690 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a5ee:	mov.w	r2, #256	@ 0x100
    a5f2:	mov	r1, r4
    a5f4:	ldr	r0, [pc, #156]	@ (a694 <usb_serial_configure+0xcc>)
	tx_head = 0;
    a5f6:	strb	r4, [r3, #0]
	tx_available = 0;
    a5f8:	ldr	r3, [pc, #156]	@ (a698 <usb_serial_configure+0xd0>)
    a5fa:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a5fc:	bl	a2ac <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a600:	movs	r2, #16
    a602:	mov	r1, r4
    a604:	ldr	r0, [pc, #148]	@ (a69c <usb_serial_configure+0xd4>)
    a606:	bl	a2ac <memset>
	memset(rx_index, 0, sizeof(rx_index));
    a60a:	movs	r2, #16
    a60c:	mov	r1, r4
    a60e:	ldr	r0, [pc, #144]	@ (a6a0 <usb_serial_configure+0xd8>)
    a610:	bl	a2ac <memset>
	rx_head = 0;
    a614:	ldr	r3, [pc, #140]	@ (a6a4 <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a616:	mov	r2, r4
    a618:	movs	r1, #16
	rx_head = 0;
    a61a:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a61c:	movs	r0, #2
	rx_tail = 0;
    a61e:	ldr	r3, [pc, #136]	@ (a6a8 <usb_serial_configure+0xe0>)
    a620:	strb	r4, [r3, #0]
	rx_available = 0;
    a622:	ldr	r3, [pc, #136]	@ (a6ac <usb_serial_configure+0xe4>)
    a624:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a626:	mov	r3, r4
    a628:	bl	b480 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a62c:	ldr	r3, [pc, #128]	@ (a6b0 <usb_serial_configure+0xe8>)
    a62e:	mov	r2, r4
    a630:	ldrh	r1, [r6, #0]
    a632:	movs	r0, #3
    a634:	bl	b444 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a638:	mov	r3, r4
    a63a:	movs	r2, #1
    a63c:	ldrh	r1, [r5, #0]
    a63e:	movs	r0, #3
    a640:	bl	b480 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a644:	mov	r0, r4
    a646:	adds	r4, #1
    a648:	bl	a424 <rx_queue_transfer>
    a64c:	cmp	r4, #8
    a64e:	bne.n	a644 <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    a650:	ldr	r3, [pc, #96]	@ (a6b4 <usb_serial_configure+0xec>)
    a652:	ldr	r2, [pc, #100]	@ (a6b8 <usb_serial_configure+0xf0>)
    a654:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    a656:	movs	r2, #0
    a658:	ldr	r3, [pc, #96]	@ (a6bc <usb_serial_configure+0xf4>)
    a65a:	str.w	r2, [r3, #132]	@ 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a65e:	movs	r2, #74	@ 0x4a
    a660:	str.w	r2, [r3, #128]	@ 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a664:	ldr.w	r2, [r3, #328]	@ 0x148
    a668:	orr.w	r2, r2, #16777216	@ 0x1000000
    a66c:	str.w	r2, [r3, #328]	@ 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    a670:	ldr	r3, [pc, #76]	@ (a6c0 <usb_serial_configure+0xf8>)
    a672:	cbz	r3, a67e <usb_serial_configure+0xb6>
    a674:	ldr	r2, [pc, #76]	@ (a6c4 <usb_serial_configure+0xfc>)
    a676:	ldrb	r3, [r2, #0]
    a678:	orr.w	r3, r3, #1
    a67c:	strb	r3, [r2, #0]
}
    a67e:	pop	{r4, r5, r6, pc}
    a680:	.word	0x20012ace
    a684:	.word	0x200060c0
    a688:	.word	0x2001295c
    a68c:	.word	0x200128d6
    a690:	.word	0x20012ac9
    a694:	.word	0x20005f40
    a698:	.word	0x2001295a
    a69c:	.word	0x200128b6
    a6a0:	.word	0x200128c6
    a6a4:	.word	0x20012ab5
    a6a8:	.word	0x20012ac5
    a6ac:	.word	0x200121a8
    a6b0:	.word	0x0000a485
    a6b4:	.word	0x2001287c
    a6b8:	.word	0x0000a531
    a6bc:	.word	0x402e0000
    a6c0:	.word	0x00000000
    a6c4:	.word	0x20012ad0

0000a6c8 <usb_serial_read>:
{
    a6c8:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a6cc:	mov.w	r3, #3758153728	@ 0xe000e000
    a6d0:	mov.w	r2, #131072	@ 0x20000
{
    a6d4:	mov	r7, r0
    a6d6:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a6d8:	str.w	r2, [r3, #396]	@ 0x18c
	uint32_t count=0;
    a6dc:	movs	r5, #0
	uint32_t tail = rx_tail;
    a6de:	ldr	r3, [pc, #160]	@ (a780 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a6e0:	ldr.w	fp, [pc, #176]	@ a794 <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    a6e4:	ldrb	r4, [r3, #0]
    a6e6:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    a6e8:	cmp	r5, r8
    a6ea:	bcs.n	a6f4 <usb_serial_read+0x2c>
    a6ec:	ldr	r3, [pc, #148]	@ (a784 <usb_serial_read+0xbc>)
    a6ee:	ldrb	r2, [r3, #0]
    a6f0:	cmp	r2, r4
    a6f2:	bne.n	a708 <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a6f4:	mov.w	r3, #3758153728	@ 0xe000e000
    a6f8:	mov.w	r2, #131072	@ 0x20000
}
    a6fc:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a6fe:	str.w	r2, [r3, #268]	@ 0x10c
}
    a702:	add	sp, #12
    a704:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    a708:	adds	r4, #1
		uint32_t i = rx_list[tail];
    a70a:	ldr	r3, [pc, #124]	@ (a788 <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a70c:	ldr	r0, [pc, #124]	@ (a78c <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a70e:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    a712:	cmp	r4, #9
    a714:	ldr.w	sl, [pc, #128]	@ a798 <usb_serial_read+0xd0>
    a718:	it	cs
    a71a:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a71c:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a720:	ldrh.w	r1, [fp, r9, lsl #1]
    a724:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a728:	ldr	r0, [pc, #100]	@ (a790 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a72a:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a72c:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    a730:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a732:	add	r1, r0
		if (avail > len) {
    a734:	bcs.n	a75c <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a736:	mov	r0, r7
    a738:	str	r2, [sp, #4]
    a73a:	bl	a2f0 <memcpy>
			rx_available -= len;
    a73e:	ldr.w	r1, [sl]
			rx_index[i] += len;
    a742:	ldr	r2, [sp, #4]
			rx_available -= len;
    a744:	sub.w	r1, r1, r8
    a748:	add	r1, r5
			count += len;
    a74a:	mov	r5, r8
			rx_available -= len;
    a74c:	str.w	r1, [sl]
			rx_index[i] += len;
    a750:	ldrh.w	r1, [fp, r9, lsl #1]
    a754:	add	r2, r1
    a756:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    a75a:	b.n	a6e8 <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a75c:	mov	r2, r6
    a75e:	mov	r0, r7
    a760:	bl	a2f0 <memcpy>
			rx_available -= avail;
    a764:	ldr.w	r2, [sl]
			rx_tail = tail;
    a768:	ldr	r3, [pc, #20]	@ (a780 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    a76a:	mov	r0, r9
			rx_available -= avail;
    a76c:	subs	r2, r2, r6
			p += avail;
    a76e:	add	r7, r6
			count += avail;
    a770:	add	r5, r6
			rx_available -= avail;
    a772:	str.w	r2, [sl]
			rx_tail = tail;
    a776:	uxtb	r2, r4
    a778:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    a77a:	bl	a424 <rx_queue_transfer>
    a77e:	b.n	a6e8 <usb_serial_read+0x20>
    a780:	.word	0x20012ac5
    a784:	.word	0x20012ab5
    a788:	.word	0x20012ab7
    a78c:	.word	0x200128b6
    a790:	.word	0x20004f40
    a794:	.word	0x200128c6
    a798:	.word	0x200121a8

0000a79c <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    a79c:	ldr	r3, [pc, #44]	@ (a7cc <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    a79e:	ldr	r1, [pc, #48]	@ (a7d0 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    a7a0:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    a7a2:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    a7a4:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a7a6:	cmp	r2, r1
    a7a8:	beq.n	a7c6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a7aa:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a7ac:	ldr	r2, [pc, #36]	@ (a7d4 <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    a7ae:	cmp	r3, #9
    a7b0:	it	cs
    a7b2:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a7b4:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a7b6:	ldr	r3, [pc, #32]	@ (a7d8 <usb_serial_peekchar+0x3c>)
    a7b8:	ldrh.w	r1, [r3, r2, lsl #1]
    a7bc:	ldr	r3, [pc, #28]	@ (a7dc <usb_serial_peekchar+0x40>)
    a7be:	add.w	r3, r3, r2, lsl #9
    a7c2:	ldrb	r0, [r3, r1]
    a7c4:	bx	lr
	if (tail == rx_head) return -1;
    a7c6:	mov.w	r0, #4294967295
}
    a7ca:	bx	lr
    a7cc:	.word	0x20012ac5
    a7d0:	.word	0x20012ab5
    a7d4:	.word	0x20012ab7
    a7d8:	.word	0x200128c6
    a7dc:	.word	0x20004f40

0000a7e0 <usb_serial_available>:
	uint32_t n = rx_available;
    a7e0:	ldr	r3, [pc, #12]	@ (a7f0 <usb_serial_available+0x10>)
{
    a7e2:	push	{r4, lr}
	uint32_t n = rx_available;
    a7e4:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a7e6:	cbnz	r4, a7ec <usb_serial_available+0xc>
    a7e8:	bl	c4a4 <yield>
}
    a7ec:	mov	r0, r4
    a7ee:	pop	{r4, pc}
    a7f0:	.word	0x200121a8

0000a7f4 <usb_serial_flush_input>:
{
    a7f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    a7f8:	ldr	r5, [pc, #64]	@ (a83c <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    a7fa:	ldr	r7, [pc, #68]	@ (a840 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    a7fc:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    a7fe:	ldr.w	r8, [pc, #80]	@ a850 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    a802:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    a804:	ldr	r6, [pc, #60]	@ (a844 <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    a806:	ldrb	r3, [r7, #0]
    a808:	cmp	r3, r4
    a80a:	bne.n	a810 <usb_serial_flush_input+0x1c>
}
    a80c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    a810:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    a812:	ldr	r2, [pc, #52]	@ (a848 <usb_serial_flush_input+0x54>)
    a814:	ldr	r1, [pc, #52]	@ (a84c <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    a816:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    a818:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    a81a:	it	cs
    a81c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a81e:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a822:	ldrh.w	r2, [r2, r0, lsl #1]
    a826:	ldrh.w	r1, [r1, r0, lsl #1]
    a82a:	subs	r2, r2, r1
    a82c:	subs	r3, r3, r2
    a82e:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    a830:	bl	a424 <rx_queue_transfer>
		rx_tail = tail;
    a834:	uxtb	r3, r4
    a836:	strb	r3, [r5, #0]
    a838:	b.n	a806 <usb_serial_flush_input+0x12>
    a83a:	nop
    a83c:	.word	0x20012ac5
    a840:	.word	0x20012ab5
    a844:	.word	0x200121a8
    a848:	.word	0x200128b6
    a84c:	.word	0x200128c6
    a850:	.word	0x20012ab7

0000a854 <usb_serial_getchar>:
{
    a854:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    a856:	movs	r1, #1
    a858:	add.w	r0, sp, #7
    a85c:	bl	a6c8 <usb_serial_read>
    a860:	cbz	r0, a86c <usb_serial_getchar+0x18>
    a862:	ldrb.w	r0, [sp, #7]
}
    a866:	add	sp, #12
    a868:	ldr.w	pc, [sp], #4
	return -1;
    a86c:	mov.w	r0, #4294967295
    a870:	b.n	a866 <usb_serial_getchar+0x12>
	...

0000a874 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a874:	ldr	r3, [pc, #352]	@ (a9d8 <usb_serial_write+0x164>)
{
    a876:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    a87a:	ldrb	r3, [r3, #0]
{
    a87c:	mov	r7, r0
    a87e:	mov	r6, r1
	if (!usb_configuration) return 0;
    a880:	and.w	r4, r3, #255	@ 0xff
    a884:	cmp	r3, #0
    a886:	beq.w	a99c <usb_serial_write+0x128>
	uint32_t sent=0;
    a88a:	movs	r4, #0
		tx_noautoflush = 1;
    a88c:	ldr.w	sl, [pc, #352]	@ a9f0 <usb_serial_write+0x17c>
		transfer_t *xfer = tx_transfer + tx_head;
    a890:	ldr.w	fp, [pc, #352]	@ a9f4 <usb_serial_write+0x180>
	while (size > 0) {
    a894:	cmp	r6, #0
    a896:	beq.w	a99c <usb_serial_write+0x128>
		tx_noautoflush = 1;
    a89a:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a89c:	ldrb.w	r2, [fp]
		uint32_t wait_begin_at=0;
    a8a0:	mov.w	r9, #0
		while (!tx_available) {
    a8a4:	ldr.w	r8, [pc, #336]	@ a9f8 <usb_serial_write+0x184>
		tx_noautoflush = 1;
    a8a8:	strb.w	r3, [sl]
		transfer_t *xfer = tx_transfer + tx_head;
    a8ac:	ldr	r3, [pc, #300]	@ (a9dc <usb_serial_write+0x168>)
		int waiting=0;
    a8ae:	mov	r5, r9
		transfer_t *xfer = tx_transfer + tx_head;
    a8b0:	add.w	r3, r3, r2, lsl #5
    a8b4:	str	r3, [sp, #0]
		while (!tx_available) {
    a8b6:	ldrh.w	r2, [r8]
    a8ba:	cbnz	r2, a8d8 <usb_serial_write+0x64>
			uint32_t status = usb_transfer_status(xfer);
    a8bc:	ldr	r0, [sp, #0]
    a8be:	str	r2, [sp, #4]
    a8c0:	bl	b528 <usb_transfer_status>
			if (!(status & 0x80)) {
    a8c4:	ands.w	r0, r0, #128	@ 0x80
    a8c8:	ldr	r2, [sp, #4]
    a8ca:	ldr	r3, [pc, #276]	@ (a9e0 <usb_serial_write+0x16c>)
    a8cc:	bne.n	a978 <usb_serial_write+0x104>
				tx_available = TX_SIZE;
    a8ce:	mov.w	r2, #2048	@ 0x800
				transmit_previous_timeout = 0;
    a8d2:	strb	r0, [r3, #0]
				tx_available = TX_SIZE;
    a8d4:	strh.w	r2, [r8]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a8d8:	ldrh.w	r9, [r8]
    a8dc:	ldrb.w	r3, [fp]
    a8e0:	rsb	r0, r9, #2048	@ 0x800
		if (size >= tx_available) {
    a8e4:	cmp	r9, r6
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a8e6:	mov.w	r5, r3, lsl #11
    a8ea:	add.w	r0, r0, r3, lsl #11
    a8ee:	ldr	r3, [pc, #244]	@ (a9e4 <usb_serial_write+0x170>)
    a8f0:	add	r0, r3
		if (size >= tx_available) {
    a8f2:	bhi.n	a9b8 <usb_serial_write+0x144>
			memcpy(txdata, data, tx_available);
    a8f4:	mov	r2, r9
    a8f6:	mov	r1, r7
    a8f8:	bl	a2f0 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a8fc:	ldr	r3, [pc, #228]	@ (a9e4 <usb_serial_write+0x170>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a8fe:	mov.w	r2, #2048	@ 0x800
    a902:	ldr	r0, [sp, #0]
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a904:	add	r5, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a906:	movs	r3, #0
    a908:	mov	r1, r5
    a90a:	bl	b4c0 <usb_prepare_transfer>
	asm("dsb");
    a90e:	dsb	sy
    a912:	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    a916:	add.w	r3, r5, #2048	@ 0x800
    a91a:	cmp	r3, r2
    a91c:	ite	cc
    a91e:	movcc	r3, #1
    a920:	movcs	r3, #64	@ 0x40
		SCB_CACHE_DCCIMVAC = location;
    a922:	mov.w	r2, #3758153728	@ 0xe000e000
    a926:	add.w	r3, r5, r3, lsl #5
    a92a:	str.w	r5, [r2, #3952]	@ 0xf70
		location += 32;
    a92e:	adds	r5, #32
	} while (location < end_addr);
    a930:	cmp	r5, r3
    a932:	bne.n	a92a <usb_serial_write+0xb6>
	asm("dsb");
    a934:	dsb	sy
	asm("isb");
    a938:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a93c:	movs	r0, #3
    a93e:	ldr	r1, [sp, #0]
    a940:	bl	b4ec <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a944:	ldrb.w	r3, [fp]
	USB1_GPTIMER0CTRL = 0;
    a948:	ldr	r2, [pc, #156]	@ (a9e8 <usb_serial_write+0x174>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    a94a:	adds	r3, #1
    a94c:	uxtb	r3, r3
    a94e:	cmp	r3, #4
    a950:	it	cs
    a952:	movcs	r3, #0
    a954:	strb.w	r3, [fp]
			size -= tx_available;
    a958:	ldrh.w	r3, [r8]
    a95c:	subs	r6, r6, r3
			sent += tx_available;
    a95e:	add	r4, r3
			data += tx_available;
    a960:	add	r7, r3
			tx_available = 0;
    a962:	movs	r3, #0
    a964:	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    a968:	str.w	r3, [r2, #132]	@ 0x84
		asm("dsb" ::: "memory");
    a96c:	dsb	sy
		tx_noautoflush = 0;
    a970:	movs	r3, #0
    a972:	strb.w	r3, [sl]
    a976:	b.n	a894 <usb_serial_write+0x20>
			asm("dsb" ::: "memory");
    a978:	dsb	sy
			tx_noautoflush = 0;
    a97c:	strb.w	r2, [sl]
			if (!waiting) {
    a980:	cbnz	r5, a988 <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    a982:	ldr	r2, [pc, #104]	@ (a9ec <usb_serial_write+0x178>)
    a984:	ldr.w	r9, [r2]
			if (transmit_previous_timeout) return sent;
    a988:	ldrb	r2, [r3, #0]
    a98a:	cbnz	r2, a99c <usb_serial_write+0x128>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a98c:	ldr	r2, [pc, #92]	@ (a9ec <usb_serial_write+0x178>)
    a98e:	ldr	r2, [r2, #0]
    a990:	sub.w	r2, r2, r9
    a994:	cmp	r2, #120	@ 0x78
    a996:	bls.n	a9a4 <usb_serial_write+0x130>
				transmit_previous_timeout = 1;
    a998:	movs	r2, #1
    a99a:	strb	r2, [r3, #0]
}
    a99c:	mov	r0, r4
    a99e:	add	sp, #12
    a9a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    a9a4:	ldr	r2, [pc, #48]	@ (a9d8 <usb_serial_write+0x164>)
    a9a6:	ldrb	r2, [r2, #0]
    a9a8:	cmp	r2, #0
    a9aa:	beq.n	a99c <usb_serial_write+0x128>
			tx_noautoflush = 1;
    a9ac:	movs	r5, #1
			yield();
    a9ae:	bl	c4a4 <yield>
			tx_noautoflush = 1;
    a9b2:	strb.w	r5, [sl]
    a9b6:	b.n	a8b6 <usb_serial_write+0x42>
			memcpy(txdata, data, size);
    a9b8:	mov	r2, r6
    a9ba:	mov	r1, r7
    a9bc:	bl	a2f0 <memcpy>
			tx_available -= size;
    a9c0:	sub.w	r9, r9, r6
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a9c4:	ldr	r3, [pc, #32]	@ (a9e8 <usb_serial_write+0x174>)
    a9c6:	mov.w	r2, #3221225472	@ 0xc0000000
			sent += size;
    a9ca:	add	r4, r6
			tx_available -= size;
    a9cc:	strh.w	r9, [r8]
			size = 0;
    a9d0:	movs	r6, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a9d2:	str.w	r2, [r3, #132]	@ 0x84
}
    a9d6:	b.n	a96c <usb_serial_write+0xf8>
    a9d8:	.word	0x20012acd
    a9dc:	.word	0x200060c0
    a9e0:	.word	0x20012ac8
    a9e4:	.word	0x200061c0
    a9e8:	.word	0x402e0000
    a9ec:	.word	0x20012864
    a9f0:	.word	0x20012acb
    a9f4:	.word	0x20012ac9
    a9f8:	.word	0x2001295a

0000a9fc <usb_serial_putchar>:
{
    a9fc:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    a9fe:	movs	r1, #1
{
    aa00:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    aa04:	add.w	r0, sp, #7
    aa08:	bl	a874 <usb_serial_write>
}
    aa0c:	add	sp, #12
    aa0e:	ldr.w	pc, [sp], #4
	...

0000aa14 <usb_serial_write_buffer_free>:
{
    aa14:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    aa18:	movs	r4, #0
	tx_noautoflush = 1;
    aa1a:	ldr	r7, [pc, #56]	@ (aa54 <usb_serial_write_buffer_free+0x40>)
    aa1c:	movs	r3, #1
    aa1e:	ldr	r6, [pc, #56]	@ (aa58 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    aa20:	mov	r5, r4
		if (i == tx_head) continue;
    aa22:	ldr.w	r8, [pc, #56]	@ aa5c <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    aa26:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    aa28:	ldrb.w	r3, [r8]
    aa2c:	cmp	r3, r4
    aa2e:	beq.n	aa3e <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    aa30:	mov	r0, r6
    aa32:	bl	b528 <usb_transfer_status>
    aa36:	lsls	r3, r0, #24
    aa38:	it	pl
    aa3a:	addpl.w	r5, r5, #2048	@ 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    aa3e:	adds	r4, #1
    aa40:	adds	r6, #32
    aa42:	cmp	r4, #4
    aa44:	bne.n	aa28 <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    aa46:	dsb	sy
	tx_noautoflush = 0;
    aa4a:	movs	r3, #0
}
    aa4c:	mov	r0, r5
	tx_noautoflush = 0;
    aa4e:	strb	r3, [r7, #0]
}
    aa50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa54:	.word	0x20012acb
    aa58:	.word	0x200060c0
    aa5c:	.word	0x20012ac9

0000aa60 <usb_serial_flush_output>:
{
    aa60:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    aa64:	ldr	r3, [pc, #112]	@ (aad8 <usb_serial_flush_output+0x78>)
    aa66:	ldrb	r3, [r3, #0]
    aa68:	cbz	r3, aad2 <usb_serial_flush_output+0x72>
	if (tx_available == 0) return;
    aa6a:	ldr	r7, [pc, #112]	@ (aadc <usb_serial_flush_output+0x7c>)
    aa6c:	ldrh	r2, [r7, #0]
    aa6e:	cbz	r2, aad2 <usb_serial_flush_output+0x72>
	tx_noautoflush = 1;
    aa70:	ldr	r6, [pc, #108]	@ (aae0 <usb_serial_flush_output+0x80>)
    aa72:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    aa74:	ldr	r5, [pc, #108]	@ (aae4 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    aa76:	rsb	r8, r2, #2048	@ 0x800
	tx_noautoflush = 1;
    aa7a:	strb	r3, [r6, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    aa7c:	ldr	r1, [pc, #104]	@ (aae8 <usb_serial_flush_output+0x88>)
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    aa7e:	mov	r2, r8
	transfer_t *xfer = tx_transfer + tx_head;
    aa80:	ldrb	r3, [r5, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    aa82:	ldr	r4, [pc, #104]	@ (aaec <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    aa84:	add.w	r9, r1, r3, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    aa88:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    aa8c:	movs	r3, #0
    aa8e:	mov	r0, r9
    aa90:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    aa92:	add	r8, r4
    aa94:	bl	b4c0 <usb_prepare_transfer>
	asm("dsb");
    aa98:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    aa9c:	mov.w	r3, #3758153728	@ 0xe000e000
    aaa0:	str.w	r4, [r3, #3952]	@ 0xf70
		location += 32;
    aaa4:	adds	r4, #32
	} while (location < end_addr);
    aaa6:	cmp	r8, r4
    aaa8:	bhi.n	aaa0 <usb_serial_flush_output+0x40>
	asm("dsb");
    aaaa:	dsb	sy
	asm("isb");
    aaae:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    aab2:	movs	r0, #3
    aab4:	mov	r1, r9
    aab6:	bl	b4ec <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    aaba:	ldrb	r3, [r5, #0]
    aabc:	adds	r3, #1
    aabe:	uxtb	r3, r3
    aac0:	cmp	r3, #4
    aac2:	it	cs
    aac4:	movcs	r3, #0
    aac6:	strb	r3, [r5, #0]
	tx_available = 0;
    aac8:	movs	r3, #0
    aaca:	strh	r3, [r7, #0]
	asm("dsb" ::: "memory");
    aacc:	dsb	sy
	tx_noautoflush = 0;
    aad0:	strb	r3, [r6, #0]
}
    aad2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aad6:	nop
    aad8:	.word	0x20012acd
    aadc:	.word	0x2001295a
    aae0:	.word	0x20012acb
    aae4:	.word	0x20012ac9
    aae8:	.word	0x200060c0
    aaec:	.word	0x200061c0

0000aaf0 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    aaf0:	ldr	r3, [pc, #524]	@ (ad00 <set_arm_clock+0x210>)
{
    aaf2:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    aaf4:	ldr	r2, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    aaf6:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    aaf8:	sub.w	r3, r3, #507904	@ 0x7c000
    aafc:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    aafe:	ldr	r3, [pc, #516]	@ (ad04 <set_arm_clock+0x214>)
    ab00:	cmp	r0, r3
    ab02:	bls.n	abbe <set_arm_clock+0xce>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    ab04:	ldr	r3, [pc, #512]	@ (ad08 <set_arm_clock+0x218>)
    ab06:	cmp	r0, r3
    ab08:	bls.n	abd0 <set_arm_clock+0xe0>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    ab0a:	ldr	r1, [pc, #512]	@ (ad0c <set_arm_clock+0x21c>)
    ab0c:	subs	r3, r0, r3
    ab0e:	udiv	r3, r3, r1
    ab12:	movs	r1, #25
    ab14:	muls	r3, r1
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
    ab16:	movw	r1, #1575	@ 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    ab1a:	addw	r3, r3, #1250	@ 0x4e2
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
    ab1e:	cmp	r3, r1
    ab20:	it	cs
    ab22:	movcs	r3, r1
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ab24:	ldr	r6, [pc, #472]	@ (ad00 <set_arm_clock+0x210>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ab26:	sub.w	r3, r3, #800	@ 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ab2a:	ldr.w	r1, [r6, #128]	@ 0x80
    ab2e:	orr.w	r1, r1, #192	@ 0xc0
    ab32:	str.w	r1, [r6, #128]	@ 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ab36:	movs	r1, #25
    ab38:	udiv	r3, r3, r1
    ab3c:	and.w	r1, r4, #31
    ab40:	cmp	r1, r3
    ab42:	bcs.n	ab54 <set_arm_clock+0x64>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    ab44:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    ab48:	ldr	r1, [pc, #452]	@ (ad10 <set_arm_clock+0x220>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    ab4a:	orrs	r4, r3
		DCDC_REG3 = dcdc;
    ab4c:	str	r4, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ab4e:	ldr	r6, [r1, #0]
    ab50:	cmp	r6, #0
    ab52:	bge.n	ab4e <set_arm_clock+0x5e>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    ab54:	ands.w	r1, r2, #33554432	@ 0x2000000
    ab58:	bne.n	ab9c <set_arm_clock+0xac>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    ab5a:	ldr	r6, [pc, #440]	@ (ad14 <set_arm_clock+0x224>)
    ab5c:	ldr	r7, [pc, #440]	@ (ad18 <set_arm_clock+0x228>)
    ab5e:	ldr	r6, [r6, #16]
    ab60:	ands	r6, r7
			printf("USB PLL is running, so we can use 120 MHz\n");
			sel = 0;
    ab62:	cmp	r6, r7
    ab64:	itet	eq
    ab66:	moveq	r1, #3
    ab68:	movne	r6, #1
    ab6a:	moveq	r6, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    ab6c:	lsls	r7, r1, #27
    ab6e:	eor.w	r1, r2, r1, lsl #27
    ab72:	tst.w	r1, #939524096	@ 0x38000000
    ab76:	beq.n	ab82 <set_arm_clock+0x92>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    ab78:	bic.w	r2, r2, #939524096	@ 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    ab7c:	ldr	r1, [pc, #384]	@ (ad00 <set_arm_clock+0x210>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    ab7e:	orrs	r2, r7
			CCM_CBCDR = cbcdr;
    ab80:	str	r2, [r1, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    ab82:	lsls	r1, r6, #12
    ab84:	eor.w	r6, r5, r6, lsl #12
    ab88:	tst.w	r6, #12288	@ 0x3000
    ab8c:	bne.n	abd6 <set_arm_clock+0xe6>
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    ab8e:	orr.w	r2, r2, #33554432	@ 0x2000000
		CCM_CBCDR = cbcdr;
    ab92:	ldr	r1, [pc, #364]	@ (ad00 <set_arm_clock+0x210>)
    ab94:	str	r2, [r1, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ab96:	ldr	r5, [r1, #72]	@ 0x48
    ab98:	lsls	r7, r5, #26
    ab9a:	bmi.n	ab96 <set_arm_clock+0xa6>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    ab9c:	movs	r5, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ab9e:	ldr	r7, [pc, #380]	@ (ad1c <set_arm_clock+0x22c>)
	uint32_t div_arm = 1;
    aba0:	mov	r6, r5
	while (frequency * div_arm * div_ahb < 648000000) {
    aba2:	mul.w	r1, r5, r6
    aba6:	muls	r1, r0
    aba8:	cmp	r1, r7
    abaa:	bls.n	abe8 <set_arm_clock+0xf8>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    abac:	add.w	r1, r1, #5996544	@ 0x5b8000
	if (mult > 108) mult = 108;
    abb0:	ldr	r0, [pc, #364]	@ (ad20 <set_arm_clock+0x230>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    abb2:	add.w	r1, r1, #3456	@ 0xd80
	if (mult > 108) mult = 108;
    abb6:	cmp	r1, r0
    abb8:	bls.n	abfc <set_arm_clock+0x10c>
    abba:	movs	r1, #108	@ 0x6c
    abbc:	b.n	ac06 <set_arm_clock+0x116>
	uint32_t voltage = 1150; // default = 1.15V
    abbe:	ldr	r6, [pc, #356]	@ (ad24 <set_arm_clock+0x234>)
    abc0:	movw	r3, #950	@ 0x3b6
    abc4:	movw	r1, #1150	@ 0x47e
    abc8:	cmp	r0, r6
    abca:	it	hi
    abcc:	movhi	r3, r1
    abce:	b.n	ab24 <set_arm_clock+0x34>
		voltage = 1250; // 1.25V
    abd0:	movw	r3, #1250	@ 0x4e2
    abd4:	b.n	ab24 <set_arm_clock+0x34>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    abd6:	bic.w	r5, r5, #12288	@ 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    abda:	orrs	r1, r5
			CCM_CBCMR = cbcmr;
    abdc:	ldr	r5, [pc, #288]	@ (ad00 <set_arm_clock+0x210>)
    abde:	str	r1, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    abe0:	ldr	r1, [r5, #72]	@ 0x48
    abe2:	lsls	r1, r1, #28
    abe4:	bmi.n	abe0 <set_arm_clock+0xf0>
    abe6:	b.n	ab8e <set_arm_clock+0x9e>
		if (div_arm < 8) {
    abe8:	cmp	r6, #8
    abea:	beq.n	abf0 <set_arm_clock+0x100>
			div_arm = div_arm + 1;
    abec:	adds	r6, #1
    abee:	b.n	aba2 <set_arm_clock+0xb2>
			if (div_ahb < 5) {
    abf0:	cmp	r5, #4
    abf2:	bls.n	acc0 <set_arm_clock+0x1d0>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    abf4:	add.w	r1, r1, #5996544	@ 0x5b8000
    abf8:	add.w	r1, r1, #3456	@ 0xd80
	if (mult < 54) mult = 54;
    abfc:	cmp	r1, r7
    abfe:	bls.n	acc6 <set_arm_clock+0x1d6>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ac00:	ldr	r0, [pc, #292]	@ (ad28 <set_arm_clock+0x238>)
    ac02:	udiv	r1, r1, r0

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ac06:	ldr	r7, [pc, #268]	@ (ad14 <set_arm_clock+0x224>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    ac08:	ldr	r0, [pc, #284]	@ (ad28 <set_arm_clock+0x238>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ac0a:	ldr.w	ip, [r7]
    ac0e:	ldr.w	lr, [pc, #312]	@ ad48 <set_arm_clock+0x258>
	frequency = mult * 12000000 / div_arm / div_ahb;
    ac12:	muls	r0, r1
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ac14:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ac18:	orr.w	ip, r1, #2147483648	@ 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    ac1c:	udiv	r0, r0, r6
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ac20:	orr.w	ip, ip, #8192	@ 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ac24:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    ac26:	udiv	r0, r0, r5
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ac2a:	bne.n	acca <set_arm_clock+0x1da>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    ac2c:	ldr	r7, [pc, #208]	@ (ad00 <set_arm_clock+0x210>)
    ac2e:	subs	r1, r6, #1
    ac30:	ldr.w	ip, [r7, #16]
    ac34:	and.w	r6, ip, #7
    ac38:	cmp	r6, r1
    ac3a:	bne.n	ace0 <set_arm_clock+0x1f0>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ac3c:	subs	r5, #1
    ac3e:	lsls	r1, r5, #10
    ac40:	eor.w	r5, r2, r5, lsl #10
    ac44:	tst.w	r5, #7168	@ 0x1c00
    ac48:	bne.n	acea <set_arm_clock+0x1fa>
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ac4a:	ldr	r1, [pc, #224]	@ (ad2c <set_arm_clock+0x23c>)
	if (div_ipg > 4) div_ipg = 4;
    ac4c:	ldr	r5, [pc, #224]	@ (ad30 <set_arm_clock+0x240>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ac4e:	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    ac50:	cmp	r1, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ac52:	itet	ls
    ac54:	ldrls	r6, [pc, #220]	@ (ad34 <set_arm_clock+0x244>)
	if (div_ipg > 4) div_ipg = 4;
    ac56:	movhi	r6, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ac58:	udivls	r6, r1, r6
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    ac5c:	subs	r5, r6, #1
    ac5e:	lsls	r1, r5, #8
    ac60:	eor.w	r5, r2, r5, lsl #8
    ac64:	tst.w	r5, #768	@ 0x300
    ac68:	ldr	r5, [pc, #148]	@ (ad00 <set_arm_clock+0x210>)
    ac6a:	beq.n	ac78 <set_arm_clock+0x188>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    ac6c:	bic.w	r2, r2, #768	@ 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    ac70:	and.w	r1, r1, #768	@ 0x300
    ac74:	orrs	r1, r2
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    ac76:	str	r1, [r5, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    ac78:	ldr	r2, [r5, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ac7a:	ldr	r1, [pc, #132]	@ (ad00 <set_arm_clock+0x210>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    ac7c:	bic.w	r2, r2, #33554432	@ 0x2000000
    ac80:	str	r2, [r5, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ac82:	ldr	r2, [r1, #72]	@ 0x48
    ac84:	lsls	r2, r2, #26
    ac86:	bmi.n	ac82 <set_arm_clock+0x192>

	F_CPU_ACTUAL = frequency;
    ac88:	ldr	r2, [pc, #172]	@ (ad38 <set_arm_clock+0x248>)
	F_BUS_ACTUAL = frequency / div_ipg;
    ac8a:	ldr	r1, [pc, #176]	@ (ad3c <set_arm_clock+0x24c>)
	F_CPU_ACTUAL = frequency;
    ac8c:	str	r0, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ac8e:	mov.w	r2, #4294967295
	F_BUS_ACTUAL = frequency / div_ipg;
    ac92:	udiv	r6, r0, r6
    ac96:	str	r6, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    ac98:	ldr	r1, [pc, #164]	@ (ad40 <set_arm_clock+0x250>)
    ac9a:	udiv	r1, r0, r1
    ac9e:	udiv	r2, r2, r1
    aca2:	ldr	r1, [pc, #160]	@ (ad44 <set_arm_clock+0x254>)
    aca4:	str	r2, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    aca6:	and.w	r2, r4, #31
    acaa:	cmp	r3, r2
    acac:	bcs.n	acbe <set_arm_clock+0x1ce>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    acae:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    acb2:	ldr	r2, [pc, #92]	@ (ad10 <set_arm_clock+0x220>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    acb4:	orrs	r3, r4
		DCDC_REG3 = dcdc;
    acb6:	str	r3, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    acb8:	ldr	r3, [r2, #0]
    acba:	cmp	r3, #0
    acbc:	bge.n	acb8 <set_arm_clock+0x1c8>
	}

	return frequency;
}
    acbe:	pop	{r4, r5, r6, r7, pc}
				div_ahb = div_ahb + 1;
    acc0:	adds	r5, #1
				div_arm = 1;
    acc2:	movs	r6, #1
    acc4:	b.n	aba2 <set_arm_clock+0xb2>
	if (mult < 54) mult = 54;
    acc6:	movs	r1, #54	@ 0x36
    acc8:	b.n	ac06 <set_arm_clock+0x116>
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    acca:	mov.w	ip, #4096	@ 0x1000
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    acce:	orr.w	r1, r1, #8192	@ 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    acd2:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    acd6:	str	r1, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    acd8:	ldr	r1, [r7, #0]
    acda:	cmp	r1, #0
    acdc:	bge.n	acd8 <set_arm_clock+0x1e8>
    acde:	b.n	ac2c <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    ace0:	str	r1, [r7, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    ace2:	ldr	r1, [r7, #72]	@ 0x48
    ace4:	lsls	r6, r1, #15
    ace6:	bmi.n	ace2 <set_arm_clock+0x1f2>
    ace8:	b.n	ac3c <set_arm_clock+0x14c>
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    acea:	and.w	r1, r1, #7168	@ 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    acee:	bic.w	r2, r2, #7168	@ 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    acf2:	orrs	r2, r1
		CCM_CBCDR = cbcdr;
    acf4:	ldr	r1, [pc, #8]	@ (ad00 <set_arm_clock+0x210>)
    acf6:	str	r2, [r1, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    acf8:	ldr	r5, [r1, #72]	@ 0x48
    acfa:	lsls	r5, r5, #30
    acfc:	bmi.n	acf8 <set_arm_clock+0x208>
    acfe:	b.n	ac4a <set_arm_clock+0x15a>
    ad00:	.word	0x400fc000
    ad04:	.word	0x1f78a400
    ad08:	.word	0x23c34600
    ad0c:	.word	0x01ab3f00
    ad10:	.word	0x40080000
    ad14:	.word	0x400d8000
    ad18:	.word	0x80003040
    ad1c:	.word	0x269fb1ff
    ad20:	.word	0x4df67eff
    ad24:	.word	0x016e3600
    ad28:	.word	0x00b71b00
    ad2c:	.word	0x08f0d17f
    ad30:	.word	0x2cb4177f
    ad34:	.word	0x08f0d180
    ad38:	.word	0x20001e54
    ad3c:	.word	0x20001e50
    ad40:	.word	0x000f4240
    ad44:	.word	0x200121d0
    ad48:	.word	0x8001307f

0000ad4c <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    ad4c:	push	{r4, r5, lr}
    ad4e:	ldr	r4, [pc, #136]	@ (add8 <endpoint0_receive+0x8c>)
	//printf("rx %lu\n", len);
	if (len > 0) {
    ad50:	cbz	r1, ad94 <endpoint0_receive+0x48>
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ad52:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ad54:	ldr	r3, [pc, #132]	@ (addc <endpoint0_receive+0x90>)
    ad56:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ad58:	orr.w	r1, r1, #128	@ 0x80
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ad5c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ad5e:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ad60:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ad62:	add.w	r1, r0, #4096	@ 0x1000
		endpoint0_transfer_data.next = 1;
    ad66:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ad68:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ad6a:	add.w	r1, r0, #8192	@ 0x2000
    ad6e:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ad70:	add.w	r1, r0, #12288	@ 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ad74:	add.w	r0, r0, #16384	@ 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ad78:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ad7a:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    ad7c:	movs	r3, #0
    ad7e:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    ad80:	ldr	r3, [pc, #92]	@ (ade0 <endpoint0_receive+0x94>)
    ad82:	ldr.w	r1, [r3, #432]	@ 0x1b0
    ad86:	orrs	r1, r5
    ad88:	str.w	r1, [r3, #432]	@ 0x1b0
		while (USB1_ENDPTPRIME) ;
    ad8c:	ldr.w	r1, [r3, #432]	@ 0x1b0
    ad90:	cmp	r1, #0
    ad92:	bne.n	ad8c <endpoint0_receive+0x40>
	}
	endpoint0_transfer_ack.next = 1;
    ad94:	ldr	r3, [pc, #76]	@ (ade4 <endpoint0_receive+0x98>)
    ad96:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ad98:	cmp	r2, #0
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ad9a:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    ad9e:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ada0:	movw	r1, #32896	@ 0x8080
    ada4:	it	eq
    ada6:	moveq	r1, #128	@ 0x80
    ada8:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    adaa:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    adac:	strd	r3, r1, [r4, #72]	@ 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    adb0:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    adb2:	mov.w	r1, #65537	@ 0x10001
    adb6:	ldr	r3, [pc, #40]	@ (ade0 <endpoint0_receive+0x94>)
    adb8:	str.w	r1, [r3, #444]	@ 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    adbc:	ldr.w	r1, [r3, #432]	@ 0x1b0
    adc0:	orr.w	r1, r1, #65536	@ 0x10000
    adc4:	str.w	r1, [r3, #432]	@ 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    adc8:	ldr	r1, [pc, #28]	@ (ade8 <endpoint0_receive+0x9c>)
    adca:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    adcc:	ldr.w	r2, [r3, #432]	@ 0x1b0
    add0:	cmp	r2, #0
    add2:	bne.n	adcc <endpoint0_receive+0x80>
}
    add4:	pop	{r4, r5, pc}
    add6:	nop
    add8:	.word	0x20000000
    addc:	.word	0x20002ae0
    ade0:	.word	0x402e0000
    ade4:	.word	0x20002ac0
    ade8:	.word	0x2001208c

0000adec <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    adec:	ldr	r3, [r0, #56]	@ 0x38
{
    adee:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    adf0:	cbz	r3, adfa <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    adf2:	ldr	r3, [r2, #4]
    adf4:	orr.w	r3, r3, #32768	@ 0x8000
    adf8:	str	r3, [r2, #4]
	}
	__disable_irq();
    adfa:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    adfc:	ldr	r4, [r0, #52]	@ 0x34
	if (last) {
    adfe:	ldr	r3, [pc, #96]	@ (ae60 <schedule_transfer+0x74>)
    ae00:	cbz	r4, ae4c <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    ae02:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ae04:	ldr.w	r4, [r3, #432]	@ 0x1b0
    ae08:	tst	r4, r1
    ae0a:	bne.n	ae46 <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    ae0c:	ldr	r6, [pc, #84]	@ (ae64 <schedule_transfer+0x78>)
    ae0e:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ae10:	ldr.w	r4, [r3, #320]	@ 0x140
    ae14:	orr.w	r4, r4, #16384	@ 0x4000
    ae18:	str.w	r4, [r3, #320]	@ 0x140
			status = USB1_ENDPTSTATUS;
    ae1c:	ldr.w	r4, [r3, #440]	@ 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ae20:	ldr.w	r5, [r3, #320]	@ 0x140
    ae24:	lsls	r5, r5, #17
    ae26:	bmi.n	ae32 <schedule_transfer+0x46>
    ae28:	ldr	r5, [r6, #4]
    ae2a:	subs	r5, r5, r7
    ae2c:	cmp.w	r5, #2400	@ 0x960
    ae30:	bcc.n	ae10 <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ae32:	ands	r4, r1
    ae34:	bne.n	ae46 <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    ae36:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    ae3a:	ldr	r4, [pc, #36]	@ (ae60 <schedule_transfer+0x74>)
    ae3c:	ldr.w	r3, [r4, #432]	@ 0x1b0
    ae40:	orrs	r3, r1
    ae42:	str.w	r3, [r4, #432]	@ 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    ae46:	str	r2, [r0, #52]	@ 0x34
	__enable_irq();
    ae48:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ae4a:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    ae4c:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ae50:	ldr.w	r4, [r3, #432]	@ 0x1b0
    ae54:	orrs	r1, r4
    ae56:	str.w	r1, [r3, #432]	@ 0x1b0
	endpoint->first_transfer = transfer;
    ae5a:	str	r2, [r0, #48]	@ 0x30
    ae5c:	b.n	ae46 <schedule_transfer+0x5a>
    ae5e:	nop
    ae60:	.word	0x402e0000
    ae64:	.word	0xe0001000

0000ae68 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    ae68:	push	{r4, r5, r6, lr}
    ae6a:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    ae6c:	ldr	r0, [r0, #48]	@ 0x30
	if (first == NULL) return;
    ae6e:	cbz	r0, ae80 <run_callbacks+0x18>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
    ae70:	mov	r2, r0
	uint32_t count = 0;
    ae72:	movs	r5, #0
	while (1) {
		if (t->status & (1<<7)) {
    ae74:	ldr	r3, [r2, #4]
    ae76:	ands.w	r3, r3, #128	@ 0x80
    ae7a:	beq.n	ae82 <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    ae7c:	str	r2, [r4, #48]	@ 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    ae7e:	cbnz	r5, ae90 <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    ae80:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    ae82:	ldr	r2, [r2, #0]
		count++;
    ae84:	adds	r5, #1
		if ((uint32_t)t == 1) {
    ae86:	cmp	r2, #1
    ae88:	bne.n	ae74 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    ae8a:	strd	r3, r3, [r4, #48]	@ 0x30
			break;
    ae8e:	b.n	ae7e <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    ae90:	ldr	r6, [r0, #0]
		count--;
    ae92:	subs	r5, #1
		ep->callback_function(first);
    ae94:	ldr	r3, [r4, #56]	@ 0x38
    ae96:	blx	r3
		first = next;
    ae98:	mov	r0, r6
    ae9a:	b.n	ae7e <run_callbacks+0x16>

0000ae9c <usb_endpoint_config>:
{
    ae9c:	push	{r4, r5, r6, lr}
    ae9e:	mov	r4, r0
    aea0:	mov	r6, r1
    aea2:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    aea4:	movs	r1, #0
    aea6:	movs	r2, #60	@ 0x3c
    aea8:	adds	r0, #4
    aeaa:	bl	a2ac <memset>
	qh->next = 1; // Terminate bit = 1
    aeae:	movs	r3, #1
	qh->config = config;
    aeb0:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    aeb2:	str	r3, [r4, #8]
	qh->callback_function = callback;
    aeb4:	str	r5, [r4, #56]	@ 0x38
}
    aeb6:	pop	{r4, r5, r6, pc}

0000aeb8 <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    aeb8:	ldr	r2, [pc, #124]	@ (af38 <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    aeba:	push	{r4, lr}
	if (len > 0) {
    aebc:	cbz	r1, af02 <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aebe:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    aec0:	ldr	r3, [pc, #120]	@ (af3c <endpoint0_transmit.constprop.0+0x84>)
    aec2:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aec4:	orr.w	r1, r1, #128	@ 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    aec8:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    aeca:	str	r3, [r2, #72]	@ 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    aecc:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aece:	add.w	r1, r0, #4096	@ 0x1000
		endpoint0_transfer_data.next = 1;
    aed2:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    aed4:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    aed6:	add.w	r1, r0, #8192	@ 0x2000
    aeda:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aedc:	add.w	r1, r0, #12288	@ 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aee0:	add.w	r0, r0, #16384	@ 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    aee4:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    aee6:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    aee8:	movs	r3, #0
    aeea:	str	r3, [r2, #76]	@ 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    aeec:	ldr	r3, [pc, #80]	@ (af40 <endpoint0_transmit.constprop.0+0x88>)
    aeee:	ldr.w	r1, [r3, #432]	@ 0x1b0
    aef2:	orr.w	r1, r1, #65536	@ 0x10000
    aef6:	str.w	r1, [r3, #432]	@ 0x1b0
		while (USB1_ENDPTPRIME) ;
    aefa:	ldr.w	r1, [r3, #432]	@ 0x1b0
    aefe:	cmp	r1, #0
    af00:	bne.n	aefa <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    af02:	ldr	r3, [pc, #64]	@ (af44 <endpoint0_transmit.constprop.0+0x8c>)
    af04:	movs	r1, #1
    af06:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    af08:	movs	r1, #128	@ 0x80
    af0a:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    af0c:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    af0e:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    af12:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    af14:	mov.w	r2, #65537	@ 0x10001
    af18:	ldr	r3, [pc, #36]	@ (af40 <endpoint0_transmit.constprop.0+0x88>)
    af1a:	str.w	r2, [r3, #444]	@ 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    af1e:	ldr.w	r2, [r3, #432]	@ 0x1b0
    af22:	orr.w	r2, r2, #1
    af26:	str.w	r2, [r3, #432]	@ 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    af2a:	ldr	r2, [pc, #28]	@ (af48 <endpoint0_transmit.constprop.0+0x90>)
    af2c:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    af2e:	ldr.w	r2, [r3, #432]	@ 0x1b0
    af32:	cmp	r2, #0
    af34:	bne.n	af2e <endpoint0_transmit.constprop.0+0x76>
}
    af36:	pop	{r4, pc}
    af38:	.word	0x20000000
    af3c:	.word	0x20002ae0
    af40:	.word	0x402e0000
    af44:	.word	0x20002ac0
    af48:	.word	0x2001208c

0000af4c <usb_start_sof_interrupts>:
	__disable_irq();
    af4c:	cpsid	i
	sof_usage |= (1 << interface);
    af4e:	ldr	r2, [pc, #36]	@ (af74 <usb_start_sof_interrupts+0x28>)
    af50:	movs	r3, #1
    af52:	lsls	r3, r0
    af54:	ldrb	r0, [r2, #0]
    af56:	orrs	r0, r3
    af58:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    af5a:	ldr	r2, [pc, #28]	@ (af78 <usb_start_sof_interrupts+0x2c>)
    af5c:	ldr.w	r3, [r2, #328]	@ 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    af60:	lsls	r1, r3, #24
    af62:	bmi.n	af70 <usb_start_sof_interrupts+0x24>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    af64:	movs	r1, #128	@ 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    af66:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    af68:	str.w	r1, [r2, #324]	@ 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    af6c:	str.w	r3, [r2, #328]	@ 0x148
	__enable_irq();
    af70:	cpsie	i
}
    af72:	bx	lr
    af74:	.word	0x20012ac7
    af78:	.word	0x402e0000

0000af7c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    af7c:	ldr	r2, [pc, #28]	@ (af9c <usb_stop_sof_interrupts+0x20>)
    af7e:	movs	r3, #1
    af80:	lsls	r3, r0
    af82:	ldrb	r0, [r2, #0]
    af84:	bic.w	r0, r0, r3
    af88:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    af8a:	cbnz	r0, af9a <usb_stop_sof_interrupts+0x1e>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    af8c:	ldr	r2, [pc, #16]	@ (afa0 <usb_stop_sof_interrupts+0x24>)
    af8e:	ldr.w	r3, [r2, #328]	@ 0x148
    af92:	bic.w	r3, r3, #128	@ 0x80
    af96:	str.w	r3, [r2, #328]	@ 0x148
}
    af9a:	bx	lr
    af9c:	.word	0x20012ac7
    afa0:	.word	0x402e0000

0000afa4 <usb_isr>:
{
    afa4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    afa8:	ldr	r4, [pc, #664]	@ (b244 <usb_isr+0x2a0>)
    afaa:	ldr.w	r6, [r4, #324]	@ 0x144
	if (status & USB_USBSTS_UI) {
    afae:	lsls	r2, r6, #31
	USB1_USBSTS = status;
    afb0:	str.w	r6, [r4, #324]	@ 0x144
	if (status & USB_USBSTS_UI) {
    afb4:	bmi.n	b01c <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    afb6:	lsls	r3, r6, #25
    afb8:	bmi.w	b3d6 <usb_isr+0x432>
	if (status & USB_USBSTS_TI0) {
    afbc:	lsls	r4, r6, #7
    afbe:	bpl.n	afc8 <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    afc0:	ldr	r3, [pc, #644]	@ (b248 <usb_isr+0x2a4>)
    afc2:	ldr	r3, [r3, #0]
    afc4:	cbz	r3, afc8 <usb_isr+0x24>
    afc6:	blx	r3
	if (status & USB_USBSTS_TI1) {
    afc8:	lsls	r0, r6, #6
    afca:	bpl.n	afd4 <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    afcc:	ldr	r3, [pc, #636]	@ (b24c <usb_isr+0x2a8>)
    afce:	ldr	r3, [r3, #0]
    afd0:	cbz	r3, afd4 <usb_isr+0x30>
    afd2:	blx	r3
	if (status & USB_USBSTS_PCI) {
    afd4:	lsls	r1, r6, #29
    afd6:	bpl.n	afea <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    afd8:	ldr	r3, [pc, #616]	@ (b244 <usb_isr+0x2a0>)
    afda:	ldr	r2, [pc, #628]	@ (b250 <usb_isr+0x2ac>)
    afdc:	ldr.w	r3, [r3, #388]	@ 0x184
    afe0:	ands.w	r3, r3, #512	@ 0x200
			usb_high_speed = 1;
    afe4:	it	ne
    afe6:	movne	r3, #1
			usb_high_speed = 0;
    afe8:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    afea:	ldr	r3, [pc, #600]	@ (b244 <usb_isr+0x2a0>)
    afec:	ldr.w	r3, [r3, #328]	@ 0x148
    aff0:	lsls	r2, r3, #24
    aff2:	bpl.w	b406 <usb_isr+0x462>
    aff6:	lsls	r3, r6, #24
    aff8:	bpl.w	b406 <usb_isr+0x462>
		if (usb_reboot_timer) {
    affc:	ldr	r2, [pc, #596]	@ (b254 <usb_isr+0x2b0>)
    affe:	ldrb	r3, [r2, #0]
    b000:	cmp	r3, #0
    b002:	beq.w	b406 <usb_isr+0x462>
			if (--usb_reboot_timer == 0) {
    b006:	subs	r3, #1
    b008:	uxtb	r3, r3
    b00a:	strb	r3, [r2, #0]
    b00c:	cmp	r3, #0
    b00e:	bne.w	b406 <usb_isr+0x462>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    b012:	movs	r0, #3
    b014:	bl	af7c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    b018:	bl	120e0 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    b01c:	ldr.w	r3, [r4, #428]	@ 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    b020:	ldr.w	r8, [pc, #584]	@ b26c <usb_isr+0x2c8>
		while (setupstatus) {
    b024:	cmp	r3, #0
    b026:	bne.n	b0b0 <usb_isr+0x10c>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    b028:	ldr.w	r5, [r4, #444]	@ 0x1bc
		if (completestatus) {
    b02c:	cmp	r5, #0
    b02e:	beq.n	afb6 <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    b030:	ldr	r2, [pc, #548]	@ (b258 <usb_isr+0x2b4>)
			USB1_ENDPTCOMPLETE = completestatus;
    b032:	str.w	r5, [r4, #444]	@ 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    b036:	ldr	r1, [r2, #0]
    b038:	tst	r5, r1
    b03a:	beq.n	b072 <usb_isr+0xce>
				endpoint0_notify_mask = 0;
    b03c:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b03e:	movw	r1, #8225	@ 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    b042:	ldr	r2, [pc, #536]	@ (b25c <usb_isr+0x2b8>)
    b044:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b046:	ldrh	r2, [r2, #0]
    b048:	cmp	r2, r1
    b04a:	bne.w	b398 <usb_isr+0x3f4>
    b04e:	uxth	r3, r3
    b050:	cbnz	r3, b072 <usb_isr+0xce>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b052:	ldr	r2, [pc, #524]	@ (b260 <usb_isr+0x2bc>)
    b054:	ldr	r3, [pc, #524]	@ (b264 <usb_isr+0x2c0>)
    b056:	ldr	r0, [r2, #0]
    b058:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    b05a:	cmp	r0, #134	@ 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b05c:	ldrb	r2, [r2, #6]
    b05e:	str	r0, [r3, #0]
    b060:	strh	r1, [r3, #4]
    b062:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    b064:	bne.n	b072 <usb_isr+0xce>
			usb_start_sof_interrupts(NUM_INTERFACE);
    b066:	movs	r0, #3
    b068:	bl	af4c <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b06c:	ldr	r3, [pc, #484]	@ (b254 <usb_isr+0x2b0>)
    b06e:	movs	r2, #80	@ 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b070:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    b072:	ldr	r3, [pc, #500]	@ (b268 <usb_isr+0x2c4>)
    b074:	ldr	r3, [r3, #0]
			if (completestatus) {
    b076:	ands	r5, r3
    b078:	beq.n	afb6 <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    b07a:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b07c:	ldr.w	r8, [pc, #492]	@ b26c <usb_isr+0x2c8>
					tx &= ~(1<<p);
    b080:	mov.w	r9, #1
				while (tx) {
    b084:	cmp	r4, #0
    b086:	bne.w	b3ba <usb_isr+0x416>
				uint32_t rx = completestatus & 0xffff;
    b08a:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    b08c:	ldr	r7, [pc, #476]	@ (b26c <usb_isr+0x2c8>)
					rx &= ~(1<<p);
    b08e:	mov.w	r8, #1
				while(rx) {
    b092:	cmp	r5, #0
    b094:	beq.n	afb6 <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    b096:	rbit	r4, r5
    b09a:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    b09e:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    b0a2:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    b0a6:	bl	ae68 <run_callbacks>
					rx &= ~(1<<p);
    b0aa:	bic.w	r5, r5, r4
    b0ae:	b.n	b092 <usb_isr+0xee>
			USB1_ENDPTSETUPSTAT = setupstatus;
    b0b0:	str.w	r3, [r4, #428]	@ 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    b0b4:	ldrd	r5, r3, [r8, #40]	@ 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b0b8:	ldr.w	r2, [r4, #320]	@ 0x140
    b0bc:	orr.w	r2, r2, #8192	@ 0x2000
    b0c0:	str.w	r2, [r4, #320]	@ 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    b0c4:	ldr.w	r2, [r4, #320]	@ 0x140
    b0c8:	lsls	r7, r2, #18
    b0ca:	bpl.n	b0b8 <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    b0cc:	ldr.w	r2, [r4, #320]	@ 0x140
    b0d0:	bic.w	r2, r2, #8192	@ 0x2000
    b0d4:	str.w	r2, [r4, #320]	@ 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b0d8:	mov.w	r2, #65537	@ 0x10001
    b0dc:	str.w	r2, [r4, #436]	@ 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    b0e0:	ldr.w	r7, [r4, #436]	@ 0x1b4
    b0e4:	ands.w	r7, r7, #65537	@ 0x10001
    b0e8:	bne.n	b0e0 <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    b0ea:	uxth	r1, r5
    b0ec:	ldr	r2, [pc, #360]	@ (b258 <usb_isr+0x2b4>)
	switch (setup.wRequestAndType) {
    b0ee:	cmp.w	r1, #2176	@ 0x880
			endpoint0_notify_mask = 0;
    b0f2:	str	r7, [r2, #0]
	switch (setup.wRequestAndType) {
    b0f4:	beq.w	b22a <usb_isr+0x286>
    b0f8:	bhi.n	b18c <usb_isr+0x1e8>
    b0fa:	movw	r2, #770	@ 0x302
    b0fe:	cmp	r1, r2
    b100:	beq.w	b2c8 <usb_isr+0x324>
    b104:	bhi.n	b124 <usb_isr+0x180>
    b106:	cmp	r1, #130	@ 0x82
    b108:	beq.w	b290 <usb_isr+0x2ec>
    b10c:	cmp.w	r1, #258	@ 0x102
    b110:	beq.w	b2f0 <usb_isr+0x34c>
    b114:	cmp	r1, #128	@ 0x80
    b116:	beq.w	b23a <usb_isr+0x296>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b11a:	mov.w	r3, #65537	@ 0x10001
    b11e:	str.w	r3, [r4, #448]	@ 0x1c0
    b122:	b.n	b224 <usb_isr+0x280>
	switch (setup.wRequestAndType) {
    b124:	cmp.w	r1, #1280	@ 0x500
    b128:	beq.n	b20e <usb_isr+0x26a>
    b12a:	sub.w	r1, r1, #1664	@ 0x680
    b12e:	cmp	r1, #1
    b130:	bhi.n	b11a <usb_isr+0x176>
    b132:	ldr	r2, [pc, #316]	@ (b270 <usb_isr+0x2cc>)
    b134:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b138:	uxth	r7, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b13a:	ldr	r1, [r2, #4]
    b13c:	cmp	r1, #0
    b13e:	beq.n	b11a <usb_isr+0x176>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b140:	ldrh.w	ip, [r2]
    b144:	mov	r0, r5
    b146:	cmp	ip, r5
    b148:	bne.w	b360 <usb_isr+0x3bc>
    b14c:	ldrh.w	ip, [r2, #2]
    b150:	cmp	ip, r7
    b152:	bne.w	b360 <usb_isr+0x3bc>
				if ((setup.wValue >> 8) == 3) {
    b156:	lsrs	r5, r5, #8
    b158:	ldr	r7, [pc, #280]	@ (b274 <usb_isr+0x2d0>)
				if (datalen > setup.wLength) datalen = setup.wLength;
    b15a:	mov.w	r9, r3, lsr #16
				if ((setup.wValue >> 8) == 3) {
    b15e:	cmp	r5, #3
					datalen = *(list->addr);
    b160:	ite	eq
    b162:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    b164:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b166:	cmp	r9, r2
    b168:	it	cs
    b16a:	movcs	r9, r2
				if (setup.wValue == 0x200) {
    b16c:	cmp.w	r0, #512	@ 0x200
    b170:	bne.w	b314 <usb_isr+0x370>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b174:	ldr	r3, [pc, #216]	@ (b250 <usb_isr+0x2ac>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b176:	mov	r2, r9
    b178:	ldr	r1, [pc, #252]	@ (b278 <usb_isr+0x2d4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    b17a:	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b17c:	ldr	r3, [pc, #252]	@ (b27c <usb_isr+0x2d8>)
    b17e:	cmp	r0, #0
    b180:	it	eq
    b182:	moveq	r1, r3
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b184:	mov	r0, r7
    b186:	bl	a2f0 <memcpy>
    b18a:	b.n	b334 <usb_isr+0x390>
	switch (setup.wRequestAndType) {
    b18c:	movw	r2, #8993	@ 0x2321
    b190:	cmp	r1, r2
    b192:	beq.n	b1d6 <usb_isr+0x232>
    b194:	bhi.n	b1e2 <usb_isr+0x23e>
    b196:	movw	r2, #8225	@ 0x2021
    b19a:	cmp	r1, r2
    b19c:	beq.w	b37e <usb_isr+0x3da>
    b1a0:	movw	r2, #8737	@ 0x2221
    b1a4:	cmp	r1, r2
    b1a6:	beq.w	b364 <usb_isr+0x3c0>
    b1aa:	cmp.w	r1, #2304	@ 0x900
    b1ae:	bne.n	b11a <usb_isr+0x176>
		usb_configuration = setup.wValue;
    b1b0:	ldr	r3, [pc, #204]	@ (b280 <usb_isr+0x2dc>)
    b1b2:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b1b6:	mov.w	r2, #13107400	@ 0xc800c8
		usb_configuration = setup.wValue;
    b1ba:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b1bc:	ldr	r3, [pc, #196]	@ (b284 <usb_isr+0x2e0>)
    b1be:	str.w	r3, [r4, #456]	@ 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b1c2:	str.w	r2, [r4, #460]	@ 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b1c6:	str.w	r2, [r4, #464]	@ 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    b1ca:	str.w	r3, [r4, #468]	@ 0x1d4
		usb_serial_configure();
    b1ce:	bl	a5c8 <usb_serial_configure>
		usb_mtp_configure();
    b1d2:	bl	c1d0 <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    b1d6:	movs	r2, #0
    b1d8:	mov	r1, r2
    b1da:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b1dc:	bl	ad4c <endpoint0_receive>
			return;
    b1e0:	b.n	b224 <usb_isr+0x280>
	switch (setup.wRequestAndType) {
    b1e2:	movw	r2, #25633	@ 0x6421
    b1e6:	cmp	r1, r2
    b1e8:	beq.w	b392 <usb_isr+0x3ee>
    b1ec:	movw	r2, #26529	@ 0x67a1
    b1f0:	cmp	r1, r2
    b1f2:	bne.n	b11a <usb_isr+0x176>
		if (setup.wLength >= 4) {
    b1f4:	cmp.w	r3, #262144	@ 0x40000
    b1f8:	bcc.n	b11a <usb_isr+0x176>
			endpoint0_buffer[2] = usb_mtp_status;
    b1fa:	ldr	r3, [pc, #140]	@ (b288 <usb_isr+0x2e4>)
			endpoint0_buffer[0] = 4;
    b1fc:	movs	r1, #4
    b1fe:	ldr	r0, [pc, #96]	@ (b260 <usb_isr+0x2bc>)
			endpoint0_buffer[2] = usb_mtp_status;
    b200:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    b202:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    b204:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    b206:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    b208:	strb	r7, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    b20a:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    b20c:	b.n	b234 <usb_isr+0x290>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b20e:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    b210:	mov	r2, r7
    b212:	mov	r1, r7
    b214:	mov	r0, r7
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b216:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    b218:	bl	ad4c <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b21c:	orr.w	r5, r5, #16777216	@ 0x1000000
    b220:	str.w	r5, [r4, #340]	@ 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b224:	ldr.w	r3, [r4, #428]	@ 0x1ac
    b228:	b.n	b024 <usb_isr+0x80>
		reply_buffer[0] = usb_configuration;
    b22a:	ldr	r3, [pc, #84]	@ (b280 <usb_isr+0x2dc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b22c:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    b22e:	ldr	r0, [pc, #92]	@ (b28c <usb_isr+0x2e8>)
    b230:	ldrb	r3, [r3, #0]
    b232:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b234:	bl	aeb8 <endpoint0_transmit.constprop.0>
				return;
    b238:	b.n	b224 <usb_isr+0x280>
		reply_buffer[0] = 0;
    b23a:	ldr	r0, [pc, #80]	@ (b28c <usb_isr+0x2e8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b23c:	movs	r1, #2
		reply_buffer[0] = 0;
    b23e:	strb	r7, [r0, #0]
		reply_buffer[1] = 0;
    b240:	strb	r7, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    b242:	b.n	b234 <usb_isr+0x290>
    b244:	.word	0x402e0000
    b248:	.word	0x2001287c
    b24c:	.word	0x20012880
    b250:	.word	0x20012ace
    b254:	.word	0x20012acf
    b258:	.word	0x2001208c
    b25c:	.word	0x200081c0
    b260:	.word	0x20012aa3
    b264:	.word	0x20012870
    b268:	.word	0x20012090
    b26c:	.word	0x20000000
    b270:	.word	0x20000b08
    b274:	.word	0x20202000
    b278:	.word	0x600026b9
    b27c:	.word	0x60002650
    b280:	.word	0x20012acd
    b284:	.word	0x00cc0002
    b288:	.word	0x20002449
    b28c:	.word	0x20012aad
		endpoint = setup.wIndex & 0x7F;
    b290:	uxth	r0, r3
		if (endpoint > 7) break;
    b292:	ands.w	r3, r3, #120	@ 0x78
    b296:	bne.w	b11a <usb_isr+0x176>
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b29a:	ldr	r2, [pc, #368]	@ (b40c <usb_isr+0x468>)
		endpoint = setup.wIndex & 0x7F;
    b29c:	and.w	r1, r0, #127	@ 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b2a0:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b2a2:	ldr.w	r1, [r2, r1, lsl #2]
		reply_buffer[0] = 0;
    b2a6:	ldr	r2, [pc, #360]	@ (b410 <usb_isr+0x46c>)
    b2a8:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    b2aa:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b2ac:	bpl.n	b2c2 <usb_isr+0x31e>
    b2ae:	tst.w	r1, #65536	@ 0x10000
			reply_buffer[0] = 1;
    b2b2:	it	ne
    b2b4:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    b2b6:	mov.w	r1, #2
    b2ba:	ldr	r0, [pc, #340]	@ (b410 <usb_isr+0x46c>)
			reply_buffer[0] = 1;
    b2bc:	it	ne
    b2be:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b2c0:	b.n	b234 <usb_isr+0x290>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b2c2:	tst.w	r1, #1
    b2c6:	b.n	b2b2 <usb_isr+0x30e>
		if (endpoint > 7) break;
    b2c8:	tst.w	r3, #120	@ 0x78
    b2cc:	uxth	r1, r3
    b2ce:	bne.w	b11a <usb_isr+0x176>
		endpoint = setup.wIndex & 0x7F;
    b2d2:	and.w	r2, r1, #127	@ 0x7f
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b2d6:	ldr	r3, [pc, #308]	@ (b40c <usb_isr+0x468>)
		if (dir) {
    b2d8:	tst.w	r1, #128	@ 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b2dc:	ldr.w	r1, [r3, r2, lsl #2]
    b2e0:	ite	ne
    b2e2:	orrne.w	r1, r1, #65536	@ 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b2e6:	orreq.w	r1, r1, #1
    b2ea:	str.w	r1, [r3, r2, lsl #2]
    b2ee:	b.n	b1d6 <usb_isr+0x232>
		if (endpoint > 7) break;
    b2f0:	tst.w	r3, #120	@ 0x78
    b2f4:	uxth	r1, r3
    b2f6:	bne.w	b11a <usb_isr+0x176>
		endpoint = setup.wIndex & 0x7F;
    b2fa:	and.w	r2, r1, #127	@ 0x7f
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b2fe:	ldr	r3, [pc, #268]	@ (b40c <usb_isr+0x468>)
		if (dir) {
    b300:	tst.w	r1, #128	@ 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b304:	ldr.w	r1, [r3, r2, lsl #2]
    b308:	ite	ne
    b30a:	bicne.w	r1, r1, #65536	@ 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b30e:	biceq.w	r1, r1, #1
    b312:	b.n	b2ea <usb_isr+0x346>
				} else if (setup.wValue == 0x700) {
    b314:	cmp.w	r0, #1792	@ 0x700
    b318:	bne.n	b35c <usb_isr+0x3b8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b31a:	ldr	r3, [pc, #248]	@ (b414 <usb_isr+0x470>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b31c:	mov	r2, r9
    b31e:	ldr	r1, [pc, #248]	@ (b418 <usb_isr+0x474>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    b320:	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b322:	ldr	r3, [pc, #248]	@ (b41c <usb_isr+0x478>)
    b324:	cmp	r0, #0
    b326:	it	eq
    b328:	moveq	r1, r3
    b32a:	mov	r0, r7
    b32c:	bl	a2f0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    b330:	movs	r3, #7
    b332:	strb	r3, [r7, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b334:	bic.w	r5, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b338:	add.w	r0, r7, r9
	asm("dsb");
    b33c:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b340:	mov.w	r3, #3758153728	@ 0xe000e000
    b344:	str.w	r5, [r3, #3952]	@ 0xf70
		location += 32;
    b348:	adds	r5, #32
	} while (location < end_addr);
    b34a:	cmp	r0, r5
    b34c:	bhi.n	b344 <usb_isr+0x3a0>
	asm("dsb");
    b34e:	dsb	sy
	asm("isb");
    b352:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b356:	ldr	r0, [pc, #200]	@ (b420 <usb_isr+0x47c>)
    b358:	mov	r1, r9
    b35a:	b.n	b234 <usb_isr+0x290>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b35c:	mov	r2, r9
    b35e:	b.n	b184 <usb_isr+0x1e0>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b360:	adds	r2, #12
    b362:	b.n	b13a <usb_isr+0x196>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b364:	uxth	r3, r3
    b366:	cmp	r3, #0
    b368:	bne.w	b1d6 <usb_isr+0x232>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b36c:	ldr	r3, [pc, #180]	@ (b424 <usb_isr+0x480>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b36e:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b372:	ldr	r2, [r3, #0]
    b374:	ldr	r3, [pc, #176]	@ (b428 <usb_isr+0x484>)
    b376:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b378:	ldr	r3, [pc, #176]	@ (b42c <usb_isr+0x488>)
    b37a:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    b37c:	b.n	b1d6 <usb_isr+0x232>
		if (setup.wLength != 7) break;
    b37e:	lsrs	r1, r3, #16
    b380:	cmp	r1, #7
		if (setup.wLength == 6) {
    b382:	bne.w	b11a <usb_isr+0x176>
			endpoint0_setupdata.bothwords = setupdata;
    b386:	ldr	r2, [pc, #168]	@ (b430 <usb_isr+0x48c>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b388:	ldr	r0, [pc, #168]	@ (b434 <usb_isr+0x490>)
			endpoint0_setupdata.bothwords = setupdata;
    b38a:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b38e:	movs	r2, #1
    b390:	b.n	b1dc <usb_isr+0x238>
		if (setup.wLength == 6) {
    b392:	lsrs	r1, r3, #16
    b394:	cmp	r1, #6
    b396:	b.n	b382 <usb_isr+0x3de>
	if (setup.wRequestAndType == 0x6421) {
    b398:	movw	r3, #25633	@ 0x6421
    b39c:	cmp	r2, r3
    b39e:	bne.w	b072 <usb_isr+0xce>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    b3a2:	ldr	r3, [pc, #144]	@ (b434 <usb_isr+0x490>)
    b3a4:	ldrb	r2, [r3, #0]
    b3a6:	cmp	r2, #1
    b3a8:	bne.w	b072 <usb_isr+0xce>
    b3ac:	ldrb	r3, [r3, #1]
    b3ae:	cmp	r3, #64	@ 0x40
    b3b0:	bne.w	b072 <usb_isr+0xce>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b3b4:	ldr	r3, [pc, #128]	@ (b438 <usb_isr+0x494>)
    b3b6:	movs	r2, #25
    b3b8:	b.n	b070 <usb_isr+0xcc>
					int p=__builtin_ctz(tx);
    b3ba:	rbit	r7, r4
    b3be:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b3c2:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    b3c6:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b3ca:	adds	r0, #64	@ 0x40
					tx &= ~(1<<p);
    b3cc:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b3d0:	bl	ae68 <run_callbacks>
					tx &= ~(1<<p);
    b3d4:	b.n	b084 <usb_isr+0xe0>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b3d6:	ldr	r3, [pc, #100]	@ (b43c <usb_isr+0x498>)
    b3d8:	ldr.w	r2, [r3, #428]	@ 0x1ac
    b3dc:	str.w	r2, [r3, #428]	@ 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b3e0:	ldr.w	r2, [r3, #444]	@ 0x1bc
    b3e4:	str.w	r2, [r3, #444]	@ 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b3e8:	ldr.w	r4, [r3, #432]	@ 0x1b0
    b3ec:	cmp	r4, #0
    b3ee:	bne.n	b3e8 <usb_isr+0x444>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b3f0:	mov.w	r2, #4294967295
    b3f4:	str.w	r2, [r3, #436]	@ 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b3f8:	ldr.w	r3, [r3, #388]	@ 0x184
		usb_serial_reset();
    b3fc:	bl	a5c4 <usb_serial_reset>
		endpointN_notify_mask = 0;
    b400:	ldr	r3, [pc, #60]	@ (b440 <usb_isr+0x49c>)
    b402:	str	r4, [r3, #0]
    b404:	b.n	afbc <usb_isr+0x18>
}
    b406:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b40a:	nop
    b40c:	.word	0x402e01c0
    b410:	.word	0x20012aad
    b414:	.word	0x20012ace
    b418:	.word	0x60002650
    b41c:	.word	0x600026b9
    b420:	.word	0x20202000
    b424:	.word	0x20012864
    b428:	.word	0x20012878
    b42c:	.word	0x20012acc
    b430:	.word	0x200081c0
    b434:	.word	0x20012aa3
    b438:	.word	0x20002449
    b43c:	.word	0x402e0000
    b440:	.word	0x20012090

0000b444 <usb_config_rx>:
{
    b444:	push	{r4, r5, r6, lr}
    b446:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b448:	subs	r3, r0, #2
{
    b44a:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b44c:	cmp	r3, #3
    b44e:	bhi.n	b476 <usb_config_rx+0x32>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b450:	clz	r4, r2
    b454:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b456:	ldr	r0, [pc, #32]	@ (b478 <usb_config_rx+0x34>)
    b458:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b45a:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b45c:	add.w	r0, r0, r5, lsl #7
    b460:	orr.w	r1, r1, r4, lsl #29
    b464:	bl	ae9c <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    b468:	cbz	r6, b476 <usb_config_rx+0x32>
    b46a:	ldr	r3, [pc, #16]	@ (b47c <usb_config_rx+0x38>)
    b46c:	movs	r0, #1
    b46e:	ldr	r2, [r3, #0]
    b470:	lsls	r0, r5
    b472:	orrs	r0, r2
    b474:	str	r0, [r3, #0]
}
    b476:	pop	{r4, r5, r6, pc}
    b478:	.word	0x20000000
    b47c:	.word	0x20012090

0000b480 <usb_config_tx>:
{
    b480:	push	{r3, r4, r5, lr}
    b482:	mov	r4, r0
    b484:	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b486:	subs	r3, r4, #2
    b488:	cmp	r3, #3
    b48a:	bhi.n	b4b4 <usb_config_tx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b48c:	clz	r0, r2
    b490:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b492:	mov	r2, r5
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b494:	lsrs	r0, r0, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b496:	orr.w	r1, r1, r0, lsl #29
    b49a:	ldr	r0, [pc, #28]	@ (b4b8 <usb_config_tx+0x38>)
    b49c:	add.w	r0, r0, r4, lsl #7
    b4a0:	bl	ae9c <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b4a4:	cbz	r5, b4b4 <usb_config_tx+0x34>
    b4a6:	ldr	r2, [pc, #20]	@ (b4bc <usb_config_tx+0x3c>)
    b4a8:	adds	r4, #16
    b4aa:	movs	r3, #1
    b4ac:	ldr	r1, [r2, #0]
    b4ae:	lsls	r3, r4
    b4b0:	orrs	r3, r1
    b4b2:	str	r3, [r2, #0]
}
    b4b4:	pop	{r3, r4, r5, pc}
    b4b6:	nop
    b4b8:	.word	0x20000040
    b4bc:	.word	0x20012090

0000b4c0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b4c0:	lsls	r2, r2, #16
    b4c2:	orr.w	r2, r2, #128	@ 0x80
{
    b4c6:	push	{r4, lr}
	transfer->status = (len << 16) | (1<<7);
    b4c8:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    b4ca:	add.w	r2, r1, #4096	@ 0x1000
	transfer->next = 1;
    b4ce:	movs	r4, #1
	transfer->pointer0 = addr;
    b4d0:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
    b4d2:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    b4d4:	add.w	r2, r1, #8192	@ 0x2000
	transfer->next = 1;
    b4d8:	str	r4, [r0, #0]
	transfer->pointer2 = addr + 8192;
    b4da:	str	r2, [r0, #16]
	transfer->pointer3 = addr + 12288;
    b4dc:	add.w	r2, r1, #12288	@ 0x3000
	transfer->pointer4 = addr + 16384;
    b4e0:	add.w	r1, r1, #16384	@ 0x4000
	transfer->pointer3 = addr + 12288;
    b4e4:	str	r2, [r0, #20]
	transfer->callback_param = param;
    b4e6:	strd	r1, r3, [r0, #24]
}
    b4ea:	pop	{r4, pc}

0000b4ec <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b4ec:	subs	r3, r0, #2
{
    b4ee:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b4f0:	cmp	r3, #3
    b4f2:	bhi.n	b506 <usb_transmit+0x1a>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
    b4f4:	add.w	r3, r0, #16
	schedule_transfer(endpoint, mask, transfer);
    b4f8:	movs	r1, #1
    b4fa:	lsls	r1, r3
    b4fc:	ldr	r3, [pc, #8]	@ (b508 <usb_transmit+0x1c>)
    b4fe:	add.w	r0, r3, r0, lsl #7
    b502:	b.w	adec <schedule_transfer>
}
    b506:	bx	lr
    b508:	.word	0x20000040

0000b50c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b50c:	subs	r3, r0, #2
{
    b50e:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b510:	cmp	r3, #3
    b512:	bhi.n	b522 <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b514:	movs	r1, #1
    b516:	ldr	r3, [pc, #12]	@ (b524 <usb_receive+0x18>)
    b518:	lsls	r1, r0
    b51a:	add.w	r0, r3, r0, lsl #7
    b51e:	b.w	adec <schedule_transfer>
}
    b522:	bx	lr
    b524:	.word	0x20000000

0000b528 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    b528:	ldr	r2, [pc, #32]	@ (b54c <usb_transfer_status+0x24>)
{
    b52a:	mov	r1, r0
	cmd = USB1_USBCMD;
    b52c:	ldr.w	r3, [r2, #320]	@ 0x140
	while (1) {
		__disable_irq();
    b530:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    b532:	orr.w	r3, r3, #16384	@ 0x4000
    b536:	str.w	r3, [r2, #320]	@ 0x140
		status = transfer->status;
    b53a:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    b53c:	ldr.w	r3, [r2, #320]	@ 0x140
		__enable_irq();
    b540:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    b542:	tst.w	r3, #16384	@ 0x4000
    b546:	beq.n	b530 <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    b548:	bx	lr
    b54a:	nop
    b54c:	.word	0x402e0000

0000b550 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    b550:	push	{r4, r5, r6, lr}
    b552:	mov	r4, r0
    b554:	mov	r0, r1
	unsigned digit;
	int i=0, j;
    b556:	movs	r1, #0
	char t;

	while (1) {
		digit = val % radix;
    b558:	udiv	r5, r4, r2
    b55c:	mls	r6, r2, r5, r4
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b560:	uxtb	r3, r6
    b562:	cmp	r6, #9
    b564:	ite	ls
    b566:	addls	r3, #48	@ 0x30
    b568:	addhi	r3, #55	@ 0x37
		val /= radix;
		if (val == 0) break;
    b56a:	cmp	r2, r4
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b56c:	uxtb	r3, r3
    b56e:	strb	r3, [r0, r1]
		if (val == 0) break;
    b570:	bhi.n	b578 <ultoa+0x28>
		i++;
    b572:	adds	r1, #1
		val /= radix;
    b574:	mov	r4, r5
		digit = val % radix;
    b576:	b.n	b558 <ultoa+0x8>
	}
	buf[i + 1] = 0;
    b578:	adds	r3, r0, r1
    b57a:	movs	r2, #0
    b57c:	subs	r4, r0, #1
    b57e:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    b580:	subs	r5, r1, r2
    b582:	cmp	r2, r5
    b584:	blt.n	b588 <ultoa+0x38>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    b586:	pop	{r4, r5, r6, pc}
		t = buf[j];
    b588:	ldrb.w	r5, [r4, #1]!
	for (j=0; j < i; j++, i--) {
    b58c:	adds	r2, #1
		buf[j] = buf[i];
    b58e:	ldrb	r6, [r3, #0]
    b590:	strb	r6, [r4, #0]
		buf[i] = t;
    b592:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    b596:	b.n	b580 <ultoa+0x30>

0000b598 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    b598:	vcmp.f32	s0, s0
	int awidth = abs(width);
    b59c:	eor.w	r3, r0, r0, asr #31
{
    b5a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    b5a4:	vmrs	APSR_nzcv, fpscr
{
    b5a8:	mov	r7, r0
    b5aa:	mov	r6, r1
    b5ac:	mov	r4, r2
	int awidth = abs(width);
    b5ae:	sub.w	r3, r3, r0, asr #31
{
    b5b2:	vpush	{d8}
    b5b6:	vmov.f32	s16, s0
    b5ba:	sub	sp, #20
	if (isnanf(val)) {
    b5bc:	bvc.n	b616 <dtostrf+0x7e>
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b5be:	cmp	r3, #3
    b5c0:	it	lt
    b5c2:	movlt	r3, #3
		if (width<0) {
    b5c4:	cmp	r0, #0
    b5c6:	sub.w	r3, r3, #3
    b5ca:	blt.n	b5fe <dtostrf+0x66>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b5cc:	vmov	r1, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b5d0:	movs	r0, #78	@ 0x4e
    b5d2:	adds	r3, #3
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b5d4:	cmp	r1, #0
    b5d6:	itt	lt
    b5d8:	movlt	r1, #45	@ 0x2d
    b5da:	strblt.w	r1, [r2], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b5de:	movs	r1, #65	@ 0x41
    b5e0:	strb	r0, [r2, #0]
    b5e2:	strb	r1, [r2, #1]
    b5e4:	adds	r1, r2, #3
    b5e6:	strb	r0, [r2, #2]
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    b5e8:	adds	r0, r2, r3
			*buf++ = ' ';
    b5ea:	movs	r3, #32
		while (awidth) {
    b5ec:	cmp	r1, r0
    b5ee:	bne.n	b610 <dtostrf+0x78>
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    b5f0:	movs	r3, #0
    b5f2:	strb	r3, [r0, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    b5f4:	add	sp, #20
    b5f6:	vpop	{d8}
    b5fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5fe:	add	r2, r3
				*buf++ = ' ';
    b600:	movs	r3, #32
			while (awidth) {
    b602:	cmp	r4, r2
    b604:	bne.n	b60a <dtostrf+0x72>
    b606:	movs	r3, #0
    b608:	b.n	b5cc <dtostrf+0x34>
				*buf++ = ' ';
    b60a:	strb.w	r3, [r4], #1
				awidth--;
    b60e:	b.n	b602 <dtostrf+0x6a>
			*buf++ = ' ';
    b610:	strb.w	r3, [r1], #1
			awidth--;
    b614:	b.n	b5ec <dtostrf+0x54>
	if (isinff(val)) {
    b616:	vabs.f32	s15, s0
    b61a:	vldr	s14, [pc, #468]	@ b7f0 <dtostrf+0x258>
    b61e:	vcmp.f32	s15, s14
    b622:	vmrs	APSR_nzcv, fpscr
    b626:	ble.n	b684 <dtostrf+0xec>
		int ndigs = (val<0) ? 4 : 3;
    b628:	vcmpe.f32	s0, #0.0
    b62c:	vmrs	APSR_nzcv, fpscr
    b630:	ite	mi
    b632:	movmi	r2, #4
    b634:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b636:	cmp	r2, r3
    b638:	ite	lt
    b63a:	sublt	r3, r3, r2
    b63c:	movge	r3, #0
		if (width<0) {
    b63e:	cmp	r0, #0
    b640:	bge.n	b680 <dtostrf+0xe8>
    b642:	adds	r2, r4, r3
				*buf++ = ' ';
    b644:	movs	r3, #32
			while (awidth) {
    b646:	cmp	r4, r2
    b648:	bne.n	b67a <dtostrf+0xe2>
    b64a:	movs	r3, #0
		if (val<0) *buf++ = '-';
    b64c:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b650:	movs	r0, #70	@ 0x46
    b652:	adds	r3, #3
		if (val<0) *buf++ = '-';
    b654:	vmrs	APSR_nzcv, fpscr
    b658:	itt	mi
    b65a:	movmi	r1, #45	@ 0x2d
    b65c:	strbmi.w	r1, [r2], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b660:	movs	r1, #73	@ 0x49
    b662:	strb	r0, [r2, #2]
    b664:	adds	r0, r2, r3
    b666:	strb	r1, [r2, #0]
    b668:	movs	r1, #78	@ 0x4e
			*buf++ = ' ';
    b66a:	movs	r3, #32
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b66c:	strb	r1, [r2, #1]
    b66e:	adds	r1, r2, #3
		while (awidth) {
    b670:	cmp	r1, r0
    b672:	beq.n	b5f0 <dtostrf+0x58>
			*buf++ = ' ';
    b674:	strb.w	r3, [r1], #1
			awidth--;
    b678:	b.n	b670 <dtostrf+0xd8>
				*buf++ = ' ';
    b67a:	strb.w	r3, [r4], #1
				awidth--;
    b67e:	b.n	b646 <dtostrf+0xae>
    b680:	mov	r2, r4
    b682:	b.n	b64c <dtostrf+0xb4>
	s = fcvtf(val, precision, &decpt, &sign);
    b684:	add	r2, sp, #8
    b686:	add	r1, sp, #4
    b688:	mov	r0, r6
    b68a:	bl	db7a <fcvtf>
	if (precision == 0 && decpt == 0) {
    b68e:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    b690:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    b692:	orrs.w	r2, r6, r3
    b696:	bne.n	b73a <dtostrf+0x1a2>
		s = (*s < '5') ? "0" : "1";
    b698:	ldrb	r1, [r0, #0]
    b69a:	ldr	r3, [pc, #344]	@ (b7f4 <dtostrf+0x25c>)
    b69c:	ldr	r2, [pc, #344]	@ (b7f8 <dtostrf+0x260>)
    b69e:	cmp	r1, #52	@ 0x34
    b6a0:	ite	hi
    b6a2:	movhi	r8, r2
    b6a4:	movls	r8, r3
		decpt++;
    b6a6:	movs	r3, #1
    b6a8:	str	r3, [sp, #4]
	reqd = strlen(s);
    b6aa:	mov	r0, r8
    b6ac:	bl	ee80 <strlen>
	if (reqd > decpt) reqd++;
    b6b0:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    b6b2:	mov	r5, r0
	if (reqd > decpt) reqd++;
    b6b4:	cmp	r3, r0
    b6b6:	bge.w	b7e8 <dtostrf+0x250>
	if (decpt == 0) reqd++;
    b6ba:	cmp	r3, #0
	if (reqd > decpt) reqd++;
    b6bc:	add.w	r5, r5, #1
	if (decpt == 0) reqd++;
    b6c0:	bne.n	b74a <dtostrf+0x1b2>
    b6c2:	adds	r5, #1
	if (sign) reqd++;
    b6c4:	ldr.w	fp, [sp, #8]
    b6c8:	cmp.w	fp, #0
    b6cc:	beq.n	b6d0 <dtostrf+0x138>
    b6ce:	adds	r5, #1
	pad = width - reqd;
    b6d0:	sub.w	sl, r7, r5
	e = p + reqd;
    b6d4:	add.w	r9, r4, r5
	if (pad > 0) {
    b6d8:	cmp.w	sl, #0
    b6dc:	ble.n	b792 <dtostrf+0x1fa>
		while (pad-- > 0) *p++ = ' ';
    b6de:	mov	r2, sl
    b6e0:	movs	r1, #32
    b6e2:	mov	r0, r4
		e += pad;
    b6e4:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    b6e6:	bl	a2ac <memset>
    b6ea:	add.w	r3, r4, sl
	if (sign) *p++ = '-';
    b6ee:	cmp.w	fp, #0
    b6f2:	beq.n	b6fa <dtostrf+0x162>
    b6f4:	movs	r2, #45	@ 0x2d
    b6f6:	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    b6fa:	ldr	r1, [sp, #4]
    b6fc:	cmp	r1, #0
    b6fe:	bne.n	b796 <dtostrf+0x1fe>
    b700:	cbz	r6, b710 <dtostrf+0x178>
		*p++ = '0';
    b702:	mov	r2, r3
    b704:	movs	r1, #48	@ 0x30
    b706:	strb.w	r1, [r2], #2
		*p++ = '.';
    b70a:	movs	r1, #46	@ 0x2e
    b70c:	strb	r1, [r3, #1]
    b70e:	mov	r3, r2
		if (--decpt == 0) *p++ = '.';
    b710:	movs	r0, #46	@ 0x2e
	while (p < e) {
    b712:	cmp	r9, r3
		*p++ = *s++;
    b714:	mov	r2, r3
	while (p < e) {
    b716:	bhi.n	b7c6 <dtostrf+0x22e>
	if (width < 0) {
    b718:	cmp	r7, #0
    b71a:	bge.n	b732 <dtostrf+0x19a>
		pad = (reqd + width) * -1;
    b71c:	add	r5, r7
		while (pad-- > 0) *p++ = ' ';
    b71e:	mov	r3, r2
    b720:	movs	r6, #32
		pad = (reqd + width) * -1;
    b722:	negs	r1, r5
		while (pad-- > 0) *p++ = ' ';
    b724:	subs	r5, r2, r5
    b726:	subs	r0, r5, r3
    b728:	cmp	r0, #0
    b72a:	bgt.n	b7e2 <dtostrf+0x24a>
    b72c:	cmp	r1, #0
    b72e:	it	ge
    b730:	addge	r2, r2, r1
	*p = 0;
    b732:	movs	r3, #0
	return buf;
    b734:	mov	r0, r4
	*p = 0;
    b736:	strb	r3, [r2, #0]
	return buf;
    b738:	b.n	b5f4 <dtostrf+0x5c>
	if (-decpt  > (int)precision) {
    b73a:	negs	r3, r3
    b73c:	cmp	r6, r3
		decpt = -precision;
    b73e:	ittt	lt
    b740:	neglt	r3, r6
		s = "0";
    b742:	ldrlt.w	r8, [pc, #176]	@ b7f4 <dtostrf+0x25c>
		decpt = -precision;
    b746:	strlt	r3, [sp, #4]
    b748:	b.n	b6aa <dtostrf+0x112>
	if (decpt < 0 && precision > 0) {
    b74a:	bge.n	b6c4 <dtostrf+0x12c>
    b74c:	cmp	r6, #0
    b74e:	beq.n	b6c4 <dtostrf+0x12c>
		if (strlen(s) > precision + decpt) {
    b750:	add	r3, r6
		reqd = precision + 2;
    b752:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    b754:	cmp	r0, r3
    b756:	bls.n	b6c4 <dtostrf+0x12c>
				val *= 10.0f;
    b758:	vmov.f32	s15, #36	@ 0x41200000  10.0
			int newPrecision = precision;
    b75c:	mov	r3, r6
    b75e:	b.n	b766 <dtostrf+0x1ce>
				val *= 10.0f;
    b760:	vmul.f32	s16, s16, s15
				newPrecision--;
    b764:	subs	r3, #1
			while (newPrecision > 0) {
    b766:	cmp	r3, #0
    b768:	bgt.n	b760 <dtostrf+0x1c8>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b76a:	cmp	r6, #0
    b76c:	add	r2, sp, #8
    b76e:	add	r1, sp, #12
    b770:	vmov.f32	s0, s16
    b774:	ite	ge
    b776:	subge	r0, r6, r6
    b778:	movlt	r0, r6
    b77a:	bl	db7a <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b77e:	ldr	r3, [sp, #4]
    b780:	ldr	r2, [sp, #12]
    b782:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b784:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b786:	subs	r2, r2, r3
    b788:	cmp	r2, r1
    b78a:	itt	eq
    b78c:	addeq	r3, #1
    b78e:	streq	r3, [sp, #4]
    b790:	b.n	b6c4 <dtostrf+0x12c>
	p = buf;
    b792:	mov	r3, r4
    b794:	b.n	b6ee <dtostrf+0x156>
	else if (decpt < 0 && precision > 0) {
    b796:	bge.n	b710 <dtostrf+0x178>
    b798:	cmp	r6, #0
    b79a:	beq.n	b710 <dtostrf+0x178>
		*p++ = '0';
    b79c:	mov	r2, r3
    b79e:	rsb	r1, r1, #2
    b7a2:	movs	r0, #48	@ 0x30
		*p++ = '.';
    b7a4:	movs	r6, #46	@ 0x2e
		*p++ = '0';
    b7a6:	strb.w	r0, [r2], #2
		*p++ = '.';
    b7aa:	strb	r6, [r3, #1]
		while ( decpt < 0 ) {
    b7ac:	add	r3, r1
    b7ae:	movs	r1, #0
    b7b0:	cmp	r2, r3
    b7b2:	bne.n	b7be <dtostrf+0x226>
    b7b4:	cmp	r1, #0
    b7b6:	beq.n	b710 <dtostrf+0x178>
    b7b8:	movs	r2, #0
    b7ba:	str	r2, [sp, #4]
    b7bc:	b.n	b710 <dtostrf+0x178>
			*p++ = '0';
    b7be:	movs	r1, #1
    b7c0:	strb.w	r0, [r2], #1
    b7c4:	b.n	b7b0 <dtostrf+0x218>
		*p++ = *s++;
    b7c6:	ldrb.w	r1, [r8], #1
    b7ca:	strb.w	r1, [r2], #1
		if (p == e) break;
    b7ce:	cmp	r9, r2
    b7d0:	beq.n	b718 <dtostrf+0x180>
		if (--decpt == 0) *p++ = '.';
    b7d2:	ldr	r1, [sp, #4]
    b7d4:	subs	r1, #1
    b7d6:	str	r1, [sp, #4]
    b7d8:	cbnz	r1, b7de <dtostrf+0x246>
    b7da:	adds	r2, r3, #2
    b7dc:	strb	r0, [r3, #1]
		*p++ = '.';
    b7de:	mov	r3, r2
    b7e0:	b.n	b712 <dtostrf+0x17a>
		while (pad-- > 0) *p++ = ' ';
    b7e2:	strb.w	r6, [r3], #1
    b7e6:	b.n	b726 <dtostrf+0x18e>
	if (decpt == 0) reqd++;
    b7e8:	cmp	r3, #0
    b7ea:	beq.w	b6c2 <dtostrf+0x12a>
    b7ee:	b.n	b6c4 <dtostrf+0x12c>
    b7f0:	.word	0x7f7fffff
    b7f4:	.word	0x200013ef
    b7f8:	.word	0x20000f41

0000b7fc <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    b7fc:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b7fe:	ldr	r3, [pc, #52]	@ (b834 <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b800:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b802:	ldr	r6, [pc, #52]	@ (b838 <micros+0x3c>)
		scc = systick_cycle_count;
    b804:	ldr	r5, [pc, #52]	@ (b83c <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b806:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b80a:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    b80c:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b80e:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b812:	cmp	r2, #0
    b814:	bne.n	b806 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b816:	ldr	r3, [pc, #40]	@ (b840 <micros+0x44>)
    b818:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b81a:	ldr	r2, [pc, #40]	@ (b844 <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    b81c:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b81e:	ldr	r2, [r2, #0]
    b820:	umull	r2, r3, r2, r3
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b824:	mov.w	r2, #1000	@ 0x3e8
    b828:	muls	r0, r2
	return usec;
}
    b82a:	cmp	r3, r2
    b82c:	ite	ls
    b82e:	addls	r0, r0, r3
    b830:	addhi	r0, r0, r2
    b832:	pop	{r4, r5, r6, pc}
    b834:	.word	0x20012868
    b838:	.word	0x20012864
    b83c:	.word	0x20012860
    b840:	.word	0xe0001000
    b844:	.word	0x200121d0

0000b848 <delay>:
{
    b848:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    b84a:	mov	r4, r0
    b84c:	cbz	r0, b872 <delay+0x2a>
	start = micros();
    b84e:	bl	b7fc <micros>
    b852:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    b854:	bl	b7fc <micros>
    b858:	subs	r0, r0, r5
    b85a:	cmp.w	r0, #1000	@ 0x3e8
    b85e:	bcs.n	b866 <delay+0x1e>
		yield();
    b860:	bl	c4a4 <yield>
		while ((micros() - start) >= 1000) {
    b864:	b.n	b854 <delay+0xc>
			if (--msec == 0) return;
    b866:	cmp	r4, #1
    b868:	beq.n	b872 <delay+0x2a>
    b86a:	subs	r4, #1
			start += 1000;
    b86c:	add.w	r5, r5, #1000	@ 0x3e8
    b870:	b.n	b854 <delay+0xc>
}
    b872:	pop	{r3, r4, r5, pc}

0000b874 <unused_interrupt_vector>:
	__disable_irq();
    b874:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b876:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b87a:	ldr	r4, [pc, #316]	@ (b9b8 <unused_interrupt_vector+0x144>)
    b87c:	str.w	r3, [r4, #132]	@ 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    b880:	tst.w	lr, #4
    b884:	ite	eq
    b886:	mrseq	r2, MSP
    b88a:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    b88e:	mov.w	r3, #3758153728	@ 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b892:	ldr	r7, [pc, #296]	@ (b9bc <unused_interrupt_vector+0x148>)
	while (p < end) {
    b894:	ldr	r6, [pc, #296]	@ (b9c0 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b896:	ldr.w	r1, [r3, #3368]	@ 0xd28
    b89a:	str.w	r1, [r4, #136]	@ 0x88
	info->hfsr = SCB_HFSR;
    b89e:	ldr.w	r1, [r3, #3372]	@ 0xd2c
    b8a2:	str.w	r1, [r4, #140]	@ 0x8c
	info->mmfar = SCB_MMFAR;
    b8a6:	ldr.w	r1, [r3, #3380]	@ 0xd34
    b8aa:	str.w	r1, [r4, #144]	@ 0x90
	info->bfar = SCB_BFAR;
    b8ae:	ldr.w	r3, [r3, #3384]	@ 0xd38
    b8b2:	str.w	r3, [r4, #148]	@ 0x94
	info->ret = stack[6];
    b8b6:	ldr	r3, [r2, #24]
    b8b8:	str.w	r3, [r4, #152]	@ 0x98
	info->xpsr = stack[7];
    b8bc:	ldr	r3, [r2, #28]
    b8be:	str.w	r3, [r4, #156]	@ 0x9c
	info->temp = tempmonGetTemp();
    b8c2:	bl	bf18 <tempmonGetTemp>
    b8c6:	vstr	s0, [r4, #160]	@ 0xa0
	info->time = rtc_get();
    b8ca:	bl	ba44 <rtc_get>
	info->len = sizeof(*info) / 4;
    b8ce:	movs	r3, #11
	p = (uint32_t *)info;
    b8d0:	ldr	r2, [pc, #240]	@ (b9c4 <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    b8d2:	str.w	r0, [r4, #164]	@ 0xa4
	info->len = sizeof(*info) / 4;
    b8d6:	str.w	r3, [r4, #128]	@ 0x80
	while (p < end) {
    b8da:	mov	r0, r2
	crc = 0xFFFFFFFF;
    b8dc:	mov.w	r3, #4294967295
		crc ^= *p++;
    b8e0:	ldr	r1, [r2, #0]
    b8e2:	movs	r5, #32
    b8e4:	adds	r2, #4
    b8e6:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b8e8:	sbfx	r1, r3, #0, #1
    b8ec:	subs	r5, #1
    b8ee:	and.w	r1, r1, r7
    b8f2:	eor.w	r3, r1, r3, lsr #1
    b8f6:	bne.n	b8e8 <unused_interrupt_vector+0x74>
	while (p < end) {
    b8f8:	cmp	r2, r6
    b8fa:	bne.n	b8e0 <unused_interrupt_vector+0x6c>
	info->crc = crc;
    b8fc:	str.w	r3, [r4, #168]	@ 0xa8
	asm("dsb");
    b900:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b904:	mov.w	r3, #3758153728	@ 0xe000e000
    b908:	ldr	r2, [pc, #188]	@ (b9c8 <unused_interrupt_vector+0x154>)
    b90a:	str.w	r0, [r3, #3952]	@ 0xf70
    b90e:	str.w	r2, [r3, #3952]	@ 0xf70
	asm("dsb");
    b912:	dsb	sy
	asm("isb");
    b916:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b91a:	ldr	r2, [pc, #176]	@ (b9cc <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b91c:	ldr	r4, [pc, #176]	@ (b9d0 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b91e:	ldr	r3, [r2, #108]	@ 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b920:	ldr	r0, [pc, #176]	@ (b9d4 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b922:	orr.w	r3, r3, #12288	@ 0x3000
    b926:	str	r3, [r2, #108]	@ 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b928:	movs	r3, #2
    b92a:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b92c:	ldr	r3, [r2, #28]
    b92e:	bic.w	r3, r3, #127	@ 0x7f
    b932:	orr.w	r3, r3, #64	@ 0x40
    b936:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b938:	ldr	r3, [pc, #156]	@ (b9d8 <unused_interrupt_vector+0x164>)
    b93a:	ldr	r3, [r3, #0]
    b93c:	cmp	r3, r0
    b93e:	bls.n	b944 <unused_interrupt_vector+0xd0>
    b940:	bl	aaf0 <set_arm_clock>
	PIT_MCR = 0;
    b944:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b946:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    b948:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b94c:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    b94e:	str.w	r3, [r4, #264]	@ 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b952:	ldr	r3, [pc, #136]	@ (b9dc <unused_interrupt_vector+0x168>)
    b954:	str.w	r3, [r4, #256]	@ 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    b958:	mov.w	r3, #3758153728	@ 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b95c:	str.w	r6, [r4, #264]	@ 0x108
		if (PIT_TFLG0) {
    b960:	ldr	r4, [pc, #108]	@ (b9d0 <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    b962:	str.w	r2, [r3, #384]	@ 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b966:	str.w	r2, [r3, #388]	@ 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b96a:	str.w	r2, [r3, #392]	@ 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b96e:	str.w	r2, [r3, #396]	@ 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b972:	str.w	r2, [r3, #400]	@ 0x190
		if (PIT_TFLG0) {
    b976:	ldr.w	r3, [r4, #268]	@ 0x10c
    b97a:	cbz	r3, b986 <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    b97c:	adds	r5, #1
			PIT_TFLG0 = 1;
    b97e:	str.w	r6, [r4, #268]	@ 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b982:	cmp	r5, #79	@ 0x4f
    b984:	bhi.n	b98c <unused_interrupt_vector+0x118>
		usb_isr();
    b986:	bl	afa4 <usb_isr>
		if (PIT_TFLG0) {
    b98a:	b.n	b976 <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    b98c:	ldr	r3, [pc, #80]	@ (b9e0 <unused_interrupt_vector+0x16c>)
    b98e:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    b990:	ldr	r1, [pc, #80]	@ (b9e4 <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    b992:	str.w	r2, [r3, #320]	@ 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b996:	mov.w	r2, #2147483648	@ 0x80000000
    b99a:	ldr	r3, [pc, #76]	@ (b9e8 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    b99c:	ldr	r0, [pc, #76]	@ (b9ec <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b99e:	str	r2, [r3, #52]	@ 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b9a0:	ldr	r2, [pc, #44]	@ (b9d0 <unused_interrupt_vector+0x15c>)
    b9a2:	ldr.w	r3, [r2, #268]	@ 0x10c
    b9a6:	cbz	r3, b9b4 <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    b9a8:	mov.w	r3, #3758153728	@ 0xe000e000
    b9ac:	ldr	r2, [pc, #64]	@ (b9f0 <unused_interrupt_vector+0x17c>)
    b9ae:	str.w	r2, [r3, #3340]	@ 0xd0c
	while (1) ;
    b9b2:	b.n	b9b2 <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    b9b4:	str	r0, [r1, #48]	@ 0x30
    b9b6:	b.n	b9a2 <unused_interrupt_vector+0x12e>
    b9b8:	.word	0x2027ff00
    b9bc:	.word	0xedb88320
    b9c0:	.word	0x2027ffa8
    b9c4:	.word	0x2027ff80
    b9c8:	.word	0x2027ffa0
    b9cc:	.word	0x400fc000
    b9d0:	.word	0x40084000
    b9d4:	.word	0x0bcd3d80
    b9d8:	.word	0x20001e54
    b9dc:	.word	0x00249f00
    b9e0:	.word	0x402e0000
    b9e4:	.word	0x400f8000
    b9e8:	.word	0x400d9000
    b9ec:	.word	0x0bad00f1
    b9f0:	.word	0x05fa0004

0000b9f4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    b9f4:	ldr	r2, [pc, #32]	@ (ba18 <_sbrk+0x24>)
{
    b9f6:	push	{r3, lr}
    b9f8:	mov	r3, r0
        char *prev = __brkval;
    b9fa:	ldr	r0, [r2, #0]
        if (incr != 0) {
    b9fc:	cbz	r3, ba12 <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    b9fe:	add	r3, r0
    ba00:	ldr	r1, [pc, #24]	@ (ba1c <_sbrk+0x28>)
    ba02:	cmp	r3, r1
    ba04:	bls.n	ba14 <_sbrk+0x20>
                        errno = ENOMEM;
    ba06:	bl	ed74 <__errno>
    ba0a:	movs	r3, #12
    ba0c:	str	r3, [r0, #0]
                        return (void *)-1;
    ba0e:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ba12:	pop	{r3, pc}
                __brkval = prev + incr;
    ba14:	str	r3, [r2, #0]
    ba16:	b.n	ba12 <_sbrk+0x1e>
    ba18:	.word	0x2000222c
    ba1c:	.word	0x20280000

0000ba20 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    ba20:	movs	r0, #0
    ba22:	bx	lr

0000ba24 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    ba24:	mov.w	r0, #4294967295
    ba28:	bx	lr

0000ba2a <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    ba2a:	mov.w	r3, #8192	@ 0x2000
	return 0;
}
    ba2e:	movs	r0, #0
	st->st_mode = S_IFCHR;
    ba30:	str	r3, [r1, #4]
}
    ba32:	bx	lr

0000ba34 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    ba34:	movs	r0, #1
    ba36:	bx	lr

0000ba38 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    ba38:	mov.w	r0, #4294967295
    ba3c:	bx	lr

0000ba3e <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    ba3e:	wfi
    ba40:	b.n	ba3e <abort>
	...

0000ba44 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    ba44:	ldr	r2, [pc, #32]	@ (ba68 <rtc_get+0x24>)
    ba46:	ldr	r0, [r2, #36]	@ 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    ba48:	ldr	r3, [r2, #40]	@ 0x28
{
    ba4a:	push	{r4, lr}
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    ba4c:	ldr	r1, [r2, #36]	@ 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    ba4e:	ldr	r4, [r2, #40]	@ 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    ba50:	cmp	r3, r4
    ba52:	bne.n	ba60 <rtc_get+0x1c>
    ba54:	cmp	r0, r1
    ba56:	bne.n	ba60 <rtc_get+0x1c>
			return (hi2 << 17) | (lo2 >> 15);
    ba58:	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    ba5a:	orr.w	r0, r3, r0, lsl #17
    ba5e:	pop	{r4, pc}
{
    ba60:	mov	r3, r4
    ba62:	mov	r0, r1
    ba64:	b.n	ba4c <rtc_get+0x8>
    ba66:	nop
    ba68:	.word	0x400d4000

0000ba6c <rtc_set>:

void rtc_set(unsigned long t)
{
	// stop the RTC
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    ba6c:	ldr	r3, [pc, #60]	@ (baac <rtc_set+0x40>)
    ba6e:	ldr	r2, [r3, #8]
    ba70:	bic.w	r2, r2, #65537	@ 0x10001
    ba74:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    ba76:	ldr	r2, [r3, #8]
    ba78:	lsls	r2, r2, #31
    ba7a:	bmi.n	ba76 <rtc_set+0xa>
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    ba7c:	ldr	r2, [r3, #56]	@ 0x38
    ba7e:	bic.w	r2, r2, #1
    ba82:	str	r2, [r3, #56]	@ 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    ba84:	ldr	r3, [pc, #36]	@ (baac <rtc_set+0x40>)
    ba86:	ldr	r2, [r3, #56]	@ 0x38
    ba88:	lsls	r1, r2, #31
    ba8a:	bmi.n	ba86 <rtc_set+0x1a>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
    ba8c:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    ba8e:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    ba90:	str	r2, [r3, #84]	@ 0x54
	SNVS_LPSRTCMR = t >> 17;
    ba92:	str	r0, [r3, #80]	@ 0x50
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    ba94:	ldr	r2, [r3, #56]	@ 0x38
    ba96:	orr.w	r2, r2, #1
    ba9a:	str	r2, [r3, #56]	@ 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    ba9c:	ldr	r2, [r3, #56]	@ 0x38
    ba9e:	lsls	r2, r2, #31
    baa0:	bpl.n	ba9c <rtc_set+0x30>
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    baa2:	ldr	r2, [r3, #8]
    baa4:	orr.w	r2, r2, #65537	@ 0x10001
    baa8:	str	r2, [r3, #8]
}
    baaa:	bx	lr
    baac:	.word	0x400d4000

0000bab0 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bab0:	ldr	r3, [pc, #68]	@ (baf8 <flash_wait+0x48>)
	FLEXSPI_LUT61 = 0;
    bab2:	movs	r1, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bab4:	ldr	r2, [pc, #68]	@ (bafc <flash_wait+0x4c>)
{
    bab6:	push	{r4, r5, lr}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bab8:	str.w	r2, [r3, #752]	@ 0x2f0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    babc:	movs	r2, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    babe:	ldr	r5, [pc, #64]	@ (bb00 <flash_wait+0x50>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    bac0:	ldr	r4, [pc, #64]	@ (bb04 <flash_wait+0x54>)
	FLEXSPI_LUT61 = 0;
    bac2:	str.w	r1, [r3, #756]	@ 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    bac6:	str.w	r2, [r3, #184]	@ 0xb8
		FLEXSPI_IPCR0 = 0;
    baca:	str.w	r1, [r3, #160]	@ 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    bace:	str.w	r5, [r3, #164]	@ 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bad2:	str.w	r2, [r3, #176]	@ 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    bad6:	ldr	r0, [r3, #20]
    bad8:	lsls	r0, r0, #31
    bada:	bpl.n	bad6 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    badc:	str	r2, [r3, #20]
	} while (status & 1);
    bade:	ldrb	r0, [r4, #0]
    bae0:	lsls	r0, r0, #31
    bae2:	bmi.n	bac6 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    bae4:	ldr	r2, [r3, #0]
    bae6:	orr.w	r2, r2, #1
    baea:	str	r2, [r3, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    baec:	ldr	r2, [pc, #8]	@ (baf8 <flash_wait+0x48>)
    baee:	ldr	r3, [r2, #0]
    baf0:	lsls	r3, r3, #31
    baf2:	bmi.n	baee <flash_wait+0x3e>
	__enable_irq();
    baf4:	cpsie	i
}
    baf6:	pop	{r4, r5, pc}
    baf8:	.word	0x402a8000
    bafc:	.word	0x24010405
    bb00:	.word	0x000f0001
    bb04:	.word	0x402a8100

0000bb08 <eeprom_initialize>:
{
    bb08:	push	{r4, r5, lr}
    bb0a:	ldr	r3, [pc, #52]	@ (bb40 <eeprom_initialize+0x38>)
			if (*p++ == 0xFFFF) break;
    bb0c:	movw	r5, #65535	@ 0xffff
    bb10:	ldr	r4, [pc, #48]	@ (bb44 <eeprom_initialize+0x3c>)
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bb12:	sub.w	r1, r3, #4096	@ 0x1000
		uint16_t index = 0;
    bb16:	movs	r2, #0
			if (*p++ == 0xFFFF) break;
    bb18:	ldrh	r0, [r1, #0]
    bb1a:	adds	r1, #2
    bb1c:	cmp	r0, r5
    bb1e:	beq.n	bb28 <eeprom_initialize+0x20>
			index++;
    bb20:	adds	r2, #1
		} while (p < end);
    bb22:	cmp	r1, r3
			index++;
    bb24:	uxth	r2, r2
		} while (p < end);
    bb26:	bcc.n	bb18 <eeprom_initialize+0x10>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    bb28:	add.w	r3, r3, #4096	@ 0x1000
		sector_index[sector] = index;
    bb2c:	strh.w	r2, [r4], #2
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    bb30:	cmp.w	r3, #1619001344	@ 0x60800000
    bb34:	bne.n	bb12 <eeprom_initialize+0xa>
	initialized = 1;
    bb36:	ldr	r3, [pc, #16]	@ (bb48 <eeprom_initialize+0x40>)
    bb38:	movs	r2, #1
    bb3a:	strb	r2, [r3, #0]
}
    bb3c:	pop	{r4, r5, pc}
    bb3e:	nop
    bb40:	.word	0x607c1000
    bb44:	.word	0x200128da
    bb48:	.word	0x20012aac

0000bb4c <eeprom_read_byte>:
{
    bb4c:	push	{r3, r4, r5, lr}
	if (addr > E2END) return 0xFF;
    bb4e:	movw	r3, #4283	@ 0x10bb
{
    bb52:	mov	r4, r0
	if (addr > E2END) return 0xFF;
    bb54:	cmp	r0, r3
    bb56:	bhi.n	bba4 <eeprom_read_byte+0x58>
	if (!initialized) eeprom_initialize();
    bb58:	ldr	r3, [pc, #76]	@ (bba8 <eeprom_read_byte+0x5c>)
    bb5a:	ldrb	r3, [r3, #0]
    bb5c:	cbnz	r3, bb62 <eeprom_read_byte+0x16>
    bb5e:	bl	bb08 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS;
    bb62:	lsrs	r2, r4, #2
    bb64:	movs	r3, #63	@ 0x3f
	end = p + sector_index[sector];
    bb66:	ldr	r0, [pc, #68]	@ (bbac <eeprom_read_byte+0x60>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bb68:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS;
    bb6c:	udiv	r3, r2, r3
    bb70:	rsb	r1, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bb74:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS;
    bb78:	subs	r2, r2, r1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bb7a:	add.w	r1, r2, #393216	@ 0x60000
	end = p + sector_index[sector];
    bb7e:	ldrh.w	r2, [r0, r2, lsl #1]
	uint8_t data=0xFF;
    bb82:	movs	r0, #255	@ 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bb84:	add.w	r1, r1, #1984	@ 0x7c0
	end = p + sector_index[sector];
    bb88:	lsls	r2, r2, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bb8a:	lsls	r3, r1, #12
	end = p + sector_index[sector];
    bb8c:	add.w	r2, r2, r1, lsl #12
	while (p < end) {
    bb90:	cmp	r3, r2
    bb92:	bcc.n	bb96 <eeprom_read_byte+0x4a>
}
    bb94:	pop	{r3, r4, r5, pc}
		uint32_t val = *p++;
    bb96:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    bb9a:	uxtb	r5, r1
    bb9c:	cmp	r5, r4
    bb9e:	it	eq
    bba0:	lsreq	r0, r1, #8
    bba2:	b.n	bb90 <eeprom_read_byte+0x44>
	if (addr > E2END) return 0xFF;
    bba4:	movs	r0, #255	@ 0xff
    bba6:	b.n	bb94 <eeprom_read_byte+0x48>
    bba8:	.word	0x20012aac
    bbac:	.word	0x200128da

0000bbb0 <eeprom_read_block>:
{
    bbb0:	push	{r4, r5, r6, lr}
    bbb2:	mov	r4, r0
    bbb4:	adds	r5, r1, r2
    bbb6:	mov	r0, r1
	while (len--) {
    bbb8:	cmp	r0, r5
    bbba:	bne.n	bbbe <eeprom_read_block+0xe>
}
    bbbc:	pop	{r4, r5, r6, pc}
		*dest++ = eeprom_read_byte(p++);
    bbbe:	adds	r6, r0, #1
    bbc0:	bl	bb4c <eeprom_read_byte>
    bbc4:	strb.w	r0, [r4], #1
    bbc8:	mov	r0, r6
    bbca:	b.n	bbb8 <eeprom_read_block+0x8>

0000bbcc <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    bbcc:	push	{r3, r4, r5, r6, r7, lr}
    bbce:	mov	r5, r1
    bbd0:	mov	r4, r2
	__disable_irq();
    bbd2:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bbd4:	ldr	r3, [pc, #184]	@ (bc90 <eepromemu_flash_write+0xc4>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bbd6:	movw	r1, #1030	@ 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bbda:	ldr	r2, [pc, #184]	@ (bc94 <eepromemu_flash_write+0xc8>)
    bbdc:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    bbde:	movs	r2, #2
    bbe0:	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    bbe2:	movs	r2, #0
    bbe4:	str.w	r2, [r3, #160]	@ 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bbe8:	str.w	r1, [r3, #752]	@ 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    bbec:	adds	r1, r0, r4
	FLEXSPI_LUT61 = 0;
    bbee:	str.w	r2, [r3, #756]	@ 0x2f4
	FLEXSPI_LUT62 = 0;
    bbf2:	str.w	r2, [r3, #760]	@ 0x2f8
	FLEXSPI_LUT63 = 0;
    bbf6:	str.w	r2, [r3, #764]	@ 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bbfa:	mov.w	r2, #983040	@ 0xf0000
    bbfe:	str.w	r2, [r3, #164]	@ 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bc02:	movs	r2, #1
    bc04:	str.w	r2, [r3, #176]	@ 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bc08:	bic.w	r2, r0, #31
	asm("dsb");
    bc0c:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    bc10:	mov.w	r6, #3758153728	@ 0xe000e000
    bc14:	str.w	r2, [r6, #3932]	@ 0xf5c
		location += 32;
    bc18:	adds	r2, #32
	} while (location < end_addr);
    bc1a:	cmp	r1, r2
    bc1c:	bhi.n	bc14 <eepromemu_flash_write+0x48>
	asm("dsb");
    bc1e:	dsb	sy
	asm("isb");
    bc22:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bc26:	ldr	r2, [r3, #20]
    bc28:	lsls	r6, r2, #31
    bc2a:	bpl.n	bc26 <eepromemu_flash_write+0x5a>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bc2c:	movs	r2, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    bc2e:	ldr	r1, [pc, #104]	@ (bc98 <eepromemu_flash_write+0xcc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    bc30:	bic.w	r0, r0, #4278190080	@ 0xff000000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    bc34:	ldr	r7, [pc, #88]	@ (bc90 <eepromemu_flash_write+0xc4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bc36:	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    bc38:	str.w	r1, [r3, #752]	@ 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    bc3c:	movw	r1, #8705	@ 0x2201
    bc40:	str.w	r1, [r3, #756]	@ 0x2f4
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bc44:	uxth	r1, r4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    bc46:	str.w	r2, [r3, #188]	@ 0xbc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bc4a:	orr.w	r1, r1, #983040	@ 0xf0000
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    bc4e:	str.w	r0, [r3, #160]	@ 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bc52:	str.w	r1, [r3, #164]	@ 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bc56:	str.w	r2, [r3, #176]	@ 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    bc5a:	ldr	r3, [r7, #20]
    bc5c:	lsls	r2, r3, #31
    bc5e:	bpl.n	bc6c <eepromemu_flash_write+0xa0>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    bc60:	movs	r3, #65	@ 0x41
    bc62:	str	r3, [r7, #20]
	flash_wait();
}
    bc64:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    bc68:	b.w	bab0 <flash_wait>
		if (n & FLEXSPI_INTR_IPTXWE) {
    bc6c:	lsls	r1, r3, #25
    bc6e:	bpl.n	bc5a <eepromemu_flash_write+0x8e>
			if (wrlen > 8) wrlen = 8;
    bc70:	cmp	r4, #8
    bc72:	bhi.n	bc8c <eepromemu_flash_write+0xc0>
			if (wrlen > 0) {
    bc74:	cbz	r4, bc86 <eepromemu_flash_write+0xba>
    bc76:	mov	r6, r4
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bc78:	mov	r1, r5
				len -= wrlen;
    bc7a:	subs	r4, r4, r6
				src += wrlen;
    bc7c:	add	r5, r6
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bc7e:	mov	r2, r6
    bc80:	ldr	r0, [pc, #24]	@ (bc9c <eepromemu_flash_write+0xd0>)
    bc82:	bl	a2f0 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    bc86:	movs	r3, #64	@ 0x40
    bc88:	str	r3, [r7, #20]
    bc8a:	b.n	bc5a <eepromemu_flash_write+0x8e>
			if (wrlen > 8) wrlen = 8;
    bc8c:	movs	r6, #8
    bc8e:	b.n	bc78 <eepromemu_flash_write+0xac>
    bc90:	.word	0x402a8000
    bc94:	.word	0x5af05af0
    bc98:	.word	0x08180432
    bc9c:	.word	0x402a8180

0000bca0 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    bca0:	push	{r4}
	__disable_irq();
    bca2:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bca4:	ldr	r3, [pc, #156]	@ (bd44 <eepromemu_flash_erase_sector+0xa4>)
    bca6:	ldr	r2, [pc, #160]	@ (bd48 <eepromemu_flash_erase_sector+0xa8>)
    bca8:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    bcaa:	movs	r2, #2
    bcac:	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bcae:	movw	r2, #1030	@ 0x406
    bcb2:	str.w	r2, [r3, #752]	@ 0x2f0
	FLEXSPI_LUT61 = 0;
    bcb6:	movs	r2, #0
    bcb8:	str.w	r2, [r3, #756]	@ 0x2f4
	FLEXSPI_LUT62 = 0;
    bcbc:	str.w	r2, [r3, #760]	@ 0x2f8
	FLEXSPI_LUT63 = 0;
    bcc0:	str.w	r2, [r3, #764]	@ 0x2fc
	FLEXSPI_IPCR0 = 0;
    bcc4:	str.w	r2, [r3, #160]	@ 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bcc8:	mov.w	r2, #983040	@ 0xf0000
    bccc:	str.w	r2, [r3, #164]	@ 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bcd0:	movs	r2, #1
    bcd2:	str.w	r2, [r3, #176]	@ 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    bcd6:	bic.w	r2, r0, #4080	@ 0xff0
    bcda:	bic.w	r2, r2, #15
	asm("dsb");
    bcde:	dsb	sy
    bce2:	add.w	r4, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
    bce6:	add.w	r1, r2, #4096	@ 0x1000
    bcea:	cmp	r1, r4
    bcec:	ite	cc
    bcee:	movcc	r1, #1
    bcf0:	movcs	r1, #128	@ 0x80
		SCB_CACHE_DCIMVAC = location;
    bcf2:	mov.w	r4, #3758153728	@ 0xe000e000
    bcf6:	add.w	r1, r2, r1, lsl #5
    bcfa:	str.w	r2, [r4, #3932]	@ 0xf5c
		location += 32;
    bcfe:	adds	r2, #32
	} while (location < end_addr);
    bd00:	cmp	r2, r1
    bd02:	bne.n	bcfa <eepromemu_flash_erase_sector+0x5a>
	asm("dsb");
    bd04:	dsb	sy
	asm("isb");
    bd08:	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bd0c:	ldr	r2, [r3, #20]
    bd0e:	lsls	r1, r2, #31
    bd10:	bpl.n	bd0c <eepromemu_flash_erase_sector+0x6c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bd12:	movs	r1, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    bd14:	ldr	r2, [pc, #52]	@ (bd4c <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bd16:	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    bd18:	str.w	r2, [r3, #752]	@ 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    bd1c:	ldr	r2, [pc, #48]	@ (bd50 <eepromemu_flash_erase_sector+0xb0>)
    bd1e:	ands	r2, r0
    bd20:	str.w	r2, [r3, #160]	@ 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bd24:	mov.w	r2, #983040	@ 0xf0000
    bd28:	str.w	r2, [r3, #164]	@ 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bd2c:	str.w	r1, [r3, #176]	@ 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bd30:	ldr	r3, [pc, #16]	@ (bd44 <eepromemu_flash_erase_sector+0xa4>)
    bd32:	ldr	r2, [r3, #20]
    bd34:	lsls	r2, r2, #31
    bd36:	bpl.n	bd32 <eepromemu_flash_erase_sector+0x92>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bd38:	movs	r2, #1
	flash_wait();
}
    bd3a:	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bd3e:	str	r2, [r3, #20]
	flash_wait();
    bd40:	b.w	bab0 <flash_wait>
    bd44:	.word	0x402a8000
    bd48:	.word	0x5af05af0
    bd4c:	.word	0x08180420
    bd50:	.word	0x00fff000

0000bd54 <eeprom_write_byte>:
	if (addr > E2END) return;
    bd54:	movw	r3, #4283	@ 0x10bb
    bd58:	cmp	r0, r3
{
    bd5a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bd5e:	mov	r4, r0
    bd60:	sub	sp, #268	@ 0x10c
    bd62:	mov	r9, r1
	if (addr > E2END) return;
    bd64:	bhi.n	bdc6 <eeprom_write_byte+0x72>
	if (!initialized) eeprom_initialize();
    bd66:	ldr	r3, [pc, #220]	@ (be44 <eeprom_write_byte+0xf0>)
    bd68:	ldrb	r3, [r3, #0]
    bd6a:	cbnz	r3, bd70 <eeprom_write_byte+0x1c>
    bd6c:	bl	bb08 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS; 
    bd70:	lsrs	r6, r4, #2
    bd72:	movs	r3, #63	@ 0x3f
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bd74:	and.w	r4, r4, #3
	end = p + sector_index[sector];
    bd78:	ldr.w	r8, [pc, #204]	@ be48 <eeprom_write_byte+0xf4>
	sector = (addr >> 2) % FLASH_SECTORS; 
    bd7c:	udiv	r3, r6, r3
    bd80:	rsb	r2, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bd84:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    bd88:	subs	r6, r6, r2
	uint8_t olddata=0xFF;
    bd8a:	movs	r2, #255	@ 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bd8c:	add.w	r3, r6, #393216	@ 0x60000
	end = p + sector_index[sector];
    bd90:	ldrh.w	r5, [r8, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bd94:	add.w	r3, r3, #1984	@ 0x7c0
	end = p + sector_index[sector];
    bd98:	lsls	r0, r5, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bd9a:	lsls	r7, r3, #12
	end = p + sector_index[sector];
    bd9c:	add.w	r0, r0, r3, lsl #12
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bda0:	mov	r3, r7
	while (p < end) {
    bda2:	cmp	r3, r0
    bda4:	bcc.n	bdcc <eeprom_write_byte+0x78>
	if (data == olddata) return;
    bda6:	cmp	r2, r9
    bda8:	beq.n	bdc6 <eeprom_write_byte+0x72>
	if (sector_index[sector] < 2048) {
    bdaa:	cmp.w	r5, #2048	@ 0x800
    bdae:	bcs.n	bddc <eeprom_write_byte+0x88>
		uint16_t newdata = offset | (data << 8);
    bdb0:	orr.w	r4, r4, r9, lsl #8
		sector_index[sector] = sector_index[sector] + 1;
    bdb4:	adds	r5, #1
		eepromemu_flash_write(end, &newdata, 2);
    bdb6:	movs	r2, #2
    bdb8:	add	r1, sp, #8
		uint16_t newdata = offset | (data << 8);
    bdba:	strh.w	r4, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    bdbe:	bl	bbcc <eepromemu_flash_write>
		sector_index[sector] = index;
    bdc2:	strh.w	r5, [r8, r6, lsl #1]
}
    bdc6:	add	sp, #268	@ 0x10c
    bdc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint16_t val = *p++;
    bdcc:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    bdd0:	uxtb.w	ip, r1
    bdd4:	cmp	ip, r4
    bdd6:	it	eq
    bdd8:	lsreq	r2, r1, #8
    bdda:	b.n	bda2 <eeprom_write_byte+0x4e>
		memset(buf, 0xFF, sizeof(buf));
    bddc:	mov.w	r2, #256	@ 0x100
    bde0:	movs	r1, #255	@ 0xff
    bde2:	add	r0, sp, #8
    bde4:	movw	r5, #2049	@ 0x801
    bde8:	bl	a2ac <memset>
		while (p < end) {
    bdec:	cmn.w	r7, #4096	@ 0x1000
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bdf0:	mov	r3, r7
    bdf2:	it	cs
    bdf4:	movcs	r5, #1
		while (p < end) {
    bdf6:	subs	r5, #1
    bdf8:	bne.n	be36 <eeprom_write_byte+0xe2>
		buf[offset] = data;
    bdfa:	add	r3, sp, #8
		eepromemu_flash_erase_sector(p);
    bdfc:	mov	r0, r7
		buf[offset] = data;
    bdfe:	strb.w	r9, [r3, r4]
		eepromemu_flash_erase_sector(p);
    be02:	add	r4, sp, #8
		for (i=0; i < 256; i++) {
    be04:	mov	r9, r5
		eepromemu_flash_erase_sector(p);
    be06:	bl	bca0 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    be0a:	ldrb.w	r3, [r4], #1
    be0e:	cmp	r3, #255	@ 0xff
    be10:	beq.n	be2a <eeprom_write_byte+0xd6>
				uint16_t newval = i | (buf[i] << 8);
    be12:	orr.w	r3, r9, r3, lsl #8
				eepromemu_flash_write(p + index, &newval, 2);
    be16:	movs	r2, #2
    be18:	add.w	r0, r7, r5, lsl #1
				index = index + 1;
    be1c:	adds	r5, #1
				eepromemu_flash_write(p + index, &newval, 2);
    be1e:	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    be22:	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    be26:	bl	bbcc <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    be2a:	add.w	r9, r9, #1
    be2e:	cmp.w	r9, #256	@ 0x100
    be32:	bne.n	be0a <eeprom_write_byte+0xb6>
    be34:	b.n	bdc2 <eeprom_write_byte+0x6e>
			uint16_t val = *p++;
    be36:	ldrh.w	r2, [r3], #2
			buf[val & 255] = val >> 8;
    be3a:	add	r0, sp, #8
    be3c:	uxtb	r1, r2
    be3e:	lsrs	r2, r2, #8
    be40:	strb	r2, [r0, r1]
    be42:	b.n	bdf6 <eeprom_write_byte+0xa2>
    be44:	.word	0x20012aac
    be48:	.word	0x200128da

0000be4c <eeprom_write_block>:
{
    be4c:	push	{r4, r5, r6, lr}
    be4e:	mov	r4, r0
    be50:	mov	r0, r1
	while (len--) {
    be52:	adds	r5, r4, r2
    be54:	cmp	r4, r5
    be56:	bne.n	be5a <eeprom_write_block+0xe>
}
    be58:	pop	{r4, r5, r6, pc}
		eeprom_write_byte(p++, *src++);
    be5a:	adds	r6, r0, #1
    be5c:	ldrb.w	r1, [r4], #1
    be60:	bl	bd54 <eeprom_write_byte>
    be64:	mov	r0, r6
    be66:	b.n	be54 <eeprom_write_block+0x8>

0000be68 <smalloc_verify_pool>:
#include "smalloc_i.h"

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
    be68:	mov	r3, r0
	if (!spool->pool || !spool->pool_size) return 0;
    be6a:	ldr	r0, [r0, #0]
    be6c:	cbz	r0, be82 <smalloc_verify_pool+0x1a>
    be6e:	ldr	r0, [r3, #4]
    be70:	cbz	r0, be82 <smalloc_verify_pool+0x1a>
	if (spool->pool_size % HEADER_SZ) return 0;
    be72:	movs	r3, #12
    be74:	udiv	r2, r0, r3
    be78:	mls	r0, r3, r2, r0
    be7c:	clz	r0, r0
    be80:	lsrs	r0, r0, #5
	return 1;
}
    be82:	bx	lr

0000be84 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    be84:	push	{r4, lr}
    be86:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    be88:	bl	be68 <smalloc_verify_pool>
    be8c:	mov	r4, r0
    be8e:	cbz	r0, be96 <sm_align_pool+0x12>
    be90:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    be92:	mov	r0, r4
    be94:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    be96:	ldr	r3, [r1, #4]
    be98:	movs	r0, #12
    be9a:	udiv	r2, r3, r0
    be9e:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    bea2:	cbz	r2, bea8 <sm_align_pool+0x24>
    bea4:	subs	r3, r3, r2
    bea6:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    bea8:	ldr	r3, [r1, #4]
    beaa:	cmp	r3, #240	@ 0xf0
    beac:	bhi.n	be90 <sm_align_pool+0xc>
		errno = ENOSPC;
    beae:	bl	ed74 <__errno>
    beb2:	movs	r3, #28
    beb4:	str	r3, [r0, #0]
		return 0;
    beb6:	b.n	be92 <sm_align_pool+0xe>

0000beb8 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    beb8:	push	{r3, r4, r5, lr}
    beba:	mov	r5, r3
	if (!spool) {
    bebc:	mov	r4, r0
    bebe:	cbnz	r0, becc <sm_set_pool+0x14>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    bec0:	bl	ed74 <__errno>
    bec4:	movs	r3, #22
    bec6:	str	r3, [r0, #0]
		return 0;
    bec8:	movs	r0, #0
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    beca:	pop	{r3, r4, r5, pc}
	if (!new_pool || !new_pool_size) {
    becc:	cbz	r1, bed0 <sm_set_pool+0x18>
    bece:	cbnz	r2, bef6 <sm_set_pool+0x3e>
		if (smalloc_verify_pool(spool)) {
    bed0:	mov	r0, r4
    bed2:	bl	be68 <smalloc_verify_pool>
    bed6:	cmp	r0, #0
    bed8:	beq.n	bec0 <sm_set_pool+0x8>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    beda:	ldr	r3, [r4, #8]
    bedc:	cbz	r3, bee8 <sm_set_pool+0x30>
    bede:	ldr	r2, [r4, #4]
    bee0:	movs	r1, #0
    bee2:	ldr	r0, [r4, #0]
    bee4:	bl	a2ac <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    bee8:	movs	r2, #16
    beea:	movs	r1, #0
    beec:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    beee:	bl	a2ac <memset>
			return 1;
    bef2:	movs	r0, #1
    bef4:	b.n	beca <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    bef6:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    bef8:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    befc:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    befe:	bl	be84 <sm_align_pool>
    bf02:	cmp	r0, #0
    bf04:	beq.n	bec8 <sm_set_pool+0x10>
	if (do_zero) {
    bf06:	cmp	r5, #0
    bf08:	beq.n	bef2 <sm_set_pool+0x3a>
		memset(spool->pool, 0, spool->pool_size);
    bf0a:	ldr	r2, [r4, #4]
    bf0c:	movs	r1, #0
    bf0e:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    bf10:	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    bf12:	b.n	beee <sm_set_pool+0x36>

0000bf14 <Panic_Temp_isr>:
  unused_interrupt_vector();
    bf14:	b.w	b874 <unused_interrupt_vector>

0000bf18 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    bf18:	ldr	r3, [pc, #72]	@ (bf64 <tempmonGetTemp+0x4c>)
    bf1a:	ldr.w	r2, [r3, #128]	@ 0x80
    bf1e:	lsls	r2, r2, #29
    bf20:	bpl.n	bf1a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bf22:	ldr.w	r3, [r3, #128]	@ 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bf26:	ldr	r2, [pc, #64]	@ (bf68 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bf28:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bf2c:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bf30:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bf34:	ldr	r3, [pc, #52]	@ (bf6c <tempmonGetTemp+0x54>)
    bf36:	vcvt.f32.u32	s0, s0
    bf3a:	vldr	s14, [r3]
    bf3e:	vcvt.f32.s32	s15, s15
    bf42:	ldr	r3, [pc, #44]	@ (bf70 <tempmonGetTemp+0x58>)
    bf44:	vcvt.f32.u32	s14, s14
    bf48:	vsub.f32	s15, s15, s14
    bf4c:	vldr	s14, [r3]
    bf50:	ldr	r3, [pc, #32]	@ (bf74 <tempmonGetTemp+0x5c>)
    bf52:	vmul.f32	s15, s15, s14
    bf56:	vldr	s13, [r3]
    bf5a:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    bf5e:	vsub.f32	s0, s0, s14
    bf62:	bx	lr
    bf64:	.word	0x400d8100
    bf68:	.word	0x200121c4
    bf6c:	.word	0x200121c0
    bf70:	.word	0x200121c8
    bf74:	.word	0x200121cc

0000bf78 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    bf78:	cmp	r0, #54	@ 0x36
{
    bf7a:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    bf7c:	bhi.n	bf96 <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    bf7e:	lsls	r2, r0, #4
    bf80:	ldr	r3, [pc, #40]	@ (bfac <digitalWrite+0x34>)
    bf82:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    bf86:	ldr	r3, [r3, r2]
	mask = p->mask;
    bf88:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    bf8a:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    bf8c:	tst	r4, r2
    bf8e:	beq.n	bf9e <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    bf90:	cbz	r1, bf98 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    bf92:	str.w	r2, [r3, #132]	@ 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    bf96:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    bf98:	str.w	r2, [r3, #136]	@ 0x88
    bf9c:	b.n	bf96 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bf9e:	ldr	r3, [r0, #8]
		if (val) {
    bfa0:	cbz	r1, bfa8 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bfa2:	ldr	r2, [pc, #12]	@ (bfb0 <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bfa4:	str	r2, [r3, #0]
    bfa6:	b.n	bf96 <digitalWrite+0x1e>
    bfa8:	ldr	r2, [pc, #8]	@ (bfb4 <digitalWrite+0x3c>)
    bfaa:	b.n	bfa4 <digitalWrite+0x2c>
    bfac:	.word	0x20000764
    bfb0:	.word	0x0001f038
    bfb4:	.word	0x00013038

0000bfb8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    bfb8:	cmp	r0, #54	@ 0x36
{
    bfba:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    bfbc:	bhi.n	bfee <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    bfbe:	ldr	r3, [pc, #76]	@ (c00c <pinMode+0x54>)
    bfc0:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bfc2:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bfc4:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    bfc6:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bfca:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bfcc:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bfd0:	beq.n	bfd6 <pinMode+0x1e>
    bfd2:	cmp	r1, #4
    bfd4:	bne.n	bff0 <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bfd6:	orrs	r4, r5
		if (mode == OUTPUT) {
    bfd8:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bfda:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    bfdc:	bne.n	bfe2 <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bfde:	movs	r2, #56	@ 0x38
    bfe0:	b.n	bfe6 <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    bfe2:	movw	r2, #2104	@ 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bfe6:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    bfe8:	movs	r2, #21
    bfea:	ldr	r3, [r0, #4]
    bfec:	str	r2, [r3, #0]
}
    bfee:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bff0:	bic.w	r4, r4, r5
    bff4:	str	r4, [r2, #4]
		if (mode == INPUT) {
    bff6:	cmp	r1, #0
    bff8:	beq.n	bfde <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    bffa:	cmp	r1, #2
    bffc:	bne.n	c002 <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bffe:	ldr	r2, [pc, #16]	@ (c010 <pinMode+0x58>)
    c000:	b.n	bfe6 <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    c002:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    c004:	ite	eq
    c006:	ldreq	r2, [pc, #12]	@ (c014 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    c008:	ldrne	r2, [pc, #12]	@ (c018 <pinMode+0x60>)
    c00a:	b.n	bfe6 <pinMode+0x2e>
    c00c:	.word	0x20000764
    c010:	.word	0x0001f038
    c014:	.word	0x00013038
    c018:	.word	0x00010038

0000c01c <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c01c:	mov.w	r3, #61440	@ 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    c020:	movs	r2, #0
{
    c022:	push	{r4, r5, r6, r7, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c024:	strh.w	r3, [r0, #396]	@ 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    c028:	movs	r3, #15
    c02a:	movs	r7, #96	@ 0x60
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c02c:	mov.w	r6, #57344	@ 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    c030:	strh.w	r3, [r0, #398]	@ 0x18e
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c034:	mov.w	r5, #1024	@ 0x400
	p->FFILT0 = 0;
    c038:	strh.w	r2, [r0, #400]	@ 0x190
		p->SM[i].OCTRL = 0;
    c03c:	mov	r1, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c03e:	ldrh.w	r3, [r0, #392]	@ 0x188
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c042:	movw	r4, #33464	@ 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c046:	uxth	r3, r3
    c048:	orr.w	r3, r3, #240	@ 0xf0
    c04c:	strh.w	r3, [r0, #392]	@ 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c050:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    c054:	adds	r2, #1
    c056:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c058:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c05a:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    c05c:	strh	r1, [r3, #34]	@ 0x22
		p->SM[i].DTCNT0 = 0;
    c05e:	strh	r1, [r3, #48]	@ 0x30
		p->SM[i].INIT = 0;
    c060:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    c062:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c064:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    c066:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    c068:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    c06a:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    c06c:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    c06e:	bne.n	c050 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c070:	ldrh.w	r3, [r0, #392]	@ 0x188
    c074:	uxth	r3, r3
    c076:	orr.w	r3, r3, #15
    c07a:	strh.w	r3, [r0, #392]	@ 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c07e:	ldrh.w	r3, [r0, #392]	@ 0x188
    c082:	uxth	r3, r3
    c084:	orr.w	r3, r3, #3840	@ 0xf00
    c088:	strh.w	r3, [r0, #392]	@ 0x188
}
    c08c:	pop	{r4, r5, r6, r7, pc}

0000c08e <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c08e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c090:	mov.w	ip, #15
{
    c094:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    c096:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c098:	movw	r7, #4097	@ 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c09c:	movw	r6, #24000	@ 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c0a0:	movw	r4, #12326	@ 0x3026
		p->CH[i].CTRL = 0; // stop timer
    c0a4:	add.w	r3, r0, r2, lsl #5
    c0a8:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    c0aa:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c0ac:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    c0ae:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    c0b0:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c0b2:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c0b6:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c0b8:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c0ba:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    c0bc:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c0be:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    c0c0:	bne.n	c0a4 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    c0c2:	pop	{r4, r5, r6, r7, pc}

0000c0c4 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c0c4:	ldr	r2, [pc, #84]	@ (c11c <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    c0c6:	ldr	r0, [pc, #88]	@ (c120 <pwm_init+0x5c>)
{
    c0c8:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c0ca:	ldr	r3, [r2, #120]	@ 0x78
    c0cc:	orr.w	r3, r3, #16711680	@ 0xff0000
    c0d0:	str	r3, [r2, #120]	@ 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c0d2:	ldr.w	r3, [r2, #128]	@ 0x80
    c0d6:	orr.w	r3, r3, #4227858432	@ 0xfc000000
    c0da:	orr.w	r3, r3, #196608	@ 0x30000
    c0de:	str.w	r3, [r2, #128]	@ 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    c0e2:	bl	c01c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    c0e6:	add.w	r0, r0, #16384	@ 0x4000
    c0ea:	bl	c01c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    c0ee:	add.w	r0, r0, #16384	@ 0x4000
    c0f2:	bl	c01c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    c0f6:	add.w	r0, r0, #16384	@ 0x4000
    c0fa:	bl	c01c <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    c0fe:	sub.w	r0, r0, #2146304	@ 0x20c000
    c102:	bl	c08e <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    c106:	add.w	r0, r0, #16384	@ 0x4000
    c10a:	bl	c08e <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    c10e:	add.w	r0, r0, #16384	@ 0x4000
}
    c112:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    c116:	b.w	c08e <quadtimer_init>
    c11a:	nop
    c11c:	.word	0x400fc000
    c120:	.word	0x403dc000

0000c124 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    c124:	ldr	r2, [pc, #8]	@ (c130 <txEvent_event+0xc>)
    c126:	ldr	r3, [r2, #0]
    c128:	adds	r3, #1
    c12a:	str	r3, [r2, #0]
    c12c:	bx	lr
    c12e:	nop
    c130:	.word	0x20012120

0000c134 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    c134:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    c136:	ldr	r4, [pc, #40]	@ (c160 <rx_event+0x2c>)
	int i = t->callback_param;
    c138:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    c13a:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    c13c:	ldr	r2, [pc, #36]	@ (c164 <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    c13e:	adds	r3, #1
    c140:	cmp	r3, #5
    c142:	it	cs
    c144:	movcs	r3, #0
	rx_list[head] = i;
    c146:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    c148:	ldr	r1, [r0, #4]
    c14a:	ldr	r2, [pc, #28]	@ (c168 <rx_event+0x34>)
    c14c:	ubfx	r1, r1, #16, #15
    c150:	ldrh	r2, [r2, #0]
    c152:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    c154:	ldr	r1, [pc, #20]	@ (c16c <rx_event+0x38>)
    c156:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    c15a:	uxtb	r3, r3
    c15c:	strb	r3, [r4, #0]
}
    c15e:	pop	{r4, pc}
    c160:	.word	0x20012ab6
    c164:	.word	0x20012ac0
    c168:	.word	0x200128d8
    c16c:	.word	0x200121ac

0000c170 <rx_queue_transfer>:
{
    c170:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c172:	ldr	r1, [pc, #80]	@ (c1c4 <rx_queue_transfer+0x54>)
{
    c174:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    c176:	ldr	r7, [pc, #80]	@ (c1c8 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c178:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    c17c:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c17e:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    c180:	add	r0, r1
	asm("dsb");
    c182:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    c186:	mov.w	r4, #3758153728	@ 0xe000e000
    c18a:	str.w	r2, [r4, #3932]	@ 0xf5c
		location += 32;
    c18e:	adds	r2, #32
	} while (location < end_addr);
    c190:	cmp	r0, r2
    c192:	bhi.n	c18a <rx_queue_transfer+0x1a>
	asm("dsb");
    c194:	dsb	sy
	asm("isb");
    c198:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c19c:	ldr	r5, [pc, #44]	@ (c1cc <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c19e:	mov.w	r6, #131072	@ 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c1a2:	ldrh	r2, [r7, #0]
    c1a4:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c1a8:	str.w	r6, [r4, #396]	@ 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c1ac:	mov	r0, r5
    c1ae:	bl	b4c0 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c1b2:	mov	r1, r5
    c1b4:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c1b6:	str.w	r6, [r4, #396]	@ 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c1ba:	bl	b50c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    c1be:	str.w	r6, [r4, #268]	@ 0x10c
}
    c1c2:	pop	{r3, r4, r5, r6, r7, pc}
    c1c4:	.word	0x20201000
    c1c8:	.word	0x200128d8
    c1cc:	.word	0x20006040

0000c1d0 <usb_mtp_configure>:
	if (usb_high_speed) {
    c1d0:	ldr	r3, [pc, #120]	@ (c24c <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c1d2:	movs	r2, #128	@ 0x80
    c1d4:	movs	r1, #0
    c1d6:	ldr	r0, [pc, #120]	@ (c250 <usb_mtp_configure+0x80>)
{
    c1d8:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    c1da:	ldrb	r3, [r3, #0]
	tx_head = 0;
    c1dc:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    c1de:	ldr	r6, [pc, #116]	@ (c254 <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    c1e0:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    c1e2:	ldr	r3, [pc, #116]	@ (c258 <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    c1e4:	ite	ne
    c1e6:	movne.w	r5, #512	@ 0x200
    c1ea:	moveq	r5, #64	@ 0x40
		tx_packet_size = MTP_TX_SIZE_480;
    c1ec:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    c1ee:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c1f0:	bl	a2ac <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c1f4:	movs	r2, #128	@ 0x80
    c1f6:	movs	r1, #0
    c1f8:	ldr	r0, [pc, #96]	@ (c25c <usb_mtp_configure+0x8c>)
    c1fa:	bl	a2ac <memset>
	tx_head = 0;
    c1fe:	ldr	r3, [pc, #96]	@ (c260 <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c200:	mov	r2, r4
    c202:	mov	r1, r5
	tx_head = 0;
    c204:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c206:	movs	r0, #4
	rx_head = 0;
    c208:	ldr	r3, [pc, #88]	@ (c264 <usb_mtp_configure+0x94>)
    c20a:	strb	r4, [r3, #0]
	rx_tail = 0;
    c20c:	ldr	r3, [pc, #88]	@ (c268 <usb_mtp_configure+0x98>)
    c20e:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c210:	mov	r3, r4
    c212:	bl	b480 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    c216:	mov	r2, r4
    c218:	ldrh	r1, [r6, #0]
    c21a:	movs	r0, #4
    c21c:	ldr	r3, [pc, #76]	@ (c26c <usb_mtp_configure+0x9c>)
    c21e:	bl	b444 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    c222:	mov	r2, r4
    c224:	ldr	r3, [pc, #72]	@ (c270 <usb_mtp_configure+0xa0>)
    c226:	movs	r1, #32
    c228:	movs	r0, #5
    c22a:	bl	b480 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c22e:	mov	r0, r4
    c230:	bl	c170 <rx_queue_transfer>
    c234:	movs	r0, #1
    c236:	bl	c170 <rx_queue_transfer>
    c23a:	movs	r0, #2
    c23c:	bl	c170 <rx_queue_transfer>
    c240:	movs	r0, #3
}
    c242:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c246:	b.w	c170 <rx_queue_transfer>
    c24a:	nop
    c24c:	.word	0x20012ace
    c250:	.word	0x20006140
    c254:	.word	0x200128d8
    c258:	.word	0x2001295e
    c25c:	.word	0x20006040
    c260:	.word	0x20012aca
    c264:	.word	0x20012ab6
    c268:	.word	0x20012ac6
    c26c:	.word	0x0000c135
    c270:	.word	0x0000c125

0000c274 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    c274:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    c278:	ldr.w	r8, [pc, #128]	@ c2fc <usb_mtp_recv+0x88>
{
    c27c:	mov	r5, r0
	uint32_t tail = rx_tail;
    c27e:	ldr	r7, [pc, #108]	@ (c2ec <usb_mtp_recv+0x78>)
{
    c280:	mov	r6, r1
	uint32_t wait_begin_at = systick_millis_count;
    c282:	ldr.w	r9, [r8]
	uint32_t tail = rx_tail;
    c286:	ldrb	r3, [r7, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c288:	ldr.w	sl, [pc, #116]	@ c300 <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    c28c:	uxtb	r4, r3
		if (tail != rx_head) break;
    c28e:	ldr.w	fp, [pc, #116]	@ c304 <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c292:	ldrb.w	r3, [sl]
    c296:	cbz	r3, c2e2 <usb_mtp_recv+0x6e>
		if (tail != rx_head) break;
    c298:	ldrb.w	r3, [fp]
    c29c:	cmp	r4, r3
    c29e:	bne.n	c2b2 <usb_mtp_recv+0x3e>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    c2a0:	ldr.w	r3, [r8]
    c2a4:	sub.w	r3, r3, r9
    c2a8:	cmp	r3, r6
    c2aa:	bcs.n	c2e8 <usb_mtp_recv+0x74>
			return 0;
		}
		yield();
    c2ac:	bl	c4a4 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c2b0:	b.n	c292 <usb_mtp_recv+0x1e>
	}
	if (++tail > RX_NUM) tail = 0;
    c2b2:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    c2b4:	ldr	r2, [pc, #56]	@ (c2f0 <usb_mtp_recv+0x7c>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    c2b6:	ldr	r1, [pc, #60]	@ (c2f4 <usb_mtp_recv+0x80>)
    c2b8:	mov	r0, r5
	if (++tail > RX_NUM) tail = 0;
    c2ba:	cmp	r3, #5
    c2bc:	it	cs
    c2be:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    c2c0:	ldrb	r6, [r2, r3]
	int len = rx_list_transfer_len[tail];
    c2c2:	ldr	r2, [pc, #52]	@ (c2f8 <usb_mtp_recv+0x84>)
	memcpy(buffer,  rx_item_buffer, len);
    c2c4:	add.w	r1, r1, r6, lsl #9
	int len = rx_list_transfer_len[tail];
    c2c8:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    c2cc:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    c2ce:	mov	r2, r4
	rx_tail = tail;
    c2d0:	strb	r3, [r7, #0]
	memcpy(buffer,  rx_item_buffer, len);
    c2d2:	bl	a2f0 <memcpy>
	rx_queue_transfer(i);
    c2d6:	mov	r0, r6
    c2d8:	bl	c170 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    c2dc:	mov	r0, r4
    c2de:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c2e2:	mov.w	r4, #4294967295
    c2e6:	b.n	c2dc <usb_mtp_recv+0x68>
			return 0;
    c2e8:	movs	r4, #0
    c2ea:	b.n	c2dc <usb_mtp_recv+0x68>
    c2ec:	.word	0x20012ac6
    c2f0:	.word	0x20012ac0
    c2f4:	.word	0x20201000
    c2f8:	.word	0x200121ac
    c2fc:	.word	0x20012864
    c300:	.word	0x20012acd
    c304:	.word	0x20012ab6

0000c308 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    c308:	ldr	r3, [pc, #28]	@ (c328 <usb_mtp_available+0x20>)
    c30a:	ldrb	r3, [r3, #0]
    c30c:	and.w	r0, r3, #255	@ 0xff
    c310:	cbz	r3, c326 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    c312:	ldr	r3, [pc, #24]	@ (c32c <usb_mtp_available+0x24>)
    c314:	ldrb	r2, [r3, #0]
    c316:	ldr	r3, [pc, #24]	@ (c330 <usb_mtp_available+0x28>)
    c318:	ldrb	r3, [r3, #0]
    c31a:	cmp	r2, r3
    c31c:	beq.n	c324 <usb_mtp_available+0x1c>
    c31e:	ldr	r3, [pc, #20]	@ (c334 <usb_mtp_available+0x2c>)
    c320:	ldrh	r0, [r3, #0]
    c322:	bx	lr
	if (!usb_configuration) return 0;
    c324:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    c326:	bx	lr
    c328:	.word	0x20012acd
    c32c:	.word	0x20012ab6
    c330:	.word	0x20012ac6
    c334:	.word	0x200128d8

0000c338 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    c338:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    c33c:	ldr	r7, [pc, #164]	@ (c3e4 <usb_mtp_send+0xac>)
{
    c33e:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    c340:	ldr	r6, [pc, #164]	@ (c3e8 <usb_mtp_send+0xb0>)
{
    c342:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    c344:	ldrb	r3, [r7, #0]
{
    c346:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    c348:	ldr.w	r9, [pc, #168]	@ c3f4 <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    c34c:	add.w	r6, r6, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c350:	ldr.w	fp, [pc, #164]	@ c3f8 <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    c354:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    c358:	ldrb.w	r3, [fp]
    c35c:	cmp	r3, #0
    c35e:	beq.n	c3d8 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    c360:	mov	r0, r6
    c362:	bl	b528 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    c366:	lsls	r3, r0, #24
    c368:	bpl.n	c37c <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c36a:	ldr.w	r3, [r9]
    c36e:	sub.w	r3, r3, sl
    c372:	cmp	r3, r5
    c374:	bhi.n	c3de <usb_mtp_send+0xa6>
		yield();
    c376:	bl	c4a4 <yield>
	while (1) {
    c37a:	b.n	c358 <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c37c:	ldrb	r3, [r7, #0]
	memcpy(txdata, buffer, len);
    c37e:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c380:	ldr	r5, [pc, #104]	@ (c3ec <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    c382:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c384:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    c388:	mov	r0, r5
    c38a:	bl	a2f0 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    c38e:	ldr	r2, [pc, #96]	@ (c3f0 <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c390:	mov	r3, r5
    c392:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c394:	add	r2, r5
	asm("dsb");
    c396:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c39a:	mov.w	r1, #3758153728	@ 0xe000e000
    c39e:	str.w	r3, [r1, #3952]	@ 0xf70
		location += 32;
    c3a2:	adds	r3, #32
	} while (location < end_addr);
    c3a4:	cmp	r2, r3
    c3a6:	bhi.n	c39e <usb_mtp_send+0x66>
	asm("dsb");
    c3a8:	dsb	sy
	asm("isb");
    c3ac:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    c3b0:	movs	r3, #0
    c3b2:	mov	r2, r4
    c3b4:	mov	r1, r5
    c3b6:	mov	r0, r6
    c3b8:	bl	b4c0 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    c3bc:	movs	r0, #4
    c3be:	mov	r1, r6
    c3c0:	bl	b4ec <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c3c4:	ldrb	r3, [r7, #0]
	return len;
    c3c6:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    c3c8:	adds	r3, #1
    c3ca:	uxtb	r3, r3
    c3cc:	cmp	r3, #4
    c3ce:	it	cs
    c3d0:	movcs	r3, #0
    c3d2:	strb	r3, [r7, #0]
}
    c3d4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c3d8:	mov.w	r0, #4294967295
    c3dc:	b.n	c3d4 <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c3de:	movs	r0, #0
    c3e0:	b.n	c3d4 <usb_mtp_send+0x9c>
    c3e2:	nop
    c3e4:	.word	0x20012aca
    c3e8:	.word	0x20006140
    c3ec:	.word	0x20201800
    c3f0:	.word	0x2001295e
    c3f4:	.word	0x20012864
    c3f8:	.word	0x20012acd

0000c3fc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c3fc:	ldr	r3, [pc, #68]	@ (c444 <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    c3fe:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c400:	ldr.w	r0, [r3, #544]	@ 0x220
	if (num < 10000000) num = num * 10;
    c404:	ldr	r3, [pc, #64]	@ (c448 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c406:	bic.w	r0, r0, #4278190080	@ 0xff000000
	if (num < 10000000) num = num * 10;
    c40a:	cmp	r0, r3
{
    c40c:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    c40e:	it	cc
    c410:	movcc	r3, #10
{
    c412:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    c414:	it	cc
    c416:	mulcc	r0, r3
	ultoa(num, buf, 10);
    c418:	add	r1, sp, #4
    c41a:	bl	b550 <ultoa>
	for (i=0; i<10; i++) {
    c41e:	ldr	r0, [pc, #44]	@ (c44c <usb_init_serialnumber+0x50>)
    c420:	add	r2, sp, #4
    c422:	movs	r1, #0
    c424:	mov	r5, r0
		char c = buf[i];
    c426:	ldrb.w	r4, [r2], #1
		if (!c) break;
    c42a:	mov	r3, r1
	for (i=0; i<10; i++) {
    c42c:	adds	r1, #1
		if (!c) break;
    c42e:	cbz	r4, c43a <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    c430:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    c432:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    c436:	bne.n	c426 <usb_init_serialnumber+0x2a>
    c438:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c43a:	adds	r3, #1
    c43c:	lsls	r3, r3, #1
    c43e:	strb	r3, [r5, #0]
}
    c440:	add	sp, #20
    c442:	pop	{r4, r5, pc}
    c444:	.word	0x401f4400
    c448:	.word	0x00989680
    c44c:	.word	0x20002420

0000c450 <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c450:	ldr	r1, [pc, #68]	@ (c498 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    c452:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    c454:	ldr	r3, [r1, #0]
    c456:	cbz	r3, c46c <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c458:	mrs	r3, IPSR
		if (ipsr != 0) return;
    c45c:	cbnz	r3, c46c <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c45e:	mrs	r2, PRIMASK
		__disable_irq();
    c462:	cpsid	i
		EventResponder *first = firstYield;
    c464:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    c466:	cbnz	r0, c46e <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c468:	cbnz	r2, c46c <EventResponder::runFromYield()+0x1c>
    c46a:	cpsie	i
	}
    c46c:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    c46e:	ldr	r4, [pc, #44]	@ (c49c <EventResponder::runFromYield()+0x4c>)
    c470:	ldrb	r5, [r4, #0]
    c472:	cmp	r5, #0
    c474:	bne.n	c468 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    c476:	movs	r3, #1
    c478:	strb	r3, [r4, #0]
		firstYield = first->_next;
    c47a:	ldr	r3, [r0, #20]
    c47c:	str	r3, [r1, #0]
		if (firstYield) {
    c47e:	cbz	r3, c492 <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    c480:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c482:	cbnz	r2, c486 <EventResponder::runFromYield()+0x36>
    c484:	cpsie	i
		first->_triggered = false;
    c486:	movs	r5, #0
		(*(first->_function))(*first);
    c488:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c48a:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c48c:	blx	r3
		runningFromYield = false;
    c48e:	strb	r5, [r4, #0]
    c490:	b.n	c46c <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    c492:	ldr	r1, [pc, #12]	@ (c4a0 <EventResponder::runFromYield()+0x50>)
    c494:	str	r3, [r1, #0]
    c496:	b.n	c482 <EventResponder::runFromYield()+0x32>
    c498:	.word	0x20011cf4
    c49c:	.word	0x20012a25
    c4a0:	.word	0x20011d00

0000c4a4 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    c4a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    c4a8:	ldr	r3, [pc, #92]	@ (c508 <yield+0x64>)
    c4aa:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    c4ac:	cbz	r4, c4d6 <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    c4ae:	ldr	r5, [pc, #92]	@ (c50c <yield+0x68>)
    c4b0:	ldrb	r3, [r5, #0]
    c4b2:	cbnz	r3, c4d6 <yield+0x32>
	running = 1;
    c4b4:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c4b6:	lsls	r1, r4, #31
	running = 1;
    c4b8:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c4ba:	bpl.n	c4c6 <yield+0x22>
    c4bc:	bl	a7e0 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c4c0:	cbz	r0, c4c6 <yield+0x22>
    c4c2:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c4c6:	lsls	r2, r4, #30
    c4c8:	bmi.n	c4fc <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    c4ca:	movs	r3, #0
    c4cc:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    c4ce:	lsls	r3, r4, #29
    c4d0:	bpl.n	c4d6 <yield+0x32>
		EventResponder::runFromYield();
    c4d2:	bl	c450 <EventResponder::runFromYield()>
	}
};
    c4d6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    c4da:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c4de:	ldr	r3, [r7, #0]
    c4e0:	mov	r0, r7
    c4e2:	ldr	r3, [r3, #16]
    c4e4:	blx	r3
    c4e6:	cbz	r0, c4ee <yield+0x4a>
    c4e8:	ldr	r3, [r7, #20]
    c4ea:	ldr	r3, [r3, #8]
    c4ec:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c4ee:	adds	r6, #1
    c4f0:	ldrb.w	r2, [r8]
    c4f4:	uxtb	r3, r6
    c4f6:	cmp	r2, r3
    c4f8:	bhi.n	c4da <yield+0x36>
    c4fa:	b.n	c4ca <yield+0x26>
    c4fc:	movs	r6, #0
    c4fe:	ldr.w	r8, [pc, #16]	@ c510 <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    c502:	ldr.w	r9, [pc, #16]	@ c514 <yield+0x70>
    c506:	b.n	c4f0 <yield+0x4c>
    c508:	.word	0x20012ad0
    c50c:	.word	0x20012a27
    c510:	.word	0x20012a26
    c514:	.word	0x20011d04

0000c518 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    c518:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c51a:	ldr	r5, [pc, #44]	@ (c548 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    c51c:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    c51e:	ldr	r6, [pc, #44]	@ (c54c <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c520:	mrs	r2, PRIMASK
		__disable_irq();
    c524:	cpsid	i
		EventResponder *first = firstInterrupt;
    c526:	ldr	r0, [r5, #0]
		if (first) {
    c528:	cbz	r0, c542 <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    c52a:	ldr	r3, [r0, #20]
    c52c:	str	r3, [r5, #0]
			if (firstInterrupt) {
    c52e:	cbz	r3, c53e <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    c530:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    c532:	cbnz	r2, c536 <EventResponder::runFromInterrupt()+0x1e>
    c534:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    c536:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c538:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    c53a:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    c53c:	b.n	c520 <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    c53e:	str	r3, [r6, #0]
    c540:	b.n	c532 <EventResponder::runFromInterrupt()+0x1a>
    c542:	cbnz	r2, c546 <EventResponder::runFromInterrupt()+0x2e>
    c544:	cpsie	i
}
    c546:	pop	{r4, r5, r6, pc}
    c548:	.word	0x20011cfc
    c54c:	.word	0x20011cf8

0000c550 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c550:	b.w	c518 <EventResponder::runFromInterrupt()>

0000c554 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c554:	ldr	r3, [pc, #16]	@ (c568 <systick_isr+0x14>)
    c556:	ldr	r2, [r3, #4]
    c558:	ldr	r3, [pc, #16]	@ (c56c <systick_isr+0x18>)
    c55a:	str	r2, [r3, #0]
	systick_millis_count++;
    c55c:	ldr	r2, [pc, #16]	@ (c570 <systick_isr+0x1c>)
    c55e:	ldr	r3, [r2, #0]
    c560:	adds	r3, #1
    c562:	str	r3, [r2, #0]
}
    c564:	bx	lr
    c566:	nop
    c568:	.word	0xe0001000
    c56c:	.word	0x20012860
    c570:	.word	0x20012864

0000c574 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c574:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    c576:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c578:	ldr	r4, [pc, #136]	@ (c604 <DMAChannel::begin(bool)+0x90>)
    c57a:	cbnz	r1, c5a0 <DMAChannel::begin(bool)+0x2c>
    c57c:	ldr	r1, [r0, #0]
    c57e:	cbz	r1, c5a0 <DMAChannel::begin(bool)+0x2c>
    c580:	ldrb	r3, [r0, #4]
    c582:	cmp	r3, #15
    c584:	bhi.n	c5a0 <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    c586:	ldrh	r2, [r4, #0]
    c588:	asrs	r2, r3
    c58a:	lsls	r2, r2, #31
    c58c:	bpl.n	c5a0 <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c58e:	add.w	r3, r3, #33554432	@ 0x2000000
    c592:	add.w	r3, r3, #29824	@ 0x7480
    c596:	cmp.w	r1, r3, lsl #5
    c59a:	bne.n	c5a0 <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    c59c:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c59e:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c5a0:	ldrh	r1, [r4, #0]
    c5a2:	movs	r3, #0
    c5a4:	asr.w	r2, r1, r3
    c5a8:	ands.w	r2, r2, #1
    c5ac:	bne.n	c5f4 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    c5ae:	movs	r5, #1
    c5b0:	lsls	r5, r3
    c5b2:	orrs	r1, r5
    c5b4:	strh	r1, [r4, #0]
			__enable_irq();
    c5b6:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c5b8:	ldr	r5, [pc, #76]	@ (c608 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    c5ba:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c5bc:	add.w	r3, r3, #33554432	@ 0x2000000
	channel = ch;
    c5c0:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c5c2:	ldr	r1, [r5, #124]	@ 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c5c4:	add.w	r3, r3, #29824	@ 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c5c8:	orr.w	r1, r1, #192	@ 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c5cc:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c5ce:	str	r1, [r5, #124]	@ 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c5d0:	movw	r5, #1154	@ 0x482
    c5d4:	ldr	r1, [pc, #52]	@ (c60c <DMAChannel::begin(bool)+0x98>)
    c5d6:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    c5d8:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    c5da:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    c5dc:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    c5de:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c5e0:	str	r3, [r0, #0]
	*p++ = 0;
    c5e2:	strd	r2, r2, [r3]
	*p++ = 0;
    c5e6:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c5ea:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c5ee:	strd	r2, r2, [r3, #24]
    c5f2:	b.n	c59e <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    c5f4:	adds	r3, #1
    c5f6:	cmp	r3, #16
    c5f8:	bne.n	c5a4 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    c5fa:	cpsie	i
			TCD = (TCD_t *)0;
    c5fc:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c5fe:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c600:	str	r2, [r0, #0]
			return; // no more channels available
    c602:	b.n	c59e <DMAChannel::begin(bool)+0x2a>
    c604:	.word	0x200128ae
    c608:	.word	0x400fc000
    c60c:	.word	0x400e8000

0000c610 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c610:	ldrb	r3, [r0, #4]
    c612:	cmp	r3, #15
    c614:	bhi.n	c636 <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    c616:	ldr	r2, [pc, #32]	@ (c638 <DMAChannel::release()+0x28>)
    c618:	strb	r3, [r2, #26]
	__disable_irq();
    c61a:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c61c:	ldr	r1, [pc, #28]	@ (c63c <DMAChannel::release()+0x2c>)
    c61e:	movs	r2, #1
    c620:	ldrb	r3, [r0, #4]
    c622:	lsls	r2, r3
    c624:	ldrh	r3, [r1, #0]
    c626:	bic.w	r3, r3, r2
    c62a:	strh	r3, [r1, #0]
	__enable_irq();
    c62c:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c62e:	movs	r3, #16
    c630:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    c632:	movs	r3, #0
    c634:	str	r3, [r0, #0]
}
    c636:	bx	lr
    c638:	.word	0x400e8000
    c63c:	.word	0x200128ae

0000c640 <Print::println(unsigned long, int) [clone .isra.0]>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    c640:	push	{r4, lr}
    c642:	mov	r4, r0
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    c644:	movs	r3, #0
    c646:	uxtb	r2, r2
    c648:	bl	c83e <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    c64c:	mov	r0, r4
    c64e:	ldmia.w	sp!, {r4, lr}
    c652:	b.w	c7ec <Print::println()>

0000c656 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    c656:	push	{r4, r5, r6, lr}
    c658:	mov	r5, r0
    c65a:	mov	r4, r1
    c65c:	cbz	r1, c674 <Print::write(char const*) [clone .isra.0]+0x1e>
							  return write((const uint8_t *)str, strlen(str)); }
    c65e:	mov	r0, r1
    c660:	bl	ee80 <strlen>
    c664:	ldr	r3, [r5, #0]
    c666:	mov	r2, r0
    c668:	mov	r1, r4
    c66a:	mov	r0, r5
    c66c:	ldr	r3, [r3, #4]
    c66e:	ldmia.w	sp!, {r4, r5, r6, lr}
    c672:	bx	r3
    c674:	pop	{r4, r5, r6, pc}

0000c676 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    c676:	b.w	c656 <Print::write(char const*) [clone .isra.0]>

0000c67a <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    c67a:	push	{r4, lr}
    c67c:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    c67e:	bl	c656 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    c682:	mov	r0, r4
    c684:	ldmia.w	sp!, {r4, lr}
    c688:	b.w	c7ec <Print::println()>

0000c68c <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    c68c:	movs	r2, #0
    c68e:	movs	r3, #1
    c690:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    c692:	push	{r4, lr}
		while (len > 0) {
    c694:	cmp	r1, #0
    c696:	sub.w	r4, r0, r1
    c69a:	bgt.n	c6a4 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    c69c:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    c69e:	orr.w	r0, r3, r2, lsl #16
    c6a2:	pop	{r4, pc}
			a += *p++;
    c6a4:	ldrh	r4, [r4, #0]
			len -= 2;
    c6a6:	subs	r1, #2
			a += *p++;
    c6a8:	uxtah	r3, r3, r4
			b += a;
    c6ac:	add	r2, r3
			len -= 2;
    c6ae:	b.n	c694 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000c6b0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c6b0:	b.w	a7f4 <usb_serial_flush_input>

0000c6b4 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c6b4:	b.w	a79c <usb_serial_peekchar>

0000c6b8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c6b8:	b.w	a854 <usb_serial_getchar>

0000c6bc <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c6bc:	b.w	a7e0 <usb_serial_available>

0000c6c0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c6c0:	b.w	aa60 <usb_serial_flush_output>

0000c6c4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c6c4:	b.w	aa14 <usb_serial_write_buffer_free>

0000c6c8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c6c8:	mov	r0, r1
    c6ca:	mov	r1, r2
    c6cc:	b.w	a874 <usb_serial_write>

0000c6d0 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c6d0:	mov	r0, r1
    c6d2:	b.w	a9fc <usb_serial_putchar>

0000c6d6 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c6d6:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c6d8:	bl	77c <setup>
	while (1) {
		loop();
    c6dc:	bl	278 <loop>
		yield();
    c6e0:	bl	c4a4 <yield>
	while (1) {
    c6e4:	b.n	c6dc <main+0x6>
	...

0000c6e8 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    c6e8:	push	{r4, r5, r6, lr}
    c6ea:	ldr	r5, [pc, #36]	@ (c710 <Stream::timedRead()+0x28>)
    c6ec:	mov	r4, r0
    c6ee:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    c6f0:	ldr	r3, [r4, #0]
    c6f2:	mov	r0, r4
    c6f4:	ldr	r3, [r3, #20]
    c6f6:	blx	r3
    if (c >= 0) return c;
    c6f8:	cmp	r0, #0
    c6fa:	bge.n	c70e <Stream::timedRead()+0x26>
    yield();
    c6fc:	bl	c4a4 <yield>
    c700:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c702:	ldr	r2, [r4, #8]
    c704:	subs	r3, r3, r6
    c706:	cmp	r3, r2
    c708:	bcc.n	c6f0 <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    c70a:	mov.w	r0, #4294967295
}
    c70e:	pop	{r4, r5, r6, pc}
    c710:	.word	0x20012864

0000c714 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    c714:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c718:	mov	r6, r0
    c71a:	mov	r7, r1
    c71c:	mov	r4, r3
	if (buffer == nullptr) return 0;
    c71e:	mov	r5, r2
    c720:	cbz	r2, c752 <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    c722:	cbz	r3, c744 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    c724:	add.w	r8, r3, #4294967295
	size_t index = 0;
    c728:	movs	r4, #0
	while (index < length) {
    c72a:	cmp	r4, r8
    c72c:	bcs.n	c740 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    c72e:	mov	r0, r6
    c730:	bl	c6e8 <Stream::timedRead()>
		if (c == terminator) break;
    c734:	cmp	r7, r0
    c736:	beq.n	c740 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    c738:	cmp	r0, #0
    c73a:	bge.n	c74a <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    c73c:	movs	r3, #1
    c73e:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    c740:	movs	r3, #0
    c742:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    c744:	mov	r0, r4
    c746:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    c74a:	adds	r4, #1
		*buffer++ = (char)c;
    c74c:	strb.w	r0, [r5], #1
		index++;
    c750:	b.n	c72a <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    c752:	mov	r4, r2
    c754:	b.n	c744 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000c756 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c756:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c758:	push	{r4, r5, r6, r7, lr}
		base = 10;
    c75a:	it	eq
    c75c:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c75e:	sub	sp, #44	@ 0x2c
	}


	if (n == 0) {
    c760:	cbnz	r1, c78e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    c762:	movs	r2, #48	@ 0x30
		i = sizeof(buf) - 1;
    c764:	movs	r4, #33	@ 0x21
		buf[sizeof(buf) - 1] = '0';
    c766:	strb.w	r2, [sp, #37]	@ 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c76a:	cbz	r3, c77c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    c76c:	subs	r3, r4, #1
		buf[i] = '-';
    c76e:	add	r2, sp, #40	@ 0x28
		i--;
    c770:	uxtb	r4, r3
		buf[i] = '-';
    c772:	uxtab	r3, r2, r3
    c776:	movs	r2, #45	@ 0x2d
    c778:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c77c:	ldr	r3, [r0, #0]
    c77e:	add	r1, sp, #4
    c780:	rsb	r2, r4, #34	@ 0x22
    c784:	ldr	r3, [r3, #4]
    c786:	add	r1, r4
    c788:	blx	r3
}
    c78a:	add	sp, #44	@ 0x2c
    c78c:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    c78e:	movs	r4, #33	@ 0x21
			digit = n % base;
    c790:	udiv	r6, r1, r2
    c794:	mls	r7, r2, r6, r1
    c798:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c79a:	cmp	r7, #9
    c79c:	add.w	r7, r4, #40	@ 0x28
    c7a0:	ite	ls
    c7a2:	addls	r5, #48	@ 0x30
    c7a4:	addhi	r5, #55	@ 0x37
    c7a6:	add	r7, sp
			if (n == 0) break;
    c7a8:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c7aa:	uxtb	r5, r5
    c7ac:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    c7b0:	bhi.n	c76a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    c7b2:	subs	r4, #1
			n /= base;
    c7b4:	mov	r1, r6
			i--;
    c7b6:	uxtb	r4, r4
			digit = n % base;
    c7b8:	b.n	c790 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000c7ba <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    c7ba:	push	{r4, r5, r6, lr}
    c7bc:	mov	r5, r0
    c7be:	mov	r4, r1
							  return write((const uint8_t *)str, strlen(str)); }
    c7c0:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    c7c2:	cbz	r1, c7d8 <Print::write(char const*)+0x1e>
							  return write((const uint8_t *)str, strlen(str)); }
    c7c4:	bl	ee80 <strlen>
    c7c8:	ldr	r3, [r5, #0]
    c7ca:	mov	r2, r0
    c7cc:	mov	r1, r4
    c7ce:	mov	r0, r5
    c7d0:	ldr	r3, [r3, #4]
    c7d2:	ldmia.w	sp!, {r4, r5, r6, lr}
    c7d6:	bx	r3
    c7d8:	pop	{r4, r5, r6, pc}

0000c7da <Print::print(long)>:
	if (n < 0) {
    c7da:	cmp	r1, #0
		n = -n;
    c7dc:	mov.w	r2, #10
    c7e0:	itte	lt
    c7e2:	neglt	r1, r1
		sign = '-';
    c7e4:	movlt	r3, #45	@ 0x2d
	uint8_t sign=0;
    c7e6:	movge	r3, #0
	if (base == 0) {
    c7e8:	b.w	c756 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c7ec <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    c7ec:	movw	r3, #2573	@ 0xa0d
{
    c7f0:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    c7f2:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c7f6:	movs	r2, #2
    c7f8:	ldr	r3, [r0, #0]
    c7fa:	add	r1, sp, #4
    c7fc:	ldr	r3, [r3, #4]
    c7fe:	blx	r3
}
    c800:	add	sp, #12
    c802:	ldr.w	pc, [sp], #4
	...

0000c808 <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c808:	ldr	r3, [pc, #20]	@ (c820 <_write+0x18>)
    c80a:	cmp	r0, #2
    c80c:	it	hi
    c80e:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c810:	ldr	r0, [r3, #0]
{
    c812:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c814:	ldr	r4, [r0, #4]
    c816:	mov	r0, r3
    c818:	mov	r3, r4
}
    c81a:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c81e:	bx	r3
    c820:	.word	0x20001e58

0000c824 <Print::printf(char const*, ...)>:
{
    c824:	push	{r1, r2, r3}
    c826:	push	{r0, r1, lr}
    c828:	add	r2, sp, #12
    c82a:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    c82e:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    c830:	bl	eb64 <vdiprintf>
}
    c834:	add	sp, #8
    c836:	ldr.w	lr, [sp], #4
    c83a:	add	sp, #12
    c83c:	bx	lr

0000c83e <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    c83e:	push	{r4, r5}
	if (base == 0) {
    c840:	cbnz	r2, c84c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    c842:	ldr	r3, [r0, #0]
    c844:	uxtb	r1, r1
    c846:	ldr	r3, [r3, #0]
}
    c848:	pop	{r4, r5}
		return write((uint8_t)n);
    c84a:	bx	r3
}
    c84c:	pop	{r4, r5}
    c84e:	b.w	c756 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c852 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    c852:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c856:	sub	sp, #72	@ 0x48
    c858:	mov	r8, r0
    c85a:	mov	r7, r2
    c85c:	mov	r6, r3
    c85e:	ldrb.w	r9, [sp, #104]	@ 0x68
    c862:	ldrb.w	sl, [sp, #108]	@ 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c866:	cmp.w	r9, #1
    c86a:	bls.n	c8de <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    c86c:	orrs.w	r3, r2, r6
    c870:	bne.n	c8a8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    c872:	movs	r3, #48	@ 0x30
		i = sizeof(buf) - 1;
    c874:	movs	r5, #65	@ 0x41
		buf[sizeof(buf) - 1] = '0';
    c876:	strb.w	r3, [sp, #69]	@ 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c87a:	cmp.w	sl, #0
    c87e:	beq.n	c890 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    c880:	subs	r3, r5, #1
		buf[i] = '-';
    c882:	add	r2, sp, #72	@ 0x48
		i--;
    c884:	uxtb	r5, r3
		buf[i] = '-';
    c886:	uxtab	r3, r2, r3
    c88a:	movs	r2, #45	@ 0x2d
    c88c:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    c890:	ldr.w	r3, [r8]
    c894:	add	r1, sp, #4
    c896:	rsb	r2, r5, #66	@ 0x42
    c89a:	mov	r0, r8
    c89c:	ldr	r3, [r3, #4]
    c89e:	add	r1, r5
    c8a0:	blx	r3
}
    c8a2:	add	sp, #72	@ 0x48
    c8a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    c8a8:	movs	r5, #65	@ 0x41
			digit = n % base;
    c8aa:	mov	r1, r6
    c8ac:	mov	r2, r9
    c8ae:	movs	r3, #0
    c8b0:	mov	r0, r7
    c8b2:	bl	ca24 <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c8b6:	add.w	r3, r5, #72	@ 0x48
			digit = n % base;
    c8ba:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c8bc:	add	r3, sp
    c8be:	cmp	r4, #9
    c8c0:	ite	ls
    c8c2:	addls	r4, #48	@ 0x30
    c8c4:	addhi	r4, #55	@ 0x37
			if (n == 0) break;
    c8c6:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c8c8:	uxtb	r4, r4
			if (n == 0) break;
    c8ca:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c8ce:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    c8d2:	bcc.n	c87a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    c8d4:	subs	r5, #1
			n /= base;
    c8d6:	mov	r7, r0
    c8d8:	mov	r6, r1
			i--;
    c8da:	uxtb	r5, r5
			digit = n % base;
    c8dc:	b.n	c8aa <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    c8de:	movs	r0, #0
    c8e0:	b.n	c8a2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
    c8e2:	movs	r0, r0
    c8e4:	movs	r0, r0
	...

0000c8e8 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c8e8:	vcmp.f64	d0, d0
{
    c8ec:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    c8ee:	vmrs	APSR_nzcv, fpscr
{
    c8f2:	mov	r6, r0
    c8f4:	mov	r5, r1
    c8f6:	vpush	{d8-d9}
    c8fa:	sub	sp, #28
	if (isnan(number)) return print("nan");
    c8fc:	bvc.n	c910 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    c8fe:	ldr	r1, [pc, #264]	@ (ca08 <Print::printFloat(double, unsigned char)+0x120>)
    c900:	bl	c7ba <Print::write(char const*)>
    c904:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    c906:	mov	r0, r4
    c908:	add	sp, #28
    c90a:	vpop	{d8-d9}
    c90e:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c910:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c914:	vldr	d6, [pc, #208]	@ c9e8 <Print::printFloat(double, unsigned char)+0x100>
    c918:	vcmp.f64	d7, d6
    c91c:	vmrs	APSR_nzcv, fpscr
    c920:	ble.n	c926 <Print::printFloat(double, unsigned char)+0x3e>
    c922:	ldr	r1, [pc, #232]	@ (ca0c <Print::printFloat(double, unsigned char)+0x124>)
    c924:	b.n	c900 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c926:	vldr	d7, [pc, #200]	@ c9f0 <Print::printFloat(double, unsigned char)+0x108>
    c92a:	vcmpe.f64	d0, d7
    c92e:	vmrs	APSR_nzcv, fpscr
    c932:	ble.n	c93a <Print::printFloat(double, unsigned char)+0x52>
    c934:	ldr	r1, [pc, #216]	@ (ca10 <Print::printFloat(double, unsigned char)+0x128>)
    c936:	mov	r0, r6
    c938:	b.n	c900 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c93a:	vldr	d7, [pc, #188]	@ c9f8 <Print::printFloat(double, unsigned char)+0x110>
    c93e:	vcmpe.f64	d0, d7
    c942:	vmrs	APSR_nzcv, fpscr
    c946:	bmi.n	c934 <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    c948:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    c94c:	movs	r2, #0
	double rounding = 0.5;
    c94e:	vmov.f64	d8, #96	@ 0x3f000000  0.5
	if (number < 0.0) {
    c952:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    c956:	vldr	d6, [pc, #168]	@ ca00 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    c95a:	itte	mi
    c95c:	vnegmi.f64	d0, d0
		sign = 1;
    c960:	movmi	r3, #1
	uint8_t sign=0;
    c962:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    c964:	uxtb	r1, r2
    c966:	cmp	r5, r1
    c968:	bhi.n	c9e0 <Print::printFloat(double, unsigned char)+0xf8>
	number += rounding;
    c96a:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    c96e:	movs	r2, #10
    c970:	mov	r0, r6
    c972:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    c976:	vmov	r1, s18
    c97a:	bl	c756 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c97e:	mov	r4, r0
	if (digits > 0) {
    c980:	cmp	r5, #0
    c982:	beq.n	c906 <Print::printFloat(double, unsigned char)+0x1e>
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;
    c984:	cmp	r5, #15
		buf[0] = '.';
    c986:	mov.w	r3, #46	@ 0x2e
	double remainder = number - (double)int_part;
    c98a:	vcvt.f64.u32	d0, s18
    c98e:	add	r0, sp, #8
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;
    c990:	it	cs
    c992:	movcs	r5, #15
		buf[0] = '.';
    c994:	strb.w	r3, [sp, #8]
			remainder *= 10.0;
    c998:	vmov.f64	d6, #36	@ 0x41200000  10.0
    c99c:	mov	r1, r0
		while (digits-- > 0) {
    c99e:	subs	r3, r5, #1
	double remainder = number - (double)int_part;
    c9a0:	vsub.f64	d0, d8, d0
		while (digits-- > 0) {
    c9a4:	uxtb	r3, r3
			remainder *= 10.0;
    c9a6:	vmul.f64	d0, d0, d6
		while (digits-- > 0) {
    c9aa:	subs	r3, #1
    c9ac:	uxtb	r3, r3
    c9ae:	cmp	r3, #255	@ 0xff
			n = (uint8_t)(remainder);
    c9b0:	vcvt.u32.f64	s15, d0
    c9b4:	vstr	s15, [sp, #4]
    c9b8:	ldrb.w	r2, [sp, #4]
			remainder -= n; 
    c9bc:	vmov	s15, r2
			buf[count++] = '0' + n;
    c9c0:	add.w	r7, r2, #48	@ 0x30
			remainder -= n; 
    c9c4:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    c9c8:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    c9cc:	vsub.f64	d0, d0, d7
		while (digits-- > 0) {
    c9d0:	bne.n	c9a6 <Print::printFloat(double, unsigned char)+0xbe>
		count += write(buf, count);
    c9d2:	adds	r5, #1
    c9d4:	ldr	r3, [r6, #0]
    c9d6:	mov	r0, r6
    c9d8:	ldr	r3, [r3, #4]
    c9da:	uxtb	r2, r5
    c9dc:	blx	r3
    c9de:	b.n	c906 <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    c9e0:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    c9e4:	adds	r2, #1
    c9e6:	b.n	c964 <Print::printFloat(double, unsigned char)+0x7c>
    c9e8:	.word	0xffffffff
    c9ec:	.word	0x7fefffff
    c9f0:	.word	0xe0000000
    c9f4:	.word	0x41efffff
    c9f8:	.word	0xe0000000
    c9fc:	.word	0xc1efffff
    ca00:	.word	0xa0000000
    ca04:	.word	0x3fb99999
    ca08:	.word	0x20001c59
    ca0c:	.word	0x20001c5d
    ca10:	.word	0x20001c61

0000ca14 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    ca14:	b.w	cd24 <free>

0000ca18 <__aeabi_atexit>:
    ca18:	mov	r3, r1
    ca1a:	mov	r1, r0
    ca1c:	mov	r0, r3
    ca1e:	b.w	db58 <__cxa_atexit>
	...

0000ca24 <__aeabi_uldivmod>:
    ca24:	cbnz	r3, ca3c <__aeabi_uldivmod+0x18>
    ca26:	cbnz	r2, ca3c <__aeabi_uldivmod+0x18>
    ca28:	cmp	r1, #0
    ca2a:	it	eq
    ca2c:	cmpeq	r0, #0
    ca2e:	itt	ne
    ca30:	movne.w	r1, #4294967295
    ca34:	movne.w	r0, #4294967295
    ca38:	b.w	cd10 <__aeabi_idiv0>
    ca3c:	sub.w	ip, sp, #8
    ca40:	strd	ip, lr, [sp, #-16]!
    ca44:	bl	ca54 <__udivmoddi4>
    ca48:	ldr.w	lr, [sp, #4]
    ca4c:	ldrd	r2, r3, [sp, #8]
    ca50:	add	sp, #16
    ca52:	bx	lr

0000ca54 <__udivmoddi4>:
    ca54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca58:	ldr	r5, [sp, #32]
    ca5a:	mov	r6, r1
    ca5c:	mov	r4, r0
    ca5e:	mov	r7, r1
    ca60:	cmp	r3, #0
    ca62:	bne.n	cafa <__udivmoddi4+0xa6>
    ca64:	mov	ip, r2
    ca66:	cmp	ip, r1
    ca68:	clz	r2, r2
    ca6c:	bls.n	cb30 <__udivmoddi4+0xdc>
    ca6e:	cbz	r2, ca82 <__udivmoddi4+0x2e>
    ca70:	rsb	r3, r2, #32
    ca74:	lsls	r7, r2
    ca76:	lsr.w	r3, r0, r3
    ca7a:	lsl.w	ip, ip, r2
    ca7e:	orrs	r7, r3
    ca80:	lsls	r4, r2
    ca82:	mov.w	lr, ip, lsr #16
    ca86:	uxth.w	r6, ip
    ca8a:	udiv	r1, r7, lr
    ca8e:	lsrs	r3, r4, #16
    ca90:	mls	r7, lr, r1, r7
    ca94:	orr.w	r3, r3, r7, lsl #16
    ca98:	mul.w	r0, r1, r6
    ca9c:	cmp	r0, r3
    ca9e:	bls.n	cab6 <__udivmoddi4+0x62>
    caa0:	adds.w	r3, ip, r3
    caa4:	add.w	r7, r1, #4294967295
    caa8:	bcs.w	ccd6 <__udivmoddi4+0x282>
    caac:	cmp	r0, r3
    caae:	bls.w	ccd6 <__udivmoddi4+0x282>
    cab2:	subs	r1, #2
    cab4:	add	r3, ip
    cab6:	subs	r3, r3, r0
    cab8:	uxth	r4, r4
    caba:	udiv	r0, r3, lr
    cabe:	mls	r3, lr, r0, r3
    cac2:	orr.w	r4, r4, r3, lsl #16
    cac6:	mul.w	r6, r0, r6
    caca:	cmp	r6, r4
    cacc:	bls.n	cae4 <__udivmoddi4+0x90>
    cace:	adds.w	r4, ip, r4
    cad2:	add.w	r3, r0, #4294967295
    cad6:	bcs.w	ccda <__udivmoddi4+0x286>
    cada:	cmp	r6, r4
    cadc:	bls.w	ccda <__udivmoddi4+0x286>
    cae0:	add	r4, ip
    cae2:	subs	r0, #2
    cae4:	orr.w	r0, r0, r1, lsl #16
    cae8:	subs	r4, r4, r6
    caea:	movs	r1, #0
    caec:	cbz	r5, caf6 <__udivmoddi4+0xa2>
    caee:	lsrs	r4, r2
    caf0:	movs	r3, #0
    caf2:	strd	r4, r3, [r5]
    caf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cafa:	cmp	r3, r1
    cafc:	bls.n	cb0a <__udivmoddi4+0xb6>
    cafe:	cbz	r5, cb04 <__udivmoddi4+0xb0>
    cb00:	strd	r0, r1, [r5]
    cb04:	movs	r1, #0
    cb06:	mov	r0, r1
    cb08:	b.n	caf6 <__udivmoddi4+0xa2>
    cb0a:	clz	r1, r3
    cb0e:	cmp	r1, #0
    cb10:	bne.n	cba0 <__udivmoddi4+0x14c>
    cb12:	cmp	r3, r6
    cb14:	bcc.n	cb1c <__udivmoddi4+0xc8>
    cb16:	cmp	r2, r0
    cb18:	bhi.w	cd06 <__udivmoddi4+0x2b2>
    cb1c:	subs	r4, r0, r2
    cb1e:	sbc.w	r2, r6, r3
    cb22:	movs	r0, #1
    cb24:	mov	r7, r2
    cb26:	cmp	r5, #0
    cb28:	beq.n	caf6 <__udivmoddi4+0xa2>
    cb2a:	strd	r4, r7, [r5]
    cb2e:	b.n	caf6 <__udivmoddi4+0xa2>
    cb30:	cmp	r2, #0
    cb32:	bne.w	cc5c <__udivmoddi4+0x208>
    cb36:	sub.w	r3, r1, ip
    cb3a:	mov.w	r7, ip, lsr #16
    cb3e:	uxth.w	lr, ip
    cb42:	movs	r1, #1
    cb44:	udiv	r6, r3, r7
    cb48:	mls	r0, r7, r6, r3
    cb4c:	lsrs	r3, r4, #16
    cb4e:	orr.w	r3, r3, r0, lsl #16
    cb52:	mul.w	r0, lr, r6
    cb56:	cmp	r0, r3
    cb58:	bls.n	cb6c <__udivmoddi4+0x118>
    cb5a:	adds.w	r3, ip, r3
    cb5e:	add.w	r8, r6, #4294967295
    cb62:	bcs.n	cb6a <__udivmoddi4+0x116>
    cb64:	cmp	r0, r3
    cb66:	bhi.w	cd0a <__udivmoddi4+0x2b6>
    cb6a:	mov	r6, r8
    cb6c:	subs	r3, r3, r0
    cb6e:	uxth	r4, r4
    cb70:	udiv	r0, r3, r7
    cb74:	mls	r3, r7, r0, r3
    cb78:	orr.w	r4, r4, r3, lsl #16
    cb7c:	mul.w	lr, lr, r0
    cb80:	cmp	lr, r4
    cb82:	bls.n	cb96 <__udivmoddi4+0x142>
    cb84:	adds.w	r4, ip, r4
    cb88:	add.w	r3, r0, #4294967295
    cb8c:	bcs.n	cb94 <__udivmoddi4+0x140>
    cb8e:	cmp	lr, r4
    cb90:	bhi.w	cd00 <__udivmoddi4+0x2ac>
    cb94:	mov	r0, r3
    cb96:	sub.w	r4, r4, lr
    cb9a:	orr.w	r0, r0, r6, lsl #16
    cb9e:	b.n	caec <__udivmoddi4+0x98>
    cba0:	rsb	r7, r1, #32
    cba4:	lsls	r3, r1
    cba6:	lsr.w	ip, r2, r7
    cbaa:	orr.w	ip, ip, r3
    cbae:	lsl.w	lr, r6, r1
    cbb2:	lsr.w	r4, r0, r7
    cbb6:	lsr.w	r3, r6, r7
    cbba:	orr.w	r4, r4, lr
    cbbe:	lsl.w	r8, r0, r1
    cbc2:	mov.w	r0, ip, lsr #16
    cbc6:	mov.w	r9, r4, lsr #16
    cbca:	udiv	lr, r3, r0
    cbce:	uxth.w	r6, ip
    cbd2:	mls	r3, r0, lr, r3
    cbd6:	orr.w	r3, r9, r3, lsl #16
    cbda:	mul.w	r9, lr, r6
    cbde:	cmp	r9, r3
    cbe0:	lsl.w	r2, r2, r1
    cbe4:	bls.n	cbfe <__udivmoddi4+0x1aa>
    cbe6:	adds.w	r3, ip, r3
    cbea:	add.w	sl, lr, #4294967295
    cbee:	bcs.w	ccfc <__udivmoddi4+0x2a8>
    cbf2:	cmp	r9, r3
    cbf4:	bls.w	ccfc <__udivmoddi4+0x2a8>
    cbf8:	sub.w	lr, lr, #2
    cbfc:	add	r3, ip
    cbfe:	sub.w	r9, r3, r9
    cc02:	uxth	r4, r4
    cc04:	udiv	r3, r9, r0
    cc08:	mls	r9, r0, r3, r9
    cc0c:	orr.w	r4, r4, r9, lsl #16
    cc10:	mul.w	r6, r3, r6
    cc14:	cmp	r6, r4
    cc16:	bls.n	cc2a <__udivmoddi4+0x1d6>
    cc18:	adds.w	r4, ip, r4
    cc1c:	add.w	r0, r3, #4294967295
    cc20:	bcs.n	ccf4 <__udivmoddi4+0x2a0>
    cc22:	cmp	r6, r4
    cc24:	bls.n	ccf4 <__udivmoddi4+0x2a0>
    cc26:	subs	r3, #2
    cc28:	add	r4, ip
    cc2a:	orr.w	r0, r3, lr, lsl #16
    cc2e:	subs	r4, r4, r6
    cc30:	umull	lr, r6, r0, r2
    cc34:	cmp	r4, r6
    cc36:	mov	r3, lr
    cc38:	mov	r9, r6
    cc3a:	bcc.n	cce2 <__udivmoddi4+0x28e>
    cc3c:	beq.n	ccde <__udivmoddi4+0x28a>
    cc3e:	cbz	r5, cc58 <__udivmoddi4+0x204>
    cc40:	subs.w	r2, r8, r3
    cc44:	sbc.w	r4, r4, r9
    cc48:	lsl.w	r7, r4, r7
    cc4c:	lsr.w	r3, r2, r1
    cc50:	orrs	r7, r3
    cc52:	lsrs	r4, r1
    cc54:	strd	r7, r4, [r5]
    cc58:	movs	r1, #0
    cc5a:	b.n	caf6 <__udivmoddi4+0xa2>
    cc5c:	rsb	r1, r2, #32
    cc60:	lsr.w	r3, r0, r1
    cc64:	lsl.w	ip, ip, r2
    cc68:	lsr.w	r1, r6, r1
    cc6c:	lsls	r6, r2
    cc6e:	orrs	r3, r6
    cc70:	mov.w	r7, ip, lsr #16
    cc74:	uxth.w	lr, ip
    cc78:	udiv	r0, r1, r7
    cc7c:	mls	r6, r7, r0, r1
    cc80:	lsrs	r1, r3, #16
    cc82:	orr.w	r1, r1, r6, lsl #16
    cc86:	mul.w	r6, r0, lr
    cc8a:	cmp	r6, r1
    cc8c:	lsl.w	r4, r4, r2
    cc90:	bls.n	cca4 <__udivmoddi4+0x250>
    cc92:	adds.w	r1, ip, r1
    cc96:	add.w	r8, r0, #4294967295
    cc9a:	bcs.n	ccf8 <__udivmoddi4+0x2a4>
    cc9c:	cmp	r6, r1
    cc9e:	bls.n	ccf8 <__udivmoddi4+0x2a4>
    cca0:	subs	r0, #2
    cca2:	add	r1, ip
    cca4:	subs	r1, r1, r6
    cca6:	uxth	r3, r3
    cca8:	udiv	r6, r1, r7
    ccac:	mls	r1, r7, r6, r1
    ccb0:	orr.w	r3, r3, r1, lsl #16
    ccb4:	mul.w	r1, r6, lr
    ccb8:	cmp	r1, r3
    ccba:	bls.n	ccce <__udivmoddi4+0x27a>
    ccbc:	adds.w	r3, ip, r3
    ccc0:	add.w	r8, r6, #4294967295
    ccc4:	bcs.n	ccf0 <__udivmoddi4+0x29c>
    ccc6:	cmp	r1, r3
    ccc8:	bls.n	ccf0 <__udivmoddi4+0x29c>
    ccca:	subs	r6, #2
    cccc:	add	r3, ip
    ccce:	subs	r3, r3, r1
    ccd0:	orr.w	r1, r6, r0, lsl #16
    ccd4:	b.n	cb44 <__udivmoddi4+0xf0>
    ccd6:	mov	r1, r7
    ccd8:	b.n	cab6 <__udivmoddi4+0x62>
    ccda:	mov	r0, r3
    ccdc:	b.n	cae4 <__udivmoddi4+0x90>
    ccde:	cmp	r8, lr
    cce0:	bcs.n	cc3e <__udivmoddi4+0x1ea>
    cce2:	subs.w	r3, lr, r2
    cce6:	sbc.w	r6, r6, ip
    ccea:	subs	r0, #1
    ccec:	mov	r9, r6
    ccee:	b.n	cc3e <__udivmoddi4+0x1ea>
    ccf0:	mov	r6, r8
    ccf2:	b.n	ccce <__udivmoddi4+0x27a>
    ccf4:	mov	r3, r0
    ccf6:	b.n	cc2a <__udivmoddi4+0x1d6>
    ccf8:	mov	r0, r8
    ccfa:	b.n	cca4 <__udivmoddi4+0x250>
    ccfc:	mov	lr, sl
    ccfe:	b.n	cbfe <__udivmoddi4+0x1aa>
    cd00:	add	r4, ip
    cd02:	subs	r0, #2
    cd04:	b.n	cb96 <__udivmoddi4+0x142>
    cd06:	mov	r0, r1
    cd08:	b.n	cb26 <__udivmoddi4+0xd2>
    cd0a:	subs	r6, #2
    cd0c:	add	r3, ip
    cd0e:	b.n	cb6c <__udivmoddi4+0x118>

0000cd10 <__aeabi_idiv0>:
    cd10:	bx	lr
    cd12:	nop

0000cd14 <malloc>:
    cd14:	ldr	r3, [pc, #8]	@ (cd20 <malloc+0xc>)
    cd16:	mov	r1, r0
    cd18:	ldr	r0, [r3, #0]
    cd1a:	b.w	cd78 <_malloc_r>
    cd1e:	nop
    cd20:	.word	0x200023f8

0000cd24 <free>:
    cd24:	ldr	r3, [pc, #8]	@ (cd30 <free+0xc>)
    cd26:	mov	r1, r0
    cd28:	ldr	r0, [r3, #0]
    cd2a:	b.w	fa5c <_free_r>
    cd2e:	nop
    cd30:	.word	0x200023f8

0000cd34 <sbrk_aligned>:
    cd34:	push	{r4, r5, r6, lr}
    cd36:	ldr	r6, [pc, #60]	@ (cd74 <sbrk_aligned+0x40>)
    cd38:	mov	r4, r1
    cd3a:	ldr	r1, [r6, #0]
    cd3c:	mov	r5, r0
    cd3e:	cbnz	r1, cd46 <sbrk_aligned+0x12>
    cd40:	bl	ed30 <_sbrk_r>
    cd44:	str	r0, [r6, #0]
    cd46:	mov	r1, r4
    cd48:	mov	r0, r5
    cd4a:	bl	ed30 <_sbrk_r>
    cd4e:	adds	r3, r0, #1
    cd50:	bne.n	cd5a <sbrk_aligned+0x26>
    cd52:	mov.w	r4, #4294967295
    cd56:	mov	r0, r4
    cd58:	pop	{r4, r5, r6, pc}
    cd5a:	adds	r4, r0, #3
    cd5c:	bic.w	r4, r4, #3
    cd60:	cmp	r0, r4
    cd62:	beq.n	cd56 <sbrk_aligned+0x22>
    cd64:	subs	r1, r4, r0
    cd66:	mov	r0, r5
    cd68:	bl	ed30 <_sbrk_r>
    cd6c:	adds	r0, #1
    cd6e:	bne.n	cd56 <sbrk_aligned+0x22>
    cd70:	b.n	cd52 <sbrk_aligned+0x1e>
    cd72:	nop
    cd74:	.word	0x20011d48

0000cd78 <_malloc_r>:
    cd78:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd7c:	adds	r5, r1, #3
    cd7e:	bic.w	r5, r5, #3
    cd82:	adds	r5, #8
    cd84:	cmp	r5, #12
    cd86:	it	cc
    cd88:	movcc	r5, #12
    cd8a:	cmp	r5, #0
    cd8c:	mov	r6, r0
    cd8e:	blt.n	cd94 <_malloc_r+0x1c>
    cd90:	cmp	r1, r5
    cd92:	bls.n	cd9e <_malloc_r+0x26>
    cd94:	movs	r3, #12
    cd96:	str	r3, [r6, #0]
    cd98:	movs	r0, #0
    cd9a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cd9e:	ldr.w	r8, [pc, #212]	@ ce74 <_malloc_r+0xfc>
    cda2:	bl	ce78 <__malloc_lock>
    cda6:	ldr.w	r3, [r8]
    cdaa:	mov	r4, r3
    cdac:	cbnz	r4, ce00 <_malloc_r+0x88>
    cdae:	mov	r1, r5
    cdb0:	mov	r0, r6
    cdb2:	bl	cd34 <sbrk_aligned>
    cdb6:	adds	r3, r0, #1
    cdb8:	mov	r4, r0
    cdba:	bne.n	ce6e <_malloc_r+0xf6>
    cdbc:	ldr.w	r4, [r8]
    cdc0:	mov	r7, r4
    cdc2:	cmp	r7, #0
    cdc4:	bne.n	ce4e <_malloc_r+0xd6>
    cdc6:	cmp	r4, #0
    cdc8:	beq.n	ce62 <_malloc_r+0xea>
    cdca:	ldr	r3, [r4, #0]
    cdcc:	mov	r1, r7
    cdce:	mov	r0, r6
    cdd0:	add.w	r9, r4, r3
    cdd4:	bl	ed30 <_sbrk_r>
    cdd8:	cmp	r9, r0
    cdda:	bne.n	ce62 <_malloc_r+0xea>
    cddc:	ldr	r1, [r4, #0]
    cdde:	subs	r5, r5, r1
    cde0:	mov	r1, r5
    cde2:	mov	r0, r6
    cde4:	bl	cd34 <sbrk_aligned>
    cde8:	adds	r0, #1
    cdea:	beq.n	ce62 <_malloc_r+0xea>
    cdec:	ldr	r3, [r4, #0]
    cdee:	add	r3, r5
    cdf0:	str	r3, [r4, #0]
    cdf2:	ldr.w	r3, [r8]
    cdf6:	ldr	r2, [r3, #4]
    cdf8:	cbnz	r2, ce54 <_malloc_r+0xdc>
    cdfa:	str.w	r7, [r8]
    cdfe:	b.n	ce20 <_malloc_r+0xa8>
    ce00:	ldr	r2, [r4, #0]
    ce02:	subs	r2, r2, r5
    ce04:	bmi.n	ce48 <_malloc_r+0xd0>
    ce06:	cmp	r2, #11
    ce08:	bls.n	ce3a <_malloc_r+0xc2>
    ce0a:	adds	r1, r4, r5
    ce0c:	cmp	r3, r4
    ce0e:	str	r5, [r4, #0]
    ce10:	it	ne
    ce12:	strne	r1, [r3, #4]
    ce14:	ldr	r3, [r4, #4]
    ce16:	it	eq
    ce18:	streq.w	r1, [r8]
    ce1c:	str	r2, [r4, r5]
    ce1e:	str	r3, [r1, #4]
    ce20:	mov	r0, r6
    ce22:	bl	ce84 <__malloc_unlock>
    ce26:	add.w	r0, r4, #11
    ce2a:	adds	r3, r4, #4
    ce2c:	bic.w	r0, r0, #7
    ce30:	subs	r2, r0, r3
    ce32:	itt	ne
    ce34:	subne	r3, r3, r0
    ce36:	strne	r3, [r4, r2]
    ce38:	b.n	cd9a <_malloc_r+0x22>
    ce3a:	ldr	r2, [r4, #4]
    ce3c:	cmp	r3, r4
    ce3e:	ite	eq
    ce40:	streq.w	r2, [r8]
    ce44:	strne	r2, [r3, #4]
    ce46:	b.n	ce20 <_malloc_r+0xa8>
    ce48:	mov	r3, r4
    ce4a:	ldr	r4, [r4, #4]
    ce4c:	b.n	cdac <_malloc_r+0x34>
    ce4e:	mov	r4, r7
    ce50:	ldr	r7, [r7, #4]
    ce52:	b.n	cdc2 <_malloc_r+0x4a>
    ce54:	mov	r2, r3
    ce56:	ldr	r3, [r3, #4]
    ce58:	cmp	r3, r4
    ce5a:	bne.n	ce54 <_malloc_r+0xdc>
    ce5c:	movs	r3, #0
    ce5e:	str	r3, [r2, #4]
    ce60:	b.n	ce20 <_malloc_r+0xa8>
    ce62:	movs	r3, #12
    ce64:	str	r3, [r6, #0]
    ce66:	mov	r0, r6
    ce68:	bl	ce84 <__malloc_unlock>
    ce6c:	b.n	cd98 <_malloc_r+0x20>
    ce6e:	str	r5, [r0, #0]
    ce70:	b.n	ce20 <_malloc_r+0xa8>
    ce72:	nop
    ce74:	.word	0x20011d44

0000ce78 <__malloc_lock>:
    ce78:	ldr	r0, [pc, #4]	@ (ce80 <__malloc_lock+0x8>)
    ce7a:	b.w	edca <__retarget_lock_acquire_recursive>
    ce7e:	nop
    ce80:	.word	0x20012aa0

0000ce84 <__malloc_unlock>:
    ce84:	ldr	r0, [pc, #4]	@ (ce8c <__malloc_unlock+0x8>)
    ce86:	b.w	edcc <__retarget_lock_release_recursive>
    ce8a:	nop
    ce8c:	.word	0x20012aa0

0000ce90 <_realloc_r>:
    ce90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce94:	mov	r7, r0
    ce96:	mov	r4, r2
    ce98:	mov	r5, r1
    ce9a:	cbnz	r1, cea6 <_realloc_r+0x16>
    ce9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cea0:	mov	r1, r2
    cea2:	b.w	cd78 <_malloc_r>
    cea6:	cbnz	r2, ceb4 <_realloc_r+0x24>
    cea8:	bl	fa5c <_free_r>
    ceac:	mov	r5, r4
    ceae:	mov	r0, r5
    ceb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ceb4:	bl	10ad6 <_malloc_usable_size_r>
    ceb8:	cmp	r4, r0
    ceba:	mov	r6, r0
    cebc:	bhi.n	cec4 <_realloc_r+0x34>
    cebe:	cmp.w	r4, r0, lsr #1
    cec2:	bhi.n	ceae <_realloc_r+0x1e>
    cec4:	mov	r1, r4
    cec6:	mov	r0, r7
    cec8:	bl	cd78 <_malloc_r>
    cecc:	mov	r8, r0
    cece:	cbnz	r0, ced4 <_realloc_r+0x44>
    ced0:	mov	r5, r8
    ced2:	b.n	ceae <_realloc_r+0x1e>
    ced4:	cmp	r4, r6
    ced6:	mov	r2, r4
    ced8:	mov	r1, r5
    ceda:	it	cs
    cedc:	movcs	r2, r6
    cede:	bl	a2f0 <memcpy>
    cee2:	mov	r1, r5
    cee4:	mov	r0, r7
    cee6:	bl	fa5c <_free_r>
    ceea:	b.n	ced0 <_realloc_r+0x40>

0000ceec <sulp>:
    ceec:	push	{r4, r5, r6, lr}
    ceee:	mov	r4, r0
    cef0:	mov	r5, r1
    cef2:	mov	r6, r2
    cef4:	vmov	d0, r4, r5
    cef8:	bl	10860 <__ulp>
    cefc:	cbz	r6, cf1e <sulp+0x32>
    cefe:	ubfx	r3, r5, #20, #11
    cf02:	rsb	r3, r3, #107	@ 0x6b
    cf06:	cmp	r3, #0
    cf08:	ble.n	cf1e <sulp+0x32>
    cf0a:	lsls	r3, r3, #20
    cf0c:	add.w	r1, r3, #1069547520	@ 0x3fc00000
    cf10:	movs	r0, #0
    cf12:	add.w	r1, r1, #3145728	@ 0x300000
    cf16:	vmov	d7, r0, r1
    cf1a:	vmul.f64	d0, d0, d7
    cf1e:	pop	{r4, r5, r6, pc}

0000cf20 <_strtod_l>:
    cf20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf24:	vpush	{d8-d12}
    cf28:	sub	sp, #92	@ 0x5c
    cf2a:	mov	r8, r1
    cf2c:	str	r2, [sp, #56]	@ 0x38
    cf2e:	movs	r2, #0
    cf30:	str	r2, [sp, #72]	@ 0x48
    cf32:	str	r0, [sp, #20]
    cf34:	mov.w	sl, #0
    cf38:	mov.w	fp, #0
    cf3c:	mov	r2, r1
    cf3e:	str	r2, [sp, #68]	@ 0x44
    cf40:	ldrb	r1, [r2, #0]
    cf42:	cmp	r1, #43	@ 0x2b
    cf44:	beq.n	cfe0 <_strtod_l+0xc0>
    cf46:	bhi.n	cfbc <_strtod_l+0x9c>
    cf48:	cmp	r1, #13
    cf4a:	bhi.n	cfb4 <_strtod_l+0x94>
    cf4c:	cmp	r1, #8
    cf4e:	bhi.n	cfb8 <_strtod_l+0x98>
    cf50:	cmp	r1, #0
    cf52:	beq.n	cfce <_strtod_l+0xae>
    cf54:	movs	r2, #0
    cf56:	str	r2, [sp, #32]
    cf58:	ldr	r5, [sp, #68]	@ 0x44
    cf5a:	ldrb	r2, [r5, #0]
    cf5c:	cmp	r2, #48	@ 0x30
    cf5e:	bne.w	d0d0 <_strtod_l+0x1b0>
    cf62:	ldrb	r2, [r5, #1]
    cf64:	and.w	r2, r2, #223	@ 0xdf
    cf68:	cmp	r2, #88	@ 0x58
    cf6a:	bne.n	d04e <_strtod_l+0x12e>
    cf6c:	str	r3, [sp, #8]
    cf6e:	ldr	r3, [sp, #32]
    cf70:	str	r3, [sp, #4]
    cf72:	add	r3, sp, #72	@ 0x48
    cf74:	str	r3, [sp, #0]
    cf76:	ldr	r2, [pc, #576]	@ (d1b8 <_strtod_l+0x298>)
    cf78:	ldr	r0, [sp, #20]
    cf7a:	add	r3, sp, #76	@ 0x4c
    cf7c:	add	r1, sp, #68	@ 0x44
    cf7e:	bl	fbc0 <__gethex>
    cf82:	ands.w	r6, r0, #15
    cf86:	mov	r4, r0
    cf88:	beq.n	cf96 <_strtod_l+0x76>
    cf8a:	cmp	r6, #6
    cf8c:	bne.n	cfe4 <_strtod_l+0xc4>
    cf8e:	adds	r5, #1
    cf90:	movs	r3, #0
    cf92:	str	r5, [sp, #68]	@ 0x44
    cf94:	str	r3, [sp, #32]
    cf96:	ldr	r3, [sp, #56]	@ 0x38
    cf98:	cmp	r3, #0
    cf9a:	bne.w	da0c <_strtod_l+0xaec>
    cf9e:	ldr	r3, [sp, #32]
    cfa0:	vmov	d0, sl, fp
    cfa4:	cbz	r3, cfda <_strtod_l+0xba>
    cfa6:	vneg.f64	d0, d0
    cfaa:	add	sp, #92	@ 0x5c
    cfac:	vpop	{d8-d12}
    cfb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfb4:	cmp	r1, #32
    cfb6:	bne.n	cf54 <_strtod_l+0x34>
    cfb8:	adds	r2, #1
    cfba:	b.n	cf3e <_strtod_l+0x1e>
    cfbc:	cmp	r1, #45	@ 0x2d
    cfbe:	bne.n	cf54 <_strtod_l+0x34>
    cfc0:	movs	r1, #1
    cfc2:	str	r1, [sp, #32]
    cfc4:	adds	r1, r2, #1
    cfc6:	str	r1, [sp, #68]	@ 0x44
    cfc8:	ldrb	r2, [r2, #1]
    cfca:	cmp	r2, #0
    cfcc:	bne.n	cf58 <_strtod_l+0x38>
    cfce:	ldr	r3, [sp, #56]	@ 0x38
    cfd0:	str.w	r8, [sp, #68]	@ 0x44
    cfd4:	cmp	r3, #0
    cfd6:	bne.w	da08 <_strtod_l+0xae8>
    cfda:	vmov	d0, sl, fp
    cfde:	b.n	cfaa <_strtod_l+0x8a>
    cfe0:	movs	r1, #0
    cfe2:	b.n	cfc2 <_strtod_l+0xa2>
    cfe4:	ldr	r2, [sp, #72]	@ 0x48
    cfe6:	cbz	r2, cff8 <_strtod_l+0xd8>
    cfe8:	movs	r1, #53	@ 0x35
    cfea:	add	r0, sp, #80	@ 0x50
    cfec:	bl	10a4e <__copybits>
    cff0:	ldr	r1, [sp, #72]	@ 0x48
    cff2:	ldr	r0, [sp, #20]
    cff4:	bl	10208 <_Bfree>
    cff8:	subs	r3, r6, #1
    cffa:	ldr	r2, [sp, #76]	@ 0x4c
    cffc:	cmp	r3, #4
    cffe:	bhi.n	d00e <_strtod_l+0xee>
    d000:	tbb	[pc, r3]
    d004:	.word	0x201d0314
    d008:	.byte	0x14
    d009:	.byte	0x00
    d00a:	ldrd	sl, fp, [sp, #80]	@ 0x50
    d00e:	lsls	r3, r4, #23
    d010:	it	mi
    d012:	orrmi.w	fp, fp, #2147483648	@ 0x80000000
    d016:	bic.w	r3, fp, #2147483648	@ 0x80000000
    d01a:	lsrs	r3, r3, #20
    d01c:	lsls	r3, r3, #20
    d01e:	cmp	r3, #0
    d020:	bne.n	cf96 <_strtod_l+0x76>
    d022:	bl	ed74 <__errno>
    d026:	movs	r3, #34	@ 0x22
    d028:	str	r3, [r0, #0]
    d02a:	b.n	cf96 <_strtod_l+0x76>
    d02c:	ldrd	sl, r3, [sp, #80]	@ 0x50
    d030:	addw	r2, r2, #1075	@ 0x433
    d034:	bic.w	r3, r3, #1048576	@ 0x100000
    d038:	orr.w	fp, r3, r2, lsl #20
    d03c:	b.n	d00e <_strtod_l+0xee>
    d03e:	ldr.w	fp, [pc, #384]	@ d1c0 <_strtod_l+0x2a0>
    d042:	b.n	d00e <_strtod_l+0xee>
    d044:	mvn.w	fp, #2147483648	@ 0x80000000
    d048:	mov.w	sl, #4294967295
    d04c:	b.n	d00e <_strtod_l+0xee>
    d04e:	ldr	r3, [sp, #68]	@ 0x44
    d050:	adds	r2, r3, #1
    d052:	str	r2, [sp, #68]	@ 0x44
    d054:	ldrb	r3, [r3, #1]
    d056:	cmp	r3, #48	@ 0x30
    d058:	beq.n	d04e <_strtod_l+0x12e>
    d05a:	cmp	r3, #0
    d05c:	beq.n	cf96 <_strtod_l+0x76>
    d05e:	movs	r3, #1
    d060:	str	r3, [sp, #28]
    d062:	ldr	r3, [sp, #68]	@ 0x44
    d064:	str	r3, [sp, #40]	@ 0x28
    d066:	movs	r3, #0
    d068:	str	r3, [sp, #24]
    d06a:	mov	r9, r3
    d06c:	mov	r5, r3
    d06e:	movs	r2, #10
    d070:	ldr	r0, [sp, #68]	@ 0x44
    d072:	ldrb	r4, [r0, #0]
    d074:	sub.w	r3, r4, #48	@ 0x30
    d078:	uxtb	r1, r3
    d07a:	cmp	r1, #9
    d07c:	bls.n	d0d4 <_strtod_l+0x1b4>
    d07e:	ldr	r1, [pc, #316]	@ (d1bc <_strtod_l+0x29c>)
    d080:	movs	r2, #1
    d082:	bl	ec9a <strncmp>
    d086:	cbz	r0, d0f0 <_strtod_l+0x1d0>
    d088:	movs	r0, #0
    d08a:	mov	r2, r4
    d08c:	mov	r3, r5
    d08e:	mov	r7, r0
    d090:	mov	r1, r0
    d092:	cmp	r2, #101	@ 0x65
    d094:	beq.n	d09a <_strtod_l+0x17a>
    d096:	cmp	r2, #69	@ 0x45
    d098:	bne.n	d0cc <_strtod_l+0x1ac>
    d09a:	cbnz	r3, d0a4 <_strtod_l+0x184>
    d09c:	ldr	r3, [sp, #28]
    d09e:	orrs	r3, r0
    d0a0:	beq.n	cfce <_strtod_l+0xae>
    d0a2:	movs	r3, #0
    d0a4:	ldr.w	r8, [sp, #68]	@ 0x44
    d0a8:	add.w	r2, r8, #1
    d0ac:	str	r2, [sp, #68]	@ 0x44
    d0ae:	ldrb.w	r2, [r8, #1]
    d0b2:	cmp	r2, #43	@ 0x2b
    d0b4:	beq.n	d1a0 <_strtod_l+0x280>
    d0b6:	cmp	r2, #45	@ 0x2d
    d0b8:	beq.n	d1b0 <_strtod_l+0x290>
    d0ba:	mov.w	lr, #0
    d0be:	sub.w	r4, r2, #48	@ 0x30
    d0c2:	cmp	r4, #9
    d0c4:	bls.w	d1cc <_strtod_l+0x2ac>
    d0c8:	str.w	r8, [sp, #68]	@ 0x44
    d0cc:	movs	r4, #0
    d0ce:	b.n	d20c <_strtod_l+0x2ec>
    d0d0:	movs	r3, #0
    d0d2:	b.n	d060 <_strtod_l+0x140>
    d0d4:	cmp	r5, #8
    d0d6:	it	gt
    d0d8:	ldrgt	r1, [sp, #24]
    d0da:	add.w	r0, r0, #1
    d0de:	itet	gt
    d0e0:	mlagt	r3, r2, r1, r3
    d0e4:	mlale	r9, r2, r9, r3
    d0e8:	strgt	r3, [sp, #24]
    d0ea:	adds	r5, #1
    d0ec:	str	r0, [sp, #68]	@ 0x44
    d0ee:	b.n	d070 <_strtod_l+0x150>
    d0f0:	ldr	r3, [sp, #68]	@ 0x44
    d0f2:	adds	r2, r3, #1
    d0f4:	str	r2, [sp, #68]	@ 0x44
    d0f6:	ldrb	r2, [r3, #1]
    d0f8:	cbz	r5, d16a <_strtod_l+0x24a>
    d0fa:	mov	r7, r0
    d0fc:	mov	r3, r5
    d0fe:	sub.w	r1, r2, #48	@ 0x30
    d102:	cmp	r1, #9
    d104:	bls.n	d12c <_strtod_l+0x20c>
    d106:	movs	r1, #1
    d108:	b.n	d092 <_strtod_l+0x172>
    d10a:	ldr	r3, [sp, #68]	@ 0x44
    d10c:	adds	r2, r3, #1
    d10e:	str	r2, [sp, #68]	@ 0x44
    d110:	ldrb	r2, [r3, #1]
    d112:	adds	r0, #1
    d114:	cmp	r2, #48	@ 0x30
    d116:	beq.n	d10a <_strtod_l+0x1ea>
    d118:	sub.w	r3, r2, #49	@ 0x31
    d11c:	cmp	r3, #8
    d11e:	bhi.w	da16 <_strtod_l+0xaf6>
    d122:	ldr	r3, [sp, #68]	@ 0x44
    d124:	str	r3, [sp, #40]	@ 0x28
    d126:	mov	r7, r0
    d128:	movs	r0, #0
    d12a:	mov	r3, r0
    d12c:	subs	r2, #48	@ 0x30
    d12e:	add.w	r1, r0, #1
    d132:	beq.n	d15e <_strtod_l+0x23e>
    d134:	add	r7, r1
    d136:	mov	ip, r3
    d138:	mov.w	lr, #10
    d13c:	add.w	r4, ip, #1
    d140:	subs	r6, r4, r3
    d142:	cmp	r1, r6
    d144:	bgt.n	d16e <_strtod_l+0x24e>
    d146:	bic.w	r0, r0, r0, asr #31
    d14a:	adds	r1, r3, r0
    d14c:	cmp	r1, #8
    d14e:	add.w	r3, r3, #1
    d152:	add	r3, r0
    d154:	bgt.n	d18a <_strtod_l+0x26a>
    d156:	movs	r1, #10
    d158:	mla	r9, r1, r9, r2
    d15c:	movs	r1, #0
    d15e:	ldr	r2, [sp, #68]	@ 0x44
    d160:	adds	r0, r2, #1
    d162:	str	r0, [sp, #68]	@ 0x44
    d164:	ldrb	r2, [r2, #1]
    d166:	mov	r0, r1
    d168:	b.n	d0fe <_strtod_l+0x1de>
    d16a:	mov	r0, r5
    d16c:	b.n	d114 <_strtod_l+0x1f4>
    d16e:	cmp.w	ip, #8
    d172:	bgt.n	d17c <_strtod_l+0x25c>
    d174:	mul.w	r9, lr, r9
    d178:	mov	ip, r4
    d17a:	b.n	d13c <_strtod_l+0x21c>
    d17c:	cmp	r4, #16
    d17e:	ittt	le
    d180:	ldrle	r6, [sp, #24]
    d182:	mulle.w	r6, lr, r6
    d186:	strle	r6, [sp, #24]
    d188:	b.n	d178 <_strtod_l+0x258>
    d18a:	cmp	r1, #15
    d18c:	itttt	le
    d18e:	ldrle	r0, [sp, #24]
    d190:	movle	r1, #10
    d192:	mlale	r2, r1, r0, r2
    d196:	strle	r2, [sp, #24]
    d198:	b.n	d15c <_strtod_l+0x23c>
    d19a:	movs	r7, #0
    d19c:	movs	r1, #1
    d19e:	b.n	d09c <_strtod_l+0x17c>
    d1a0:	mov.w	lr, #0
    d1a4:	add.w	r2, r8, #2
    d1a8:	str	r2, [sp, #68]	@ 0x44
    d1aa:	ldrb.w	r2, [r8, #2]
    d1ae:	b.n	d0be <_strtod_l+0x19e>
    d1b0:	mov.w	lr, #1
    d1b4:	b.n	d1a4 <_strtod_l+0x284>
    d1b6:	nop
    d1b8:	.word	0x20000ad4
    d1bc:	.word	0x20001378
    d1c0:	.word	0x7ff00000
    d1c4:	ldr	r2, [sp, #68]	@ 0x44
    d1c6:	adds	r4, r2, #1
    d1c8:	str	r4, [sp, #68]	@ 0x44
    d1ca:	ldrb	r2, [r2, #1]
    d1cc:	cmp	r2, #48	@ 0x30
    d1ce:	beq.n	d1c4 <_strtod_l+0x2a4>
    d1d0:	sub.w	r4, r2, #49	@ 0x31
    d1d4:	cmp	r4, #8
    d1d6:	bhi.w	d0cc <_strtod_l+0x1ac>
    d1da:	sub.w	ip, r2, #48	@ 0x30
    d1de:	ldr	r2, [sp, #68]	@ 0x44
    d1e0:	str	r2, [sp, #36]	@ 0x24
    d1e2:	ldr	r2, [sp, #68]	@ 0x44
    d1e4:	adds	r4, r2, #1
    d1e6:	str	r4, [sp, #68]	@ 0x44
    d1e8:	ldrb	r2, [r2, #1]
    d1ea:	sub.w	r6, r2, #48	@ 0x30
    d1ee:	cmp	r6, #9
    d1f0:	bls.n	d262 <_strtod_l+0x342>
    d1f2:	ldr	r6, [sp, #36]	@ 0x24
    d1f4:	subs	r4, r4, r6
    d1f6:	cmp	r4, #8
    d1f8:	movw	r4, #19999	@ 0x4e1f
    d1fc:	bgt.n	d204 <_strtod_l+0x2e4>
    d1fe:	cmp	r4, ip
    d200:	it	ge
    d202:	movge	r4, ip
    d204:	cmp.w	lr, #0
    d208:	beq.n	d20c <_strtod_l+0x2ec>
    d20a:	negs	r4, r4
    d20c:	cmp	r3, #0
    d20e:	bne.n	d2ac <_strtod_l+0x38c>
    d210:	ldr	r3, [sp, #28]
    d212:	orrs	r3, r0
    d214:	bne.w	cf96 <_strtod_l+0x76>
    d218:	cmp	r1, #0
    d21a:	bne.w	cfce <_strtod_l+0xae>
    d21e:	cmp	r2, #105	@ 0x69
    d220:	beq.n	d272 <_strtod_l+0x352>
    d222:	bgt.n	d26e <_strtod_l+0x34e>
    d224:	cmp	r2, #73	@ 0x49
    d226:	beq.n	d272 <_strtod_l+0x352>
    d228:	cmp	r2, #78	@ 0x4e
    d22a:	bne.w	cfce <_strtod_l+0xae>
    d22e:	ldr	r1, [pc, #604]	@ (d48c <_strtod_l+0x56c>)
    d230:	add	r0, sp, #68	@ 0x44
    d232:	bl	10004 <__match>
    d236:	cmp	r0, #0
    d238:	beq.w	cfce <_strtod_l+0xae>
    d23c:	ldr	r3, [sp, #68]	@ 0x44
    d23e:	ldrb	r3, [r3, #0]
    d240:	cmp	r3, #40	@ 0x28
    d242:	bne.n	d2a0 <_strtod_l+0x380>
    d244:	ldr	r1, [pc, #584]	@ (d490 <_strtod_l+0x570>)
    d246:	add	r2, sp, #80	@ 0x50
    d248:	add	r0, sp, #68	@ 0x44
    d24a:	bl	1002c <__hexnan>
    d24e:	cmp	r0, #5
    d250:	bne.n	d2a0 <_strtod_l+0x380>
    d252:	ldr	r3, [sp, #84]	@ 0x54
    d254:	ldr.w	sl, [sp, #80]	@ 0x50
    d258:	orr.w	fp, r3, #2139095040	@ 0x7f800000
    d25c:	orr.w	fp, fp, #7340032	@ 0x700000
    d260:	b.n	cf96 <_strtod_l+0x76>
    d262:	movs	r4, #10
    d264:	mla	ip, r4, ip, r2
    d268:	sub.w	ip, ip, #48	@ 0x30
    d26c:	b.n	d1e2 <_strtod_l+0x2c2>
    d26e:	cmp	r2, #110	@ 0x6e
    d270:	b.n	d22a <_strtod_l+0x30a>
    d272:	ldr	r1, [pc, #544]	@ (d494 <_strtod_l+0x574>)
    d274:	add	r0, sp, #68	@ 0x44
    d276:	bl	10004 <__match>
    d27a:	cmp	r0, #0
    d27c:	beq.w	cfce <_strtod_l+0xae>
    d280:	ldr	r3, [sp, #68]	@ 0x44
    d282:	ldr	r1, [pc, #532]	@ (d498 <_strtod_l+0x578>)
    d284:	subs	r3, #1
    d286:	add	r0, sp, #68	@ 0x44
    d288:	str	r3, [sp, #68]	@ 0x44
    d28a:	bl	10004 <__match>
    d28e:	cbnz	r0, d296 <_strtod_l+0x376>
    d290:	ldr	r3, [sp, #68]	@ 0x44
    d292:	adds	r3, #1
    d294:	str	r3, [sp, #68]	@ 0x44
    d296:	ldr.w	fp, [pc, #532]	@ d4ac <_strtod_l+0x58c>
    d29a:	mov.w	sl, #0
    d29e:	b.n	cf96 <_strtod_l+0x76>
    d2a0:	ldr	r0, [pc, #504]	@ (d49c <_strtod_l+0x57c>)
    d2a2:	bl	ee90 <nan>
    d2a6:	vmov	sl, fp, d0
    d2aa:	b.n	cf96 <_strtod_l+0x76>
    d2ac:	vmov	s15, r9
    d2b0:	subs	r2, r4, r7
    d2b2:	vcvt.f64.u32	d7, s15
    d2b6:	cmp	r5, #0
    d2b8:	it	eq
    d2ba:	moveq	r5, r3
    d2bc:	cmp	r3, #16
    d2be:	str	r2, [sp, #36]	@ 0x24
    d2c0:	mov	r2, r3
    d2c2:	it	ge
    d2c4:	movge	r2, #16
    d2c6:	cmp	r3, #9
    d2c8:	vmov	sl, fp, d7
    d2cc:	bgt.n	d2fa <_strtod_l+0x3da>
    d2ce:	subs	r1, r4, r7
    d2d0:	cmp	r1, #0
    d2d2:	beq.w	cf96 <_strtod_l+0x76>
    d2d6:	sub.w	r1, r4, r7
    d2da:	ble.n	d3c2 <_strtod_l+0x4a2>
    d2dc:	cmp	r1, #22
    d2de:	bgt.n	d394 <_strtod_l+0x474>
    d2e0:	ldr	r3, [pc, #444]	@ (d4a0 <_strtod_l+0x580>)
    d2e2:	ldr	r2, [sp, #36]	@ 0x24
    d2e4:	add.w	r3, r3, r2, lsl #3
    d2e8:	vldr	d7, [r3]
    d2ec:	vmov	d6, sl, fp
    d2f0:	vmul.f64	d7, d7, d6
    d2f4:	vmov	sl, fp, d7
    d2f8:	b.n	cf96 <_strtod_l+0x76>
    d2fa:	ldr	r1, [pc, #420]	@ (d4a0 <_strtod_l+0x580>)
    d2fc:	vldr	s13, [sp, #24]
    d300:	add.w	r1, r1, r2, lsl #3
    d304:	vldr	d5, [r1, #-72]	@ 0xffffffb8
    d308:	cmp	r3, #15
    d30a:	vcvt.f64.u32	d6, s13
    d30e:	vfma.f64	d6, d7, d5
    d312:	vmov	sl, fp, d6
    d316:	ble.n	d2ce <_strtod_l+0x3ae>
    d318:	subs	r2, r3, r2
    d31a:	subs	r1, r4, r7
    d31c:	add	r2, r1
    d31e:	cmp	r2, #0
    d320:	ble.w	d44c <_strtod_l+0x52c>
    d324:	ands.w	r0, r2, #15
    d328:	beq.n	d340 <_strtod_l+0x420>
    d32a:	ldr	r1, [pc, #372]	@ (d4a0 <_strtod_l+0x580>)
    d32c:	add.w	r1, r1, r0, lsl #3
    d330:	vldr	d7, [r1]
    d334:	vmov	d6, sl, fp
    d338:	vmul.f64	d7, d7, d6
    d33c:	vmov	sl, fp, d7
    d340:	bics.w	r2, r2, #15
    d344:	beq.n	d42e <_strtod_l+0x50e>
    d346:	cmp.w	r2, #308	@ 0x134
    d34a:	ble.n	d3dc <_strtod_l+0x4bc>
    d34c:	movs	r4, #0
    d34e:	mov	r5, r4
    d350:	str	r4, [sp, #28]
    d352:	mov	r6, r4
    d354:	ldr	r2, [sp, #20]
    d356:	ldr.w	fp, [pc, #340]	@ d4ac <_strtod_l+0x58c>
    d35a:	movs	r3, #34	@ 0x22
    d35c:	str	r3, [r2, #0]
    d35e:	mov.w	sl, #0
    d362:	ldr	r3, [sp, #28]
    d364:	cmp	r3, #0
    d366:	beq.w	cf96 <_strtod_l+0x76>
    d36a:	ldr	r1, [sp, #72]	@ 0x48
    d36c:	ldr	r0, [sp, #20]
    d36e:	bl	10208 <_Bfree>
    d372:	ldr	r0, [sp, #20]
    d374:	mov	r1, r6
    d376:	bl	10208 <_Bfree>
    d37a:	ldr	r0, [sp, #20]
    d37c:	mov	r1, r5
    d37e:	bl	10208 <_Bfree>
    d382:	ldr	r1, [sp, #28]
    d384:	ldr	r0, [sp, #20]
    d386:	bl	10208 <_Bfree>
    d38a:	ldr	r0, [sp, #20]
    d38c:	mov	r1, r4
    d38e:	bl	10208 <_Bfree>
    d392:	b.n	cf96 <_strtod_l+0x76>
    d394:	rsb	r1, r3, #37	@ 0x25
    d398:	subs	r0, r4, r7
    d39a:	cmp	r1, r0
    d39c:	blt.n	d318 <_strtod_l+0x3f8>
    d39e:	ldr	r2, [pc, #256]	@ (d4a0 <_strtod_l+0x580>)
    d3a0:	rsb	r3, r3, #15
    d3a4:	add.w	r1, r2, r3, lsl #3
    d3a8:	vldr	d7, [r1]
    d3ac:	ldr	r1, [sp, #36]	@ 0x24
    d3ae:	vmov	d6, sl, fp
    d3b2:	subs	r3, r1, r3
    d3b4:	add.w	r2, r2, r3, lsl #3
    d3b8:	vmul.f64	d7, d7, d6
    d3bc:	vldr	d6, [r2]
    d3c0:	b.n	d2f0 <_strtod_l+0x3d0>
    d3c2:	adds	r1, #22
    d3c4:	blt.n	d318 <_strtod_l+0x3f8>
    d3c6:	ldr	r3, [pc, #216]	@ (d4a0 <_strtod_l+0x580>)
    d3c8:	subs	r4, r7, r4
    d3ca:	add.w	r4, r3, r4, lsl #3
    d3ce:	vldr	d7, [r4]
    d3d2:	vmov	d6, sl, fp
    d3d6:	vdiv.f64	d7, d6, d7
    d3da:	b.n	d2f4 <_strtod_l+0x3d4>
    d3dc:	movs	r0, #0
    d3de:	vmov	d7, sl, fp
    d3e2:	ldr	r6, [pc, #192]	@ (d4a4 <_strtod_l+0x584>)
    d3e4:	asrs	r2, r2, #4
    d3e6:	mov	r1, r0
    d3e8:	cmp	r2, #1
    d3ea:	bgt.n	d434 <_strtod_l+0x514>
    d3ec:	cbz	r0, d3f2 <_strtod_l+0x4d2>
    d3ee:	vmov	sl, fp, d7
    d3f2:	ldr	r2, [pc, #176]	@ (d4a4 <_strtod_l+0x584>)
    d3f4:	ldr	r0, [pc, #176]	@ (d4a8 <_strtod_l+0x588>)
    d3f6:	add.w	r2, r2, r1, lsl #3
    d3fa:	vldr	d7, [r2]
    d3fe:	sub.w	fp, fp, #55574528	@ 0x3500000
    d402:	vmov	d6, sl, fp
    d406:	ldr	r2, [pc, #164]	@ (d4ac <_strtod_l+0x58c>)
    d408:	vmul.f64	d7, d7, d6
    d40c:	vmov	r1, s15
    d410:	ands	r2, r1
    d412:	cmp	r2, r0
    d414:	vmov	sl, fp, d7
    d418:	bhi.n	d34c <_strtod_l+0x42c>
    d41a:	sub.w	r0, r0, #1048576	@ 0x100000
    d41e:	cmp	r2, r0
    d420:	itte	hi
    d422:	ldrhi.w	fp, [pc, #140]	@ d4b0 <_strtod_l+0x590>
    d426:	movhi.w	sl, #4294967295
    d42a:	addls.w	fp, r1, #55574528	@ 0x3500000
    d42e:	movs	r2, #0
    d430:	str	r2, [sp, #24]
    d432:	b.n	d522 <_strtod_l+0x602>
    d434:	tst.w	r2, #1
    d438:	beq.n	d444 <_strtod_l+0x524>
    d43a:	vldr	d6, [r6]
    d43e:	movs	r0, #1
    d440:	vmul.f64	d7, d7, d6
    d444:	adds	r1, #1
    d446:	asrs	r2, r2, #1
    d448:	adds	r6, #8
    d44a:	b.n	d3e8 <_strtod_l+0x4c8>
    d44c:	beq.n	d42e <_strtod_l+0x50e>
    d44e:	negs	r2, r2
    d450:	ands.w	r0, r2, #15
    d454:	beq.n	d46c <_strtod_l+0x54c>
    d456:	ldr	r1, [pc, #72]	@ (d4a0 <_strtod_l+0x580>)
    d458:	add.w	r1, r1, r0, lsl #3
    d45c:	vldr	d7, [r1]
    d460:	vmov	d6, sl, fp
    d464:	vdiv.f64	d7, d6, d7
    d468:	vmov	sl, fp, d7
    d46c:	asrs	r2, r2, #4
    d46e:	beq.n	d42e <_strtod_l+0x50e>
    d470:	cmp	r2, #31
    d472:	ble.n	d4b4 <_strtod_l+0x594>
    d474:	movs	r4, #0
    d476:	mov	r5, r4
    d478:	str	r4, [sp, #28]
    d47a:	mov	r6, r4
    d47c:	ldr	r2, [sp, #20]
    d47e:	movs	r3, #34	@ 0x22
    d480:	mov.w	sl, #0
    d484:	mov.w	fp, #0
    d488:	str	r3, [r2, #0]
    d48a:	b.n	d362 <_strtod_l+0x442>
    d48c:	.word	0x20001b6f
    d490:	.word	0x20000ae8
    d494:	.word	0x20001c5e
    d498:	.word	0x20001c9d
    d49c:	.word	0x20001052
    d4a0:	.word	0x20000328
    d4a4:	.word	0x20000300
    d4a8:	.word	0x7ca00000
    d4ac:	.word	0x7ff00000
    d4b0:	.word	0x7fefffff
    d4b4:	ands.w	r1, r2, #16
    d4b8:	it	ne
    d4ba:	movne	r1, #106	@ 0x6a
    d4bc:	str	r1, [sp, #24]
    d4be:	vmov	d7, sl, fp
    d4c2:	ldr	r1, [pc, #700]	@ (d780 <_strtod_l+0x860>)
    d4c4:	movs	r0, #0
    d4c6:	lsls	r6, r2, #31
    d4c8:	bpl.n	d4d4 <_strtod_l+0x5b4>
    d4ca:	vldr	d6, [r1]
    d4ce:	movs	r0, #1
    d4d0:	vmul.f64	d7, d7, d6
    d4d4:	asrs	r2, r2, #1
    d4d6:	add.w	r1, r1, #8
    d4da:	bne.n	d4c6 <_strtod_l+0x5a6>
    d4dc:	cbz	r0, d4e2 <_strtod_l+0x5c2>
    d4de:	vmov	sl, fp, d7
    d4e2:	ldr	r2, [sp, #24]
    d4e4:	cbz	r2, d514 <_strtod_l+0x5f4>
    d4e6:	ubfx	r1, fp, #20, #11
    d4ea:	rsb	r2, r1, #107	@ 0x6b
    d4ee:	cmp	r2, #0
    d4f0:	mov	r0, fp
    d4f2:	ble.n	d514 <_strtod_l+0x5f4>
    d4f4:	cmp	r2, #31
    d4f6:	ble.n	d5a4 <_strtod_l+0x684>
    d4f8:	cmp	r2, #52	@ 0x34
    d4fa:	ittt	le
    d4fc:	movle.w	r2, #4294967295
    d500:	rsble	r1, r1, #75	@ 0x4b
    d504:	lslle	r2, r1
    d506:	mov.w	sl, #0
    d50a:	ite	gt
    d50c:	movgt.w	fp, #57671680	@ 0x3700000
    d510:	andle.w	fp, r2, r0
    d514:	vmov	d7, sl, fp
    d518:	vcmp.f64	d7, #0.0
    d51c:	vmrs	APSR_nzcv, fpscr
    d520:	beq.n	d474 <_strtod_l+0x554>
    d522:	ldr	r1, [sp, #40]	@ 0x28
    d524:	ldr	r0, [sp, #20]
    d526:	str.w	r9, [sp]
    d52a:	mov	r2, r5
    d52c:	bl	102d8 <__s2b>
    d530:	str	r0, [sp, #28]
    d532:	cmp	r0, #0
    d534:	beq.w	d34c <_strtod_l+0x42c>
    d538:	ldr	r3, [sp, #36]	@ 0x24
    d53a:	subs	r7, r7, r4
    d53c:	cmp	r3, #0
    d53e:	ite	lt
    d540:	movlt	r3, r7
    d542:	movge	r3, #0
    d544:	str	r3, [sp, #40]	@ 0x28
    d546:	ldr	r3, [sp, #36]	@ 0x24
    d548:	vldr	d11, [pc, #548]	@ d770 <_strtod_l+0x850>
    d54c:	bic.w	r3, r3, r3, asr #31
    d550:	movs	r4, #0
    d552:	str	r3, [sp, #52]	@ 0x34
    d554:	mov	r5, r4
    d556:	ldr	r3, [sp, #28]
    d558:	ldr	r0, [sp, #20]
    d55a:	ldr	r1, [r3, #4]
    d55c:	bl	10188 <_Balloc>
    d560:	mov	r6, r0
    d562:	cmp	r0, #0
    d564:	beq.w	d354 <_strtod_l+0x434>
    d568:	ldr	r3, [sp, #28]
    d56a:	ldr	r2, [r3, #16]
    d56c:	vmov	d9, sl, fp
    d570:	adds	r2, #2
    d572:	add.w	r1, r3, #12
    d576:	lsls	r2, r2, #2
    d578:	adds	r0, #12
    d57a:	bl	a2f0 <memcpy>
    d57e:	vmov.f64	d0, d9
    d582:	ldr	r0, [sp, #20]
    d584:	add	r2, sp, #80	@ 0x50
    d586:	add	r1, sp, #76	@ 0x4c
    d588:	bl	10940 <__d2b>
    d58c:	str	r0, [sp, #72]	@ 0x48
    d58e:	cmp	r0, #0
    d590:	beq.w	d354 <_strtod_l+0x434>
    d594:	ldr	r0, [sp, #20]
    d596:	movs	r1, #1
    d598:	bl	10404 <__i2b>
    d59c:	mov	r5, r0
    d59e:	cbnz	r0, d5b2 <_strtod_l+0x692>
    d5a0:	movs	r5, #0
    d5a2:	b.n	d354 <_strtod_l+0x434>
    d5a4:	mov.w	r1, #4294967295
    d5a8:	lsl.w	r2, r1, r2
    d5ac:	and.w	sl, r2, sl
    d5b0:	b.n	d514 <_strtod_l+0x5f4>
    d5b2:	ldr	r7, [sp, #76]	@ 0x4c
    d5b4:	ldr	r2, [sp, #80]	@ 0x50
    d5b6:	cmp	r7, #0
    d5b8:	itete	ge
    d5ba:	ldrge	r3, [sp, #40]	@ 0x28
    d5bc:	ldrlt	r3, [sp, #52]	@ 0x34
    d5be:	ldrge.w	r8, [sp, #52]	@ 0x34
    d5c2:	ldrlt.w	r9, [sp, #40]	@ 0x28
    d5c6:	ite	ge
    d5c8:	addge.w	r9, r7, r3
    d5cc:	sublt.w	r8, r3, r7
    d5d0:	ldr	r3, [sp, #24]
    d5d2:	subs	r7, r7, r3
    d5d4:	add	r7, r2
    d5d6:	rsb	r3, r2, #54	@ 0x36
    d5da:	ldr	r2, [pc, #424]	@ (d784 <_strtod_l+0x864>)
    d5dc:	subs	r7, #1
    d5de:	cmp	r7, r2
    d5e0:	bge.n	d686 <_strtod_l+0x766>
    d5e2:	subs	r1, r2, r7
    d5e4:	cmp	r1, #31
    d5e6:	sub.w	r3, r3, r1
    d5ea:	mov.w	r2, #1
    d5ee:	bgt.n	d66e <_strtod_l+0x74e>
    d5f0:	lsls	r2, r1
    d5f2:	str	r2, [sp, #48]	@ 0x30
    d5f4:	movs	r2, #0
    d5f6:	str	r2, [sp, #44]	@ 0x2c
    d5f8:	add.w	r7, r9, r3
    d5fc:	add	r8, r3
    d5fe:	ldr	r3, [sp, #24]
    d600:	cmp	r9, r7
    d602:	add	r8, r3
    d604:	mov	r3, r9
    d606:	it	ge
    d608:	movge	r3, r7
    d60a:	cmp	r3, r8
    d60c:	it	ge
    d60e:	movge	r3, r8
    d610:	cmp	r3, #0
    d612:	ittt	gt
    d614:	subgt	r7, r7, r3
    d616:	subgt.w	r8, r8, r3
    d61a:	subgt.w	r9, r9, r3
    d61e:	ldr	r3, [sp, #40]	@ 0x28
    d620:	cmp	r3, #0
    d622:	ble.n	d652 <_strtod_l+0x732>
    d624:	mov	r1, r5
    d626:	ldr	r0, [sp, #20]
    d628:	mov	r2, r3
    d62a:	bl	10574 <__pow5mult>
    d62e:	mov	r5, r0
    d630:	cmp	r0, #0
    d632:	beq.n	d5a0 <_strtod_l+0x680>
    d634:	mov	r1, r0
    d636:	ldr	r2, [sp, #72]	@ 0x48
    d638:	ldr	r0, [sp, #20]
    d63a:	bl	10430 <__multiply>
    d63e:	str	r0, [sp, #60]	@ 0x3c
    d640:	cmp	r0, #0
    d642:	beq.w	d354 <_strtod_l+0x434>
    d646:	ldr	r1, [sp, #72]	@ 0x48
    d648:	ldr	r0, [sp, #20]
    d64a:	bl	10208 <_Bfree>
    d64e:	ldr	r3, [sp, #60]	@ 0x3c
    d650:	str	r3, [sp, #72]	@ 0x48
    d652:	cmp	r7, #0
    d654:	bgt.n	d68e <_strtod_l+0x76e>
    d656:	ldr	r3, [sp, #36]	@ 0x24
    d658:	cmp	r3, #0
    d65a:	ble.n	d6a0 <_strtod_l+0x780>
    d65c:	mov	r1, r6
    d65e:	ldr	r2, [sp, #52]	@ 0x34
    d660:	ldr	r0, [sp, #20]
    d662:	bl	10574 <__pow5mult>
    d666:	mov	r6, r0
    d668:	cbnz	r0, d6a0 <_strtod_l+0x780>
    d66a:	movs	r6, #0
    d66c:	b.n	d354 <_strtod_l+0x434>
    d66e:	rsb	r7, r7, #4278190080	@ 0xff000000
    d672:	add.w	r7, r7, #16711680	@ 0xff0000
    d676:	add.w	r7, r7, #64256	@ 0xfb00
    d67a:	adds	r7, #226	@ 0xe2
    d67c:	lsl.w	r1, r2, r7
    d680:	str	r1, [sp, #44]	@ 0x2c
    d682:	str	r2, [sp, #48]	@ 0x30
    d684:	b.n	d5f8 <_strtod_l+0x6d8>
    d686:	movs	r2, #0
    d688:	str	r2, [sp, #44]	@ 0x2c
    d68a:	movs	r2, #1
    d68c:	b.n	d682 <_strtod_l+0x762>
    d68e:	ldr	r1, [sp, #72]	@ 0x48
    d690:	ldr	r0, [sp, #20]
    d692:	mov	r2, r7
    d694:	bl	10628 <__lshift>
    d698:	str	r0, [sp, #72]	@ 0x48
    d69a:	cmp	r0, #0
    d69c:	bne.n	d656 <_strtod_l+0x736>
    d69e:	b.n	d354 <_strtod_l+0x434>
    d6a0:	cmp.w	r8, #0
    d6a4:	ble.n	d6b6 <_strtod_l+0x796>
    d6a6:	mov	r1, r6
    d6a8:	ldr	r0, [sp, #20]
    d6aa:	mov	r2, r8
    d6ac:	bl	10628 <__lshift>
    d6b0:	mov	r6, r0
    d6b2:	cmp	r0, #0
    d6b4:	beq.n	d66a <_strtod_l+0x74a>
    d6b6:	cmp.w	r9, #0
    d6ba:	ble.n	d6ce <_strtod_l+0x7ae>
    d6bc:	mov	r1, r5
    d6be:	ldr	r0, [sp, #20]
    d6c0:	mov	r2, r9
    d6c2:	bl	10628 <__lshift>
    d6c6:	mov	r5, r0
    d6c8:	cmp	r0, #0
    d6ca:	beq.w	d354 <_strtod_l+0x434>
    d6ce:	ldr	r1, [sp, #72]	@ 0x48
    d6d0:	ldr	r0, [sp, #20]
    d6d2:	mov	r2, r6
    d6d4:	bl	10738 <__mdiff>
    d6d8:	mov	r4, r0
    d6da:	cmp	r0, #0
    d6dc:	beq.w	d354 <_strtod_l+0x434>
    d6e0:	movs	r3, #0
    d6e2:	ldr.w	r8, [r0, #12]
    d6e6:	str	r3, [r0, #12]
    d6e8:	mov	r1, r5
    d6ea:	bl	10700 <__mcmp>
    d6ee:	cmp	r0, #0
    d6f0:	bge.n	d78c <_strtod_l+0x86c>
    d6f2:	orrs.w	r8, r8, sl
    d6f6:	bne.n	d7de <_strtod_l+0x8be>
    d6f8:	ubfx	r3, fp, #0, #20
    d6fc:	cmp	r3, #0
    d6fe:	bne.n	d7de <_strtod_l+0x8be>
    d700:	bic.w	r3, fp, #2147483648	@ 0x80000000
    d704:	lsrs	r3, r3, #20
    d706:	lsls	r3, r3, #20
    d708:	cmp.w	r3, #112197632	@ 0x6b00000
    d70c:	bls.n	d7de <_strtod_l+0x8be>
    d70e:	ldr	r3, [r4, #20]
    d710:	cbnz	r3, d718 <_strtod_l+0x7f8>
    d712:	ldr	r3, [r4, #16]
    d714:	cmp	r3, #1
    d716:	ble.n	d7de <_strtod_l+0x8be>
    d718:	mov	r1, r4
    d71a:	movs	r2, #1
    d71c:	ldr	r0, [sp, #20]
    d71e:	bl	10628 <__lshift>
    d722:	mov	r1, r5
    d724:	mov	r4, r0
    d726:	bl	10700 <__mcmp>
    d72a:	cmp	r0, #0
    d72c:	ble.n	d7de <_strtod_l+0x8be>
    d72e:	bic.w	r3, fp, #2147483648	@ 0x80000000
    d732:	ldr	r2, [sp, #24]
    d734:	lsrs	r3, r3, #20
    d736:	lsls	r3, r3, #20
    d738:	cmp	r2, #0
    d73a:	beq.n	d81a <_strtod_l+0x8fa>
    d73c:	cmp.w	r3, #112197632	@ 0x6b00000
    d740:	bhi.n	d81a <_strtod_l+0x8fa>
    d742:	cmp.w	r3, #57671680	@ 0x3700000
    d746:	bls.w	d47c <_strtod_l+0x55c>
    d74a:	vldr	d7, [pc, #44]	@ d778 <_strtod_l+0x858>
    d74e:	vmov	d6, sl, fp
    d752:	ldr	r3, [pc, #52]	@ (d788 <_strtod_l+0x868>)
    d754:	vmul.f64	d7, d6, d7
    d758:	vmov	r2, s15
    d75c:	ands	r3, r2
    d75e:	vmov	sl, fp, d7
    d762:	cmp	r3, #0
    d764:	bne.w	d36a <_strtod_l+0x44a>
    d768:	ldr	r2, [sp, #20]
    d76a:	movs	r3, #34	@ 0x22
    d76c:	str	r3, [r2, #0]
    d76e:	b.n	d36a <_strtod_l+0x44a>
    d770:	.word	0xffc00000
    d774:	.word	0x41dfffff
    d778:	.word	0x00000000
    d77c:	.word	0x39500000
    d780:	.word	0x200003f0
    d784:	.word	0xfffffc02
    d788:	.word	0x7ff00000
    d78c:	mov	r9, fp
    d78e:	bne.n	d84c <_strtod_l+0x92c>
    d790:	ubfx	r3, fp, #0, #20
    d794:	cmp.w	r8, #0
    d798:	beq.n	d7f0 <_strtod_l+0x8d0>
    d79a:	ldr	r2, [pc, #676]	@ (da40 <_strtod_l+0xb20>)
    d79c:	cmp	r3, r2
    d79e:	bne.n	d7f6 <_strtod_l+0x8d6>
    d7a0:	ldr	r3, [sp, #24]
    d7a2:	mov	r2, sl
    d7a4:	cbz	r3, d7e6 <_strtod_l+0x8c6>
    d7a6:	ldr	r3, [pc, #668]	@ (da44 <_strtod_l+0xb24>)
    d7a8:	and.w	r3, fp, r3
    d7ac:	cmp.w	r3, #111149056	@ 0x6a00000
    d7b0:	mov.w	r1, #4294967295
    d7b4:	bhi.n	d7ec <_strtod_l+0x8cc>
    d7b6:	lsrs	r3, r3, #20
    d7b8:	rsb	r3, r3, #107	@ 0x6b
    d7bc:	lsl.w	r3, r1, r3
    d7c0:	cmp	r2, r3
    d7c2:	bne.n	d7f6 <_strtod_l+0x8d6>
    d7c4:	ldr	r3, [pc, #640]	@ (da48 <_strtod_l+0xb28>)
    d7c6:	cmp	r9, r3
    d7c8:	bne.n	d7d0 <_strtod_l+0x8b0>
    d7ca:	adds	r2, #1
    d7cc:	beq.w	d354 <_strtod_l+0x434>
    d7d0:	ldr	r3, [pc, #624]	@ (da44 <_strtod_l+0xb24>)
    d7d2:	and.w	r3, r9, r3
    d7d6:	add.w	fp, r3, #1048576	@ 0x100000
    d7da:	mov.w	sl, #0
    d7de:	ldr	r3, [sp, #24]
    d7e0:	cmp	r3, #0
    d7e2:	bne.n	d74a <_strtod_l+0x82a>
    d7e4:	b.n	d36a <_strtod_l+0x44a>
    d7e6:	mov.w	r3, #4294967295
    d7ea:	b.n	d7c0 <_strtod_l+0x8a0>
    d7ec:	mov	r3, r1
    d7ee:	b.n	d7c0 <_strtod_l+0x8a0>
    d7f0:	orrs.w	r3, r3, sl
    d7f4:	beq.n	d72e <_strtod_l+0x80e>
    d7f6:	ldr	r3, [sp, #44]	@ 0x2c
    d7f8:	cbz	r3, d82c <_strtod_l+0x90c>
    d7fa:	tst.w	r3, r9
    d7fe:	beq.n	d7de <_strtod_l+0x8be>
    d800:	ldr	r2, [sp, #24]
    d802:	mov	r0, sl
    d804:	mov	r1, fp
    d806:	cmp.w	r8, #0
    d80a:	beq.n	d834 <_strtod_l+0x914>
    d80c:	bl	ceec <sulp>
    d810:	vadd.f64	d7, d9, d0
    d814:	vmov	sl, fp, d7
    d818:	b.n	d7de <_strtod_l+0x8be>
    d81a:	sub.w	r3, r3, #1048576	@ 0x100000
    d81e:	mvn.w	fp, r3, lsr #20
    d822:	mvn.w	fp, fp, lsl #20
    d826:	mov.w	sl, #4294967295
    d82a:	b.n	d7de <_strtod_l+0x8be>
    d82c:	ldr	r3, [sp, #48]	@ 0x30
    d82e:	tst.w	r3, sl
    d832:	b.n	d7fe <_strtod_l+0x8de>
    d834:	bl	ceec <sulp>
    d838:	vsub.f64	d0, d9, d0
    d83c:	vcmp.f64	d0, #0.0
    d840:	vmrs	APSR_nzcv, fpscr
    d844:	vmov	sl, fp, d0
    d848:	bne.n	d7de <_strtod_l+0x8be>
    d84a:	b.n	d47c <_strtod_l+0x55c>
    d84c:	mov	r1, r5
    d84e:	mov	r0, r4
    d850:	bl	109f0 <__ratio>
    d854:	vmov.f64	d7, #0	@ 0x40000000  2.0
    d858:	vcmpe.f64	d0, d7
    d85c:	vmrs	APSR_nzcv, fpscr
    d860:	bhi.n	d91e <_strtod_l+0x9fe>
    d862:	cmp.w	r8, #0
    d866:	bne.n	d932 <_strtod_l+0xa12>
    d868:	cmp.w	sl, #0
    d86c:	bne.n	d906 <_strtod_l+0x9e6>
    d86e:	ubfx	r3, fp, #0, #20
    d872:	vmov.f64	d8, #112	@ 0x3f800000  1.0
    d876:	cmp	r3, #0
    d878:	bne.n	d93c <_strtod_l+0xa1c>
    d87a:	vcmpe.f64	d0, d8
    d87e:	vmov.f64	d8, #96	@ 0x3f000000  0.5
    d882:	vmrs	APSR_nzcv, fpscr
    d886:	bmi.n	d88c <_strtod_l+0x96c>
    d888:	vmul.f64	d8, d0, d8
    d88c:	vneg.f64	d10, d8
    d890:	ldr	r0, [pc, #432]	@ (da44 <_strtod_l+0xb24>)
    d892:	ldr	r1, [pc, #440]	@ (da4c <_strtod_l+0xb2c>)
    d894:	and.w	r7, r9, r0
    d898:	cmp	r7, r1
    d89a:	vmov	r2, r3, d10
    d89e:	bne.n	d99c <_strtod_l+0xa7c>
    d8a0:	sub.w	fp, r9, #55574528	@ 0x3500000
    d8a4:	vmov	d12, sl, fp
    d8a8:	vmov.f64	d0, d12
    d8ac:	bl	10860 <__ulp>
    d8b0:	ldr	r0, [pc, #400]	@ (da44 <_strtod_l+0xb24>)
    d8b2:	vfma.f64	d12, d0, d10
    d8b6:	vmov	r3, s25
    d8ba:	ldr	r2, [pc, #404]	@ (da50 <_strtod_l+0xb30>)
    d8bc:	and.w	r1, r3, r0
    d8c0:	cmp	r1, r2
    d8c2:	vmov	sl, fp, d12
    d8c6:	bls.n	d942 <_strtod_l+0xa22>
    d8c8:	vmov	r2, s19
    d8cc:	ldr	r3, [pc, #376]	@ (da48 <_strtod_l+0xb28>)
    d8ce:	cmp	r2, r3
    d8d0:	bne.n	d8dc <_strtod_l+0x9bc>
    d8d2:	vmov	r3, s18
    d8d6:	adds	r3, #1
    d8d8:	beq.w	d354 <_strtod_l+0x434>
    d8dc:	ldr.w	fp, [pc, #360]	@ da48 <_strtod_l+0xb28>
    d8e0:	mov.w	sl, #4294967295
    d8e4:	ldr	r1, [sp, #72]	@ 0x48
    d8e6:	ldr	r0, [sp, #20]
    d8e8:	bl	10208 <_Bfree>
    d8ec:	ldr	r0, [sp, #20]
    d8ee:	mov	r1, r6
    d8f0:	bl	10208 <_Bfree>
    d8f4:	ldr	r0, [sp, #20]
    d8f6:	mov	r1, r5
    d8f8:	bl	10208 <_Bfree>
    d8fc:	ldr	r0, [sp, #20]
    d8fe:	mov	r1, r4
    d900:	bl	10208 <_Bfree>
    d904:	b.n	d556 <_strtod_l+0x636>
    d906:	cmp.w	sl, #1
    d90a:	bne.n	d914 <_strtod_l+0x9f4>
    d90c:	cmp.w	fp, #0
    d910:	beq.w	d47c <_strtod_l+0x55c>
    d914:	vmov.f64	d10, #240	@ 0xbf800000 -1.0
    d918:	vmov.f64	d8, #112	@ 0x3f800000  1.0
    d91c:	b.n	d890 <_strtod_l+0x970>
    d91e:	vmov.f64	d8, #96	@ 0x3f000000  0.5
    d922:	vmul.f64	d8, d0, d8
    d926:	cmp.w	r8, #0
    d92a:	beq.n	d88c <_strtod_l+0x96c>
    d92c:	vmov.f64	d10, d8
    d930:	b.n	d890 <_strtod_l+0x970>
    d932:	vmov.f64	d10, #112	@ 0x3f800000  1.0
    d936:	vmov.f64	d8, d10
    d93a:	b.n	d890 <_strtod_l+0x970>
    d93c:	vmov.f64	d10, #240	@ 0xbf800000 -1.0
    d940:	b.n	d890 <_strtod_l+0x970>
    d942:	add.w	fp, r3, #55574528	@ 0x3500000
    d946:	ldr	r3, [sp, #24]
    d948:	mov	r9, fp
    d94a:	cmp	r3, #0
    d94c:	bne.n	d8e4 <_strtod_l+0x9c4>
    d94e:	bic.w	r3, fp, #2147483648	@ 0x80000000
    d952:	lsrs	r3, r3, #20
    d954:	lsls	r3, r3, #20
    d956:	cmp	r7, r3
    d958:	bne.n	d8e4 <_strtod_l+0x9c4>
    d95a:	vmov	r0, r1, d8
    d95e:	bl	1205c <__aeabi_d2lz>
    d962:	bl	12000 <__aeabi_l2d>
    d966:	ubfx	r9, fp, #0, #20
    d96a:	vmov	d7, r0, r1
    d96e:	orr.w	r9, r9, sl
    d972:	orrs.w	r9, r9, r8
    d976:	vsub.f64	d8, d8, d7
    d97a:	beq.n	d9f6 <_strtod_l+0xad6>
    d97c:	vldr	d7, [pc, #168]	@ da28 <_strtod_l+0xb08>
    d980:	vcmpe.f64	d8, d7
    d984:	vmrs	APSR_nzcv, fpscr
    d988:	bmi.w	d36a <_strtod_l+0x44a>
    d98c:	vldr	d7, [pc, #160]	@ da30 <_strtod_l+0xb10>
    d990:	vcmpe.f64	d8, d7
    d994:	vmrs	APSR_nzcv, fpscr
    d998:	ble.n	d8e4 <_strtod_l+0x9c4>
    d99a:	b.n	d36a <_strtod_l+0x44a>
    d99c:	ldr	r1, [sp, #24]
    d99e:	cbz	r1, d9da <_strtod_l+0xaba>
    d9a0:	cmp.w	r7, #111149056	@ 0x6a00000
    d9a4:	bhi.n	d9da <_strtod_l+0xaba>
    d9a6:	vcmpe.f64	d8, d11
    d9aa:	vmrs	APSR_nzcv, fpscr
    d9ae:	bhi.n	d9d4 <_strtod_l+0xab4>
    d9b0:	vcvt.u32.f64	s16, d8
    d9b4:	vmov	r3, s16
    d9b8:	cmp	r3, #1
    d9ba:	it	cc
    d9bc:	movcc	r3, #1
    d9be:	vmov	s16, r3
    d9c2:	vcvt.f64.u32	d8, s16
    d9c6:	cmp.w	r8, #0
    d9ca:	bne.n	d9f0 <_strtod_l+0xad0>
    d9cc:	vneg.f64	d7, d8
    d9d0:	vmov	r2, r3, d7
    d9d4:	add.w	r1, r3, #112197632	@ 0x6b00000
    d9d8:	subs	r3, r1, r7
    d9da:	vmov.f64	d0, d9
    d9de:	vmov	d10, r2, r3
    d9e2:	bl	10860 <__ulp>
    d9e6:	vfma.f64	d9, d10, d0
    d9ea:	vmov	sl, fp, d9
    d9ee:	b.n	d946 <_strtod_l+0xa26>
    d9f0:	vmov.f64	d7, d8
    d9f4:	b.n	d9d0 <_strtod_l+0xab0>
    d9f6:	vldr	d7, [pc, #64]	@ da38 <_strtod_l+0xb18>
    d9fa:	vcmpe.f64	d8, d7
    d9fe:	vmrs	APSR_nzcv, fpscr
    da02:	bpl.w	d8e4 <_strtod_l+0x9c4>
    da06:	b.n	d36a <_strtod_l+0x44a>
    da08:	movs	r3, #0
    da0a:	str	r3, [sp, #32]
    da0c:	ldr	r2, [sp, #56]	@ 0x38
    da0e:	ldr	r3, [sp, #68]	@ 0x44
    da10:	str	r3, [r2, #0]
    da12:	b.w	cf9e <_strtod_l+0x7e>
    da16:	cmp	r2, #101	@ 0x65
    da18:	beq.w	d19a <_strtod_l+0x27a>
    da1c:	cmp	r2, #69	@ 0x45
    da1e:	beq.w	d19a <_strtod_l+0x27a>
    da22:	movs	r1, #1
    da24:	b.w	d210 <_strtod_l+0x2f0>
    da28:	.word	0x94a03595
    da2c:	.word	0x3fdfffff
    da30:	.word	0x35afe535
    da34:	.word	0x3fe00000
    da38:	.word	0x94a03595
    da3c:	.word	0x3fcfffff
    da40:	.word	0x000fffff
    da44:	.word	0x7ff00000
    da48:	.word	0x7fefffff
    da4c:	.word	0x7fe00000
    da50:	.word	0x7c9fffff

0000da54 <_strtod_r>:
    da54:	ldr	r3, [pc, #4]	@ (da5c <_strtod_r+0x8>)
    da56:	b.w	cf20 <_strtod_l>
    da5a:	nop
    da5c:	.word	0x20002234

0000da60 <_strtol_l.isra.0>:
    da60:	cmp	r3, #36	@ 0x24
    da62:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da66:	mov	lr, r0
    da68:	mov	r8, r2
    da6a:	bhi.n	da70 <_strtol_l.isra.0+0x10>
    da6c:	cmp	r3, #1
    da6e:	bne.n	da7e <_strtol_l.isra.0+0x1e>
    da70:	bl	ed74 <__errno>
    da74:	movs	r3, #22
    da76:	str	r3, [r0, #0]
    da78:	movs	r0, #0
    da7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da7e:	ldr	r0, [pc, #208]	@ (db50 <_strtol_l.isra.0+0xf0>)
    da80:	mov	r5, r1
    da82:	mov	r2, r5
    da84:	ldrb.w	r4, [r5], #1
    da88:	ldrb	r6, [r0, r4]
    da8a:	ands.w	r6, r6, #8
    da8e:	bne.n	da82 <_strtol_l.isra.0+0x22>
    da90:	cmp	r4, #45	@ 0x2d
    da92:	bne.n	dab6 <_strtol_l.isra.0+0x56>
    da94:	ldrb	r4, [r5, #0]
    da96:	movs	r6, #1
    da98:	adds	r5, r2, #2
    da9a:	bics.w	r2, r3, #16
    da9e:	bne.n	dacc <_strtol_l.isra.0+0x6c>
    daa0:	cmp	r4, #48	@ 0x30
    daa2:	bne.n	dac0 <_strtol_l.isra.0+0x60>
    daa4:	ldrb	r2, [r5, #0]
    daa6:	and.w	r2, r2, #223	@ 0xdf
    daaa:	cmp	r2, #88	@ 0x58
    daac:	bne.n	dac0 <_strtol_l.isra.0+0x60>
    daae:	ldrb	r4, [r5, #1]
    dab0:	adds	r5, #2
    dab2:	movs	r3, #16
    dab4:	b.n	dacc <_strtol_l.isra.0+0x6c>
    dab6:	cmp	r4, #43	@ 0x2b
    dab8:	itt	eq
    daba:	ldrbeq	r4, [r5, #0]
    dabc:	addeq	r5, r2, #2
    dabe:	b.n	da9a <_strtol_l.isra.0+0x3a>
    dac0:	cmp	r3, #0
    dac2:	bne.n	dab2 <_strtol_l.isra.0+0x52>
    dac4:	cmp	r4, #48	@ 0x30
    dac6:	ite	ne
    dac8:	movne	r3, #10
    daca:	moveq	r3, #8
    dacc:	add.w	ip, r6, #2147483648	@ 0x80000000
    dad0:	add.w	ip, ip, #4294967295
    dad4:	movs	r2, #0
    dad6:	udiv	r9, ip, r3
    dada:	mov	r0, r2
    dadc:	mls	sl, r3, r9, ip
    dae0:	sub.w	r7, r4, #48	@ 0x30
    dae4:	cmp	r7, #9
    dae6:	bhi.n	db08 <_strtol_l.isra.0+0xa8>
    dae8:	mov	r4, r7
    daea:	cmp	r3, r4
    daec:	ble.n	db26 <_strtol_l.isra.0+0xc6>
    daee:	adds	r7, r2, #1
    daf0:	beq.n	db02 <_strtol_l.isra.0+0xa2>
    daf2:	cmp	r9, r0
    daf4:	bcc.n	db20 <_strtol_l.isra.0+0xc0>
    daf6:	bne.n	dafc <_strtol_l.isra.0+0x9c>
    daf8:	cmp	sl, r4
    dafa:	blt.n	db20 <_strtol_l.isra.0+0xc0>
    dafc:	mla	r0, r0, r3, r4
    db00:	movs	r2, #1
    db02:	ldrb.w	r4, [r5], #1
    db06:	b.n	dae0 <_strtol_l.isra.0+0x80>
    db08:	sub.w	r7, r4, #65	@ 0x41
    db0c:	cmp	r7, #25
    db0e:	bhi.n	db14 <_strtol_l.isra.0+0xb4>
    db10:	subs	r4, #55	@ 0x37
    db12:	b.n	daea <_strtol_l.isra.0+0x8a>
    db14:	sub.w	r7, r4, #97	@ 0x61
    db18:	cmp	r7, #25
    db1a:	bhi.n	db26 <_strtol_l.isra.0+0xc6>
    db1c:	subs	r4, #87	@ 0x57
    db1e:	b.n	daea <_strtol_l.isra.0+0x8a>
    db20:	mov.w	r2, #4294967295
    db24:	b.n	db02 <_strtol_l.isra.0+0xa2>
    db26:	adds	r3, r2, #1
    db28:	bne.n	db3c <_strtol_l.isra.0+0xdc>
    db2a:	movs	r3, #34	@ 0x22
    db2c:	str.w	r3, [lr]
    db30:	mov	r0, ip
    db32:	cmp.w	r8, #0
    db36:	beq.n	da7a <_strtol_l.isra.0+0x1a>
    db38:	subs	r1, r5, #1
    db3a:	b.n	db4a <_strtol_l.isra.0+0xea>
    db3c:	cbz	r6, db40 <_strtol_l.isra.0+0xe0>
    db3e:	negs	r0, r0
    db40:	cmp.w	r8, #0
    db44:	beq.n	da7a <_strtol_l.isra.0+0x1a>
    db46:	cmp	r2, #0
    db48:	bne.n	db38 <_strtol_l.isra.0+0xd8>
    db4a:	str.w	r1, [r8]
    db4e:	b.n	da7a <_strtol_l.isra.0+0x1a>
    db50:	.word	0x20000dfd

0000db54 <_strtol_r>:
    db54:	b.w	da60 <_strtol_l.isra.0>

0000db58 <__cxa_atexit>:
    db58:	push	{r4, lr}
    db5a:	mov	r4, r0
    db5c:	ldr	r0, [pc, #16]	@ (db70 <__cxa_atexit+0x18>)
    db5e:	mov	r3, r2
    db60:	cbz	r0, db6c <__cxa_atexit+0x14>
    db62:	mov	r2, r1
    db64:	movs	r0, #2
    db66:	mov	r1, r4
    db68:	nop.w
    db6c:	pop	{r4, pc}
    db6e:	nop
    db70:	.word	0x00000000

0000db74 <fcvt>:
    db74:	movs	r3, #0
    db76:	b.w	10b00 <fcvtbuf>

0000db7a <fcvtf>:
    db7a:	vcvt.f64.f32	d0, s0
    db7e:	b.w	db74 <fcvt>

0000db82 <__cvt>:
    db82:	push	{r4, r5, r6, r7, lr}
    db84:	vpush	{d8}
    db88:	vmov.f64	d8, d0
    db8c:	sub	sp, #20
    db8e:	mov	r7, r2
    db90:	ldr	r5, [sp, #52]	@ 0x34
    db92:	ldr	r6, [sp, #48]	@ 0x30
    db94:	vmov	r2, s17
    db98:	bic.w	r5, r5, #32
    db9c:	cmp	r2, #0
    db9e:	itet	lt
    dba0:	movlt	r2, #45	@ 0x2d
    dba2:	movge	r2, #0
    dba4:	vneglt.f64	d8, d0
    dba8:	cmp	r5, #70	@ 0x46
    dbaa:	mov	r4, r1
    dbac:	strb	r2, [r3, #0]
    dbae:	beq.n	dbba <__cvt+0x38>
    dbb0:	cmp	r5, #69	@ 0x45
    dbb2:	bne.n	dbb6 <__cvt+0x34>
    dbb4:	adds	r4, #1
    dbb6:	movs	r1, #2
    dbb8:	b.n	dbbc <__cvt+0x3a>
    dbba:	movs	r1, #3
    dbbc:	add	r3, sp, #12
    dbbe:	str	r3, [sp, #4]
    dbc0:	add	r3, sp, #8
    dbc2:	str	r3, [sp, #0]
    dbc4:	mov	r2, r4
    dbc6:	mov	r3, r6
    dbc8:	vmov.f64	d0, d8
    dbcc:	bl	efc0 <_dtoa_r>
    dbd0:	cmp	r5, #71	@ 0x47
    dbd2:	bne.n	dbfe <__cvt+0x7c>
    dbd4:	lsls	r3, r7, #31
    dbd6:	bpl.n	dbee <__cvt+0x6c>
    dbd8:	adds	r2, r0, r4
    dbda:	vcmp.f64	d8, #0.0
    dbde:	vmrs	APSR_nzcv, fpscr
    dbe2:	it	eq
    dbe4:	streq	r2, [sp, #12]
    dbe6:	movs	r1, #48	@ 0x30
    dbe8:	ldr	r3, [sp, #12]
    dbea:	cmp	r3, r2
    dbec:	bcc.n	dc22 <__cvt+0xa0>
    dbee:	ldr	r3, [sp, #12]
    dbf0:	ldr	r2, [sp, #56]	@ 0x38
    dbf2:	subs	r3, r3, r0
    dbf4:	str	r3, [r2, #0]
    dbf6:	add	sp, #20
    dbf8:	vpop	{d8}
    dbfc:	pop	{r4, r5, r6, r7, pc}
    dbfe:	cmp	r5, #70	@ 0x46
    dc00:	add.w	r2, r0, r4
    dc04:	bne.n	dbda <__cvt+0x58>
    dc06:	ldrb	r3, [r0, #0]
    dc08:	cmp	r3, #48	@ 0x30
    dc0a:	bne.n	dc1c <__cvt+0x9a>
    dc0c:	vcmp.f64	d8, #0.0
    dc10:	vmrs	APSR_nzcv, fpscr
    dc14:	itt	ne
    dc16:	rsbne	r4, r4, #1
    dc1a:	strne	r4, [r6, #0]
    dc1c:	ldr	r3, [r6, #0]
    dc1e:	add	r2, r3
    dc20:	b.n	dbda <__cvt+0x58>
    dc22:	adds	r4, r3, #1
    dc24:	str	r4, [sp, #12]
    dc26:	strb	r1, [r3, #0]
    dc28:	b.n	dbe8 <__cvt+0x66>

0000dc2a <__exponent>:
    dc2a:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dc2c:	cmp	r1, #0
    dc2e:	itte	lt
    dc30:	neglt	r1, r1
    dc32:	movlt	r3, #45	@ 0x2d
    dc34:	movge	r3, #43	@ 0x2b
    dc36:	cmp	r1, #9
    dc38:	strb	r2, [r0, #0]
    dc3a:	strb	r3, [r0, #1]
    dc3c:	ble.n	dc92 <__exponent+0x68>
    dc3e:	add.w	r3, sp, #7
    dc42:	mov	r5, r3
    dc44:	movs	r7, #10
    dc46:	mov	r2, r3
    dc48:	udiv	r6, r1, r7
    dc4c:	mls	r4, r7, r6, r1
    dc50:	adds	r4, #48	@ 0x30
    dc52:	strb.w	r4, [r2, #-1]
    dc56:	mov	r4, r1
    dc58:	cmp	r4, #99	@ 0x63
    dc5a:	add.w	r3, r3, #4294967295
    dc5e:	mov	r1, r6
    dc60:	bgt.n	dc46 <__exponent+0x1c>
    dc62:	adds	r1, #48	@ 0x30
    dc64:	subs	r4, r2, #2
    dc66:	strb.w	r1, [r3, #-1]
    dc6a:	adds	r1, r0, #1
    dc6c:	mov	r3, r4
    dc6e:	cmp	r3, r5
    dc70:	bcc.n	dc88 <__exponent+0x5e>
    dc72:	add.w	r3, sp, #9
    dc76:	subs	r3, r3, r2
    dc78:	cmp	r4, r5
    dc7a:	it	hi
    dc7c:	movhi	r3, #0
    dc7e:	adds	r3, #2
    dc80:	add	r3, r0
    dc82:	subs	r0, r3, r0
    dc84:	add	sp, #12
    dc86:	pop	{r4, r5, r6, r7, pc}
    dc88:	ldrb.w	r6, [r3], #1
    dc8c:	strb.w	r6, [r1, #1]!
    dc90:	b.n	dc6e <__exponent+0x44>
    dc92:	movs	r3, #48	@ 0x30
    dc94:	adds	r1, #48	@ 0x30
    dc96:	strb	r3, [r0, #2]
    dc98:	strb	r1, [r0, #3]
    dc9a:	adds	r3, r0, #4
    dc9c:	b.n	dc82 <__exponent+0x58>
	...

0000dca0 <_printf_float>:
    dca0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dca4:	sub	sp, #52	@ 0x34
    dca6:	mov	r4, r1
    dca8:	ldr.w	r8, [sp, #88]	@ 0x58
    dcac:	mov	r6, r2
    dcae:	mov	r7, r3
    dcb0:	mov	r5, r0
    dcb2:	bl	ecc0 <_localeconv_r>
    dcb6:	ldr.w	fp, [r0]
    dcba:	mov	r0, fp
    dcbc:	bl	ee80 <strlen>
    dcc0:	movs	r3, #0
    dcc2:	str	r3, [sp, #40]	@ 0x28
    dcc4:	ldr.w	r3, [r8]
    dcc8:	ldrb.w	r9, [r4, #24]
    dccc:	ldr	r2, [r4, #0]
    dcce:	str	r0, [sp, #20]
    dcd0:	adds	r3, #7
    dcd2:	bic.w	r3, r3, #7
    dcd6:	add.w	r1, r3, #8
    dcda:	str.w	r1, [r8]
    dcde:	vldr	d0, [r3]
    dce2:	vldr	d6, [pc, #604]	@ df40 <_printf_float+0x2a0>
    dce6:	vabs.f64	d7, d0
    dcea:	vcmp.f64	d7, d6
    dcee:	vmrs	APSR_nzcv, fpscr
    dcf2:	vstr	d0, [r4, #72]	@ 0x48
    dcf6:	ble.n	dd42 <_printf_float+0xa2>
    dcf8:	vcmpe.f64	d0, #0.0
    dcfc:	vmrs	APSR_nzcv, fpscr
    dd00:	bpl.n	dd08 <_printf_float+0x68>
    dd02:	movs	r3, #45	@ 0x2d
    dd04:	strb.w	r3, [r4, #67]	@ 0x43
    dd08:	ldr	r1, [pc, #572]	@ (df48 <_printf_float+0x2a8>)
    dd0a:	ldr	r3, [pc, #576]	@ (df4c <_printf_float+0x2ac>)
    dd0c:	cmp.w	r9, #71	@ 0x47
    dd10:	ite	hi
    dd12:	movhi	r8, r1
    dd14:	movls	r8, r3
    dd16:	bic.w	r2, r2, #4
    dd1a:	movs	r3, #3
    dd1c:	str	r3, [r4, #16]
    dd1e:	str	r2, [r4, #0]
    dd20:	mov.w	sl, #0
    dd24:	str	r7, [sp, #0]
    dd26:	mov	r3, r6
    dd28:	add	r2, sp, #44	@ 0x2c
    dd2a:	mov	r1, r4
    dd2c:	mov	r0, r5
    dd2e:	bl	e0d4 <_printf_common>
    dd32:	adds	r0, #1
    dd34:	bne.w	de4a <_printf_float+0x1aa>
    dd38:	mov.w	r0, #4294967295
    dd3c:	add	sp, #52	@ 0x34
    dd3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd42:	vcmp.f64	d0, d0
    dd46:	vmrs	APSR_nzcv, fpscr
    dd4a:	bvc.n	dd60 <_printf_float+0xc0>
    dd4c:	vmov	r3, s1
    dd50:	cmp	r3, #0
    dd52:	itt	lt
    dd54:	movlt	r3, #45	@ 0x2d
    dd56:	strblt.w	r3, [r4, #67]	@ 0x43
    dd5a:	ldr	r1, [pc, #500]	@ (df50 <_printf_float+0x2b0>)
    dd5c:	ldr	r3, [pc, #500]	@ (df54 <_printf_float+0x2b4>)
    dd5e:	b.n	dd0c <_printf_float+0x6c>
    dd60:	ldr	r3, [r4, #4]
    dd62:	adds	r1, r3, #1
    dd64:	and.w	sl, r9, #223	@ 0xdf
    dd68:	bne.n	ddde <_printf_float+0x13e>
    dd6a:	movs	r3, #6
    dd6c:	str	r3, [r4, #4]
    dd6e:	orr.w	r2, r2, #1024	@ 0x400
    dd72:	movs	r3, #0
    dd74:	str	r2, [r4, #0]
    dd76:	str	r3, [sp, #12]
    dd78:	add	r3, sp, #40	@ 0x28
    dd7a:	strd	r9, r3, [sp, #4]
    dd7e:	add	r3, sp, #36	@ 0x24
    dd80:	str	r3, [sp, #0]
    dd82:	ldr	r1, [r4, #4]
    dd84:	add.w	r3, sp, #35	@ 0x23
    dd88:	mov	r0, r5
    dd8a:	bl	db82 <__cvt>
    dd8e:	cmp.w	sl, #71	@ 0x47
    dd92:	ldr	r1, [sp, #36]	@ 0x24
    dd94:	mov	r8, r0
    dd96:	bne.n	ddec <_printf_float+0x14c>
    dd98:	adds	r0, r1, #3
    dd9a:	blt.n	dda2 <_printf_float+0x102>
    dd9c:	ldr	r3, [r4, #4]
    dd9e:	cmp	r1, r3
    dda0:	ble.n	de26 <_printf_float+0x186>
    dda2:	sub.w	r9, r9, #2
    dda6:	uxtb.w	r9, r9
    ddaa:	subs	r1, #1
    ddac:	mov	r2, r9
    ddae:	add.w	r0, r4, #80	@ 0x50
    ddb2:	str	r1, [sp, #36]	@ 0x24
    ddb4:	bl	dc2a <__exponent>
    ddb8:	ldr	r2, [sp, #40]	@ 0x28
    ddba:	adds	r3, r2, r0
    ddbc:	cmp	r2, #1
    ddbe:	mov	sl, r0
    ddc0:	str	r3, [r4, #16]
    ddc2:	bgt.n	ddca <_printf_float+0x12a>
    ddc4:	ldr	r2, [r4, #0]
    ddc6:	lsls	r2, r2, #31
    ddc8:	bpl.n	ddce <_printf_float+0x12e>
    ddca:	adds	r3, #1
    ddcc:	str	r3, [r4, #16]
    ddce:	ldrb.w	r3, [sp, #35]	@ 0x23
    ddd2:	cmp	r3, #0
    ddd4:	beq.n	dd24 <_printf_float+0x84>
    ddd6:	movs	r3, #45	@ 0x2d
    ddd8:	strb.w	r3, [r4, #67]	@ 0x43
    dddc:	b.n	dd24 <_printf_float+0x84>
    ddde:	cmp.w	sl, #71	@ 0x47
    dde2:	bne.n	dd6e <_printf_float+0xce>
    dde4:	cmp	r3, #0
    dde6:	bne.n	dd6e <_printf_float+0xce>
    dde8:	movs	r3, #1
    ddea:	b.n	dd6c <_printf_float+0xcc>
    ddec:	cmp.w	r9, #101	@ 0x65
    ddf0:	bls.n	ddaa <_printf_float+0x10a>
    ddf2:	cmp.w	r9, #102	@ 0x66
    ddf6:	bne.n	de2a <_printf_float+0x18a>
    ddf8:	cmp	r1, #0
    ddfa:	ldr	r3, [r4, #4]
    ddfc:	ble.n	de16 <_printf_float+0x176>
    ddfe:	str	r1, [r4, #16]
    de00:	cbnz	r3, de08 <_printf_float+0x168>
    de02:	ldr	r2, [r4, #0]
    de04:	lsls	r0, r2, #31
    de06:	bpl.n	de0e <_printf_float+0x16e>
    de08:	adds	r3, #1
    de0a:	add	r3, r1
    de0c:	str	r3, [r4, #16]
    de0e:	str	r1, [r4, #88]	@ 0x58
    de10:	mov.w	sl, #0
    de14:	b.n	ddce <_printf_float+0x12e>
    de16:	cbnz	r3, de1e <_printf_float+0x17e>
    de18:	ldr	r2, [r4, #0]
    de1a:	lsls	r2, r2, #31
    de1c:	bpl.n	de22 <_printf_float+0x182>
    de1e:	adds	r3, #2
    de20:	b.n	de0c <_printf_float+0x16c>
    de22:	movs	r3, #1
    de24:	b.n	de0c <_printf_float+0x16c>
    de26:	mov.w	r9, #103	@ 0x67
    de2a:	ldr	r3, [sp, #40]	@ 0x28
    de2c:	cmp	r1, r3
    de2e:	blt.n	de3c <_printf_float+0x19c>
    de30:	ldr	r3, [r4, #0]
    de32:	str	r1, [r4, #16]
    de34:	lsls	r0, r3, #31
    de36:	bpl.n	de0e <_printf_float+0x16e>
    de38:	adds	r3, r1, #1
    de3a:	b.n	de0c <_printf_float+0x16c>
    de3c:	cmp	r1, #0
    de3e:	ite	le
    de40:	rsble	r2, r1, #2
    de44:	movgt	r2, #1
    de46:	add	r3, r2
    de48:	b.n	de0c <_printf_float+0x16c>
    de4a:	ldr	r3, [r4, #0]
    de4c:	lsls	r2, r3, #21
    de4e:	bmi.n	de60 <_printf_float+0x1c0>
    de50:	ldr	r3, [r4, #16]
    de52:	mov	r2, r8
    de54:	mov	r1, r6
    de56:	mov	r0, r5
    de58:	blx	r7
    de5a:	adds	r0, #1
    de5c:	bne.n	deb4 <_printf_float+0x214>
    de5e:	b.n	dd38 <_printf_float+0x98>
    de60:	cmp.w	r9, #101	@ 0x65
    de64:	bls.w	e028 <_printf_float+0x388>
    de68:	vldr	d7, [r4, #72]	@ 0x48
    de6c:	vcmp.f64	d7, #0.0
    de70:	vmrs	APSR_nzcv, fpscr
    de74:	bne.n	dede <_printf_float+0x23e>
    de76:	ldr	r2, [pc, #224]	@ (df58 <_printf_float+0x2b8>)
    de78:	movs	r3, #1
    de7a:	mov	r1, r6
    de7c:	mov	r0, r5
    de7e:	blx	r7
    de80:	adds	r0, #1
    de82:	beq.w	dd38 <_printf_float+0x98>
    de86:	ldrd	r3, r8, [sp, #36]	@ 0x24
    de8a:	cmp	r3, r8
    de8c:	blt.n	de94 <_printf_float+0x1f4>
    de8e:	ldr	r3, [r4, #0]
    de90:	lsls	r0, r3, #31
    de92:	bpl.n	deb4 <_printf_float+0x214>
    de94:	ldr	r3, [sp, #20]
    de96:	mov	r2, fp
    de98:	mov	r1, r6
    de9a:	mov	r0, r5
    de9c:	blx	r7
    de9e:	adds	r0, #1
    dea0:	beq.w	dd38 <_printf_float+0x98>
    dea4:	mov.w	r9, #0
    dea8:	add.w	r8, r8, #4294967295
    deac:	add.w	sl, r4, #26
    deb0:	cmp	r8, r9
    deb2:	bgt.n	dec8 <_printf_float+0x228>
    deb4:	ldr	r3, [r4, #0]
    deb6:	lsls	r3, r3, #30
    deb8:	bmi.w	e0ca <_printf_float+0x42a>
    debc:	ldr	r0, [r4, #12]
    debe:	ldr	r3, [sp, #44]	@ 0x2c
    dec0:	cmp	r0, r3
    dec2:	it	lt
    dec4:	movlt	r0, r3
    dec6:	b.n	dd3c <_printf_float+0x9c>
    dec8:	movs	r3, #1
    deca:	mov	r2, sl
    decc:	mov	r1, r6
    dece:	mov	r0, r5
    ded0:	blx	r7
    ded2:	adds	r0, #1
    ded4:	beq.w	dd38 <_printf_float+0x98>
    ded8:	add.w	r9, r9, #1
    dedc:	b.n	deb0 <_printf_float+0x210>
    dede:	ldr	r3, [sp, #36]	@ 0x24
    dee0:	cmp	r3, #0
    dee2:	bgt.n	df5c <_printf_float+0x2bc>
    dee4:	ldr	r2, [pc, #112]	@ (df58 <_printf_float+0x2b8>)
    dee6:	movs	r3, #1
    dee8:	mov	r1, r6
    deea:	mov	r0, r5
    deec:	blx	r7
    deee:	adds	r0, #1
    def0:	beq.w	dd38 <_printf_float+0x98>
    def4:	ldrd	r3, r9, [sp, #36]	@ 0x24
    def8:	orrs.w	r3, r9, r3
    defc:	bne.n	df04 <_printf_float+0x264>
    defe:	ldr	r3, [r4, #0]
    df00:	lsls	r1, r3, #31
    df02:	bpl.n	deb4 <_printf_float+0x214>
    df04:	ldr	r3, [sp, #20]
    df06:	mov	r2, fp
    df08:	mov	r1, r6
    df0a:	mov	r0, r5
    df0c:	blx	r7
    df0e:	adds	r0, #1
    df10:	beq.w	dd38 <_printf_float+0x98>
    df14:	mov.w	sl, #0
    df18:	add.w	fp, r4, #26
    df1c:	ldr	r3, [sp, #36]	@ 0x24
    df1e:	negs	r3, r3
    df20:	cmp	r3, sl
    df22:	bgt.n	df28 <_printf_float+0x288>
    df24:	mov	r3, r9
    df26:	b.n	de52 <_printf_float+0x1b2>
    df28:	movs	r3, #1
    df2a:	mov	r2, fp
    df2c:	mov	r1, r6
    df2e:	mov	r0, r5
    df30:	blx	r7
    df32:	adds	r0, #1
    df34:	beq.w	dd38 <_printf_float+0x98>
    df38:	add.w	sl, sl, #1
    df3c:	b.n	df1c <_printf_float+0x27c>
    df3e:	nop
    df40:	.word	0xffffffff
    df44:	.word	0x7fefffff
    df48:	.word	0x20001c5d
    df4c:	.word	0x20001c65
    df50:	.word	0x20001c59
    df54:	.word	0x20001c69
    df58:	.word	0x200013ef
    df5c:	ldr	r3, [r4, #88]	@ 0x58
    df5e:	ldr.w	sl, [sp, #40]	@ 0x28
    df62:	cmp	r3, sl
    df64:	it	ge
    df66:	movge	r3, sl
    df68:	cmp	r3, #0
    df6a:	mov	r9, r3
    df6c:	bgt.n	dfde <_printf_float+0x33e>
    df6e:	movs	r3, #0
    df70:	str	r3, [sp, #28]
    df72:	bic.w	r9, r9, r9, asr #31
    df76:	add.w	r2, r4, #26
    df7a:	ldr	r3, [r4, #88]	@ 0x58
    df7c:	ldr	r1, [sp, #28]
    df7e:	str	r3, [sp, #24]
    df80:	sub.w	r3, r3, r9
    df84:	cmp	r3, r1
    df86:	bgt.n	dfec <_printf_float+0x34c>
    df88:	ldr	r3, [sp, #36]	@ 0x24
    df8a:	cmp	sl, r3
    df8c:	bgt.n	e006 <_printf_float+0x366>
    df8e:	ldr	r3, [r4, #0]
    df90:	lsls	r2, r3, #31
    df92:	bmi.n	e006 <_printf_float+0x366>
    df94:	ldr	r3, [sp, #36]	@ 0x24
    df96:	sub.w	r9, sl, r3
    df9a:	ldr	r3, [sp, #24]
    df9c:	sub.w	r3, sl, r3
    dfa0:	cmp	r9, r3
    dfa2:	it	ge
    dfa4:	movge	r9, r3
    dfa6:	cmp.w	r9, #0
    dfaa:	bgt.n	e016 <_printf_float+0x376>
    dfac:	mov.w	r8, #0
    dfb0:	bic.w	r9, r9, r9, asr #31
    dfb4:	add.w	fp, r4, #26
    dfb8:	ldr	r3, [sp, #36]	@ 0x24
    dfba:	sub.w	r3, sl, r3
    dfbe:	sub.w	r3, r3, r9
    dfc2:	cmp	r3, r8
    dfc4:	ble.w	deb4 <_printf_float+0x214>
    dfc8:	movs	r3, #1
    dfca:	mov	r2, fp
    dfcc:	mov	r1, r6
    dfce:	mov	r0, r5
    dfd0:	blx	r7
    dfd2:	adds	r0, #1
    dfd4:	beq.w	dd38 <_printf_float+0x98>
    dfd8:	add.w	r8, r8, #1
    dfdc:	b.n	dfb8 <_printf_float+0x318>
    dfde:	mov	r2, r8
    dfe0:	mov	r1, r6
    dfe2:	mov	r0, r5
    dfe4:	blx	r7
    dfe6:	adds	r0, #1
    dfe8:	bne.n	df6e <_printf_float+0x2ce>
    dfea:	b.n	dd38 <_printf_float+0x98>
    dfec:	movs	r3, #1
    dfee:	mov	r1, r6
    dff0:	mov	r0, r5
    dff2:	str	r2, [sp, #24]
    dff4:	blx	r7
    dff6:	adds	r0, #1
    dff8:	beq.w	dd38 <_printf_float+0x98>
    dffc:	ldr	r3, [sp, #28]
    dffe:	ldr	r2, [sp, #24]
    e000:	adds	r3, #1
    e002:	str	r3, [sp, #28]
    e004:	b.n	df7a <_printf_float+0x2da>
    e006:	ldr	r3, [sp, #20]
    e008:	mov	r2, fp
    e00a:	mov	r1, r6
    e00c:	mov	r0, r5
    e00e:	blx	r7
    e010:	adds	r0, #1
    e012:	bne.n	df94 <_printf_float+0x2f4>
    e014:	b.n	dd38 <_printf_float+0x98>
    e016:	ldr	r2, [sp, #24]
    e018:	mov	r3, r9
    e01a:	add	r2, r8
    e01c:	mov	r1, r6
    e01e:	mov	r0, r5
    e020:	blx	r7
    e022:	adds	r0, #1
    e024:	bne.n	dfac <_printf_float+0x30c>
    e026:	b.n	dd38 <_printf_float+0x98>
    e028:	ldr.w	r9, [sp, #40]	@ 0x28
    e02c:	cmp.w	r9, #1
    e030:	bgt.n	e036 <_printf_float+0x396>
    e032:	lsls	r3, r3, #31
    e034:	bpl.n	e0a4 <_printf_float+0x404>
    e036:	movs	r3, #1
    e038:	mov	r2, r8
    e03a:	mov	r1, r6
    e03c:	mov	r0, r5
    e03e:	blx	r7
    e040:	adds	r0, #1
    e042:	beq.w	dd38 <_printf_float+0x98>
    e046:	ldr	r3, [sp, #20]
    e048:	mov	r2, fp
    e04a:	mov	r1, r6
    e04c:	mov	r0, r5
    e04e:	blx	r7
    e050:	adds	r0, #1
    e052:	beq.w	dd38 <_printf_float+0x98>
    e056:	vldr	d7, [r4, #72]	@ 0x48
    e05a:	vcmp.f64	d7, #0.0
    e05e:	vmrs	APSR_nzcv, fpscr
    e062:	add.w	r9, r9, #4294967295
    e066:	beq.n	e09a <_printf_float+0x3fa>
    e068:	mov	r3, r9
    e06a:	add.w	r2, r8, #1
    e06e:	mov	r1, r6
    e070:	mov	r0, r5
    e072:	blx	r7
    e074:	adds	r0, #1
    e076:	bne.n	e092 <_printf_float+0x3f2>
    e078:	b.n	dd38 <_printf_float+0x98>
    e07a:	movs	r3, #1
    e07c:	mov	r2, fp
    e07e:	mov	r1, r6
    e080:	mov	r0, r5
    e082:	blx	r7
    e084:	adds	r0, #1
    e086:	beq.w	dd38 <_printf_float+0x98>
    e08a:	add.w	r8, r8, #1
    e08e:	cmp	r8, r9
    e090:	blt.n	e07a <_printf_float+0x3da>
    e092:	mov	r3, sl
    e094:	add.w	r2, r4, #80	@ 0x50
    e098:	b.n	de54 <_printf_float+0x1b4>
    e09a:	mov.w	r8, #0
    e09e:	add.w	fp, r4, #26
    e0a2:	b.n	e08e <_printf_float+0x3ee>
    e0a4:	movs	r3, #1
    e0a6:	mov	r2, r8
    e0a8:	b.n	e06e <_printf_float+0x3ce>
    e0aa:	movs	r3, #1
    e0ac:	mov	r2, r9
    e0ae:	mov	r1, r6
    e0b0:	mov	r0, r5
    e0b2:	blx	r7
    e0b4:	adds	r0, #1
    e0b6:	beq.w	dd38 <_printf_float+0x98>
    e0ba:	add.w	r8, r8, #1
    e0be:	ldr	r3, [r4, #12]
    e0c0:	ldr	r1, [sp, #44]	@ 0x2c
    e0c2:	subs	r3, r3, r1
    e0c4:	cmp	r3, r8
    e0c6:	bgt.n	e0aa <_printf_float+0x40a>
    e0c8:	b.n	debc <_printf_float+0x21c>
    e0ca:	mov.w	r8, #0
    e0ce:	add.w	r9, r4, #25
    e0d2:	b.n	e0be <_printf_float+0x41e>

0000e0d4 <_printf_common>:
    e0d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e0d8:	mov	r6, r2
    e0da:	mov	r8, r3
    e0dc:	ldr	r2, [r1, #8]
    e0de:	ldr	r3, [r1, #16]
    e0e0:	ldr.w	r9, [sp, #32]
    e0e4:	cmp	r3, r2
    e0e6:	it	lt
    e0e8:	movlt	r3, r2
    e0ea:	str	r3, [r6, #0]
    e0ec:	ldrb.w	r2, [r1, #67]	@ 0x43
    e0f0:	mov	r7, r0
    e0f2:	mov	r4, r1
    e0f4:	cbz	r2, e0fa <_printf_common+0x26>
    e0f6:	adds	r3, #1
    e0f8:	str	r3, [r6, #0]
    e0fa:	ldr	r3, [r4, #0]
    e0fc:	lsls	r1, r3, #26
    e0fe:	ittt	mi
    e100:	ldrmi	r3, [r6, #0]
    e102:	addmi	r3, #2
    e104:	strmi	r3, [r6, #0]
    e106:	ldr	r5, [r4, #0]
    e108:	ands.w	r5, r5, #6
    e10c:	bne.n	e11c <_printf_common+0x48>
    e10e:	add.w	sl, r4, #25
    e112:	ldr	r3, [r4, #12]
    e114:	ldr	r2, [r6, #0]
    e116:	subs	r3, r3, r2
    e118:	cmp	r3, r5
    e11a:	bgt.n	e16a <_printf_common+0x96>
    e11c:	ldrb.w	r3, [r4, #67]	@ 0x43
    e120:	ldr	r2, [r4, #0]
    e122:	subs	r3, #0
    e124:	it	ne
    e126:	movne	r3, #1
    e128:	lsls	r2, r2, #26
    e12a:	bmi.n	e184 <_printf_common+0xb0>
    e12c:	add.w	r2, r4, #67	@ 0x43
    e130:	mov	r1, r8
    e132:	mov	r0, r7
    e134:	blx	r9
    e136:	adds	r0, #1
    e138:	beq.n	e178 <_printf_common+0xa4>
    e13a:	ldr	r3, [r4, #0]
    e13c:	ldr	r2, [r4, #16]
    e13e:	and.w	r3, r3, #6
    e142:	cmp	r3, #4
    e144:	ittt	eq
    e146:	ldreq	r5, [r4, #12]
    e148:	ldreq	r3, [r6, #0]
    e14a:	subeq	r5, r5, r3
    e14c:	ldr	r3, [r4, #8]
    e14e:	ite	eq
    e150:	biceq.w	r5, r5, r5, asr #31
    e154:	movne	r5, #0
    e156:	cmp	r3, r2
    e158:	itt	gt
    e15a:	subgt	r3, r3, r2
    e15c:	addgt	r5, r5, r3
    e15e:	movs	r6, #0
    e160:	adds	r4, #26
    e162:	cmp	r5, r6
    e164:	bne.n	e19c <_printf_common+0xc8>
    e166:	movs	r0, #0
    e168:	b.n	e17c <_printf_common+0xa8>
    e16a:	movs	r3, #1
    e16c:	mov	r2, sl
    e16e:	mov	r1, r8
    e170:	mov	r0, r7
    e172:	blx	r9
    e174:	adds	r0, #1
    e176:	bne.n	e180 <_printf_common+0xac>
    e178:	mov.w	r0, #4294967295
    e17c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e180:	adds	r5, #1
    e182:	b.n	e112 <_printf_common+0x3e>
    e184:	adds	r1, r4, r3
    e186:	adds	r2, r3, #1
    e188:	movs	r0, #48	@ 0x30
    e18a:	strb.w	r0, [r1, #67]	@ 0x43
    e18e:	add	r2, r4
    e190:	ldrb.w	r1, [r4, #69]	@ 0x45
    e194:	strb.w	r1, [r2, #67]	@ 0x43
    e198:	adds	r3, #2
    e19a:	b.n	e12c <_printf_common+0x58>
    e19c:	movs	r3, #1
    e19e:	mov	r2, r4
    e1a0:	mov	r1, r8
    e1a2:	mov	r0, r7
    e1a4:	blx	r9
    e1a6:	adds	r0, #1
    e1a8:	beq.n	e178 <_printf_common+0xa4>
    e1aa:	adds	r6, #1
    e1ac:	b.n	e162 <_printf_common+0x8e>
	...

0000e1b0 <_printf_i>:
    e1b0:	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e1b4:	ldrb	r7, [r1, #24]
    e1b6:	ldr	r6, [sp, #48]	@ 0x30
    e1b8:	cmp	r7, #120	@ 0x78
    e1ba:	mov	r9, r2
    e1bc:	mov	r8, r0
    e1be:	mov	r4, r1
    e1c0:	mov	sl, r3
    e1c2:	add.w	r2, r1, #67	@ 0x43
    e1c6:	bhi.n	e1d8 <_printf_i+0x28>
    e1c8:	cmp	r7, #98	@ 0x62
    e1ca:	bhi.n	e1e2 <_printf_i+0x32>
    e1cc:	cmp	r7, #0
    e1ce:	beq.w	e374 <_printf_i+0x1c4>
    e1d2:	cmp	r7, #88	@ 0x58
    e1d4:	beq.w	e348 <_printf_i+0x198>
    e1d8:	add.w	r6, r4, #66	@ 0x42
    e1dc:	strb.w	r7, [r4, #66]	@ 0x42
    e1e0:	b.n	e258 <_printf_i+0xa8>
    e1e2:	sub.w	r3, r7, #99	@ 0x63
    e1e6:	cmp	r3, #21
    e1e8:	bhi.n	e1d8 <_printf_i+0x28>
    e1ea:	add	r1, pc, #4	@ (adr r1, e1f0 <_printf_i+0x40>)
    e1ec:	ldr.w	pc, [r1, r3, lsl #2]
    e1f0:	.word	0x0000e249
    e1f4:	.word	0x0000e25d
    e1f8:	.word	0x0000e1d9
    e1fc:	.word	0x0000e1d9
    e200:	.word	0x0000e1d9
    e204:	.word	0x0000e1d9
    e208:	.word	0x0000e25d
    e20c:	.word	0x0000e1d9
    e210:	.word	0x0000e1d9
    e214:	.word	0x0000e1d9
    e218:	.word	0x0000e1d9
    e21c:	.word	0x0000e35b
    e220:	.word	0x0000e287
    e224:	.word	0x0000e315
    e228:	.word	0x0000e1d9
    e22c:	.word	0x0000e1d9
    e230:	.word	0x0000e37d
    e234:	.word	0x0000e1d9
    e238:	.word	0x0000e287
    e23c:	.word	0x0000e1d9
    e240:	.word	0x0000e1d9
    e244:	.word	0x0000e31d
    e248:	ldr	r3, [r6, #0]
    e24a:	adds	r2, r3, #4
    e24c:	ldr	r3, [r3, #0]
    e24e:	str	r2, [r6, #0]
    e250:	add.w	r6, r4, #66	@ 0x42
    e254:	strb.w	r3, [r4, #66]	@ 0x42
    e258:	movs	r3, #1
    e25a:	b.n	e396 <_printf_i+0x1e6>
    e25c:	ldr	r3, [r6, #0]
    e25e:	ldr	r0, [r4, #0]
    e260:	adds	r1, r3, #4
    e262:	str	r1, [r6, #0]
    e264:	lsls	r6, r0, #24
    e266:	bpl.n	e26c <_printf_i+0xbc>
    e268:	ldr	r5, [r3, #0]
    e26a:	b.n	e274 <_printf_i+0xc4>
    e26c:	lsls	r5, r0, #25
    e26e:	bpl.n	e268 <_printf_i+0xb8>
    e270:	ldrsh.w	r5, [r3]
    e274:	cmp	r5, #0
    e276:	bge.n	e280 <_printf_i+0xd0>
    e278:	movs	r3, #45	@ 0x2d
    e27a:	negs	r5, r5
    e27c:	strb.w	r3, [r4, #67]	@ 0x43
    e280:	ldr	r0, [pc, #352]	@ (e3e4 <_printf_i+0x234>)
    e282:	movs	r3, #10
    e284:	b.n	e2aa <_printf_i+0xfa>
    e286:	ldr	r1, [r4, #0]
    e288:	ldr	r3, [r6, #0]
    e28a:	lsls	r0, r1, #24
    e28c:	ldr.w	r5, [r3], #4
    e290:	bmi.n	e298 <_printf_i+0xe8>
    e292:	lsls	r1, r1, #25
    e294:	it	mi
    e296:	uxthmi	r5, r5
    e298:	cmp	r7, #111	@ 0x6f
    e29a:	ldr	r0, [pc, #328]	@ (e3e4 <_printf_i+0x234>)
    e29c:	str	r3, [r6, #0]
    e29e:	ite	ne
    e2a0:	movne	r3, #10
    e2a2:	moveq	r3, #8
    e2a4:	movs	r1, #0
    e2a6:	strb.w	r1, [r4, #67]	@ 0x43
    e2aa:	ldr	r6, [r4, #4]
    e2ac:	str	r6, [r4, #8]
    e2ae:	cmp	r6, #0
    e2b0:	blt.n	e2be <_printf_i+0x10e>
    e2b2:	ldr	r1, [r4, #0]
    e2b4:	orrs	r6, r5
    e2b6:	bic.w	r1, r1, #4
    e2ba:	str	r1, [r4, #0]
    e2bc:	beq.n	e356 <_printf_i+0x1a6>
    e2be:	mov	r6, r2
    e2c0:	udiv	r1, r5, r3
    e2c4:	mls	r7, r3, r1, r5
    e2c8:	ldrb	r7, [r0, r7]
    e2ca:	strb.w	r7, [r6, #-1]!
    e2ce:	mov	r7, r5
    e2d0:	cmp	r3, r7
    e2d2:	mov	r5, r1
    e2d4:	bls.n	e2c0 <_printf_i+0x110>
    e2d6:	cmp	r3, #8
    e2d8:	bne.n	e2f2 <_printf_i+0x142>
    e2da:	ldr	r3, [r4, #0]
    e2dc:	lsls	r7, r3, #31
    e2de:	bpl.n	e2f2 <_printf_i+0x142>
    e2e0:	ldr	r3, [r4, #16]
    e2e2:	ldr	r1, [r4, #4]
    e2e4:	cmp	r1, r3
    e2e6:	ittt	le
    e2e8:	movle	r3, #48	@ 0x30
    e2ea:	strble.w	r3, [r6, #-1]
    e2ee:	addle.w	r6, r6, #4294967295
    e2f2:	subs	r2, r2, r6
    e2f4:	str	r2, [r4, #16]
    e2f6:	str.w	sl, [sp]
    e2fa:	mov	r3, r9
    e2fc:	add	r2, sp, #12
    e2fe:	mov	r1, r4
    e300:	mov	r0, r8
    e302:	bl	e0d4 <_printf_common>
    e306:	adds	r0, #1
    e308:	bne.n	e3a0 <_printf_i+0x1f0>
    e30a:	mov.w	r0, #4294967295
    e30e:	add	sp, #16
    e310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e314:	ldr	r3, [r4, #0]
    e316:	orr.w	r3, r3, #32
    e31a:	str	r3, [r4, #0]
    e31c:	ldr	r0, [pc, #200]	@ (e3e8 <_printf_i+0x238>)
    e31e:	movs	r7, #120	@ 0x78
    e320:	strb.w	r7, [r4, #69]	@ 0x45
    e324:	ldr	r3, [r4, #0]
    e326:	ldr	r1, [r6, #0]
    e328:	lsls	r7, r3, #24
    e32a:	ldr.w	r5, [r1], #4
    e32e:	bmi.n	e336 <_printf_i+0x186>
    e330:	lsls	r7, r3, #25
    e332:	it	mi
    e334:	uxthmi	r5, r5
    e336:	str	r1, [r6, #0]
    e338:	lsls	r1, r3, #31
    e33a:	itt	mi
    e33c:	orrmi.w	r3, r3, #32
    e340:	strmi	r3, [r4, #0]
    e342:	cbz	r5, e34c <_printf_i+0x19c>
    e344:	movs	r3, #16
    e346:	b.n	e2a4 <_printf_i+0xf4>
    e348:	ldr	r0, [pc, #152]	@ (e3e4 <_printf_i+0x234>)
    e34a:	b.n	e320 <_printf_i+0x170>
    e34c:	ldr	r3, [r4, #0]
    e34e:	bic.w	r3, r3, #32
    e352:	str	r3, [r4, #0]
    e354:	b.n	e344 <_printf_i+0x194>
    e356:	mov	r6, r2
    e358:	b.n	e2d6 <_printf_i+0x126>
    e35a:	ldr	r3, [r6, #0]
    e35c:	ldr	r5, [r4, #0]
    e35e:	ldr	r1, [r4, #20]
    e360:	adds	r0, r3, #4
    e362:	str	r0, [r6, #0]
    e364:	lsls	r6, r5, #24
    e366:	ldr	r3, [r3, #0]
    e368:	bpl.n	e36e <_printf_i+0x1be>
    e36a:	str	r1, [r3, #0]
    e36c:	b.n	e374 <_printf_i+0x1c4>
    e36e:	lsls	r0, r5, #25
    e370:	bpl.n	e36a <_printf_i+0x1ba>
    e372:	strh	r1, [r3, #0]
    e374:	movs	r3, #0
    e376:	str	r3, [r4, #16]
    e378:	mov	r6, r2
    e37a:	b.n	e2f6 <_printf_i+0x146>
    e37c:	ldr	r3, [r6, #0]
    e37e:	adds	r2, r3, #4
    e380:	str	r2, [r6, #0]
    e382:	ldr	r6, [r3, #0]
    e384:	ldr	r2, [r4, #4]
    e386:	movs	r1, #0
    e388:	mov	r0, r6
    e38a:	bl	ede0 <memchr>
    e38e:	cbz	r0, e394 <_printf_i+0x1e4>
    e390:	subs	r0, r0, r6
    e392:	str	r0, [r4, #4]
    e394:	ldr	r3, [r4, #4]
    e396:	str	r3, [r4, #16]
    e398:	movs	r3, #0
    e39a:	strb.w	r3, [r4, #67]	@ 0x43
    e39e:	b.n	e2f6 <_printf_i+0x146>
    e3a0:	ldr	r3, [r4, #16]
    e3a2:	mov	r2, r6
    e3a4:	mov	r1, r9
    e3a6:	mov	r0, r8
    e3a8:	blx	sl
    e3aa:	adds	r0, #1
    e3ac:	beq.n	e30a <_printf_i+0x15a>
    e3ae:	ldr	r3, [r4, #0]
    e3b0:	lsls	r3, r3, #30
    e3b2:	bmi.n	e3dc <_printf_i+0x22c>
    e3b4:	ldr	r0, [r4, #12]
    e3b6:	ldr	r3, [sp, #12]
    e3b8:	cmp	r0, r3
    e3ba:	it	lt
    e3bc:	movlt	r0, r3
    e3be:	b.n	e30e <_printf_i+0x15e>
    e3c0:	movs	r3, #1
    e3c2:	mov	r2, r6
    e3c4:	mov	r1, r9
    e3c6:	mov	r0, r8
    e3c8:	blx	sl
    e3ca:	adds	r0, #1
    e3cc:	beq.n	e30a <_printf_i+0x15a>
    e3ce:	adds	r5, #1
    e3d0:	ldr	r3, [r4, #12]
    e3d2:	ldr	r1, [sp, #12]
    e3d4:	subs	r3, r3, r1
    e3d6:	cmp	r3, r5
    e3d8:	bgt.n	e3c0 <_printf_i+0x210>
    e3da:	b.n	e3b4 <_printf_i+0x204>
    e3dc:	movs	r5, #0
    e3de:	add.w	r6, r4, #25
    e3e2:	b.n	e3d0 <_printf_i+0x220>
    e3e4:	.word	0x20001c6d
    e3e8:	.word	0x20001c7e

0000e3ec <_scanf_float>:
    e3ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3f0:	sub	sp, #28
    e3f2:	mov	r7, r2
    e3f4:	str	r3, [sp, #12]
    e3f6:	ldr	r3, [r1, #8]
    e3f8:	subs	r2, r3, #1
    e3fa:	cmp.w	r2, #348	@ 0x15c
    e3fe:	itttt	hi
    e400:	mvnhi.w	r5, #348	@ 0x15c
    e404:	addhi.w	fp, r3, r5
    e408:	movwhi	r3, #349	@ 0x15d
    e40c:	strhi	r3, [r1, #8]
    e40e:	ldr	r3, [r1, #0]
    e410:	mov	r2, r1
    e412:	mov.w	r5, #0
    e416:	orr.w	r3, r3, #1920	@ 0x780
    e41a:	str.w	r3, [r2], #28
    e41e:	strd	r5, r5, [sp, #16]
    e422:	mov	r8, r0
    e424:	mov	r4, r1
    e426:	it	ls
    e428:	movls.w	fp, #0
    e42c:	str	r2, [sp, #4]
    e42e:	mov	r6, r2
    e430:	mov	sl, r5
    e432:	mov	r9, r5
    e434:	str	r5, [sp, #8]
    e436:	ldr	r2, [r4, #8]
    e438:	cbz	r2, e450 <_scanf_float+0x64>
    e43a:	ldr	r3, [r7, #0]
    e43c:	ldrb	r3, [r3, #0]
    e43e:	cmp	r3, #78	@ 0x4e
    e440:	bhi.n	e50c <_scanf_float+0x120>
    e442:	cmp	r3, #64	@ 0x40
    e444:	bhi.n	e4c0 <_scanf_float+0xd4>
    e446:	sub.w	r1, r3, #43	@ 0x2b
    e44a:	uxtb	r0, r1
    e44c:	cmp	r0, #14
    e44e:	bls.n	e4c6 <_scanf_float+0xda>
    e450:	cmp.w	r9, #0
    e454:	beq.n	e45e <_scanf_float+0x72>
    e456:	ldr	r3, [r4, #0]
    e458:	bic.w	r3, r3, #256	@ 0x100
    e45c:	str	r3, [r4, #0]
    e45e:	add.w	sl, sl, #4294967295
    e462:	cmp.w	sl, #1
    e466:	bhi.w	e698 <_scanf_float+0x2ac>
    e46a:	ldr	r3, [sp, #4]
    e46c:	cmp	r6, r3
    e46e:	bhi.w	e682 <_scanf_float+0x296>
    e472:	movs	r0, #1
    e474:	add	sp, #28
    e476:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e47a:	sub.w	r2, r3, #97	@ 0x61
    e47e:	cmp	r2, #13
    e480:	bhi.n	e450 <_scanf_float+0x64>
    e482:	add	r1, pc, #4	@ (adr r1, e488 <_scanf_float+0x9c>)
    e484:	ldr.w	pc, [r1, r2, lsl #2]
    e488:	.word	0x0000e5cf
    e48c:	.word	0x0000e451
    e490:	.word	0x0000e451
    e494:	.word	0x0000e451
    e498:	.word	0x0000e62f
    e49c:	.word	0x0000e607
    e4a0:	.word	0x0000e451
    e4a4:	.word	0x0000e451
    e4a8:	.word	0x0000e5dd
    e4ac:	.word	0x0000e451
    e4b0:	.word	0x0000e451
    e4b4:	.word	0x0000e451
    e4b8:	.word	0x0000e451
    e4bc:	.word	0x0000e595
    e4c0:	sub.w	r2, r3, #65	@ 0x41
    e4c4:	b.n	e47e <_scanf_float+0x92>
    e4c6:	cmp	r1, #14
    e4c8:	bhi.n	e450 <_scanf_float+0x64>
    e4ca:	add	r0, pc, #4	@ (adr r0, e4d0 <_scanf_float+0xe4>)
    e4cc:	ldr.w	pc, [r0, r1, lsl #2]
    e4d0:	.word	0x0000e585
    e4d4:	.word	0x0000e451
    e4d8:	.word	0x0000e585
    e4dc:	.word	0x0000e61b
    e4e0:	.word	0x0000e451
    e4e4:	.word	0x0000e52d
    e4e8:	.word	0x0000e56b
    e4ec:	.word	0x0000e56b
    e4f0:	.word	0x0000e56b
    e4f4:	.word	0x0000e56b
    e4f8:	.word	0x0000e56b
    e4fc:	.word	0x0000e56b
    e500:	.word	0x0000e56b
    e504:	.word	0x0000e56b
    e508:	.word	0x0000e56b
    e50c:	cmp	r3, #110	@ 0x6e
    e50e:	bhi.n	e524 <_scanf_float+0x138>
    e510:	cmp	r3, #96	@ 0x60
    e512:	bhi.n	e47a <_scanf_float+0x8e>
    e514:	cmp	r3, #84	@ 0x54
    e516:	beq.n	e610 <_scanf_float+0x224>
    e518:	cmp	r3, #89	@ 0x59
    e51a:	bne.n	e450 <_scanf_float+0x64>
    e51c:	cmp	r5, #7
    e51e:	bne.n	e450 <_scanf_float+0x64>
    e520:	movs	r5, #8
    e522:	b.n	e57e <_scanf_float+0x192>
    e524:	cmp	r3, #116	@ 0x74
    e526:	beq.n	e610 <_scanf_float+0x224>
    e528:	cmp	r3, #121	@ 0x79
    e52a:	b.n	e51a <_scanf_float+0x12e>
    e52c:	ldr	r1, [r4, #0]
    e52e:	lsls	r0, r1, #23
    e530:	bpl.n	e56a <_scanf_float+0x17e>
    e532:	bic.w	r1, r1, #128	@ 0x80
    e536:	str	r1, [r4, #0]
    e538:	add.w	r9, r9, #1
    e53c:	cmp.w	fp, #0
    e540:	beq.n	e54a <_scanf_float+0x15e>
    e542:	adds	r2, #1
    e544:	add.w	fp, fp, #4294967295
    e548:	str	r2, [r4, #8]
    e54a:	ldr	r3, [r4, #8]
    e54c:	subs	r3, #1
    e54e:	str	r3, [r4, #8]
    e550:	ldr	r3, [r4, #16]
    e552:	adds	r3, #1
    e554:	str	r3, [r4, #16]
    e556:	ldr	r3, [r7, #4]
    e558:	subs	r3, #1
    e55a:	cmp	r3, #0
    e55c:	str	r3, [r7, #4]
    e55e:	ble.w	e670 <_scanf_float+0x284>
    e562:	ldr	r3, [r7, #0]
    e564:	adds	r3, #1
    e566:	str	r3, [r7, #0]
    e568:	b.n	e436 <_scanf_float+0x4a>
    e56a:	adds.w	r1, sl, r5
    e56e:	bne.w	e450 <_scanf_float+0x64>
    e572:	ldr	r2, [r4, #0]
    e574:	bic.w	r2, r2, #384	@ 0x180
    e578:	str	r2, [r4, #0]
    e57a:	mov	r5, r1
    e57c:	mov	sl, r1
    e57e:	strb.w	r3, [r6], #1
    e582:	b.n	e54a <_scanf_float+0x15e>
    e584:	ldr	r2, [r4, #0]
    e586:	lsls	r0, r2, #24
    e588:	bpl.w	e450 <_scanf_float+0x64>
    e58c:	bic.w	r2, r2, #128	@ 0x80
    e590:	str	r2, [r4, #0]
    e592:	b.n	e57e <_scanf_float+0x192>
    e594:	cmp.w	sl, #0
    e598:	bne.n	e5b8 <_scanf_float+0x1cc>
    e59a:	cmp.w	r9, #0
    e59e:	bne.n	e5be <_scanf_float+0x1d2>
    e5a0:	ldr	r2, [r4, #0]
    e5a2:	and.w	r1, r2, #1792	@ 0x700
    e5a6:	cmp.w	r1, #1792	@ 0x700
    e5aa:	bne.n	e5be <_scanf_float+0x1d2>
    e5ac:	bic.w	r2, r2, #1920	@ 0x780
    e5b0:	str	r2, [r4, #0]
    e5b2:	mov.w	sl, #1
    e5b6:	b.n	e57e <_scanf_float+0x192>
    e5b8:	cmp.w	sl, #2
    e5bc:	beq.n	e66a <_scanf_float+0x27e>
    e5be:	cmp	r5, #1
    e5c0:	beq.n	e5c8 <_scanf_float+0x1dc>
    e5c2:	cmp	r5, #4
    e5c4:	bne.w	e450 <_scanf_float+0x64>
    e5c8:	adds	r5, #1
    e5ca:	uxtb	r5, r5
    e5cc:	b.n	e57e <_scanf_float+0x192>
    e5ce:	cmp.w	sl, #1
    e5d2:	bne.w	e450 <_scanf_float+0x64>
    e5d6:	mov.w	sl, #2
    e5da:	b.n	e57e <_scanf_float+0x192>
    e5dc:	cbnz	r5, e5fe <_scanf_float+0x212>
    e5de:	cmp.w	r9, #0
    e5e2:	bne.w	e456 <_scanf_float+0x6a>
    e5e6:	ldr	r2, [r4, #0]
    e5e8:	and.w	r1, r2, #1792	@ 0x700
    e5ec:	cmp.w	r1, #1792	@ 0x700
    e5f0:	bne.w	e7f6 <_scanf_float+0x40a>
    e5f4:	bic.w	r2, r2, #1920	@ 0x780
    e5f8:	str	r2, [r4, #0]
    e5fa:	movs	r5, #1
    e5fc:	b.n	e57e <_scanf_float+0x192>
    e5fe:	cmp	r5, #3
    e600:	beq.n	e5c8 <_scanf_float+0x1dc>
    e602:	cmp	r5, #5
    e604:	b.n	e5c4 <_scanf_float+0x1d8>
    e606:	cmp	r5, #2
    e608:	bne.w	e450 <_scanf_float+0x64>
    e60c:	movs	r5, #3
    e60e:	b.n	e57e <_scanf_float+0x192>
    e610:	cmp	r5, #6
    e612:	bne.w	e450 <_scanf_float+0x64>
    e616:	movs	r5, #7
    e618:	b.n	e57e <_scanf_float+0x192>
    e61a:	ldr	r2, [r4, #0]
    e61c:	lsls	r1, r2, #22
    e61e:	bpl.w	e450 <_scanf_float+0x64>
    e622:	bic.w	r2, r2, #640	@ 0x280
    e626:	str	r2, [r4, #0]
    e628:	str.w	r9, [sp, #8]
    e62c:	b.n	e57e <_scanf_float+0x192>
    e62e:	ldr	r2, [r4, #0]
    e630:	and.w	r1, r2, #1280	@ 0x500
    e634:	cmp.w	r1, #1024	@ 0x400
    e638:	beq.n	e648 <_scanf_float+0x25c>
    e63a:	lsls	r0, r2, #21
    e63c:	bpl.w	e450 <_scanf_float+0x64>
    e640:	cmp.w	r9, #0
    e644:	beq.w	e7f6 <_scanf_float+0x40a>
    e648:	lsls	r1, r2, #22
    e64a:	it	pl
    e64c:	ldrpl	r1, [sp, #8]
    e64e:	bic.w	r2, r2, #1920	@ 0x780
    e652:	it	pl
    e654:	subpl.w	r1, r9, r1
    e658:	orr.w	r2, r2, #384	@ 0x180
    e65c:	it	pl
    e65e:	strdpl	r1, r6, [sp, #16]
    e662:	str	r2, [r4, #0]
    e664:	mov.w	r9, #0
    e668:	b.n	e57e <_scanf_float+0x192>
    e66a:	mov.w	sl, #3
    e66e:	b.n	e57e <_scanf_float+0x192>
    e670:	ldr.w	r3, [r4, #384]	@ 0x180
    e674:	mov	r1, r7
    e676:	mov	r0, r8
    e678:	blx	r3
    e67a:	cmp	r0, #0
    e67c:	beq.w	e436 <_scanf_float+0x4a>
    e680:	b.n	e450 <_scanf_float+0x64>
    e682:	ldr.w	r3, [r4, #380]	@ 0x17c
    e686:	ldrb.w	r1, [r6, #-1]!
    e68a:	mov	r2, r7
    e68c:	mov	r0, r8
    e68e:	blx	r3
    e690:	ldr	r3, [r4, #16]
    e692:	subs	r3, #1
    e694:	str	r3, [r4, #16]
    e696:	b.n	e46a <_scanf_float+0x7e>
    e698:	subs	r3, r5, #1
    e69a:	cmp	r3, #6
    e69c:	bhi.n	e6e8 <_scanf_float+0x2fc>
    e69e:	cmp	r5, #2
    e6a0:	bhi.n	e710 <_scanf_float+0x324>
    e6a2:	ldr	r3, [sp, #4]
    e6a4:	cmp	r6, r3
    e6a6:	bls.w	e472 <_scanf_float+0x86>
    e6aa:	ldr.w	r3, [r4, #380]	@ 0x17c
    e6ae:	ldrb.w	r1, [r6, #-1]!
    e6b2:	mov	r2, r7
    e6b4:	mov	r0, r8
    e6b6:	blx	r3
    e6b8:	ldr	r3, [r4, #16]
    e6ba:	subs	r3, #1
    e6bc:	str	r3, [r4, #16]
    e6be:	b.n	e6a2 <_scanf_float+0x2b6>
    e6c0:	ldr.w	r3, [r4, #380]	@ 0x17c
    e6c4:	ldrb.w	r1, [fp, #-1]!
    e6c8:	mov	r2, r7
    e6ca:	mov	r0, r8
    e6cc:	blx	r3
    e6ce:	ldr	r3, [r4, #16]
    e6d0:	subs	r3, #1
    e6d2:	str	r3, [r4, #16]
    e6d4:	add.w	sl, sl, #4294967295
    e6d8:	uxtb.w	sl, sl
    e6dc:	cmp.w	sl, #2
    e6e0:	bne.n	e6c0 <_scanf_float+0x2d4>
    e6e2:	subs	r5, #3
    e6e4:	uxtb	r5, r5
    e6e6:	subs	r6, r6, r5
    e6e8:	ldr	r3, [r4, #0]
    e6ea:	lsls	r2, r3, #23
    e6ec:	bpl.n	e750 <_scanf_float+0x364>
    e6ee:	lsls	r3, r3, #21
    e6f0:	bpl.n	e716 <_scanf_float+0x32a>
    e6f2:	ldr	r3, [sp, #4]
    e6f4:	cmp	r6, r3
    e6f6:	bls.w	e472 <_scanf_float+0x86>
    e6fa:	ldr.w	r3, [r4, #380]	@ 0x17c
    e6fe:	ldrb.w	r1, [r6, #-1]!
    e702:	mov	r2, r7
    e704:	mov	r0, r8
    e706:	blx	r3
    e708:	ldr	r3, [r4, #16]
    e70a:	subs	r3, #1
    e70c:	str	r3, [r4, #16]
    e70e:	b.n	e6f2 <_scanf_float+0x306>
    e710:	mov	sl, r5
    e712:	mov	fp, r6
    e714:	b.n	e6d4 <_scanf_float+0x2e8>
    e716:	ldrb.w	r1, [r6, #-1]
    e71a:	ldr	r3, [r4, #16]
    e71c:	cmp	r1, #101	@ 0x65
    e71e:	add.w	r3, r3, #4294967295
    e722:	add.w	r5, r6, #4294967295
    e726:	str	r3, [r4, #16]
    e728:	beq.n	e744 <_scanf_float+0x358>
    e72a:	cmp	r1, #69	@ 0x45
    e72c:	beq.n	e744 <_scanf_float+0x358>
    e72e:	ldr.w	r3, [r4, #380]	@ 0x17c
    e732:	mov	r2, r7
    e734:	mov	r0, r8
    e736:	blx	r3
    e738:	ldr	r3, [r4, #16]
    e73a:	ldrb.w	r1, [r6, #-2]
    e73e:	subs	r3, #1
    e740:	subs	r5, r6, #2
    e742:	str	r3, [r4, #16]
    e744:	ldr.w	r3, [r4, #380]	@ 0x17c
    e748:	mov	r2, r7
    e74a:	mov	r0, r8
    e74c:	blx	r3
    e74e:	mov	r6, r5
    e750:	ldr	r2, [r4, #0]
    e752:	ands.w	r2, r2, #16
    e756:	beq.n	e75c <_scanf_float+0x370>
    e758:	movs	r0, #0
    e75a:	b.n	e474 <_scanf_float+0x88>
    e75c:	strb	r2, [r6, #0]
    e75e:	ldr	r3, [r4, #0]
    e760:	and.w	r3, r3, #1536	@ 0x600
    e764:	cmp.w	r3, #1024	@ 0x400
    e768:	bne.n	e7a0 <_scanf_float+0x3b4>
    e76a:	ldr	r3, [sp, #8]
    e76c:	cmp	r9, r3
    e76e:	sub.w	r2, r3, r9
    e772:	bne.n	e7b8 <_scanf_float+0x3cc>
    e774:	ldr	r1, [sp, #4]
    e776:	movs	r2, #0
    e778:	mov	r0, r8
    e77a:	bl	da54 <_strtod_r>
    e77e:	ldr	r3, [sp, #12]
    e780:	ldr	r1, [r4, #0]
    e782:	ldr	r3, [r3, #0]
    e784:	tst.w	r1, #2
    e788:	add.w	r2, r3, #4
    e78c:	beq.n	e7ce <_scanf_float+0x3e2>
    e78e:	ldr	r1, [sp, #12]
    e790:	str	r2, [r1, #0]
    e792:	ldr	r3, [r3, #0]
    e794:	vstr	d0, [r3]
    e798:	ldr	r3, [r4, #12]
    e79a:	adds	r3, #1
    e79c:	str	r3, [r4, #12]
    e79e:	b.n	e758 <_scanf_float+0x36c>
    e7a0:	ldr	r3, [sp, #16]
    e7a2:	cmp	r3, #0
    e7a4:	beq.n	e774 <_scanf_float+0x388>
    e7a6:	ldr	r1, [sp, #20]
    e7a8:	movs	r3, #10
    e7aa:	adds	r1, #1
    e7ac:	mov	r0, r8
    e7ae:	bl	db54 <_strtol_r>
    e7b2:	ldr	r3, [sp, #16]
    e7b4:	ldr	r6, [sp, #20]
    e7b6:	subs	r2, r0, r3
    e7b8:	addw	r3, r4, #367	@ 0x16f
    e7bc:	cmp	r6, r3
    e7be:	it	cs
    e7c0:	addcs.w	r6, r4, #366	@ 0x16e
    e7c4:	ldr	r1, [pc, #52]	@ (e7fc <_scanf_float+0x410>)
    e7c6:	mov	r0, r6
    e7c8:	bl	e9f4 <siprintf>
    e7cc:	b.n	e774 <_scanf_float+0x388>
    e7ce:	tst.w	r1, #4
    e7d2:	ldr	r1, [sp, #12]
    e7d4:	str	r2, [r1, #0]
    e7d6:	bne.n	e792 <_scanf_float+0x3a6>
    e7d8:	vcmp.f64	d0, d0
    e7dc:	vmrs	APSR_nzcv, fpscr
    e7e0:	ldr	r5, [r3, #0]
    e7e2:	bvc.n	e7f0 <_scanf_float+0x404>
    e7e4:	ldr	r0, [pc, #24]	@ (e800 <_scanf_float+0x414>)
    e7e6:	bl	eea0 <nanf>
    e7ea:	vstr	s0, [r5]
    e7ee:	b.n	e798 <_scanf_float+0x3ac>
    e7f0:	vcvt.f32.f64	s0, d0
    e7f4:	b.n	e7ea <_scanf_float+0x3fe>
    e7f6:	mov.w	r9, #0
    e7fa:	b.n	e45e <_scanf_float+0x72>
    e7fc:	.word	0x20001c8f
    e800:	.word	0x20001052

0000e804 <std>:
    e804:	movs	r3, #0
    e806:	push	{r4, lr}
    e808:	mov	r4, r0
    e80a:	strd	r3, r3, [r0]
    e80e:	strd	r3, r3, [r0, #16]
    e812:	str	r3, [r0, #8]
    e814:	strh	r1, [r0, #12]
    e816:	str	r3, [r0, #100]	@ 0x64
    e818:	strh	r2, [r0, #14]
    e81a:	str	r3, [r0, #24]
    e81c:	mov	r1, r3
    e81e:	movs	r2, #8
    e820:	adds	r0, #92	@ 0x5c
    e822:	bl	a2ac <memset>
    e826:	ldr	r3, [pc, #52]	@ (e85c <std+0x58>)
    e828:	str	r3, [r4, #36]	@ 0x24
    e82a:	ldr	r3, [pc, #52]	@ (e860 <std+0x5c>)
    e82c:	str	r3, [r4, #40]	@ 0x28
    e82e:	ldr	r3, [pc, #52]	@ (e864 <std+0x60>)
    e830:	str	r3, [r4, #44]	@ 0x2c
    e832:	ldr	r3, [pc, #52]	@ (e868 <std+0x64>)
    e834:	str	r3, [r4, #48]	@ 0x30
    e836:	ldr	r3, [pc, #52]	@ (e86c <std+0x68>)
    e838:	str	r4, [r4, #32]
    e83a:	cmp	r4, r3
    e83c:	beq.n	e84c <std+0x48>
    e83e:	add.w	r2, r3, #104	@ 0x68
    e842:	cmp	r4, r2
    e844:	beq.n	e84c <std+0x48>
    e846:	adds	r3, #208	@ 0xd0
    e848:	cmp	r4, r3
    e84a:	bne.n	e858 <std+0x54>
    e84c:	add.w	r0, r4, #88	@ 0x58
    e850:	ldmia.w	sp!, {r4, lr}
    e854:	b.w	edc8 <__retarget_lock_init_recursive>
    e858:	pop	{r4, pc}
    e85a:	nop
    e85c:	.word	0x0000ea91
    e860:	.word	0x0000eab7
    e864:	.word	0x0000eaef
    e868:	.word	0x0000eb13
    e86c:	.word	0x20011d4c

0000e870 <stdio_exit_handler>:
    e870:	ldr	r2, [pc, #8]	@ (e87c <stdio_exit_handler+0xc>)
    e872:	ldr	r1, [pc, #12]	@ (e880 <stdio_exit_handler+0x10>)
    e874:	ldr	r0, [pc, #12]	@ (e884 <stdio_exit_handler+0x14>)
    e876:	b.w	e94c <_fwalk_sglue>
    e87a:	nop
    e87c:	.word	0x200023a0
    e880:	.word	0x00011591
    e884:	.word	0x200023ac

0000e888 <cleanup_stdio>:
    e888:	ldr	r1, [r0, #4]
    e88a:	ldr	r3, [pc, #48]	@ (e8bc <cleanup_stdio+0x34>)
    e88c:	cmp	r1, r3
    e88e:	push	{r4, lr}
    e890:	mov	r4, r0
    e892:	beq.n	e898 <cleanup_stdio+0x10>
    e894:	bl	11590 <_fflush_r>
    e898:	ldr	r1, [r4, #8]
    e89a:	ldr	r3, [pc, #36]	@ (e8c0 <cleanup_stdio+0x38>)
    e89c:	cmp	r1, r3
    e89e:	beq.n	e8a6 <cleanup_stdio+0x1e>
    e8a0:	mov	r0, r4
    e8a2:	bl	11590 <_fflush_r>
    e8a6:	ldr	r1, [r4, #12]
    e8a8:	ldr	r3, [pc, #24]	@ (e8c4 <cleanup_stdio+0x3c>)
    e8aa:	cmp	r1, r3
    e8ac:	beq.n	e8b8 <cleanup_stdio+0x30>
    e8ae:	mov	r0, r4
    e8b0:	ldmia.w	sp!, {r4, lr}
    e8b4:	b.w	11590 <_fflush_r>
    e8b8:	pop	{r4, pc}
    e8ba:	nop
    e8bc:	.word	0x20011d4c
    e8c0:	.word	0x20011db4
    e8c4:	.word	0x20011e1c

0000e8c8 <global_stdio_init.part.0>:
    e8c8:	push	{r4, lr}
    e8ca:	ldr	r3, [pc, #44]	@ (e8f8 <global_stdio_init.part.0+0x30>)
    e8cc:	ldr	r4, [pc, #44]	@ (e8fc <global_stdio_init.part.0+0x34>)
    e8ce:	ldr	r2, [pc, #48]	@ (e900 <global_stdio_init.part.0+0x38>)
    e8d0:	str	r2, [r3, #0]
    e8d2:	mov	r0, r4
    e8d4:	movs	r2, #0
    e8d6:	movs	r1, #4
    e8d8:	bl	e804 <std>
    e8dc:	add.w	r0, r4, #104	@ 0x68
    e8e0:	movs	r2, #1
    e8e2:	movs	r1, #9
    e8e4:	bl	e804 <std>
    e8e8:	add.w	r0, r4, #208	@ 0xd0
    e8ec:	movs	r2, #2
    e8ee:	ldmia.w	sp!, {r4, lr}
    e8f2:	movs	r1, #18
    e8f4:	b.w	e804 <std>
    e8f8:	.word	0x20011e84
    e8fc:	.word	0x20011d4c
    e900:	.word	0x0000e871

0000e904 <__sfp_lock_acquire>:
    e904:	ldr	r0, [pc, #4]	@ (e90c <__sfp_lock_acquire+0x8>)
    e906:	b.w	edca <__retarget_lock_acquire_recursive>
    e90a:	nop
    e90c:	.word	0x20012aa1

0000e910 <__sfp_lock_release>:
    e910:	ldr	r0, [pc, #4]	@ (e918 <__sfp_lock_release+0x8>)
    e912:	b.w	edcc <__retarget_lock_release_recursive>
    e916:	nop
    e918:	.word	0x20012aa1

0000e91c <__sinit>:
    e91c:	push	{r4, lr}
    e91e:	mov	r4, r0
    e920:	bl	e904 <__sfp_lock_acquire>
    e924:	ldr	r3, [r4, #32]
    e926:	cbz	r3, e930 <__sinit+0x14>
    e928:	ldmia.w	sp!, {r4, lr}
    e92c:	b.w	e910 <__sfp_lock_release>
    e930:	ldr	r3, [pc, #16]	@ (e944 <__sinit+0x28>)
    e932:	str	r3, [r4, #32]
    e934:	ldr	r3, [pc, #16]	@ (e948 <__sinit+0x2c>)
    e936:	ldr	r3, [r3, #0]
    e938:	cmp	r3, #0
    e93a:	bne.n	e928 <__sinit+0xc>
    e93c:	bl	e8c8 <global_stdio_init.part.0>
    e940:	b.n	e928 <__sinit+0xc>
    e942:	nop
    e944:	.word	0x0000e889
    e948:	.word	0x20011e84

0000e94c <_fwalk_sglue>:
    e94c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e950:	mov	r7, r0
    e952:	mov	r8, r1
    e954:	mov	r4, r2
    e956:	movs	r6, #0
    e958:	ldrd	r9, r5, [r4, #4]
    e95c:	subs.w	r9, r9, #1
    e960:	bpl.n	e96e <_fwalk_sglue+0x22>
    e962:	ldr	r4, [r4, #0]
    e964:	cmp	r4, #0
    e966:	bne.n	e958 <_fwalk_sglue+0xc>
    e968:	mov	r0, r6
    e96a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e96e:	ldrh	r3, [r5, #12]
    e970:	cmp	r3, #1
    e972:	bls.n	e984 <_fwalk_sglue+0x38>
    e974:	ldrsh.w	r3, [r5, #14]
    e978:	adds	r3, #1
    e97a:	beq.n	e984 <_fwalk_sglue+0x38>
    e97c:	mov	r1, r5
    e97e:	mov	r0, r7
    e980:	blx	r8
    e982:	orrs	r6, r0
    e984:	adds	r5, #104	@ 0x68
    e986:	b.n	e95c <_fwalk_sglue+0x10>

0000e988 <sniprintf>:
    e988:	push	{r2, r3}
    e98a:	push	{r4, r5, lr}
    e98c:	ldr	r3, [pc, #96]	@ (e9f0 <sniprintf+0x68>)
    e98e:	subs	r4, r1, #0
    e990:	ldr	r5, [r3, #0]
    e992:	sub	sp, #116	@ 0x74
    e994:	bge.n	e9a8 <sniprintf+0x20>
    e996:	movs	r3, #139	@ 0x8b
    e998:	str	r3, [r5, #0]
    e99a:	mov.w	r0, #4294967295
    e99e:	add	sp, #116	@ 0x74
    e9a0:	ldmia.w	sp!, {r4, r5, lr}
    e9a4:	add	sp, #8
    e9a6:	bx	lr
    e9a8:	mov.w	r3, #520	@ 0x208
    e9ac:	strh.w	r3, [sp, #20]
    e9b0:	mov.w	r3, #0
    e9b4:	str	r3, [sp, #108]	@ 0x6c
    e9b6:	ite	ne
    e9b8:	addne.w	r3, r4, #4294967295
    e9bc:	moveq	r3, r4
    e9be:	str	r3, [sp, #16]
    e9c0:	str	r3, [sp, #28]
    e9c2:	movw	r3, #65535	@ 0xffff
    e9c6:	str	r0, [sp, #8]
    e9c8:	str	r0, [sp, #24]
    e9ca:	strh.w	r3, [sp, #22]
    e9ce:	ldr	r2, [sp, #128]	@ 0x80
    e9d0:	add	r3, sp, #132	@ 0x84
    e9d2:	add	r1, sp, #8
    e9d4:	mov	r0, r5
    e9d6:	str	r3, [sp, #4]
    e9d8:	bl	10c54 <_svfiprintf_r>
    e9dc:	adds	r3, r0, #1
    e9de:	itt	lt
    e9e0:	movlt	r3, #139	@ 0x8b
    e9e2:	strlt	r3, [r5, #0]
    e9e4:	cmp	r4, #0
    e9e6:	beq.n	e99e <sniprintf+0x16>
    e9e8:	ldr	r3, [sp, #8]
    e9ea:	movs	r2, #0
    e9ec:	strb	r2, [r3, #0]
    e9ee:	b.n	e99e <sniprintf+0x16>
    e9f0:	.word	0x200023f8

0000e9f4 <siprintf>:
    e9f4:	push	{r1, r2, r3}
    e9f6:	push	{r4, lr}
    e9f8:	sub	sp, #116	@ 0x74
    e9fa:	add	r3, sp, #124	@ 0x7c
    e9fc:	str	r0, [sp, #8]
    e9fe:	str	r0, [sp, #24]
    ea00:	mvn.w	r1, #2147483648	@ 0x80000000
    ea04:	ldr	r0, [pc, #40]	@ (ea30 <siprintf+0x3c>)
    ea06:	str	r1, [sp, #28]
    ea08:	str	r1, [sp, #16]
    ea0a:	ldr	r1, [pc, #40]	@ (ea34 <siprintf+0x40>)
    ea0c:	ldr.w	r2, [r3], #4
    ea10:	str	r1, [sp, #20]
    ea12:	movs	r4, #0
    ea14:	add	r1, sp, #8
    ea16:	ldr	r0, [r0, #0]
    ea18:	str	r3, [sp, #4]
    ea1a:	str	r4, [sp, #108]	@ 0x6c
    ea1c:	bl	10c54 <_svfiprintf_r>
    ea20:	ldr	r3, [sp, #8]
    ea22:	strb	r4, [r3, #0]
    ea24:	add	sp, #116	@ 0x74
    ea26:	ldmia.w	sp!, {r4, lr}
    ea2a:	add	sp, #12
    ea2c:	bx	lr
    ea2e:	nop
    ea30:	.word	0x200023f8
    ea34:	.word	0xffff0208

0000ea38 <siscanf>:
    ea38:	push	{r1, r2, r3}
    ea3a:	push	{r4, r5, r6, lr}
    ea3c:	sub	sp, #116	@ 0x74
    ea3e:	add	r4, sp, #132	@ 0x84
    ea40:	movs	r5, #0
    ea42:	mov.w	r2, #516	@ 0x204
    ea46:	ldr.w	r6, [r4], #4
    ea4a:	strh.w	r2, [sp, #20]
    ea4e:	str	r5, [sp, #108]	@ 0x6c
    ea50:	str	r0, [sp, #8]
    ea52:	str	r0, [sp, #24]
    ea54:	bl	ee80 <strlen>
    ea58:	ldr	r3, [pc, #44]	@ (ea88 <siscanf+0x50>)
    ea5a:	str	r0, [sp, #12]
    ea5c:	str	r0, [sp, #28]
    ea5e:	ldr	r0, [pc, #44]	@ (ea8c <siscanf+0x54>)
    ea60:	str	r3, [sp, #44]	@ 0x2c
    ea62:	movw	r3, #65535	@ 0xffff
    ea66:	strh.w	r3, [sp, #22]
    ea6a:	mov	r2, r6
    ea6c:	mov	r3, r4
    ea6e:	add	r1, sp, #8
    ea70:	ldr	r0, [r0, #0]
    ea72:	str	r5, [sp, #60]	@ 0x3c
    ea74:	str	r5, [sp, #80]	@ 0x50
    ea76:	str	r4, [sp, #4]
    ea78:	bl	10f00 <__ssvfiscanf_r>
    ea7c:	add	sp, #116	@ 0x74
    ea7e:	ldmia.w	sp!, {r4, r5, r6, lr}
    ea82:	add	sp, #12
    ea84:	bx	lr
    ea86:	nop
    ea88:	.word	0x0000eab3
    ea8c:	.word	0x200023f8

0000ea90 <__sread>:
    ea90:	push	{r4, lr}
    ea92:	mov	r4, r1
    ea94:	ldrsh.w	r1, [r1, #14]
    ea98:	bl	ed0c <_read_r>
    ea9c:	cmp	r0, #0
    ea9e:	itete	ge
    eaa0:	ldrge	r3, [r4, #84]	@ 0x54
    eaa2:	ldrhlt	r3, [r4, #12]
    eaa4:	addge	r3, r3, r0
    eaa6:	biclt.w	r3, r3, #4096	@ 0x1000
    eaaa:	ite	ge
    eaac:	strge	r3, [r4, #84]	@ 0x54
    eaae:	strhlt	r3, [r4, #12]
    eab0:	pop	{r4, pc}

0000eab2 <__seofread>:
    eab2:	movs	r0, #0
    eab4:	bx	lr

0000eab6 <__swrite>:
    eab6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eaba:	mov	r7, r3
    eabc:	ldrh	r3, [r1, #12]
    eabe:	lsls	r3, r3, #23
    eac0:	mov	r5, r0
    eac2:	mov	r4, r1
    eac4:	mov	r6, r2
    eac6:	bpl.n	ead4 <__swrite+0x1e>
    eac8:	ldrsh.w	r1, [r1, #14]
    eacc:	movs	r3, #2
    eace:	movs	r2, #0
    ead0:	bl	ece8 <_lseek_r>
    ead4:	ldrh	r3, [r4, #12]
    ead6:	ldrsh.w	r1, [r4, #14]
    eada:	bic.w	r3, r3, #4096	@ 0x1000
    eade:	strh	r3, [r4, #12]
    eae0:	mov	r2, r6
    eae2:	mov	r3, r7
    eae4:	mov	r0, r5
    eae6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eaea:	b.w	ed50 <_write_r>

0000eaee <__sseek>:
    eaee:	push	{r4, lr}
    eaf0:	mov	r4, r1
    eaf2:	ldrsh.w	r1, [r1, #14]
    eaf6:	bl	ece8 <_lseek_r>
    eafa:	adds	r3, r0, #1
    eafc:	ldrh	r3, [r4, #12]
    eafe:	itete	ne
    eb00:	strne	r0, [r4, #84]	@ 0x54
    eb02:	biceq.w	r3, r3, #4096	@ 0x1000
    eb06:	orrne.w	r3, r3, #4096	@ 0x1000
    eb0a:	strheq	r3, [r4, #12]
    eb0c:	it	ne
    eb0e:	strhne	r3, [r4, #12]
    eb10:	pop	{r4, pc}

0000eb12 <__sclose>:
    eb12:	ldrsh.w	r1, [r1, #14]
    eb16:	b.w	ecc8 <_close_r>

0000eb1a <_vdiprintf_r>:
    eb1a:	push	{r4, r5, r6, r7, lr}
    eb1c:	sub.w	sp, sp, #532	@ 0x214
    eb20:	mov	r6, r1
    eb22:	add	r7, sp, #16
    eb24:	mov.w	r1, #512	@ 0x200
    eb28:	str	r1, [sp, #12]
    eb2a:	str	r3, [sp, #0]
    eb2c:	mov	r1, r7
    eb2e:	mov	r3, r2
    eb30:	add	r2, sp, #12
    eb32:	mov	r5, r0
    eb34:	bl	eb78 <_vasniprintf_r>
    eb38:	mov	r4, r0
    eb3a:	cbz	r0, eb5e <_vdiprintf_r+0x44>
    eb3c:	mov	r2, r0
    eb3e:	ldr	r3, [sp, #12]
    eb40:	mov	r1, r6
    eb42:	mov	r0, r5
    eb44:	bl	ed50 <_write_r>
    eb48:	cmp	r4, r7
    eb4a:	str	r0, [sp, #12]
    eb4c:	beq.n	eb56 <_vdiprintf_r+0x3c>
    eb4e:	mov	r1, r4
    eb50:	mov	r0, r5
    eb52:	bl	fa5c <_free_r>
    eb56:	ldr	r0, [sp, #12]
    eb58:	add.w	sp, sp, #532	@ 0x214
    eb5c:	pop	{r4, r5, r6, r7, pc}
    eb5e:	mov.w	r0, #4294967295
    eb62:	b.n	eb58 <_vdiprintf_r+0x3e>

0000eb64 <vdiprintf>:
    eb64:	mov	r3, r2
    eb66:	mov	r2, r1
    eb68:	mov	r1, r0
    eb6a:	ldr	r0, [pc, #8]	@ (eb74 <vdiprintf+0x10>)
    eb6c:	ldr	r0, [r0, #0]
    eb6e:	b.w	eb1a <_vdiprintf_r>
    eb72:	nop
    eb74:	.word	0x200023f8

0000eb78 <_vasniprintf_r>:
    eb78:	push	{r4, r5, r6, lr}
    eb7a:	mov	r5, r2
    eb7c:	sub	sp, #104	@ 0x68
    eb7e:	ldr	r4, [r5, #0]
    eb80:	mov	r2, r3
    eb82:	cbz	r1, ebac <_vasniprintf_r+0x34>
    eb84:	cmp	r4, #0
    eb86:	itee	ne
    eb88:	movne.w	r3, #1544	@ 0x608
    eb8c:	moveq.w	r3, #648	@ 0x288
    eb90:	moveq	r1, #0
    eb92:	movs	r6, #0
    eb94:	cmp	r4, r6
    eb96:	strh.w	r3, [sp, #12]
    eb9a:	str	r6, [sp, #100]	@ 0x64
    eb9c:	str	r1, [sp, #0]
    eb9e:	str	r1, [sp, #16]
    eba0:	bge.n	ebb4 <_vasniprintf_r+0x3c>
    eba2:	movs	r3, #139	@ 0x8b
    eba4:	str	r3, [r0, #0]
    eba6:	movs	r0, #0
    eba8:	add	sp, #104	@ 0x68
    ebaa:	pop	{r4, r5, r6, pc}
    ebac:	mov.w	r3, #648	@ 0x288
    ebb0:	mov	r4, r1
    ebb2:	b.n	eb92 <_vasniprintf_r+0x1a>
    ebb4:	movw	r3, #65535	@ 0xffff
    ebb8:	strh.w	r3, [sp, #14]
    ebbc:	mov	r1, sp
    ebbe:	ldr	r3, [sp, #120]	@ 0x78
    ebc0:	str	r4, [sp, #8]
    ebc2:	str	r4, [sp, #20]
    ebc4:	bl	10c54 <_svfiprintf_r>
    ebc8:	cmp	r0, #0
    ebca:	blt.n	eba6 <_vasniprintf_r+0x2e>
    ebcc:	ldr	r3, [sp, #0]
    ebce:	str	r0, [r5, #0]
    ebd0:	strb	r6, [r3, #0]
    ebd2:	ldr	r0, [sp, #16]
    ebd4:	b.n	eba8 <_vasniprintf_r+0x30>

0000ebd6 <memcmp>:
    ebd6:	push	{r4, lr}
    ebd8:	subs	r1, #1
    ebda:	add	r2, r0
    ebdc:	cmp	r0, r2
    ebde:	bne.n	ebe4 <memcmp+0xe>
    ebe0:	movs	r0, #0
    ebe2:	b.n	ebf0 <memcmp+0x1a>
    ebe4:	ldrb	r3, [r0, #0]
    ebe6:	ldrb.w	r4, [r1, #1]!
    ebea:	cmp	r3, r4
    ebec:	beq.n	ebf2 <memcmp+0x1c>
    ebee:	subs	r0, r3, r4
    ebf0:	pop	{r4, pc}
    ebf2:	adds	r0, #1
    ebf4:	b.n	ebdc <memcmp+0x6>

0000ebf6 <memmove>:
    ebf6:	cmp	r0, r1
    ebf8:	push	{r4, lr}
    ebfa:	add.w	r4, r1, r2
    ebfe:	bls.n	ec06 <memmove+0x10>
    ec00:	cmp	r4, r0
    ec02:	mov	r3, r4
    ec04:	bhi.n	ec16 <memmove+0x20>
    ec06:	subs	r3, r0, #1
    ec08:	cmp	r1, r4
    ec0a:	beq.n	ec1e <memmove+0x28>
    ec0c:	ldrb.w	r2, [r1], #1
    ec10:	strb.w	r2, [r3, #1]!
    ec14:	b.n	ec08 <memmove+0x12>
    ec16:	add	r2, r0
    ec18:	mov	r1, r0
    ec1a:	cmp	r2, r1
    ec1c:	bne.n	ec20 <memmove+0x2a>
    ec1e:	pop	{r4, pc}
    ec20:	ldrb.w	r4, [r3, #-1]!
    ec24:	strb.w	r4, [r2, #-1]!
    ec28:	b.n	ec1a <memmove+0x24>

0000ec2a <strlcat>:
    ec2a:	push	{r4, r5, r6, lr}
    ec2c:	mov	r4, r0
    ec2e:	adds	r6, r2, r4
    ec30:	mov	r0, r1
    ec32:	mov	r1, r4
    ec34:	cmp	r1, r6
    ec36:	mov	r3, r1
    ec38:	bne.n	ec4a <strlcat+0x20>
    ec3a:	subs	r4, r3, r4
    ec3c:	subs	r2, r2, r4
    ec3e:	subs	r6, r2, #1
    ec40:	cbnz	r2, ec54 <strlcat+0x2a>
    ec42:	bl	ee80 <strlen>
    ec46:	add	r0, r4
    ec48:	pop	{r4, r5, r6, pc}
    ec4a:	ldrb	r5, [r3, #0]
    ec4c:	adds	r1, #1
    ec4e:	cmp	r5, #0
    ec50:	bne.n	ec34 <strlcat+0xa>
    ec52:	b.n	ec3a <strlcat+0x10>
    ec54:	mov	r5, r0
    ec56:	mov	r2, r5
    ec58:	ldrb.w	r1, [r5], #1
    ec5c:	cbnz	r1, ec66 <strlcat+0x3c>
    ec5e:	subs	r2, r2, r0
    ec60:	strb	r1, [r3, #0]
    ec62:	adds	r0, r2, r4
    ec64:	b.n	ec48 <strlcat+0x1e>
    ec66:	cmp	r6, #0
    ec68:	beq.n	ec56 <strlcat+0x2c>
    ec6a:	strb.w	r1, [r3], #1
    ec6e:	subs	r6, #1
    ec70:	b.n	ec56 <strlcat+0x2c>

0000ec72 <strlcpy>:
    ec72:	push	{r4, lr}
    ec74:	mov	r3, r1
    ec76:	cbnz	r2, ec92 <strlcpy+0x20>
    ec78:	ldrb.w	r2, [r3], #1
    ec7c:	cmp	r2, #0
    ec7e:	bne.n	ec78 <strlcpy+0x6>
    ec80:	b.n	ec8c <strlcpy+0x1a>
    ec82:	ldrb.w	r4, [r3], #1
    ec86:	strb.w	r4, [r0], #1
    ec8a:	cbnz	r4, ec92 <strlcpy+0x20>
    ec8c:	subs	r0, r3, r1
    ec8e:	subs	r0, #1
    ec90:	pop	{r4, pc}
    ec92:	subs	r2, #1
    ec94:	bne.n	ec82 <strlcpy+0x10>
    ec96:	strb	r2, [r0, #0]
    ec98:	b.n	ec78 <strlcpy+0x6>

0000ec9a <strncmp>:
    ec9a:	push	{r4, lr}
    ec9c:	cbz	r2, ecba <strncmp+0x20>
    ec9e:	subs	r1, #1
    eca0:	adds	r4, r0, r2
    eca2:	ldrb.w	r2, [r0], #1
    eca6:	ldrb.w	r3, [r1, #1]!
    ecaa:	cmp	r2, r3
    ecac:	bne.n	ecb6 <strncmp+0x1c>
    ecae:	cmp	r0, r4
    ecb0:	beq.n	ecb6 <strncmp+0x1c>
    ecb2:	cmp	r2, #0
    ecb4:	bne.n	eca2 <strncmp+0x8>
    ecb6:	subs	r0, r2, r3
    ecb8:	pop	{r4, pc}
    ecba:	mov	r0, r2
    ecbc:	b.n	ecb8 <strncmp+0x1e>
	...

0000ecc0 <_localeconv_r>:
    ecc0:	ldr	r0, [pc, #0]	@ (ecc4 <_localeconv_r+0x4>)
    ecc2:	bx	lr
    ecc4:	.word	0x20002324

0000ecc8 <_close_r>:
    ecc8:	push	{r3, r4, r5, lr}
    ecca:	ldr	r5, [pc, #24]	@ (ece4 <_close_r+0x1c>)
    eccc:	movs	r3, #0
    ecce:	mov	r4, r0
    ecd0:	mov	r0, r1
    ecd2:	str	r3, [r5, #0]
    ecd4:	bl	ba24 <_close>
    ecd8:	adds	r3, r0, #1
    ecda:	bne.n	ece2 <_close_r+0x1a>
    ecdc:	ldr	r3, [r5, #0]
    ecde:	cbz	r3, ece2 <_close_r+0x1a>
    ece0:	str	r3, [r4, #0]
    ece2:	pop	{r3, r4, r5, pc}
    ece4:	.word	0x20012094

0000ece8 <_lseek_r>:
    ece8:	push	{r3, r4, r5, lr}
    ecea:	ldr	r5, [pc, #28]	@ (ed08 <_lseek_r+0x20>)
    ecec:	mov	r4, r0
    ecee:	mov	r0, r1
    ecf0:	mov	r1, r2
    ecf2:	movs	r2, #0
    ecf4:	str	r2, [r5, #0]
    ecf6:	mov	r2, r3
    ecf8:	bl	ba38 <_lseek>
    ecfc:	adds	r3, r0, #1
    ecfe:	bne.n	ed06 <_lseek_r+0x1e>
    ed00:	ldr	r3, [r5, #0]
    ed02:	cbz	r3, ed06 <_lseek_r+0x1e>
    ed04:	str	r3, [r4, #0]
    ed06:	pop	{r3, r4, r5, pc}
    ed08:	.word	0x20012094

0000ed0c <_read_r>:
    ed0c:	push	{r3, r4, r5, lr}
    ed0e:	ldr	r5, [pc, #28]	@ (ed2c <_read_r+0x20>)
    ed10:	mov	r4, r0
    ed12:	mov	r0, r1
    ed14:	mov	r1, r2
    ed16:	movs	r2, #0
    ed18:	str	r2, [r5, #0]
    ed1a:	mov	r2, r3
    ed1c:	bl	ba20 <_read>
    ed20:	adds	r3, r0, #1
    ed22:	bne.n	ed2a <_read_r+0x1e>
    ed24:	ldr	r3, [r5, #0]
    ed26:	cbz	r3, ed2a <_read_r+0x1e>
    ed28:	str	r3, [r4, #0]
    ed2a:	pop	{r3, r4, r5, pc}
    ed2c:	.word	0x20012094

0000ed30 <_sbrk_r>:
    ed30:	push	{r3, r4, r5, lr}
    ed32:	ldr	r5, [pc, #24]	@ (ed4c <_sbrk_r+0x1c>)
    ed34:	movs	r3, #0
    ed36:	mov	r4, r0
    ed38:	mov	r0, r1
    ed3a:	str	r3, [r5, #0]
    ed3c:	bl	b9f4 <_sbrk>
    ed40:	adds	r3, r0, #1
    ed42:	bne.n	ed4a <_sbrk_r+0x1a>
    ed44:	ldr	r3, [r5, #0]
    ed46:	cbz	r3, ed4a <_sbrk_r+0x1a>
    ed48:	str	r3, [r4, #0]
    ed4a:	pop	{r3, r4, r5, pc}
    ed4c:	.word	0x20012094

0000ed50 <_write_r>:
    ed50:	push	{r3, r4, r5, lr}
    ed52:	ldr	r5, [pc, #28]	@ (ed70 <_write_r+0x20>)
    ed54:	mov	r4, r0
    ed56:	mov	r0, r1
    ed58:	mov	r1, r2
    ed5a:	movs	r2, #0
    ed5c:	str	r2, [r5, #0]
    ed5e:	mov	r2, r3
    ed60:	bl	c808 <_write>
    ed64:	adds	r3, r0, #1
    ed66:	bne.n	ed6e <_write_r+0x1e>
    ed68:	ldr	r3, [r5, #0]
    ed6a:	cbz	r3, ed6e <_write_r+0x1e>
    ed6c:	str	r3, [r4, #0]
    ed6e:	pop	{r3, r4, r5, pc}
    ed70:	.word	0x20012094

0000ed74 <__errno>:
    ed74:	ldr	r3, [pc, #4]	@ (ed7c <__errno+0x8>)
    ed76:	ldr	r0, [r3, #0]
    ed78:	bx	lr
    ed7a:	nop
    ed7c:	.word	0x200023f8

0000ed80 <__libc_init_array>:
    ed80:	push	{r4, r5, r6, lr}
    ed82:	ldr	r5, [pc, #52]	@ (edb8 <__libc_init_array+0x38>)
    ed84:	ldr	r4, [pc, #52]	@ (edbc <__libc_init_array+0x3c>)
    ed86:	subs	r4, r4, r5
    ed88:	asrs	r4, r4, #2
    ed8a:	movs	r6, #0
    ed8c:	cmp	r6, r4
    ed8e:	bne.n	eda4 <__libc_init_array+0x24>
    ed90:	ldr	r5, [pc, #44]	@ (edc0 <__libc_init_array+0x40>)
    ed92:	ldr	r4, [pc, #48]	@ (edc4 <__libc_init_array+0x44>)
    ed94:	bl	120e8 <___init_veneer>
    ed98:	subs	r4, r4, r5
    ed9a:	asrs	r4, r4, #2
    ed9c:	movs	r6, #0
    ed9e:	cmp	r6, r4
    eda0:	bne.n	edae <__libc_init_array+0x2e>
    eda2:	pop	{r4, r5, r6, pc}
    eda4:	ldr.w	r3, [r5], #4
    eda8:	blx	r3
    edaa:	adds	r6, #1
    edac:	b.n	ed8c <__libc_init_array+0xc>
    edae:	ldr.w	r3, [r5], #4
    edb2:	blx	r3
    edb4:	adds	r6, #1
    edb6:	b.n	ed9e <__libc_init_array+0x1e>
    edb8:	.word	0x600024c0
    edbc:	.word	0x600024c0
    edc0:	.word	0x600024c0
    edc4:	.word	0x600024d4

0000edc8 <__retarget_lock_init_recursive>:
    edc8:	bx	lr

0000edca <__retarget_lock_acquire_recursive>:
    edca:	bx	lr

0000edcc <__retarget_lock_release_recursive>:
    edcc:	bx	lr

0000edce <strcpy>:
    edce:	mov	r3, r0
    edd0:	ldrb.w	r2, [r1], #1
    edd4:	strb.w	r2, [r3], #1
    edd8:	cmp	r2, #0
    edda:	bne.n	edd0 <strcpy+0x2>
    eddc:	bx	lr
	...

0000ede0 <memchr>:
    ede0:	and.w	r1, r1, #255	@ 0xff
    ede4:	cmp	r2, #16
    ede6:	blt.n	ee40 <memchr+0x60>
    ede8:	tst.w	r0, #7
    edec:	beq.n	ee00 <memchr+0x20>
    edee:	ldrb.w	r3, [r0], #1
    edf2:	subs	r2, #1
    edf4:	cmp	r3, r1
    edf6:	beq.n	ee54 <memchr+0x74>
    edf8:	tst.w	r0, #7
    edfc:	cbz	r2, ee50 <memchr+0x70>
    edfe:	bne.n	edee <memchr+0xe>
    ee00:	push	{r4, r5, r6, r7}
    ee02:	orr.w	r1, r1, r1, lsl #8
    ee06:	orr.w	r1, r1, r1, lsl #16
    ee0a:	bic.w	r4, r2, #7
    ee0e:	mvns.w	r7, #0
    ee12:	movs	r3, #0
    ee14:	ldrd	r5, r6, [r0], #8
    ee18:	subs	r4, #8
    ee1a:	eor.w	r5, r5, r1
    ee1e:	eor.w	r6, r6, r1
    ee22:	uadd8	r5, r5, r7
    ee26:	sel	r5, r3, r7
    ee2a:	uadd8	r6, r6, r7
    ee2e:	sel	r6, r5, r7
    ee32:	cbnz	r6, ee58 <memchr+0x78>
    ee34:	bne.n	ee14 <memchr+0x34>
    ee36:	pop	{r4, r5, r6, r7}
    ee38:	and.w	r1, r1, #255	@ 0xff
    ee3c:	and.w	r2, r2, #7
    ee40:	cbz	r2, ee50 <memchr+0x70>
    ee42:	ldrb.w	r3, [r0], #1
    ee46:	subs	r2, #1
    ee48:	eor.w	r3, r3, r1
    ee4c:	cbz	r3, ee54 <memchr+0x74>
    ee4e:	bne.n	ee42 <memchr+0x62>
    ee50:	movs	r0, #0
    ee52:	bx	lr
    ee54:	subs	r0, #1
    ee56:	bx	lr
    ee58:	cmp	r5, #0
    ee5a:	itte	eq
    ee5c:	moveq	r5, r6
    ee5e:	subeq	r0, #3
    ee60:	subne	r0, #7
    ee62:	tst.w	r5, #1
    ee66:	bne.n	ee78 <memchr+0x98>
    ee68:	adds	r0, #1
    ee6a:	tst.w	r5, #256	@ 0x100
    ee6e:	ittt	eq
    ee70:	addeq	r0, #1
    ee72:	tsteq.w	r5, #98304	@ 0x18000
    ee76:	addeq	r0, #1
    ee78:	pop	{r4, r5, r6, r7}
    ee7a:	subs	r0, #1
    ee7c:	bx	lr
    ee7e:	nop

0000ee80 <strlen>:
    ee80:	mov	r3, r0
    ee82:	ldrb.w	r2, [r3], #1
    ee86:	cmp	r2, #0
    ee88:	bne.n	ee82 <strlen+0x2>
    ee8a:	subs	r0, r3, r0
    ee8c:	subs	r0, #1
    ee8e:	bx	lr

0000ee90 <nan>:
    ee90:	vldr	d0, [pc, #4]	@ ee98 <nan+0x8>
    ee94:	bx	lr
    ee96:	nop
    ee98:	.word	0x00000000
    ee9c:	.word	0x7ff80000

0000eea0 <nanf>:
    eea0:	vldr	s0, [pc, #4]	@ eea8 <nanf+0x8>
    eea4:	bx	lr
    eea6:	nop
    eea8:	.word	0x7fc00000

0000eeac <quorem>:
    eeac:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eeb0:	ldr	r3, [r0, #16]
    eeb2:	ldr	r4, [r1, #16]
    eeb4:	cmp	r3, r4
    eeb6:	mov	r7, r0
    eeb8:	blt.n	efb8 <quorem+0x10c>
    eeba:	subs	r4, #1
    eebc:	add.w	r8, r1, #20
    eec0:	lsls	r3, r4, #2
    eec2:	add.w	r5, r0, #20
    eec6:	str	r3, [sp, #0]
    eec8:	add.w	r3, r5, r4, lsl #2
    eecc:	str	r3, [sp, #4]
    eece:	ldr.w	r3, [r8, r4, lsl #2]
    eed2:	ldr.w	r2, [r5, r4, lsl #2]
    eed6:	adds	r3, #1
    eed8:	cmp	r2, r3
    eeda:	add.w	r9, r8, r4, lsl #2
    eede:	udiv	r6, r2, r3
    eee2:	bcc.n	ef42 <quorem+0x96>
    eee4:	mov.w	sl, #0
    eee8:	mov	ip, r8
    eeea:	mov	lr, r5
    eeec:	mov	fp, sl
    eeee:	ldr.w	r3, [ip], #4
    eef2:	uxth	r0, r3
    eef4:	mla	r0, r6, r0, sl
    eef8:	lsrs	r2, r0, #16
    eefa:	lsrs	r3, r3, #16
    eefc:	mla	r3, r6, r3, r2
    ef00:	ldr.w	r2, [lr]
    ef04:	uxth	r0, r0
    ef06:	uxth	r2, r2
    ef08:	subs	r2, r2, r0
    ef0a:	add	r2, fp
    ef0c:	ldr.w	r0, [lr]
    ef10:	mov.w	sl, r3, lsr #16
    ef14:	uxth	r3, r3
    ef16:	rsb	r3, r3, r2, asr #16
    ef1a:	add.w	r3, r3, r0, lsr #16
    ef1e:	uxth	r2, r2
    ef20:	orr.w	r2, r2, r3, lsl #16
    ef24:	cmp	r9, ip
    ef26:	str.w	r2, [lr], #4
    ef2a:	mov.w	fp, r3, asr #16
    ef2e:	bcs.n	eeee <quorem+0x42>
    ef30:	ldr	r3, [sp, #0]
    ef32:	ldr	r3, [r5, r3]
    ef34:	cbnz	r3, ef42 <quorem+0x96>
    ef36:	ldr	r3, [sp, #4]
    ef38:	subs	r3, #4
    ef3a:	cmp	r5, r3
    ef3c:	mov	r2, r3
    ef3e:	bcc.n	efa0 <quorem+0xf4>
    ef40:	str	r4, [r7, #16]
    ef42:	mov	r0, r7
    ef44:	bl	10700 <__mcmp>
    ef48:	cmp	r0, #0
    ef4a:	blt.n	ef98 <quorem+0xec>
    ef4c:	mov	r1, r5
    ef4e:	movs	r0, #0
    ef50:	ldr.w	r2, [r8], #4
    ef54:	ldr.w	ip, [r1]
    ef58:	uxth.w	lr, r2
    ef5c:	uxth.w	r3, ip
    ef60:	sub.w	r3, r3, lr
    ef64:	add	r3, r0
    ef66:	lsrs	r2, r2, #16
    ef68:	rsb	r2, r2, r3, asr #16
    ef6c:	add.w	r2, r2, ip, lsr #16
    ef70:	uxth	r3, r3
    ef72:	orr.w	r3, r3, r2, lsl #16
    ef76:	cmp	r9, r8
    ef78:	str.w	r3, [r1], #4
    ef7c:	mov.w	r0, r2, asr #16
    ef80:	bcs.n	ef50 <quorem+0xa4>
    ef82:	ldr.w	r2, [r5, r4, lsl #2]
    ef86:	add.w	r3, r5, r4, lsl #2
    ef8a:	cbnz	r2, ef96 <quorem+0xea>
    ef8c:	subs	r3, #4
    ef8e:	cmp	r5, r3
    ef90:	mov	r2, r3
    ef92:	bcc.n	efac <quorem+0x100>
    ef94:	str	r4, [r7, #16]
    ef96:	adds	r6, #1
    ef98:	mov	r0, r6
    ef9a:	add	sp, #12
    ef9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efa0:	ldr	r2, [r2, #0]
    efa2:	subs	r3, #4
    efa4:	cmp	r2, #0
    efa6:	bne.n	ef40 <quorem+0x94>
    efa8:	subs	r4, #1
    efaa:	b.n	ef3a <quorem+0x8e>
    efac:	ldr	r2, [r2, #0]
    efae:	subs	r3, #4
    efb0:	cmp	r2, #0
    efb2:	bne.n	ef94 <quorem+0xe8>
    efb4:	subs	r4, #1
    efb6:	b.n	ef8e <quorem+0xe2>
    efb8:	movs	r0, #0
    efba:	b.n	ef9a <quorem+0xee>
    efbc:	movs	r0, r0
	...

0000efc0 <_dtoa_r>:
    efc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    efc4:	vpush	{d8}
    efc8:	ldr	r7, [r0, #28]
    efca:	sub	sp, #68	@ 0x44
    efcc:	vstr	d0, [sp, #8]
    efd0:	vmov	r4, r5, d0
    efd4:	ldr	r6, [sp, #112]	@ 0x70
    efd6:	str	r1, [sp, #24]
    efd8:	mov	r9, r0
    efda:	str	r2, [sp, #36]	@ 0x24
    efdc:	str	r3, [sp, #48]	@ 0x30
    efde:	cbnz	r7, f000 <_dtoa_r+0x40>
    efe0:	movs	r0, #16
    efe2:	bl	cd14 <malloc>
    efe6:	mov	r2, r0
    efe8:	str.w	r0, [r9, #28]
    efec:	cbnz	r0, eff8 <_dtoa_r+0x38>
    efee:	ldr	r3, [pc, #632]	@ (f268 <_dtoa_r+0x2a8>)
    eff0:	movs	r1, #239	@ 0xef
    eff2:	ldr	r0, [pc, #632]	@ (f26c <_dtoa_r+0x2ac>)
    eff4:	bl	116c8 <__assert_func>
    eff8:	strd	r7, r7, [r0, #4]
    effc:	str	r7, [r0, #0]
    effe:	str	r7, [r0, #12]
    f000:	ldr.w	r3, [r9, #28]
    f004:	ldr	r1, [r3, #0]
    f006:	cbz	r1, f020 <_dtoa_r+0x60>
    f008:	ldr	r2, [r3, #4]
    f00a:	str	r2, [r1, #4]
    f00c:	movs	r3, #1
    f00e:	lsls	r3, r2
    f010:	str	r3, [r1, #8]
    f012:	mov	r0, r9
    f014:	bl	10208 <_Bfree>
    f018:	ldr.w	r3, [r9, #28]
    f01c:	movs	r2, #0
    f01e:	str	r2, [r3, #0]
    f020:	subs	r3, r5, #0
    f022:	ittet	lt
    f024:	biclt.w	r3, r3, #2147483648	@ 0x80000000
    f028:	strlt	r3, [sp, #12]
    f02a:	movge	r3, #0
    f02c:	movlt	r2, #1
    f02e:	ite	ge
    f030:	strge	r3, [r6, #0]
    f032:	strlt	r2, [r6, #0]
    f034:	ldr	r3, [pc, #568]	@ (f270 <_dtoa_r+0x2b0>)
    f036:	ldr	r6, [sp, #12]
    f038:	bics	r3, r6
    f03a:	bne.n	f05e <_dtoa_r+0x9e>
    f03c:	ldr	r2, [sp, #48]	@ 0x30
    f03e:	movw	r3, #9999	@ 0x270f
    f042:	str	r3, [r2, #0]
    f044:	ubfx	r3, r6, #0, #20
    f048:	orrs	r3, r4
    f04a:	beq.w	f9f8 <_dtoa_r+0xa38>
    f04e:	ldr	r3, [sp, #116]	@ 0x74
    f050:	ldr	r7, [pc, #544]	@ (f274 <_dtoa_r+0x2b4>)
    f052:	cmp	r3, #0
    f054:	beq.w	fa06 <_dtoa_r+0xa46>
    f058:	adds	r3, r7, #3
    f05a:	b.w	fa02 <_dtoa_r+0xa42>
    f05e:	vldr	d8, [sp, #8]
    f062:	vcmp.f64	d8, #0.0
    f066:	vmrs	APSR_nzcv, fpscr
    f06a:	bne.n	f082 <_dtoa_r+0xc2>
    f06c:	ldr	r2, [sp, #48]	@ 0x30
    f06e:	movs	r3, #1
    f070:	str	r3, [r2, #0]
    f072:	ldr	r3, [sp, #116]	@ 0x74
    f074:	cbz	r3, f07c <_dtoa_r+0xbc>
    f076:	ldr	r2, [sp, #116]	@ 0x74
    f078:	ldr	r3, [pc, #508]	@ (f278 <_dtoa_r+0x2b8>)
    f07a:	str	r3, [r2, #0]
    f07c:	ldr	r7, [pc, #508]	@ (f27c <_dtoa_r+0x2bc>)
    f07e:	b.w	fa06 <_dtoa_r+0xa46>
    f082:	add	r2, sp, #56	@ 0x38
    f084:	add	r1, sp, #60	@ 0x3c
    f086:	mov	r0, r9
    f088:	vmov.f64	d0, d8
    f08c:	bl	10940 <__d2b>
    f090:	ubfx	r3, r6, #20, #11
    f094:	ldr	r2, [sp, #56]	@ 0x38
    f096:	str	r0, [sp, #4]
    f098:	cmp	r3, #0
    f09a:	beq.n	f128 <_dtoa_r+0x168>
    f09c:	vmov.f64	d7, d8
    f0a0:	vmov	r1, s17
    f0a4:	ubfx	r1, r1, #0, #20
    f0a8:	orr.w	r1, r1, #1069547520	@ 0x3fc00000
    f0ac:	orr.w	r1, r1, #3145728	@ 0x300000
    f0b0:	subw	r3, r3, #1023	@ 0x3ff
    f0b4:	movs	r5, #0
    f0b6:	vmov	s15, r1
    f0ba:	vmov.f64	d6, #120	@ 0x3fc00000  1.5
    f0be:	vldr	d5, [pc, #400]	@ f250 <_dtoa_r+0x290>
    f0c2:	vsub.f64	d7, d7, d6
    f0c6:	vldr	d6, [pc, #400]	@ f258 <_dtoa_r+0x298>
    f0ca:	vfma.f64	d6, d7, d5
    f0ce:	vldr	d5, [pc, #400]	@ f260 <_dtoa_r+0x2a0>
    f0d2:	vmov	s15, r3
    f0d6:	vcvt.f64.s32	d4, s15
    f0da:	vmov.f64	d7, d6
    f0de:	vfma.f64	d7, d4, d5
    f0e2:	vcvt.s32.f64	s13, d7
    f0e6:	vcmpe.f64	d7, #0.0
    f0ea:	vmrs	APSR_nzcv, fpscr
    f0ee:	vmov	r8, s13
    f0f2:	bpl.n	f106 <_dtoa_r+0x146>
    f0f4:	vcvt.f64.s32	d6, s13
    f0f8:	vcmp.f64	d6, d7
    f0fc:	vmrs	APSR_nzcv, fpscr
    f100:	it	ne
    f102:	addne.w	r8, r8, #4294967295
    f106:	cmp.w	r8, #22
    f10a:	bhi.n	f164 <_dtoa_r+0x1a4>
    f10c:	ldr	r1, [pc, #368]	@ (f280 <_dtoa_r+0x2c0>)
    f10e:	add.w	r1, r1, r8, lsl #3
    f112:	vldr	d7, [r1]
    f116:	vcmpe.f64	d8, d7
    f11a:	vmrs	APSR_nzcv, fpscr
    f11e:	bpl.n	f124 <_dtoa_r+0x164>
    f120:	add.w	r8, r8, #4294967295
    f124:	movs	r1, #0
    f126:	b.n	f166 <_dtoa_r+0x1a6>
    f128:	ldr	r3, [sp, #60]	@ 0x3c
    f12a:	add	r3, r2
    f12c:	addw	r1, r3, #1074	@ 0x432
    f130:	cmp	r1, #32
    f132:	itttt	gt
    f134:	rsbgt	r1, r1, #64	@ 0x40
    f138:	lslgt	r6, r1
    f13a:	addwgt	r1, r3, #1042	@ 0x412
    f13e:	lsrgt.w	r1, r4, r1
    f142:	itet	le
    f144:	rsble	r1, r1, #32
    f148:	orrgt	r1, r6
    f14a:	lslle.w	r1, r4, r1
    f14e:	vmov	s15, r1
    f152:	vcvt.f64.u32	d7, s15
    f156:	subs	r3, #1
    f158:	vmov	r1, s15
    f15c:	movs	r5, #1
    f15e:	sub.w	r1, r1, #32505856	@ 0x1f00000
    f162:	b.n	f0b6 <_dtoa_r+0xf6>
    f164:	movs	r1, #1
    f166:	subs	r2, r2, r3
    f168:	subs	r3, r2, #1
    f16a:	str	r3, [sp, #20]
    f16c:	ittte	mi
    f16e:	rsbmi	r3, r2, #1
    f172:	movmi	r2, #0
    f174:	strmi	r2, [sp, #20]
    f176:	movpl	r3, #0
    f178:	cmp.w	r8, #0
    f17c:	str	r1, [sp, #44]	@ 0x2c
    f17e:	blt.n	f1b4 <_dtoa_r+0x1f4>
    f180:	ldr	r2, [sp, #20]
    f182:	str.w	r8, [sp, #40]	@ 0x28
    f186:	add	r2, r8
    f188:	str	r2, [sp, #20]
    f18a:	movs	r2, #0
    f18c:	str	r2, [sp, #28]
    f18e:	ldr	r2, [sp, #24]
    f190:	cmp	r2, #9
    f192:	bhi.n	f21e <_dtoa_r+0x25e>
    f194:	cmp	r2, #5
    f196:	itt	gt
    f198:	subgt	r2, #4
    f19a:	strgt	r2, [sp, #24]
    f19c:	ldr	r2, [sp, #24]
    f19e:	sub.w	r2, r2, #2
    f1a2:	ite	gt
    f1a4:	movgt	r4, #0
    f1a6:	movle	r4, #1
    f1a8:	cmp	r2, #3
    f1aa:	bhi.n	f234 <_dtoa_r+0x274>
    f1ac:	tbb	[pc, r2]
    f1b0:	.word	0x0a163533
    f1b4:	rsb	r2, r8, #0
    f1b8:	str	r2, [sp, #28]
    f1ba:	movs	r2, #0
    f1bc:	sub.w	r3, r3, r8
    f1c0:	str	r2, [sp, #40]	@ 0x28
    f1c2:	b.n	f18e <_dtoa_r+0x1ce>
    f1c4:	movs	r2, #1
    f1c6:	str	r2, [sp, #32]
    f1c8:	ldr	r2, [sp, #36]	@ 0x24
    f1ca:	add.w	fp, r8, r2
    f1ce:	add.w	sl, fp, #1
    f1d2:	mov	r2, sl
    f1d4:	cmp	r2, #1
    f1d6:	it	lt
    f1d8:	movlt	r2, #1
    f1da:	b.n	f1ea <_dtoa_r+0x22a>
    f1dc:	movs	r2, #1
    f1de:	str	r2, [sp, #32]
    f1e0:	ldr	r2, [sp, #36]	@ 0x24
    f1e2:	cmp	r2, #0
    f1e4:	ble.n	f23a <_dtoa_r+0x27a>
    f1e6:	mov	fp, r2
    f1e8:	mov	sl, r2
    f1ea:	ldr.w	r7, [r9, #28]
    f1ee:	movs	r1, #0
    f1f0:	movs	r0, #4
    f1f2:	add.w	r6, r0, #20
    f1f6:	cmp	r6, r2
    f1f8:	bls.n	f248 <_dtoa_r+0x288>
    f1fa:	str	r1, [r7, #4]
    f1fc:	mov	r0, r9
    f1fe:	str	r3, [sp, #16]
    f200:	bl	10188 <_Balloc>
    f204:	ldr	r3, [sp, #16]
    f206:	mov	r7, r0
    f208:	cmp	r0, #0
    f20a:	bne.n	f288 <_dtoa_r+0x2c8>
    f20c:	ldr	r3, [pc, #116]	@ (f284 <_dtoa_r+0x2c4>)
    f20e:	mov	r2, r0
    f210:	movw	r1, #431	@ 0x1af
    f214:	b.n	eff2 <_dtoa_r+0x32>
    f216:	movs	r2, #0
    f218:	b.n	f1de <_dtoa_r+0x21e>
    f21a:	movs	r2, #0
    f21c:	b.n	f1c6 <_dtoa_r+0x206>
    f21e:	movs	r4, #1
    f220:	movs	r2, #0
    f222:	str	r2, [sp, #24]
    f224:	str	r4, [sp, #32]
    f226:	mov.w	fp, #4294967295
    f22a:	movs	r1, #0
    f22c:	mov	sl, fp
    f22e:	movs	r2, #18
    f230:	str	r1, [sp, #36]	@ 0x24
    f232:	b.n	f1ea <_dtoa_r+0x22a>
    f234:	movs	r2, #1
    f236:	str	r2, [sp, #32]
    f238:	b.n	f226 <_dtoa_r+0x266>
    f23a:	mov.w	fp, #1
    f23e:	mov	sl, fp
    f240:	mov	r2, fp
    f242:	str.w	fp, [sp, #36]	@ 0x24
    f246:	b.n	f1ea <_dtoa_r+0x22a>
    f248:	adds	r1, #1
    f24a:	lsls	r0, r0, #1
    f24c:	b.n	f1f2 <_dtoa_r+0x232>
    f24e:	nop
    f250:	.word	0x636f4361
    f254:	.word	0x3fd287a7
    f258:	.word	0x8b60c8b3
    f25c:	.word	0x3fc68a28
    f260:	.word	0x509f79fb
    f264:	.word	0x3fd34413
    f268:	.word	0x20001ca7
    f26c:	.word	0x20001cbe
    f270:	.word	0x7ff00000
    f274:	.word	0x20001ca3
    f278:	.word	0x200013f0
    f27c:	.word	0x200013ef
    f280:	.word	0x20000328
    f284:	.word	0x20001d17
    f288:	ldr.w	r2, [r9, #28]
    f28c:	cmp.w	sl, #14
    f290:	str	r0, [r2, #0]
    f292:	bhi.n	f372 <_dtoa_r+0x3b2>
    f294:	cmp	r4, #0
    f296:	beq.n	f372 <_dtoa_r+0x3b2>
    f298:	cmp.w	r8, #0
    f29c:	ble.w	f408 <_dtoa_r+0x448>
    f2a0:	ldr	r2, [pc, #800]	@ (f5c4 <_dtoa_r+0x604>)
    f2a2:	and.w	r1, r8, #15
    f2a6:	add.w	r2, r2, r1, lsl #3
    f2aa:	tst.w	r8, #256	@ 0x100
    f2ae:	vldr	d7, [r2]
    f2b2:	mov.w	r1, r8, asr #4
    f2b6:	beq.w	f3f0 <_dtoa_r+0x430>
    f2ba:	ldr	r2, [pc, #780]	@ (f5c8 <_dtoa_r+0x608>)
    f2bc:	vldr	d6, [r2, #32]
    f2c0:	vdiv.f64	d6, d8, d6
    f2c4:	vstr	d6, [sp, #8]
    f2c8:	and.w	r1, r1, #15
    f2cc:	movs	r2, #3
    f2ce:	ldr	r0, [pc, #760]	@ (f5c8 <_dtoa_r+0x608>)
    f2d0:	cmp	r1, #0
    f2d2:	bne.w	f3f4 <_dtoa_r+0x434>
    f2d6:	vldr	d6, [sp, #8]
    f2da:	vdiv.f64	d7, d6, d7
    f2de:	vstr	d7, [sp, #8]
    f2e2:	ldr	r1, [sp, #44]	@ 0x2c
    f2e4:	vldr	d7, [sp, #8]
    f2e8:	cmp	r1, #0
    f2ea:	beq.w	f454 <_dtoa_r+0x494>
    f2ee:	vmov.f64	d6, #112	@ 0x3f800000  1.0
    f2f2:	vcmpe.f64	d7, d6
    f2f6:	vmrs	APSR_nzcv, fpscr
    f2fa:	bpl.w	f454 <_dtoa_r+0x494>
    f2fe:	cmp.w	sl, #0
    f302:	beq.w	f454 <_dtoa_r+0x494>
    f306:	cmp.w	fp, #0
    f30a:	ble.n	f36e <_dtoa_r+0x3ae>
    f30c:	vmov.f64	d6, #36	@ 0x41200000  10.0
    f310:	vmul.f64	d7, d7, d6
    f314:	vstr	d7, [sp, #8]
    f318:	add.w	r1, r8, #4294967295
    f31c:	str	r1, [sp, #16]
    f31e:	adds	r2, #1
    f320:	mov	r4, fp
    f322:	vldr	d6, [sp, #8]
    f326:	vmov.f64	d5, #28	@ 0x40e00000  7.0
    f32a:	vmov	s15, r2
    f32e:	vcvt.f64.s32	d7, s15
    f332:	vfma.f64	d5, d7, d6
    f336:	vmov	r2, s11
    f33a:	vmov	r0, r1, d5
    f33e:	sub.w	r1, r2, #54525952	@ 0x3400000
    f342:	cmp	r4, #0
    f344:	bne.w	f45c <_dtoa_r+0x49c>
    f348:	vmov.f64	d7, #20	@ 0x40a00000  5.0
    f34c:	vsub.f64	d6, d6, d7
    f350:	vmov	d7, r0, r1
    f354:	vcmpe.f64	d6, d7
    f358:	vmrs	APSR_nzcv, fpscr
    f35c:	bgt.w	f81a <_dtoa_r+0x85a>
    f360:	vneg.f64	d7, d7
    f364:	vcmpe.f64	d6, d7
    f368:	vmrs	APSR_nzcv, fpscr
    f36c:	bmi.n	f3b6 <_dtoa_r+0x3f6>
    f36e:	vstr	d8, [sp, #8]
    f372:	ldr	r1, [sp, #60]	@ 0x3c
    f374:	cmp	r1, #0
    f376:	blt.w	f5cc <_dtoa_r+0x60c>
    f37a:	cmp.w	r8, #14
    f37e:	bgt.w	f5cc <_dtoa_r+0x60c>
    f382:	ldr	r3, [pc, #576]	@ (f5c4 <_dtoa_r+0x604>)
    f384:	add.w	r3, r3, r8, lsl #3
    f388:	vldr	d6, [r3]
    f38c:	ldr	r3, [sp, #36]	@ 0x24
    f38e:	cmp	r3, #0
    f390:	bge.w	f524 <_dtoa_r+0x564>
    f394:	cmp.w	sl, #0
    f398:	bgt.w	f524 <_dtoa_r+0x564>
    f39c:	bne.n	f3b6 <_dtoa_r+0x3f6>
    f39e:	vmov.f64	d7, #20	@ 0x40a00000  5.0
    f3a2:	vmul.f64	d6, d6, d7
    f3a6:	vldr	d7, [sp, #8]
    f3aa:	vcmpe.f64	d6, d7
    f3ae:	vmrs	APSR_nzcv, fpscr
    f3b2:	blt.w	f814 <_dtoa_r+0x854>
    f3b6:	movs	r4, #0
    f3b8:	mov	r5, r4
    f3ba:	ldr	r3, [sp, #36]	@ 0x24
    f3bc:	mvns	r3, r3
    f3be:	str	r3, [sp, #16]
    f3c0:	mov	r6, r7
    f3c2:	mov.w	r8, #0
    f3c6:	mov	r1, r4
    f3c8:	mov	r0, r9
    f3ca:	bl	10208 <_Bfree>
    f3ce:	cmp	r5, #0
    f3d0:	beq.w	f518 <_dtoa_r+0x558>
    f3d4:	cmp.w	r8, #0
    f3d8:	beq.n	f3e6 <_dtoa_r+0x426>
    f3da:	cmp	r8, r5
    f3dc:	beq.n	f3e6 <_dtoa_r+0x426>
    f3de:	mov	r1, r8
    f3e0:	mov	r0, r9
    f3e2:	bl	10208 <_Bfree>
    f3e6:	mov	r1, r5
    f3e8:	mov	r0, r9
    f3ea:	bl	10208 <_Bfree>
    f3ee:	b.n	f518 <_dtoa_r+0x558>
    f3f0:	movs	r2, #2
    f3f2:	b.n	f2ce <_dtoa_r+0x30e>
    f3f4:	lsls	r4, r1, #31
    f3f6:	bpl.n	f402 <_dtoa_r+0x442>
    f3f8:	vldr	d6, [r0]
    f3fc:	adds	r2, #1
    f3fe:	vmul.f64	d7, d7, d6
    f402:	asrs	r1, r1, #1
    f404:	adds	r0, #8
    f406:	b.n	f2d0 <_dtoa_r+0x310>
    f408:	beq.n	f450 <_dtoa_r+0x490>
    f40a:	rsb	r1, r8, #0
    f40e:	ldr	r2, [pc, #436]	@ (f5c4 <_dtoa_r+0x604>)
    f410:	and.w	r0, r1, #15
    f414:	add.w	r2, r2, r0, lsl #3
    f418:	vldr	d7, [r2]
    f41c:	vmul.f64	d7, d8, d7
    f420:	vstr	d7, [sp, #8]
    f424:	ldr	r0, [pc, #416]	@ (f5c8 <_dtoa_r+0x608>)
    f426:	asrs	r1, r1, #4
    f428:	movs	r4, #0
    f42a:	movs	r2, #2
    f42c:	cbnz	r1, f43a <_dtoa_r+0x47a>
    f42e:	cmp	r4, #0
    f430:	beq.w	f2e2 <_dtoa_r+0x322>
    f434:	vstr	d7, [sp, #8]
    f438:	b.n	f2e2 <_dtoa_r+0x322>
    f43a:	lsls	r6, r1, #31
    f43c:	bpl.n	f44a <_dtoa_r+0x48a>
    f43e:	vldr	d6, [r0]
    f442:	adds	r2, #1
    f444:	movs	r4, #1
    f446:	vmul.f64	d7, d7, d6
    f44a:	asrs	r1, r1, #1
    f44c:	adds	r0, #8
    f44e:	b.n	f42c <_dtoa_r+0x46c>
    f450:	movs	r2, #2
    f452:	b.n	f2e2 <_dtoa_r+0x322>
    f454:	str.w	r8, [sp, #16]
    f458:	mov	r4, sl
    f45a:	b.n	f322 <_dtoa_r+0x362>
    f45c:	ldr	r2, [pc, #356]	@ (f5c4 <_dtoa_r+0x604>)
    f45e:	add.w	r2, r2, r4, lsl #3
    f462:	vldr	d4, [r2, #-8]
    f466:	ldr	r2, [sp, #32]
    f468:	vmov	d7, r0, r1
    f46c:	add	r4, r7
    f46e:	cbz	r2, f4c4 <_dtoa_r+0x504>
    f470:	vmov.f64	d3, #96	@ 0x3f000000  0.5
    f474:	vmov.f64	d2, #112	@ 0x3f800000  1.0
    f478:	mov	r6, r7
    f47a:	vdiv.f64	d5, d3, d4
    f47e:	vmov.f64	d3, #36	@ 0x41200000  10.0
    f482:	vsub.f64	d7, d5, d7
    f486:	vcvt.s32.f64	s9, d6
    f48a:	vmov	r2, s9
    f48e:	vcvt.f64.s32	d5, s9
    f492:	adds	r2, #48	@ 0x30
    f494:	vsub.f64	d6, d6, d5
    f498:	vcmpe.f64	d6, d7
    f49c:	vmrs	APSR_nzcv, fpscr
    f4a0:	strb.w	r2, [r6], #1
    f4a4:	bmi.n	f518 <_dtoa_r+0x558>
    f4a6:	vsub.f64	d5, d2, d6
    f4aa:	vcmpe.f64	d5, d7
    f4ae:	vmrs	APSR_nzcv, fpscr
    f4b2:	bmi.n	f592 <_dtoa_r+0x5d2>
    f4b4:	cmp	r6, r4
    f4b6:	beq.w	f36e <_dtoa_r+0x3ae>
    f4ba:	vmul.f64	d7, d7, d3
    f4be:	vmul.f64	d6, d6, d3
    f4c2:	b.n	f486 <_dtoa_r+0x4c6>
    f4c4:	mov	r1, r4
    f4c6:	mov	r6, r7
    f4c8:	vmul.f64	d7, d7, d4
    f4cc:	vmov.f64	d3, #36	@ 0x41200000  10.0
    f4d0:	vcvt.s32.f64	s9, d6
    f4d4:	vmov	r2, s9
    f4d8:	adds	r2, #48	@ 0x30
    f4da:	strb.w	r2, [r6], #1
    f4de:	cmp	r6, r4
    f4e0:	vcvt.f64.s32	d5, s9
    f4e4:	vsub.f64	d6, d6, d5
    f4e8:	bne.n	f51e <_dtoa_r+0x55e>
    f4ea:	vmov.f64	d5, #96	@ 0x3f000000  0.5
    f4ee:	vadd.f64	d4, d7, d5
    f4f2:	vcmpe.f64	d6, d4
    f4f6:	vmrs	APSR_nzcv, fpscr
    f4fa:	bgt.n	f592 <_dtoa_r+0x5d2>
    f4fc:	vsub.f64	d5, d5, d7
    f500:	vcmpe.f64	d6, d5
    f504:	vmrs	APSR_nzcv, fpscr
    f508:	bpl.w	f36e <_dtoa_r+0x3ae>
    f50c:	mov	r6, r1
    f50e:	subs	r1, #1
    f510:	ldrb.w	r3, [r6, #-1]
    f514:	cmp	r3, #48	@ 0x30
    f516:	beq.n	f50c <_dtoa_r+0x54c>
    f518:	ldr.w	r8, [sp, #16]
    f51c:	b.n	f56e <_dtoa_r+0x5ae>
    f51e:	vmul.f64	d6, d6, d3
    f522:	b.n	f4d0 <_dtoa_r+0x510>
    f524:	vldr	d7, [sp, #8]
    f528:	vmov.f64	d4, #36	@ 0x41200000  10.0
    f52c:	mov	r6, r7
    f52e:	vdiv.f64	d5, d7, d6
    f532:	vcvt.s32.f64	s10, d5
    f536:	vmov	r3, s10
    f53a:	adds	r3, #48	@ 0x30
    f53c:	strb.w	r3, [r6], #1
    f540:	subs	r3, r6, r7
    f542:	cmp	sl, r3
    f544:	vcvt.f64.s32	d3, s10
    f548:	vfms.f64	d7, d3, d6
    f54c:	bne.n	f5b4 <_dtoa_r+0x5f4>
    f54e:	vadd.f64	d7, d7, d7
    f552:	vcmpe.f64	d7, d6
    f556:	vmrs	APSR_nzcv, fpscr
    f55a:	bgt.n	f58e <_dtoa_r+0x5ce>
    f55c:	vcmp.f64	d7, d6
    f560:	vmrs	APSR_nzcv, fpscr
    f564:	bne.n	f56e <_dtoa_r+0x5ae>
    f566:	vmov	r3, s10
    f56a:	lsls	r3, r3, #31
    f56c:	bmi.n	f58e <_dtoa_r+0x5ce>
    f56e:	ldr	r1, [sp, #4]
    f570:	mov	r0, r9
    f572:	bl	10208 <_Bfree>
    f576:	movs	r3, #0
    f578:	ldr	r2, [sp, #48]	@ 0x30
    f57a:	strb	r3, [r6, #0]
    f57c:	add.w	r3, r8, #1
    f580:	str	r3, [r2, #0]
    f582:	ldr	r3, [sp, #116]	@ 0x74
    f584:	cmp	r3, #0
    f586:	beq.w	fa06 <_dtoa_r+0xa46>
    f58a:	str	r6, [r3, #0]
    f58c:	b.n	fa06 <_dtoa_r+0xa46>
    f58e:	str.w	r8, [sp, #16]
    f592:	mov	r3, r6
    f594:	mov	r6, r3
    f596:	ldrb.w	r2, [r3, #-1]!
    f59a:	cmp	r2, #57	@ 0x39
    f59c:	bne.n	f5ac <_dtoa_r+0x5ec>
    f59e:	cmp	r7, r3
    f5a0:	bne.n	f594 <_dtoa_r+0x5d4>
    f5a2:	ldr	r2, [sp, #16]
    f5a4:	adds	r2, #1
    f5a6:	str	r2, [sp, #16]
    f5a8:	movs	r2, #48	@ 0x30
    f5aa:	strb	r2, [r7, #0]
    f5ac:	ldrb	r2, [r3, #0]
    f5ae:	adds	r2, #1
    f5b0:	strb	r2, [r3, #0]
    f5b2:	b.n	f518 <_dtoa_r+0x558>
    f5b4:	vmul.f64	d7, d7, d4
    f5b8:	vcmp.f64	d7, #0.0
    f5bc:	vmrs	APSR_nzcv, fpscr
    f5c0:	bne.n	f52e <_dtoa_r+0x56e>
    f5c2:	b.n	f56e <_dtoa_r+0x5ae>
    f5c4:	.word	0x20000328
    f5c8:	.word	0x20000300
    f5cc:	ldr	r2, [sp, #32]
    f5ce:	cmp	r2, #0
    f5d0:	beq.w	f79e <_dtoa_r+0x7de>
    f5d4:	ldr	r2, [sp, #24]
    f5d6:	cmp	r2, #1
    f5d8:	bgt.w	f768 <_dtoa_r+0x7a8>
    f5dc:	cmp	r5, #0
    f5de:	beq.w	f760 <_dtoa_r+0x7a0>
    f5e2:	addw	r1, r1, #1075	@ 0x433
    f5e6:	ldr	r4, [sp, #28]
    f5e8:	mov	r6, r3
    f5ea:	add	r3, r1
    f5ec:	str	r3, [sp, #16]
    f5ee:	ldr	r3, [sp, #20]
    f5f0:	mov	r0, r9
    f5f2:	add	r3, r1
    f5f4:	movs	r1, #1
    f5f6:	str	r3, [sp, #20]
    f5f8:	bl	10404 <__i2b>
    f5fc:	ldr	r3, [sp, #16]
    f5fe:	mov	r5, r0
    f600:	cbz	r6, f618 <_dtoa_r+0x658>
    f602:	ldr	r2, [sp, #20]
    f604:	cmp	r2, #0
    f606:	ble.n	f618 <_dtoa_r+0x658>
    f608:	cmp	r2, r6
    f60a:	ldr	r1, [sp, #20]
    f60c:	it	ge
    f60e:	movge	r2, r6
    f610:	subs	r3, r3, r2
    f612:	subs	r6, r6, r2
    f614:	subs	r2, r1, r2
    f616:	str	r2, [sp, #20]
    f618:	ldr	r2, [sp, #28]
    f61a:	cbz	r2, f662 <_dtoa_r+0x6a2>
    f61c:	ldr	r2, [sp, #32]
    f61e:	cmp	r2, #0
    f620:	beq.w	f7a6 <_dtoa_r+0x7e6>
    f624:	cbz	r4, f64e <_dtoa_r+0x68e>
    f626:	mov	r1, r5
    f628:	mov	r2, r4
    f62a:	mov	r0, r9
    f62c:	str	r3, [sp, #52]	@ 0x34
    f62e:	bl	10574 <__pow5mult>
    f632:	ldr	r2, [sp, #4]
    f634:	mov	r1, r0
    f636:	mov	r5, r0
    f638:	mov	r0, r9
    f63a:	bl	10430 <__multiply>
    f63e:	ldr	r1, [sp, #4]
    f640:	str	r0, [sp, #16]
    f642:	mov	r0, r9
    f644:	bl	10208 <_Bfree>
    f648:	ldr	r2, [sp, #16]
    f64a:	ldr	r3, [sp, #52]	@ 0x34
    f64c:	str	r2, [sp, #4]
    f64e:	ldr	r2, [sp, #28]
    f650:	subs	r2, r2, r4
    f652:	beq.n	f662 <_dtoa_r+0x6a2>
    f654:	str	r3, [sp, #16]
    f656:	ldr	r1, [sp, #4]
    f658:	mov	r0, r9
    f65a:	bl	10574 <__pow5mult>
    f65e:	ldr	r3, [sp, #16]
    f660:	str	r0, [sp, #4]
    f662:	movs	r1, #1
    f664:	mov	r0, r9
    f666:	str	r3, [sp, #16]
    f668:	bl	10404 <__i2b>
    f66c:	ldr	r2, [sp, #40]	@ 0x28
    f66e:	ldr	r3, [sp, #16]
    f670:	mov	r4, r0
    f672:	cmp	r2, #0
    f674:	beq.w	fa12 <_dtoa_r+0xa52>
    f678:	mov	r1, r0
    f67a:	mov	r0, r9
    f67c:	bl	10574 <__pow5mult>
    f680:	ldr	r3, [sp, #24]
    f682:	cmp	r3, #1
    f684:	mov	r4, r0
    f686:	ldr	r3, [sp, #16]
    f688:	bgt.w	f7b4 <_dtoa_r+0x7f4>
    f68c:	ldr	r2, [sp, #8]
    f68e:	cmp	r2, #0
    f690:	bne.w	f7ac <_dtoa_r+0x7ec>
    f694:	ldr	r2, [sp, #12]
    f696:	ubfx	r2, r2, #0, #20
    f69a:	cmp	r2, #0
    f69c:	bne.w	f7b0 <_dtoa_r+0x7f0>
    f6a0:	ldr	r2, [sp, #12]
    f6a2:	bic.w	r2, r2, #2147483648	@ 0x80000000
    f6a6:	lsrs	r2, r2, #20
    f6a8:	lsls	r2, r2, #20
    f6aa:	cbz	r2, f6b6 <_dtoa_r+0x6f6>
    f6ac:	ldr	r2, [sp, #20]
    f6ae:	adds	r2, #1
    f6b0:	str	r2, [sp, #20]
    f6b2:	adds	r3, #1
    f6b4:	movs	r2, #1
    f6b6:	str	r2, [sp, #28]
    f6b8:	ldr	r2, [sp, #40]	@ 0x28
    f6ba:	cmp	r2, #0
    f6bc:	beq.w	fa1e <_dtoa_r+0xa5e>
    f6c0:	ldr	r2, [r4, #16]
    f6c2:	str	r3, [sp, #16]
    f6c4:	add.w	r2, r4, r2, lsl #2
    f6c8:	ldr	r0, [r2, #16]
    f6ca:	bl	1036c <__hi0bits>
    f6ce:	ldr	r3, [sp, #16]
    f6d0:	rsb	r0, r0, #32
    f6d4:	ldr	r2, [sp, #20]
    f6d6:	add	r0, r2
    f6d8:	ands.w	r0, r0, #31
    f6dc:	beq.n	f7ca <_dtoa_r+0x80a>
    f6de:	rsb	r2, r0, #32
    f6e2:	cmp	r2, #4
    f6e4:	ble.n	f7ba <_dtoa_r+0x7fa>
    f6e6:	ldr	r2, [sp, #20]
    f6e8:	rsb	r0, r0, #28
    f6ec:	add	r2, r0
    f6ee:	add	r3, r0
    f6f0:	add	r6, r0
    f6f2:	str	r2, [sp, #20]
    f6f4:	cmp	r3, #0
    f6f6:	ble.n	f704 <_dtoa_r+0x744>
    f6f8:	ldr	r1, [sp, #4]
    f6fa:	mov	r2, r3
    f6fc:	mov	r0, r9
    f6fe:	bl	10628 <__lshift>
    f702:	str	r0, [sp, #4]
    f704:	ldr	r3, [sp, #20]
    f706:	cmp	r3, #0
    f708:	ble.n	f716 <_dtoa_r+0x756>
    f70a:	mov	r1, r4
    f70c:	mov	r2, r3
    f70e:	mov	r0, r9
    f710:	bl	10628 <__lshift>
    f714:	mov	r4, r0
    f716:	ldr	r3, [sp, #44]	@ 0x2c
    f718:	cmp	r3, #0
    f71a:	beq.n	f7ce <_dtoa_r+0x80e>
    f71c:	ldr	r0, [sp, #4]
    f71e:	mov	r1, r4
    f720:	bl	10700 <__mcmp>
    f724:	cmp	r0, #0
    f726:	bge.n	f7ce <_dtoa_r+0x80e>
    f728:	add.w	r3, r8, #4294967295
    f72c:	str	r3, [sp, #16]
    f72e:	ldr	r1, [sp, #4]
    f730:	movs	r3, #0
    f732:	movs	r2, #10
    f734:	mov	r0, r9
    f736:	bl	1024c <__multadd>
    f73a:	ldr	r3, [sp, #32]
    f73c:	str	r0, [sp, #4]
    f73e:	cmp	r3, #0
    f740:	beq.w	fa22 <_dtoa_r+0xa62>
    f744:	mov	r1, r5
    f746:	movs	r3, #0
    f748:	movs	r2, #10
    f74a:	mov	r0, r9
    f74c:	bl	1024c <__multadd>
    f750:	cmp.w	fp, #0
    f754:	mov	r5, r0
    f756:	bgt.n	f826 <_dtoa_r+0x866>
    f758:	ldr	r3, [sp, #24]
    f75a:	cmp	r3, #2
    f75c:	bgt.n	f7e0 <_dtoa_r+0x820>
    f75e:	b.n	f826 <_dtoa_r+0x866>
    f760:	ldr	r1, [sp, #56]	@ 0x38
    f762:	rsb	r1, r1, #54	@ 0x36
    f766:	b.n	f5e6 <_dtoa_r+0x626>
    f768:	ldr	r2, [sp, #28]
    f76a:	add.w	r4, sl, #4294967295
    f76e:	cmp	r2, r4
    f770:	blt.n	f782 <_dtoa_r+0x7c2>
    f772:	cmp.w	sl, #0
    f776:	sub.w	r4, r2, r4
    f77a:	blt.n	f796 <_dtoa_r+0x7d6>
    f77c:	mov	r6, r3
    f77e:	mov	r1, sl
    f780:	b.n	f5ea <_dtoa_r+0x62a>
    f782:	ldr	r2, [sp, #28]
    f784:	ldr	r1, [sp, #40]	@ 0x28
    f786:	str	r4, [sp, #28]
    f788:	subs	r2, r4, r2
    f78a:	add	r1, r2
    f78c:	str	r1, [sp, #40]	@ 0x28
    f78e:	mov	r6, r3
    f790:	mov	r1, sl
    f792:	movs	r4, #0
    f794:	b.n	f5ea <_dtoa_r+0x62a>
    f796:	sub.w	r6, r3, sl
    f79a:	movs	r1, #0
    f79c:	b.n	f5ea <_dtoa_r+0x62a>
    f79e:	ldr	r4, [sp, #28]
    f7a0:	ldr	r5, [sp, #32]
    f7a2:	mov	r6, r3
    f7a4:	b.n	f600 <_dtoa_r+0x640>
    f7a6:	ldr	r2, [sp, #28]
    f7a8:	str	r3, [sp, #16]
    f7aa:	b.n	f656 <_dtoa_r+0x696>
    f7ac:	movs	r2, #0
    f7ae:	b.n	f6b6 <_dtoa_r+0x6f6>
    f7b0:	ldr	r2, [sp, #8]
    f7b2:	b.n	f6b6 <_dtoa_r+0x6f6>
    f7b4:	movs	r2, #0
    f7b6:	str	r2, [sp, #28]
    f7b8:	b.n	f6c0 <_dtoa_r+0x700>
    f7ba:	beq.n	f6f4 <_dtoa_r+0x734>
    f7bc:	ldr	r1, [sp, #20]
    f7be:	adds	r2, #28
    f7c0:	add	r1, r2
    f7c2:	add	r3, r2
    f7c4:	add	r6, r2
    f7c6:	str	r1, [sp, #20]
    f7c8:	b.n	f6f4 <_dtoa_r+0x734>
    f7ca:	mov	r2, r0
    f7cc:	b.n	f7bc <_dtoa_r+0x7fc>
    f7ce:	cmp.w	sl, #0
    f7d2:	str.w	r8, [sp, #16]
    f7d6:	mov	fp, sl
    f7d8:	bgt.n	f81e <_dtoa_r+0x85e>
    f7da:	ldr	r3, [sp, #24]
    f7dc:	cmp	r3, #2
    f7de:	ble.n	f81e <_dtoa_r+0x85e>
    f7e0:	cmp.w	fp, #0
    f7e4:	bne.w	f3ba <_dtoa_r+0x3fa>
    f7e8:	mov	r1, r4
    f7ea:	mov	r3, fp
    f7ec:	movs	r2, #5
    f7ee:	mov	r0, r9
    f7f0:	bl	1024c <__multadd>
    f7f4:	mov	r1, r0
    f7f6:	mov	r4, r0
    f7f8:	ldr	r0, [sp, #4]
    f7fa:	bl	10700 <__mcmp>
    f7fe:	cmp	r0, #0
    f800:	ble.w	f3ba <_dtoa_r+0x3fa>
    f804:	mov	r6, r7
    f806:	movs	r3, #49	@ 0x31
    f808:	strb.w	r3, [r6], #1
    f80c:	ldr	r3, [sp, #16]
    f80e:	adds	r3, #1
    f810:	str	r3, [sp, #16]
    f812:	b.n	f3c2 <_dtoa_r+0x402>
    f814:	str.w	r8, [sp, #16]
    f818:	mov	r4, sl
    f81a:	mov	r5, r4
    f81c:	b.n	f804 <_dtoa_r+0x844>
    f81e:	ldr	r3, [sp, #32]
    f820:	cmp	r3, #0
    f822:	beq.w	fa2a <_dtoa_r+0xa6a>
    f826:	cmp	r6, #0
    f828:	ble.n	f836 <_dtoa_r+0x876>
    f82a:	mov	r1, r5
    f82c:	mov	r2, r6
    f82e:	mov	r0, r9
    f830:	bl	10628 <__lshift>
    f834:	mov	r5, r0
    f836:	ldr	r3, [sp, #28]
    f838:	cmp	r3, #0
    f83a:	beq.n	f8ee <_dtoa_r+0x92e>
    f83c:	ldr	r1, [r5, #4]
    f83e:	mov	r0, r9
    f840:	bl	10188 <_Balloc>
    f844:	mov	r6, r0
    f846:	cbnz	r0, f854 <_dtoa_r+0x894>
    f848:	ldr	r3, [pc, #520]	@ (fa54 <_dtoa_r+0xa94>)
    f84a:	mov	r2, r0
    f84c:	movw	r1, #751	@ 0x2ef
    f850:	b.w	eff2 <_dtoa_r+0x32>
    f854:	ldr	r2, [r5, #16]
    f856:	adds	r2, #2
    f858:	lsls	r2, r2, #2
    f85a:	add.w	r1, r5, #12
    f85e:	adds	r0, #12
    f860:	bl	a2f0 <memcpy>
    f864:	movs	r2, #1
    f866:	mov	r1, r6
    f868:	mov	r0, r9
    f86a:	bl	10628 <__lshift>
    f86e:	adds	r3, r7, #1
    f870:	str	r3, [sp, #20]
    f872:	add.w	r3, r7, fp
    f876:	str	r3, [sp, #36]	@ 0x24
    f878:	ldr	r3, [sp, #8]
    f87a:	and.w	r3, r3, #1
    f87e:	mov	r8, r5
    f880:	str	r3, [sp, #32]
    f882:	mov	r5, r0
    f884:	ldr	r3, [sp, #20]
    f886:	ldr	r0, [sp, #4]
    f888:	mov	r1, r4
    f88a:	add.w	fp, r3, #4294967295
    f88e:	bl	eeac <quorem>
    f892:	mov	r1, r8
    f894:	str	r0, [sp, #8]
    f896:	add.w	sl, r0, #48	@ 0x30
    f89a:	ldr	r0, [sp, #4]
    f89c:	bl	10700 <__mcmp>
    f8a0:	mov	r2, r5
    f8a2:	str	r0, [sp, #28]
    f8a4:	mov	r1, r4
    f8a6:	mov	r0, r9
    f8a8:	bl	10738 <__mdiff>
    f8ac:	ldr	r2, [r0, #12]
    f8ae:	mov	r6, r0
    f8b0:	cbnz	r2, f8f2 <_dtoa_r+0x932>
    f8b2:	mov	r1, r0
    f8b4:	ldr	r0, [sp, #4]
    f8b6:	bl	10700 <__mcmp>
    f8ba:	mov	r2, r0
    f8bc:	mov	r1, r6
    f8be:	mov	r0, r9
    f8c0:	str	r2, [sp, #40]	@ 0x28
    f8c2:	bl	10208 <_Bfree>
    f8c6:	ldrd	r6, r3, [sp, #20]
    f8ca:	ldr	r2, [sp, #40]	@ 0x28
    f8cc:	orr.w	r1, r2, r3
    f8d0:	ldr	r3, [sp, #32]
    f8d2:	orrs	r1, r3
    f8d4:	bne.n	f8f6 <_dtoa_r+0x936>
    f8d6:	cmp.w	sl, #57	@ 0x39
    f8da:	beq.n	f92e <_dtoa_r+0x96e>
    f8dc:	ldr	r3, [sp, #28]
    f8de:	cmp	r3, #0
    f8e0:	ble.n	f8e8 <_dtoa_r+0x928>
    f8e2:	ldr	r3, [sp, #8]
    f8e4:	add.w	sl, r3, #49	@ 0x31
    f8e8:	strb.w	sl, [fp]
    f8ec:	b.n	f3c6 <_dtoa_r+0x406>
    f8ee:	mov	r0, r5
    f8f0:	b.n	f86e <_dtoa_r+0x8ae>
    f8f2:	movs	r2, #1
    f8f4:	b.n	f8bc <_dtoa_r+0x8fc>
    f8f6:	ldr	r3, [sp, #28]
    f8f8:	cmp	r3, #0
    f8fa:	blt.n	f906 <_dtoa_r+0x946>
    f8fc:	ldr	r1, [sp, #24]
    f8fe:	orrs	r3, r1
    f900:	ldr	r1, [sp, #32]
    f902:	orrs	r3, r1
    f904:	bne.n	f948 <_dtoa_r+0x988>
    f906:	cmp	r2, #0
    f908:	ble.n	f8e8 <_dtoa_r+0x928>
    f90a:	ldr	r1, [sp, #4]
    f90c:	movs	r2, #1
    f90e:	mov	r0, r9
    f910:	bl	10628 <__lshift>
    f914:	mov	r1, r4
    f916:	str	r0, [sp, #4]
    f918:	bl	10700 <__mcmp>
    f91c:	cmp	r0, #0
    f91e:	bgt.n	f928 <_dtoa_r+0x968>
    f920:	bne.n	f8e8 <_dtoa_r+0x928>
    f922:	tst.w	sl, #1
    f926:	beq.n	f8e8 <_dtoa_r+0x928>
    f928:	cmp.w	sl, #57	@ 0x39
    f92c:	bne.n	f8e2 <_dtoa_r+0x922>
    f92e:	movs	r3, #57	@ 0x39
    f930:	strb.w	r3, [fp]
    f934:	mov	r3, r6
    f936:	mov	r6, r3
    f938:	subs	r3, #1
    f93a:	ldrb.w	r2, [r6, #-1]
    f93e:	cmp	r2, #57	@ 0x39
    f940:	beq.n	f9e8 <_dtoa_r+0xa28>
    f942:	adds	r2, #1
    f944:	strb	r2, [r3, #0]
    f946:	b.n	f3c6 <_dtoa_r+0x406>
    f948:	cmp	r2, #0
    f94a:	ble.n	f95c <_dtoa_r+0x99c>
    f94c:	cmp.w	sl, #57	@ 0x39
    f950:	beq.n	f92e <_dtoa_r+0x96e>
    f952:	add.w	r3, sl, #1
    f956:	strb.w	r3, [fp]
    f95a:	b.n	f3c6 <_dtoa_r+0x406>
    f95c:	ldr	r3, [sp, #20]
    f95e:	ldr	r2, [sp, #36]	@ 0x24
    f960:	strb.w	sl, [r3, #-1]
    f964:	cmp	r3, r2
    f966:	beq.n	f9bc <_dtoa_r+0x9fc>
    f968:	ldr	r1, [sp, #4]
    f96a:	movs	r3, #0
    f96c:	movs	r2, #10
    f96e:	mov	r0, r9
    f970:	bl	1024c <__multadd>
    f974:	cmp	r8, r5
    f976:	str	r0, [sp, #4]
    f978:	mov.w	r3, #0
    f97c:	mov.w	r2, #10
    f980:	mov	r1, r8
    f982:	mov	r0, r9
    f984:	bne.n	f996 <_dtoa_r+0x9d6>
    f986:	bl	1024c <__multadd>
    f98a:	mov	r8, r0
    f98c:	mov	r5, r0
    f98e:	ldr	r3, [sp, #20]
    f990:	adds	r3, #1
    f992:	str	r3, [sp, #20]
    f994:	b.n	f884 <_dtoa_r+0x8c4>
    f996:	bl	1024c <__multadd>
    f99a:	mov	r1, r5
    f99c:	mov	r8, r0
    f99e:	movs	r3, #0
    f9a0:	movs	r2, #10
    f9a2:	mov	r0, r9
    f9a4:	bl	1024c <__multadd>
    f9a8:	mov	r5, r0
    f9aa:	b.n	f98e <_dtoa_r+0x9ce>
    f9ac:	cmp.w	fp, #0
    f9b0:	ite	gt
    f9b2:	movgt	r6, fp
    f9b4:	movle	r6, #1
    f9b6:	add	r6, r7
    f9b8:	mov.w	r8, #0
    f9bc:	ldr	r1, [sp, #4]
    f9be:	movs	r2, #1
    f9c0:	mov	r0, r9
    f9c2:	bl	10628 <__lshift>
    f9c6:	mov	r1, r4
    f9c8:	str	r0, [sp, #4]
    f9ca:	bl	10700 <__mcmp>
    f9ce:	cmp	r0, #0
    f9d0:	bgt.n	f934 <_dtoa_r+0x974>
    f9d2:	bne.n	f9da <_dtoa_r+0xa1a>
    f9d4:	tst.w	sl, #1
    f9d8:	bne.n	f934 <_dtoa_r+0x974>
    f9da:	mov	r3, r6
    f9dc:	mov	r6, r3
    f9de:	ldrb.w	r2, [r3, #-1]!
    f9e2:	cmp	r2, #48	@ 0x30
    f9e4:	beq.n	f9dc <_dtoa_r+0xa1c>
    f9e6:	b.n	f3c6 <_dtoa_r+0x406>
    f9e8:	cmp	r7, r3
    f9ea:	bne.n	f936 <_dtoa_r+0x976>
    f9ec:	ldr	r3, [sp, #16]
    f9ee:	adds	r3, #1
    f9f0:	str	r3, [sp, #16]
    f9f2:	movs	r3, #49	@ 0x31
    f9f4:	strb	r3, [r7, #0]
    f9f6:	b.n	f3c6 <_dtoa_r+0x406>
    f9f8:	ldr	r3, [sp, #116]	@ 0x74
    f9fa:	ldr	r7, [pc, #92]	@ (fa58 <_dtoa_r+0xa98>)
    f9fc:	cbz	r3, fa06 <_dtoa_r+0xa46>
    f9fe:	add.w	r3, r7, #8
    fa02:	ldr	r2, [sp, #116]	@ 0x74
    fa04:	str	r3, [r2, #0]
    fa06:	mov	r0, r7
    fa08:	add	sp, #68	@ 0x44
    fa0a:	vpop	{d8}
    fa0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa12:	ldr	r2, [sp, #24]
    fa14:	cmp	r2, #1
    fa16:	ble.w	f68c <_dtoa_r+0x6cc>
    fa1a:	ldr	r2, [sp, #40]	@ 0x28
    fa1c:	str	r2, [sp, #28]
    fa1e:	movs	r0, #1
    fa20:	b.n	f6d4 <_dtoa_r+0x714>
    fa22:	cmp.w	fp, #0
    fa26:	ble.w	f7da <_dtoa_r+0x81a>
    fa2a:	mov	r6, r7
    fa2c:	ldr	r0, [sp, #4]
    fa2e:	mov	r1, r4
    fa30:	bl	eeac <quorem>
    fa34:	add.w	sl, r0, #48	@ 0x30
    fa38:	strb.w	sl, [r6], #1
    fa3c:	subs	r2, r6, r7
    fa3e:	cmp	fp, r2
    fa40:	ble.n	f9ac <_dtoa_r+0x9ec>
    fa42:	ldr	r1, [sp, #4]
    fa44:	movs	r3, #0
    fa46:	movs	r2, #10
    fa48:	mov	r0, r9
    fa4a:	bl	1024c <__multadd>
    fa4e:	str	r0, [sp, #4]
    fa50:	b.n	fa2c <_dtoa_r+0xa6c>
    fa52:	nop
    fa54:	.word	0x20001d17
    fa58:	.word	0x20001c9a

0000fa5c <_free_r>:
    fa5c:	push	{r3, r4, r5, lr}
    fa5e:	mov	r5, r0
    fa60:	cmp	r1, #0
    fa62:	beq.n	fae8 <_free_r+0x8c>
    fa64:	ldr.w	r3, [r1, #-4]
    fa68:	subs	r4, r1, #4
    fa6a:	cmp	r3, #0
    fa6c:	it	lt
    fa6e:	addlt	r4, r4, r3
    fa70:	bl	ce78 <__malloc_lock>
    fa74:	ldr	r2, [pc, #116]	@ (faec <_free_r+0x90>)
    fa76:	ldr	r3, [r2, #0]
    fa78:	cbnz	r3, fa88 <_free_r+0x2c>
    fa7a:	str	r3, [r4, #4]
    fa7c:	str	r4, [r2, #0]
    fa7e:	mov	r0, r5
    fa80:	ldmia.w	sp!, {r3, r4, r5, lr}
    fa84:	b.w	ce84 <__malloc_unlock>
    fa88:	cmp	r3, r4
    fa8a:	bls.n	fa9e <_free_r+0x42>
    fa8c:	ldr	r0, [r4, #0]
    fa8e:	adds	r1, r4, r0
    fa90:	cmp	r3, r1
    fa92:	itttt	eq
    fa94:	ldreq	r1, [r3, #0]
    fa96:	ldreq	r3, [r3, #4]
    fa98:	addeq	r1, r1, r0
    fa9a:	streq	r1, [r4, #0]
    fa9c:	b.n	fa7a <_free_r+0x1e>
    fa9e:	mov	r2, r3
    faa0:	ldr	r3, [r3, #4]
    faa2:	cbz	r3, faa8 <_free_r+0x4c>
    faa4:	cmp	r3, r4
    faa6:	bls.n	fa9e <_free_r+0x42>
    faa8:	ldr	r1, [r2, #0]
    faaa:	adds	r0, r2, r1
    faac:	cmp	r0, r4
    faae:	bne.n	fac8 <_free_r+0x6c>
    fab0:	ldr	r0, [r4, #0]
    fab2:	add	r1, r0
    fab4:	adds	r0, r2, r1
    fab6:	cmp	r3, r0
    fab8:	str	r1, [r2, #0]
    faba:	bne.n	fa7e <_free_r+0x22>
    fabc:	ldr	r0, [r3, #0]
    fabe:	ldr	r3, [r3, #4]
    fac0:	str	r3, [r2, #4]
    fac2:	add	r0, r1
    fac4:	str	r0, [r2, #0]
    fac6:	b.n	fa7e <_free_r+0x22>
    fac8:	bls.n	fad0 <_free_r+0x74>
    faca:	movs	r3, #12
    facc:	str	r3, [r5, #0]
    face:	b.n	fa7e <_free_r+0x22>
    fad0:	ldr	r0, [r4, #0]
    fad2:	adds	r1, r4, r0
    fad4:	cmp	r3, r1
    fad6:	itt	eq
    fad8:	ldreq	r1, [r3, #0]
    fada:	ldreq	r3, [r3, #4]
    fadc:	str	r3, [r4, #4]
    fade:	itt	eq
    fae0:	addeq	r1, r1, r0
    fae2:	streq	r1, [r4, #0]
    fae4:	str	r4, [r2, #4]
    fae6:	b.n	fa7e <_free_r+0x22>
    fae8:	pop	{r3, r4, r5, pc}
    faea:	nop
    faec:	.word	0x20011d44

0000faf0 <rshift>:
    faf0:	ldr	r3, [r0, #16]
    faf2:	cmp.w	r3, r1, asr #5
    faf6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fafa:	mov.w	r2, r1, asr #5
    fafe:	add.w	r4, r0, #20
    fb02:	ble.n	fb90 <rshift+0xa0>
    fb04:	ands.w	r1, r1, #31
    fb08:	add.w	r6, r4, r3, lsl #2
    fb0c:	add.w	r5, r4, r2, lsl #2
    fb10:	bne.n	fb2c <rshift+0x3c>
    fb12:	add.w	r7, r0, #16
    fb16:	mov	r1, r5
    fb18:	cmp	r1, r6
    fb1a:	bcc.n	fb86 <rshift+0x96>
    fb1c:	subs	r3, r3, r2
    fb1e:	lsls	r3, r3, #2
    fb20:	subs	r2, r5, #3
    fb22:	cmp	r6, r2
    fb24:	it	cc
    fb26:	movcc	r3, #0
    fb28:	add	r3, r4
    fb2a:	b.n	fb58 <rshift+0x68>
    fb2c:	ldr.w	r7, [r4, r2, lsl #2]
    fb30:	rsb	r8, r1, #32
    fb34:	lsrs	r7, r1
    fb36:	add.w	lr, r5, #4
    fb3a:	mov	r9, r4
    fb3c:	cmp	r6, lr
    fb3e:	mov	ip, lr
    fb40:	bhi.n	fb6e <rshift+0x7e>
    fb42:	subs	r2, r3, r2
    fb44:	lsls	r2, r2, #2
    fb46:	subs	r2, #4
    fb48:	adds	r5, #1
    fb4a:	cmp	r6, r5
    fb4c:	it	cc
    fb4e:	movcc	r2, #0
    fb50:	adds	r3, r4, r2
    fb52:	str	r7, [r4, r2]
    fb54:	cbz	r7, fb58 <rshift+0x68>
    fb56:	adds	r3, #4
    fb58:	subs	r2, r3, r4
    fb5a:	cmp	r3, r4
    fb5c:	mov.w	r2, r2, asr #2
    fb60:	it	eq
    fb62:	moveq	r3, #0
    fb64:	str	r2, [r0, #16]
    fb66:	it	eq
    fb68:	streq	r3, [r0, #20]
    fb6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fb6e:	ldr.w	ip, [ip]
    fb72:	lsl.w	ip, ip, r8
    fb76:	orr.w	r7, ip, r7
    fb7a:	str.w	r7, [r9], #4
    fb7e:	ldr.w	r7, [lr], #4
    fb82:	lsrs	r7, r1
    fb84:	b.n	fb3c <rshift+0x4c>
    fb86:	ldr.w	ip, [r1], #4
    fb8a:	str.w	ip, [r7, #4]!
    fb8e:	b.n	fb18 <rshift+0x28>
    fb90:	mov	r3, r4
    fb92:	b.n	fb58 <rshift+0x68>

0000fb94 <__hexdig_fun>:
    fb94:	sub.w	r3, r0, #48	@ 0x30
    fb98:	cmp	r3, #9
    fb9a:	bhi.n	fba2 <__hexdig_fun+0xe>
    fb9c:	subs	r0, #32
    fb9e:	uxtb	r0, r0
    fba0:	bx	lr
    fba2:	sub.w	r3, r0, #97	@ 0x61
    fba6:	cmp	r3, #5
    fba8:	bhi.n	fbae <__hexdig_fun+0x1a>
    fbaa:	subs	r0, #71	@ 0x47
    fbac:	b.n	fb9e <__hexdig_fun+0xa>
    fbae:	sub.w	r3, r0, #65	@ 0x41
    fbb2:	cmp	r3, #5
    fbb4:	bhi.n	fbba <__hexdig_fun+0x26>
    fbb6:	subs	r0, #39	@ 0x27
    fbb8:	b.n	fb9e <__hexdig_fun+0xa>
    fbba:	movs	r0, #0
    fbbc:	bx	lr
	...

0000fbc0 <__gethex>:
    fbc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbc4:	sub	sp, #20
    fbc6:	mov	sl, r1
    fbc8:	str	r3, [sp, #8]
    fbca:	ldr	r3, [r1, #0]
    fbcc:	str	r0, [sp, #4]
    fbce:	mov	r8, r2
    fbd0:	adds	r4, r3, #2
    fbd2:	mov	r9, r4
    fbd4:	ldrb.w	r0, [r4], #1
    fbd8:	cmp	r0, #48	@ 0x30
    fbda:	beq.n	fbd2 <__gethex+0x12>
    fbdc:	sub.w	r3, r9, r3
    fbe0:	sub.w	fp, r3, #2
    fbe4:	bl	fb94 <__hexdig_fun>
    fbe8:	mov	r5, r0
    fbea:	cmp	r0, #0
    fbec:	bne.n	fcc0 <__gethex+0x100>
    fbee:	ldr	r1, [pc, #640]	@ (fe70 <__gethex+0x2b0>)
    fbf0:	movs	r2, #1
    fbf2:	mov	r0, r9
    fbf4:	bl	ec9a <strncmp>
    fbf8:	mov	r7, r0
    fbfa:	cmp	r0, #0
    fbfc:	bne.n	fcce <__gethex+0x10e>
    fbfe:	ldrb.w	r0, [r9, #1]
    fc02:	mov	r6, r4
    fc04:	bl	fb94 <__hexdig_fun>
    fc08:	cmp	r0, #0
    fc0a:	beq.n	fcd2 <__gethex+0x112>
    fc0c:	mov	r3, r4
    fc0e:	ldrb	r0, [r3, #0]
    fc10:	cmp	r0, #48	@ 0x30
    fc12:	mov	r9, r3
    fc14:	add.w	r3, r3, #1
    fc18:	beq.n	fc0e <__gethex+0x4e>
    fc1a:	bl	fb94 <__hexdig_fun>
    fc1e:	clz	r5, r0
    fc22:	lsrs	r5, r5, #5
    fc24:	mov.w	fp, #1
    fc28:	mov	r2, r9
    fc2a:	mov	r6, r2
    fc2c:	adds	r2, #1
    fc2e:	ldrb	r0, [r6, #0]
    fc30:	bl	fb94 <__hexdig_fun>
    fc34:	cmp	r0, #0
    fc36:	bne.n	fc2a <__gethex+0x6a>
    fc38:	ldr	r1, [pc, #564]	@ (fe70 <__gethex+0x2b0>)
    fc3a:	movs	r2, #1
    fc3c:	mov	r0, r6
    fc3e:	bl	ec9a <strncmp>
    fc42:	cmp	r0, #0
    fc44:	bne.n	fcc6 <__gethex+0x106>
    fc46:	cbnz	r4, fc5a <__gethex+0x9a>
    fc48:	adds	r4, r6, #1
    fc4a:	mov	r2, r4
    fc4c:	mov	r6, r2
    fc4e:	adds	r2, #1
    fc50:	ldrb	r0, [r6, #0]
    fc52:	bl	fb94 <__hexdig_fun>
    fc56:	cmp	r0, #0
    fc58:	bne.n	fc4c <__gethex+0x8c>
    fc5a:	subs	r4, r4, r6
    fc5c:	lsls	r7, r4, #2
    fc5e:	ldrb	r3, [r6, #0]
    fc60:	and.w	r3, r3, #223	@ 0xdf
    fc64:	cmp	r3, #80	@ 0x50
    fc66:	bne.n	fce6 <__gethex+0x126>
    fc68:	ldrb	r3, [r6, #1]
    fc6a:	cmp	r3, #43	@ 0x2b
    fc6c:	beq.n	fcd6 <__gethex+0x116>
    fc6e:	cmp	r3, #45	@ 0x2d
    fc70:	beq.n	fcdc <__gethex+0x11c>
    fc72:	adds	r1, r6, #1
    fc74:	movs	r4, #0
    fc76:	ldrb	r0, [r1, #0]
    fc78:	bl	fb94 <__hexdig_fun>
    fc7c:	subs	r3, r0, #1
    fc7e:	uxtb	r3, r3
    fc80:	cmp	r3, #24
    fc82:	bhi.n	fce6 <__gethex+0x126>
    fc84:	sub.w	r2, r0, #16
    fc88:	ldrb.w	r0, [r1, #1]!
    fc8c:	bl	fb94 <__hexdig_fun>
    fc90:	add.w	ip, r0, #4294967295
    fc94:	uxtb.w	ip, ip
    fc98:	cmp.w	ip, #24
    fc9c:	mov.w	r3, #10
    fca0:	bls.n	fce0 <__gethex+0x120>
    fca2:	cbz	r4, fca6 <__gethex+0xe6>
    fca4:	negs	r2, r2
    fca6:	add	r7, r2
    fca8:	str.w	r1, [sl]
    fcac:	cbz	r5, fcea <__gethex+0x12a>
    fcae:	cmp.w	fp, #0
    fcb2:	ite	eq
    fcb4:	moveq	r5, #6
    fcb6:	movne	r5, #0
    fcb8:	mov	r0, r5
    fcba:	add	sp, #20
    fcbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcc0:	movs	r5, #0
    fcc2:	mov	r4, r5
    fcc4:	b.n	fc28 <__gethex+0x68>
    fcc6:	cmp	r4, #0
    fcc8:	bne.n	fc5a <__gethex+0x9a>
    fcca:	mov	r7, r4
    fccc:	b.n	fc5e <__gethex+0x9e>
    fcce:	mov	r6, r9
    fcd0:	mov	r7, r5
    fcd2:	movs	r5, #1
    fcd4:	b.n	fc5e <__gethex+0x9e>
    fcd6:	movs	r4, #0
    fcd8:	adds	r1, r6, #2
    fcda:	b.n	fc76 <__gethex+0xb6>
    fcdc:	movs	r4, #1
    fcde:	b.n	fcd8 <__gethex+0x118>
    fce0:	mla	r0, r3, r2, r0
    fce4:	b.n	fc84 <__gethex+0xc4>
    fce6:	mov	r1, r6
    fce8:	b.n	fca8 <__gethex+0xe8>
    fcea:	sub.w	r3, r6, r9
    fcee:	subs	r3, #1
    fcf0:	mov	r1, r5
    fcf2:	cmp	r3, #7
    fcf4:	bgt.n	fd0c <__gethex+0x14c>
    fcf6:	ldr	r0, [sp, #4]
    fcf8:	bl	10188 <_Balloc>
    fcfc:	mov	r4, r0
    fcfe:	cbnz	r0, fd12 <__gethex+0x152>
    fd00:	ldr	r3, [pc, #368]	@ (fe74 <__gethex+0x2b4>)
    fd02:	mov	r2, r0
    fd04:	movs	r1, #228	@ 0xe4
    fd06:	ldr	r0, [pc, #368]	@ (fe78 <__gethex+0x2b8>)
    fd08:	bl	116c8 <__assert_func>
    fd0c:	adds	r1, #1
    fd0e:	asrs	r3, r3, #1
    fd10:	b.n	fcf2 <__gethex+0x132>
    fd12:	add.w	sl, r0, #20
    fd16:	movs	r3, #0
    fd18:	mov	r5, sl
    fd1a:	mov	fp, r3
    fd1c:	cmp	r9, r6
    fd1e:	bcc.n	fd90 <__gethex+0x1d0>
    fd20:	str.w	fp, [r5], #4
    fd24:	sub.w	r5, r5, sl
    fd28:	asrs	r5, r5, #2
    fd2a:	str	r5, [r4, #16]
    fd2c:	mov	r0, fp
    fd2e:	bl	1036c <__hi0bits>
    fd32:	lsls	r5, r5, #5
    fd34:	ldr.w	r6, [r8]
    fd38:	subs	r5, r5, r0
    fd3a:	cmp	r5, r6
    fd3c:	ble.n	fde8 <__gethex+0x228>
    fd3e:	subs	r5, r5, r6
    fd40:	mov	r1, r5
    fd42:	mov	r0, r4
    fd44:	bl	10a94 <__any_on>
    fd48:	mov	r9, r0
    fd4a:	cbz	r0, fd6c <__gethex+0x1ac>
    fd4c:	subs	r3, r5, #1
    fd4e:	asrs	r1, r3, #5
    fd50:	and.w	r2, r3, #31
    fd54:	ldr.w	r1, [sl, r1, lsl #2]
    fd58:	mov.w	r9, #1
    fd5c:	lsl.w	r2, r9, r2
    fd60:	tst	r2, r1
    fd62:	beq.n	fd6c <__gethex+0x1ac>
    fd64:	cmp	r3, r9
    fd66:	bgt.n	fdd6 <__gethex+0x216>
    fd68:	mov.w	r9, #2
    fd6c:	mov	r1, r5
    fd6e:	mov	r0, r4
    fd70:	bl	faf0 <rshift>
    fd74:	add	r7, r5
    fd76:	ldr.w	r3, [r8, #8]
    fd7a:	cmp	r3, r7
    fd7c:	bge.n	fe04 <__gethex+0x244>
    fd7e:	ldr	r0, [sp, #4]
    fd80:	mov	r1, r4
    fd82:	bl	10208 <_Bfree>
    fd86:	ldr	r2, [sp, #56]	@ 0x38
    fd88:	movs	r3, #0
    fd8a:	str	r3, [r2, #0]
    fd8c:	movs	r5, #163	@ 0xa3
    fd8e:	b.n	fcb8 <__gethex+0xf8>
    fd90:	ldrb.w	r2, [r6, #-1]!
    fd94:	cmp	r2, #46	@ 0x2e
    fd96:	beq.n	fdbe <__gethex+0x1fe>
    fd98:	cmp	r3, #32
    fd9a:	bne.n	fda6 <__gethex+0x1e6>
    fd9c:	str.w	fp, [r5], #4
    fda0:	mov.w	fp, #0
    fda4:	mov	r3, fp
    fda6:	ldrb	r0, [r6, #0]
    fda8:	str	r3, [sp, #12]
    fdaa:	bl	fb94 <__hexdig_fun>
    fdae:	ldr	r3, [sp, #12]
    fdb0:	and.w	r0, r0, #15
    fdb4:	lsls	r0, r3
    fdb6:	orr.w	fp, fp, r0
    fdba:	adds	r3, #4
    fdbc:	b.n	fd1c <__gethex+0x15c>
    fdbe:	cmp	r9, r6
    fdc0:	bhi.n	fd98 <__gethex+0x1d8>
    fdc2:	ldr	r1, [pc, #172]	@ (fe70 <__gethex+0x2b0>)
    fdc4:	str	r3, [sp, #12]
    fdc6:	movs	r2, #1
    fdc8:	mov	r0, r6
    fdca:	bl	ec9a <strncmp>
    fdce:	ldr	r3, [sp, #12]
    fdd0:	cmp	r0, #0
    fdd2:	bne.n	fd98 <__gethex+0x1d8>
    fdd4:	b.n	fd1c <__gethex+0x15c>
    fdd6:	subs	r1, r5, #2
    fdd8:	mov	r0, r4
    fdda:	bl	10a94 <__any_on>
    fdde:	cmp	r0, #0
    fde0:	beq.n	fd68 <__gethex+0x1a8>
    fde2:	mov.w	r9, #3
    fde6:	b.n	fd6c <__gethex+0x1ac>
    fde8:	bge.n	fdfe <__gethex+0x23e>
    fdea:	subs	r5, r6, r5
    fdec:	mov	r1, r4
    fdee:	ldr	r0, [sp, #4]
    fdf0:	mov	r2, r5
    fdf2:	bl	10628 <__lshift>
    fdf6:	subs	r7, r7, r5
    fdf8:	mov	r4, r0
    fdfa:	add.w	sl, r0, #20
    fdfe:	mov.w	r9, #0
    fe02:	b.n	fd76 <__gethex+0x1b6>
    fe04:	ldr.w	r5, [r8, #4]
    fe08:	cmp	r5, r7
    fe0a:	ble.n	feec <__gethex+0x32c>
    fe0c:	subs	r5, r5, r7
    fe0e:	cmp	r6, r5
    fe10:	bgt.n	fe7c <__gethex+0x2bc>
    fe12:	ldr.w	r3, [r8, #12]
    fe16:	cmp	r3, #2
    fe18:	beq.n	fe60 <__gethex+0x2a0>
    fe1a:	cmp	r3, #3
    fe1c:	beq.n	fe68 <__gethex+0x2a8>
    fe1e:	cmp	r3, #1
    fe20:	bne.n	fe4e <__gethex+0x28e>
    fe22:	cmp	r6, r5
    fe24:	bne.n	fe4e <__gethex+0x28e>
    fe26:	cmp	r6, #1
    fe28:	bne.n	fe42 <__gethex+0x282>
    fe2a:	ldr	r2, [sp, #8]
    fe2c:	ldr.w	r3, [r8, #4]
    fe30:	str	r3, [r2, #0]
    fe32:	movs	r3, #1
    fe34:	str	r3, [r4, #16]
    fe36:	str.w	r3, [sl]
    fe3a:	ldr	r3, [sp, #56]	@ 0x38
    fe3c:	movs	r5, #98	@ 0x62
    fe3e:	str	r4, [r3, #0]
    fe40:	b.n	fcb8 <__gethex+0xf8>
    fe42:	subs	r1, r6, #1
    fe44:	mov	r0, r4
    fe46:	bl	10a94 <__any_on>
    fe4a:	cmp	r0, #0
    fe4c:	bne.n	fe2a <__gethex+0x26a>
    fe4e:	ldr	r0, [sp, #4]
    fe50:	mov	r1, r4
    fe52:	bl	10208 <_Bfree>
    fe56:	ldr	r2, [sp, #56]	@ 0x38
    fe58:	movs	r3, #0
    fe5a:	str	r3, [r2, #0]
    fe5c:	movs	r5, #80	@ 0x50
    fe5e:	b.n	fcb8 <__gethex+0xf8>
    fe60:	ldr	r3, [sp, #60]	@ 0x3c
    fe62:	cmp	r3, #0
    fe64:	bne.n	fe4e <__gethex+0x28e>
    fe66:	b.n	fe2a <__gethex+0x26a>
    fe68:	ldr	r3, [sp, #60]	@ 0x3c
    fe6a:	cmp	r3, #0
    fe6c:	bne.n	fe2a <__gethex+0x26a>
    fe6e:	b.n	fe4e <__gethex+0x28e>
    fe70:	.word	0x20001378
    fe74:	.word	0x20001d17
    fe78:	.word	0x20001d28
    fe7c:	subs	r7, r5, #1
    fe7e:	cmp.w	r9, #0
    fe82:	bne.n	fee6 <__gethex+0x326>
    fe84:	cbz	r7, fe90 <__gethex+0x2d0>
    fe86:	mov	r1, r7
    fe88:	mov	r0, r4
    fe8a:	bl	10a94 <__any_on>
    fe8e:	mov	r9, r0
    fe90:	asrs	r2, r7, #5
    fe92:	movs	r3, #1
    fe94:	ldr.w	r2, [sl, r2, lsl #2]
    fe98:	and.w	r7, r7, #31
    fe9c:	lsls	r3, r7
    fe9e:	tst	r3, r2
    fea0:	mov	r1, r5
    fea2:	mov	r0, r4
    fea4:	it	ne
    fea6:	orrne.w	r9, r9, #2
    feaa:	bl	faf0 <rshift>
    feae:	ldr.w	r7, [r8, #4]
    feb2:	subs	r6, r6, r5
    feb4:	movs	r5, #2
    feb6:	cmp.w	r9, #0
    feba:	beq.n	ff4c <__gethex+0x38c>
    febc:	ldr.w	r3, [r8, #12]
    fec0:	cmp	r3, #2
    fec2:	beq.n	fef0 <__gethex+0x330>
    fec4:	cmp	r3, #3
    fec6:	beq.n	fef8 <__gethex+0x338>
    fec8:	cmp	r3, #1
    feca:	bne.n	fee0 <__gethex+0x320>
    fecc:	tst.w	r9, #2
    fed0:	beq.n	fee0 <__gethex+0x320>
    fed2:	ldr.w	r3, [sl]
    fed6:	orr.w	r9, r9, r3
    feda:	tst.w	r9, #1
    fede:	bne.n	fefe <__gethex+0x33e>
    fee0:	orr.w	r5, r5, #16
    fee4:	b.n	ff4c <__gethex+0x38c>
    fee6:	mov.w	r9, #1
    feea:	b.n	fe90 <__gethex+0x2d0>
    feec:	movs	r5, #1
    feee:	b.n	feb6 <__gethex+0x2f6>
    fef0:	ldr	r3, [sp, #60]	@ 0x3c
    fef2:	rsb	r3, r3, #1
    fef6:	str	r3, [sp, #60]	@ 0x3c
    fef8:	ldr	r3, [sp, #60]	@ 0x3c
    fefa:	cmp	r3, #0
    fefc:	beq.n	fee0 <__gethex+0x320>
    fefe:	ldr.w	fp, [r4, #16]
    ff02:	add.w	r3, r4, #20
    ff06:	mov.w	sl, fp, lsl #2
    ff0a:	add.w	r1, r3, fp, lsl #2
    ff0e:	mov.w	ip, #0
    ff12:	mov	r0, r3
    ff14:	ldr.w	r2, [r3], #4
    ff18:	cmp.w	r2, #4294967295
    ff1c:	beq.n	ff56 <__gethex+0x396>
    ff1e:	adds	r2, #1
    ff20:	str	r2, [r0, #0]
    ff22:	cmp	r5, #2
    ff24:	add.w	r3, r4, #20
    ff28:	bne.n	ffa4 <__gethex+0x3e4>
    ff2a:	ldr.w	r2, [r8]
    ff2e:	subs	r2, #1
    ff30:	cmp	r2, r6
    ff32:	bne.n	ff48 <__gethex+0x388>
    ff34:	asrs	r1, r6, #5
    ff36:	movs	r2, #1
    ff38:	ldr.w	r3, [r3, r1, lsl #2]
    ff3c:	and.w	r6, r6, #31
    ff40:	lsl.w	r6, r2, r6
    ff44:	tst	r6, r3
    ff46:	bne.n	ffbe <__gethex+0x3fe>
    ff48:	orr.w	r5, r5, #32
    ff4c:	ldr	r3, [sp, #56]	@ 0x38
    ff4e:	str	r4, [r3, #0]
    ff50:	ldr	r3, [sp, #8]
    ff52:	str	r7, [r3, #0]
    ff54:	b.n	fcb8 <__gethex+0xf8>
    ff56:	cmp	r1, r3
    ff58:	str.w	ip, [r3, #-4]
    ff5c:	bhi.n	ff12 <__gethex+0x352>
    ff5e:	ldr	r3, [r4, #8]
    ff60:	cmp	fp, r3
    ff62:	blt.n	ff94 <__gethex+0x3d4>
    ff64:	ldr	r1, [r4, #4]
    ff66:	ldr	r0, [sp, #4]
    ff68:	adds	r1, #1
    ff6a:	bl	10188 <_Balloc>
    ff6e:	mov	r9, r0
    ff70:	cbnz	r0, ff7a <__gethex+0x3ba>
    ff72:	ldr	r3, [pc, #104]	@ (ffdc <__gethex+0x41c>)
    ff74:	mov	r2, r0
    ff76:	movs	r1, #132	@ 0x84
    ff78:	b.n	fd06 <__gethex+0x146>
    ff7a:	ldr	r2, [r4, #16]
    ff7c:	adds	r2, #2
    ff7e:	add.w	r1, r4, #12
    ff82:	lsls	r2, r2, #2
    ff84:	adds	r0, #12
    ff86:	bl	a2f0 <memcpy>
    ff8a:	mov	r1, r4
    ff8c:	ldr	r0, [sp, #4]
    ff8e:	bl	10208 <_Bfree>
    ff92:	mov	r4, r9
    ff94:	ldr	r3, [r4, #16]
    ff96:	adds	r2, r3, #1
    ff98:	add.w	r3, r4, r3, lsl #2
    ff9c:	str	r2, [r4, #16]
    ff9e:	movs	r2, #1
    ffa0:	str	r2, [r3, #20]
    ffa2:	b.n	ff22 <__gethex+0x362>
    ffa4:	ldr	r2, [r4, #16]
    ffa6:	cmp	r2, fp
    ffa8:	ble.n	ffc2 <__gethex+0x402>
    ffaa:	movs	r1, #1
    ffac:	mov	r0, r4
    ffae:	bl	faf0 <rshift>
    ffb2:	ldr.w	r3, [r8, #8]
    ffb6:	adds	r7, #1
    ffb8:	cmp	r3, r7
    ffba:	blt.w	fd7e <__gethex+0x1be>
    ffbe:	movs	r5, #1
    ffc0:	b.n	ff48 <__gethex+0x388>
    ffc2:	ands.w	r6, r6, #31
    ffc6:	beq.n	ffbe <__gethex+0x3fe>
    ffc8:	add	r3, sl
    ffca:	rsb	r6, r6, #32
    ffce:	ldr.w	r0, [r3, #-4]
    ffd2:	bl	1036c <__hi0bits>
    ffd6:	cmp	r0, r6
    ffd8:	blt.n	ffaa <__gethex+0x3ea>
    ffda:	b.n	ffbe <__gethex+0x3fe>
    ffdc:	.word	0x20001d17

0000ffe0 <L_shift>:
    ffe0:	rsb	r2, r2, #8
    ffe4:	lsls	r2, r2, #2
    ffe6:	push	{r4, r5, r6, lr}
    ffe8:	rsb	r6, r2, #32
    ffec:	ldr	r3, [r0, #4]
    ffee:	ldr	r4, [r0, #0]
    fff0:	lsl.w	r5, r3, r6
    fff4:	orrs	r4, r5
    fff6:	lsrs	r3, r2
    fff8:	str	r4, [r0, #0]
    fffa:	str.w	r3, [r0, #4]!
    fffe:	cmp	r0, r1
   10000:	bcc.n	ffec <L_shift+0xc>
   10002:	pop	{r4, r5, r6, pc}

00010004 <__match>:
   10004:	push	{r4, r5, lr}
   10006:	ldr	r3, [r0, #0]
   10008:	adds	r3, #1
   1000a:	ldrb.w	r4, [r1], #1
   1000e:	cbnz	r4, 10016 <__match+0x12>
   10010:	str	r3, [r0, #0]
   10012:	movs	r0, #1
   10014:	pop	{r4, r5, pc}
   10016:	ldrb.w	r2, [r3], #1
   1001a:	sub.w	r5, r2, #65	@ 0x41
   1001e:	cmp	r5, #25
   10020:	it	ls
   10022:	addls	r2, #32
   10024:	cmp	r2, r4
   10026:	beq.n	1000a <__match+0x6>
   10028:	movs	r0, #0
   1002a:	b.n	10014 <__match+0x10>

0001002c <__hexnan>:
   1002c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10030:	ldr	r3, [r1, #0]
   10032:	ldr	r1, [r0, #0]
   10034:	asrs	r6, r3, #5
   10036:	add.w	r6, r2, r6, lsl #2
   1003a:	ands.w	r3, r3, #31
   1003e:	sub	sp, #28
   10040:	it	ne
   10042:	addne	r6, #4
   10044:	movs	r5, #0
   10046:	subs	r7, r6, #4
   10048:	mov	sl, r0
   1004a:	mov	r8, r2
   1004c:	str	r3, [sp, #4]
   1004e:	str.w	r5, [r6, #-4]
   10052:	mov	r9, r7
   10054:	mov	r4, r7
   10056:	str	r5, [sp, #8]
   10058:	mov	fp, r5
   1005a:	ldrb	r2, [r1, #1]
   1005c:	adds	r3, r1, #1
   1005e:	str	r3, [sp, #12]
   10060:	cbz	r2, 100b4 <__hexnan+0x88>
   10062:	mov	r0, r2
   10064:	str	r1, [sp, #20]
   10066:	str	r2, [sp, #16]
   10068:	bl	fb94 <__hexdig_fun>
   1006c:	cmp	r0, #0
   1006e:	bne.n	10114 <__hexnan+0xe8>
   10070:	ldr	r2, [sp, #16]
   10072:	ldr	r1, [sp, #20]
   10074:	cmp	r2, #32
   10076:	bhi.n	100aa <__hexnan+0x7e>
   10078:	ldr	r3, [sp, #8]
   1007a:	cmp	fp, r3
   1007c:	ble.n	100a6 <__hexnan+0x7a>
   1007e:	cmp	r4, r9
   10080:	bcs.n	10090 <__hexnan+0x64>
   10082:	cmp	r5, #7
   10084:	bgt.n	10090 <__hexnan+0x64>
   10086:	mov	r2, r5
   10088:	mov	r1, r9
   1008a:	mov	r0, r4
   1008c:	bl	ffe0 <L_shift>
   10090:	cmp	r4, r8
   10092:	bls.n	1013a <__hexnan+0x10e>
   10094:	movs	r3, #0
   10096:	sub.w	r9, r4, #4
   1009a:	str.w	r3, [r4, #-4]
   1009e:	str.w	fp, [sp, #8]
   100a2:	mov	r4, r9
   100a4:	mov	r5, r3
   100a6:	ldr	r1, [sp, #12]
   100a8:	b.n	1005a <__hexnan+0x2e>
   100aa:	cmp	r2, #41	@ 0x29
   100ac:	bne.n	1015e <__hexnan+0x132>
   100ae:	adds	r1, #2
   100b0:	str.w	r1, [sl]
   100b4:	cmp.w	fp, #0
   100b8:	beq.n	1015e <__hexnan+0x132>
   100ba:	cmp	r4, r9
   100bc:	bcs.n	100cc <__hexnan+0xa0>
   100be:	cmp	r5, #7
   100c0:	bgt.n	100cc <__hexnan+0xa0>
   100c2:	mov	r2, r5
   100c4:	mov	r1, r9
   100c6:	mov	r0, r4
   100c8:	bl	ffe0 <L_shift>
   100cc:	cmp	r4, r8
   100ce:	bls.n	1013e <__hexnan+0x112>
   100d0:	sub.w	r2, r8, #4
   100d4:	mov	r3, r4
   100d6:	ldr.w	r1, [r3], #4
   100da:	str.w	r1, [r2, #4]!
   100de:	cmp	r7, r3
   100e0:	bcs.n	100d6 <__hexnan+0xaa>
   100e2:	subs	r3, r7, r4
   100e4:	bic.w	r3, r3, #3
   100e8:	adds	r3, #4
   100ea:	adds	r4, #1
   100ec:	subs	r6, #3
   100ee:	cmp	r4, r6
   100f0:	it	hi
   100f2:	movhi	r3, #4
   100f4:	add	r3, r8
   100f6:	movs	r2, #0
   100f8:	str.w	r2, [r3], #4
   100fc:	cmp	r7, r3
   100fe:	bcs.n	100f8 <__hexnan+0xcc>
   10100:	ldr	r3, [r7, #0]
   10102:	cbnz	r3, 1010c <__hexnan+0xe0>
   10104:	cmp	r7, r8
   10106:	bne.n	1015a <__hexnan+0x12e>
   10108:	movs	r3, #1
   1010a:	str	r3, [r7, #0]
   1010c:	movs	r0, #5
   1010e:	add	sp, #28
   10110:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10114:	adds	r5, #1
   10116:	cmp	r5, #8
   10118:	add.w	fp, fp, #1
   1011c:	ble.n	1012c <__hexnan+0x100>
   1011e:	cmp	r4, r8
   10120:	bls.n	100a6 <__hexnan+0x7a>
   10122:	movs	r3, #0
   10124:	str.w	r3, [r4, #-4]
   10128:	movs	r5, #1
   1012a:	subs	r4, #4
   1012c:	ldr	r2, [r4, #0]
   1012e:	and.w	r0, r0, #15
   10132:	orr.w	r0, r0, r2, lsl #4
   10136:	str	r0, [r4, #0]
   10138:	b.n	100a6 <__hexnan+0x7a>
   1013a:	movs	r5, #8
   1013c:	b.n	100a6 <__hexnan+0x7a>
   1013e:	ldr	r3, [sp, #4]
   10140:	cmp	r3, #0
   10142:	beq.n	10100 <__hexnan+0xd4>
   10144:	rsb	r3, r3, #32
   10148:	mov.w	r2, #4294967295
   1014c:	lsrs	r2, r3
   1014e:	ldr.w	r3, [r6, #-4]
   10152:	ands	r3, r2
   10154:	str.w	r3, [r6, #-4]
   10158:	b.n	10100 <__hexnan+0xd4>
   1015a:	subs	r7, #4
   1015c:	b.n	10100 <__hexnan+0xd4>
   1015e:	movs	r0, #4
   10160:	b.n	1010e <__hexnan+0xe2>

00010162 <__ascii_mbtowc>:
   10162:	sub	sp, #8
   10164:	cbnz	r1, 10168 <__ascii_mbtowc+0x6>
   10166:	add	r1, sp, #4
   10168:	cbz	r2, 1017c <__ascii_mbtowc+0x1a>
   1016a:	cbz	r3, 10180 <__ascii_mbtowc+0x1e>
   1016c:	ldrb	r3, [r2, #0]
   1016e:	str	r3, [r1, #0]
   10170:	ldrb	r2, [r2, #0]
   10172:	subs	r0, r2, #0
   10174:	it	ne
   10176:	movne	r0, #1
   10178:	add	sp, #8
   1017a:	bx	lr
   1017c:	mov	r0, r2
   1017e:	b.n	10178 <__ascii_mbtowc+0x16>
   10180:	mvn.w	r0, #1
   10184:	b.n	10178 <__ascii_mbtowc+0x16>
	...

00010188 <_Balloc>:
   10188:	push	{r4, r5, r6, lr}
   1018a:	ldr	r6, [r0, #28]
   1018c:	mov	r4, r0
   1018e:	mov	r5, r1
   10190:	cbnz	r6, 101b0 <_Balloc+0x28>
   10192:	movs	r0, #16
   10194:	bl	cd14 <malloc>
   10198:	mov	r2, r0
   1019a:	str	r0, [r4, #28]
   1019c:	cbnz	r0, 101a8 <_Balloc+0x20>
   1019e:	ldr	r3, [pc, #96]	@ (10200 <_Balloc+0x78>)
   101a0:	ldr	r0, [pc, #96]	@ (10204 <_Balloc+0x7c>)
   101a2:	movs	r1, #107	@ 0x6b
   101a4:	bl	116c8 <__assert_func>
   101a8:	strd	r6, r6, [r0, #4]
   101ac:	str	r6, [r0, #0]
   101ae:	str	r6, [r0, #12]
   101b0:	ldr	r6, [r4, #28]
   101b2:	ldr	r3, [r6, #12]
   101b4:	cbz	r3, 101d8 <_Balloc+0x50>
   101b6:	ldr	r3, [r4, #28]
   101b8:	ldr	r3, [r3, #12]
   101ba:	ldr.w	r0, [r3, r5, lsl #2]
   101be:	cbnz	r0, 101f0 <_Balloc+0x68>
   101c0:	movs	r1, #1
   101c2:	lsl.w	r6, r1, r5
   101c6:	adds	r2, r6, #5
   101c8:	lsls	r2, r2, #2
   101ca:	mov	r0, r4
   101cc:	bl	11704 <_calloc_r>
   101d0:	cbz	r0, 101ec <_Balloc+0x64>
   101d2:	strd	r5, r6, [r0, #4]
   101d6:	b.n	101f6 <_Balloc+0x6e>
   101d8:	movs	r2, #33	@ 0x21
   101da:	movs	r1, #4
   101dc:	mov	r0, r4
   101de:	bl	11704 <_calloc_r>
   101e2:	ldr	r3, [r4, #28]
   101e4:	str	r0, [r6, #12]
   101e6:	ldr	r3, [r3, #12]
   101e8:	cmp	r3, #0
   101ea:	bne.n	101b6 <_Balloc+0x2e>
   101ec:	movs	r0, #0
   101ee:	pop	{r4, r5, r6, pc}
   101f0:	ldr	r2, [r0, #0]
   101f2:	str.w	r2, [r3, r5, lsl #2]
   101f6:	movs	r3, #0
   101f8:	strd	r3, r3, [r0, #12]
   101fc:	b.n	101ee <_Balloc+0x66>
   101fe:	nop
   10200:	.word	0x20001ca7
   10204:	.word	0x20001d89

00010208 <_Bfree>:
   10208:	push	{r4, r5, r6, lr}
   1020a:	ldr	r6, [r0, #28]
   1020c:	mov	r5, r0
   1020e:	mov	r4, r1
   10210:	cbnz	r6, 10230 <_Bfree+0x28>
   10212:	movs	r0, #16
   10214:	bl	cd14 <malloc>
   10218:	mov	r2, r0
   1021a:	str	r0, [r5, #28]
   1021c:	cbnz	r0, 10228 <_Bfree+0x20>
   1021e:	ldr	r3, [pc, #36]	@ (10244 <_Bfree+0x3c>)
   10220:	ldr	r0, [pc, #36]	@ (10248 <_Bfree+0x40>)
   10222:	movs	r1, #143	@ 0x8f
   10224:	bl	116c8 <__assert_func>
   10228:	strd	r6, r6, [r0, #4]
   1022c:	str	r6, [r0, #0]
   1022e:	str	r6, [r0, #12]
   10230:	cbz	r4, 10242 <_Bfree+0x3a>
   10232:	ldr	r3, [r5, #28]
   10234:	ldr	r2, [r4, #4]
   10236:	ldr	r3, [r3, #12]
   10238:	ldr.w	r1, [r3, r2, lsl #2]
   1023c:	str	r1, [r4, #0]
   1023e:	str.w	r4, [r3, r2, lsl #2]
   10242:	pop	{r4, r5, r6, pc}
   10244:	.word	0x20001ca7
   10248:	.word	0x20001d89

0001024c <__multadd>:
   1024c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10250:	ldr	r5, [r1, #16]
   10252:	mov	r7, r0
   10254:	mov	r4, r1
   10256:	mov	r6, r3
   10258:	add.w	ip, r1, #20
   1025c:	movs	r0, #0
   1025e:	ldr.w	r3, [ip]
   10262:	uxth	r1, r3
   10264:	mla	r1, r2, r1, r6
   10268:	lsrs	r6, r3, #16
   1026a:	lsrs	r3, r1, #16
   1026c:	mla	r3, r2, r6, r3
   10270:	uxth	r1, r1
   10272:	adds	r0, #1
   10274:	add.w	r1, r1, r3, lsl #16
   10278:	cmp	r5, r0
   1027a:	str.w	r1, [ip], #4
   1027e:	mov.w	r6, r3, lsr #16
   10282:	bgt.n	1025e <__multadd+0x12>
   10284:	cbz	r6, 102ca <__multadd+0x7e>
   10286:	ldr	r3, [r4, #8]
   10288:	cmp	r3, r5
   1028a:	bgt.n	102c0 <__multadd+0x74>
   1028c:	ldr	r1, [r4, #4]
   1028e:	mov	r0, r7
   10290:	adds	r1, #1
   10292:	bl	10188 <_Balloc>
   10296:	mov	r8, r0
   10298:	cbnz	r0, 102a6 <__multadd+0x5a>
   1029a:	mov	r2, r0
   1029c:	ldr	r3, [pc, #48]	@ (102d0 <__multadd+0x84>)
   1029e:	ldr	r0, [pc, #52]	@ (102d4 <__multadd+0x88>)
   102a0:	movs	r1, #186	@ 0xba
   102a2:	bl	116c8 <__assert_func>
   102a6:	ldr	r2, [r4, #16]
   102a8:	adds	r2, #2
   102aa:	add.w	r1, r4, #12
   102ae:	lsls	r2, r2, #2
   102b0:	adds	r0, #12
   102b2:	bl	a2f0 <memcpy>
   102b6:	mov	r1, r4
   102b8:	mov	r0, r7
   102ba:	bl	10208 <_Bfree>
   102be:	mov	r4, r8
   102c0:	add.w	r3, r4, r5, lsl #2
   102c4:	adds	r5, #1
   102c6:	str	r6, [r3, #20]
   102c8:	str	r5, [r4, #16]
   102ca:	mov	r0, r4
   102cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102d0:	.word	0x20001d17
   102d4:	.word	0x20001d89

000102d8 <__s2b>:
   102d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   102dc:	mov	r4, r1
   102de:	mov	r5, r2
   102e0:	mov	r7, r3
   102e2:	movs	r2, #9
   102e4:	adds	r3, #8
   102e6:	mov	r6, r0
   102e8:	sdiv	r3, r3, r2
   102ec:	movs	r1, #0
   102ee:	movs	r2, #1
   102f0:	cmp	r2, r3
   102f2:	blt.n	10308 <__s2b+0x30>
   102f4:	mov	r0, r6
   102f6:	bl	10188 <_Balloc>
   102fa:	cbnz	r0, 1030e <__s2b+0x36>
   102fc:	mov	r2, r0
   102fe:	ldr	r3, [pc, #100]	@ (10364 <__s2b+0x8c>)
   10300:	ldr	r0, [pc, #100]	@ (10368 <__s2b+0x90>)
   10302:	movs	r1, #211	@ 0xd3
   10304:	bl	116c8 <__assert_func>
   10308:	lsls	r2, r2, #1
   1030a:	adds	r1, #1
   1030c:	b.n	102f0 <__s2b+0x18>
   1030e:	ldr	r3, [sp, #32]
   10310:	str	r3, [r0, #20]
   10312:	cmp	r5, #9
   10314:	mov.w	r3, #1
   10318:	str	r3, [r0, #16]
   1031a:	ble.n	1034a <__s2b+0x72>
   1031c:	add.w	r9, r4, #9
   10320:	mov	r8, r9
   10322:	add	r4, r5
   10324:	ldrb.w	r3, [r8], #1
   10328:	mov	r1, r0
   1032a:	subs	r3, #48	@ 0x30
   1032c:	movs	r2, #10
   1032e:	mov	r0, r6
   10330:	bl	1024c <__multadd>
   10334:	cmp	r8, r4
   10336:	bne.n	10324 <__s2b+0x4c>
   10338:	sub.w	r4, r5, #8
   1033c:	add	r4, r9
   1033e:	subs	r5, r5, r4
   10340:	adds	r3, r4, r5
   10342:	cmp	r3, r7
   10344:	blt.n	10350 <__s2b+0x78>
   10346:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1034a:	adds	r4, #10
   1034c:	movs	r5, #9
   1034e:	b.n	1033e <__s2b+0x66>
   10350:	ldrb.w	r3, [r4], #1
   10354:	mov	r1, r0
   10356:	subs	r3, #48	@ 0x30
   10358:	movs	r2, #10
   1035a:	mov	r0, r6
   1035c:	bl	1024c <__multadd>
   10360:	b.n	10340 <__s2b+0x68>
   10362:	nop
   10364:	.word	0x20001d17
   10368:	.word	0x20001d89

0001036c <__hi0bits>:
   1036c:	cmp.w	r0, #65536	@ 0x10000
   10370:	mov	r3, r0
   10372:	itet	cc
   10374:	lslcc	r3, r0, #16
   10376:	movcs	r0, #0
   10378:	movcc	r0, #16
   1037a:	cmp.w	r3, #16777216	@ 0x1000000
   1037e:	itt	cc
   10380:	lslcc	r3, r3, #8
   10382:	addcc	r0, #8
   10384:	cmp.w	r3, #268435456	@ 0x10000000
   10388:	itt	cc
   1038a:	lslcc	r3, r3, #4
   1038c:	addcc	r0, #4
   1038e:	cmp.w	r3, #1073741824	@ 0x40000000
   10392:	itt	cc
   10394:	lslcc	r3, r3, #2
   10396:	addcc	r0, #2
   10398:	cmp	r3, #0
   1039a:	blt.n	103a8 <__hi0bits+0x3c>
   1039c:	tst.w	r3, #1073741824	@ 0x40000000
   103a0:	add.w	r0, r0, #1
   103a4:	it	eq
   103a6:	moveq	r0, #32
   103a8:	bx	lr

000103aa <__lo0bits>:
   103aa:	ldr	r3, [r0, #0]
   103ac:	mov	r2, r0
   103ae:	ands.w	r0, r3, #7
   103b2:	beq.n	103cc <__lo0bits+0x22>
   103b4:	lsls	r1, r3, #31
   103b6:	bmi.n	103fc <__lo0bits+0x52>
   103b8:	lsls	r0, r3, #30
   103ba:	itett	mi
   103bc:	lsrmi	r3, r3, #1
   103be:	lsrpl	r3, r3, #2
   103c0:	movmi	r0, #1
   103c2:	strmi	r3, [r2, #0]
   103c4:	itt	pl
   103c6:	strpl	r3, [r2, #0]
   103c8:	movpl	r0, #2
   103ca:	bx	lr
   103cc:	uxth	r1, r3
   103ce:	cbnz	r1, 103d4 <__lo0bits+0x2a>
   103d0:	lsrs	r3, r3, #16
   103d2:	movs	r0, #16
   103d4:	uxtb	r1, r3
   103d6:	cbnz	r1, 103dc <__lo0bits+0x32>
   103d8:	adds	r0, #8
   103da:	lsrs	r3, r3, #8
   103dc:	lsls	r1, r3, #28
   103de:	itt	eq
   103e0:	lsreq	r3, r3, #4
   103e2:	addeq	r0, #4
   103e4:	lsls	r1, r3, #30
   103e6:	itt	eq
   103e8:	lsreq	r3, r3, #2
   103ea:	addeq	r0, #2
   103ec:	lsls	r1, r3, #31
   103ee:	bmi.n	103f8 <__lo0bits+0x4e>
   103f0:	lsrs	r3, r3, #1
   103f2:	add.w	r0, r0, #1
   103f6:	beq.n	10400 <__lo0bits+0x56>
   103f8:	str	r3, [r2, #0]
   103fa:	bx	lr
   103fc:	movs	r0, #0
   103fe:	bx	lr
   10400:	movs	r0, #32
   10402:	bx	lr

00010404 <__i2b>:
   10404:	push	{r4, lr}
   10406:	mov	r4, r1
   10408:	movs	r1, #1
   1040a:	bl	10188 <_Balloc>
   1040e:	mov	r2, r0
   10410:	cbnz	r0, 1041e <__i2b+0x1a>
   10412:	ldr	r3, [pc, #20]	@ (10428 <__i2b+0x24>)
   10414:	ldr	r0, [pc, #20]	@ (1042c <__i2b+0x28>)
   10416:	movw	r1, #325	@ 0x145
   1041a:	bl	116c8 <__assert_func>
   1041e:	movs	r3, #1
   10420:	str	r4, [r0, #20]
   10422:	str	r3, [r0, #16]
   10424:	pop	{r4, pc}
   10426:	nop
   10428:	.word	0x20001d17
   1042c:	.word	0x20001d89

00010430 <__multiply>:
   10430:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10434:	mov	r7, r2
   10436:	ldr	r2, [r1, #16]
   10438:	ldr	r3, [r7, #16]
   1043a:	cmp	r2, r3
   1043c:	it	ge
   1043e:	movge	r3, r7
   10440:	mov	r9, r1
   10442:	itt	ge
   10444:	movge	r7, r1
   10446:	movge	r9, r3
   10448:	ldr	r5, [r7, #16]
   1044a:	ldr.w	sl, [r9, #16]
   1044e:	ldr	r3, [r7, #8]
   10450:	ldr	r1, [r7, #4]
   10452:	add.w	r6, r5, sl
   10456:	cmp	r3, r6
   10458:	sub	sp, #20
   1045a:	it	lt
   1045c:	addlt	r1, #1
   1045e:	bl	10188 <_Balloc>
   10462:	cbnz	r0, 10472 <__multiply+0x42>
   10464:	mov	r2, r0
   10466:	ldr	r3, [pc, #260]	@ (1056c <__multiply+0x13c>)
   10468:	ldr	r0, [pc, #260]	@ (10570 <__multiply+0x140>)
   1046a:	mov.w	r1, #354	@ 0x162
   1046e:	bl	116c8 <__assert_func>
   10472:	add.w	r4, r0, #20
   10476:	add.w	lr, r4, r6, lsl #2
   1047a:	mov	r3, r4
   1047c:	movs	r2, #0
   1047e:	cmp	r3, lr
   10480:	bcc.n	104c4 <__multiply+0x94>
   10482:	add.w	r8, r7, #20
   10486:	add.w	r1, r9, #20
   1048a:	add.w	r5, r8, r5, lsl #2
   1048e:	add.w	r3, r1, sl, lsl #2
   10492:	str	r3, [sp, #8]
   10494:	subs	r3, r5, r7
   10496:	subs	r3, #21
   10498:	bic.w	r3, r3, #3
   1049c:	adds	r3, #4
   1049e:	adds	r7, #21
   104a0:	cmp	r5, r7
   104a2:	it	cc
   104a4:	movcc	r3, #4
   104a6:	str	r3, [sp, #4]
   104a8:	ldr	r3, [sp, #8]
   104aa:	str	r1, [sp, #12]
   104ac:	cmp	r3, r1
   104ae:	bhi.n	104ca <__multiply+0x9a>
   104b0:	cmp	r6, #0
   104b2:	ble.n	104bc <__multiply+0x8c>
   104b4:	ldr.w	r3, [lr, #-4]!
   104b8:	cmp	r3, #0
   104ba:	beq.n	10568 <__multiply+0x138>
   104bc:	str	r6, [r0, #16]
   104be:	add	sp, #20
   104c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104c4:	str.w	r2, [r3], #4
   104c8:	b.n	1047e <__multiply+0x4e>
   104ca:	ldrh.w	sl, [r1]
   104ce:	cmp.w	sl, #0
   104d2:	beq.n	10514 <__multiply+0xe4>
   104d4:	mov	ip, r8
   104d6:	mov	r9, r4
   104d8:	movs	r7, #0
   104da:	ldr.w	r2, [ip], #4
   104de:	ldr.w	r3, [r9]
   104e2:	uxth.w	fp, r2
   104e6:	uxth	r3, r3
   104e8:	mla	r3, sl, fp, r3
   104ec:	add	r3, r7
   104ee:	ldr.w	r7, [r9]
   104f2:	lsrs	r2, r2, #16
   104f4:	lsrs	r7, r7, #16
   104f6:	mla	r2, sl, r2, r7
   104fa:	add.w	r2, r2, r3, lsr #16
   104fe:	uxth	r3, r3
   10500:	orr.w	r3, r3, r2, lsl #16
   10504:	cmp	r5, ip
   10506:	str.w	r3, [r9], #4
   1050a:	mov.w	r7, r2, lsr #16
   1050e:	bhi.n	104da <__multiply+0xaa>
   10510:	ldr	r3, [sp, #4]
   10512:	str	r7, [r4, r3]
   10514:	ldr	r3, [sp, #12]
   10516:	ldrh.w	r9, [r3, #2]
   1051a:	adds	r1, #4
   1051c:	cmp.w	r9, #0
   10520:	beq.n	10564 <__multiply+0x134>
   10522:	ldr	r3, [r4, #0]
   10524:	mov	r7, r8
   10526:	mov	ip, r4
   10528:	mov.w	sl, #0
   1052c:	ldrh.w	fp, [r7]
   10530:	ldrh.w	r2, [ip, #2]
   10534:	mla	r2, r9, fp, r2
   10538:	add	r2, sl
   1053a:	uxth	r3, r3
   1053c:	orr.w	r3, r3, r2, lsl #16
   10540:	str.w	r3, [ip], #4
   10544:	ldr.w	r3, [r7], #4
   10548:	mov.w	sl, r3, lsr #16
   1054c:	ldrh.w	r3, [ip]
   10550:	mla	r3, r9, sl, r3
   10554:	add.w	r3, r3, r2, lsr #16
   10558:	cmp	r5, r7
   1055a:	mov.w	sl, r3, lsr #16
   1055e:	bhi.n	1052c <__multiply+0xfc>
   10560:	ldr	r2, [sp, #4]
   10562:	str	r3, [r4, r2]
   10564:	adds	r4, #4
   10566:	b.n	104a8 <__multiply+0x78>
   10568:	subs	r6, #1
   1056a:	b.n	104b0 <__multiply+0x80>
   1056c:	.word	0x20001d17
   10570:	.word	0x20001d89

00010574 <__pow5mult>:
   10574:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10578:	mov	r5, r2
   1057a:	ands.w	r2, r2, #3
   1057e:	mov	r7, r0
   10580:	mov	r6, r1
   10582:	beq.n	10594 <__pow5mult+0x20>
   10584:	ldr	r4, [pc, #148]	@ (1061c <__pow5mult+0xa8>)
   10586:	subs	r2, #1
   10588:	movs	r3, #0
   1058a:	ldr.w	r2, [r4, r2, lsl #2]
   1058e:	bl	1024c <__multadd>
   10592:	mov	r6, r0
   10594:	asrs	r5, r5, #2
   10596:	beq.n	10614 <__pow5mult+0xa0>
   10598:	ldr	r4, [r7, #28]
   1059a:	cbnz	r4, 105bc <__pow5mult+0x48>
   1059c:	movs	r0, #16
   1059e:	bl	cd14 <malloc>
   105a2:	mov	r2, r0
   105a4:	str	r0, [r7, #28]
   105a6:	cbnz	r0, 105b4 <__pow5mult+0x40>
   105a8:	ldr	r3, [pc, #116]	@ (10620 <__pow5mult+0xac>)
   105aa:	ldr	r0, [pc, #120]	@ (10624 <__pow5mult+0xb0>)
   105ac:	movw	r1, #435	@ 0x1b3
   105b0:	bl	116c8 <__assert_func>
   105b4:	strd	r4, r4, [r0, #4]
   105b8:	str	r4, [r0, #0]
   105ba:	str	r4, [r0, #12]
   105bc:	ldr.w	r8, [r7, #28]
   105c0:	ldr.w	r4, [r8, #8]
   105c4:	cbnz	r4, 105da <__pow5mult+0x66>
   105c6:	movw	r1, #625	@ 0x271
   105ca:	mov	r0, r7
   105cc:	bl	10404 <__i2b>
   105d0:	movs	r3, #0
   105d2:	str.w	r0, [r8, #8]
   105d6:	mov	r4, r0
   105d8:	str	r3, [r0, #0]
   105da:	mov.w	r9, #0
   105de:	lsls	r3, r5, #31
   105e0:	bpl.n	105f8 <__pow5mult+0x84>
   105e2:	mov	r1, r6
   105e4:	mov	r2, r4
   105e6:	mov	r0, r7
   105e8:	bl	10430 <__multiply>
   105ec:	mov	r1, r6
   105ee:	mov	r8, r0
   105f0:	mov	r0, r7
   105f2:	bl	10208 <_Bfree>
   105f6:	mov	r6, r8
   105f8:	asrs	r5, r5, #1
   105fa:	beq.n	10614 <__pow5mult+0xa0>
   105fc:	ldr	r0, [r4, #0]
   105fe:	cbnz	r0, 10610 <__pow5mult+0x9c>
   10600:	mov	r2, r4
   10602:	mov	r1, r4
   10604:	mov	r0, r7
   10606:	bl	10430 <__multiply>
   1060a:	str	r0, [r4, #0]
   1060c:	str.w	r9, [r0]
   10610:	mov	r4, r0
   10612:	b.n	105de <__pow5mult+0x6a>
   10614:	mov	r0, r6
   10616:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1061a:	nop
   1061c:	.word	0x20000afc
   10620:	.word	0x20001ca7
   10624:	.word	0x20001d89

00010628 <__lshift>:
   10628:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1062c:	mov	r4, r1
   1062e:	ldr	r1, [r1, #4]
   10630:	ldr	r3, [r4, #16]
   10632:	add.w	r8, r3, r2, asr #5
   10636:	ldr	r3, [r4, #8]
   10638:	mov	r7, r0
   1063a:	mov	r9, r2
   1063c:	mov.w	sl, r2, asr #5
   10640:	add.w	r6, r8, #1
   10644:	cmp	r3, r6
   10646:	blt.n	10660 <__lshift+0x38>
   10648:	mov	r0, r7
   1064a:	bl	10188 <_Balloc>
   1064e:	mov	r5, r0
   10650:	cbnz	r0, 10666 <__lshift+0x3e>
   10652:	mov	r2, r0
   10654:	ldr	r3, [pc, #160]	@ (106f8 <__lshift+0xd0>)
   10656:	ldr	r0, [pc, #164]	@ (106fc <__lshift+0xd4>)
   10658:	mov.w	r1, #478	@ 0x1de
   1065c:	bl	116c8 <__assert_func>
   10660:	adds	r1, #1
   10662:	lsls	r3, r3, #1
   10664:	b.n	10644 <__lshift+0x1c>
   10666:	movs	r3, #0
   10668:	add.w	r1, r0, #20
   1066c:	add.w	r2, r0, #16
   10670:	mov	r0, r3
   10672:	cmp	r3, sl
   10674:	blt.n	106de <__lshift+0xb6>
   10676:	ldr	r0, [r4, #16]
   10678:	bic.w	sl, sl, sl, asr #31
   1067c:	add.w	r3, r4, #20
   10680:	ands.w	r9, r9, #31
   10684:	add.w	r1, r1, sl, lsl #2
   10688:	add.w	ip, r3, r0, lsl #2
   1068c:	beq.n	106e6 <__lshift+0xbe>
   1068e:	rsb	lr, r9, #32
   10692:	mov	sl, r1
   10694:	movs	r2, #0
   10696:	ldr	r0, [r3, #0]
   10698:	lsl.w	r0, r0, r9
   1069c:	orrs	r0, r2
   1069e:	str.w	r0, [sl], #4
   106a2:	ldr.w	r2, [r3], #4
   106a6:	cmp	ip, r3
   106a8:	lsr.w	r2, r2, lr
   106ac:	bhi.n	10696 <__lshift+0x6e>
   106ae:	sub.w	r3, ip, r4
   106b2:	subs	r3, #21
   106b4:	bic.w	r3, r3, #3
   106b8:	adds	r3, #4
   106ba:	add.w	r0, r4, #21
   106be:	cmp	r0, ip
   106c0:	it	hi
   106c2:	movhi	r3, #4
   106c4:	str	r2, [r1, r3]
   106c6:	cbz	r2, 106cc <__lshift+0xa4>
   106c8:	add.w	r6, r8, #2
   106cc:	subs	r6, #1
   106ce:	mov	r0, r7
   106d0:	str	r6, [r5, #16]
   106d2:	mov	r1, r4
   106d4:	bl	10208 <_Bfree>
   106d8:	mov	r0, r5
   106da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   106de:	str.w	r0, [r2, #4]!
   106e2:	adds	r3, #1
   106e4:	b.n	10672 <__lshift+0x4a>
   106e6:	subs	r1, #4
   106e8:	ldr.w	r2, [r3], #4
   106ec:	str.w	r2, [r1, #4]!
   106f0:	cmp	ip, r3
   106f2:	bhi.n	106e8 <__lshift+0xc0>
   106f4:	b.n	106cc <__lshift+0xa4>
   106f6:	nop
   106f8:	.word	0x20001d17
   106fc:	.word	0x20001d89

00010700 <__mcmp>:
   10700:	ldr	r2, [r1, #16]
   10702:	mov	r3, r0
   10704:	ldr	r0, [r0, #16]
   10706:	subs	r0, r0, r2
   10708:	push	{r4, r5, lr}
   1070a:	bne.n	1072a <__mcmp+0x2a>
   1070c:	adds	r3, #20
   1070e:	adds	r1, #20
   10710:	add.w	r4, r3, r2, lsl #2
   10714:	add.w	r1, r1, r2, lsl #2
   10718:	ldr.w	r5, [r4, #-4]!
   1071c:	ldr.w	r2, [r1, #-4]!
   10720:	cmp	r5, r2
   10722:	beq.n	1072c <__mcmp+0x2c>
   10724:	bcs.n	10732 <__mcmp+0x32>
   10726:	mov.w	r0, #4294967295
   1072a:	pop	{r4, r5, pc}
   1072c:	cmp	r3, r4
   1072e:	bcc.n	10718 <__mcmp+0x18>
   10730:	b.n	1072a <__mcmp+0x2a>
   10732:	movs	r0, #1
   10734:	b.n	1072a <__mcmp+0x2a>
	...

00010738 <__mdiff>:
   10738:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1073c:	mov	r9, r1
   1073e:	mov	r6, r0
   10740:	mov	r1, r2
   10742:	mov	r0, r9
   10744:	mov	r4, r2
   10746:	bl	10700 <__mcmp>
   1074a:	subs	r5, r0, #0
   1074c:	bne.n	10774 <__mdiff+0x3c>
   1074e:	mov	r1, r5
   10750:	mov	r0, r6
   10752:	bl	10188 <_Balloc>
   10756:	mov	r2, r0
   10758:	cbnz	r0, 10766 <__mdiff+0x2e>
   1075a:	ldr	r3, [pc, #252]	@ (10858 <__mdiff+0x120>)
   1075c:	movw	r1, #567	@ 0x237
   10760:	ldr	r0, [pc, #248]	@ (1085c <__mdiff+0x124>)
   10762:	bl	116c8 <__assert_func>
   10766:	movs	r3, #1
   10768:	strd	r3, r5, [r0, #16]
   1076c:	mov	r0, r2
   1076e:	add	sp, #12
   10770:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10774:	itt	lt
   10776:	movlt	r3, r9
   10778:	movlt	r9, r4
   1077a:	mov	r0, r6
   1077c:	ldr.w	r1, [r9, #4]
   10780:	itte	lt
   10782:	movlt	r4, r3
   10784:	movlt	r5, #1
   10786:	movge	r5, #0
   10788:	bl	10188 <_Balloc>
   1078c:	mov	r2, r0
   1078e:	cbnz	r0, 10798 <__mdiff+0x60>
   10790:	ldr	r3, [pc, #196]	@ (10858 <__mdiff+0x120>)
   10792:	movw	r1, #581	@ 0x245
   10796:	b.n	10760 <__mdiff+0x28>
   10798:	ldr.w	r7, [r9, #16]
   1079c:	ldr	r6, [r4, #16]
   1079e:	str	r5, [r0, #12]
   107a0:	add.w	r3, r9, #16
   107a4:	add.w	r5, r9, #20
   107a8:	add.w	lr, r4, #20
   107ac:	add.w	fp, r0, #20
   107b0:	add.w	r8, r5, r7, lsl #2
   107b4:	add.w	r6, lr, r6, lsl #2
   107b8:	str	r3, [sp, #4]
   107ba:	mov	r9, fp
   107bc:	mov.w	ip, #0
   107c0:	ldr	r3, [sp, #4]
   107c2:	ldr.w	r0, [lr], #4
   107c6:	ldr.w	sl, [r3, #4]!
   107ca:	str	r3, [sp, #4]
   107cc:	uxth.w	r3, sl
   107d0:	mov	r1, r3
   107d2:	uxth	r3, r0
   107d4:	subs	r3, r1, r3
   107d6:	lsrs	r0, r0, #16
   107d8:	add	r3, ip
   107da:	rsb	r0, r0, sl, lsr #16
   107de:	add.w	r0, r0, r3, asr #16
   107e2:	uxth	r3, r3
   107e4:	orr.w	r3, r3, r0, lsl #16
   107e8:	cmp	r6, lr
   107ea:	str.w	r3, [r9], #4
   107ee:	mov.w	ip, r0, asr #16
   107f2:	bhi.n	107c0 <__mdiff+0x88>
   107f4:	subs	r3, r6, r4
   107f6:	subs	r3, #21
   107f8:	bic.w	r3, r3, #3
   107fc:	adds	r4, #21
   107fe:	adds	r3, #4
   10800:	cmp	r6, r4
   10802:	it	cc
   10804:	movcc	r3, #4
   10806:	add	r5, r3
   10808:	add	r3, fp
   1080a:	mov	r6, r3
   1080c:	mov	r4, r5
   1080e:	cmp	r4, r8
   10810:	bcc.n	10830 <__mdiff+0xf8>
   10812:	add.w	r1, r8, #3
   10816:	subs	r1, r1, r5
   10818:	bic.w	r1, r1, #3
   1081c:	subs	r5, #3
   1081e:	cmp	r8, r5
   10820:	it	cc
   10822:	movcc	r1, #0
   10824:	add	r3, r1
   10826:	ldr.w	r1, [r3, #-4]!
   1082a:	cbz	r1, 10852 <__mdiff+0x11a>
   1082c:	str	r7, [r2, #16]
   1082e:	b.n	1076c <__mdiff+0x34>
   10830:	ldr.w	r1, [r4], #4
   10834:	mov	lr, ip
   10836:	lsrs	r0, r1, #16
   10838:	uxtah	ip, ip, r1
   1083c:	add	r1, lr
   1083e:	add.w	r0, r0, ip, asr #16
   10842:	uxth	r1, r1
   10844:	orr.w	r1, r1, r0, lsl #16
   10848:	str.w	r1, [r6], #4
   1084c:	mov.w	ip, r0, asr #16
   10850:	b.n	1080e <__mdiff+0xd6>
   10852:	subs	r7, #1
   10854:	b.n	10826 <__mdiff+0xee>
   10856:	nop
   10858:	.word	0x20001d17
   1085c:	.word	0x20001d89

00010860 <__ulp>:
   10860:	sub	sp, #8
   10862:	vstr	d0, [sp]
   10866:	ldr	r2, [sp, #4]
   10868:	ldr	r3, [pc, #60]	@ (108a8 <__ulp+0x48>)
   1086a:	ands	r3, r2
   1086c:	sub.w	r3, r3, #54525952	@ 0x3400000
   10870:	cmp	r3, #0
   10872:	bgt.n	10886 <__ulp+0x26>
   10874:	negs	r3, r3
   10876:	cmp.w	r3, #20971520	@ 0x1400000
   1087a:	mov.w	r2, r3, asr #20
   1087e:	bge.n	1088a <__ulp+0x2a>
   10880:	mov.w	r3, #524288	@ 0x80000
   10884:	asrs	r3, r2
   10886:	movs	r2, #0
   10888:	b.n	1089c <__ulp+0x3c>
   1088a:	sub.w	r3, r2, #20
   1088e:	cmp	r3, #30
   10890:	itte	le
   10892:	movle.w	r2, #2147483648	@ 0x80000000
   10896:	lsrle	r2, r3
   10898:	movgt	r2, #1
   1089a:	movs	r3, #0
   1089c:	mov	r1, r3
   1089e:	mov	r0, r2
   108a0:	vmov	d0, r0, r1
   108a4:	add	sp, #8
   108a6:	bx	lr
   108a8:	.word	0x7ff00000

000108ac <__b2d>:
   108ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108b0:	ldr	r6, [r0, #16]
   108b2:	add.w	r8, r0, #20
   108b6:	add.w	r6, r8, r6, lsl #2
   108ba:	subs	r7, r6, #4
   108bc:	ldr.w	r2, [r6, #-4]
   108c0:	mov	r0, r2
   108c2:	bl	1036c <__hi0bits>
   108c6:	rsb	r3, r0, #32
   108ca:	cmp	r0, #10
   108cc:	str	r3, [r1, #0]
   108ce:	ldr	r1, [pc, #108]	@ (1093c <__b2d+0x90>)
   108d0:	bgt.n	108fe <__b2d+0x52>
   108d2:	rsb	ip, r0, #11
   108d6:	lsr.w	r3, r2, ip
   108da:	cmp	r8, r7
   108dc:	orr.w	r5, r3, r1
   108e0:	ite	cc
   108e2:	ldrcc.w	r3, [r6, #-8]
   108e6:	movcs	r3, #0
   108e8:	adds	r0, #21
   108ea:	lsl.w	r0, r2, r0
   108ee:	lsr.w	r3, r3, ip
   108f2:	orrs	r3, r0
   108f4:	mov	r4, r3
   108f6:	vmov	d0, r4, r5
   108fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108fe:	cmp	r8, r7
   10900:	itte	cc
   10902:	ldrcc.w	r3, [r6, #-8]
   10906:	subcc.w	r7, r6, #8
   1090a:	movcs	r3, #0
   1090c:	subs	r0, #11
   1090e:	beq.n	10936 <__b2d+0x8a>
   10910:	rsb	r1, r0, #32
   10914:	lsr.w	r4, r3, r1
   10918:	lsls	r2, r0
   1091a:	orrs	r2, r4
   1091c:	cmp	r7, r8
   1091e:	orr.w	r5, r2, #1069547520	@ 0x3fc00000
   10922:	ite	hi
   10924:	ldrhi.w	r2, [r7, #-4]
   10928:	movls	r2, #0
   1092a:	lsls	r3, r0
   1092c:	lsrs	r2, r1
   1092e:	orr.w	r5, r5, #3145728	@ 0x300000
   10932:	orrs	r3, r2
   10934:	b.n	108f4 <__b2d+0x48>
   10936:	orr.w	r5, r2, r1
   1093a:	b.n	108f4 <__b2d+0x48>
   1093c:	.word	0x3ff00000

00010940 <__d2b>:
   10940:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10944:	mov	r7, r1
   10946:	movs	r1, #1
   10948:	vmov	r8, r9, d0
   1094c:	mov	r6, r2
   1094e:	bl	10188 <_Balloc>
   10952:	mov	r4, r0
   10954:	cbnz	r0, 10964 <__d2b+0x24>
   10956:	mov	r2, r0
   10958:	ldr	r3, [pc, #140]	@ (109e8 <__d2b+0xa8>)
   1095a:	ldr	r0, [pc, #144]	@ (109ec <__d2b+0xac>)
   1095c:	movw	r1, #783	@ 0x30f
   10960:	bl	116c8 <__assert_func>
   10964:	ubfx	r5, r9, #20, #11
   10968:	ubfx	r3, r9, #0, #20
   1096c:	cbz	r5, 10972 <__d2b+0x32>
   1096e:	orr.w	r3, r3, #1048576	@ 0x100000
   10972:	str	r3, [sp, #4]
   10974:	subs.w	r3, r8, #0
   10978:	beq.n	109c2 <__d2b+0x82>
   1097a:	mov	r0, sp
   1097c:	str	r3, [sp, #0]
   1097e:	bl	103aa <__lo0bits>
   10982:	ldrd	r1, r2, [sp]
   10986:	cbz	r0, 109be <__d2b+0x7e>
   10988:	rsb	r3, r0, #32
   1098c:	lsl.w	r3, r2, r3
   10990:	orrs	r3, r1
   10992:	lsrs	r2, r0
   10994:	str	r3, [r4, #20]
   10996:	str	r2, [sp, #4]
   10998:	ldr	r3, [sp, #4]
   1099a:	str	r3, [r4, #24]
   1099c:	cmp	r3, #0
   1099e:	ite	eq
   109a0:	moveq	r2, #1
   109a2:	movne	r2, #2
   109a4:	str	r2, [r4, #16]
   109a6:	cbz	r5, 109d2 <__d2b+0x92>
   109a8:	subw	r5, r5, #1075	@ 0x433
   109ac:	add	r5, r0
   109ae:	str	r5, [r7, #0]
   109b0:	rsb	r0, r0, #53	@ 0x35
   109b4:	str	r0, [r6, #0]
   109b6:	mov	r0, r4
   109b8:	add	sp, #12
   109ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   109be:	str	r1, [r4, #20]
   109c0:	b.n	10998 <__d2b+0x58>
   109c2:	add	r0, sp, #4
   109c4:	bl	103aa <__lo0bits>
   109c8:	ldr	r3, [sp, #4]
   109ca:	str	r3, [r4, #20]
   109cc:	adds	r0, #32
   109ce:	movs	r2, #1
   109d0:	b.n	109a4 <__d2b+0x64>
   109d2:	add.w	r3, r4, r2, lsl #2
   109d6:	subw	r0, r0, #1074	@ 0x432
   109da:	str	r0, [r7, #0]
   109dc:	ldr	r0, [r3, #16]
   109de:	bl	1036c <__hi0bits>
   109e2:	rsb	r0, r0, r2, lsl #5
   109e6:	b.n	109b4 <__d2b+0x74>
   109e8:	.word	0x20001d17
   109ec:	.word	0x20001d89

000109f0 <__ratio>:
   109f0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109f4:	mov	r8, r1
   109f6:	mov	r1, sp
   109f8:	mov	r9, r0
   109fa:	bl	108ac <__b2d>
   109fe:	add	r1, sp, #4
   10a00:	mov	r0, r8
   10a02:	vmov	r4, r5, d0
   10a06:	bl	108ac <__b2d>
   10a0a:	ldr.w	r3, [r8, #16]
   10a0e:	ldr.w	r2, [r9, #16]
   10a12:	subs	r2, r2, r3
   10a14:	ldrd	r3, r1, [sp]
   10a18:	subs	r3, r3, r1
   10a1a:	add.w	r3, r3, r2, lsl #5
   10a1e:	vmov	r6, r7, d0
   10a22:	cmp	r3, #0
   10a24:	itet	le
   10a26:	rsble	r3, r3, r3, lsl #12
   10a2a:	movgt	r2, r5
   10a2c:	movle	r2, r7
   10a2e:	mov	fp, r5
   10a30:	mov	sl, r4
   10a32:	itee	gt
   10a34:	addgt.w	fp, r2, r3, lsl #20
   10a38:	addle.w	r3, r2, r3, lsl #20
   10a3c:	vmovle	s1, r3
   10a40:	vmov	d7, sl, fp
   10a44:	vdiv.f64	d0, d7, d0
   10a48:	add	sp, #12
   10a4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010a4e <__copybits>:
   10a4e:	subs	r1, #1
   10a50:	push	{r4, r5, r6, lr}
   10a52:	asrs	r1, r1, #5
   10a54:	ldr	r4, [r2, #16]
   10a56:	adds	r1, #1
   10a58:	add.w	r3, r2, #20
   10a5c:	add.w	r1, r0, r1, lsl #2
   10a60:	add.w	r4, r3, r4, lsl #2
   10a64:	subs	r5, r0, #4
   10a66:	cmp	r3, r4
   10a68:	bcc.n	10a84 <__copybits+0x36>
   10a6a:	subs	r3, r4, r2
   10a6c:	subs	r3, #17
   10a6e:	bic.w	r3, r3, #3
   10a72:	adds	r2, #17
   10a74:	cmp	r2, r4
   10a76:	it	hi
   10a78:	movhi	r3, #0
   10a7a:	add	r0, r3
   10a7c:	movs	r3, #0
   10a7e:	cmp	r0, r1
   10a80:	bcc.n	10a8e <__copybits+0x40>
   10a82:	pop	{r4, r5, r6, pc}
   10a84:	ldr.w	r6, [r3], #4
   10a88:	str.w	r6, [r5, #4]!
   10a8c:	b.n	10a66 <__copybits+0x18>
   10a8e:	str.w	r3, [r0], #4
   10a92:	b.n	10a7e <__copybits+0x30>

00010a94 <__any_on>:
   10a94:	add.w	r2, r0, #20
   10a98:	ldr	r0, [r0, #16]
   10a9a:	asrs	r3, r1, #5
   10a9c:	cmp	r0, r3
   10a9e:	push	{r4, lr}
   10aa0:	blt.n	10ac6 <__any_on+0x32>
   10aa2:	ble.n	10aba <__any_on+0x26>
   10aa4:	ands.w	r1, r1, #31
   10aa8:	beq.n	10aba <__any_on+0x26>
   10aaa:	ldr.w	r4, [r2, r3, lsl #2]
   10aae:	lsr.w	r0, r4, r1
   10ab2:	lsl.w	r1, r0, r1
   10ab6:	cmp	r4, r1
   10ab8:	bne.n	10ad2 <__any_on+0x3e>
   10aba:	add.w	r3, r2, r3, lsl #2
   10abe:	cmp	r3, r2
   10ac0:	bhi.n	10aca <__any_on+0x36>
   10ac2:	movs	r0, #0
   10ac4:	pop	{r4, pc}
   10ac6:	mov	r3, r0
   10ac8:	b.n	10aba <__any_on+0x26>
   10aca:	ldr.w	r1, [r3, #-4]!
   10ace:	cmp	r1, #0
   10ad0:	beq.n	10abe <__any_on+0x2a>
   10ad2:	movs	r0, #1
   10ad4:	b.n	10ac4 <__any_on+0x30>

00010ad6 <_malloc_usable_size_r>:
   10ad6:	ldr.w	r3, [r1, #-4]
   10ada:	subs	r0, r3, #4
   10adc:	cmp	r3, #0
   10ade:	itt	lt
   10ae0:	ldrlt	r3, [r1, r0]
   10ae2:	addlt	r0, r0, r3
   10ae4:	bx	lr

00010ae6 <__ascii_wctomb>:
   10ae6:	mov	r3, r0
   10ae8:	mov	r0, r1
   10aea:	cbz	r1, 10afe <__ascii_wctomb+0x18>
   10aec:	cmp	r2, #255	@ 0xff
   10aee:	bls.n	10afa <__ascii_wctomb+0x14>
   10af0:	movs	r2, #138	@ 0x8a
   10af2:	str	r2, [r3, #0]
   10af4:	mov.w	r0, #4294967295
   10af8:	bx	lr
   10afa:	strb	r2, [r1, #0]
   10afc:	movs	r0, #1
   10afe:	bx	lr

00010b00 <fcvtbuf>:
   10b00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10b04:	vpush	{d8}
   10b08:	vmov.f64	d8, d0
   10b0c:	mov	r8, r2
   10b0e:	ldr	r2, [pc, #136]	@ (10b98 <fcvtbuf+0x98>)
   10b10:	sub	sp, #20
   10b12:	ldr	r6, [r2, #0]
   10b14:	mov	r5, r0
   10b16:	mov	r7, r1
   10b18:	mov	r4, r3
   10b1a:	cbnz	r3, 10b3e <fcvtbuf+0x3e>
   10b1c:	ldr	r2, [r6, #40]	@ 0x28
   10b1e:	ldr	r1, [r6, #44]	@ 0x2c
   10b20:	add.w	r3, r0, #35	@ 0x23
   10b24:	cmp	r2, r3
   10b26:	bgt.n	10b3c <fcvtbuf+0x3c>
   10b28:	add.w	r9, r0, #36	@ 0x24
   10b2c:	mov	r2, r9
   10b2e:	mov	r0, r6
   10b30:	bl	ce90 <_realloc_r>
   10b34:	mov	r4, r0
   10b36:	cbz	r0, 10b7a <fcvtbuf+0x7a>
   10b38:	strd	r9, r0, [r6, #40]	@ 0x28
   10b3c:	ldr	r4, [r6, #44]	@ 0x2c
   10b3e:	vmov.f64	d0, d8
   10b42:	add	r3, sp, #12
   10b44:	strd	r8, r3, [sp]
   10b48:	mov	r2, r5
   10b4a:	mov	r3, r7
   10b4c:	movs	r1, #3
   10b4e:	mov	r0, r6
   10b50:	bl	efc0 <_dtoa_r>
   10b54:	ldr	r3, [r7, #0]
   10b56:	mov	r2, r4
   10b58:	negs	r3, r3
   10b5a:	ldr	r1, [sp, #12]
   10b5c:	cmp	r1, r0
   10b5e:	bhi.n	10b86 <fcvtbuf+0x86>
   10b60:	subs	r3, r3, r4
   10b62:	mov	r1, r2
   10b64:	movs	r6, #48	@ 0x30
   10b66:	adds	r0, r1, r3
   10b68:	cmp	r5, r0
   10b6a:	bgt.n	10b90 <fcvtbuf+0x90>
   10b6c:	add	r3, r2
   10b6e:	subs	r1, r5, r3
   10b70:	cmp	r3, r5
   10b72:	it	gt
   10b74:	movgt	r1, #0
   10b76:	movs	r3, #0
   10b78:	strb	r3, [r2, r1]
   10b7a:	mov	r0, r4
   10b7c:	add	sp, #20
   10b7e:	vpop	{d8}
   10b82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10b86:	ldrb.w	r1, [r0], #1
   10b8a:	strb.w	r1, [r2], #1
   10b8e:	b.n	10b5a <fcvtbuf+0x5a>
   10b90:	strb.w	r6, [r1], #1
   10b94:	b.n	10b66 <fcvtbuf+0x66>
   10b96:	nop
   10b98:	.word	0x200023f8

00010b9c <__ssputs_r>:
   10b9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ba0:	ldr	r6, [r1, #8]
   10ba2:	mov	r7, r3
   10ba4:	cmp	r6, r7
   10ba6:	ldr	r3, [r1, #0]
   10ba8:	mov	sl, r0
   10baa:	mov	r4, r1
   10bac:	mov	r8, r2
   10bae:	bhi.n	10c0c <__ssputs_r+0x70>
   10bb0:	ldrsh.w	r2, [r1, #12]
   10bb4:	tst.w	r2, #1152	@ 0x480
   10bb8:	beq.n	10c08 <__ssputs_r+0x6c>
   10bba:	ldr	r5, [r4, #20]
   10bbc:	ldr	r1, [r1, #16]
   10bbe:	add.w	r5, r5, r5, lsl #1
   10bc2:	sub.w	r9, r3, r1
   10bc6:	add.w	r5, r5, r5, lsr #31
   10bca:	adds	r3, r7, #1
   10bcc:	add	r3, r9
   10bce:	asrs	r5, r5, #1
   10bd0:	cmp	r5, r3
   10bd2:	it	cc
   10bd4:	movcc	r5, r3
   10bd6:	lsls	r3, r2, #21
   10bd8:	bpl.n	10c2a <__ssputs_r+0x8e>
   10bda:	mov	r1, r5
   10bdc:	bl	cd78 <_malloc_r>
   10be0:	mov	r6, r0
   10be2:	cbz	r0, 10c3e <__ssputs_r+0xa2>
   10be4:	ldr	r1, [r4, #16]
   10be6:	mov	r2, r9
   10be8:	bl	a2f0 <memcpy>
   10bec:	ldrh	r3, [r4, #12]
   10bee:	bic.w	r3, r3, #1152	@ 0x480
   10bf2:	orr.w	r3, r3, #128	@ 0x80
   10bf6:	strh	r3, [r4, #12]
   10bf8:	str	r6, [r4, #16]
   10bfa:	str	r5, [r4, #20]
   10bfc:	add	r6, r9
   10bfe:	sub.w	r5, r5, r9
   10c02:	str	r6, [r4, #0]
   10c04:	str	r5, [r4, #8]
   10c06:	mov	r6, r7
   10c08:	cmp	r6, r7
   10c0a:	bls.n	10c0e <__ssputs_r+0x72>
   10c0c:	mov	r6, r7
   10c0e:	ldr	r0, [r4, #0]
   10c10:	mov	r2, r6
   10c12:	mov	r1, r8
   10c14:	bl	ebf6 <memmove>
   10c18:	ldr	r3, [r4, #8]
   10c1a:	subs	r3, r3, r6
   10c1c:	str	r3, [r4, #8]
   10c1e:	ldr	r3, [r4, #0]
   10c20:	add	r3, r6
   10c22:	str	r3, [r4, #0]
   10c24:	movs	r0, #0
   10c26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c2a:	mov	r2, r5
   10c2c:	bl	ce90 <_realloc_r>
   10c30:	mov	r6, r0
   10c32:	cmp	r0, #0
   10c34:	bne.n	10bf8 <__ssputs_r+0x5c>
   10c36:	ldr	r1, [r4, #16]
   10c38:	mov	r0, sl
   10c3a:	bl	fa5c <_free_r>
   10c3e:	movs	r3, #12
   10c40:	str.w	r3, [sl]
   10c44:	ldrh	r3, [r4, #12]
   10c46:	orr.w	r3, r3, #64	@ 0x40
   10c4a:	strh	r3, [r4, #12]
   10c4c:	mov.w	r0, #4294967295
   10c50:	b.n	10c26 <__ssputs_r+0x8a>
	...

00010c54 <_svfiprintf_r>:
   10c54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c58:	mov	r8, r3
   10c5a:	ldrh	r3, [r1, #12]
   10c5c:	lsls	r3, r3, #24
   10c5e:	sub	sp, #116	@ 0x74
   10c60:	mov	r7, r0
   10c62:	mov	r5, r1
   10c64:	mov	r4, r2
   10c66:	bpl.n	10c8a <_svfiprintf_r+0x36>
   10c68:	ldr	r3, [r1, #16]
   10c6a:	cbnz	r3, 10c8a <_svfiprintf_r+0x36>
   10c6c:	movs	r1, #64	@ 0x40
   10c6e:	bl	cd78 <_malloc_r>
   10c72:	str	r0, [r5, #0]
   10c74:	str	r0, [r5, #16]
   10c76:	cbnz	r0, 10c86 <_svfiprintf_r+0x32>
   10c78:	movs	r3, #12
   10c7a:	str	r3, [r7, #0]
   10c7c:	mov.w	r0, #4294967295
   10c80:	add	sp, #116	@ 0x74
   10c82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c86:	movs	r3, #64	@ 0x40
   10c88:	str	r3, [r5, #20]
   10c8a:	movs	r3, #0
   10c8c:	str	r3, [sp, #36]	@ 0x24
   10c8e:	movs	r3, #32
   10c90:	strb.w	r3, [sp, #41]	@ 0x29
   10c94:	str.w	r8, [sp, #12]
   10c98:	movs	r3, #48	@ 0x30
   10c9a:	ldr.w	r8, [pc, #412]	@ 10e38 <_svfiprintf_r+0x1e4>
   10c9e:	strb.w	r3, [sp, #42]	@ 0x2a
   10ca2:	mov.w	r9, #1
   10ca6:	mov	r3, r4
   10ca8:	mov	sl, r3
   10caa:	ldrb.w	r2, [r3], #1
   10cae:	cbz	r2, 10cb4 <_svfiprintf_r+0x60>
   10cb0:	cmp	r2, #37	@ 0x25
   10cb2:	bne.n	10ca8 <_svfiprintf_r+0x54>
   10cb4:	subs.w	fp, sl, r4
   10cb8:	beq.n	10cd2 <_svfiprintf_r+0x7e>
   10cba:	mov	r3, fp
   10cbc:	mov	r2, r4
   10cbe:	mov	r1, r5
   10cc0:	mov	r0, r7
   10cc2:	bl	10b9c <__ssputs_r>
   10cc6:	adds	r0, #1
   10cc8:	beq.w	10e1a <_svfiprintf_r+0x1c6>
   10ccc:	ldr	r2, [sp, #36]	@ 0x24
   10cce:	add	r2, fp
   10cd0:	str	r2, [sp, #36]	@ 0x24
   10cd2:	ldrb.w	r3, [sl]
   10cd6:	cmp	r3, #0
   10cd8:	beq.w	10e1a <_svfiprintf_r+0x1c6>
   10cdc:	movs	r3, #0
   10cde:	mov.w	r2, #4294967295
   10ce2:	strd	r2, r3, [sp, #20]
   10ce6:	add.w	sl, sl, #1
   10cea:	str	r3, [sp, #16]
   10cec:	str	r3, [sp, #28]
   10cee:	strb.w	r3, [sp, #83]	@ 0x53
   10cf2:	str	r3, [sp, #104]	@ 0x68
   10cf4:	mov	r4, sl
   10cf6:	movs	r2, #5
   10cf8:	ldrb.w	r1, [r4], #1
   10cfc:	ldr	r0, [pc, #312]	@ (10e38 <_svfiprintf_r+0x1e4>)
   10cfe:	bl	ede0 <memchr>
   10d02:	ldr	r2, [sp, #16]
   10d04:	cbnz	r0, 10d3e <_svfiprintf_r+0xea>
   10d06:	lsls	r0, r2, #27
   10d08:	itt	mi
   10d0a:	movmi	r3, #32
   10d0c:	strbmi.w	r3, [sp, #83]	@ 0x53
   10d10:	lsls	r1, r2, #28
   10d12:	itt	mi
   10d14:	movmi	r3, #43	@ 0x2b
   10d16:	strbmi.w	r3, [sp, #83]	@ 0x53
   10d1a:	ldrb.w	r3, [sl]
   10d1e:	cmp	r3, #42	@ 0x2a
   10d20:	beq.n	10d4e <_svfiprintf_r+0xfa>
   10d22:	ldr	r2, [sp, #28]
   10d24:	mov	r4, sl
   10d26:	movs	r0, #0
   10d28:	mov.w	ip, #10
   10d2c:	mov	r1, r4
   10d2e:	ldrb.w	r3, [r1], #1
   10d32:	subs	r3, #48	@ 0x30
   10d34:	cmp	r3, #9
   10d36:	bls.n	10dd0 <_svfiprintf_r+0x17c>
   10d38:	cbz	r0, 10d68 <_svfiprintf_r+0x114>
   10d3a:	str	r2, [sp, #28]
   10d3c:	b.n	10d68 <_svfiprintf_r+0x114>
   10d3e:	sub.w	r3, r0, r8
   10d42:	lsl.w	r3, r9, r3
   10d46:	orrs	r3, r2
   10d48:	str	r3, [sp, #16]
   10d4a:	mov	sl, r4
   10d4c:	b.n	10cf4 <_svfiprintf_r+0xa0>
   10d4e:	ldr	r3, [sp, #12]
   10d50:	adds	r1, r3, #4
   10d52:	ldr	r3, [r3, #0]
   10d54:	str	r1, [sp, #12]
   10d56:	cmp	r3, #0
   10d58:	ittet	lt
   10d5a:	neglt	r3, r3
   10d5c:	orrlt.w	r2, r2, #2
   10d60:	strge	r3, [sp, #28]
   10d62:	strlt	r3, [sp, #28]
   10d64:	it	lt
   10d66:	strlt	r2, [sp, #16]
   10d68:	ldrb	r3, [r4, #0]
   10d6a:	cmp	r3, #46	@ 0x2e
   10d6c:	bne.n	10d84 <_svfiprintf_r+0x130>
   10d6e:	ldrb	r3, [r4, #1]
   10d70:	cmp	r3, #42	@ 0x2a
   10d72:	bne.n	10dda <_svfiprintf_r+0x186>
   10d74:	ldr	r3, [sp, #12]
   10d76:	adds	r2, r3, #4
   10d78:	ldr	r3, [r3, #0]
   10d7a:	str	r2, [sp, #12]
   10d7c:	orr.w	r3, r3, r3, asr #31
   10d80:	adds	r4, #2
   10d82:	str	r3, [sp, #20]
   10d84:	ldr.w	sl, [pc, #192]	@ 10e48 <_svfiprintf_r+0x1f4>
   10d88:	ldrb	r1, [r4, #0]
   10d8a:	movs	r2, #3
   10d8c:	mov	r0, sl
   10d8e:	bl	ede0 <memchr>
   10d92:	cbz	r0, 10da4 <_svfiprintf_r+0x150>
   10d94:	ldr	r3, [sp, #16]
   10d96:	sub.w	r0, r0, sl
   10d9a:	movs	r2, #64	@ 0x40
   10d9c:	lsls	r2, r0
   10d9e:	orrs	r3, r2
   10da0:	adds	r4, #1
   10da2:	str	r3, [sp, #16]
   10da4:	ldrb.w	r1, [r4], #1
   10da8:	ldr	r0, [pc, #144]	@ (10e3c <_svfiprintf_r+0x1e8>)
   10daa:	strb.w	r1, [sp, #40]	@ 0x28
   10dae:	movs	r2, #6
   10db0:	bl	ede0 <memchr>
   10db4:	cmp	r0, #0
   10db6:	beq.n	10e26 <_svfiprintf_r+0x1d2>
   10db8:	ldr	r3, [pc, #132]	@ (10e40 <_svfiprintf_r+0x1ec>)
   10dba:	cbnz	r3, 10e04 <_svfiprintf_r+0x1b0>
   10dbc:	ldr	r3, [sp, #12]
   10dbe:	adds	r3, #7
   10dc0:	bic.w	r3, r3, #7
   10dc4:	adds	r3, #8
   10dc6:	str	r3, [sp, #12]
   10dc8:	ldr	r3, [sp, #36]	@ 0x24
   10dca:	add	r3, r6
   10dcc:	str	r3, [sp, #36]	@ 0x24
   10dce:	b.n	10ca6 <_svfiprintf_r+0x52>
   10dd0:	mla	r2, ip, r2, r3
   10dd4:	mov	r4, r1
   10dd6:	movs	r0, #1
   10dd8:	b.n	10d2c <_svfiprintf_r+0xd8>
   10dda:	movs	r3, #0
   10ddc:	adds	r4, #1
   10dde:	str	r3, [sp, #20]
   10de0:	mov	r1, r3
   10de2:	mov.w	ip, #10
   10de6:	mov	r0, r4
   10de8:	ldrb.w	r2, [r0], #1
   10dec:	subs	r2, #48	@ 0x30
   10dee:	cmp	r2, #9
   10df0:	bls.n	10dfa <_svfiprintf_r+0x1a6>
   10df2:	cmp	r3, #0
   10df4:	beq.n	10d84 <_svfiprintf_r+0x130>
   10df6:	str	r1, [sp, #20]
   10df8:	b.n	10d84 <_svfiprintf_r+0x130>
   10dfa:	mla	r1, ip, r1, r2
   10dfe:	mov	r4, r0
   10e00:	movs	r3, #1
   10e02:	b.n	10de6 <_svfiprintf_r+0x192>
   10e04:	add	r3, sp, #12
   10e06:	str	r3, [sp, #0]
   10e08:	mov	r2, r5
   10e0a:	ldr	r3, [pc, #56]	@ (10e44 <_svfiprintf_r+0x1f0>)
   10e0c:	add	r1, sp, #16
   10e0e:	mov	r0, r7
   10e10:	bl	dca0 <_printf_float>
   10e14:	adds	r2, r0, #1
   10e16:	mov	r6, r0
   10e18:	bne.n	10dc8 <_svfiprintf_r+0x174>
   10e1a:	ldrh	r3, [r5, #12]
   10e1c:	lsls	r3, r3, #25
   10e1e:	bmi.w	10c7c <_svfiprintf_r+0x28>
   10e22:	ldr	r0, [sp, #36]	@ 0x24
   10e24:	b.n	10c80 <_svfiprintf_r+0x2c>
   10e26:	add	r3, sp, #12
   10e28:	str	r3, [sp, #0]
   10e2a:	mov	r2, r5
   10e2c:	ldr	r3, [pc, #20]	@ (10e44 <_svfiprintf_r+0x1f0>)
   10e2e:	add	r1, sp, #16
   10e30:	mov	r0, r7
   10e32:	bl	e1b0 <_printf_i>
   10e36:	b.n	10e14 <_svfiprintf_r+0x1c0>
   10e38:	.word	0x20001de3
   10e3c:	.word	0x20001ded
   10e40:	.word	0x0000dca1
   10e44:	.word	0x00010b9d
   10e48:	.word	0x20001de9

00010e4c <_sungetc_r>:
   10e4c:	push	{r3, r4, r5, lr}
   10e4e:	adds	r3, r1, #1
   10e50:	mov	r4, r2
   10e52:	bne.n	10e5c <_sungetc_r+0x10>
   10e54:	mov.w	r5, #4294967295
   10e58:	mov	r0, r5
   10e5a:	pop	{r3, r4, r5, pc}
   10e5c:	ldrh	r3, [r2, #12]
   10e5e:	bic.w	r3, r3, #32
   10e62:	strh	r3, [r2, #12]
   10e64:	ldr	r3, [r4, #52]	@ 0x34
   10e66:	ldr	r2, [r2, #4]
   10e68:	uxtb	r5, r1
   10e6a:	cbz	r3, 10e90 <_sungetc_r+0x44>
   10e6c:	ldr	r3, [r4, #56]	@ 0x38
   10e6e:	cmp	r3, r2
   10e70:	ble.n	10e84 <_sungetc_r+0x38>
   10e72:	ldr	r3, [r4, #0]
   10e74:	subs	r2, r3, #1
   10e76:	str	r2, [r4, #0]
   10e78:	strb.w	r5, [r3, #-1]
   10e7c:	ldr	r3, [r4, #4]
   10e7e:	adds	r3, #1
   10e80:	str	r3, [r4, #4]
   10e82:	b.n	10e58 <_sungetc_r+0xc>
   10e84:	mov	r1, r4
   10e86:	bl	11652 <__submore>
   10e8a:	cmp	r0, #0
   10e8c:	beq.n	10e72 <_sungetc_r+0x26>
   10e8e:	b.n	10e54 <_sungetc_r+0x8>
   10e90:	ldr	r1, [r4, #16]
   10e92:	ldr	r3, [r4, #0]
   10e94:	cbz	r1, 10eac <_sungetc_r+0x60>
   10e96:	cmp	r1, r3
   10e98:	bcs.n	10eac <_sungetc_r+0x60>
   10e9a:	ldrb.w	r1, [r3, #-1]
   10e9e:	cmp	r1, r5
   10ea0:	bne.n	10eac <_sungetc_r+0x60>
   10ea2:	subs	r3, #1
   10ea4:	adds	r2, #1
   10ea6:	str	r3, [r4, #0]
   10ea8:	str	r2, [r4, #4]
   10eaa:	b.n	10e58 <_sungetc_r+0xc>
   10eac:	strd	r3, r2, [r4, #60]	@ 0x3c
   10eb0:	add.w	r3, r4, #68	@ 0x44
   10eb4:	str	r3, [r4, #52]	@ 0x34
   10eb6:	movs	r3, #3
   10eb8:	str	r3, [r4, #56]	@ 0x38
   10eba:	mov	r3, r4
   10ebc:	strb.w	r5, [r3, #70]!
   10ec0:	str	r3, [r4, #0]
   10ec2:	movs	r3, #1
   10ec4:	b.n	10e80 <_sungetc_r+0x34>

00010ec6 <__ssrefill_r>:
   10ec6:	push	{r4, lr}
   10ec8:	mov	r4, r1
   10eca:	ldr	r1, [r1, #52]	@ 0x34
   10ecc:	cbz	r1, 10eea <__ssrefill_r+0x24>
   10ece:	add.w	r3, r4, #68	@ 0x44
   10ed2:	cmp	r1, r3
   10ed4:	beq.n	10eda <__ssrefill_r+0x14>
   10ed6:	bl	fa5c <_free_r>
   10eda:	ldr	r3, [r4, #64]	@ 0x40
   10edc:	str	r3, [r4, #4]
   10ede:	movs	r0, #0
   10ee0:	str	r0, [r4, #52]	@ 0x34
   10ee2:	cbz	r3, 10eea <__ssrefill_r+0x24>
   10ee4:	ldr	r3, [r4, #60]	@ 0x3c
   10ee6:	str	r3, [r4, #0]
   10ee8:	pop	{r4, pc}
   10eea:	ldr	r3, [r4, #16]
   10eec:	str	r3, [r4, #0]
   10eee:	movs	r3, #0
   10ef0:	str	r3, [r4, #4]
   10ef2:	ldrh	r3, [r4, #12]
   10ef4:	orr.w	r3, r3, #32
   10ef8:	strh	r3, [r4, #12]
   10efa:	mov.w	r0, #4294967295
   10efe:	b.n	10ee8 <__ssrefill_r+0x22>

00010f00 <__ssvfiscanf_r>:
   10f00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f04:	mov	r4, r1
   10f06:	sub.w	sp, sp, #652	@ 0x28c
   10f0a:	movs	r1, #0
   10f0c:	strd	r1, r1, [sp, #272]	@ 0x110
   10f10:	ldr	r1, [pc, #664]	@ (111ac <__ssvfiscanf_r+0x2ac>)
   10f12:	str	r1, [sp, #640]	@ 0x280
   10f14:	add.w	r8, sp, #4
   10f18:	ldr	r1, [pc, #660]	@ (111b0 <__ssvfiscanf_r+0x2b0>)
   10f1a:	ldr	r7, [pc, #664]	@ (111b4 <__ssvfiscanf_r+0x2b4>)
   10f1c:	str.w	r8, [sp, #280]	@ 0x118
   10f20:	mov	r6, r0
   10f22:	str	r1, [sp, #644]	@ 0x284
   10f24:	str	r3, [sp, #0]
   10f26:	ldrb.w	r9, [r2]
   10f2a:	cmp.w	r9, #0
   10f2e:	beq.w	111e2 <__ssvfiscanf_r+0x2e2>
   10f32:	ldrb.w	r3, [r7, r9]
   10f36:	ands.w	r3, r3, #8
   10f3a:	add.w	r5, r2, #1
   10f3e:	beq.n	10f74 <__ssvfiscanf_r+0x74>
   10f40:	ldr	r3, [r4, #4]
   10f42:	cmp	r3, #0
   10f44:	ble.n	10f66 <__ssvfiscanf_r+0x66>
   10f46:	ldr	r3, [r4, #0]
   10f48:	ldrb	r2, [r3, #0]
   10f4a:	ldrb	r2, [r7, r2]
   10f4c:	lsls	r2, r2, #28
   10f4e:	bmi.n	10f54 <__ssvfiscanf_r+0x54>
   10f50:	mov	r2, r5
   10f52:	b.n	10f26 <__ssvfiscanf_r+0x26>
   10f54:	ldr	r2, [sp, #276]	@ 0x114
   10f56:	adds	r2, #1
   10f58:	str	r2, [sp, #276]	@ 0x114
   10f5a:	ldr	r2, [r4, #4]
   10f5c:	adds	r3, #1
   10f5e:	subs	r2, #1
   10f60:	str	r2, [r4, #4]
   10f62:	str	r3, [r4, #0]
   10f64:	b.n	10f40 <__ssvfiscanf_r+0x40>
   10f66:	ldr	r3, [sp, #644]	@ 0x284
   10f68:	mov	r1, r4
   10f6a:	mov	r0, r6
   10f6c:	blx	r3
   10f6e:	cmp	r0, #0
   10f70:	beq.n	10f46 <__ssvfiscanf_r+0x46>
   10f72:	b.n	10f50 <__ssvfiscanf_r+0x50>
   10f74:	cmp.w	r9, #37	@ 0x25
   10f78:	bne.w	11086 <__ssvfiscanf_r+0x186>
   10f7c:	str	r3, [sp, #260]	@ 0x104
   10f7e:	str	r3, [sp, #268]	@ 0x10c
   10f80:	ldrb	r3, [r2, #1]
   10f82:	cmp	r3, #42	@ 0x2a
   10f84:	ittt	eq
   10f86:	moveq	r3, #16
   10f88:	addeq	r5, r2, #2
   10f8a:	streq	r3, [sp, #260]	@ 0x104
   10f8c:	movs	r2, #10
   10f8e:	mov	sl, r5
   10f90:	ldrb.w	r1, [sl], #1
   10f94:	sub.w	r3, r1, #48	@ 0x30
   10f98:	cmp	r3, #9
   10f9a:	bls.n	10fda <__ssvfiscanf_r+0xda>
   10f9c:	ldr.w	fp, [pc, #536]	@ 111b8 <__ssvfiscanf_r+0x2b8>
   10fa0:	movs	r2, #3
   10fa2:	mov	r0, fp
   10fa4:	bl	ede0 <memchr>
   10fa8:	cbz	r0, 10fba <__ssvfiscanf_r+0xba>
   10faa:	ldr	r2, [sp, #260]	@ 0x104
   10fac:	sub.w	r0, r0, fp
   10fb0:	movs	r3, #1
   10fb2:	lsls	r3, r0
   10fb4:	orrs	r3, r2
   10fb6:	str	r3, [sp, #260]	@ 0x104
   10fb8:	mov	r5, sl
   10fba:	ldrb.w	r3, [r5], #1
   10fbe:	cmp	r3, #120	@ 0x78
   10fc0:	bhi.n	10fd0 <__ssvfiscanf_r+0xd0>
   10fc2:	cmp	r3, #87	@ 0x57
   10fc4:	bhi.n	10fe8 <__ssvfiscanf_r+0xe8>
   10fc6:	cmp	r3, #37	@ 0x25
   10fc8:	beq.n	11086 <__ssvfiscanf_r+0x186>
   10fca:	bhi.n	1107c <__ssvfiscanf_r+0x17c>
   10fcc:	cmp	r3, #0
   10fce:	beq.n	110bc <__ssvfiscanf_r+0x1bc>
   10fd0:	movs	r3, #3
   10fd2:	str	r3, [sp, #284]	@ 0x11c
   10fd4:	movs	r3, #10
   10fd6:	str	r3, [sp, #264]	@ 0x108
   10fd8:	b.n	110ec <__ssvfiscanf_r+0x1ec>
   10fda:	ldr	r3, [sp, #268]	@ 0x10c
   10fdc:	mla	r1, r2, r3, r1
   10fe0:	subs	r1, #48	@ 0x30
   10fe2:	str	r1, [sp, #268]	@ 0x10c
   10fe4:	mov	r5, sl
   10fe6:	b.n	10f8e <__ssvfiscanf_r+0x8e>
   10fe8:	sub.w	r2, r3, #88	@ 0x58
   10fec:	cmp	r2, #32
   10fee:	bhi.n	10fd0 <__ssvfiscanf_r+0xd0>
   10ff0:	add	r1, pc, #4	@ (adr r1, 10ff8 <__ssvfiscanf_r+0xf8>)
   10ff2:	ldr.w	pc, [r1, r2, lsl #2]
   10ff6:	nop
   10ff8:	.word	0x000110cb
   10ffc:	.word	0x00010fd1
   11000:	.word	0x00010fd1
   11004:	.word	0x00011125
   11008:	.word	0x00010fd1
   1100c:	.word	0x00010fd1
   11010:	.word	0x00010fd1
   11014:	.word	0x00010fd1
   11018:	.word	0x00010fd1
   1101c:	.word	0x00010fd1
   11020:	.word	0x00010fd1
   11024:	.word	0x0001113b
   11028:	.word	0x00011121
   1102c:	.word	0x00011083
   11030:	.word	0x00011083
   11034:	.word	0x00011083
   11038:	.word	0x00010fd1
   1103c:	.word	0x000110dd
   11040:	.word	0x00010fd1
   11044:	.word	0x00010fd1
   11048:	.word	0x00010fd1
   1104c:	.word	0x00010fd1
   11050:	.word	0x0001114b
   11054:	.word	0x000110e5
   11058:	.word	0x000110c3
   1105c:	.word	0x00010fd1
   11060:	.word	0x00010fd1
   11064:	.word	0x00011147
   11068:	.word	0x00010fd1
   1106c:	.word	0x00011121
   11070:	.word	0x00010fd1
   11074:	.word	0x00010fd1
   11078:	.word	0x000110cb
   1107c:	subs	r3, #69	@ 0x45
   1107e:	cmp	r3, #2
   11080:	bhi.n	10fd0 <__ssvfiscanf_r+0xd0>
   11082:	movs	r3, #5
   11084:	b.n	110ea <__ssvfiscanf_r+0x1ea>
   11086:	ldr	r3, [r4, #4]
   11088:	cmp	r3, #0
   1108a:	ble.n	110a8 <__ssvfiscanf_r+0x1a8>
   1108c:	ldr	r3, [r4, #0]
   1108e:	ldrb	r2, [r3, #0]
   11090:	cmp	r2, r9
   11092:	bne.w	111e2 <__ssvfiscanf_r+0x2e2>
   11096:	adds	r3, #1
   11098:	ldr	r2, [r4, #4]
   1109a:	str	r3, [r4, #0]
   1109c:	ldr	r3, [sp, #276]	@ 0x114
   1109e:	subs	r2, #1
   110a0:	adds	r3, #1
   110a2:	str	r2, [r4, #4]
   110a4:	str	r3, [sp, #276]	@ 0x114
   110a6:	b.n	10f50 <__ssvfiscanf_r+0x50>
   110a8:	ldr	r3, [sp, #644]	@ 0x284
   110aa:	mov	r1, r4
   110ac:	mov	r0, r6
   110ae:	blx	r3
   110b0:	cmp	r0, #0
   110b2:	beq.n	1108c <__ssvfiscanf_r+0x18c>
   110b4:	ldr	r0, [sp, #272]	@ 0x110
   110b6:	cmp	r0, #0
   110b8:	bne.w	111d2 <__ssvfiscanf_r+0x2d2>
   110bc:	mov.w	r0, #4294967295
   110c0:	b.n	111da <__ssvfiscanf_r+0x2da>
   110c2:	ldr	r2, [sp, #260]	@ 0x104
   110c4:	orr.w	r2, r2, #32
   110c8:	str	r2, [sp, #260]	@ 0x104
   110ca:	ldr	r2, [sp, #260]	@ 0x104
   110cc:	orr.w	r2, r2, #512	@ 0x200
   110d0:	str	r2, [sp, #260]	@ 0x104
   110d2:	movs	r2, #16
   110d4:	cmp	r3, #110	@ 0x6e
   110d6:	str	r2, [sp, #264]	@ 0x108
   110d8:	bls.n	110e0 <__ssvfiscanf_r+0x1e0>
   110da:	b.n	110e8 <__ssvfiscanf_r+0x1e8>
   110dc:	movs	r3, #0
   110de:	str	r3, [sp, #264]	@ 0x108
   110e0:	movs	r3, #3
   110e2:	b.n	110ea <__ssvfiscanf_r+0x1ea>
   110e4:	movs	r3, #8
   110e6:	str	r3, [sp, #264]	@ 0x108
   110e8:	movs	r3, #4
   110ea:	str	r3, [sp, #284]	@ 0x11c
   110ec:	ldr	r3, [r4, #4]
   110ee:	cmp	r3, #0
   110f0:	ble.n	11166 <__ssvfiscanf_r+0x266>
   110f2:	ldr	r3, [sp, #260]	@ 0x104
   110f4:	lsls	r1, r3, #25
   110f6:	bmi.n	11102 <__ssvfiscanf_r+0x202>
   110f8:	ldr	r3, [r4, #0]
   110fa:	ldrb	r2, [r3, #0]
   110fc:	ldrb	r2, [r7, r2]
   110fe:	lsls	r2, r2, #28
   11100:	bmi.n	11174 <__ssvfiscanf_r+0x274>
   11102:	ldr	r3, [sp, #284]	@ 0x11c
   11104:	cmp	r3, #2
   11106:	bgt.n	11198 <__ssvfiscanf_r+0x298>
   11108:	mov	r3, sp
   1110a:	mov	r2, r4
   1110c:	add	r1, sp, #260	@ 0x104
   1110e:	mov	r0, r6
   11110:	bl	111ec <_scanf_chars>
   11114:	cmp	r0, #1
   11116:	beq.n	111e2 <__ssvfiscanf_r+0x2e2>
   11118:	cmp	r0, #2
   1111a:	bne.w	10f50 <__ssvfiscanf_r+0x50>
   1111e:	b.n	110b4 <__ssvfiscanf_r+0x1b4>
   11120:	movs	r2, #10
   11122:	b.n	110d4 <__ssvfiscanf_r+0x1d4>
   11124:	mov	r1, r5
   11126:	mov	r0, r8
   11128:	bl	115e0 <__sccl>
   1112c:	ldr	r3, [sp, #260]	@ 0x104
   1112e:	orr.w	r3, r3, #64	@ 0x40
   11132:	str	r3, [sp, #260]	@ 0x104
   11134:	mov	r5, r0
   11136:	movs	r3, #1
   11138:	b.n	110ea <__ssvfiscanf_r+0x1ea>
   1113a:	ldr	r3, [sp, #260]	@ 0x104
   1113c:	orr.w	r3, r3, #64	@ 0x40
   11140:	str	r3, [sp, #260]	@ 0x104
   11142:	movs	r3, #0
   11144:	b.n	110ea <__ssvfiscanf_r+0x1ea>
   11146:	movs	r3, #2
   11148:	b.n	110ea <__ssvfiscanf_r+0x1ea>
   1114a:	ldr	r0, [sp, #260]	@ 0x104
   1114c:	lsls	r3, r0, #27
   1114e:	bmi.w	10f50 <__ssvfiscanf_r+0x50>
   11152:	ldr	r3, [sp, #0]
   11154:	ldr	r2, [sp, #276]	@ 0x114
   11156:	adds	r1, r3, #4
   11158:	str	r1, [sp, #0]
   1115a:	ldr	r3, [r3, #0]
   1115c:	lsls	r0, r0, #31
   1115e:	ite	mi
   11160:	strhmi	r2, [r3, #0]
   11162:	strpl	r2, [r3, #0]
   11164:	b.n	10f50 <__ssvfiscanf_r+0x50>
   11166:	ldr	r3, [sp, #644]	@ 0x284
   11168:	mov	r1, r4
   1116a:	mov	r0, r6
   1116c:	blx	r3
   1116e:	cmp	r0, #0
   11170:	beq.n	110f2 <__ssvfiscanf_r+0x1f2>
   11172:	b.n	110b4 <__ssvfiscanf_r+0x1b4>
   11174:	ldr	r2, [sp, #276]	@ 0x114
   11176:	adds	r2, #1
   11178:	str	r2, [sp, #276]	@ 0x114
   1117a:	ldr	r2, [r4, #4]
   1117c:	subs	r2, #1
   1117e:	cmp	r2, #0
   11180:	str	r2, [r4, #4]
   11182:	ble.n	1118a <__ssvfiscanf_r+0x28a>
   11184:	adds	r3, #1
   11186:	str	r3, [r4, #0]
   11188:	b.n	110f8 <__ssvfiscanf_r+0x1f8>
   1118a:	ldr	r3, [sp, #644]	@ 0x284
   1118c:	mov	r1, r4
   1118e:	mov	r0, r6
   11190:	blx	r3
   11192:	cmp	r0, #0
   11194:	beq.n	110f8 <__ssvfiscanf_r+0x1f8>
   11196:	b.n	110b4 <__ssvfiscanf_r+0x1b4>
   11198:	cmp	r3, #4
   1119a:	bgt.n	111bc <__ssvfiscanf_r+0x2bc>
   1119c:	mov	r3, sp
   1119e:	mov	r2, r4
   111a0:	add	r1, sp, #260	@ 0x104
   111a2:	mov	r0, r6
   111a4:	bl	112a0 <_scanf_i>
   111a8:	b.n	11114 <__ssvfiscanf_r+0x214>
   111aa:	nop
   111ac:	.word	0x00010e4d
   111b0:	.word	0x00010ec7
   111b4:	.word	0x20000dfd
   111b8:	.word	0x20001de9
   111bc:	ldr	r3, [pc, #40]	@ (111e8 <__ssvfiscanf_r+0x2e8>)
   111be:	cmp	r3, #0
   111c0:	beq.w	10f50 <__ssvfiscanf_r+0x50>
   111c4:	mov	r3, sp
   111c6:	mov	r2, r4
   111c8:	add	r1, sp, #260	@ 0x104
   111ca:	mov	r0, r6
   111cc:	bl	e3ec <_scanf_float>
   111d0:	b.n	11114 <__ssvfiscanf_r+0x214>
   111d2:	ldrh	r3, [r4, #12]
   111d4:	lsls	r3, r3, #25
   111d6:	bmi.w	110bc <__ssvfiscanf_r+0x1bc>
   111da:	add.w	sp, sp, #652	@ 0x28c
   111de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111e2:	ldr	r0, [sp, #272]	@ 0x110
   111e4:	b.n	111da <__ssvfiscanf_r+0x2da>
   111e6:	nop
   111e8:	.word	0x0000e3ed

000111ec <_scanf_chars>:
   111ec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   111f0:	mov	r5, r2
   111f2:	ldr	r2, [r1, #8]
   111f4:	mov	r8, r0
   111f6:	mov	r4, r1
   111f8:	cbnz	r2, 11208 <_scanf_chars+0x1c>
   111fa:	ldr	r2, [r1, #24]
   111fc:	cmp	r2, #0
   111fe:	ite	ne
   11200:	movne.w	r2, #4294967295
   11204:	moveq	r2, #1
   11206:	str	r2, [r1, #8]
   11208:	ldr	r2, [r4, #0]
   1120a:	ldr.w	r9, [pc, #144]	@ 1129c <_scanf_chars+0xb0>
   1120e:	lsls	r1, r2, #27
   11210:	itttt	pl
   11212:	ldrpl	r2, [r3, #0]
   11214:	addpl	r1, r2, #4
   11216:	strpl	r1, [r3, #0]
   11218:	ldrpl	r6, [r2, #0]
   1121a:	movs	r7, #0
   1121c:	ldr	r0, [r4, #24]
   1121e:	cbz	r0, 11244 <_scanf_chars+0x58>
   11220:	cmp	r0, #1
   11222:	bne.n	11234 <_scanf_chars+0x48>
   11224:	ldr	r3, [r5, #0]
   11226:	ldrb	r2, [r3, #0]
   11228:	ldr	r3, [r4, #20]
   1122a:	ldrb	r3, [r3, r2]
   1122c:	cbnz	r3, 11244 <_scanf_chars+0x58>
   1122e:	cmp	r7, #0
   11230:	beq.n	11296 <_scanf_chars+0xaa>
   11232:	b.n	1127a <_scanf_chars+0x8e>
   11234:	cmp	r0, #2
   11236:	bne.n	1127a <_scanf_chars+0x8e>
   11238:	ldr	r3, [r5, #0]
   1123a:	ldrb	r3, [r3, #0]
   1123c:	ldrb.w	r3, [r9, r3]
   11240:	lsls	r3, r3, #28
   11242:	bmi.n	1127a <_scanf_chars+0x8e>
   11244:	ldr	r3, [r4, #0]
   11246:	lsls	r2, r3, #27
   11248:	ittt	pl
   1124a:	ldrpl	r3, [r5, #0]
   1124c:	ldrbpl	r3, [r3, #0]
   1124e:	strbpl.w	r3, [r6], #1
   11252:	ldr	r2, [r5, #0]
   11254:	ldr	r3, [r5, #4]
   11256:	adds	r2, #1
   11258:	str	r2, [r5, #0]
   1125a:	ldr	r2, [r4, #8]
   1125c:	subs	r3, #1
   1125e:	subs	r2, #1
   11260:	str	r3, [r5, #4]
   11262:	adds	r7, #1
   11264:	str	r2, [r4, #8]
   11266:	cbz	r2, 1127a <_scanf_chars+0x8e>
   11268:	cmp	r3, #0
   1126a:	bgt.n	1121c <_scanf_chars+0x30>
   1126c:	ldr.w	r3, [r4, #384]	@ 0x180
   11270:	mov	r1, r5
   11272:	mov	r0, r8
   11274:	blx	r3
   11276:	cmp	r0, #0
   11278:	beq.n	1121c <_scanf_chars+0x30>
   1127a:	ldr	r3, [r4, #0]
   1127c:	ands.w	r3, r3, #16
   11280:	bne.n	1128e <_scanf_chars+0xa2>
   11282:	ldr	r2, [r4, #12]
   11284:	adds	r2, #1
   11286:	str	r2, [r4, #12]
   11288:	ldr	r2, [r4, #24]
   1128a:	cbz	r2, 1128e <_scanf_chars+0xa2>
   1128c:	strb	r3, [r6, #0]
   1128e:	ldr	r3, [r4, #16]
   11290:	add	r3, r7
   11292:	str	r3, [r4, #16]
   11294:	movs	r0, #0
   11296:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1129a:	nop
   1129c:	.word	0x20000dfd

000112a0 <_scanf_i>:
   112a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112a4:	mov	r8, r3
   112a6:	ldr	r3, [pc, #464]	@ (11478 <_scanf_i+0x1d8>)
   112a8:	mov	r4, r1
   112aa:	mov	sl, r0
   112ac:	mov	r6, r2
   112ae:	ldmia.w	r3, {r0, r1, r2}
   112b2:	sub	sp, #28
   112b4:	add	r3, sp, #12
   112b6:	stmia.w	r3, {r0, r1, r2}
   112ba:	ldr	r3, [pc, #448]	@ (1147c <_scanf_i+0x1dc>)
   112bc:	ldr	r1, [r4, #24]
   112be:	ldr	r2, [pc, #448]	@ (11480 <_scanf_i+0x1e0>)
   112c0:	cmp	r1, #3
   112c2:	it	eq
   112c4:	moveq	r2, r3
   112c6:	ldr	r3, [r4, #8]
   112c8:	str	r2, [sp, #4]
   112ca:	subs	r2, r3, #1
   112cc:	cmp.w	r2, #348	@ 0x15c
   112d0:	it	hi
   112d2:	mvnhi.w	r5, #348	@ 0x15c
   112d6:	mov	r7, r4
   112d8:	ittt	hi
   112da:	addhi.w	r9, r3, r5
   112de:	movwhi	r3, #349	@ 0x15d
   112e2:	strhi	r3, [r4, #8]
   112e4:	ldr.w	r3, [r7], #28
   112e8:	orr.w	r3, r3, #3328	@ 0xd00
   112ec:	it	ls
   112ee:	movls.w	r9, #0
   112f2:	str	r3, [r4, #0]
   112f4:	mov	r5, r7
   112f6:	mov.w	fp, #0
   112fa:	ldr	r1, [r6, #0]
   112fc:	add	r3, sp, #12
   112fe:	ldrb	r1, [r1, #0]
   11300:	ldr.w	r0, [r3, fp, lsl #2]
   11304:	movs	r2, #2
   11306:	bl	ede0 <memchr>
   1130a:	cbz	r0, 11358 <_scanf_i+0xb8>
   1130c:	cmp.w	fp, #1
   11310:	bne.n	113c6 <_scanf_i+0x126>
   11312:	ldr	r2, [r4, #4]
   11314:	cbnz	r2, 11322 <_scanf_i+0x82>
   11316:	ldr	r2, [r4, #0]
   11318:	movs	r1, #8
   1131a:	orr.w	r2, r2, #512	@ 0x200
   1131e:	str	r1, [r4, #4]
   11320:	str	r2, [r4, #0]
   11322:	ldr	r2, [r4, #0]
   11324:	bic.w	r2, r2, #1280	@ 0x500
   11328:	str	r2, [r4, #0]
   1132a:	ldr	r2, [r4, #8]
   1132c:	subs	r1, r2, #1
   1132e:	str	r1, [r4, #8]
   11330:	cbz	r2, 11358 <_scanf_i+0xb8>
   11332:	ldr	r2, [r6, #0]
   11334:	adds	r1, r2, #1
   11336:	str	r1, [r6, #0]
   11338:	ldrb	r2, [r2, #0]
   1133a:	strb.w	r2, [r5], #1
   1133e:	ldr	r2, [r6, #4]
   11340:	subs	r2, #1
   11342:	cmp	r2, #0
   11344:	str	r2, [r6, #4]
   11346:	bgt.n	11358 <_scanf_i+0xb8>
   11348:	ldr.w	r2, [r4, #384]	@ 0x180
   1134c:	mov	r1, r6
   1134e:	mov	r0, sl
   11350:	blx	r2
   11352:	cmp	r0, #0
   11354:	bne.w	11462 <_scanf_i+0x1c2>
   11358:	add.w	fp, fp, #1
   1135c:	cmp.w	fp, #3
   11360:	bne.n	112fa <_scanf_i+0x5a>
   11362:	ldr	r3, [r4, #4]
   11364:	cbnz	r3, 1136a <_scanf_i+0xca>
   11366:	movs	r3, #10
   11368:	str	r3, [r4, #4]
   1136a:	ldr	r3, [r4, #4]
   1136c:	ldr	r1, [pc, #276]	@ (11484 <_scanf_i+0x1e4>)
   1136e:	ldr	r0, [r4, #20]
   11370:	subs	r1, r1, r3
   11372:	bl	115e0 <__sccl>
   11376:	mov.w	fp, #0
   1137a:	ldr	r3, [r4, #8]
   1137c:	ldr	r2, [r4, #0]
   1137e:	cmp	r3, #0
   11380:	beq.n	113fe <_scanf_i+0x15e>
   11382:	ldr	r1, [r6, #0]
   11384:	ldr	r0, [r4, #20]
   11386:	ldrb.w	ip, [r1]
   1138a:	ldrb.w	r0, [r0, ip]
   1138e:	cmp	r0, #0
   11390:	beq.n	113fe <_scanf_i+0x15e>
   11392:	cmp.w	ip, #48	@ 0x30
   11396:	bne.n	113e2 <_scanf_i+0x142>
   11398:	lsls	r0, r2, #20
   1139a:	bpl.n	113e2 <_scanf_i+0x142>
   1139c:	add.w	fp, fp, #1
   113a0:	cmp.w	r9, #0
   113a4:	beq.n	113ae <_scanf_i+0x10e>
   113a6:	adds	r3, #1
   113a8:	add.w	r9, r9, #4294967295
   113ac:	str	r3, [r4, #8]
   113ae:	ldr	r3, [r6, #4]
   113b0:	subs	r3, #1
   113b2:	cmp	r3, #0
   113b4:	str	r3, [r6, #4]
   113b6:	ble.n	113f0 <_scanf_i+0x150>
   113b8:	ldr	r3, [r6, #0]
   113ba:	adds	r3, #1
   113bc:	str	r3, [r6, #0]
   113be:	ldr	r3, [r4, #8]
   113c0:	subs	r3, #1
   113c2:	str	r3, [r4, #8]
   113c4:	b.n	1137a <_scanf_i+0xda>
   113c6:	cmp.w	fp, #2
   113ca:	bne.n	1132a <_scanf_i+0x8a>
   113cc:	ldr	r2, [r4, #0]
   113ce:	and.w	r1, r2, #1536	@ 0x600
   113d2:	cmp.w	r1, #512	@ 0x200
   113d6:	bne.n	11358 <_scanf_i+0xb8>
   113d8:	movs	r1, #16
   113da:	str	r1, [r4, #4]
   113dc:	orr.w	r2, r2, #256	@ 0x100
   113e0:	b.n	11328 <_scanf_i+0x88>
   113e2:	bic.w	r2, r2, #2304	@ 0x900
   113e6:	str	r2, [r4, #0]
   113e8:	ldrb	r3, [r1, #0]
   113ea:	strb.w	r3, [r5], #1
   113ee:	b.n	113ae <_scanf_i+0x10e>
   113f0:	ldr.w	r3, [r4, #384]	@ 0x180
   113f4:	mov	r1, r6
   113f6:	mov	r0, sl
   113f8:	blx	r3
   113fa:	cmp	r0, #0
   113fc:	beq.n	113be <_scanf_i+0x11e>
   113fe:	ldr	r3, [r4, #0]
   11400:	lsls	r1, r3, #23
   11402:	bpl.n	11420 <_scanf_i+0x180>
   11404:	cmp	r5, r7
   11406:	bls.n	1141c <_scanf_i+0x17c>
   11408:	ldrb.w	r1, [r5, #-1]
   1140c:	ldr.w	r3, [r4, #380]	@ 0x17c
   11410:	mov	r2, r6
   11412:	mov	r0, sl
   11414:	blx	r3
   11416:	add.w	r9, r5, #4294967295
   1141a:	mov	r5, r9
   1141c:	cmp	r5, r7
   1141e:	beq.n	11472 <_scanf_i+0x1d2>
   11420:	ldr	r2, [r4, #0]
   11422:	ands.w	r2, r2, #16
   11426:	bne.n	11450 <_scanf_i+0x1b0>
   11428:	strb	r2, [r5, #0]
   1142a:	ldr	r3, [r4, #4]
   1142c:	ldr	r6, [sp, #4]
   1142e:	mov	r1, r7
   11430:	mov	r0, sl
   11432:	blx	r6
   11434:	ldr.w	r3, [r8]
   11438:	ldr	r1, [r4, #0]
   1143a:	adds	r2, r3, #4
   1143c:	str.w	r2, [r8]
   11440:	tst.w	r1, #32
   11444:	ldr	r3, [r3, #0]
   11446:	beq.n	11468 <_scanf_i+0x1c8>
   11448:	str	r0, [r3, #0]
   1144a:	ldr	r3, [r4, #12]
   1144c:	adds	r3, #1
   1144e:	str	r3, [r4, #12]
   11450:	ldr	r3, [r4, #16]
   11452:	subs	r5, r5, r7
   11454:	add	r5, fp
   11456:	add	r3, r5
   11458:	str	r3, [r4, #16]
   1145a:	movs	r0, #0
   1145c:	add	sp, #28
   1145e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11462:	mov.w	fp, #0
   11466:	b.n	113fe <_scanf_i+0x15e>
   11468:	lsls	r2, r1, #31
   1146a:	ite	mi
   1146c:	strhmi	r0, [r3, #0]
   1146e:	strpl	r0, [r3, #0]
   11470:	b.n	1144a <_scanf_i+0x1aa>
   11472:	movs	r0, #1
   11474:	b.n	1145c <_scanf_i+0x1bc>
   11476:	nop
   11478:	.word	0x20000418
   1147c:	.word	0x0000db55
   11480:	.word	0x00011809
   11484:	.word	0x20001e04

00011488 <__sflush_r>:
   11488:	ldrsh.w	r2, [r1, #12]
   1148c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11490:	lsls	r6, r2, #28
   11492:	mov	r5, r0
   11494:	mov	r4, r1
   11496:	bmi.n	11542 <__sflush_r+0xba>
   11498:	ldr	r3, [r1, #4]
   1149a:	cmp	r3, #0
   1149c:	bgt.n	114a4 <__sflush_r+0x1c>
   1149e:	ldr	r3, [r1, #64]	@ 0x40
   114a0:	cmp	r3, #0
   114a2:	ble.n	11536 <__sflush_r+0xae>
   114a4:	ldr	r6, [r4, #44]	@ 0x2c
   114a6:	cmp	r6, #0
   114a8:	beq.n	11536 <__sflush_r+0xae>
   114aa:	movs	r3, #0
   114ac:	ands.w	r2, r2, #4096	@ 0x1000
   114b0:	ldr	r7, [r5, #0]
   114b2:	ldr	r1, [r4, #32]
   114b4:	str	r3, [r5, #0]
   114b6:	beq.n	1151a <__sflush_r+0x92>
   114b8:	ldr	r2, [r4, #84]	@ 0x54
   114ba:	ldrh	r3, [r4, #12]
   114bc:	lsls	r1, r3, #29
   114be:	bpl.n	114cc <__sflush_r+0x44>
   114c0:	ldr	r3, [r4, #4]
   114c2:	subs	r2, r2, r3
   114c4:	ldr	r3, [r4, #52]	@ 0x34
   114c6:	cbz	r3, 114cc <__sflush_r+0x44>
   114c8:	ldr	r3, [r4, #64]	@ 0x40
   114ca:	subs	r2, r2, r3
   114cc:	movs	r3, #0
   114ce:	ldr	r6, [r4, #44]	@ 0x2c
   114d0:	ldr	r1, [r4, #32]
   114d2:	mov	r0, r5
   114d4:	blx	r6
   114d6:	adds	r3, r0, #1
   114d8:	ldrh	r3, [r4, #12]
   114da:	bne.n	114ea <__sflush_r+0x62>
   114dc:	ldr	r1, [r5, #0]
   114de:	cmp	r1, #29
   114e0:	bhi.n	1153a <__sflush_r+0xb2>
   114e2:	ldr	r2, [pc, #168]	@ (1158c <__sflush_r+0x104>)
   114e4:	lsrs	r2, r1
   114e6:	lsls	r6, r2, #31
   114e8:	bpl.n	1153a <__sflush_r+0xb2>
   114ea:	movs	r2, #0
   114ec:	str	r2, [r4, #4]
   114ee:	lsls	r1, r3, #19
   114f0:	ldr	r2, [r4, #16]
   114f2:	str	r2, [r4, #0]
   114f4:	bpl.n	11500 <__sflush_r+0x78>
   114f6:	adds	r2, r0, #1
   114f8:	bne.n	114fe <__sflush_r+0x76>
   114fa:	ldr	r3, [r5, #0]
   114fc:	cbnz	r3, 11500 <__sflush_r+0x78>
   114fe:	str	r0, [r4, #84]	@ 0x54
   11500:	ldr	r1, [r4, #52]	@ 0x34
   11502:	str	r7, [r5, #0]
   11504:	cbz	r1, 11536 <__sflush_r+0xae>
   11506:	add.w	r3, r4, #68	@ 0x44
   1150a:	cmp	r1, r3
   1150c:	beq.n	11514 <__sflush_r+0x8c>
   1150e:	mov	r0, r5
   11510:	bl	fa5c <_free_r>
   11514:	movs	r3, #0
   11516:	str	r3, [r4, #52]	@ 0x34
   11518:	b.n	11536 <__sflush_r+0xae>
   1151a:	movs	r3, #1
   1151c:	mov	r0, r5
   1151e:	blx	r6
   11520:	mov	r2, r0
   11522:	adds	r0, r2, #1
   11524:	bne.n	114ba <__sflush_r+0x32>
   11526:	ldr	r3, [r5, #0]
   11528:	cmp	r3, #0
   1152a:	beq.n	114ba <__sflush_r+0x32>
   1152c:	cmp	r3, #29
   1152e:	beq.n	11534 <__sflush_r+0xac>
   11530:	cmp	r3, #22
   11532:	bne.n	11572 <__sflush_r+0xea>
   11534:	str	r7, [r5, #0]
   11536:	movs	r0, #0
   11538:	b.n	11580 <__sflush_r+0xf8>
   1153a:	orr.w	r3, r3, #64	@ 0x40
   1153e:	sxth	r3, r3
   11540:	b.n	1157a <__sflush_r+0xf2>
   11542:	ldr	r7, [r1, #16]
   11544:	cmp	r7, #0
   11546:	beq.n	11536 <__sflush_r+0xae>
   11548:	lsls	r3, r2, #30
   1154a:	ldr	r6, [r1, #0]
   1154c:	it	eq
   1154e:	ldreq	r3, [r1, #20]
   11550:	str	r7, [r1, #0]
   11552:	it	ne
   11554:	movne	r3, #0
   11556:	sub.w	r8, r6, r7
   1155a:	str	r3, [r1, #8]
   1155c:	cmp.w	r8, #0
   11560:	ble.n	11536 <__sflush_r+0xae>
   11562:	ldr	r1, [r4, #32]
   11564:	ldr	r6, [r4, #40]	@ 0x28
   11566:	mov	r3, r8
   11568:	mov	r2, r7
   1156a:	mov	r0, r5
   1156c:	blx	r6
   1156e:	cmp	r0, #0
   11570:	bgt.n	11584 <__sflush_r+0xfc>
   11572:	ldrsh.w	r3, [r4, #12]
   11576:	orr.w	r3, r3, #64	@ 0x40
   1157a:	strh	r3, [r4, #12]
   1157c:	mov.w	r0, #4294967295
   11580:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11584:	add	r7, r0
   11586:	sub.w	r8, r8, r0
   1158a:	b.n	1155c <__sflush_r+0xd4>
   1158c:	.word	0x20400001

00011590 <_fflush_r>:
   11590:	push	{r3, r4, r5, lr}
   11592:	ldr	r3, [r1, #16]
   11594:	mov	r5, r0
   11596:	mov	r4, r1
   11598:	cbnz	r3, 115a0 <_fflush_r+0x10>
   1159a:	movs	r5, #0
   1159c:	mov	r0, r5
   1159e:	pop	{r3, r4, r5, pc}
   115a0:	cbz	r0, 115aa <_fflush_r+0x1a>
   115a2:	ldr	r3, [r0, #32]
   115a4:	cbnz	r3, 115aa <_fflush_r+0x1a>
   115a6:	bl	e91c <__sinit>
   115aa:	ldrsh.w	r3, [r4, #12]
   115ae:	cmp	r3, #0
   115b0:	beq.n	1159a <_fflush_r+0xa>
   115b2:	ldr	r2, [r4, #100]	@ 0x64
   115b4:	lsls	r0, r2, #31
   115b6:	bmi.n	115c2 <_fflush_r+0x32>
   115b8:	lsls	r1, r3, #22
   115ba:	bmi.n	115c2 <_fflush_r+0x32>
   115bc:	ldr	r0, [r4, #88]	@ 0x58
   115be:	bl	edca <__retarget_lock_acquire_recursive>
   115c2:	mov	r0, r5
   115c4:	mov	r1, r4
   115c6:	bl	11488 <__sflush_r>
   115ca:	ldr	r3, [r4, #100]	@ 0x64
   115cc:	lsls	r2, r3, #31
   115ce:	mov	r5, r0
   115d0:	bmi.n	1159c <_fflush_r+0xc>
   115d2:	ldrh	r3, [r4, #12]
   115d4:	lsls	r3, r3, #22
   115d6:	bmi.n	1159c <_fflush_r+0xc>
   115d8:	ldr	r0, [r4, #88]	@ 0x58
   115da:	bl	edcc <__retarget_lock_release_recursive>
   115de:	b.n	1159c <_fflush_r+0xc>

000115e0 <__sccl>:
   115e0:	push	{r4, r5, r6, lr}
   115e2:	ldrb	r3, [r1, #0]
   115e4:	mov	r4, r0
   115e6:	cmp	r3, #94	@ 0x5e
   115e8:	itete	eq
   115ea:	ldrbeq	r3, [r1, #1]
   115ec:	addne	r2, r1, #1
   115ee:	addeq	r2, r1, #2
   115f0:	movne	r1, #0
   115f2:	it	eq
   115f4:	moveq	r1, #1
   115f6:	subs	r0, #1
   115f8:	add.w	r5, r4, #255	@ 0xff
   115fc:	strb.w	r1, [r0, #1]!
   11600:	cmp	r0, r5
   11602:	bne.n	115fc <__sccl+0x1c>
   11604:	cbnz	r3, 1160a <__sccl+0x2a>
   11606:	subs	r0, r2, #1
   11608:	pop	{r4, r5, r6, pc}
   1160a:	eor.w	r1, r1, #1
   1160e:	strb	r1, [r4, r3]
   11610:	mov	r0, r2
   11612:	mov	r2, r0
   11614:	ldrb.w	r5, [r2], #1
   11618:	cmp	r5, #45	@ 0x2d
   1161a:	beq.n	11628 <__sccl+0x48>
   1161c:	cmp	r5, #93	@ 0x5d
   1161e:	beq.n	1164e <__sccl+0x6e>
   11620:	cmp	r5, #0
   11622:	beq.n	11608 <__sccl+0x28>
   11624:	mov	r3, r5
   11626:	b.n	1160e <__sccl+0x2e>
   11628:	ldrb	r6, [r0, #1]
   1162a:	cmp	r6, #93	@ 0x5d
   1162c:	beq.n	11624 <__sccl+0x44>
   1162e:	cmp	r3, r6
   11630:	bgt.n	11624 <__sccl+0x44>
   11632:	adds	r0, #2
   11634:	mov	r2, r3
   11636:	adds	r2, #1
   11638:	cmp	r6, r2
   1163a:	strb	r1, [r4, r2]
   1163c:	bgt.n	11636 <__sccl+0x56>
   1163e:	subs	r2, r6, r3
   11640:	subs	r2, #1
   11642:	adds	r5, r3, #1
   11644:	cmp	r3, r6
   11646:	it	ge
   11648:	movge	r2, #0
   1164a:	adds	r3, r5, r2
   1164c:	b.n	11612 <__sccl+0x32>
   1164e:	mov	r0, r2
   11650:	b.n	11608 <__sccl+0x28>

00011652 <__submore>:
   11652:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11656:	mov	r4, r1
   11658:	ldr	r1, [r1, #52]	@ 0x34
   1165a:	add.w	r3, r4, #68	@ 0x44
   1165e:	cmp	r1, r3
   11660:	bne.n	1169e <__submore+0x4c>
   11662:	mov.w	r1, #1024	@ 0x400
   11666:	bl	cd78 <_malloc_r>
   1166a:	cbnz	r0, 11674 <__submore+0x22>
   1166c:	mov.w	r0, #4294967295
   11670:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11674:	mov.w	r3, #1024	@ 0x400
   11678:	str	r3, [r4, #56]	@ 0x38
   1167a:	ldrb.w	r3, [r4, #70]	@ 0x46
   1167e:	str	r0, [r4, #52]	@ 0x34
   11680:	strb.w	r3, [r0, #1023]	@ 0x3ff
   11684:	ldrb.w	r3, [r4, #69]	@ 0x45
   11688:	strb.w	r3, [r0, #1022]	@ 0x3fe
   1168c:	ldrb.w	r3, [r4, #68]	@ 0x44
   11690:	strb.w	r3, [r0, #1021]	@ 0x3fd
   11694:	addw	r0, r0, #1021	@ 0x3fd
   11698:	str	r0, [r4, #0]
   1169a:	movs	r0, #0
   1169c:	b.n	11670 <__submore+0x1e>
   1169e:	ldr	r6, [r4, #56]	@ 0x38
   116a0:	lsls	r7, r6, #1
   116a2:	mov	r2, r7
   116a4:	bl	ce90 <_realloc_r>
   116a8:	mov	r5, r0
   116aa:	cmp	r0, #0
   116ac:	beq.n	1166c <__submore+0x1a>
   116ae:	add.w	r8, r0, r6
   116b2:	mov	r1, r0
   116b4:	mov	r2, r6
   116b6:	mov	r0, r8
   116b8:	bl	a2f0 <memcpy>
   116bc:	strd	r5, r7, [r4, #52]	@ 0x34
   116c0:	str.w	r8, [r4]
   116c4:	b.n	1169a <__submore+0x48>
	...

000116c8 <__assert_func>:
   116c8:	push	{r0, r1, r2, r3, r4, lr}
   116ca:	mov	r4, r2
   116cc:	mov	r2, r3
   116ce:	ldr	r3, [pc, #36]	@ (116f4 <__assert_func+0x2c>)
   116d0:	ldr	r3, [r3, #0]
   116d2:	mov	r5, r0
   116d4:	ldr	r0, [r3, #12]
   116d6:	cbz	r4, 116ec <__assert_func+0x24>
   116d8:	ldr	r3, [pc, #28]	@ (116f8 <__assert_func+0x30>)
   116da:	str	r1, [sp, #0]
   116dc:	strd	r3, r4, [sp, #4]
   116e0:	ldr	r1, [pc, #24]	@ (116fc <__assert_func+0x34>)
   116e2:	mov	r3, r5
   116e4:	bl	1180c <fiprintf>
   116e8:	bl	ba3e <abort>
   116ec:	ldr	r3, [pc, #16]	@ (11700 <__assert_func+0x38>)
   116ee:	mov	r4, r3
   116f0:	b.n	116da <__assert_func+0x12>
   116f2:	nop
   116f4:	.word	0x200023f8
   116f8:	.word	0x20001e0f
   116fc:	.word	0x20001e1c
   11700:	.word	0x20001052

00011704 <_calloc_r>:
   11704:	push	{r4, r5, r6, lr}
   11706:	umull	r5, r4, r1, r2
   1170a:	cbnz	r4, 1171a <_calloc_r+0x16>
   1170c:	mov	r1, r5
   1170e:	bl	cd78 <_malloc_r>
   11712:	mov	r6, r0
   11714:	cbnz	r0, 11722 <_calloc_r+0x1e>
   11716:	mov	r0, r6
   11718:	pop	{r4, r5, r6, pc}
   1171a:	movs	r2, #12
   1171c:	str	r2, [r0, #0]
   1171e:	movs	r6, #0
   11720:	b.n	11716 <_calloc_r+0x12>
   11722:	mov	r2, r5
   11724:	mov	r1, r4
   11726:	bl	a2ac <memset>
   1172a:	b.n	11716 <_calloc_r+0x12>

0001172c <_strtoul_l.isra.0>:
   1172c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11730:	ldr	r6, [pc, #208]	@ (11804 <_strtoul_l.isra.0+0xd8>)
   11732:	mov	lr, r0
   11734:	mov	r5, r1
   11736:	mov	r0, r5
   11738:	ldrb.w	r4, [r5], #1
   1173c:	ldrb	r7, [r6, r4]
   1173e:	ands.w	r7, r7, #8
   11742:	bne.n	11736 <_strtoul_l.isra.0+0xa>
   11744:	cmp	r4, #45	@ 0x2d
   11746:	bne.n	1176a <_strtoul_l.isra.0+0x3e>
   11748:	ldrb	r4, [r5, #0]
   1174a:	movs	r7, #1
   1174c:	adds	r5, r0, #2
   1174e:	bics.w	r0, r3, #16
   11752:	bne.n	11780 <_strtoul_l.isra.0+0x54>
   11754:	cmp	r4, #48	@ 0x30
   11756:	bne.n	11774 <_strtoul_l.isra.0+0x48>
   11758:	ldrb	r0, [r5, #0]
   1175a:	and.w	r0, r0, #223	@ 0xdf
   1175e:	cmp	r0, #88	@ 0x58
   11760:	bne.n	11774 <_strtoul_l.isra.0+0x48>
   11762:	ldrb	r4, [r5, #1]
   11764:	adds	r5, #2
   11766:	movs	r3, #16
   11768:	b.n	11780 <_strtoul_l.isra.0+0x54>
   1176a:	cmp	r4, #43	@ 0x2b
   1176c:	itt	eq
   1176e:	ldrbeq	r4, [r5, #0]
   11770:	addeq	r5, r0, #2
   11772:	b.n	1174e <_strtoul_l.isra.0+0x22>
   11774:	cmp	r3, #0
   11776:	bne.n	11766 <_strtoul_l.isra.0+0x3a>
   11778:	cmp	r4, #48	@ 0x30
   1177a:	ite	ne
   1177c:	movne	r3, #10
   1177e:	moveq	r3, #8
   11780:	mov.w	r8, #4294967295
   11784:	movs	r6, #0
   11786:	udiv	r8, r8, r3
   1178a:	mul.w	r9, r3, r8
   1178e:	mvn.w	r9, r9
   11792:	mov	r0, r6
   11794:	sub.w	ip, r4, #48	@ 0x30
   11798:	cmp.w	ip, #9
   1179c:	bhi.n	117c0 <_strtoul_l.isra.0+0x94>
   1179e:	mov	r4, ip
   117a0:	cmp	r3, r4
   117a2:	ble.n	117e2 <_strtoul_l.isra.0+0xb6>
   117a4:	cmp.w	r6, #4294967295
   117a8:	beq.n	117ba <_strtoul_l.isra.0+0x8e>
   117aa:	cmp	r8, r0
   117ac:	bcc.n	117dc <_strtoul_l.isra.0+0xb0>
   117ae:	bne.n	117b4 <_strtoul_l.isra.0+0x88>
   117b0:	cmp	r9, r4
   117b2:	blt.n	117dc <_strtoul_l.isra.0+0xb0>
   117b4:	mla	r0, r0, r3, r4
   117b8:	movs	r6, #1
   117ba:	ldrb.w	r4, [r5], #1
   117be:	b.n	11794 <_strtoul_l.isra.0+0x68>
   117c0:	sub.w	ip, r4, #65	@ 0x41
   117c4:	cmp.w	ip, #25
   117c8:	bhi.n	117ce <_strtoul_l.isra.0+0xa2>
   117ca:	subs	r4, #55	@ 0x37
   117cc:	b.n	117a0 <_strtoul_l.isra.0+0x74>
   117ce:	sub.w	ip, r4, #97	@ 0x61
   117d2:	cmp.w	ip, #25
   117d6:	bhi.n	117e2 <_strtoul_l.isra.0+0xb6>
   117d8:	subs	r4, #87	@ 0x57
   117da:	b.n	117a0 <_strtoul_l.isra.0+0x74>
   117dc:	mov.w	r6, #4294967295
   117e0:	b.n	117ba <_strtoul_l.isra.0+0x8e>
   117e2:	adds	r3, r6, #1
   117e4:	bne.n	117f4 <_strtoul_l.isra.0+0xc8>
   117e6:	movs	r3, #34	@ 0x22
   117e8:	str.w	r3, [lr]
   117ec:	mov	r0, r6
   117ee:	cbnz	r2, 117fe <_strtoul_l.isra.0+0xd2>
   117f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   117f4:	cbz	r7, 117f8 <_strtoul_l.isra.0+0xcc>
   117f6:	negs	r0, r0
   117f8:	cmp	r2, #0
   117fa:	beq.n	117f0 <_strtoul_l.isra.0+0xc4>
   117fc:	cbz	r6, 11800 <_strtoul_l.isra.0+0xd4>
   117fe:	subs	r1, r5, #1
   11800:	str	r1, [r2, #0]
   11802:	b.n	117f0 <_strtoul_l.isra.0+0xc4>
   11804:	.word	0x20000dfd

00011808 <_strtoul_r>:
   11808:	b.w	1172c <_strtoul_l.isra.0>

0001180c <fiprintf>:
   1180c:	push	{r1, r2, r3}
   1180e:	push	{r0, r1, lr}
   11810:	mov	r1, r0
   11812:	add	r3, sp, #12
   11814:	ldr	r0, [pc, #20]	@ (1182c <fiprintf+0x20>)
   11816:	ldr.w	r2, [r3], #4
   1181a:	ldr	r0, [r0, #0]
   1181c:	str	r3, [sp, #4]
   1181e:	bl	11884 <_vfiprintf_r>
   11822:	add	sp, #8
   11824:	ldr.w	lr, [sp], #4
   11828:	add	sp, #12
   1182a:	bx	lr
   1182c:	.word	0x200023f8

00011830 <__sfputc_r>:
   11830:	ldr	r3, [r2, #8]
   11832:	subs	r3, #1
   11834:	cmp	r3, #0
   11836:	push	{r4}
   11838:	str	r3, [r2, #8]
   1183a:	bge.n	1184e <__sfputc_r+0x1e>
   1183c:	ldr	r4, [r2, #24]
   1183e:	cmp	r3, r4
   11840:	blt.n	11846 <__sfputc_r+0x16>
   11842:	cmp	r1, #10
   11844:	bne.n	1184e <__sfputc_r+0x1e>
   11846:	ldr.w	r4, [sp], #4
   1184a:	b.w	11ab4 <__swbuf_r>
   1184e:	ldr	r3, [r2, #0]
   11850:	adds	r0, r3, #1
   11852:	str	r0, [r2, #0]
   11854:	strb	r1, [r3, #0]
   11856:	mov	r0, r1
   11858:	ldr.w	r4, [sp], #4
   1185c:	bx	lr

0001185e <__sfputs_r>:
   1185e:	push	{r3, r4, r5, r6, r7, lr}
   11860:	mov	r6, r0
   11862:	mov	r7, r1
   11864:	mov	r4, r2
   11866:	adds	r5, r2, r3
   11868:	cmp	r4, r5
   1186a:	bne.n	11870 <__sfputs_r+0x12>
   1186c:	movs	r0, #0
   1186e:	b.n	11880 <__sfputs_r+0x22>
   11870:	ldrb.w	r1, [r4], #1
   11874:	mov	r2, r7
   11876:	mov	r0, r6
   11878:	bl	11830 <__sfputc_r>
   1187c:	adds	r3, r0, #1
   1187e:	bne.n	11868 <__sfputs_r+0xa>
   11880:	pop	{r3, r4, r5, r6, r7, pc}
	...

00011884 <_vfiprintf_r>:
   11884:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11888:	mov	r5, r1
   1188a:	sub	sp, #116	@ 0x74
   1188c:	mov	r4, r2
   1188e:	mov	r8, r3
   11890:	mov	r6, r0
   11892:	cbz	r0, 1189c <_vfiprintf_r+0x18>
   11894:	ldr	r3, [r0, #32]
   11896:	cbnz	r3, 1189c <_vfiprintf_r+0x18>
   11898:	bl	e91c <__sinit>
   1189c:	ldr	r3, [r5, #100]	@ 0x64
   1189e:	lsls	r1, r3, #31
   118a0:	bmi.n	118ae <_vfiprintf_r+0x2a>
   118a2:	ldrh	r3, [r5, #12]
   118a4:	lsls	r2, r3, #22
   118a6:	bmi.n	118ae <_vfiprintf_r+0x2a>
   118a8:	ldr	r0, [r5, #88]	@ 0x58
   118aa:	bl	edca <__retarget_lock_acquire_recursive>
   118ae:	ldrh	r3, [r5, #12]
   118b0:	lsls	r3, r3, #28
   118b2:	bpl.n	118b8 <_vfiprintf_r+0x34>
   118b4:	ldr	r3, [r5, #16]
   118b6:	cbnz	r3, 118e0 <_vfiprintf_r+0x5c>
   118b8:	mov	r1, r5
   118ba:	mov	r0, r6
   118bc:	bl	11b30 <__swsetup_r>
   118c0:	cbz	r0, 118e0 <_vfiprintf_r+0x5c>
   118c2:	ldr	r3, [r5, #100]	@ 0x64
   118c4:	lsls	r4, r3, #31
   118c6:	bpl.n	118d2 <_vfiprintf_r+0x4e>
   118c8:	mov.w	r0, #4294967295
   118cc:	add	sp, #116	@ 0x74
   118ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118d2:	ldrh	r3, [r5, #12]
   118d4:	lsls	r0, r3, #22
   118d6:	bmi.n	118c8 <_vfiprintf_r+0x44>
   118d8:	ldr	r0, [r5, #88]	@ 0x58
   118da:	bl	edcc <__retarget_lock_release_recursive>
   118de:	b.n	118c8 <_vfiprintf_r+0x44>
   118e0:	movs	r3, #0
   118e2:	str	r3, [sp, #36]	@ 0x24
   118e4:	movs	r3, #32
   118e6:	strb.w	r3, [sp, #41]	@ 0x29
   118ea:	str.w	r8, [sp, #12]
   118ee:	movs	r3, #48	@ 0x30
   118f0:	ldr.w	r8, [pc, #428]	@ 11aa0 <_vfiprintf_r+0x21c>
   118f4:	strb.w	r3, [sp, #42]	@ 0x2a
   118f8:	mov.w	r9, #1
   118fc:	mov	r3, r4
   118fe:	mov	sl, r3
   11900:	ldrb.w	r2, [r3], #1
   11904:	cbz	r2, 1190a <_vfiprintf_r+0x86>
   11906:	cmp	r2, #37	@ 0x25
   11908:	bne.n	118fe <_vfiprintf_r+0x7a>
   1190a:	subs.w	fp, sl, r4
   1190e:	beq.n	11928 <_vfiprintf_r+0xa4>
   11910:	mov	r3, fp
   11912:	mov	r2, r4
   11914:	mov	r1, r5
   11916:	mov	r0, r6
   11918:	bl	1185e <__sfputs_r>
   1191c:	adds	r0, #1
   1191e:	beq.w	11a70 <_vfiprintf_r+0x1ec>
   11922:	ldr	r2, [sp, #36]	@ 0x24
   11924:	add	r2, fp
   11926:	str	r2, [sp, #36]	@ 0x24
   11928:	ldrb.w	r3, [sl]
   1192c:	cmp	r3, #0
   1192e:	beq.w	11a70 <_vfiprintf_r+0x1ec>
   11932:	movs	r3, #0
   11934:	mov.w	r2, #4294967295
   11938:	strd	r2, r3, [sp, #20]
   1193c:	add.w	sl, sl, #1
   11940:	str	r3, [sp, #16]
   11942:	str	r3, [sp, #28]
   11944:	strb.w	r3, [sp, #83]	@ 0x53
   11948:	str	r3, [sp, #104]	@ 0x68
   1194a:	mov	r4, sl
   1194c:	movs	r2, #5
   1194e:	ldrb.w	r1, [r4], #1
   11952:	ldr	r0, [pc, #332]	@ (11aa0 <_vfiprintf_r+0x21c>)
   11954:	bl	ede0 <memchr>
   11958:	ldr	r2, [sp, #16]
   1195a:	cbnz	r0, 11994 <_vfiprintf_r+0x110>
   1195c:	lsls	r1, r2, #27
   1195e:	itt	mi
   11960:	movmi	r3, #32
   11962:	strbmi.w	r3, [sp, #83]	@ 0x53
   11966:	lsls	r3, r2, #28
   11968:	itt	mi
   1196a:	movmi	r3, #43	@ 0x2b
   1196c:	strbmi.w	r3, [sp, #83]	@ 0x53
   11970:	ldrb.w	r3, [sl]
   11974:	cmp	r3, #42	@ 0x2a
   11976:	beq.n	119a4 <_vfiprintf_r+0x120>
   11978:	ldr	r2, [sp, #28]
   1197a:	mov	r4, sl
   1197c:	movs	r0, #0
   1197e:	mov.w	ip, #10
   11982:	mov	r1, r4
   11984:	ldrb.w	r3, [r1], #1
   11988:	subs	r3, #48	@ 0x30
   1198a:	cmp	r3, #9
   1198c:	bls.n	11a26 <_vfiprintf_r+0x1a2>
   1198e:	cbz	r0, 119be <_vfiprintf_r+0x13a>
   11990:	str	r2, [sp, #28]
   11992:	b.n	119be <_vfiprintf_r+0x13a>
   11994:	sub.w	r3, r0, r8
   11998:	lsl.w	r3, r9, r3
   1199c:	orrs	r3, r2
   1199e:	str	r3, [sp, #16]
   119a0:	mov	sl, r4
   119a2:	b.n	1194a <_vfiprintf_r+0xc6>
   119a4:	ldr	r3, [sp, #12]
   119a6:	adds	r1, r3, #4
   119a8:	ldr	r3, [r3, #0]
   119aa:	str	r1, [sp, #12]
   119ac:	cmp	r3, #0
   119ae:	ittet	lt
   119b0:	neglt	r3, r3
   119b2:	orrlt.w	r2, r2, #2
   119b6:	strge	r3, [sp, #28]
   119b8:	strlt	r3, [sp, #28]
   119ba:	it	lt
   119bc:	strlt	r2, [sp, #16]
   119be:	ldrb	r3, [r4, #0]
   119c0:	cmp	r3, #46	@ 0x2e
   119c2:	bne.n	119da <_vfiprintf_r+0x156>
   119c4:	ldrb	r3, [r4, #1]
   119c6:	cmp	r3, #42	@ 0x2a
   119c8:	bne.n	11a30 <_vfiprintf_r+0x1ac>
   119ca:	ldr	r3, [sp, #12]
   119cc:	adds	r2, r3, #4
   119ce:	ldr	r3, [r3, #0]
   119d0:	str	r2, [sp, #12]
   119d2:	orr.w	r3, r3, r3, asr #31
   119d6:	adds	r4, #2
   119d8:	str	r3, [sp, #20]
   119da:	ldr.w	sl, [pc, #212]	@ 11ab0 <_vfiprintf_r+0x22c>
   119de:	ldrb	r1, [r4, #0]
   119e0:	movs	r2, #3
   119e2:	mov	r0, sl
   119e4:	bl	ede0 <memchr>
   119e8:	cbz	r0, 119fa <_vfiprintf_r+0x176>
   119ea:	ldr	r3, [sp, #16]
   119ec:	sub.w	r0, r0, sl
   119f0:	movs	r2, #64	@ 0x40
   119f2:	lsls	r2, r0
   119f4:	orrs	r3, r2
   119f6:	adds	r4, #1
   119f8:	str	r3, [sp, #16]
   119fa:	ldrb.w	r1, [r4], #1
   119fe:	ldr	r0, [pc, #164]	@ (11aa4 <_vfiprintf_r+0x220>)
   11a00:	strb.w	r1, [sp, #40]	@ 0x28
   11a04:	movs	r2, #6
   11a06:	bl	ede0 <memchr>
   11a0a:	cmp	r0, #0
   11a0c:	beq.n	11a8e <_vfiprintf_r+0x20a>
   11a0e:	ldr	r3, [pc, #152]	@ (11aa8 <_vfiprintf_r+0x224>)
   11a10:	cbnz	r3, 11a5a <_vfiprintf_r+0x1d6>
   11a12:	ldr	r3, [sp, #12]
   11a14:	adds	r3, #7
   11a16:	bic.w	r3, r3, #7
   11a1a:	adds	r3, #8
   11a1c:	str	r3, [sp, #12]
   11a1e:	ldr	r3, [sp, #36]	@ 0x24
   11a20:	add	r3, r7
   11a22:	str	r3, [sp, #36]	@ 0x24
   11a24:	b.n	118fc <_vfiprintf_r+0x78>
   11a26:	mla	r2, ip, r2, r3
   11a2a:	mov	r4, r1
   11a2c:	movs	r0, #1
   11a2e:	b.n	11982 <_vfiprintf_r+0xfe>
   11a30:	movs	r3, #0
   11a32:	adds	r4, #1
   11a34:	str	r3, [sp, #20]
   11a36:	mov	r1, r3
   11a38:	mov.w	ip, #10
   11a3c:	mov	r0, r4
   11a3e:	ldrb.w	r2, [r0], #1
   11a42:	subs	r2, #48	@ 0x30
   11a44:	cmp	r2, #9
   11a46:	bls.n	11a50 <_vfiprintf_r+0x1cc>
   11a48:	cmp	r3, #0
   11a4a:	beq.n	119da <_vfiprintf_r+0x156>
   11a4c:	str	r1, [sp, #20]
   11a4e:	b.n	119da <_vfiprintf_r+0x156>
   11a50:	mla	r1, ip, r1, r2
   11a54:	mov	r4, r0
   11a56:	movs	r3, #1
   11a58:	b.n	11a3c <_vfiprintf_r+0x1b8>
   11a5a:	add	r3, sp, #12
   11a5c:	str	r3, [sp, #0]
   11a5e:	mov	r2, r5
   11a60:	ldr	r3, [pc, #72]	@ (11aac <_vfiprintf_r+0x228>)
   11a62:	add	r1, sp, #16
   11a64:	mov	r0, r6
   11a66:	bl	dca0 <_printf_float>
   11a6a:	mov	r7, r0
   11a6c:	adds	r0, r7, #1
   11a6e:	bne.n	11a1e <_vfiprintf_r+0x19a>
   11a70:	ldr	r3, [r5, #100]	@ 0x64
   11a72:	lsls	r1, r3, #31
   11a74:	bmi.n	11a82 <_vfiprintf_r+0x1fe>
   11a76:	ldrh	r3, [r5, #12]
   11a78:	lsls	r2, r3, #22
   11a7a:	bmi.n	11a82 <_vfiprintf_r+0x1fe>
   11a7c:	ldr	r0, [r5, #88]	@ 0x58
   11a7e:	bl	edcc <__retarget_lock_release_recursive>
   11a82:	ldrh	r3, [r5, #12]
   11a84:	lsls	r3, r3, #25
   11a86:	bmi.w	118c8 <_vfiprintf_r+0x44>
   11a8a:	ldr	r0, [sp, #36]	@ 0x24
   11a8c:	b.n	118cc <_vfiprintf_r+0x48>
   11a8e:	add	r3, sp, #12
   11a90:	str	r3, [sp, #0]
   11a92:	mov	r2, r5
   11a94:	ldr	r3, [pc, #20]	@ (11aac <_vfiprintf_r+0x228>)
   11a96:	add	r1, sp, #16
   11a98:	mov	r0, r6
   11a9a:	bl	e1b0 <_printf_i>
   11a9e:	b.n	11a6a <_vfiprintf_r+0x1e6>
   11aa0:	.word	0x20001de3
   11aa4:	.word	0x20001ded
   11aa8:	.word	0x0000dca1
   11aac:	.word	0x0001185f
   11ab0:	.word	0x20001de9

00011ab4 <__swbuf_r>:
   11ab4:	push	{r3, r4, r5, r6, r7, lr}
   11ab6:	mov	r6, r1
   11ab8:	mov	r4, r2
   11aba:	mov	r5, r0
   11abc:	cbz	r0, 11ac6 <__swbuf_r+0x12>
   11abe:	ldr	r3, [r0, #32]
   11ac0:	cbnz	r3, 11ac6 <__swbuf_r+0x12>
   11ac2:	bl	e91c <__sinit>
   11ac6:	ldr	r3, [r4, #24]
   11ac8:	str	r3, [r4, #8]
   11aca:	ldrh	r3, [r4, #12]
   11acc:	lsls	r2, r3, #28
   11ace:	bpl.n	11ad4 <__swbuf_r+0x20>
   11ad0:	ldr	r3, [r4, #16]
   11ad2:	cbnz	r3, 11ae6 <__swbuf_r+0x32>
   11ad4:	mov	r1, r4
   11ad6:	mov	r0, r5
   11ad8:	bl	11b30 <__swsetup_r>
   11adc:	cbz	r0, 11ae6 <__swbuf_r+0x32>
   11ade:	mov.w	r7, #4294967295
   11ae2:	mov	r0, r7
   11ae4:	pop	{r3, r4, r5, r6, r7, pc}
   11ae6:	ldr	r3, [r4, #0]
   11ae8:	ldr	r2, [r4, #16]
   11aea:	subs	r0, r3, r2
   11aec:	ldr	r3, [r4, #20]
   11aee:	uxtb	r6, r6
   11af0:	cmp	r3, r0
   11af2:	mov	r7, r6
   11af4:	bgt.n	11b02 <__swbuf_r+0x4e>
   11af6:	mov	r1, r4
   11af8:	mov	r0, r5
   11afa:	bl	11590 <_fflush_r>
   11afe:	cmp	r0, #0
   11b00:	bne.n	11ade <__swbuf_r+0x2a>
   11b02:	ldr	r3, [r4, #8]
   11b04:	subs	r3, #1
   11b06:	str	r3, [r4, #8]
   11b08:	ldr	r3, [r4, #0]
   11b0a:	adds	r2, r3, #1
   11b0c:	str	r2, [r4, #0]
   11b0e:	strb	r6, [r3, #0]
   11b10:	ldr	r2, [r4, #20]
   11b12:	adds	r3, r0, #1
   11b14:	cmp	r2, r3
   11b16:	beq.n	11b22 <__swbuf_r+0x6e>
   11b18:	ldrh	r3, [r4, #12]
   11b1a:	lsls	r3, r3, #31
   11b1c:	bpl.n	11ae2 <__swbuf_r+0x2e>
   11b1e:	cmp	r6, #10
   11b20:	bne.n	11ae2 <__swbuf_r+0x2e>
   11b22:	mov	r1, r4
   11b24:	mov	r0, r5
   11b26:	bl	11590 <_fflush_r>
   11b2a:	cmp	r0, #0
   11b2c:	beq.n	11ae2 <__swbuf_r+0x2e>
   11b2e:	b.n	11ade <__swbuf_r+0x2a>

00011b30 <__swsetup_r>:
   11b30:	push	{r3, r4, r5, lr}
   11b32:	ldr	r3, [pc, #164]	@ (11bd8 <__swsetup_r+0xa8>)
   11b34:	mov	r5, r0
   11b36:	ldr	r0, [r3, #0]
   11b38:	mov	r4, r1
   11b3a:	cbz	r0, 11b44 <__swsetup_r+0x14>
   11b3c:	ldr	r3, [r0, #32]
   11b3e:	cbnz	r3, 11b44 <__swsetup_r+0x14>
   11b40:	bl	e91c <__sinit>
   11b44:	ldrsh.w	r3, [r4, #12]
   11b48:	lsls	r1, r3, #28
   11b4a:	bmi.n	11b92 <__swsetup_r+0x62>
   11b4c:	lsls	r2, r3, #27
   11b4e:	bmi.n	11b60 <__swsetup_r+0x30>
   11b50:	movs	r2, #9
   11b52:	str	r2, [r5, #0]
   11b54:	orr.w	r3, r3, #64	@ 0x40
   11b58:	strh	r3, [r4, #12]
   11b5a:	mov.w	r0, #4294967295
   11b5e:	b.n	11bc8 <__swsetup_r+0x98>
   11b60:	lsls	r0, r3, #29
   11b62:	bpl.n	11b8a <__swsetup_r+0x5a>
   11b64:	ldr	r1, [r4, #52]	@ 0x34
   11b66:	cbz	r1, 11b7a <__swsetup_r+0x4a>
   11b68:	add.w	r3, r4, #68	@ 0x44
   11b6c:	cmp	r1, r3
   11b6e:	beq.n	11b76 <__swsetup_r+0x46>
   11b70:	mov	r0, r5
   11b72:	bl	fa5c <_free_r>
   11b76:	movs	r3, #0
   11b78:	str	r3, [r4, #52]	@ 0x34
   11b7a:	ldrh	r3, [r4, #12]
   11b7c:	bic.w	r3, r3, #36	@ 0x24
   11b80:	strh	r3, [r4, #12]
   11b82:	movs	r3, #0
   11b84:	str	r3, [r4, #4]
   11b86:	ldr	r3, [r4, #16]
   11b88:	str	r3, [r4, #0]
   11b8a:	ldrh	r3, [r4, #12]
   11b8c:	orr.w	r3, r3, #8
   11b90:	strh	r3, [r4, #12]
   11b92:	ldr	r3, [r4, #16]
   11b94:	cbnz	r3, 11baa <__swsetup_r+0x7a>
   11b96:	ldrh	r3, [r4, #12]
   11b98:	and.w	r3, r3, #640	@ 0x280
   11b9c:	cmp.w	r3, #512	@ 0x200
   11ba0:	beq.n	11baa <__swsetup_r+0x7a>
   11ba2:	mov	r1, r4
   11ba4:	mov	r0, r5
   11ba6:	bl	11c28 <__smakebuf_r>
   11baa:	ldrsh.w	r3, [r4, #12]
   11bae:	ands.w	r2, r3, #1
   11bb2:	beq.n	11bca <__swsetup_r+0x9a>
   11bb4:	movs	r2, #0
   11bb6:	str	r2, [r4, #8]
   11bb8:	ldr	r2, [r4, #20]
   11bba:	negs	r2, r2
   11bbc:	str	r2, [r4, #24]
   11bbe:	ldr	r2, [r4, #16]
   11bc0:	cbnz	r2, 11bd4 <__swsetup_r+0xa4>
   11bc2:	ands.w	r0, r3, #128	@ 0x80
   11bc6:	bne.n	11b54 <__swsetup_r+0x24>
   11bc8:	pop	{r3, r4, r5, pc}
   11bca:	lsls	r1, r3, #30
   11bcc:	it	pl
   11bce:	ldrpl	r2, [r4, #20]
   11bd0:	str	r2, [r4, #8]
   11bd2:	b.n	11bbe <__swsetup_r+0x8e>
   11bd4:	movs	r0, #0
   11bd6:	b.n	11bc8 <__swsetup_r+0x98>
   11bd8:	.word	0x200023f8

00011bdc <__swhatbuf_r>:
   11bdc:	push	{r4, r5, r6, lr}
   11bde:	mov	r4, r1
   11be0:	ldrsh.w	r1, [r1, #14]
   11be4:	cmp	r1, #0
   11be6:	sub	sp, #88	@ 0x58
   11be8:	mov	r5, r2
   11bea:	mov	r6, r3
   11bec:	bge.n	11c0a <__swhatbuf_r+0x2e>
   11bee:	ldrh	r3, [r4, #12]
   11bf0:	tst.w	r3, #128	@ 0x80
   11bf4:	mov.w	r1, #0
   11bf8:	ite	ne
   11bfa:	movne	r3, #64	@ 0x40
   11bfc:	moveq.w	r3, #1024	@ 0x400
   11c00:	movs	r0, #0
   11c02:	str	r1, [r6, #0]
   11c04:	str	r3, [r5, #0]
   11c06:	add	sp, #88	@ 0x58
   11c08:	pop	{r4, r5, r6, pc}
   11c0a:	mov	r2, sp
   11c0c:	bl	11ca0 <_fstat_r>
   11c10:	cmp	r0, #0
   11c12:	blt.n	11bee <__swhatbuf_r+0x12>
   11c14:	ldr	r1, [sp, #4]
   11c16:	and.w	r1, r1, #61440	@ 0xf000
   11c1a:	sub.w	r3, r1, #8192	@ 0x2000
   11c1e:	negs	r1, r3
   11c20:	adcs	r1, r3
   11c22:	mov.w	r3, #1024	@ 0x400
   11c26:	b.n	11c00 <__swhatbuf_r+0x24>

00011c28 <__smakebuf_r>:
   11c28:	ldrh	r3, [r1, #12]
   11c2a:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11c2c:	lsls	r5, r3, #30
   11c2e:	mov	r6, r0
   11c30:	mov	r4, r1
   11c32:	bpl.n	11c44 <__smakebuf_r+0x1c>
   11c34:	add.w	r3, r4, #71	@ 0x47
   11c38:	str	r3, [r4, #0]
   11c3a:	str	r3, [r4, #16]
   11c3c:	movs	r3, #1
   11c3e:	str	r3, [r4, #20]
   11c40:	add	sp, #12
   11c42:	pop	{r4, r5, r6, r7, pc}
   11c44:	add	r3, sp, #4
   11c46:	mov	r2, sp
   11c48:	bl	11bdc <__swhatbuf_r>
   11c4c:	ldr	r7, [sp, #0]
   11c4e:	mov	r5, r0
   11c50:	mov	r1, r7
   11c52:	mov	r0, r6
   11c54:	bl	cd78 <_malloc_r>
   11c58:	cbnz	r0, 11c6e <__smakebuf_r+0x46>
   11c5a:	ldrsh.w	r3, [r4, #12]
   11c5e:	lsls	r2, r3, #22
   11c60:	bmi.n	11c40 <__smakebuf_r+0x18>
   11c62:	bic.w	r3, r3, #3
   11c66:	orr.w	r3, r3, #2
   11c6a:	strh	r3, [r4, #12]
   11c6c:	b.n	11c34 <__smakebuf_r+0xc>
   11c6e:	ldrh	r3, [r4, #12]
   11c70:	str	r0, [r4, #0]
   11c72:	orr.w	r3, r3, #128	@ 0x80
   11c76:	strh	r3, [r4, #12]
   11c78:	ldr	r3, [sp, #4]
   11c7a:	strd	r0, r7, [r4, #16]
   11c7e:	cbz	r3, 11c98 <__smakebuf_r+0x70>
   11c80:	ldrsh.w	r1, [r4, #14]
   11c84:	mov	r0, r6
   11c86:	bl	11cc4 <_isatty_r>
   11c8a:	cbz	r0, 11c98 <__smakebuf_r+0x70>
   11c8c:	ldrh	r3, [r4, #12]
   11c8e:	bic.w	r3, r3, #3
   11c92:	orr.w	r3, r3, #1
   11c96:	strh	r3, [r4, #12]
   11c98:	ldrh	r3, [r4, #12]
   11c9a:	orrs	r5, r3
   11c9c:	strh	r5, [r4, #12]
   11c9e:	b.n	11c40 <__smakebuf_r+0x18>

00011ca0 <_fstat_r>:
   11ca0:	push	{r3, r4, r5, lr}
   11ca2:	ldr	r5, [pc, #28]	@ (11cc0 <_fstat_r+0x20>)
   11ca4:	movs	r3, #0
   11ca6:	mov	r4, r0
   11ca8:	mov	r0, r1
   11caa:	mov	r1, r2
   11cac:	str	r3, [r5, #0]
   11cae:	bl	ba2a <_fstat>
   11cb2:	adds	r3, r0, #1
   11cb4:	bne.n	11cbc <_fstat_r+0x1c>
   11cb6:	ldr	r3, [r5, #0]
   11cb8:	cbz	r3, 11cbc <_fstat_r+0x1c>
   11cba:	str	r3, [r4, #0]
   11cbc:	pop	{r3, r4, r5, pc}
   11cbe:	nop
   11cc0:	.word	0x20012094

00011cc4 <_isatty_r>:
   11cc4:	push	{r3, r4, r5, lr}
   11cc6:	ldr	r5, [pc, #24]	@ (11ce0 <_isatty_r+0x1c>)
   11cc8:	movs	r3, #0
   11cca:	mov	r4, r0
   11ccc:	mov	r0, r1
   11cce:	str	r3, [r5, #0]
   11cd0:	bl	ba34 <_isatty>
   11cd4:	adds	r3, r0, #1
   11cd6:	bne.n	11cde <_isatty_r+0x1a>
   11cd8:	ldr	r3, [r5, #0]
   11cda:	cbz	r3, 11cde <_isatty_r+0x1a>
   11cdc:	str	r3, [r4, #0]
   11cde:	pop	{r3, r4, r5, pc}
   11ce0:	.word	0x20012094

00011ce4 <__aeabi_drsub>:
   11ce4:	eor.w	r1, r1, #2147483648	@ 0x80000000
   11ce8:	b.n	11cf0 <__adddf3>
   11cea:	nop

00011cec <__aeabi_dsub>:
   11cec:	eor.w	r3, r3, #2147483648	@ 0x80000000

00011cf0 <__adddf3>:
   11cf0:	push	{r4, r5, lr}
   11cf2:	mov.w	r4, r1, lsl #1
   11cf6:	mov.w	r5, r3, lsl #1
   11cfa:	teq	r4, r5
   11cfe:	it	eq
   11d00:	teqeq	r0, r2
   11d04:	itttt	ne
   11d06:	orrsne.w	ip, r4, r0
   11d0a:	orrsne.w	ip, r5, r2
   11d0e:	mvnsne.w	ip, r4, asr #21
   11d12:	mvnsne.w	ip, r5, asr #21
   11d16:	beq.w	11ede <__adddf3+0x1ee>
   11d1a:	mov.w	r4, r4, lsr #21
   11d1e:	rsbs	r5, r4, r5, lsr #21
   11d22:	it	lt
   11d24:	neglt	r5, r5
   11d26:	ble.n	11d42 <__adddf3+0x52>
   11d28:	add	r4, r5
   11d2a:	eor.w	r2, r0, r2
   11d2e:	eor.w	r3, r1, r3
   11d32:	eor.w	r0, r2, r0
   11d36:	eor.w	r1, r3, r1
   11d3a:	eor.w	r2, r0, r2
   11d3e:	eor.w	r3, r1, r3
   11d42:	cmp	r5, #54	@ 0x36
   11d44:	it	hi
   11d46:	pophi	{r4, r5, pc}
   11d48:	tst.w	r1, #2147483648	@ 0x80000000
   11d4c:	mov.w	r1, r1, lsl #12
   11d50:	mov.w	ip, #1048576	@ 0x100000
   11d54:	orr.w	r1, ip, r1, lsr #12
   11d58:	beq.n	11d60 <__adddf3+0x70>
   11d5a:	negs	r0, r0
   11d5c:	sbc.w	r1, r1, r1, lsl #1
   11d60:	tst.w	r3, #2147483648	@ 0x80000000
   11d64:	mov.w	r3, r3, lsl #12
   11d68:	orr.w	r3, ip, r3, lsr #12
   11d6c:	beq.n	11d74 <__adddf3+0x84>
   11d6e:	negs	r2, r2
   11d70:	sbc.w	r3, r3, r3, lsl #1
   11d74:	teq	r4, r5
   11d78:	beq.w	11eca <__adddf3+0x1da>
   11d7c:	sub.w	r4, r4, #1
   11d80:	rsbs	lr, r5, #32
   11d84:	blt.n	11da2 <__adddf3+0xb2>
   11d86:	lsl.w	ip, r2, lr
   11d8a:	lsr.w	r2, r2, r5
   11d8e:	adds	r0, r0, r2
   11d90:	adc.w	r1, r1, #0
   11d94:	lsl.w	r2, r3, lr
   11d98:	adds	r0, r0, r2
   11d9a:	asr.w	r3, r3, r5
   11d9e:	adcs	r1, r3
   11da0:	b.n	11dc0 <__adddf3+0xd0>
   11da2:	sub.w	r5, r5, #32
   11da6:	add.w	lr, lr, #32
   11daa:	cmp	r2, #1
   11dac:	lsl.w	ip, r3, lr
   11db0:	it	cs
   11db2:	orrcs.w	ip, ip, #2
   11db6:	asr.w	r3, r3, r5
   11dba:	adds	r0, r0, r3
   11dbc:	adcs.w	r1, r1, r3, asr #31
   11dc0:	and.w	r5, r1, #2147483648	@ 0x80000000
   11dc4:	bpl.n	11dd6 <__adddf3+0xe6>
   11dc6:	mov.w	lr, #0
   11dca:	rsbs	ip, ip, #0
   11dce:	sbcs.w	r0, lr, r0
   11dd2:	sbc.w	r1, lr, r1
   11dd6:	cmp.w	r1, #1048576	@ 0x100000
   11dda:	bcc.n	11e14 <__adddf3+0x124>
   11ddc:	cmp.w	r1, #2097152	@ 0x200000
   11de0:	bcc.n	11dfc <__adddf3+0x10c>
   11de2:	lsrs	r1, r1, #1
   11de4:	movs.w	r0, r0, rrx
   11de8:	mov.w	ip, ip, rrx
   11dec:	add.w	r4, r4, #1
   11df0:	mov.w	r2, r4, lsl #21
   11df4:	cmn.w	r2, #4194304	@ 0x400000
   11df8:	bcs.w	11f30 <__adddf3+0x240>
   11dfc:	cmp.w	ip, #2147483648	@ 0x80000000
   11e00:	it	eq
   11e02:	movseq.w	ip, r0, lsr #1
   11e06:	adcs.w	r0, r0, #0
   11e0a:	adc.w	r1, r1, r4, lsl #20
   11e0e:	orr.w	r1, r1, r5
   11e12:	pop	{r4, r5, pc}
   11e14:	movs.w	ip, ip, lsl #1
   11e18:	adcs	r0, r0
   11e1a:	adc.w	r1, r1, r1
   11e1e:	subs	r4, #1
   11e20:	it	cs
   11e22:	cmpcs.w	r1, #1048576	@ 0x100000
   11e26:	bcs.n	11dfc <__adddf3+0x10c>
   11e28:	teq	r1, #0
   11e2c:	itt	eq
   11e2e:	moveq	r1, r0
   11e30:	moveq	r0, #0
   11e32:	clz	r3, r1
   11e36:	it	eq
   11e38:	addeq	r3, #32
   11e3a:	sub.w	r3, r3, #11
   11e3e:	subs.w	r2, r3, #32
   11e42:	bge.n	11e5e <__adddf3+0x16e>
   11e44:	adds	r2, #12
   11e46:	ble.n	11e5a <__adddf3+0x16a>
   11e48:	add.w	ip, r2, #20
   11e4c:	rsb	r2, r2, #12
   11e50:	lsl.w	r0, r1, ip
   11e54:	lsr.w	r1, r1, r2
   11e58:	b.n	11e74 <__adddf3+0x184>
   11e5a:	add.w	r2, r2, #20
   11e5e:	it	le
   11e60:	rsble	ip, r2, #32
   11e64:	lsl.w	r1, r1, r2
   11e68:	lsr.w	ip, r0, ip
   11e6c:	itt	le
   11e6e:	orrle.w	r1, r1, ip
   11e72:	lslle	r0, r2
   11e74:	subs	r4, r4, r3
   11e76:	ittt	ge
   11e78:	addge.w	r1, r1, r4, lsl #20
   11e7c:	orrge	r1, r5
   11e7e:	popge	{r4, r5, pc}
   11e80:	mvn.w	r4, r4
   11e84:	subs	r4, #31
   11e86:	bge.n	11ec2 <__adddf3+0x1d2>
   11e88:	adds	r4, #12
   11e8a:	bgt.n	11eaa <__adddf3+0x1ba>
   11e8c:	add.w	r4, r4, #20
   11e90:	rsb	r2, r4, #32
   11e94:	lsr.w	r0, r0, r4
   11e98:	lsl.w	r3, r1, r2
   11e9c:	orr.w	r0, r0, r3
   11ea0:	lsr.w	r3, r1, r4
   11ea4:	orr.w	r1, r5, r3
   11ea8:	pop	{r4, r5, pc}
   11eaa:	rsb	r4, r4, #12
   11eae:	rsb	r2, r4, #32
   11eb2:	lsr.w	r0, r0, r2
   11eb6:	lsl.w	r3, r1, r4
   11eba:	orr.w	r0, r0, r3
   11ebe:	mov	r1, r5
   11ec0:	pop	{r4, r5, pc}
   11ec2:	lsr.w	r0, r1, r4
   11ec6:	mov	r1, r5
   11ec8:	pop	{r4, r5, pc}
   11eca:	teq	r4, #0
   11ece:	eor.w	r3, r3, #1048576	@ 0x100000
   11ed2:	itte	eq
   11ed4:	eoreq.w	r1, r1, #1048576	@ 0x100000
   11ed8:	addeq	r4, #1
   11eda:	subne	r5, #1
   11edc:	b.n	11d7c <__adddf3+0x8c>
   11ede:	mvns.w	ip, r4, asr #21
   11ee2:	it	ne
   11ee4:	mvnsne.w	ip, r5, asr #21
   11ee8:	beq.n	11f3e <__adddf3+0x24e>
   11eea:	teq	r4, r5
   11eee:	it	eq
   11ef0:	teqeq	r0, r2
   11ef4:	beq.n	11f02 <__adddf3+0x212>
   11ef6:	orrs.w	ip, r4, r0
   11efa:	itt	eq
   11efc:	moveq	r1, r3
   11efe:	moveq	r0, r2
   11f00:	pop	{r4, r5, pc}
   11f02:	teq	r1, r3
   11f06:	ittt	ne
   11f08:	movne	r1, #0
   11f0a:	movne	r0, #0
   11f0c:	popne	{r4, r5, pc}
   11f0e:	movs.w	ip, r4, lsr #21
   11f12:	bne.n	11f20 <__adddf3+0x230>
   11f14:	lsls	r0, r0, #1
   11f16:	adcs	r1, r1
   11f18:	it	cs
   11f1a:	orrcs.w	r1, r1, #2147483648	@ 0x80000000
   11f1e:	pop	{r4, r5, pc}
   11f20:	adds.w	r4, r4, #4194304	@ 0x400000
   11f24:	itt	cc
   11f26:	addcc.w	r1, r1, #1048576	@ 0x100000
   11f2a:	popcc	{r4, r5, pc}
   11f2c:	and.w	r5, r1, #2147483648	@ 0x80000000
   11f30:	orr.w	r1, r5, #2130706432	@ 0x7f000000
   11f34:	orr.w	r1, r1, #15728640	@ 0xf00000
   11f38:	mov.w	r0, #0
   11f3c:	pop	{r4, r5, pc}
   11f3e:	mvns.w	ip, r4, asr #21
   11f42:	itte	ne
   11f44:	movne	r1, r3
   11f46:	movne	r0, r2
   11f48:	mvnseq.w	ip, r5, asr #21
   11f4c:	itt	ne
   11f4e:	movne	r3, r1
   11f50:	movne	r2, r0
   11f52:	orrs.w	r4, r0, r1, lsl #12
   11f56:	itte	eq
   11f58:	orrseq.w	r5, r2, r3, lsl #12
   11f5c:	teqeq	r1, r3
   11f60:	orrne.w	r1, r1, #524288	@ 0x80000
   11f64:	pop	{r4, r5, pc}
   11f66:	nop

00011f68 <__aeabi_ui2d>:
   11f68:	teq	r0, #0
   11f6c:	itt	eq
   11f6e:	moveq	r1, #0
   11f70:	bxeq	lr
   11f72:	push	{r4, r5, lr}
   11f74:	mov.w	r4, #1024	@ 0x400
   11f78:	add.w	r4, r4, #50	@ 0x32
   11f7c:	mov.w	r5, #0
   11f80:	mov.w	r1, #0
   11f84:	b.n	11e28 <__adddf3+0x138>
   11f86:	nop

00011f88 <__aeabi_i2d>:
   11f88:	teq	r0, #0
   11f8c:	itt	eq
   11f8e:	moveq	r1, #0
   11f90:	bxeq	lr
   11f92:	push	{r4, r5, lr}
   11f94:	mov.w	r4, #1024	@ 0x400
   11f98:	add.w	r4, r4, #50	@ 0x32
   11f9c:	ands.w	r5, r0, #2147483648	@ 0x80000000
   11fa0:	it	mi
   11fa2:	negmi	r0, r0
   11fa4:	mov.w	r1, #0
   11fa8:	b.n	11e28 <__adddf3+0x138>
   11faa:	nop

00011fac <__aeabi_f2d>:
   11fac:	lsls	r2, r0, #1
   11fae:	mov.w	r1, r2, asr #3
   11fb2:	mov.w	r1, r1, rrx
   11fb6:	mov.w	r0, r2, lsl #28
   11fba:	itttt	ne
   11fbc:	andsne.w	r3, r2, #4278190080	@ 0xff000000
   11fc0:	teqne	r3, #4278190080	@ 0xff000000
   11fc4:	eorne.w	r1, r1, #939524096	@ 0x38000000
   11fc8:	bxne	lr
   11fca:	bics.w	r2, r2, #4278190080	@ 0xff000000
   11fce:	it	eq
   11fd0:	bxeq	lr
   11fd2:	teq	r3, #4278190080	@ 0xff000000
   11fd6:	itt	eq
   11fd8:	orreq.w	r1, r1, #524288	@ 0x80000
   11fdc:	bxeq	lr
   11fde:	push	{r4, r5, lr}
   11fe0:	mov.w	r4, #896	@ 0x380
   11fe4:	and.w	r5, r1, #2147483648	@ 0x80000000
   11fe8:	bic.w	r1, r1, #2147483648	@ 0x80000000
   11fec:	b.n	11e28 <__adddf3+0x138>
   11fee:	nop

00011ff0 <__aeabi_ul2d>:
   11ff0:	orrs.w	r2, r0, r1
   11ff4:	it	eq
   11ff6:	bxeq	lr
   11ff8:	push	{r4, r5, lr}
   11ffa:	mov.w	r5, #0
   11ffe:	b.n	12016 <__aeabi_l2d+0x16>

00012000 <__aeabi_l2d>:
   12000:	orrs.w	r2, r0, r1
   12004:	it	eq
   12006:	bxeq	lr
   12008:	push	{r4, r5, lr}
   1200a:	ands.w	r5, r1, #2147483648	@ 0x80000000
   1200e:	bpl.n	12016 <__aeabi_l2d+0x16>
   12010:	negs	r0, r0
   12012:	sbc.w	r1, r1, r1, lsl #1
   12016:	mov.w	r4, #1024	@ 0x400
   1201a:	add.w	r4, r4, #50	@ 0x32
   1201e:	movs.w	ip, r1, lsr #22
   12022:	beq.w	11dd6 <__adddf3+0xe6>
   12026:	mov.w	r2, #3
   1202a:	movs.w	ip, ip, lsr #3
   1202e:	it	ne
   12030:	addne	r2, #3
   12032:	movs.w	ip, ip, lsr #3
   12036:	it	ne
   12038:	addne	r2, #3
   1203a:	add.w	r2, r2, ip, lsr #3
   1203e:	rsb	r3, r2, #32
   12042:	lsl.w	ip, r0, r3
   12046:	lsr.w	r0, r0, r2
   1204a:	lsl.w	lr, r1, r3
   1204e:	orr.w	r0, r0, lr
   12052:	lsr.w	r1, r1, r2
   12056:	add	r4, r2
   12058:	b.n	11dd6 <__adddf3+0xe6>
   1205a:	nop

0001205c <__aeabi_d2lz>:
   1205c:	push	{r3, lr}
   1205e:	mov	r2, r0
   12060:	mov	r3, r1
   12062:	vmov	d7, r2, r3
   12066:	vcmpe.f64	d7, #0.0
   1206a:	vmrs	APSR_nzcv, fpscr
   1206e:	bmi.n	12078 <__aeabi_d2lz+0x1c>
   12070:	ldmia.w	sp!, {r3, lr}
   12074:	b.w	12090 <__aeabi_d2ulz>
   12078:	vneg.f64	d7, d7
   1207c:	vmov	r0, r1, d7
   12080:	bl	12090 <__aeabi_d2ulz>
   12084:	negs	r0, r0
   12086:	sbc.w	r1, r1, r1, lsl #1
   1208a:	pop	{r3, pc}
   1208c:	movs	r0, r0
	...

00012090 <__aeabi_d2ulz>:
   12090:	vldr	d6, [pc, #44]	@ 120c0 <__aeabi_d2ulz+0x30>
   12094:	vmov	d7, r0, r1
   12098:	vldr	d5, [pc, #44]	@ 120c8 <__aeabi_d2ulz+0x38>
   1209c:	vmul.f64	d6, d7, d6
   120a0:	vcvt.u32.f64	s12, d6
   120a4:	vcvt.f64.u32	d4, s12
   120a8:	vfms.f64	d7, d4, d5
   120ac:	vcvt.u32.f64	s15, d7
   120b0:	vmov	r1, s12
   120b4:	vmov	r0, s15
   120b8:	bx	lr
   120ba:	nop
   120bc:	nop.w
   120c0:	.word	0x00000000
   120c4:	.word	0x3df00000
   120c8:	.word	0x00000000
   120cc:	.word	0x41f00000

000120d0 <___ZN7TwoWire5beginEv_veneer>:
   120d0:	ldr.w	pc, [pc]	@ 120d4 <___ZN7TwoWire5beginEv_veneer+0x4>
   120d4:	.word	0x6000176d

000120d8 <__usb_init_veneer>:
   120d8:	ldr.w	pc, [pc]	@ 120dc <__usb_init_veneer+0x4>
   120dc:	.word	0x600017b5

000120e0 <___reboot_Teensyduino__veneer>:
   120e0:	ldr.w	pc, [pc]	@ 120e4 <___reboot_Teensyduino__veneer+0x4>
   120e4:	.word	0x60001899

000120e8 <___init_veneer>:
   120e8:	ldr.w	pc, [pc]	@ 120ec <___init_veneer+0x4>
   120ec:	.word	0x6000242d

000120f0 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   120f0:	ldr.w	pc, [pc]	@ 120f4 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   120f4:	.word	0x60001f21

000120f8 <___Z14set_audioClockilm_veneer>:
   120f8:	ldr.w	pc, [pc]	@ 120fc <___Z14set_audioClockilm_veneer+0x4>
   120fc:	.word	0x600024d5

00012100 <___ZN16CrashReportClasscvbEv_veneer>:
   12100:	ldr.w	pc, [pc]	@ 12104 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   12104:	.word	0x600023d1
	...

Disassembly of section .fini:

00012110 <_fini>:
   12110:	push	{r3, r4, r5, r6, r7, lr}
   12112:	nop
