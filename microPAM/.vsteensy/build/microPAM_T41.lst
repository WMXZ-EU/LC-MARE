
.vsteensy/build/microPAM_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600024d0 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000120b0 l    d  .fini	00000000 .fini
000120b4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200026c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60016ea4 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
600018ec l     F .text.code	00000024 flexspi2_command
60001910 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
0000ac68 l     F .text.itcm	000000a0 endpoint0_receive
0000ad08 l     F .text.itcm	0000007c schedule_transfer
0000ad84 l     F .text.itcm	00000034 run_callbacks
0000adb8 l     F .text.itcm	0000001c usb_endpoint_config
0000add4 l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
200155b3 l     O .bss	00000008 endpoint0_buffer
20014b9c l     O .bss	00000004 endpoint0_notify_mask
20007dc0 l     O .bss	00000008 endpoint0_setupdata
20014ba0 l     O .bss	00000004 endpointN_notify_mask
200155bd l     O .bss	00000008 reply_buffer
200155d7 l     O .bss	00000001 sof_usage
200155df l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20014cd0 l     O .bss	00000004 s_hotCount
20014cd4 l     O .bss	00000004 s_hotTemp
20014cd8 l     O .bss	00000004 s_hot_ROOM
20014cdc l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001e54 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
200155b2 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20014c38 l     O .bss	00000000 object.0
600024c0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00000698 l     F .text.itcm	000000f0 _GLOBAL__sub_I_storage
20007dcc l     O .bss	00000004 guard variable for loop::status
20014840 l     O .bss	00000004 loop::t0
200153b4 l     O .bss	00000002 loop::mxb
200153b6 l     O .bss	00000002 loop::status
20014844 l     O .bss	00000004 loop::loopCount
2000109a l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Acq.cpp
000008e4 l     F .text.itcm	000000b8 acq_isr()
20200000 l     O .bss.dma	00001000 i2s_buffer
00000c50 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
20013fdc l     O .bss	00000008 dma
00000000 l    df *ABS*	00000000 Filing.cpp
0000298a l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
000029aa l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
000029b2 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
000029d6 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
000029da l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
20007dd0 l     O .bss	00006000 diskBuffer
2000dfdc l     O .bss	00006000 tempBuffer0
0000334c l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
2000ddd0 l     O .bss	00000200 fileHeader
20015494 l     O .bss	00000050 dirName
200143f4 l     O .bss	00000200 wav_hdr
200154e4 l     O .bss	00000050 fileName
2001483c l     O .bss	00000004 checkEndOfFile(short)::dta
20015538 l     O .bss	00000050 timeStamp()::date_time
20002100 l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 usb_desc.c
2000230f l     O .data	00000012 device_descriptor
6000271e l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000c9e l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000cc4 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000d00 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00001104 l     F .text.itcm	00000064 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
00001694 l     F .text.itcm	0000002e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]
000017fc l     F .text.itcm	0000009c MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]
00001b64 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001ebc l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001ece l     F .text.itcm	00000006 Print::print(char) [clone .isra.0]
00001ed4 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001ef8 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001efc l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001f10 l     F .text.itcm	00000038 menuGetLine()
00001f48 l     F .text.itcm	0000001c menuGetInt32(long*) [clone .isra.0]
00001f64 l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
20015394 l     O .bss	00000020 store
20015588 l     O .bss	00000028 menuGetLine()::buffer
200010c2 l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Queue.cpp
70000000 l     O .bss.extram	00240000 data_buffer
2000dfd4 l     O .bss	00000004 queue_busy
200141e4 l     O .bss	00000004 head
200141e8 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
20013fe4 l     O .bss	00000200 dout
200141f4 l     O .bss	00000200 outData
200145f4 l     O .bss	00000200 tempData
20014848 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
000036c0 l     F .text.itcm	00000024 Print::print(char const*) [clone .isra.0]
2000108e l     O .data	00000004 regs
20001092 l     O .data	00000008 chmap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 RTC.cpp
20001101 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 MTP.cpp
00003c96 l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
00003cac l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
0000471e l     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
2001484c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
20014850 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20000b5c l     O .data	00000014 propertyList
20000b70 l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000a30 l     O .data	0000012c lookupTable
20000b98 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
0000656c l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00006f2c l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00007ff4 l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
000090b4 l     F .text.itcm	0000002c sdIrs()
000090e0 l     F .text.itcm	00000020 gpioMux(unsigned char)
00009100 l     F .text.itcm	00000018 isBusyCommandComplete()
00009118 l     F .text.itcm	00000010 isBusyCommandInhibit()
00009128 l     F .text.itcm	00000014 isBusyDat()
0000913c l     F .text.itcm	0000000c isBusyDMA()
00009148 l     F .text.itcm	00000014 isBusyFifoRead()
0000915c l     F .text.itcm	00000014 isBusyFifoWrite()
00009170 l     F .text.itcm	00000018 isBusyTransferComplete()
00009188 l     F .text.itcm	000000a4 setSdclk(unsigned long)
00009290 l     F .text.itcm	00000024 waitTimeout(bool (*)())
000092b4 l     F .text.itcm	0000003c yieldTimeout(bool (*)())
00009300 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
00009330 l     F .text.itcm	000000d4 initSDHC()
00009420 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00009488 l     F .text.itcm	00000020 statusCMD13()
000094a8 l     F .text.itcm	00000010 isBusyCMD13()
000094bc l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00009514 l     F .text.itcm	00000030 waitDmaStatus()
00009544 l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
0000983c l     F .text.itcm	0000005c waitTransferComplete()
00009aa4 l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
20015470 l     O .bss	00000001 m_initDone
2000dfd0 l     O .bss	00000004 m_sdClkKhz
20015471 l     O .bss	00000001 m_version2
2000dfd8 l     O .bss	00000004 m_errorLine
20015472 l     O .bss	00000001 m_highCapacity
20015473 l     O .bss	00000001 m_transferActive
20015474 l     O .bss	00000010 m_cid
20015484 l     O .bss	00000010 m_csd
200141ec l     O .bss	00000004 m_ocr
200141f0 l     O .bss	00000004 m_rca
200147f4 l     O .bss	00000004 m_busyFcn
20015534 l     O .bss	00000001 m_dmaBusy
200147f8 l     O .bss	00000004 m_irqstat
2000230e l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00009fe4 l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a34c l     F .text.itcm	00000060 rx_queue_transfer
20004b40 l     O .bss	00001000 rx_buffer
0000a3ac l     F .text.itcm	000000ac rx_event
0000a458 l     F .text.itcm	0000008c usb_serial_flush_callback
20005dc0 l     O .bss	00002000 txbuffer
20014cb8 l     O .bss	00000004 rx_available
200153c4 l     O .bss	00000010 rx_count
200155c5 l     O .bss	00000001 rx_head
200153d4 l     O .bss	00000010 rx_index
200155c7 l     O .bss	00000009 rx_list
200153e4 l     O .bss	00000002 rx_packet_size
200155d5 l     O .bss	00000001 rx_tail
20005b40 l     O .bss	00000100 rx_transfer
200155d8 l     O .bss	00000001 transmit_previous_timeout
2001546a l     O .bss	00000002 tx_available
200155d9 l     O .bss	00000001 tx_head
200155db l     O .bss	00000001 tx_noautoflush
2001546c l     O .bss	00000002 tx_packet_size
20005cc0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000b9c4 l     F .text.itcm	00000058 flash_wait
200155bc l     O .bss	00000001 initialized
200153e8 l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000c05c l     F .text.itcm	00000010 txEvent_event
0000c06c l     F .text.itcm	0000003c rx_event
0000c0a8 l     F .text.itcm	00000060 rx_queue_transfer
200155c6 l     O .bss	00000001 rx_head
200155d0 l     O .bss	00000005 rx_list
20014cbc l     O .bss	00000014 rx_list_transfer_len
200153e6 l     O .bss	00000002 rx_packet_size
200155d6 l     O .bss	00000001 rx_tail
20005c40 l     O .bss	00000080 rx_transfer
200155da l     O .bss	00000001 tx_head
2001546e l     O .bss	00000002 tx_packet_size
20005d40 l     O .bss	00000080 tx_transfer
20201000 l     O .bss.dma	00000800 rx_buffer
20201800 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20015537 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000c66e l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
0000cc38 l     F .text.itcm	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
0000cdda l     F .text.itcm	00000034 sulp
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000d980 l     F .text.itcm	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_float.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_i.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_float.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000e734 l     F .text.itcm	00000048 std
0000e77c l     F .text.itcm	00000018 stdio_exit_handler
0000e794 l     F .text.itcm	00000040 cleanup_stdio
0000e7d4 l     F .text.itcm	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
0000edbc l     F .text.itcm	00000110 quorem
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
0000fa40 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
0000ff6c l     F .text.itcm	00000024 L_shift
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-msizer.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_i.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
000116c4 l     F .text.itcm	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-fprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf.o
000117d0 l     F .text.itcm	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00012078 l     F .text.itcm	00000008 ___init_veneer
00012080 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
00012088 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
00012090 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
00012098 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
000120a0 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
000120a8 l     F .text.itcm	00000008 __usb_init_veneer
60002428 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
60002430 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002438 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
60002440 l     F .text.code	00000008 __memset_veneer
60002448 l     F .text.code	00000008 __set_arm_clock_veneer
60002450 l     F .text.code	00000008 __pwm_init_veneer
60002458 l     F .text.code	00000008 __sm_set_pool_veneer
60002460 l     F .text.code	00000008 __delay_veneer
60002468 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002470 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002478 l     F .text.code	00000008 __main_veneer
60002480 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
60002488 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60002490 l     F .text.code	00000008 ____libc_init_array_veneer
60002498 l     F .text.code	00000008 ___ZN7TwoWire8setClockEm_veneer
600024a0 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
600024a8 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
600024b0 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
600024b8 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
00010a68 g     F .text.itcm	00000010 _malloc_usable_size_r
00006f5c  w    F .text.itcm	00000026 FatPartition::cacheSync()
600024d0 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
0000dab2 g     F .text.itcm	000000a4 __cvt
000056b4 g     F .text.itcm	000000a8 toUpcase(unsigned short)
000010be g     F .text.itcm	0000002c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
0001117c g     F .text.itcm	000000b4 _scanf_chars
00002864 g     F .text.itcm	00000060 pushData(unsigned long*)
0000a700 g     F .text.itcm	00000014 usb_serial_available
00010a26 g     F .text.itcm	00000042 __any_on
00011c6c g     F .text.itcm	00000020 _isatty_r
0000ecdc g     F .text.itcm	00000010 strcpy
00002f8c g     F .text.itcm	00000094 do_hibernate()
00007b38 g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
60001940 g     F .text.code	00000002 startup_default_late_hook
0000ebf8 g     F .text.itcm	00000024 _lseek_r
000095dc g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c3dc  w    F .text.itcm	00000074 yield
00008a20  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20014c58 g     O .bss	00000060 proc_stat
20015390 g     O .bss	00000004 usb_timer1_callback
00003e2c g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
00003e84 g     F .text.itcm	00000014 MTPD::write32(unsigned long)
00007994 g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000c74a g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
200151b8 g     O .bss	000001b8 storage
60002630 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200153c2 g     O .bss	00000002 proc
60001a58 g     F .text.code	00000274 configure_external_ram
00003c24 g     F .text.itcm	00000002 rtcXferTime()
0000898a  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
20001e80 g     O .data	00000140 Wire1
00009074  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00011fa8 g     F .text.itcm	0000005a .hidden __floatdidf
00008170 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
20014c50 g     O .bss	00000004 procCount
00007ea0 g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
200147fc g     O .bss	00000004 FsDateTime::callback
6000165c g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
00008294 g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
00008e5c g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000c6e4 g     F .text.itcm	0000001a Print::println()
000053c8 g     F .text.itcm	00000098 TwoWire::isr()
200004b4 g     O .data	00000070 vtable for DedicatedSpiCard
20014c54 g     O .bss	00000004 procMiss
0000e9f2 g     F .text.itcm	00000024 __sseek
0000e828 g     F .text.itcm	00000030 __sinit
00005be0 g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
00010a94 g     F .text.itcm	00000094 fcvtbuf
00011a58 g     F .text.itcm	0000007a __swbuf_r
00003d4a g     F .text.itcm	0000001e MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000cd70 g     F .text.itcm	0000000c __malloc_unlock
000039da g     F .text.itcm	0000004c i2c_class::read(unsigned char, unsigned char)
20014834 g     O .bss	00000004 FsVolume::m_cwv
00003994 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
00002834 g     F .text.itcm	00000008 getStore()
00007544 g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
20007dc8 g     O .bss	00000004 SerNum
20015536 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
0000897e  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600023d0 g     F .text.code	0000004c analog_init
0000d974 g     F .text.itcm	0000000c _strtod_r
000016c2 g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
0000ea1e g     F .text.itcm	0000004a _vdprintf_r
00007626 g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000fae4 g     F .text.itcm	0000002a __hexdig_fun
00008cae g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
0000ba1c g     F .text.itcm	00000044 eeprom_initialize
0000326c g     F .text.itcm	000000e0 saveData(short)
20015466 g     O .bss	00000002 shift
20001d2c g     O .data	00000004 F_CPU_ACTUAL
0000eafc g     F .text.itcm	00000034 memmove
000016f0 g     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
20014c2c g     O .bss	00000004 max_stat
0000e894 g     F .text.itcm	00000068 snprintf
00009f64 g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
00010114 g     F .text.itcm	00000080 _Balloc
00000c8a  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
000120bc g       .ARM.exidx	00000000 __exidx_end
00007db2 g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
20015535 g     O .bss	00000001 EventResponder::runningFromYield
0000a15a g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
00008874 g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000be50 g     F .text.itcm	00000060 tempmonGetTemp
0000bd90 g     F .text.itcm	0000001e smalloc_verify_pool
0000ec84 g     F .text.itcm	0000000c __errno
00002144 g     F .text.itcm	000000ac saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
2001480c g     O .bss	00000004 EventResponder::firstInterrupt
0000b45c g     F .text.itcm	00000028 usb_transfer_status
00003fda g     F .text.itcm	00000050 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000bde2 g     F .text.itcm	0000006a sm_set_pool
00002d64 g     F .text.itcm	00000014 newFolder(int)
20014814 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
00003c26 g     F .text.itcm	00000004 rtcGetTimestamp()
20014994 g     O .bss	00000004 __stdio_exit_handler
000004e0  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
00006508 g     F .text.itcm	00000018 ExFatPartition::rootLength()
00012004 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
0000c5e0  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00011c48 g     F .text.itcm	00000024 _fstat_r
20000614 g     O .data	00000370 digital_pin_to_info_PGM
20014ba4 g     O .bss	00000004 errno
0000a164 g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
0000628c g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
60002568  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
00011230 g     F .text.itcm	000001e8 _scanf_i
0000e9b6 g     F .text.itcm	00000004 __seofread
000120b8 g       .text.itcm	00000000 _etext
000085b0 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200026c0 g       .bss	00000000 _sbss
00009238 g     F .text.itcm	0000000c SdioCard::errorData() const
00000d86 g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
00003c40 g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
00003dda g     F .text.itcm	00000016 MTPD::write16(unsigned short)
0000195c g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
00009898 g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
00006428 g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
60002728 g       *ABS*	00000000 _stextload
0000027c g     F .text.itcm	00000224 loop
0000bf54 g     F .text.itcm	00000072 flexpwm_init
0000bae0 g     F .text.itcm	000000dc eepromemu_flash_write
60001942 g     F .text.code	00000004 startup_debug_reset
0000b370 g     F .text.itcm	00000040 usb_config_rx
00004214 g     F .text.itcm	0000010c MTPD::GetStorageInfo(unsigned long)
000059b0 g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009d9c g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
000051d0 g     F .text.itcm	000000e4 TwoWire::endTransmission(unsigned char)
00003a26 g     F .text.itcm	0000003c i2c_class::write(unsigned char, unsigned char, unsigned char)
20014808 g     O .bss	00000004 EventResponder::lastInterrupt
00008714 g     F .text.itcm	0000002a FsBaseFile::close()
0000ea68 g     F .text.itcm	00000014 vdiprintf
00004f9a g     F .text.itcm	00000048 SPIClass::end()
0000a218 g     F .text.itcm	00000134 memcpy
0000ffb8 g     F .text.itcm	00000136 __hexnan
00001720 g     F .text.itcm	000000dc MTPStorage_SD::removeFile(unsigned long, char*)
00008f24 g     F .text.itcm	00000032 SharedSpiCard::writeStop()
000054fc g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
0000156e g     F .text.itcm	00000126 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00002134 g     F .text.itcm	00000008 storeConfig(unsigned short*, int)
200026c0 g     O .data	00000000 .hidden __TMC_END__
00002a44 g     F .text.itcm	000000e4 wavHeaderInit(long, long, long, int)
0000636c g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
00001428 g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00007206 g     F .text.itcm	00000026 FatFile::peek()
000021f0 g     F .text.itcm	00000074 menu1(short)
20014c34 g     O .bss	00000004 nbuf
00010bdc g     F .text.itcm	000001fc _svfprintf_r
00011f30 g     F .text.itcm	00000022 .hidden __floatsidf
20015374 g     O .bss	00000004 systick_millis_count
00006a0c g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000c240 g     F .text.itcm	00000030 usb_mtp_available
000004a0 g     F .text.itcm	00000040 setup1()
0000519c g     F .text.itcm	00000034 TwoWire::wait_idle()
0000ea7c g     F .text.itcm	00000060 _vasniprintf_r
0000495c g     F .text.itcm	000005e6 MTPD::loop()
0000c91c g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
200155dd g     O .bss	00000001 usb_configuration
00008974  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000bdae g     F .text.itcm	00000034 sm_align_pool
00009fc8 g     F .text.itcm	0000001c SdioCard::syncDevice()
000099b0 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
0000722c g     F .text.itcm	0000003e FatFile::readDirCache(bool)
00010980 g     F .text.itcm	00000060 __ratio
00008a2e g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
60002630  w    O .text.progmem	00000018 usb_string_manufacturer_name
60002608 g     O .text.progmem	00000008 usb_string_mtp
0000cc18 g     F .text.itcm	00000010 malloc
00000248 g     F .text.itcm	00000010 reboot()
00003994 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
600025b8  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
2000054c  w    O .data	00000024 vtable for FsFile
0000b942  w    F .text.itcm	0000000a _fstat
20014998 g     O .bss	00000200 acqBuffer
00004fee  w    F .text.itcm	0000001e TwoWire::read()
0001165c g     F .text.itcm	0000003c __assert_func
00004928 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00002e78 g     F .text.itcm	00000100 getAlarmTime(unsigned long)
20000328 g     O .data	000000c8 __mprec_tens
600017b4 g     F .text.code	000000e4 usb_init
0000873e g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
200151b0 g     O .bss	00000004 sessionID_
0000897a  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000c74  w    F .text.itcm	00000016 MTPStorage_SD::addFilesystem(SdFs&, char const*)
0000b980 g     F .text.itcm	00000044 rtc_set
00010e52 g     F .text.itcm	0000003a __ssrefill_r
20015378 g     O .bss	00000004 systick_safe_read
00005088 g     F .text.itcm	00000114 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00006aa0 g     F .text.itcm	000000ca ExFatFile::truncate()
20002108 g     O .data	00000000 .hidden __dso_handle
0000bbbc g     F .text.itcm	000000b4 eepromemu_flash_erase_sector
00011f10 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000ebd0 g     F .text.itcm	00000008 _localeconv_r
200022e0 g     O .data	00000004 sd_str
0000a106 g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00010394 g     F .text.itcm	0000002c __i2b
20000000 g       .data	00000000 _sdata
0000c108 g     F .text.itcm	000000a4 usb_mtp_configure
200022f6 g     O .data	00000002 t_on
600026b5 g     O .text.progmem	00000069 usb_config_descriptor_480
0000c94c g     F .text.itcm	000002c8 .hidden __udivmoddi4
0000413c g     F .text.itcm	000000d8 MTPD::getObjectPropValue(unsigned long, unsigned long)
00011c8c g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000a154 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00006f82 g     F .text.itcm	00000036 FatFile::addCluster()
0000ec40 g     F .text.itcm	00000020 _sbrk_r
200153b8 g     O .bss	00000002 d_rep
00009404 g     F .text.itcm	0000001c SdioCard::type() const
00003d7c g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
6000193c g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
0000a774 g     F .text.itcm	0000001e usb_serial_getchar
00000d6e  w    F .text.itcm	00000018 FsVolume::clusterCount() const
20015380 g     O .bss	00000008 usb_cdc_line_coding
0000beb0 g     F .text.itcm	00000040 digitalWrite
00007b90  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
20014810 g     O .bss	00000004 EventResponder::lastYield
0000598a g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000ec1c g     F .text.itcm	00000024 _read_r
00000cda  w    F .text.itcm	00000024 Print::write(char const*)
2001537c g     O .bss	00000004 termon
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
00008a18  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
20014ba8 g     O .bss	00000010 extmem_smalloc_pool
00008da4 g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000bef0 g     F .text.itcm	00000064 pinMode
000014a2 g     F .text.itcm	00000028 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000f04  w    F .text.itcm	0000001c FsFile::FsFile()
0000c7e0 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
00011f54 g     F .text.itcm	00000042 .hidden __extendsfdf2
00010e8c g     F .text.itcm	000002f0 __ssvfscanf_r
0000c5a4  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000ebc  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00011c98 g     F .text.itcm	00000276 .hidden __adddf3
60001690 g     F .text.code	00000050 TwoWire::setSDA(unsigned char)
20001fc0 g     O .data	00000140 Wire2
0000410c g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
00003d68 g     F .text.itcm	00000012 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60017000 g     O .text.csf	00000c00 hab_csf
00003df0 g     F .text.itcm	0000003a MTPD::writestring(char const*)
00007df8 g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00010838 g     F .text.itcm	00000094 __b2d
0000374c g     F .text.itcm	000001a4 adc_init()
000120b4 g       .ARM.exidx	00000000 __exidx_start
70240000 g       .bss.extram	00000000 _extram_end
000008d8  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000c580  w    F .text.itcm	00000008 Print::print(unsigned char)
0000b94c  w    F .text.itcm	00000004 _isatty
200022ea g     O .data	00000002 d_0
20014804 g     O .bss	00000004 EventResponder::firstYield
00000ef6 g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
00005590 g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001fe  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000cd7c g     F .text.itcm	0000005e _realloc_r
0000ec90 g     F .text.itcm	00000048 __libc_init_array
0000b4cc g     F .text.itcm	00000248 dtostrf
00004fe2  w    F .text.itcm	0000000c TwoWire::available()
000060d6 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00009244 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
00006856 g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
00001562 g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
00001b20 g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
000039b8 g     F .text.itcm	00000022 i2c_class::exist(unsigned char)
20000300 g     O .data	00000028 __mprec_bigtens
00010264 g     F .text.itcm	00000094 __s2b
00008d26  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000b956  w    F .text.itcm	00000004 abort
000052b4 g     F .text.itcm	00000114 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000c5c8  w    F .text.itcm	00000004 usb_serial_class::clear()
00011f10 g     F .text.itcm	0000001e .hidden __floatunsidf
0000b90c  w    F .text.itcm	0000002c _sbrk
600147e4 g       *ABS*	00000000 _sdataload
000106a0 g     F .text.itcm	00000038 __mcmp
000018a6 g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
20002104 g     O .data	00000004 __brkval
200155dc g     O .bss	00000001 usb_cdc_line_rtsdtr
6000241c g     F .text.code	00000000 _init
0000a4e4 g     F .text.itcm	00000002 usb_serial_reset
00007028 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
0000bc70 g     F .text.itcm	00000104 eeprom_write_byte
00000fdc  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
00012038 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
6000264c g     O .text.progmem	00000069 usb_config_descriptor_12
20000570 g     O .data	00000024 vtable for TwoWire
0000ce10 g     F .text.itcm	00000b64 _strtod_l
0000ff90 g     F .text.itcm	00000028 __match
20015620 g       .bss	00000000 _ebss
00009658 g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00003e98 g     F .text.itcm	00000118 MTPD::WriteDescriptor()
200022d8 g     O .data	00000004 propertyListNum
600016e0 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000102f8 g     F .text.itcm	00000040 __hi0bits
000058fe g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001ea8 g     F .text.code	00000074 CrashReportClass::clear()
0000546c g     F .text.itcm	0000000c lpi2c3_isr()
00006906 g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20202080 g       .bss.dma	00000000 _heap_start
00003fb0 g     F .text.itcm	0000002a MTPD::WriteStorageIDs()
200155b0 g     O .bss	00000001 __lock___malloc_recursive_mutex
200022f2 g     O .data	00000002 h_4
00001c9c g     F .text.itcm	000001d8 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00006520 g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
60002518  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
000008d8  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
2001485c g     O .bss	00000138 __sf
20001d24 g     O .data	00000004 CrashReport
20014ce4 g     O .bss	000004cc sdx
00008c24 g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000554 g     F .text.itcm	00000144 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
200026e0 g     O .bss	00000020 endpoint0_transfer_data
00006d92 g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
00005666 g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000c90c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000bffc g     F .text.itcm	00000060 pwm_init
000117ac g     F .text.itcm	00000024 fprintf
00011c98 g     F .text.itcm	00000276 .hidden __aeabi_dadd
20014bb8 g     O .bss	00000050 file
00004690 g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
20002321 g     O .data	00000001 usb_mtp_status
60017c00 g       .text.csf	00000000 __text_csf_end
60001ccc g     F .text.code	0000005c usb_pll_start
00010514 g     F .text.itcm	000000b4 __pow5mult
0000730a g     F .text.itcm	0000004c FatFile::rmdir()
200004a8 g     O .data	0000000c vtable for CrashReportClass
00011f98 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00005478 g     F .text.itcm	0000000c lpi2c4_isr()
00007d30 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
20014c08 g     O .bss	00000004 haveStore
000090b2  w    F .text.itcm	00000002 SdioCard::end()
0000e894 g     F .text.itcm	00000068 sniprintf
200026c0 g     O .bss	00000020 endpoint0_transfer_ack
20015388 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b41c g     F .text.itcm	00000024 usb_transmit
00000d3c  w    F .text.itcm	00000014 Print::println(char const*)
0000c48c g     F .text.itcm	00000020 systick_isr
0000ecda g     F .text.itcm	00000002 __retarget_lock_release_recursive
00003c2a g     F .text.itcm	00000016 rtc_get_datetime(datetime_t*)
00003da4 g     F .text.itcm	00000020 MTPD::write(char const*, int)
20001d30 g     O .data	00000010 Serial
20014c0c g     O .bss	00000020 logBuffer
00010b28 g     F .text.itcm	000000b4 __ssputs_r
0000213c g     F .text.itcm	00000008 loadConfig(unsigned short*, int)
0000c5e8  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00008814 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
6000193c  w    F .text.code	00000002 startup_early_hook
000065c0 g     F .text.itcm	00000094 ExFatFile::addCluster()
00008b88 g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
0000a6bc g     F .text.itcm	00000044 usb_serial_peekchar
000117fe g     F .text.itcm	00000024 __sfputs_r
0000e810 g     F .text.itcm	0000000c __sfp_lock_acquire
0000ecf0 g     F .text.itcm	00000000 memchr
00007c60 g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
0000dbd8  w    F .text.itcm	00000434 _printf_float
0000aa18 g     F .text.itcm	00000250 set_arm_clock
20015370 g     O .bss	00000004 systick_cycle_count
200022f8 g     O .data	00000016 usb_string_serial_number_default
0000f9a8 g     F .text.itcm	00000098 _free_r
00008e92 g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
00008f56 g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
0000993c g     F .text.itcm	00000074 SdioCard::readStop()
00000da2  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
00008982  w    F .text.itcm	00000004 SharedSpiCard::type() const
00001a42 g     F .text.itcm	000000de MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000c5d8  w    F .text.itcm	00000004 usb_serial_class::flush()
00010dd8 g     F .text.itcm	0000007a _sungetc_r
00011c94 g     F .text.itcm	0000027a .hidden __aeabi_dsub
0000c5d0  w    F .text.itcm	00000004 usb_serial_class::read()
0000865c g     F .text.itcm	000000b8 FatFile::remove()
00011f98 g     F .text.itcm	0000006a .hidden __floatundidf
00000f04  w    F .text.itcm	0000001c FsFile::FsFile()
0000b950  w    F .text.itcm	00000006 _lseek
0000392c g     F .text.itcm	00000068 adcStatus()
000105c8 g     F .text.itcm	000000d8 __lshift
00003020 g     F .text.itcm	0000024c storeData(short)
00007760 g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000b3f0 g     F .text.itcm	0000002c usb_prepare_transfer
00008986  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b78c g     F .text.itcm	00000180 unused_interrupt_vector
60001d28 g     F .text.code	0000012c tempmon_init
2001538c g     O .bss	00000004 usb_timer0_callback
000080a4 g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000ea7c g     F .text.itcm	00000060 _vasnprintf_r
00002f78 g     F .text.itcm	00000014 powerDown()
000089b0 g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00006010 g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000ba60 g     F .text.itcm	00000064 eeprom_read_byte
0000eb76 g     F .text.itcm	00000036 strlcpy
000011e8 g     F .text.itcm	000000b0 MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)
0000ebac g     F .text.itcm	00000024 strncmp
00008012 g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
0000694e g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000a714 g     F .text.itcm	00000060 usb_serial_flush_input
200022d4 g     O .data	00000004 fsamp
000063c6 g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
00001330 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f78  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
000103c0 g     F .text.itcm	00000154 __multiply
0000283c g     F .text.itcm	0000001c getDataCount()
0000a920 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000ea1e g     F .text.itcm	0000004a _vdiprintf_r
00000b00 g     F .text.itcm	00000084 i2s_setup()
00003744 g     F .text.itcm	00000008 adcStart()
000108cc g     F .text.itcm	000000b4 __d2b
00008fa4 g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
000090aa  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001898 g     F .text.code	00000054 _reboot_Teensyduino_
000092f0  w    F .text.itcm	0000000e SdioCard::~SdioCard()
6000193e g     F .text.code	00000002 startup_default_middle_hook
00000c8e  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00000b84 g     F .text.itcm	000000a4 dma_setup()
00008aac g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00008ce8 g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
00009a38 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
000117a8 g     F .text.itcm	00000004 _strtoul_r
000036e4 g     F .text.itcm	00000024 usbPowerInit()
0000c270 g     F .text.itcm	000000c4 usb_mtp_send
0000aec8 g     F .text.itcm	000004a8 usb_isr
0000da88 g     F .text.itcm	0000001c __cxa_atexit
00005a30 g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000ebd8 g     F .text.itcm	00000020 _close_r
0000903a  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00011f30 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00008d62 g     F .text.itcm	0000002a SharedSpiCard::readStop()
00005618 g     F .text.itcm	0000004e FsCache::sync()
0000eadc g     F .text.itcm	00000020 memcmp
20000524  w    O .data	00000028 vtable for usb_serial_class
0000a186 g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
00004462 g     F .text.itcm	000000e6 MTPD::GetObject(unsigned long)
0000a1ce g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20014ce0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000e93c g     F .text.itcm	00000058 sscanf
00011ad4 g     F .text.itcm	000000b0 __swsetup_r
0000cc14  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
000066e0 g     F .text.itcm	00000056 ExFatFile::rmdir()
00004320 g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000d50  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00008d2e g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
000109e0 g     F .text.itcm	00000046 __copybits
000046c4 g     F .text.itcm	00000016 MTPD::read16()
00000c9a g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
0000e994 g     F .text.itcm	00000022 __sread
00002b3c g     F .text.itcm	00000060 wavHeaderWrite(char*)
0000a984 g     F .text.itcm	00000094 usb_serial_flush_output
0000bac4 g     F .text.itcm	0000001c eeprom_read_block
0000cd64 g     F .text.itcm	0000000c __malloc_lock
000057ec g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20002400 g     O .data	000002c0 _VectorsRam
0000a18e g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00008bf8 g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
00011524 g     F .text.itcm	00000050 _fflush_r
00011698 g     F .text.itcm	0000002c _calloc_r
0000462c g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
00002b9c g     F .text.itcm	000000e0 makeHeader(long*)
00000f38  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
0000832c g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
200022f4 g     O .data	00000002 t_acq
200155e0 g     O .bss	00000001 yield_active_check_flags
00006814 g     F .text.itcm	00000042 ExFatFile::sync()
0000ecd8 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
200155de g     O .bss	00000001 usb_high_speed
00007804 g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
00009734 g     F .text.itcm	00000040 SdioCard::isBusy()
00003dc4 g     F .text.itcm	00000016 MTPD::write8(unsigned char)
0000a1d4 g     F .text.itcm	00000000 memset
0000c5ee g     F .text.itcm	00000010 main
0000daa4 g     F .text.itcm	00000006 fcvt
00006110 g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20202000 g     O .bss.dma	00000069 usb_descriptor_buffer
00000218 g     F .text.itcm	00000030 resetUSB()
00008fd4 g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00006b6c g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
20000448 g     O .data	00000060 vtable for MTPStorage_SD
00004754 g     F .text.itcm	000000e0 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000eb30 g     F .text.itcm	00000046 strlcat
000075f0 g     F .text.itcm	00000036 FatFile::dirEntry(DirFat_t*)
0000ea16 g     F .text.itcm	00000008 __sclose
0000c334 g     F .text.itcm	00000054 usb_init_serialnumber
0000da84 g     F .text.itcm	00000004 _strtol_r
600024d0 g       .text.code	00000000 __init_array_end
0000eed0 g     F .text.itcm	00000ad8 _dtoa_r
0000cc78 g     F .text.itcm	000000ec _malloc_r
0000898e g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
00010a78 g     F .text.itcm	0000001a __ascii_wctomb
00011fa8 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20014838 g     O .bss	00000004 FatVolume::m_cwv
0000c578  w    F .text.itcm	00000008 Print::print(char const*)
000115e6 g     F .text.itcm	00000074 __submore
20000604  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c62c g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
00004f44 g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
66af402b g       *ABS*	00000000 __rtc_localtime
0000b714 g     F .text.itcm	0000004c micros
00003e40 g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
00006738 g     F .text.itcm	000000dc ExFatFile::syncDir()
00005484 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
60002648 g     O .text.progmem	00000004 string0
0000a794 g     F .text.itcm	0000018c usb_serial_write
60001940  w    F .text.code	00000002 startup_late_hook
0000ae68 g     F .text.itcm	00000034 usb_start_sof_interrupts
00000e02  w    F .text.itcm	00000050 FsBaseFile::available() const
0000901e g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c5d4  w    F .text.itcm	00000004 usb_serial_class::available()
0000e93c g     F .text.itcm	00000058 siscanf
000046ee g     F .text.itcm	00000030 MTPD::readstring(char*)
000074b4 g     F .text.itcm	00000080 FatFile::sync()
20000000 g     O .data	00000300 endpoint_queue_head
0000659a  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60002610  w    O .text.progmem	00000020 usb_string_product_name
00003d24 g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000b760 g     F .text.itcm	0000002a delay
00012038 g     F .text.itcm	00000040 .hidden __fixunsdfdi
200153bc g     O .bss	00000002 dma_channel_allocated_mask
00000e9a g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
0000596a g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000ed4  w    F .text.itcm	00000022 FsBaseFile::seekSet(unsigned long long)
000120b0 g     F .fini	00000000 _fini
00003728 g     F .text.itcm	00000014 acqPower(int)
000029ec  w    F .text.itcm	00000014 FsBaseFile::sync()
00005024 g     F .text.itcm	00000026 TwoWire::write(unsigned char)
00008b58 g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
000060e4 g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000e8fc g     F .text.itcm	00000040 sprintf
0000c71c g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000db56 g     F .text.itcm	0000007c __exponent
0000c6d2 g     F .text.itcm	00000012 Print::print(long)
00007534 g     F .text.itcm	00000010 FatFile::close()
0000be4c g     F .text.itcm	00000004 Panic_Temp_isr
00012004 g     F .text.itcm	00000030 .hidden __fixdfdi
000009a0 g     F .text.itcm	00000160 setAudioFrequency(int)
00002858 g     F .text.itcm	0000000c queue_isBusy()
200022dc g     O .data	00000004 sd
00007666 g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
0000928c  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000ec60 g     F .text.itcm	00000024 _write_r
00009774 g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
200022e8 g     O .data	00000002 again
00000258 g     F .text.itcm	00000024 lowPowerInit()
0000337c g     F .text.itcm	000000b4 filing_init()
0000c1ac g     F .text.itcm	00000094 usb_mtp_recv
0000edb0 g     F .text.itcm	0000000c nanf
0000e00c g     F .text.itcm	000000da _printf_common
200151b4 g     O .bss	00000004 setup_ready
200022d0 g     O .data	00000004 _impure_ptr
00005bb6 g     F .text.itcm	0000002a ExFatFile::peek()
00011418 g     F .text.itcm	0000010c __sflush_r
20000424  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000c388  w    F .text.itcm	00000054 EventResponder::runFromYield()
20001d40 g     O .data	00000140 Wire
00008948 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000e858 g     F .text.itcm	0000003c _fwalk_sglue
0000922c g     F .text.itcm	0000000c SdioCard::errorCode() const
000075e2 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001f4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600024c0 g       .text.code	00000000 __preinit_array_end
60001f1c g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
00002918 g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
00010bdc g     F .text.itcm	000001fc _svfiprintf_r
00002de4 g     F .text.itcm	00000094 newFileName(char*)
00000f20  w    F .text.itcm	00000018 FsFile::~FsFile()
00006258 g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00008b0a g     F .text.itcm	00000026 SharedSpiCard::spiStart()
00001898 g     F .text.itcm	0000000e MTPStorage_SD::DeleteObject(unsigned long)
000100ee g     F .text.itcm	00000024 __ascii_mbtowc
200153be g     O .bss	00000002 h_1
000107ec g     F .text.itcm	0000004c __ulp
0000ae9c g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000c588  w    F .text.itcm	00000008 Print::print(unsigned long, int)
0000500c  w    F .text.itcm	00000016 TwoWire::peek()
00005022  w    F .text.itcm	00000002 TwoWire::flush()
00000788 g     F .text.itcm	00000150 setup
200009b8 g     O .data	00000078 usb_descriptor_list
000094b8 g     F .text.itcm	00000004 SdioCard::status()
00001090 g     F .text.itcm	0000002e MTPStorage_SD::ResetIndex()
00003d8c g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00007646 g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000e88  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
0000373c g     F .text.itcm	00000008 adcReset()
00000e66  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000eda0 g     F .text.itcm	00000010 nan
00007080 g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00004548 g     F .text.itcm	000000e4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
00010e8c g     F .text.itcm	000002f0 __ssvfiscanf_r
00007046 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20014800 g     O .bss	00000004 ExFatVolume::m_cwv
00011b84 g     F .text.itcm	0000004c __swhatbuf_r
20068000 g       .text.csf	00000000 _estack
00008970 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c548 g     F .text.itcm	00000030 DMAChannel::release()
00002264 g     F .text.itcm	00000144 loadParameters()
0000a938 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00003708 g     F .text.itcm	00000020 usbPowerSetup()
60001714 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
20002278 g     O .data	0000000c __sglue
0000a4e8 g     F .text.itcm	00000100 usb_serial_configure
0000504a g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
0000c700  w    F .text.itcm	0000001c _write
200026c0 g       .data	00000000 _edata
00006332 g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
200155bb g     O .bss	00000001 external_psram_size
0000402c g     F .text.itcm	000000e0 MTPD::GetObjectInfo(unsigned long)
0000928c  w    F .text.itcm	00000002 SdioCard::~SdioCard()
0000575c g     F .text.itcm	00000048 FsName::get16()
00008a18  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00008df8 g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
0000899e g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
0000589c g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
00006fb8 g     F .text.itcm	00000070 FatFile::addDirCluster()
0000c5dc  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00005460 g     F .text.itcm	0000000c lpi2c1_isr()
00007b66 g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000c28 g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000b484 g     F .text.itcm	00000046 ultoa
200022f0 g     O .data	00000002 h_3
000046ae g     F .text.itcm	00000016 MTPD::read8()
6000176c g     F .text.code	00000048 TwoWire::begin()
200153ba g     O .bss	00000002 dgain
0000879e g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
00001168 g     F .text.itcm	0000003e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000e9ba g     F .text.itcm	00000038 __swrite
0000c450 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
00002754 g     F .text.itcm	000000e0 menu(short)
0000c5cc  w    F .text.itcm	00000004 usb_serial_class::peek()
0000daaa g     F .text.itcm	00000008 fcvtf
000090ae  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00008b30 g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00003c4e g     F .text.itcm	00000024 rtcSetDate(int, int, int)
000011a6 g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
000117ac g     F .text.itcm	00000024 fiprintf
00011824 g     F .text.itcm	00000234 _vfiprintf_r
00003c72 g     F .text.itcm	00000024 rtcSetTime(int, int, int)
00009ff4  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
20002700 g     O .bss	00002440 mtpd
000106d8 g     F .text.itcm	00000114 __mdiff
000028c4 g     F .text.itcm	00000054 pullData(unsigned long*)
0000927c g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
000014ca g     F .text.itcm	00000098 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
000062f2 g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00006e3c g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
00002c7c g     F .text.itcm	000000e8 checkEndOfFile(short)
20002284 g     O .data	0000004c _impure_data
00005cc0 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00001f80 g     F .text.itcm	000001b4 menu3()
0000e81c g     F .text.itcm	0000000c __sfp_lock_release
20014c30 g     O .bss	00000004 mtp_txEventCount
0000c590  w    F .text.itcm	00000014 Print::println(unsigned long, int)
00002a00 g     F .text.itcm	00000044 timeStamp()
0000993c g     F .text.itcm	00000074 SdioCard::writeStop()
0000e8fc g     F .text.itcm	00000040 siprintf
00011574 g     F .text.itcm	00000072 __sccl
00008bf0 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
00005936 g     F .text.itcm	00000014 ExFatFile::close()
2000124b g     O .data	00000101 _ctype_
0000b938  w    F .text.itcm	00000004 _read
600024c0 g       .text.code	00000000 __init_array_start
0000cc14  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
0000102c g     F .text.itcm	00000064 MTPStorage_SD::OpenIndex()
600023c0 g     F .text.code	0000000e CrashReportClass::operator bool()
000046da g     F .text.itcm	00000014 MTPD::read32()
20001d28 g     O .data	00000004 F_BUS_ACTUAL
0000bfc6 g     F .text.itcm	00000036 quadtimer_init
20014b98 g     O .bss	00000004 disk_count
00002b28 g     F .text.itcm	00000014 wavHeaderUpdate(long)
00003a64 g     F .text.itcm	000000fc time2date(unsigned long, datetime_t*)
00007fb8 g     F .text.itcm	0000003c FatVolume::chdir(char const*)
200022ee g     O .data	00000002 h_2
00003b60 g     F .text.itcm	000000c4 date2time(datetime_t*)
0000c600 g     F .text.itcm	0000002c Stream::timedRead()
00011bd0 g     F .text.itcm	00000078 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c4ac g     F .text.itcm	0000009c DMAChannel::begin(bool)
00008a1a  w    F .text.itcm	00000006 SharedSpiCard::end()
0000ed90 g     F .text.itcm	00000010 strlen
0000e0e8 g     F .text.itcm	00000244 _printf_i
00007052 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0000726a g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
0000fb10 g     F .text.itcm	0000045c __gethex
60002610 g     O .text.progmem	00000020 usb_string_product_name_default
20014858 g     O .bss	00000004 __malloc_sbrk_start
000038f0 g     F .text.itcm	0000003c setAGain(signed char)
0000ea68 g     F .text.itcm	00000014 vdprintf
000096d4 g     F .text.itcm	00000060 SdioCard::sectorCount()
00007418 g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
6000193e  w    F .text.code	00000002 startup_middle_hook
20000594 g     O .data	00000070 vtable for SdioCard
00011f54 g     F .text.itcm	00000042 .hidden __aeabi_f2d
000012ae g     F .text.itcm	00000082 MTPStorage_SD::close()
00006f28 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001946 g     F .text.code	00000112 configure_cache
00000e52  w    F .text.itcm	00000014 FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)
0000bd74 g     F .text.itcm	0000001c eeprom_write_block
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
000090a6  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
00001390 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
20014854 g     O .bss	00000004 __malloc_free_list
00008d1e  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
00002d78 g     F .text.itcm	0000006c newDirectory(char*)
00009e50 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
000023a8 g     F .text.itcm	000003ac menu2()
0000a0f8 g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
00003430 g     F .text.itcm	00000290 compress(void*)
00006d78  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00000c96 g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00011c94 g     F .text.itcm	0000027a .hidden __subdf3
00011824 g     F .text.itcm	00000234 _vfprintf_r
600024c0 g       .text.code	00000000 __preinit_array_start
0000b440 g     F .text.itcm	0000001c usb_receive
000061b8 g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001e0  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
00001298 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
20015468 g     O .bss	00000002 t_rep
00010338 g     F .text.itcm	0000005a __lo0bits
000062cc g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
200022e4 g     O .data	00000004 tempDatai
00007356 g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00017c00 g       *ABS*	00000000 _flashimagelen
00008d8c g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000c910 g     F .text.itcm	0000000a __aeabi_atexit
00000f20  w    F .text.itcm	00000018 FsFile::~FsFile()
0000b95c g     F .text.itcm	00000024 rtc_get
00006654 g     F .text.itcm	0000008c ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000c488 g     F .text.itcm	00000004 pendablesrvreq_isr
00004834 g     F .text.itcm	000000f4 MTPD::SendObject()
200153c0 g     O .bss	00000002 monitor
200022ec g     O .data	00000002 d_on
00001e74 g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
2000210c g     O .data	0000016c __global_locale
00009b30 g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
0000594a g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a5e8 g     F .text.itcm	000000d4 usb_serial_read
200155b1 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000c736 g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000b3b0 g     F .text.itcm	00000040 usb_config_tx
0000b93c  w    F .text.itcm	00000006 _close
00007ba2 g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000cc28 g     F .text.itcm	00000010 free
0000e32c  w    F .text.itcm	00000408 _scanf_float
000057a4 g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
000010ea g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
000101d8 g     F .text.itcm	0000008c __multadd
00010194 g     F .text.itcm	00000044 _Bfree
00006dba g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
200022f8  w    O .data	00000016 usb_string_serial_number
00009ebc g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
00009260 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x200026c0
60001428:	.word	0x20015620

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	6000193c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	60001946 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001ccc <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	60002448 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001a58 <configure_external_ram>
	analog_init();
6000159c:	bl	600023d0 <analog_init>
	pwm_init();
600015a0:	bl	60002450 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001d28 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	6000193e <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	600017b4 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	60001942 <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	60001940 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	60002490 <____libc_init_array_veneer>
	main();
600015ca:	bl	60002478 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x000120b8
600015dc:	.word	0x60002728
600015e0:	.word	0x00000000
600015e4:	.word	0x200026c0
600015e8:	.word	0x600147e4
600015ec:	.word	0x20000000
600015f0:	.word	0x20002400
600015f4:	.word	0x0000b78d
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000c489
6000160c:	.word	0x0000c48d
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x20015370
6000161c:	.word	0x016e3600
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x20015374
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165c:	ldr	r3, [r0, #20]
6000165e:	ldr	r2, [pc, #40]	; (60001688 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001660:	add.w	r0, r3, r1, lsl #4
60001664:	add.w	r1, r3, r1, lsl #4
{
60001668:	push	{r4, r5, lr}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	ldrb	r4, [r0, #8]
6000166c:	ldr	r5, [pc, #28]	; (6000168c <TwoWire::configSDApin(unsigned char)+0x30>)
6000166e:	add.w	r2, r2, r4, lsl #4
60001672:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001674:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001676:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001678:	ldr	r0, [r0, #12]
6000167a:	str	r0, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000167c:	ldr	r3, [r1, #16]
6000167e:	cbz	r3, 60001684 <TwoWire::configSDApin(unsigned char)+0x28>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001680:	ldr	r2, [r1, #20]
60001682:	str	r2, [r3, #0]
	}
}
60001684:	pop	{r4, r5, pc}
60001686:	nop
60001688:	.word	0x20000614
6000168c:	.word	0x0001f861

60001690 <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001690:	push	{r3, r4, r5, lr}
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001692:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001694:	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001696:	ldrb	r2, [r0, #24]
60001698:	add.w	r2, r3, r2, lsl #4
6000169c:	ldrb	r2, [r2, #8]
6000169e:	cmp	r2, r1
600016a0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016a2:	ldrb	r0, [r3, #8]
		if (sda_pin == 255) return;
600016a4:	cmp	r0, #255	; 0xff
600016a6:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (sda_pin == pin) break;
600016a8:	cmp	r1, r0
600016aa:	beq.n	600016d8 <TwoWire::setSDA(unsigned char)+0x48>
		if (sda_pin == 255) return;
600016ac:	ldrb	r1, [r3, #24]
600016ae:	cmp	r1, #255	; 0xff
600016b0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016b2:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b4:	ldr	r1, [r3, #0]
		configSDApin(newindex);
600016b6:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b8:	ldr	r3, [r3, #4]
600016ba:	ldr	r1, [r1, #0]
600016bc:	tst	r1, r3
600016be:	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x44>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c0:	ldr	r3, [pc, #24]	; (600016dc <TwoWire::setSDA(unsigned char)+0x4c>)
		configSDApin(newindex);
600016c2:	mov	r1, r5
600016c4:	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c6:	add.w	r3, r3, r2, lsl #4
600016ca:	movs	r2, #5
600016cc:	ldr	r3, [r3, #4]
600016ce:	str	r2, [r3, #0]
		configSDApin(newindex);
600016d0:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016d4:	strb	r5, [r4, #24]
}
600016d6:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
600016d8:	movs	r5, #0
600016da:	b.n	600016b4 <TwoWire::setSDA(unsigned char)+0x24>
600016dc:	.word	0x20000614

600016e0 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e0:	ldr	r3, [r0, #20]
600016e2:	ldr	r2, [pc, #40]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e4:	add.w	r0, r3, r1, lsl #4
600016e8:	add.w	r1, r3, r1, lsl #4
{
600016ec:	push	{r4, r5, lr}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016ee:	ldrb.w	r4, [r0, #40]	; 0x28
600016f2:	ldr	r5, [pc, #28]	; (60001710 <TwoWire::configSCLpin(unsigned char)+0x30>)
600016f4:	add.w	r2, r2, r4, lsl #4
600016f8:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fa:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fe:	ldr	r0, [r0, #44]	; 0x2c
60001700:	str	r0, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001702:	ldr	r3, [r1, #48]	; 0x30
60001704:	cbz	r3, 6000170a <TwoWire::configSCLpin(unsigned char)+0x2a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001706:	ldr	r2, [r1, #52]	; 0x34
60001708:	str	r2, [r3, #0]
	}
}
6000170a:	pop	{r4, r5, pc}
6000170c:	.word	0x20000614
60001710:	.word	0x0001f861

60001714 <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001714:	push	{r3, r4, r5, lr}
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001716:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001718:	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000171a:	ldrb	r2, [r0, #25]
6000171c:	add.w	r2, r3, r2, lsl #4
60001720:	ldrb.w	r2, [r2, #40]	; 0x28
60001724:	cmp	r2, r1
60001726:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001728:	ldrb.w	r0, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
6000172c:	cmp	r0, #255	; 0xff
6000172e:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (scl_pin == pin) break;
60001730:	cmp	r1, r0
60001732:	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == 255) return;
60001734:	ldrb.w	r1, [r3, #56]	; 0x38
60001738:	cmp	r1, #255	; 0xff
6000173a:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000173c:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173e:	ldr	r1, [r3, #0]
		configSCLpin(newindex);
60001740:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001742:	ldr	r3, [r3, #4]
60001744:	ldr	r1, [r1, #0]
60001746:	tst	r1, r3
60001748:	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4a>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174a:	ldr	r3, [pc, #28]	; (60001768 <TwoWire::setSCL(unsigned char)+0x54>)
		configSCLpin(newindex);
6000174c:	mov	r1, r5
6000174e:	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001750:	add.w	r3, r3, r2, lsl #4
60001754:	movs	r2, #5
60001756:	ldr	r3, [r3, #4]
60001758:	str	r2, [r3, #0]
		configSCLpin(newindex);
6000175a:	bl	600016e0 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175e:	strb	r5, [r4, #25]
}
60001760:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
60001762:	movs	r5, #0
60001764:	b.n	6000173e <TwoWire::setSCL(unsigned char)+0x2a>
60001766:	nop
60001768:	.word	0x20000614

6000176c <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	ldr	r2, [pc, #60]	; (600017ac <TwoWire::begin()+0x40>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176e:	ldr	r1, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001770:	ldr	r3, [r2, #56]	; 0x38
60001772:	bic.w	r3, r3, #16515072	; 0xfc0000
60001776:	orr.w	r3, r3, #262144	; 0x40000
{
6000177a:	push	{r4, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000177c:	str	r3, [r2, #56]	; 0x38
{
6000177e:	mov	r4, r0
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001780:	ldr	r2, [r1, #0]
60001782:	ldr	r1, [r1, #4]
60001784:	ldr	r3, [r2, #0]
60001786:	orrs	r3, r1
	setClock(100000);
60001788:	ldr	r1, [pc, #36]	; (600017b0 <TwoWire::begin()+0x44>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
6000178c:	movs	r2, #2
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
6000178e:	ldr	r3, [r0, #16]
	port->MCR = LPI2C_MCR_RST;
60001790:	str	r2, [r3, #16]
	setClock(100000);
60001792:	bl	60002498 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
60001796:	ldrb	r1, [r4, #24]
60001798:	mov	r0, r4
6000179a:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
6000179e:	ldrb	r1, [r4, #25]
600017a0:	mov	r0, r4
}
600017a2:	ldmia.w	sp!, {r4, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017a6:	b.w	600016e0 <TwoWire::configSCLpin(unsigned char)>
600017aa:	nop
600017ac:	.word	0x400fc000
600017b0:	.word	0x000186a0

600017b4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017b4:	ldr	r3, [pc, #192]	; (60001878 <usb_init+0xc4>)
600017b6:	movw	r2, #3937	; 0xf61
{
600017ba:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017bc:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600017c0:	bl	60002488 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c4:	ldr	r2, [pc, #180]	; (6000187c <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017c6:	ldr	r1, [pc, #184]	; (60001880 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c8:	ldr.w	r3, [r2, #128]	; 0x80
600017cc:	orr.w	r3, r3, #3
600017d0:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
600017d4:	movw	r2, #1028	; 0x404
600017d8:	ldr	r3, [pc, #168]	; (60001884 <usb_init+0xd0>)
600017da:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017de:	ldr	r2, [pc, #168]	; (60001888 <usb_init+0xd4>)
600017e0:	ldr	r0, [r2, #0]
600017e2:	tst	r0, r1
600017e4:	bne.n	600017ee <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017e6:	ldr.w	r1, [r3, #424]	; 0x1a8
600017ea:	lsls	r4, r1, #30
600017ec:	beq.n	60001824 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017ee:	mov.w	r1, #2147483648	; 0x80000000
600017f2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017f4:	ldr.w	r2, [r3, #320]	; 0x140
600017f8:	orr.w	r2, r2, #2
600017fc:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001800:	ldr	r2, [pc, #128]	; (60001884 <usb_init+0xd0>)
60001802:	ldr.w	r3, [r2, #320]	; 0x140
60001806:	lsls	r0, r3, #30
60001808:	bmi.n	60001802 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000180a:	mov.w	r3, #3758153728	; 0xe000e000
6000180e:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001812:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001814:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001818:	mov.w	r2, #2147483648	; 0x80000000
6000181c:	ldr	r3, [pc, #104]	; (60001888 <usb_init+0xd4>)
6000181e:	str	r2, [r3, #56]	; 0x38
		delay(25);
60001820:	bl	60002460 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001824:	ldr	r3, [pc, #96]	; (60001888 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
60001826:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001828:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000182c:	ldr	r4, [pc, #84]	; (60001884 <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000182e:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001830:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
60001834:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001836:	movs	r3, #10
60001838:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000183c:	ldr	r3, [pc, #76]	; (6000188c <usb_init+0xd8>)
6000183e:	mov	r0, r3
60001840:	bl	60002440 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001844:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001848:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000184c:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000184e:	mov.w	r2, #4194304	; 0x400000
60001852:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001854:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001858:	ldr	r2, [pc, #52]	; (60001890 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000185a:	str.w	r3, [r4, #328]	; 0x148
6000185e:	ldr	r3, [pc, #52]	; (60001894 <usb_init+0xe0>)
60001860:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001864:	mov.w	r3, #3758153728	; 0xe000e000
60001868:	mov.w	r2, #131072	; 0x20000
6000186c:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001870:	movs	r3, #1
60001872:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001876:	pop	{r4, pc}
60001878:	.word	0x400d8000
6000187c:	.word	0x400fc000
60001880:	.word	0x001e1c00
60001884:	.word	0x402e0000
60001888:	.word	0x400d9000
6000188c:	.word	0x20000000
60001890:	.word	0x0000aec9
60001894:	.word	0x20002400

60001898 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001898:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000189a:	ldr	r3, [pc, #60]	; (600018d8 <_reboot_Teensyduino_+0x40>)
6000189c:	ldr	r3, [r3, #96]	; 0x60
6000189e:	lsls	r3, r3, #30
600018a0:	bmi.n	600018a4 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600018a2:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600018a4:	cpsid	i
		USB1_USBCMD = 0;
600018a6:	ldr	r3, [pc, #52]	; (600018dc <_reboot_Teensyduino_+0x44>)
600018a8:	movs	r2, #0
600018aa:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
600018ae:	sub.w	r3, r3, #2310144	; 0x234000
600018b2:	ldr	r2, [pc, #44]	; (600018e0 <_reboot_Teensyduino_+0x48>)
600018b4:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600018b6:	sub.w	r3, r3, #534773760	; 0x1fe00000
600018ba:	sub.w	r3, r3, #700416	; 0xab000
600018be:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600018c0:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
600018c4:	ldr	r0, [pc, #28]	; (600018e4 <_reboot_Teensyduino_+0x4c>)
600018c6:	ldr	r3, [pc, #32]	; (600018e8 <_reboot_Teensyduino_+0x50>)
600018c8:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600018ca:	mov.w	r3, #2097152	; 0x200000
600018ce:	ldr	r3, [r3, #28]
600018d0:	ldr	r3, [r3, #8]
600018d2:	blx	r3
600018d4:	b.n	600018a4 <_reboot_Teensyduino_+0xc>
600018d6:	nop
600018d8:	.word	0x401f4400
600018dc:	.word	0x402e0000
600018e0:	.word	0x00200003
600018e4:	.word	0x20208000
600018e8:	.word	0xeb120000

600018ec <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600018ec:	ldr	r3, [pc, #28]	; (6000190c <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ee:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
600018f2:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018f6:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018fa:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018fe:	ldr	r2, [r3, #20]
60001900:	lsls	r2, r2, #31
60001902:	bpl.n	600018fe <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	movs	r2, #1
60001906:	str	r2, [r3, #20]
}
60001908:	bx	lr
6000190a:	nop
6000190c:	.word	0x402a4000

60001910 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
60001910:	ldr	r3, [pc, #32]	; (60001934 <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001912:	ldr	r2, [pc, #36]	; (60001938 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
60001914:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001918:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000191c:	movs	r2, #1
6000191e:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001922:	ldr	r2, [r3, #20]
60001924:	lsls	r2, r2, #31
60001926:	bpl.n	60001922 <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
60001928:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000192c:	movs	r2, #33	; 0x21
}
6000192e:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001930:	str	r2, [r3, #20]
}
60001932:	bx	lr
60001934:	.word	0x402a4000
60001938:	.word	0x00030004

6000193c <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
6000193c:	bx	lr

6000193e <startup_default_middle_hook>:
6000193e:	bx	lr

60001940 <startup_default_late_hook>:
60001940:	bx	lr

60001942 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001942:	nop
60001944:	bx	lr

60001946 <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
60001946:	mov.w	r3, #3758153728	; 0xe000e000
6000194a:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000194c:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
6000194e:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001952:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001956:	ldr	r2, [pc, #184]	; (60001a10 <configure_cache+0xca>)
60001958:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000195c:	movs	r2, #17
6000195e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001962:	ldr	r2, [pc, #176]	; (60001a14 <configure_cache+0xce>)
60001964:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001968:	movs	r2, #18
6000196a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000196e:	ldr	r2, [pc, #168]	; (60001a18 <configure_cache+0xd2>)
60001970:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001974:	ldr	r2, [pc, #164]	; (60001a1c <configure_cache+0xd6>)
60001976:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000197a:	ldr	r2, [pc, #164]	; (60001a20 <configure_cache+0xda>)
6000197c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001980:	ldr	r2, [pc, #160]	; (60001a24 <configure_cache+0xde>)
60001982:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001986:	ldr	r2, [pc, #160]	; (60001a28 <configure_cache+0xe2>)
60001988:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000198c:	ldr	r2, [pc, #156]	; (60001a2c <configure_cache+0xe6>)
6000198e:	orr.w	r2, r2, #21
60001992:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001996:	ldr	r2, [pc, #152]	; (60001a30 <configure_cache+0xea>)
60001998:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000199c:	add.w	r2, r2, #270532608	; 0x10200000
600019a0:	adds	r2, #13
600019a2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600019a6:	ldr	r2, [pc, #140]	; (60001a34 <configure_cache+0xee>)
600019a8:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600019ac:	ldr	r2, [pc, #136]	; (60001a38 <configure_cache+0xf2>)
600019ae:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019b2:	ldr	r2, [pc, #136]	; (60001a3c <configure_cache+0xf6>)
600019b4:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600019b8:	ldr	r2, [pc, #132]	; (60001a40 <configure_cache+0xfa>)
600019ba:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600019be:	ldr	r2, [pc, #132]	; (60001a44 <configure_cache+0xfe>)
600019c0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600019c4:	ldr	r2, [pc, #128]	; (60001a48 <configure_cache+0x102>)
600019c6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600019ca:	ldr	r2, [pc, #128]	; (60001a4c <configure_cache+0x106>)
600019cc:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600019d0:	ldr	r2, [pc, #124]	; (60001a50 <configure_cache+0x10a>)
600019d2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600019d6:	ldr	r2, [pc, #124]	; (60001a54 <configure_cache+0x10e>)
600019d8:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600019dc:	nop
	asm("nop");
600019de:	nop
	asm("nop");
600019e0:	nop
	asm("nop");
600019e2:	nop
	asm("nop");
600019e4:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600019e6:	movs	r2, #1
600019e8:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600019ec:	dsb	sy
	asm("isb");
600019f0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600019f4:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600019f8:	dsb	sy
	asm("isb");
600019fc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a00:	ldr.w	r2, [r3, #3348]	; 0xd14
60001a04:	orr.w	r2, r2, #196608	; 0x30000
60001a08:	str.w	r2, [r3, #3348]	; 0xd14
}
60001a0c:	bx	lr
60001a0e:	nop
60001a10:	.word	0x1000003f
60001a14:	.word	0x07080025
60001a18:	.word	0x00100009
60001a1c:	.word	0x00200013
60001a20:	.word	0x07020021
60001a24:	.word	0x20000014
60001a28:	.word	0x13080025
60001a2c:	.word	0x20015620
60001a30:	.word	0x10000009
60001a34:	.word	0x130b0027
60001a38:	.word	0x40000017
60001a3c:	.word	0x13100033
60001a40:	.word	0x60000018
60001a44:	.word	0x070b002f
60001a48:	.word	0x70000019
60001a4c:	.word	0x130b002f
60001a50:	.word	0x8000001a
60001a54:	.word	0x130b003b

60001a58 <configure_external_ram>:
{
60001a58:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a5a:	ldr	r3, [pc, #536]	; (60001c74 <configure_external_ram+0x21c>)
60001a5c:	ldr	r2, [pc, #536]	; (60001c78 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a5e:	ldr	r1, [pc, #540]	; (60001c7c <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a60:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a64:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a68:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a6c:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a70:	ldr	r4, [pc, #524]	; (60001c80 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a72:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a76:	add.w	r2, r2, #28672	; 0x7000
60001a7a:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a7e:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a82:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a86:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a8a:	movs	r2, #24
60001a8c:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001a8e:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001a90:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001a92:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001a94:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001a96:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001a9a:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a9e:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001aa2:	movs	r2, #1
60001aa4:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001aa8:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001aac:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001ab0:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001ab4:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001ab8:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001abc:	ldr	r2, [pc, #452]	; (60001c84 <configure_external_ram+0x22c>)
60001abe:	ldr	r3, [r2, #24]
60001ac0:	bic.w	r3, r3, #3758096384	; 0xe0000000
60001ac4:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001ac8:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001acc:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ad0:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001ad2:	ldr.w	r3, [r2, #132]	; 0x84
60001ad6:	orr.w	r3, r3, #12
60001ada:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001ade:	ldr	r3, [pc, #424]	; (60001c88 <configure_external_ram+0x230>)
60001ae0:	ldr	r2, [r3, #0]
60001ae2:	orr.w	r2, r2, #2
60001ae6:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ae8:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001aea:	ldr	r2, [pc, #416]	; (60001c8c <configure_external_ram+0x234>)
60001aec:	bic.w	r1, r1, #30848	; 0x7880
60001af0:	bic.w	r1, r1, #115	; 0x73
60001af4:	lsls	r1, r1, #16
60001af6:	lsrs	r1, r1, #16
60001af8:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001afa:	ldr	r1, [pc, #404]	; (60001c90 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001afc:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001afe:	mov.w	r2, #4294967295
60001b02:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b04:	add.w	r2, r2, #16187392	; 0xf70000
60001b08:	ldr	r0, [r1, #8]
60001b0a:	add.w	r2, r2, #14336	; 0x3800
60001b0e:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b10:	ldr	r0, [pc, #384]	; (60001c94 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001b12:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b16:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001b18:	ldr	r2, [r3, #12]
60001b1a:	bic.w	r2, r2, #120	; 0x78
60001b1e:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b20:	ldr	r2, [r3, #32]
60001b22:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b24:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b26:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b28:	ldr	r2, [r3, #32]
60001b2a:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b2c:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b30:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b32:	ldr	r0, [pc, #356]	; (60001c98 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b34:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b36:	ldr	r2, [pc, #356]	; (60001c9c <configure_external_ram+0x244>)
60001b38:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001b3a:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001b3c:	ldr.w	r2, [r1, #184]	; 0xb8
60001b40:	bic.w	r2, r2, #63	; 0x3f
60001b44:	orr.w	r2, r2, #1
60001b48:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b4c:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001b50:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b52:	bic.w	r2, r2, #63	; 0x3f
60001b56:	orr.w	r2, r2, #1
60001b5a:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b5e:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001b62:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b64:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b66:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b68:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001b6c:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b6e:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b70:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b74:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b76:	ldr	r0, [pc, #296]	; (60001ca0 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b78:	bic.w	r2, r2, #2
60001b7c:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b7e:	ldr	r2, [pc, #292]	; (60001ca4 <configure_external_ram+0x24c>)
60001b80:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b82:	movs	r2, #2
60001b84:	str	r2, [r3, #28]
60001b86:	ldr	r2, [pc, #288]	; (60001ca8 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b88:	str.w	r1, [r2], #4
60001b8c:	cmp	r2, r0
60001b8e:	bne.n	60001b88 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001b90:	ldr	r2, [r3, #0]
60001b92:	orr.w	r2, r2, #1
60001b96:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b98:	ldr	r3, [pc, #236]	; (60001c88 <configure_external_ram+0x230>)
60001b9a:	ldr	r4, [r3, #0]
60001b9c:	ands.w	r4, r4, #1
60001ba0:	bne.n	60001b9a <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ba2:	ldr	r2, [pc, #256]	; (60001ca4 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ba4:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001ba6:	mov	r1, r4
60001ba8:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001baa:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bac:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bb0:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bb2:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001bb6:	movw	r2, #1126	; 0x466
60001bba:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001bbe:	movw	r2, #1177	; 0x499
60001bc2:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001bc6:	ldr	r2, [pc, #228]	; (60001cac <configure_external_ram+0x254>)
60001bc8:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001bcc:	movw	r2, #9217	; 0x2401
60001bd0:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001bd4:	movw	r2, #1077	; 0x435
60001bd8:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001bdc:	ldr	r2, [pc, #208]	; (60001cb0 <configure_external_ram+0x258>)
60001bde:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001be2:	ldr	r2, [pc, #208]	; (60001cb4 <configure_external_ram+0x25c>)
60001be4:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001be8:	ldr	r2, [pc, #204]	; (60001cb8 <configure_external_ram+0x260>)
60001bea:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001bee:	movw	r2, #8705	; 0x2201
60001bf2:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001bf6:	bl	600018ec <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001bfa:	movs	r0, #1
60001bfc:	bl	600018ec <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001c00:	mov	r0, r6
60001c02:	bl	600018ec <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c06:	mov	r0, r4
60001c08:	bl	60001910 <flexspi2_psram_id>
60001c0c:	movw	r3, #23821	; 0x5d0d
60001c10:	mov	r5, r0
60001c12:	cmp	r0, r3
60001c14:	bne.n	60001c66 <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001c16:	movs	r0, #4
60001c18:	bl	600018ec <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001c1c:	mov.w	r1, #8388608	; 0x800000
60001c20:	mov	r0, r4
60001c22:	bl	600018ec <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001c26:	movs	r0, #1
60001c28:	bl	600018ec <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001c2c:	mov	r0, r6
60001c2e:	bl	600018ec <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c32:	mov	r0, r1
60001c34:	bl	60001910 <flexspi2_psram_id>
60001c38:	cmp	r0, r5
60001c3a:	bne.n	60001c62 <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001c3c:	movs	r0, #4
60001c3e:	bl	600018ec <flexspi2_command>
			external_psram_size = 16;
60001c42:	movs	r0, #16
			external_psram_size * 0x100000 -
60001c44:	ldr	r1, [pc, #116]	; (60001cbc <configure_external_ram+0x264>)
			external_psram_size = 16;
60001c46:	ldr	r3, [pc, #120]	; (60001cc0 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001c48:	ldr	r2, [pc, #120]	; (60001cc4 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001c4a:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c4c:	movs	r3, #0
			external_psram_size * 0x100000 -
60001c4e:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c50:	str	r3, [sp, #0]
60001c52:	movs	r3, #1
60001c54:	add.w	r2, r2, r0, lsl #20
60001c58:	ldr	r0, [pc, #108]	; (60001cc8 <configure_external_ram+0x270>)
60001c5a:	bl	60002458 <__sm_set_pool_veneer>
}
60001c5e:	add	sp, #8
60001c60:	pop	{r4, r5, r6, pc}
60001c62:	movs	r0, #8
60001c64:	b.n	60001c44 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c66:	movs	r2, #16
60001c68:	ldr	r0, [pc, #92]	; (60001cc8 <configure_external_ram+0x270>)
}
60001c6a:	add	sp, #8
60001c6c:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c70:	b.w	60002440 <__memset_veneer>
60001c74:	.word	0x401f8000
60001c78:	.word	0x0001b0f9
60001c7c:	.word	0x000110f9
60001c80:	.word	0x7cf0ff00
60001c84:	.word	0x400fc000
60001c88:	.word	0x402a4000
60001c8c:	.word	0xffff0012
60001c90:	.word	0x402a8000
60001c94:	.word	0x80000040
60001c98:	.word	0x00020063
60001c9c:	.word	0x830f00ff
60001ca0:	.word	0x402a4300
60001ca4:	.word	0x5af05af0
60001ca8:	.word	0x402a4200
60001cac:	.word	0x3018049f
60001cb0:	.word	0x0a1806eb
60001cb4:	.word	0x26013206
60001cb8:	.word	0x0a180638
60001cbc:	.word	0x70240000
60001cc0:	.word	0x200155bb
60001cc4:	.word	0x70000000
60001cc8:	.word	0x20014ba8

60001ccc <usb_pll_start>:
{
60001ccc:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cce:	ldr	r3, [pc, #84]	; (60001d24 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cd0:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cd2:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001cd6:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cda:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cde:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ce2:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ce6:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001ce8:	tst.w	r2, #2
60001cec:	beq.n	60001cf6 <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cee:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cf0:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cf2:	str	r7, [r3, #24]
			continue;
60001cf4:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cf6:	tst.w	r2, #8192	; 0x2000
60001cfa:	bne.n	60001d00 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cfc:	str	r5, [r3, #20]
			continue;
60001cfe:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001d00:	tst.w	r2, #4096	; 0x1000
60001d04:	bne.n	60001d0a <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d06:	str	r4, [r3, #20]
			continue;
60001d08:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d0a:	cmp	r2, #0
60001d0c:	bge.n	60001ce6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d0e:	tst.w	r2, #65536	; 0x10000
60001d12:	beq.n	60001d18 <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d14:	str	r1, [r3, #24]
			continue;
60001d16:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d18:	lsls	r2, r2, #25
60001d1a:	bmi.n	60001d20 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d1c:	str	r0, [r3, #20]
			continue;
60001d1e:	b.n	60001ce6 <usb_pll_start+0x1a>
}
60001d20:	pop	{r4, r5, r6, r7, pc}
60001d22:	nop
60001d24:	.word	0x400d8000

60001d28 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d28:	ldr	r2, [pc, #248]	; (60001e24 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2a:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d2e:	ldr	r0, [pc, #248]	; (60001e28 <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d30:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	vldr	s10, [pc, #244]	; 60001e2c <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d38:	bic.w	r3, r3, #1
{
60001d3c:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d3e:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d42:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d44:	ldr	r4, [pc, #232]	; (60001e30 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d46:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d4a:	ldr	r3, [pc, #232]	; (60001e34 <tempmon_init+0x10c>)
60001d4c:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d50:	uxtb	r1, r3
60001d52:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d54:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d58:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d5c:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d5e:	vcvt.f32.s32	s14, s15
60001d62:	ldr	r1, [pc, #212]	; (60001e38 <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d64:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d68:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d6a:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d6e:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d76:	ldr	r3, [pc, #196]	; (60001e3c <tempmon_init+0x114>)
60001d78:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d7c:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d80:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d84:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d8c:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d90:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d94:	vdiv.f32	s11, s10, s12
60001d98:	vadd.f32	s11, s11, s13
60001d9c:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001da0:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da4:	vldr	s11, [pc, #152]	; 60001e40 <tempmon_init+0x118>
60001da8:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001dac:	orr.w	r3, r3, r1, lsl #20
60001db0:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db4:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db8:	ldr	r3, [pc, #136]	; (60001e44 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dba:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dbe:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dc2:	vdiv.f32	s11, s14, s12
60001dc6:	vadd.f32	s14, s11, s13
60001dca:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dce:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd2:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dd6:	and.w	r3, r3, r0, lsl #16
60001dda:	orrs	r3, r1
60001ddc:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001de0:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de4:	vadd.f32	s15, s14, s13
60001de8:	vcvt.u32.f32	s15, s15
60001dec:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001df0:	ubfx	r3, r3, #0, #12
60001df4:	orrs	r3, r1
60001df6:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dfa:	ldr.w	r3, [r2, #128]	; 0x80
60001dfe:	orr.w	r3, r3, #2
60001e02:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e06:	movs	r2, #0
60001e08:	ldr	r3, [pc, #60]	; (60001e48 <tempmon_init+0x120>)
60001e0a:	strb.w	r2, [r3, #64]	; 0x40
60001e0e:	ldr	r3, [pc, #60]	; (60001e4c <tempmon_init+0x124>)
60001e10:	ldr	r2, [pc, #60]	; (60001e50 <tempmon_init+0x128>)
60001e12:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e16:	mov.w	r3, #3758153728	; 0xe000e000
60001e1a:	movs	r2, #1
60001e1c:	str.w	r2, [r3, #264]	; 0x108
}
60001e20:	pop	{r4, pc}
60001e22:	nop
60001e24:	.word	0x400d8100
60001e28:	.word	0x20014cd4
60001e2c:	.word	0x42aa0000
60001e30:	.word	0x20014cd0
60001e34:	.word	0x401f4400
60001e38:	.word	0x20014cd8
60001e3c:	.word	0x20014cdc
60001e40:	.word	0x42b40000
60001e44:	.word	0x0fff0000
60001e48:	.word	0xe000e400
60001e4c:	.word	0x20002400
60001e50:	.word	0x0000be4d

60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e54:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e56:	ldr	r4, [pc, #64]	; (60001e98 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001e58:	ldr.w	r3, [r4, #128]	; 0x80
60001e5c:	cmp	r3, #11
60001e5e:	bne.n	60001e92 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e60:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001e64:	ldr	r2, [pc, #52]	; (60001e9c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e66:	ldr	r6, [pc, #56]	; (60001ea0 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001e68:	ldr	r5, [pc, #56]	; (60001ea4 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001e6a:	ldr	r1, [r2, #0]
60001e6c:	adds	r2, #4
60001e6e:	eors	r3, r1
60001e70:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e72:	and.w	r0, r3, #1
60001e76:	subs	r1, #1
60001e78:	mul.w	r0, r6, r0
60001e7c:	eor.w	r3, r0, r3, lsr #1
60001e80:	bne.n	60001e72 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001e82:	cmp	r2, r5
60001e84:	bne.n	60001e6a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001e86:	ldr.w	r0, [r4, #168]	; 0xa8
60001e8a:	subs	r3, r0, r3
60001e8c:	negs	r0, r3
60001e8e:	adcs	r0, r3
	return 1;
}
60001e90:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001e92:	movs	r0, #0
60001e94:	b.n	60001e90 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001e96:	nop
60001e98:	.word	0x2027ff00
60001e9c:	.word	0x2027ff80
60001ea0:	.word	0xedb88320
60001ea4:	.word	0x2027ffa8

60001ea8 <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001ea8:	ldr	r2, [pc, #96]	; (60001f0c <CrashReportClass::clear()+0x64>)
60001eaa:	movs	r3, #0
{
60001eac:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001eae:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001eb2:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001eb6:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001eba:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001ebe:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001ec2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001ec6:	mov.w	r4, #3758153728	; 0xe000e000
60001eca:	adds	r2, #128	; 0x80
60001ecc:	str.w	r2, [r4, #3952]	; 0xf70
60001ed0:	adds	r2, #32
60001ed2:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001ed6:	dsb	sy
	asm("isb");
60001eda:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ede:	ldr	r2, [pc, #48]	; (60001f10 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ee0:	ldr	r6, [pc, #48]	; (60001f14 <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee2:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee4:	ldr	r5, [pc, #48]	; (60001f18 <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee6:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee8:	movs	r1, #28
	SRC_GPR5 = 0;
60001eea:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001eec:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001eee:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ef2:	bl	60002480 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001ef6:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001efa:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001efe:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001f02:	dsb	sy
	asm("isb");
60001f06:	isb	sy
}
60001f0a:	pop	{r4, r5, r6, pc}
60001f0c:	.word	0x2027ff00
60001f10:	.word	0x400f8000
60001f14:	.word	0x2027f000
60001f18:	.word	0x2027ffc0

60001f1c <CrashReportClass::printTo(Print&) const>:
{
60001f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001f20:	mov	r4, r1
  if (isvalid(info)) {
60001f22:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001f26:	cmp	r0, #0
60001f28:	beq.w	600022cc <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001f2c:	ldr	r6, [pc, #692]	; (600021e4 <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001f2e:	mov	r0, r4
60001f30:	ldr	r1, [pc, #692]	; (600021e8 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001f32:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001f36:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f3a:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f3e:	ldr	r1, [pc, #684]	; (600021ec <CrashReportClass::printTo(Print&) const+0x2d0>)
60001f40:	mov	r0, r4
    info->time /= 60;
60001f42:	udiv	r9, r7, r8
    info->time /= 60;
60001f46:	udiv	r5, r9, r8
60001f4a:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f4e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001f52:	movs	r3, #24
    p.print(hh);
60001f54:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001f56:	udiv	r1, r5, r3
60001f5a:	mls	r1, r3, r1, r5
    p.print(hh);
60001f5e:	uxtb	r1, r1
60001f60:	bl	60002428 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f64:	ldr	r1, [pc, #648]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f66:	mov	r0, r4
60001f68:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001f6c:	mls	r1, r8, r5, r9
    p.print(mm);
60001f70:	mov	r0, r4
60001f72:	uxtb	r1, r1
60001f74:	bl	60002428 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f78:	ldr	r1, [pc, #628]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f7a:	mov	r0, r4
60001f7c:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f80:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001f84:	mov	r0, r4
60001f86:	uxtb	r1, r1
60001f88:	bl	60002428 <___ZN5Print5printEh_veneer>
60001f8c:	mov	r0, r4
60001f8e:	bl	600024a8 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001f92:	ldr	r1, [pc, #608]	; (600021f4 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001f94:	mov	r0, r4
60001f96:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001f9a:	movs	r2, #16
60001f9c:	ldr.w	r1, [r6, #152]	; 0x98
60001fa0:	mov	r0, r4
60001fa2:	bl	60002430 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001fa6:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001faa:	cmp	r5, #0
60001fac:	beq.n	6000205c <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001fae:	ldr	r1, [pc, #584]	; (600021f8 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001fb0:	mov	r0, r4
60001fb2:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001fb6:	movs	r2, #16
60001fb8:	ldr.w	r1, [r6, #136]	; 0x88
60001fbc:	mov	r0, r4
60001fbe:	bl	60002430 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001fc2:	lsls	r2, r5, #31
60001fc4:	bpl.w	6000216c <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001fc8:	ldr	r1, [pc, #560]	; (600021fc <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001fca:	mov	r0, r4
60001fcc:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001fd0:	lsls	r2, r5, #24
60001fd2:	bpl.n	60002028 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001fd4:	ldr	r1, [pc, #552]	; (60002200 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001fd6:	mov	r0, r4
60001fd8:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001fdc:	movs	r2, #16
60001fde:	ldr.w	r1, [r6, #144]	; 0x90
60001fe2:	mov	r0, r4
60001fe4:	bl	60002438 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001fe8:	ldr.w	r2, [r6, #144]	; 0x90
60001fec:	cmp	r2, #31
60001fee:	bhi.w	6000218e <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001ff2:	ldr	r1, [pc, #528]	; (60002204 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001ff4:	mov	r0, r4
60001ff6:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001ffa:	movs	r2, #16
60001ffc:	ldr.w	r1, [r6, #152]	; 0x98
60002000:	mov	r0, r4
60002002:	bl	60002438 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60002006:	ldr	r1, [pc, #512]	; (60002208 <CrashReportClass::printTo(Print&) const+0x2ec>)
60002008:	mov	r0, r4
6000200a:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
6000200e:	ldr.w	r1, [r6, #152]	; 0x98
60002012:	movs	r2, #16
60002014:	mov	r0, r4
60002016:	bl	60002438 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
6000201a:	ldr	r1, [pc, #496]	; (6000220c <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000201c:	mov	r0, r4
6000201e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.println();
60002022:	mov	r0, r4
60002024:	bl	600024a8 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60002028:	lsls	r3, r5, #23
6000202a:	bpl.w	600021a2 <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
6000202e:	ldr	r1, [pc, #480]	; (60002210 <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002030:	mov	r0, r4
60002032:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002036:	lsls	r7, r5, #16
60002038:	bpl.n	6000204e <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
6000203a:	ldr	r1, [pc, #472]	; (60002214 <CrashReportClass::printTo(Print&) const+0x2f8>)
6000203c:	mov	r0, r4
6000203e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60002042:	movs	r2, #16
60002044:	ldr.w	r1, [r6, #148]	; 0x94
60002048:	mov	r0, r4
6000204a:	bl	60002430 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
6000204e:	lsls	r0, r5, #15
60002050:	bpl.w	600021cc <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002054:	ldr	r1, [pc, #448]	; (60002218 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60002056:	mov	r0, r4
60002058:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
6000205c:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60002060:	cbz	r5, 60002084 <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60002062:	ldr	r1, [pc, #440]	; (6000221c <CrashReportClass::printTo(Print&) const+0x300>)
60002064:	mov	r0, r4
60002066:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
6000206a:	movs	r2, #16
6000206c:	ldr.w	r1, [r6, #140]	; 0x8c
60002070:	mov	r0, r4
60002072:	bl	60002430 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002076:	lsls	r0, r5, #30
60002078:	bpl.w	600022c2 <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000207c:	ldr	r1, [pc, #416]	; (60002220 <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
6000207e:	mov	r0, r4
60002080:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60002084:	ldr	r1, [pc, #412]	; (60002224 <CrashReportClass::printTo(Print&) const+0x308>)
60002086:	mov	r0, r4
60002088:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
6000208c:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60002090:	movs	r1, #2
60002092:	mov	r0, r4
60002094:	vcvt.f64.f32	d0, s0
60002098:	bl	60002468 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
6000209c:	ldr	r1, [pc, #392]	; (60002228 <CrashReportClass::printTo(Print&) const+0x30c>)
6000209e:	mov	r0, r4
600020a0:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
600020a4:	ldr	r1, [pc, #388]	; (6000222c <CrashReportClass::printTo(Print&) const+0x310>)
600020a6:	mov	r0, r4
600020a8:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
600020ac:	ldr	r3, [pc, #384]	; (60002230 <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600020ae:	ldr	r1, [pc, #388]	; (60002234 <CrashReportClass::printTo(Print&) const+0x318>)
600020b0:	movs	r2, #10
600020b2:	ldr	r0, [r3, #0]
600020b4:	movs	r3, #0
600020b6:	udiv	r1, r0, r1
600020ba:	mov	r0, r4
600020bc:	bl	600024b0 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
600020c0:	ldr	r1, [pc, #372]	; (60002238 <CrashReportClass::printTo(Print&) const+0x31c>)
600020c2:	mov	r0, r4
600020c4:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
600020c8:	ldr	r3, [pc, #368]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
600020ca:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600020cc:	lsls	r2, r5, #30
600020ce:	bpl.n	600020e2 <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
600020d0:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020d2:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
600020d4:	ldr	r3, [pc, #360]	; (60002240 <CrashReportClass::printTo(Print&) const+0x324>)
600020d6:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
600020d8:	ite	eq
600020da:	ldreq	r1, [pc, #360]	; (60002244 <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020dc:	ldrne	r1, [pc, #360]	; (60002248 <CrashReportClass::printTo(Print&) const+0x32c>)
600020de:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600020e2:	lsls	r7, r5, #29
600020e4:	bpl.n	600020ee <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
600020e6:	ldr	r1, [pc, #356]	; (6000224c <CrashReportClass::printTo(Print&) const+0x330>)
600020e8:	mov	r0, r4
600020ea:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600020ee:	lsls	r6, r5, #28
600020f0:	bpl.n	600020fa <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
600020f2:	ldr	r1, [pc, #348]	; (60002250 <CrashReportClass::printTo(Print&) const+0x334>)
600020f4:	mov	r0, r4
600020f6:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
600020fa:	lsls	r0, r5, #27
600020fc:	bpl.n	60002106 <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
600020fe:	ldr	r1, [pc, #340]	; (60002254 <CrashReportClass::printTo(Print&) const+0x338>)
60002100:	mov	r0, r4
60002102:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60002106:	lsls	r1, r5, #26
60002108:	bpl.n	60002112 <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
6000210a:	ldr	r1, [pc, #332]	; (60002258 <CrashReportClass::printTo(Print&) const+0x33c>)
6000210c:	mov	r0, r4
6000210e:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60002112:	lsls	r2, r5, #25
60002114:	bpl.n	6000211e <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60002116:	ldr	r1, [pc, #324]	; (6000225c <CrashReportClass::printTo(Print&) const+0x340>)
60002118:	mov	r0, r4
6000211a:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000211e:	lsls	r3, r5, #24
60002120:	bpl.n	6000212a <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60002122:	ldr	r1, [pc, #316]	; (60002260 <CrashReportClass::printTo(Print&) const+0x344>)
60002124:	mov	r0, r4
60002126:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000212a:	ands.w	r5, r5, #256	; 0x100
6000212e:	beq.w	600022fe <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60002132:	ldr	r1, [pc, #304]	; (60002264 <CrashReportClass::printTo(Print&) const+0x348>)
60002134:	mov	r0, r4
60002136:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
6000213a:	ldr	r2, [pc, #256]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
6000213c:	ldr	r1, [pc, #296]	; (60002268 <CrashReportClass::printTo(Print&) const+0x34c>)
6000213e:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002140:	ldr	r3, [r2, #8]
60002142:	bic.w	r3, r3, #256	; 0x100
60002146:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60002148:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
6000214c:	ldr	r1, [pc, #284]	; (6000226c <CrashReportClass::printTo(Print&) const+0x350>)
6000214e:	mov	r0, r4
60002150:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60002154:	ldr	r3, [pc, #280]	; (60002270 <CrashReportClass::printTo(Print&) const+0x354>)
60002156:	movs	r2, #7
60002158:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
6000215a:	ldr	r2, [pc, #280]	; (60002274 <CrashReportClass::printTo(Print&) const+0x358>)
6000215c:	ldr	r3, [r2, #56]	; 0x38
6000215e:	orr.w	r3, r3, #64	; 0x40
60002162:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60002164:	dsb	sy
	  while (1) asm ("wfi");
60002168:	wfi
6000216a:	b.n	60002168 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
6000216c:	lsls	r3, r5, #30
6000216e:	bpl.n	60002174 <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
60002170:	ldr	r1, [pc, #260]	; (60002278 <CrashReportClass::printTo(Print&) const+0x35c>)
60002172:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002174:	lsls	r7, r5, #28
60002176:	bpl.n	6000217c <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002178:	ldr	r1, [pc, #256]	; (6000227c <CrashReportClass::printTo(Print&) const+0x360>)
6000217a:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000217c:	lsls	r0, r5, #27
6000217e:	bpl.n	60002184 <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
60002180:	ldr	r1, [pc, #252]	; (60002280 <CrashReportClass::printTo(Print&) const+0x364>)
60002182:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002184:	lsls	r1, r5, #26
60002186:	bpl.w	60001fd0 <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
6000218a:	ldr	r1, [pc, #248]	; (60002284 <CrashReportClass::printTo(Print&) const+0x368>)
6000218c:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000218e:	ldr	r3, [pc, #248]	; (60002288 <CrashReportClass::printTo(Print&) const+0x36c>)
60002190:	cmp	r2, r3
60002192:	bcc.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
60002196:	adds	r3, #32
60002198:	cmp	r2, r3
6000219a:	bcs.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000219e:	ldr	r1, [pc, #236]	; (6000228c <CrashReportClass::printTo(Print&) const+0x370>)
600021a0:	b.n	6000201c <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
600021a2:	lsls	r7, r5, #22
600021a4:	bpl.n	600021aa <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
600021a6:	ldr	r1, [pc, #232]	; (60002290 <CrashReportClass::printTo(Print&) const+0x374>)
600021a8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
600021aa:	lsls	r0, r5, #21
600021ac:	bpl.n	600021b2 <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
600021ae:	ldr	r1, [pc, #228]	; (60002294 <CrashReportClass::printTo(Print&) const+0x378>)
600021b0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
600021b2:	lsls	r1, r5, #20
600021b4:	bpl.n	600021ba <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
600021b6:	ldr	r1, [pc, #224]	; (60002298 <CrashReportClass::printTo(Print&) const+0x37c>)
600021b8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
600021ba:	lsls	r2, r5, #19
600021bc:	bpl.n	600021c2 <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600021be:	ldr	r1, [pc, #220]	; (6000229c <CrashReportClass::printTo(Print&) const+0x380>)
600021c0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
600021c2:	lsls	r3, r5, #18
600021c4:	bpl.w	60002036 <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
600021c8:	ldr	r1, [pc, #212]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x384>)
600021ca:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600021cc:	lsls	r1, r5, #14
600021ce:	bpl.n	600021d4 <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600021d0:	ldr	r1, [pc, #208]	; (600022a4 <CrashReportClass::printTo(Print&) const+0x388>)
600021d2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600021d4:	lsls	r2, r5, #13
600021d6:	bpl.n	600021dc <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600021d8:	ldr	r1, [pc, #204]	; (600022a8 <CrashReportClass::printTo(Print&) const+0x38c>)
600021da:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600021dc:	lsls	r3, r5, #12
600021de:	bpl.n	600022b0 <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
600021e0:	ldr	r1, [pc, #200]	; (600022ac <CrashReportClass::printTo(Print&) const+0x390>)
600021e2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
600021e4:	.word	0x2027ff00
600021e8:	.word	0x200014d6
600021ec:	.word	0x200014e3
600021f0:	.word	0x20001a0c
600021f4:	.word	0x2000150a
600021f8:	.word	0x2000152f
600021fc:	.word	0x20001538
60002200:	.word	0x200015fe
60002204:	.word	0x20001620
60002208:	.word	0x2000163f
6000220c:	.word	0x2000167e
60002210:	.word	0x200016de
60002214:	.word	0x20001817
60002218:	.word	0x20001839
6000221c:	.word	0x20001915
60002220:	.word	0x2000191e
60002224:	.word	0x20001961
60002228:	.word	0x20001984
6000222c:	.word	0x2000198a
60002230:	.word	0x20001d2c
60002234:	.word	0x000f4240
60002238:	.word	0x200019a8
6000223c:	.word	0x400f8000
60002240:	.word	0x0bad00f1
60002244:	.word	0x20001b05
60002248:	.word	0x20001b4e
6000224c:	.word	0x20001b8f
60002250:	.word	0x20001bb7
60002254:	.word	0x20001be2
60002258:	.word	0x20001c09
6000225c:	.word	0x20001c33
60002260:	.word	0x20001c55
60002264:	.word	0x20001c77
60002268:	.word	0x20001ca1
6000226c:	.word	0x20001cc3
60002270:	.word	0x400ac000
60002274:	.word	0x400d4000
60002278:	.word	0x20001561
6000227c:	.word	0x20001583
60002280:	.word	0x200015ad
60002284:	.word	0x200015d3
60002288:	.word	0x20015620
6000228c:	.word	0x2000169c
60002290:	.word	0x200016ff
60002294:	.word	0x2000172c
60002298:	.word	0x20001771
6000229c:	.word	0x200017b1
600022a0:	.word	0x200017e5
600022a4:	.word	0x2000185d
600022a8:	.word	0x20001890
600022ac:	.word	0x200018b9
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022b0:	lsls	r7, r5, #7
600022b2:	bpl.n	600022b8 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022b4:	ldr	r1, [pc, #204]	; (60002384 <CrashReportClass::printTo(Print&) const+0x468>)
600022b6:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022b8:	lsls	r5, r5, #6
600022ba:	bpl.w	6000205c <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
600022be:	ldr	r1, [pc, #200]	; (60002388 <CrashReportClass::printTo(Print&) const+0x46c>)
600022c0:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
600022c2:	lsls	r1, r5, #1
600022c4:	bpl.w	60002084 <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
600022c8:	ldr	r1, [pc, #192]	; (6000238c <CrashReportClass::printTo(Print&) const+0x470>)
600022ca:	b.n	6000207e <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
600022cc:	ldr	r1, [pc, #192]	; (60002390 <CrashReportClass::printTo(Print&) const+0x474>)
600022ce:	mov	r0, r4
600022d0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
600022d4:	ldr	r1, [pc, #188]	; (60002394 <CrashReportClass::printTo(Print&) const+0x478>)
600022d6:	mov	r0, r4
600022d8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
600022dc:	ldr	r1, [pc, #184]	; (60002398 <CrashReportClass::printTo(Print&) const+0x47c>)
600022de:	mov	r0, r4
600022e0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
600022e4:	ldr	r1, [pc, #180]	; (6000239c <CrashReportClass::printTo(Print&) const+0x480>)
600022e6:	mov	r0, r4
600022e8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
600022ec:	ldr	r1, [pc, #176]	; (600023a0 <CrashReportClass::printTo(Print&) const+0x484>)
600022ee:	mov	r0, r4
600022f0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
600022f4:	ldr	r1, [pc, #172]	; (600023a4 <CrashReportClass::printTo(Print&) const+0x488>)
600022f6:	mov	r0, r4
600022f8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
600022fc:	b.n	600020c8 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
600022fe:	ldr	r7, [pc, #168]	; (600023a8 <CrashReportClass::printTo(Print&) const+0x48c>)
60002300:	ldr.w	r3, [r7, #192]	; 0xc0
60002304:	cbz	r3, 60002378 <CrashReportClass::printTo(Print&) const+0x45c>
60002306:	ldr.w	r6, [r7, #220]	; 0xdc
6000230a:	movs	r1, #28
6000230c:	ldr	r0, [pc, #156]	; (600023ac <CrashReportClass::printTo(Print&) const+0x490>)
6000230e:	bl	60002480 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60002312:	cmp	r6, r0
60002314:	bne.n	60002378 <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
60002316:	ldr.w	r8, [pc, #160]	; 600023b8 <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
6000231a:	ldr.w	r9, [pc, #160]	; 600023bc <CrashReportClass::printTo(Print&) const+0x4a0>
6000231e:	ldr.w	sl, [pc, #140]	; 600023ac <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
60002322:	movs	r3, #1
60002324:	ldr.w	r2, [r7, #192]	; 0xc0
60002328:	mov	r6, r5
6000232a:	lsls	r3, r5
6000232c:	adds	r5, #1
6000232e:	tst	r3, r2
60002330:	beq.n	60002374 <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
60002332:	mov	r1, r8
60002334:	mov	r0, r4
60002336:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
6000233a:	mov	r1, r5
6000233c:	add.w	r6, sl, r6, lsl #2
60002340:	mov	r0, r4
60002342:	bl	600024a0 <___ZN5Print5printEl_veneer>
        p.print(" was ");
60002346:	mov	r1, r9
60002348:	mov	r0, r4
6000234a:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000234e:	movs	r3, #0
60002350:	movs	r2, #10
60002352:	ldr	r1, [r6, #4]
60002354:	mov	r0, r4
60002356:	bl	600024b0 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
6000235a:	ldr	r1, [pc, #84]	; (600023b0 <CrashReportClass::printTo(Print&) const+0x494>)
6000235c:	mov	r0, r4
6000235e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
60002362:	ldr	r1, [r6, #4]
60002364:	movs	r2, #16
60002366:	mov	r0, r4
60002368:	bl	60002438 <___ZN5Print5printEmi_veneer>
        p.println(")");
6000236c:	ldr	r1, [pc, #68]	; (600023b4 <CrashReportClass::printTo(Print&) const+0x498>)
6000236e:	mov	r0, r4
60002370:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
60002374:	cmp	r5, #6
60002376:	bne.n	60002322 <CrashReportClass::printTo(Print&) const+0x406>
  clear();
60002378:	bl	60001ea8 <CrashReportClass::clear()>
}
6000237c:	movs	r0, #1
6000237e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60002382:	nop
60002384:	.word	0x200018d0
60002388:	.word	0x200018f9
6000238c:	.word	0x20001945
60002390:	.word	0x200019ad
60002394:	.word	0x200019c5
60002398:	.word	0x20001a0e
6000239c:	.word	0x20001a58
600023a0:	.word	0x20001a7d
600023a4:	.word	0x20001ac5
600023a8:	.word	0x2027ff00
600023ac:	.word	0x2027ffc0
600023b0:	.word	0x20001d15
600023b4:	.word	0x20001ac3
600023b8:	.word	0x20001d06
600023bc:	.word	0x2000197e

600023c0 <CrashReportClass::operator bool()>:
{
600023c0:	push	{r3, lr}
	if (isvalid(info)) return true;
600023c2:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
600023c6:	subs	r0, #0
600023c8:	it	ne
600023ca:	movne	r0, #1
600023cc:	pop	{r3, pc}
600023ce:	nop

600023d0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600023d0:	ldr	r3, [pc, #60]	; (60002410 <analog_init+0x40>)
600023d2:	ldr	r2, [r3, #108]	; 0x6c
600023d4:	orr.w	r2, r2, #196608	; 0x30000
600023d8:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600023da:	ldr	r2, [r3, #108]	; 0x6c
600023dc:	orr.w	r2, r2, #768	; 0x300
600023e0:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600023e2:	sub.w	r3, r3, #229376	; 0x38000
600023e6:	movw	r2, #1591	; 0x637
600023ea:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600023ec:	movs	r2, #160	; 0xa0
600023ee:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600023f0:	ldr	r2, [r3, #72]	; 0x48
600023f2:	lsls	r2, r2, #24
600023f4:	bmi.n	600023f0 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600023f6:	ldr	r2, [pc, #28]	; (60002414 <analog_init+0x44>)
600023f8:	movw	r3, #1591	; 0x637
600023fc:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600023fe:	movs	r3, #160	; 0xa0
60002400:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002402:	ldr	r3, [r2, #72]	; 0x48
60002404:	ands.w	r3, r3, #128	; 0x80
60002408:	bne.n	60002402 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000240a:	ldr	r2, [pc, #12]	; (60002418 <analog_init+0x48>)
6000240c:	strb	r3, [r2, #0]
}
6000240e:	bx	lr
60002410:	.word	0x400fc000
60002414:	.word	0x400c8000
60002418:	.word	0x200155b2

6000241c <_init>:
6000241c:	push	{r3, r4, r5, r6, r7, lr}
6000241e:	nop
60002420:	pop	{r3, r4, r5, r6, r7}
60002422:	pop	{r3}
60002424:	mov	lr, r3
60002426:	bx	lr

60002428 <___ZN5Print5printEh_veneer>:
60002428:	ldr.w	pc, [pc]	; 6000242c <___ZN5Print5printEh_veneer+0x4>
6000242c:	.word	0x0000c581

60002430 <___ZN5Print7printlnEmi_veneer>:
60002430:	ldr.w	pc, [pc]	; 60002434 <___ZN5Print7printlnEmi_veneer+0x4>
60002434:	.word	0x0000c591

60002438 <___ZN5Print5printEmi_veneer>:
60002438:	ldr.w	pc, [pc]	; 6000243c <___ZN5Print5printEmi_veneer+0x4>
6000243c:	.word	0x0000c589

60002440 <__memset_veneer>:
60002440:	ldr.w	pc, [pc]	; 60002444 <__memset_veneer+0x4>
60002444:	.word	0x0000a1d5

60002448 <__set_arm_clock_veneer>:
60002448:	ldr.w	pc, [pc]	; 6000244c <__set_arm_clock_veneer+0x4>
6000244c:	.word	0x0000aa19

60002450 <__pwm_init_veneer>:
60002450:	ldr.w	pc, [pc]	; 60002454 <__pwm_init_veneer+0x4>
60002454:	.word	0x0000bffd

60002458 <__sm_set_pool_veneer>:
60002458:	ldr.w	pc, [pc]	; 6000245c <__sm_set_pool_veneer+0x4>
6000245c:	.word	0x0000bde3

60002460 <__delay_veneer>:
60002460:	ldr.w	pc, [pc]	; 60002464 <__delay_veneer+0x4>
60002464:	.word	0x0000b761

60002468 <___ZN5Print10printFloatEdh_veneer>:
60002468:	ldr.w	pc, [pc]	; 6000246c <___ZN5Print10printFloatEdh_veneer+0x4>
6000246c:	.word	0x0000c7e1

60002470 <___ZN5Print7printlnEPKc_veneer>:
60002470:	ldr.w	pc, [pc]	; 60002474 <___ZN5Print7printlnEPKc_veneer+0x4>
60002474:	.word	0x00000d3d

60002478 <__main_veneer>:
60002478:	ldr.w	pc, [pc]	; 6000247c <__main_veneer+0x4>
6000247c:	.word	0x0000c5ef

60002480 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
60002480:	ldr.w	pc, [pc]	; 60002484 <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
60002484:	.word	0x0000c5a5

60002488 <__usb_init_serialnumber_veneer>:
60002488:	ldr.w	pc, [pc]	; 6000248c <__usb_init_serialnumber_veneer+0x4>
6000248c:	.word	0x0000c335

60002490 <____libc_init_array_veneer>:
60002490:	ldr.w	pc, [pc]	; 60002494 <____libc_init_array_veneer+0x4>
60002494:	.word	0x0000ec91

60002498 <___ZN7TwoWire8setClockEm_veneer>:
60002498:	ldr.w	pc, [pc]	; 6000249c <___ZN7TwoWire8setClockEm_veneer+0x4>
6000249c:	.word	0x00005485

600024a0 <___ZN5Print5printEl_veneer>:
600024a0:	ldr.w	pc, [pc]	; 600024a4 <___ZN5Print5printEl_veneer+0x4>
600024a4:	.word	0x0000c6d3

600024a8 <___ZN5Print7printlnEv_veneer>:
600024a8:	ldr.w	pc, [pc]	; 600024ac <___ZN5Print7printlnEv_veneer+0x4>
600024ac:	.word	0x0000c6e5

600024b0 <___ZN5Print11printNumberEmhh_veneer>:
600024b0:	ldr.w	pc, [pc]	; 600024b4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600024b4:	.word	0x0000c737

600024b8 <___ZN5Print5printEPKc_veneer>:
600024b8:	ldr.w	pc, [pc]	; 600024bc <___ZN5Print5printEPKc_veneer+0x4>
600024bc:	.word	0x0000c579

600024c0 <__frame_dummy_init_array_entry>:
600024c0:	E.......Q...M3..

Disassembly of section .text.progmem:

600024d0 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024d0:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024d4:	ldr	r3, [pc, #60]	; (60002514 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024d6:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024da:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024de:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024e2:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024e4:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024e8:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600024ec:	ldr	r2, [r3, #112]	; 0x70
600024ee:	bic.w	r2, r2, #4096	; 0x1000
600024f2:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600024f4:	ldr	r2, [r3, #112]	; 0x70
600024f6:	cmp	r2, #0
600024f8:	bge.n	600024f4 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600024fa:	ldr.w	r2, [r3, #368]	; 0x170
600024fe:	bic.w	r2, r2, #8388608	; 0x800000
60002502:	bic.w	r2, r2, #32768	; 0x8000
60002506:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
6000250a:	ldr	r2, [r3, #112]	; 0x70
6000250c:	bic.w	r2, r2, #65536	; 0x10000
60002510:	str	r2, [r3, #112]	; 0x70
  }
60002512:	bx	lr
60002514:	.word	0x400d8000

60002518 <TwoWire::i2c4_hardware>:
60002518:	...@............
60002528:	...@............
	...
60002540:	...........@....
60002550:	................
60002560:	....yT..

60002568 <TwoWire::i2c3_hardware>:
60002568:	p..@............
60002578:	...@....,.......
60002588:	...@............
60002598:	...@....-.......
600025a8:	...@........mT..

600025b8 <TwoWire::i2c1_hardware>:
600025b8:	p..@............
600025c8:	...@............
	...
600025e0:	...........@....
600025f0:	................
60002600:	....aT..

60002608 <usb_string_mtp>:
60002608:	..M.T.P.

60002610 <usb_string_product_name_default>:
60002610:	 .T.e.e.n.s.y. .
60002620:	M.T.P. .D.i.s.k.

60002630 <usb_string_manufacturer_name_default>:
60002630:	..T.e.e.n.s.y.d.
60002640:	u.i.n.o.

60002648 <string0>:
60002648:	....

6000264c <usb_config_descriptor_12>:
6000264c:	..i.....2.......
6000265c:	...........$....
6000266c:	$....$...$......
6000267c:	................
6000268c:	.@......@.......
6000269c:	........@......@
600026ac:	...... ..

600026b5 <usb_config_descriptor_480>:
600026b5:	..i.....2.......
600026c5:	...........$....
600026d5:	$....$...$......
600026e5:	................
600026f5:	................
60002705:	................
60002715:	...... ..

6000271e <qualifier_descriptor>:
6000271e:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}

uint16_t checkDiskSpace(void)
{   if((diskSize>0) && ((diskSpace=sd->freeClusterCount()) > MIN_SPACE)) return 1;
    return 0;
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	bx	lr
      38:	.word	0x200026c0
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      3c:	.word	0x200026c0
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
      56:	b.w	20 <register_tm_clones>
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x20014c38
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60017c00

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	74b4 <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	6814 <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	7080 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	5a30 <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	7206 <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	5bb6 <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	c3dc <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x200155dd
     154:	.word	0x200155dc
     158:	.word	0x20015374
     15c:	.word	0x20015388

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	c736 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	ed90 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	c6e4 <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     1a4:	push	{r3, r4, r5, lr}
     1a6:	ldr	r3, [pc, #48]	; (1d8 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
     1a8:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
     1aa:	ldr	r5, [pc, #48]	; (1dc <MTPStorage_SD::~MTPStorage_SD()+0x38>)
     1ac:	str	r3, [r0, #0]
  ~FsBaseFile() {close();}
     1ae:	add.w	r0, r0, #344	; 0x158
     1b2:	str.w	r5, [r0, #-16]
     1b6:	bl	8714 <FsBaseFile::close()>
     1ba:	add.w	r0, r4, #264	; 0x108
     1be:	str.w	r5, [r4, #248]	; 0xf8
     1c2:	bl	8714 <FsBaseFile::close()>
     1c6:	add.w	r0, r4, #184	; 0xb8
     1ca:	str.w	r5, [r4, #168]	; 0xa8
     1ce:	bl	8714 <FsBaseFile::close()>
     1d2:	mov	r0, r4
     1d4:	pop	{r3, r4, r5, pc}
     1d6:	nop
     1d8:	.word	0x20000450
     1dc:	.word	0x2000042c

000001e0 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1e0:	ldr	r3, [r0, #56]	; 0x38
     1e2:	cbz	r3, 1ea <FsBaseFile::write(void const*, unsigned int)+0xa>
     1e4:	mov	r0, r3
     1e6:	b.w	7994 <FatFile::write(void const*, unsigned int)>
     1ea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1ec:	cbz	r0, 1f2 <FsBaseFile::write(void const*, unsigned int)+0x12>
     1ee:	b.w	6b6c <ExFatFile::write(void const*, unsigned int)>
  }
     1f2:	bx	lr

000001f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1f4:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1f6:	adds	r0, #16
     1f8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     1fc:	pop	{r3, pc}

000001fe <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1fe:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     200:	movs	r2, #1
     202:	strb.w	r1, [sp, #7]
     206:	add.w	r1, sp, #7
     20a:	adds	r0, #16
     20c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     210:	add	sp, #12
     212:	ldr.w	pc, [sp], #4
	...

00000218 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     218:	ldr	r3, [pc, #36]	; (240 <resetUSB()+0x28>)
     21a:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     21c:	movs	r0, #100	; 0x64
  {
     21e:	push	{r4, lr}
    while(!Serial) mtpd.loop();
     220:	ldr	r4, [pc, #32]	; (244 <resetUSB()+0x2c>)
    USB1_USBCMD = 0;  // disconnect USB
     222:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     226:	bl	b760 <delay>
    usb_init();
     22a:	bl	120a8 <__usb_init_veneer>
    while(!Serial) mtpd.loop();
     22e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     232:	cbz	r0, 236 <resetUSB()+0x1e>
  }
     234:	pop	{r4, pc}
    while(!Serial) mtpd.loop();
     236:	mov	r0, r4
     238:	bl	495c <MTPD::loop()>
     23c:	b.n	22e <resetUSB()+0x16>
     23e:	nop
     240:	.word	0x402e0000
     244:	.word	0x20002700

00000248 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     248:	mov.w	r3, #3758153728	; 0xe000e000
     24c:	ldr	r2, [pc, #4]	; (254 <reboot()+0xc>)
     24e:	str.w	r2, [r3, #3340]	; 0xd0c
     252:	bx	lr
     254:	.word	0x05fa0004

00000258 <lowPowerInit()>:
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     258:	ldr	r3, [pc, #28]	; (278 <lowPowerInit()+0x20>)
     25a:	ldr	r2, [r3, #100]	; 0x64
     25c:	orr.w	r2, r2, #131072	; 0x20000
     260:	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     262:	ldr	r2, [r3, #84]	; 0x54
     264:	bic.w	r2, r2, #35	; 0x23
     268:	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     26a:	ldr	r2, [r3, #84]	; 0x54
     26c:	orr.w	r2, r2, #1
     270:	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");    
     272:	dsb	sy
  }
     276:	bx	lr
     278:	.word	0x400fc000

0000027c <loop>:
{
     27c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     280:	ldr	r6, [pc, #432]	; (434 <loop+0x1b8>)
{
     282:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     284:	ldr	r5, [pc, #432]	; (438 <loop+0x1bc>)
  loopCount++;
     286:	ldr	r3, [r6, #0]
     288:	ldr	r4, [pc, #432]	; (43c <loop+0x1c0>)
     28a:	adds	r3, #1
     28c:	str	r3, [r6, #0]
  nb = getDataCount();
     28e:	bl	283c <getDataCount()>
  if(nb>mxb) mxb=nb;
     292:	ldrh	r3, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     294:	ldr	r2, [pc, #424]	; (440 <loop+0x1c4>)
  if(nb>mxb) mxb=nb;
     296:	cmp	r3, r0
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     298:	ldr	r3, [r2, #0]
  if(nb>mxb) mxb=nb;
     29a:	it	cc
     29c:	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     29e:	tst.w	r3, #1
     2a2:	bne.n	2b8 <loop+0x3c>
     2a4:	ldr	r3, [pc, #412]	; (444 <loop+0x1c8>)
     2a6:	ldr	r3, [r3, #0]
     2a8:	cmp	r3, #1
     2aa:	mov.w	r3, #4294967295
     2ae:	it	ne
     2b0:	movne	r3, #0
     2b2:	strh	r3, [r4, #0]
     2b4:	movs	r3, #1
     2b6:	str	r3, [r2, #0]
  status=menu(status);
     2b8:	ldrh	r0, [r4, #0]
     2ba:	sxth	r0, r0
     2bc:	bl	2754 <menu(short)>
     2c0:	strh	r0, [r4, #0]
    if(status<0)
     2c2:	ldrh	r3, [r4, #0]
     2c4:	lsls	r3, r3, #16
     2c6:	bpl.n	2ce <loop+0x52>
    { mtpd.loop();
     2c8:	ldr	r0, [pc, #380]	; (448 <loop+0x1cc>)
     2ca:	bl	495c <MTPD::loop()>
      if(status>0) digitalWriteFast(13,HIGH);    
     2ce:	ldrh	r3, [r4, #0]
     2d0:	sxth	r3, r3
     2d2:	cmp	r3, #0
     2d4:	ble.n	2de <loop+0x62>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     2d6:	ldr	r3, [pc, #372]	; (44c <loop+0x1d0>)
     2d8:	movs	r2, #8
     2da:	str.w	r2, [r3, #132]	; 0x84
      status=saveData(status);  
     2de:	ldrh	r0, [r4, #0]
     2e0:	sxth	r0, r0
     2e2:	bl	326c <saveData(short)>
     2e6:	strh	r0, [r4, #0]
      if(status>0) digitalWriteFast(13,LOW);
     2e8:	ldrh	r3, [r4, #0]
     2ea:	sxth	r3, r3
     2ec:	cmp	r3, #0
     2ee:	ble.n	2f8 <loop+0x7c>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     2f0:	ldr	r3, [pc, #344]	; (44c <loop+0x1d0>)
     2f2:	movs	r2, #8
     2f4:	str.w	r2, [r3, #136]	; 0x88
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     2f8:	ldr	r3, [pc, #340]	; (450 <loop+0x1d4>)
  if((t1=millis())>(t0+1000))
     2fa:	ldr	r7, [pc, #344]	; (454 <loop+0x1d8>)
     2fc:	ldr	r3, [r3, #0]
     2fe:	str	r3, [sp, #28]
     300:	ldr	r3, [r7, #0]
     302:	ldr	r2, [sp, #28]
     304:	add.w	r3, r3, #1000	; 0x3e8
     308:	cmp	r3, r2
     30a:	bcs.n	3f0 <loop+0x174>
    if(monitor)
     30c:	ldr	r3, [pc, #328]	; (458 <loop+0x1dc>)
     30e:	ldr.w	sl, [pc, #388]	; 494 <loop+0x218>
     312:	ldrsh.w	r3, [r3]
     316:	ldr.w	r9, [pc, #384]	; 498 <loop+0x21c>
     31a:	ldr.w	r8, [pc, #384]	; 49c <loop+0x220>
     31e:	cmp	r3, #0
     320:	beq.n	3da <loop+0x15e>
      rtc_get_datetime(&t);
     322:	add	r0, sp, #32
     324:	bl	3c2a <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     328:	ldrsb.w	r3, [sp, #36]	; 0x24
     32c:	ldrsh.w	r2, [sp, #32]
     330:	str	r3, [sp, #16]
     332:	ldrsb.w	r3, [sp, #39]	; 0x27
     336:	ldr	r1, [pc, #292]	; (45c <loop+0x1e0>)
     338:	str	r3, [sp, #12]
     33a:	ldrsb.w	r3, [sp, #38]	; 0x26
     33e:	ldr	r0, [pc, #288]	; (460 <loop+0x1e4>)
     340:	str	r3, [sp, #8]
     342:	ldrsb.w	r3, [sp, #37]	; 0x25
     346:	str	r3, [sp, #4]
     348:	ldrsb.w	r3, [sp, #35]	; 0x23
     34c:	str	r3, [sp, #0]
     34e:	ldrsb.w	r3, [sp, #34]	; 0x22
     352:	bl	c71c <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     356:	ldr	r1, [pc, #268]	; (464 <loop+0x1e8>)
     358:	ldr	r0, [pc, #260]	; (460 <loop+0x1e4>)
     35a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     35e:	ldr	r1, [r6, #0]
     360:	ldr	r0, [pc, #252]	; (460 <loop+0x1e4>)
     362:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     366:	ldr	r1, [pc, #256]	; (468 <loop+0x1ec>)
     368:	ldr	r0, [pc, #244]	; (460 <loop+0x1e4>)
     36a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     36e:	ldr.w	r1, [sl]
     372:	ldr	r0, [pc, #236]	; (460 <loop+0x1e4>)
     374:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     378:	ldr	r1, [pc, #236]	; (468 <loop+0x1ec>)
     37a:	ldr	r0, [pc, #228]	; (460 <loop+0x1e4>)
     37c:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     380:	ldr.w	r1, [r9]
     384:	ldr	r0, [pc, #216]	; (460 <loop+0x1e4>)
     386:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     38a:	ldr	r1, [pc, #220]	; (468 <loop+0x1ec>)
     38c:	ldr	r0, [pc, #208]	; (460 <loop+0x1e4>)
     38e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     392:	ldrh	r2, [r5, #0]
     394:	ldr	r1, [pc, #212]	; (46c <loop+0x1f0>)
     396:	ldr	r0, [pc, #200]	; (460 <loop+0x1e4>)
     398:	bl	c71c <Print::printf(char const*, ...)>
     39c:	ldr	r1, [pc, #208]	; (470 <loop+0x1f4>)
     39e:	ldr	r0, [pc, #192]	; (460 <loop+0x1e4>)
     3a0:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("  ; ");
     3a4:	ldr.w	r1, [r8]
     3a8:	ldr	r0, [pc, #180]	; (460 <loop+0x1e4>)
     3aa:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     3ae:	ldr	r1, [pc, #196]	; (474 <loop+0x1f8>)
     3b0:	ldr	r0, [pc, #172]	; (460 <loop+0x1e4>)
     3b2:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     3b6:	ldr	r3, [pc, #192]	; (478 <loop+0x1fc>)
     3b8:	ldrh	r4, [r3, #0]
     3ba:	sxth	r4, r4
     3bc:	cbnz	r4, 3f8 <loop+0x17c>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     3be:	ldr	r3, [pc, #188]	; (47c <loop+0x200>)
     3c0:	ldr	r1, [pc, #188]	; (480 <loop+0x204>)
     3c2:	ldr.w	fp, [pc, #156]	; 460 <loop+0x1e4>
     3c6:	ldr.w	r2, [r3, r4, lsl #2]
     3ca:	adds	r4, #1
     3cc:	mov	r0, fp
     3ce:	bl	c71c <Print::printf(char const*, ...)>
     3d2:	cmp	r4, #8
     3d4:	ldr	r1, [pc, #168]	; (480 <loop+0x204>)
     3d6:	ldr	r3, [pc, #164]	; (47c <loop+0x200>)
     3d8:	bne.n	3c6 <loop+0x14a>
    loopCount=0;
     3da:	movs	r3, #0
     3dc:	str	r3, [r6, #0]
    procCount=0;
     3de:	str.w	r3, [sl]
    procMiss=0;
     3e2:	str.w	r3, [r9]
    mxb=0;
     3e6:	strh	r3, [r5, #0]
    disk_count=0;
     3e8:	str.w	r3, [r8]
    t0=t1;
     3ec:	ldr	r3, [sp, #28]
     3ee:	str	r3, [r7, #0]
  asm("wfi");
     3f0:	wfi
}
     3f2:	add	sp, #44	; 0x2c
     3f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3f8:	ldr.w	fp, [pc, #148]	; 490 <loop+0x214>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3fc:	movs	r4, #0
     3fe:	ldr	r1, [pc, #132]	; (484 <loop+0x208>)
     400:	ldr	r3, [pc, #92]	; (460 <loop+0x1e4>)
     402:	adds	r4, #1
     404:	mov	r0, r3
     406:	ldr.w	r2, [fp], #4
     40a:	bl	c71c <Print::printf(char const*, ...)>
     40e:	cmp	r4, #24
     410:	ldr	r3, [pc, #76]	; (460 <loop+0x1e4>)
     412:	ldr	r1, [pc, #112]	; (484 <loop+0x208>)
     414:	bne.n	402 <loop+0x186>
        Serial.printf("%2d",max_stat);
     416:	ldr	r4, [pc, #112]	; (488 <loop+0x20c>)
     418:	mov	r0, r3
     41a:	ldr	r1, [pc, #112]	; (48c <loop+0x210>)
     41c:	ldr	r2, [r4, #0]
     41e:	bl	c71c <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     422:	movs	r2, #96	; 0x60
     424:	movs	r1, #0
     426:	ldr	r0, [pc, #104]	; (490 <loop+0x214>)
     428:	bl	a1d4 <memset>
        max_stat=0;        
     42c:	movs	r3, #0
     42e:	str	r3, [r4, #0]
     430:	b.n	3da <loop+0x15e>
     432:	nop
     434:	.word	0x20014844
     438:	.word	0x200153b4
     43c:	.word	0x200153b6
     440:	.word	0x20007dcc
     444:	.word	0x2001537c
     448:	.word	0x20002700
     44c:	.word	0x42004000
     450:	.word	0x20015374
     454:	.word	0x20014840
     458:	.word	0x200153c0
     45c:	.word	0x20001432
     460:	.word	0x20001d30
     464:	.word	0x20001453
     468:	.word	0x2000145c
     46c:	.word	0x20001457
     470:	.word	0x2000145b
     474:	.word	0x2000145e
     478:	.word	0x200153c2
     47c:	.word	0x20014c0c
     480:	.word	0x20001463
     484:	.word	0x20001468
     488:	.word	0x20014c2c
     48c:	.word	0x2000146d
     490:	.word	0x20014c58
     494:	.word	0x20014c50
     498:	.word	0x20014c54
     49c:	.word	0x20014b98

000004a0 <setup1()>:
{ 
     4a0:	push	{r4, lr}
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4a2:	ldr	r4, [pc, #44]	; (4d0 <setup1()+0x30>)
  Serial.println("Setup1");
     4a4:	ldr	r1, [pc, #44]	; (4d4 <setup1()+0x34>)
     4a6:	ldr	r0, [pc, #48]	; (4d8 <setup1()+0x38>)
     4a8:	bl	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4ac:	ldr	r3, [r4, #0]
     4ae:	cbz	r3, 4c8 <setup1()+0x28>
  i2s_setup();
     4b0:	bl	b00 <i2s_setup()>
  dma_setup();
     4b4:	bl	b84 <dma_setup()>
  adc_init();
     4b8:	bl	374c <adc_init()>
  Serial.println("Setup1 done");
     4bc:	ldr	r1, [pc, #28]	; (4dc <setup1()+0x3c>)
     4be:	ldr	r0, [pc, #24]	; (4d8 <setup1()+0x38>)
}
     4c0:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     4c4:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4c8:	movs	r0, #1
     4ca:	bl	b760 <delay>
     4ce:	b.n	4ac <setup1()+0xc>
     4d0:	.word	0x200151b4
     4d4:	.word	0x2000101f
     4d8:	.word	0x20001d30
     4dc:	.word	0x20001026

000004e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4e0:	push	{r4, r5, r6, lr}
     4e2:	mov	r5, r0
     4e4:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4e8:	cbnz	r0, 50e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     4ea:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     4ec:	ldr.w	r0, [r5, #1152]	; 0x480
     4f0:	cbz	r0, 544 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     4f2:	bl	7df8 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     4f6:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     4f8:	cbz	r6, 50a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     4fa:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     4fe:	cbz	r0, 524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     500:	ldr	r3, [r0, #0]
     502:	movs	r1, #0
     504:	ldr	r3, [r3, #68]	; 0x44
     506:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     508:	cbz	r0, 524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     50a:	mov	r0, r4
     50c:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     50e:	ldr	r3, [r0, #0]
     510:	ldr	r3, [r3, #60]	; 0x3c
     512:	blx	r3
     514:	cmp	r0, #0
     516:	beq.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     518:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     51c:	cbnz	r0, 528 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     51e:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     522:	cbnz	r0, 534 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     524:	movs	r4, #0
     526:	b.n	50a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     528:	ldr	r3, [r0, #0]
     52a:	ldr	r3, [r3, #64]	; 0x40
     52c:	blx	r3
     52e:	cmp	r0, #0
     530:	bne.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     532:	b.n	51e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     534:	ldr	r3, [r0, #0]
     536:	movs	r1, #1
     538:	ldr	r3, [r3, #68]	; 0x44
     53a:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     53c:	mov	r6, r0
     53e:	cmp	r0, #0
     540:	bne.n	4ec <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     542:	b.n	524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     544:	ldr.w	r0, [r5, #1156]	; 0x484
     548:	cmp	r0, #0
     54a:	beq.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     54c:	bl	63c6 <ExFatPartition::freeClusterCount()>
     550:	b.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

00000554 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     554:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spiConfigBackupPin = 255;
     558:	ldr	r4, [pc, #276]	; (670 <storage_configure()+0x11c>)
     55a:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
     55c:	movs	r1, #0
     55e:	ldr	r6, [pc, #276]	; (674 <storage_configure()+0x120>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     560:	add.w	r5, r4, #1168	; 0x490
    spiConfigBackupPin = 255;
     564:	strb.w	r3, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     568:	strb.w	r1, [r4, #1224]	; 0x4c8
     56c:	mov	r0, r5
     56e:	bl	9b30 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     572:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     574:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     578:	bl	922c <SdioCard::errorCode() const>
     57c:	cmp	r0, #0
     57e:	bne.n	622 <storage_configure()+0xce>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     580:	movs	r3, #1
     582:	ldr.w	r1, [r4, #1164]	; 0x48c
     586:	mov	r0, r4
     588:	mov	r2, r3
     58a:	bl	8874 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     58e:	cmp	r0, #0
     590:	beq.n	622 <storage_configure()+0xce>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     592:	ldr	r3, [pc, #228]	; (678 <storage_configure()+0x124>)
     594:	ldr	r2, [r3, #4]
     596:	cmp	r2, #19
     598:	ble.n	63e <storage_configure()+0xea>
    return m_fVol ? m_fVol->clusterCount() :
     59a:	ldr.w	r3, [r4, #1152]	; 0x480
     59e:	cmp	r3, #0
     5a0:	beq.n	652 <storage_configure()+0xfe>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     5a2:	ldr	r5, [r3, #28]
     5a4:	subs	r5, #1
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     5a6:	ldr	r0, [pc, #200]	; (670 <storage_configure()+0x11c>)
     5a8:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     5ac:	ldr.w	r3, [r4, #1152]	; 0x480
     5b0:	mov	r7, r0
     5b2:	cmp	r3, #0
     5b4:	beq.n	660 <storage_configure()+0x10c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     5b6:	ldrb	r3, [r3, #6]
     5b8:	mov.w	r4, #512	; 0x200
     5bc:	lsls	r4, r3
     5be:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     5c0:	ldr	r3, [r6, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     5c2:	mov.w	r8, #10
     5c6:	movs	r6, #0
     5c8:	movs	r2, #0
     5ca:	str	r3, [sp, #0]
     5cc:	movs	r3, #254	; 0xfe
     5ce:	ldr	r1, [pc, #172]	; (67c <storage_configure()+0x128>)
     5d0:	ldr	r0, [pc, #172]	; (680 <storage_configure()+0x12c>)
     5d2:	bl	c71c <Print::printf(char const*, ...)>
            Serial.print("; total clusters: "); Serial.print(totalSize); 
     5d6:	ldr	r1, [pc, #172]	; (684 <storage_configure()+0x130>)
     5d8:	ldr	r0, [pc, #164]	; (680 <storage_configure()+0x12c>)
     5da:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5de:	mov	r2, r5
     5e0:	mov	r3, r6
     5e2:	ldr	r0, [pc, #156]	; (680 <storage_configure()+0x12c>)
     5e4:	strd	r8, r6, [sp]
     5e8:	bl	c74a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" free clusters: "); Serial.print(freeSize);
     5ec:	ldr	r1, [pc, #152]	; (688 <storage_configure()+0x134>)
     5ee:	ldr	r0, [pc, #144]	; (680 <storage_configure()+0x12c>)
     5f0:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5f4:	mov	r2, r7
     5f6:	mov	r3, r6
     5f8:	ldr	r0, [pc, #132]	; (680 <storage_configure()+0x12c>)
     5fa:	strd	r8, r6, [sp]
     5fe:	bl	c74a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     602:	ldr	r1, [pc, #136]	; (68c <storage_configure()+0x138>)
     604:	ldr	r0, [pc, #120]	; (680 <storage_configure()+0x12c>)
     606:	bl	18c <Print::print(char const*) [clone .isra.0]>
     60a:	lsr.w	r1, r4, r8
     60e:	ldr	r0, [pc, #112]	; (680 <storage_configure()+0x12c>)
     610:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     614:	ldr	r1, [pc, #120]	; (690 <storage_configure()+0x13c>)
     616:	ldr	r0, [pc, #104]	; (680 <storage_configure()+0x12c>)
        }
      }
  }
     618:	add	sp, #8
     61a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     61e:	b.w	190 <Print::println(char const*) [clone .isra.0]>
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     622:	ldr	r3, [r6, #0]
     624:	movs	r2, #0
     626:	ldr	r1, [pc, #108]	; (694 <storage_configure()+0x140>)
     628:	str	r3, [sp, #0]
     62a:	movs	r3, #254	; 0xfe
     62c:	ldr	r0, [pc, #80]	; (680 <storage_configure()+0x12c>)
     62e:	bl	c71c <Print::printf(char const*, ...)>
     632:	ldr	r0, [pc, #76]	; (680 <storage_configure()+0x12c>)
  }
     634:	add	sp, #8
     636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     63a:	b.w	c6e4 <Print::println()>
          sd_name[fsCount] = name;
     63e:	add.w	r1, r3, r2, lsl #2
     642:	ldr	r0, [r6, #0]
     644:	str	r0, [r1, #8]
          sdx[fsCount++] = &fs;
     646:	adds	r1, r2, #1
     648:	str	r1, [r3, #4]
     64a:	add.w	r3, r3, r2, lsl #2
     64e:	str	r4, [r3, #88]	; 0x58
     650:	b.n	59a <storage_configure()+0x46>
     652:	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     656:	cmp	r5, #0
     658:	beq.n	5a6 <storage_configure()+0x52>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     65a:	ldr.w	r5, [r5, #1072]	; 0x430
     65e:	b.n	5a6 <storage_configure()+0x52>
     660:	ldr.w	r4, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     664:	cmp	r4, #0
     666:	beq.n	5c0 <storage_configure()+0x6c>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     668:	ldr.w	r4, [r4, #1084]	; 0x43c
     66c:	b.n	5c0 <storage_configure()+0x6c>
     66e:	nop
     670:	.word	0x20014ce4
     674:	.word	0x200022e0
     678:	.word	0x200151b8
     67c:	.word	0x20000dec
     680:	.word	0x20001d30
     684:	.word	0x20000e03
     688:	.word	0x20000e16
     68c:	.word	0x20000e27
     690:	.word	0x20000e36
     694:	.word	0x20000dc1

00000698 <_GLOBAL__sub_I_storage>:
  }
     698:	push	{r3, r4, r5, lr}
        fsCount = 0;
     69a:	ldr	r5, [pc, #192]	; (75c <_GLOBAL__sub_I_storage+0xc4>)
     69c:	movs	r4, #0
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     69e:	ldr	r3, [pc, #192]	; (760 <_GLOBAL__sub_I_storage+0xc8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6a0:	mov.w	r2, #1000	; 0x3e8
  MTPStorage_SD storage;
     6a4:	ldr	r1, [pc, #188]	; (764 <_GLOBAL__sub_I_storage+0xcc>)
     6a6:	mov	r0, r5
     6a8:	str	r3, [r5, #0]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6aa:	ldr	r3, [pc, #188]	; (768 <_GLOBAL__sub_I_storage+0xd0>)
     6ac:	str.w	r2, [r5, #176]	; 0xb0
     6b0:	str.w	r3, [r5, #168]	; 0xa8
     6b4:	str.w	r3, [r5, #248]	; 0xf8
     6b8:	str.w	r3, [r5, #328]	; 0x148
     6bc:	mvn.w	r3, #1
        fsCount = 0;
     6c0:	str	r4, [r5, #4]
	constexpr Print() : write_error(0) {}
     6c2:	str.w	r4, [r5, #172]	; 0xac
     6c6:	strb.w	r4, [r5, #180]	; 0xb4
     6ca:	strb.w	r4, [r5, #260]	; 0x104
     6ce:	strb.w	r4, [r5, #340]	; 0x154
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6d2:	str.w	r4, [r5, #416]	; 0x1a0
     6d6:	strh.w	r4, [r5, #428]	; 0x1ac
     6da:	strd	r4, r2, [r5, #252]	; 0xfc
     6de:	strd	r4, r2, [r5, #332]	; 0x14c
     6e2:	ldr	r2, [pc, #136]	; (76c <_GLOBAL__sub_I_storage+0xd4>)
     6e4:	strd	r3, r4, [r5, #420]	; 0x1a4
  FsBaseFile() {}
     6e8:	strd	r4, r4, [r5, #240]	; 0xf0
     6ec:	strd	r4, r4, [r5, #320]	; 0x140
     6f0:	strd	r4, r4, [r5, #400]	; 0x190
     6f4:	strd	r4, r4, [r5, #408]	; 0x198
     6f8:	bl	c910 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     6fc:	ldr	r3, [pc, #112]	; (770 <_GLOBAL__sub_I_storage+0xd8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     6fe:	ldr	r1, [pc, #116]	; (774 <_GLOBAL__sub_I_storage+0xdc>)
  SdFs sdx[nsd];
     700:	mov	r0, r4
     702:	str	r5, [r3, #0]
     704:	add.w	r3, r3, #8192	; 0x2000
     708:	ldr	r2, [pc, #96]	; (76c <_GLOBAL__sub_I_storage+0xd4>)
     70a:	str.w	r4, [r3, #1056]	; 0x420
     70e:	strb.w	r4, [r3, #1060]	; 0x424
     712:	str.w	r4, [r3, #1064]	; 0x428
  FsVolume() {}
     716:	ldr	r3, [pc, #96]	; (778 <_GLOBAL__sub_I_storage+0xe0>)
     718:	str.w	r1, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     71c:	ldr	r1, [pc, #92]	; (77c <_GLOBAL__sub_I_storage+0xe4>)
     71e:	str.w	r4, [r3, #1152]	; 0x480
     722:	str.w	r1, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     726:	movs	r1, #7
     728:	str.w	r4, [r3, #1156]	; 0x484
     72c:	str.w	r1, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     730:	movs	r1, #41	; 0x29
class SdBase : public Vol {
     732:	str.w	r4, [r3, #1164]	; 0x48c
     736:	strb.w	r1, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     73a:	ldr	r1, [pc, #68]	; (780 <_GLOBAL__sub_I_storage+0xe8>)
  SdioConfig() {}
     73c:	strh.w	r4, [r3, #1176]	; 0x498
     740:	str.w	r1, [r3, #1180]	; 0x49c
  SharedSpiCard() {}
     744:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     748:	strb.w	r4, [r3, #1208]	; 0x4b8
     74c:	strb.w	r4, [r3, #1224]	; 0x4c8
     750:	ldr	r1, [pc, #48]	; (784 <_GLOBAL__sub_I_storage+0xec>)
  }
     752:	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     756:	b.w	c910 <__aeabi_atexit>
     75a:	nop
     75c:	.word	0x200151b8
     760:	.word	0x20000450
     764:	.word	0x000001a5
     768:	.word	0x20000554
     76c:	.word	0x20002108
     770:	.word	0x20002700
     774:	.word	0x2000059c
     778:	.word	0x20014ce4
     77c:	.word	0x003d0900
     780:	.word	0x200004bc
     784:	.word	0x0000006d

00000788 <setup>:
{
     788:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     78a:	ldr	r5, [pc, #272]	; (89c <setup+0x114>)
     78c:	sub	sp, #28
    set_arm_clock(48'000'000);
     78e:	ldr	r0, [pc, #272]	; (8a0 <setup+0x118>)
				if (elapsed > 750) break;
     790:	movw	r7, #750	; 0x2ee
     794:	bl	aa18 <set_arm_clock>
			if (usb_configuration) {
     798:	ldr	r6, [pc, #264]	; (8a4 <setup+0x11c>)
		uint32_t millis_begin = systick_millis_count;
     79a:	ldr	r4, [r5, #0]
		while (!(*this)) {
     79c:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7a0:	cbz	r0, 7c8 <setup+0x40>
  uint16_t *params=loadParameters();
     7a2:	bl	2264 <loadParameters()>
  if(params[0]==1)
     7a6:	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     7a8:	mov	r4, r0
  if(params[0]==1)
     7aa:	cmp	r3, #1
     7ac:	beq.n	7e0 <setup+0x58>
    while(millis()<10'000) if(Serial) { termon=1; break;}
     7ae:	movw	r6, #9999	; 0x270f
     7b2:	ldr	r3, [r5, #0]
     7b4:	cmp	r3, r6
     7b6:	bhi.n	7f8 <setup+0x70>
     7b8:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7bc:	cmp	r0, #0
     7be:	beq.n	7b2 <setup+0x2a>
     7c0:	ldr	r3, [pc, #228]	; (8a8 <setup+0x120>)
     7c2:	movs	r2, #1
     7c4:	str	r2, [r3, #0]
     7c6:	b.n	7f8 <setup+0x70>
			uint32_t elapsed = systick_millis_count - millis_begin;
     7c8:	ldr	r3, [r5, #0]
			if (usb_configuration) {
     7ca:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     7cc:	subs	r3, r3, r4
			if (usb_configuration) {
     7ce:	cbz	r2, 7dc <setup+0x54>
				if (elapsed > 2000) break;
     7d0:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     7d4:	bhi.n	7a2 <setup+0x1a>
			yield();
     7d6:	bl	c3dc <yield>
     7da:	b.n	79c <setup+0x14>
				if (elapsed > 750) break;
     7dc:	cmp	r3, r7
     7de:	b.n	7d4 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     7e0:	ldr	r3, [pc, #200]	; (8ac <setup+0x124>)
     7e2:	ldr	r2, [pc, #204]	; (8b0 <setup+0x128>)
     7e4:	ldrh	r3, [r3, #0]
     7e6:	ldrh	r2, [r2, #0]
     7e8:	uxth	r3, r3
     7ea:	uxth	r2, r2
     7ec:	cmp	r3, r2
     7ee:	ldr	r2, [pc, #184]	; (8a8 <setup+0x120>)
     7f0:	ite	hi
     7f2:	movhi	r3, #0
     7f4:	movls	r3, #1
     7f6:	str	r3, [r2, #0]
  Serial.println(version);
     7f8:	ldr	r1, [pc, #184]	; (8b4 <setup+0x12c>)
     7fa:	ldr	r0, [pc, #188]	; (8b8 <setup+0x130>)
     7fc:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.print("params[0] = "); Serial.println(params[0]);
     800:	ldr	r1, [pc, #184]	; (8bc <setup+0x134>)
     802:	ldr	r0, [pc, #180]	; (8b8 <setup+0x130>)
     804:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     808:	ldrh	r1, [r4, #0]
     80a:	ldr	r0, [pc, #172]	; (8b8 <setup+0x130>)
     80c:	bl	c6d2 <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     810:	ldr	r0, [pc, #164]	; (8b8 <setup+0x130>)
     812:	bl	c6e4 <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     816:	ldr	r0, [pc, #168]	; (8c0 <setup+0x138>)
     818:	bl	12098 <___ZN16CrashReportClasscvbEv_veneer>
     81c:	cbz	r0, 826 <setup+0x9e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     81e:	ldr	r1, [pc, #152]	; (8b8 <setup+0x130>)
     820:	ldr	r0, [pc, #156]	; (8c0 <setup+0x138>)
     822:	bl	12090 <___ZNK16CrashReportClass7printToER5Print_veneer>
    usbPowerSetup();
     826:	bl	3708 <usbPowerSetup()>
    lowPowerInit();
     82a:	bl	258 <lowPowerInit()>
    storage_configure();
     82e:	bl	554 <storage_configure()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     832:	add	r0, sp, #16
     834:	bl	3c2a <rtc_get_datetime(datetime_t*)>
     838:	cbnz	r0, 842 <setup+0xba>
     83a:	ldr	r1, [pc, #136]	; (8c4 <setup+0x13c>)
     83c:	ldr	r0, [pc, #120]	; (8b8 <setup+0x130>)
     83e:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     842:	ldrsb.w	r3, [sp, #23]
  setup_ready=1;
     846:	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     848:	ldrsh.w	r2, [sp, #16]
     84c:	str	r3, [sp, #12]
     84e:	ldrsb.w	r3, [sp, #22]
     852:	ldr	r1, [pc, #116]	; (8c8 <setup+0x140>)
     854:	str	r3, [sp, #8]
     856:	ldrsb.w	r3, [sp, #21]
     85a:	ldr	r0, [pc, #92]	; (8b8 <setup+0x130>)
     85c:	str	r3, [sp, #4]
     85e:	ldrsb.w	r3, [sp, #19]
     862:	str	r3, [sp, #0]
     864:	ldrsb.w	r3, [sp, #18]
     868:	bl	c71c <Print::printf(char const*, ...)>
  Serial.println();
     86c:	ldr	r0, [pc, #72]	; (8b8 <setup+0x130>)
     86e:	bl	c6e4 <Print::println()>
  Serial.println("filing_init");
     872:	ldr	r1, [pc, #88]	; (8cc <setup+0x144>)
     874:	ldr	r0, [pc, #64]	; (8b8 <setup+0x130>)
     876:	bl	190 <Print::println(char const*) [clone .isra.0]>
  filing_init();
     87a:	bl	337c <filing_init()>
  setup_ready=1;
     87e:	ldr	r3, [pc, #80]	; (8d0 <setup+0x148>)
  Serial.println("Setup done");
     880:	ldr	r1, [pc, #80]	; (8d4 <setup+0x14c>)
     882:	ldr	r0, [pc, #52]	; (8b8 <setup+0x130>)
  setup_ready=1;
     884:	str	r4, [r3, #0]
  Serial.println("Setup done");
     886:	bl	190 <Print::println(char const*) [clone .isra.0]>
    setup1();
     88a:	bl	4a0 <setup1()>
    pinMode(13,OUTPUT);
     88e:	mov	r1, r4
     890:	movs	r0, #13
     892:	bl	bef0 <pinMode>
}
     896:	add	sp, #28
     898:	pop	{r4, r5, r6, r7, pc}
     89a:	nop
     89c:	.word	0x20015374
     8a0:	.word	0x02dc6c00
     8a4:	.word	0x200155dd
     8a8:	.word	0x2001537c
     8ac:	.word	0x20015468
     8b0:	.word	0x200022f6
     8b4:	.word	0x2000109a
     8b8:	.word	0x20001d30
     8bc:	.word	0x20001471
     8c0:	.word	0x20001d24
     8c4:	.word	0x2000147e
     8c8:	.word	0x20001493
     8cc:	.word	0x200014ba
     8d0:	.word	0x200151b4
     8d4:	.word	0x200014c6

000008d8 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     8d8:	push	{r4, lr}
     8da:	mov	r4, r0
		release();
     8dc:	bl	c548 <DMAChannel::release()>
	}
     8e0:	mov	r0, r4
     8e2:	pop	{r4, pc}

000008e4 <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     8e4:	push	{r3, r4, r5, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     8e6:	ldr	r3, [pc, #148]	; (97c <acq_isr()+0x98>)
     8e8:	ldr	r2, [r3, #0]
     8ea:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     8ec:	ldrb	r2, [r3, #4]
     8ee:	ldr	r3, [pc, #144]	; (980 <acq_isr()+0x9c>)
     8f0:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     8f2:	ldr	r2, [pc, #144]	; (984 <acq_isr()+0xa0>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     8f4:	sub.w	r3, r2, #2048	; 0x800
     8f8:	cmp	r1, r2
     8fa:	it	cc
     8fc:	movcc	r3, r2
	uint32_t end_addr = (uint32_t)addr + size;
     8fe:	add.w	r0, r3, #2048	; 0x800
	asm("dsb");
     902:	dsb	sy
     906:	add.w	r2, r3, #32
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     90a:	mov	r1, r3
		SCB_CACHE_DCIMVAC = location;
     90c:	mov.w	r4, #3758153728	; 0xe000e000
     910:	cmp	r2, r0
     912:	ite	hi
     914:	movhi	r2, #1
     916:	movls	r2, #64	; 0x40
     918:	add.w	r2, r3, r2, lsl #5
     91c:	str.w	r1, [r4, #3932]	; 0xf5c
		location += 32;
     920:	adds	r1, #32
	} while (location < end_addr);
     922:	cmp	r1, r2
     924:	bne.n	91c <acq_isr()+0x38>
	asm("dsb");
     926:	dsb	sy
	asm("isb");
     92a:	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     92e:	ldr	r1, [pc, #88]	; (988 <acq_isr()+0xa4>)
     930:	ldr	r4, [pc, #88]	; (98c <acq_isr()+0xa8>)
     932:	ldr	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     934:	ldr	r5, [pc, #88]	; (990 <acq_isr()+0xac>)
{ procCount++;
     936:	adds	r2, #1
     938:	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     93a:	ldrh	r1, [r5, #0]
     93c:	adds	r3, #16
     93e:	ldr.w	r2, [r3, #-8]
     942:	sxth	r1, r1
     944:	cmp	r0, r3
     946:	asr.w	r2, r2, r1
     94a:	str.w	r2, [r4], #4
     94e:	bne.n	93a <acq_isr()+0x56>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     950:	ldr	r2, [pc, #64]	; (994 <acq_isr()+0xb0>)
     952:	ldrh	r3, [r2, #0]
     954:	sxth	r3, r3
     956:	cbnz	r3, 96a <acq_isr()+0x86>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     958:	ldr	r0, [pc, #48]	; (98c <acq_isr()+0xa8>)
     95a:	bl	2864 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     95e:	cbnz	r0, 968 <acq_isr()+0x84>
     960:	ldr	r2, [pc, #52]	; (998 <acq_isr()+0xb4>)
     962:	ldr	r3, [r2, #0]
     964:	adds	r3, #1
     966:	str	r3, [r2, #0]
  }
     968:	pop	{r3, r4, r5, pc}
  else if(proc==1)
     96a:	ldrh	r3, [r2, #0]
     96c:	sxth	r3, r3
     96e:	cmp	r3, #1
     970:	bne.n	968 <acq_isr()+0x84>
   if(!compress((void *)acqBuffer)) procMiss++;
     972:	ldr	r0, [pc, #24]	; (98c <acq_isr()+0xa8>)
     974:	bl	3430 <compress(void*)>
     978:	b.n	95e <acq_isr()+0x7a>
     97a:	nop
     97c:	.word	0x20013fdc
     980:	.word	0x400e8000
     984:	.word	0x20200800
     988:	.word	0x20014c50
     98c:	.word	0x20014998
     990:	.word	0x20015466
     994:	.word	0x200153c2
     998:	.word	0x20014c54
     99c:	.word	0x00000000

000009a0 <setAudioFrequency(int)>:
  {
     9a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     9a4:	ldr.w	r9, [pc, #332]	; af4 <setAudioFrequency(int)+0x154>
     9a8:	movs	r2, #5
     9aa:	mov	r5, r0
     9ac:	ldr	r1, [pc, #312]	; (ae8 <setAudioFrequency(int)+0x148>)
     9ae:	ldr.w	r3, [r9]
     9b2:	mov	r0, r9
     9b4:	ldr	r3, [r3, #4]
     9b6:	vpush	{d8}
     9ba:	sub	sp, #12
     9bc:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     9be:	mov.w	r1, #256	; 0x100
     9c2:	mov	r0, r9
     9c4:	bl	c6d2 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     9c8:	mov	r0, r9
     9ca:	bl	c6e4 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     9ce:	movs	r3, #26
     9d0:	lsls	r1, r5, #8
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9d2:	ldr	r0, [pc, #280]	; (aec <setAudioFrequency(int)+0x14c>)
    {   n0++;
     9d4:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9d6:	mov	r2, r1
        n1=0;
     9d8:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9da:	mul.w	ip, r0, r3
        {   n1++; 
     9de:	mov	r6, r4
     9e0:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9e2:	sdiv	r8, ip, r2
     9e6:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     9ea:	cmp	r7, #64	; 0x40
     9ec:	ble.n	9fa <setAudioFrequency(int)+0x5a>
     9ee:	cmp	r4, #9
     9f0:	add	r2, r1
     9f2:	bne.n	9de <setAudioFrequency(int)+0x3e>
    } while ((n2>64 && n0<54));
     9f4:	cmp	r3, #54	; 0x36
     9f6:	bne.n	9d4 <setAudioFrequency(int)+0x34>
     9f8:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9fa:	mov	r2, r5
     9fc:	ldr	r1, [pc, #240]	; (af0 <setAudioFrequency(int)+0x150>)
     9fe:	ldr	r0, [pc, #244]	; (af4 <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a00:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a04:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     a06:	strd	r4, r7, [sp]
     a0a:	bl	c71c <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a0e:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     a12:	ldr.w	r3, [r9]
     a16:	movs	r2, #3
     a18:	vcvt.f64.s32	d7, s15
     a1c:	ldr	r1, [pc, #216]	; (af8 <setAudioFrequency(int)+0x158>)
     a1e:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a20:	and.w	r6, r6, #448	; 0x1c0
     a24:	ldr	r0, [pc, #204]	; (af4 <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a26:	vldr	d6, [pc, #168]	; ad0 <setAudioFrequency(int)+0x130>
     a2a:	vmul.f64	d7, d7, d6
     a2e:	vmov	s13, r4
     a32:	vcvt.f64.s32	d6, s13
     a36:	vmul.f64	d7, d7, d6
     a3a:	vmov	s13, r7
     a3e:	vcvt.f64.s32	d6, s13
     a42:	vmul.f64	d7, d7, d6
     a46:	vldr	d6, [pc, #144]	; ad8 <setAudioFrequency(int)+0x138>
     a4a:	vdiv.f64	d8, d7, d6
     a4e:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a50:	movs	r1, #2
     a52:	ldr	r0, [pc, #160]	; (af4 <setAudioFrequency(int)+0x154>)
     a54:	vmov.f64	d0, d8
     a58:	bl	c7e0 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     a5c:	ldr	r0, [pc, #148]	; (af4 <setAudioFrequency(int)+0x154>)
     a5e:	bl	c6e4 <Print::println()>
    int c0 = C;
     a62:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     a66:	movw	r2, #10000	; 0x2710
    int c0 = C;
     a6a:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     a6e:	mul.w	r3, r2, r0
     a72:	vmov	s14, r3
     a76:	vldr	d6, [pc, #104]	; ae0 <setAudioFrequency(int)+0x140>
     a7a:	vcvt.f64.s32	d7, s14
     a7e:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     a82:	vcvt.s32.f64	s15, d7
     a86:	vmov	r1, s15
     a8a:	bl	12080 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a8e:	ldr	r2, [pc, #108]	; (afc <setAudioFrequency(int)+0x15c>)
     a90:	ldr	r3, [r2, #28]
     a92:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     a96:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a9a:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a9c:	ldr	r3, [r2, #40]	; 0x28
     a9e:	bic.w	r3, r3, #510	; 0x1fe
     aa2:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     aa6:	orr.w	r3, r3, r8
     aaa:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     aac:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     aae:	sub.w	r2, r2, #327680	; 0x50000
     ab2:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     ab4:	bic.w	r3, r3, #524288	; 0x80000
     ab8:	bic.w	r3, r3, #7
     abc:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     ac0:	str	r3, [r2, #4]
  }
     ac2:	add	sp, #12
     ac4:	vpop	{d8}
     ac8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     acc:	nop.w
     ad0:	.word	0x00000000
     ad4:	.word	0x40700000
     ad8:	.word	0x00000000
     adc:	.word	0x4176e360
     ae0:	.word	0x00000000
     ae4:	.word	0x40c38800
     ae8:	.word	0x20000d9a
     aec:	.word	0x016e3600
     af0:	.word	0x20000da0
     af4:	.word	0x20001d30
     af8:	.word	0x20000dbd
     afc:	.word	0x400fc000

00000b00 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b00:	ldr	r2, [pc, #100]	; (b68 <i2s_setup()+0x68>)
     b02:	ldr	r3, [r2, #124]	; 0x7c
  {
     b04:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b06:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b0a:	ldr	r4, [pc, #96]	; (b6c <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b0c:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b0e:	ldr.w	r3, [r4, #136]	; 0x88
     b12:	cmp	r3, #0
     b14:	blt.n	b66 <i2s_setup()+0x66>
    int fs = fsamp;
     b16:	ldr	r3, [pc, #88]	; (b70 <i2s_setup()+0x70>)
     b18:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     b1a:	bl	9a0 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     b1e:	ldr	r3, [pc, #84]	; (b74 <i2s_setup()+0x74>)
     b20:	movs	r2, #3
     b22:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     b26:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     b2a:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     b2e:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     b32:	movs	r2, #2
     b34:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     b38:	movs	r3, #0
     b3a:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     b3e:	movs	r3, #4
     b40:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     b44:	mov.w	r3, #83886080	; 0x5000000
     b48:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     b4c:	mov.w	r3, #65536	; 0x10000
     b50:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     b54:	ldr	r3, [pc, #32]	; (b78 <i2s_setup()+0x78>)
     b56:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     b5a:	ldr	r3, [pc, #32]	; (b7c <i2s_setup()+0x7c>)
     b5c:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     b60:	ldr	r3, [pc, #28]	; (b80 <i2s_setup()+0x80>)
     b62:	str.w	r3, [r4, #136]	; 0x88
  }
     b66:	pop	{r4, pc}
     b68:	.word	0x400fc000
     b6c:	.word	0x40384000
     b70:	.word	0x200022d4
     b74:	.word	0x401f8000
     b78:	.word	0x0003001b
     b7c:	.word	0x1f1f1f00
     b80:	.word	0x92000001

00000b84 <dma_setup()>:
  {
     b84:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     b86:	ldr	r4, [pc, #128]	; (c08 <dma_setup()+0x84>)
     b88:	movs	r1, #1
     b8a:	mov	r0, r4
     b8c:	bl	c4ac <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b90:	ldr	r3, [r4, #0]
     b92:	ldr	r2, [pc, #120]	; (c0c <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b94:	ldr	r1, [pc, #120]	; (c10 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b96:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b98:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     b9a:	ldr	r0, [pc, #120]	; (c14 <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     b9c:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     b9e:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     ba0:	ldr	r0, [pc, #116]	; (c18 <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     ba2:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     ba6:	mov.w	r2, #1024	; 0x400
    dma.TCD->SLAST = 0;
     baa:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     bac:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     bae:	sub.w	r2, r2, #5120	; 0x1400
    dma.TCD->SLAST = 0;
     bb2:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     bb4:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     bb6:	ldrh	r2, [r3, #22]
     bb8:	uxth	r2, r2
     bba:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     bbc:	movs	r2, #6
     bbe:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     bc0:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bc2:	ldr	r2, [pc, #88]	; (c1c <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     bc4:	lsls	r3, r3, #2
     bc6:	add.w	r3, r3, #1073741824	; 0x40000000
     bca:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     bce:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bd0:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     bd2:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     bd4:	ldr	r2, [pc, #72]	; (c20 <dma_setup()+0x9c>)
     bd6:	add.w	r1, r3, #16
     bda:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bde:	asrs	r2, r3, #5
     be0:	and.w	r0, r3, #31
     be4:	movs	r1, #1
     be6:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bea:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bee:	lsls	r1, r0
     bf0:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bf2:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bf6:	lsls	r2, r2, #2
     bf8:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bfa:	movs	r2, #96	; 0x60
     bfc:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     bfe:	ldr	r3, [pc, #36]	; (c24 <dma_setup()+0xa0>)
     c00:	ldrb	r2, [r4, #4]
     c02:	strb	r2, [r3, #27]
  }
     c04:	pop	{r4, pc}
     c06:	nop
     c08:	.word	0x20013fdc
     c0c:	.word	0x403840a0
     c10:	.word	0x02020000
     c14:	.word	0x20200000
     c18:	.word	0x000008e5
     c1c:	.word	0x80000013
     c20:	.word	0x20002400
     c24:	.word	0x400e8000

00000c28 <acqModifyFrequency(unsigned long)>:
  {
     c28:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     c2a:	ldr	r4, [pc, #32]	; (c4c <acqModifyFrequency(unsigned long)+0x24>)
     c2c:	ldr.w	r3, [r4, #136]	; 0x88
     c30:	bic.w	r3, r3, #2415919104	; 0x90000000
     c34:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     c38:	bl	9a0 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     c3c:	ldr.w	r3, [r4, #136]	; 0x88
     c40:	orr.w	r3, r3, #2415919104	; 0x90000000
     c44:	str.w	r3, [r4, #136]	; 0x88
  }
     c48:	pop	{r4, pc}
     c4a:	nop
     c4c:	.word	0x40384000

00000c50 <_GLOBAL__sub_I_procCount>:
		begin();
     c50:	ldr	r0, [pc, #20]	; (c68 <_GLOBAL__sub_I_procCount+0x18>)
     c52:	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     c54:	push	{r3, lr}
     c56:	bl	c4ac <DMAChannel::begin(bool)>
  static DMAChannel dma;
     c5a:	ldr	r2, [pc, #16]	; (c6c <_GLOBAL__sub_I_procCount+0x1c>)
     c5c:	ldr	r1, [pc, #16]	; (c70 <_GLOBAL__sub_I_procCount+0x20>)
     c5e:	ldr	r0, [pc, #8]	; (c68 <_GLOBAL__sub_I_procCount+0x18>)
}
     c60:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     c64:	b.w	c910 <__aeabi_atexit>
     c68:	.word	0x20013fdc
     c6c:	.word	0x20002108
     c70:	.word	0x000008d9

00000c74 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
      mSD_Base() {
        fsCount = 0;
      }

      void sd_addFilesystem(SdFs &fs, const char *name) {
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c74:	ldr	r3, [r0, #4]
     c76:	cmp	r3, #19

// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
{ 
public:
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c78:	push	{r4, lr}
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c7a:	bgt.n	c88 <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x14>
          sd_name[fsCount] = name;
     c7c:	add.w	r4, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
     c80:	adds	r3, #1
          sd_name[fsCount] = name;
     c82:	str	r2, [r4, #8]
          sdx[fsCount++] = &fs;
     c84:	str	r3, [r0, #4]
     c86:	str	r1, [r4, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c88:	pop	{r4, pc}

00000c8a <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = O_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
     c8a:	ldr	r0, [r0, #4]
     c8c:	bx	lr

00000c8e <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
     c8e:	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
     c92:	ldr	r0, [r1, #8]
     c94:	bx	lr

00000c96 <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
     c96:	movs	r0, #0
     c98:	bx	lr

00000c9a <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
     c9a:	movs	r0, #1
     c9c:	bx	lr

00000c9e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     c9e:	push	{r4}
    *name = 0;
     ca0:	movs	r4, #0
     ca2:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     ca4:	ldr	r3, [r0, #56]	; 0x38
     ca6:	cbz	r3, cb2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     ca8:	mov	r0, r3
  }
     caa:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     cae:	b.w	6f28 <FatFile::getName(char*, unsigned int)>
     cb2:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     cb4:	cbz	r0, cbe <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     cb6:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     cba:	b.w	57ec <ExFatFile::getName8(char*, unsigned int)>
     cbe:	ldr.w	r4, [sp], #4
     cc2:	bx	lr

00000cc4 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cc4:	push	{r4, lr}
     cc6:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     cc8:	movs	r3, #0
     cca:	movs	r2, #10
     ccc:	bl	c736 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cd0:	mov	r0, r4
     cd2:	ldmia.w	sp!, {r4, lr}
     cd6:	b.w	c6e4 <Print::println()>

00000cda <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cda:	push	{r0, r1, r4, lr}
     cdc:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
     cde:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     ce0:	cbz	r1, cfa <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     ce2:	str	r1, [sp, #4]
     ce4:	bl	ed90 <strlen>
     ce8:	ldr	r3, [r4, #0]
     cea:	mov	r2, r0
     cec:	ldr	r1, [sp, #4]
     cee:	mov	r0, r4
     cf0:	ldr	r3, [r3, #4]
     cf2:	add	sp, #8
     cf4:	ldmia.w	sp!, {r4, lr}
     cf8:	bx	r3
     cfa:	add	sp, #8
     cfc:	pop	{r4, pc}
	...

00000d00 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
     d00:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     d02:	ldr	r4, [pc, #44]	; (d30 <dbgPrint(unsigned short)+0x30>)
     d04:	mov	r5, r0
     d06:	ldr	r1, [pc, #44]	; (d34 <dbgPrint(unsigned short)+0x34>)
     d08:	mov	r0, r4
     d0a:	bl	cda <Print::write(char const*)>
     d0e:	ldr	r1, [pc, #40]	; (d38 <dbgPrint(unsigned short)+0x38>)
     d10:	mov	r0, r4
     d12:	bl	cda <Print::write(char const*)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     d16:	movs	r0, #46	; 0x2e
     d18:	bl	a920 <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     d1c:	mov	r1, r5
     d1e:	mov	r0, r4
     d20:	bl	c6d2 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     d24:	mov	r0, r4
  }
     d26:	ldmia.w	sp!, {r3, r4, r5, lr}
     d2a:	b.w	c6e4 <Print::println()>
     d2e:	nop
     d30:	.word	0x20001d30
     d34:	.word	0x200010ea
     d38:	.word	0x200010f5

00000d3c <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d3c:	push	{r3, r4, r5, lr}
     d3e:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
     d40:	bl	cda <Print::write(char const*)>
     d44:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
     d46:	mov	r0, r5
     d48:	bl	c6e4 <Print::println()>
     d4c:	add	r0, r4
     d4e:	pop	{r3, r4, r5, pc}

00000d50 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     d50:	ldr.w	r3, [r0, #1152]	; 0x480
     d54:	cbz	r3, d62 <FsVolume::bytesPerCluster() const+0x12>
     d56:	ldrb	r3, [r3, #6]
     d58:	mov.w	r0, #512	; 0x200
     d5c:	lsls	r0, r3
     d5e:	uxth	r0, r0
     d60:	bx	lr
     d62:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d66:	cbz	r0, d6c <FsVolume::bytesPerCluster() const+0x1c>
     d68:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     d6c:	bx	lr

00000d6e <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     d6e:	ldr.w	r3, [r0, #1152]	; 0x480
     d72:	cbz	r3, d7a <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     d74:	ldr	r0, [r3, #28]
     d76:	subs	r0, #1
     d78:	bx	lr
     d7a:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     d7e:	cbz	r0, d84 <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     d80:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     d84:	bx	lr

00000d86 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
     d86:	add.w	r1, r0, r1, lsl #2
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
     d8a:	push	{r3, r4, r5, lr}
     d8c:	ldr	r5, [r1, #88]	; 0x58
     d8e:	mov	r0, r5
     d90:	bl	d6e <FsVolume::clusterCount() const>
     d94:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
     d96:	mov	r0, r5
     d98:	bl	d50 <FsVolume::bytesPerCluster() const>
     d9c:	umull	r0, r1, r4, r0
     da0:	pop	{r3, r4, r5, pc}

00000da2 <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     da2:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     da6:	push	{r4, r5, lr}
     da8:	mov	r5, r1
     daa:	sub	sp, #68	; 0x44
     dac:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     dae:	cbz	r3, dd4 <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     db0:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     db2:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     db6:	add	r0, sp, #8
     db8:	mov	r3, r2
     dba:	str	r2, [sp, #8]
     dbc:	mov	r2, r5
     dbe:	str	r1, [sp, #4]
     dc0:	bl	7544 <FatFile::open(FatFile*, char const*, int)>
     dc4:	ldr	r1, [sp, #4]
     dc6:	cbz	r0, dd0 <FsVolume::rename(char const*, char const*)+0x2e>
     dc8:	mov	r2, r4
     dca:	add	r0, sp, #8
     dcc:	bl	7804 <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     dd0:	add	sp, #68	; 0x44
     dd2:	pop	{r4, r5, pc}
     dd4:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     dd8:	cmp	r0, #0
     dda:	beq.n	dd0 <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     ddc:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     de0:	mov	r2, r5
     de2:	add	r0, sp, #8
  ExFatFile() {}
     de4:	str	r3, [sp, #56]	; 0x38
     de6:	str	r1, [sp, #4]
     de8:	bl	6010 <ExFatFile::open(ExFatFile*, char const*, int)>
     dec:	ldr	r1, [sp, #4]
     dee:	cbnz	r0, df4 <FsVolume::rename(char const*, char const*)+0x52>
     df0:	movs	r0, #0
     df2:	b.n	dd0 <FsVolume::rename(char const*, char const*)+0x2e>
     df4:	mov	r2, r4
     df6:	add	r0, sp, #8
     df8:	bl	6a0c <ExFatFile::rename(ExFatFile*, char const*)>
     dfc:	cmp	r0, #0
     dfe:	beq.n	df0 <FsVolume::rename(char const*, char const*)+0x4e>
     e00:	b.n	dd0 <FsVolume::rename(char const*, char const*)+0x2e>

00000e02 <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     e02:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     e04:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     e06:	cbz	r3, e20 <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     e08:	ldrb	r0, [r3, #0]
     e0a:	ands.w	r0, r0, #8
     e0e:	ittt	ne
     e10:	ldrne	r0, [r3, #28]
     e12:	ldrne	r3, [r3, #20]
     e14:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     e16:	cmp	r0, #0
     e18:	it	lt
     e1a:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     e1e:	pop	{r4, pc}
     e20:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     e22:	cmp	r0, #0
     e24:	beq.n	e1e <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e26:	ldrb.w	r3, [r0, #49]	; 0x31
     e2a:	ands.w	r3, r3, #8
     e2e:	beq.n	e4e <FsBaseFile::available() const+0x4c>
     e30:	ldrd	r1, r3, [r0, #16]
     e34:	ldrd	r2, r4, [r0]
     e38:	subs	r0, r1, r2
     e3a:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e3e:	cmp.w	r0, #2147483648	; 0x80000000
     e42:	sbcs.w	r3, r3, #0
     e46:	it	cs
     e48:	mvncs.w	r0, #2147483648	; 0x80000000
     e4c:	b.n	e1e <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e4e:	mov	r0, r3
     e50:	b.n	e3e <FsBaseFile::available() const+0x3c>

00000e52 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     e52:	ldr	r3, [r0, #56]	; 0x38
     e54:	cbz	r3, e5c <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)+0xa>
     e56:	mov	r0, r3
     e58:	b.w	7626 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     e5c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     e5e:	cbz	r0, e64 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)+0x12>
     e60:	b.w	594a <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
  }
     e64:	bx	lr

00000e66 <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     e66:	ldr	r3, [r0, #56]	; 0x38
     e68:	cbz	r3, e78 <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     e6a:	ldrb	r3, [r3, #0]
     e6c:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     e70:	ite	ne
     e72:	movne	r0, #1
     e74:	moveq	r0, #0
  }
     e76:	bx	lr
     e78:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     e7a:	cmp	r0, #0
     e7c:	beq.n	e76 <FsBaseFile::isDir() const+0x10>
     e7e:	ldrb.w	r3, [r0, #49]	; 0x31
     e82:	tst.w	r3, #80	; 0x50
     e86:	b.n	e70 <FsBaseFile::isDir() const+0xa>

00000e88 <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     e88:	ldr	r3, [r0, #56]	; 0x38
     e8a:	cbnz	r3, e96 <FsBaseFile::isOpen() const+0xe>
     e8c:	ldr	r0, [r0, #60]	; 0x3c
     e8e:	subs	r0, #0
     e90:	it	ne
     e92:	movne	r0, #1
     e94:	bx	lr
     e96:	movs	r0, #1
     e98:	bx	lr

00000e9a <MTPStorage_SD::CloseIndex()>:
  {
     e9a:	push	{r3, r4, r5, lr}
    if(index_.isOpen()) {index_.close();}
     e9c:	add.w	r5, r0, #184	; 0xb8
  {
     ea0:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
     ea2:	mov	r0, r5
     ea4:	bl	e88 <FsBaseFile::isOpen() const>
     ea8:	cbz	r0, eb0 <MTPStorage_SD::CloseIndex()+0x16>
     eaa:	mov	r0, r5
     eac:	bl	8714 <FsBaseFile::close()>
    index_generated = false;
     eb0:	movs	r3, #0
     eb2:	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
     eb6:	str.w	r3, [r4, #424]	; 0x1a8
  }
     eba:	pop	{r3, r4, r5, pc}

00000ebc <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     ebc:	ldr	r3, [r0, #56]	; 0x38
     ebe:	cbz	r3, ec6 <FsBaseFile::read(void*, unsigned int)+0xa>
     ec0:	mov	r0, r3
     ec2:	b.w	7080 <FatFile::read(void*, unsigned int)>
     ec6:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     ec8:	cbz	r0, ece <FsBaseFile::read(void*, unsigned int)+0x12>
     eca:	b.w	5a30 <ExFatFile::read(void*, unsigned int)>
  }
     ece:	mov.w	r0, #4294967295
     ed2:	bx	lr

00000ed4 <FsBaseFile::seekSet(unsigned long long)>:
  bool seekSet(uint64_t pos) {
     ed4:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ed6:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     ed8:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     eda:	cbz	r5, ee6 <FsBaseFile::seekSet(unsigned long long)+0x12>
     edc:	cbnz	r3, ef0 <FsBaseFile::seekSet(unsigned long long)+0x1c>
     ede:	mov	r0, r5
  }
     ee0:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ee2:	b.w	726a <FatFile::seekSet(unsigned long)>
     ee6:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     ee8:	cbz	r0, ef0 <FsBaseFile::seekSet(unsigned long long)+0x1c>
  }
     eea:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     eec:	b.w	5be0 <ExFatFile::seekSet(unsigned long long)>
  }
     ef0:	movs	r0, #0
     ef2:	pop	{r4, r5}
     ef4:	bx	lr

00000ef6 <MTPStorage_SD::write(char const*, unsigned long)>:
  {
     ef6:	push	{r3, lr}
      size_t ret = file_.write(data,bytes);
     ef8:	add.w	r0, r0, #264	; 0x108
     efc:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     f00:	pop	{r3, pc}
	...

00000f04 <FsFile::FsFile()>:
     f04:	movs	r2, #0
     f06:	mov.w	r1, #1000	; 0x3e8
     f0a:	strb	r2, [r0, #12]
     f0c:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     f10:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f14:	ldr	r2, [pc, #4]	; (f1c <FsFile::FsFile()+0x18>)
     f16:	str	r2, [r0, #0]
     f18:	bx	lr
     f1a:	nop
     f1c:	.word	0x20000554

00000f20 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     f20:	ldr	r3, [pc, #16]	; (f34 <FsFile::~FsFile()+0x14>)
     f22:	push	{r4, lr}
     f24:	mov	r4, r0
     f26:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     f2a:	bl	8714 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f2e:	mov	r0, r4
     f30:	pop	{r4, pc}
     f32:	nop
     f34:	.word	0x2000042c

00000f38 <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     f38:	add.w	r1, r0, r1, lsl #2
     f3c:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     f3e:	ldr.w	r1, [r3, #1152]	; 0x480
     f42:	push	{lr}
     f44:	sub	sp, #60	; 0x3c
     f46:	cbz	r1, f5e <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     f48:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     f4a:	add.w	r1, r1, #1096	; 0x448
     f4e:	mov	r0, sp
     f50:	str	r3, [sp, #0]
     f52:	movs	r3, #1
     f54:	bl	7760 <FatFile::mkdir(FatFile*, char const*, bool)>
     f58:	add	sp, #60	; 0x3c
     f5a:	ldr.w	pc, [sp], #4
     f5e:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f62:	cmp	r0, #0
     f64:	beq.n	f58 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f66:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f68:	movs	r3, #1
     f6a:	add.w	r1, r0, #1096	; 0x448
     f6e:	mov	r0, sp
     f70:	bl	694e <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f74:	b.n	f58 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f78 <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f78:	push	{r4, r5, lr}
     f7a:	mov	r4, r0
     f7c:	sub	sp, #68	; 0x44
     f7e:	mov	r5, r1
     f80:	ldr	r0, [pc, #84]	; (fd8 <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     f82:	mov	r1, r2
     f84:	str	r2, [sp, #4]
     f86:	bl	d3c <Print::println(char const*)>
    return m_fVol ? m_fVol->remove(path) :
     f8a:	ldr	r2, [sp, #4]
     f8c:	add.w	r1, r4, r5, lsl #2
     f90:	ldr	r3, [r1, #84]	; 0x54
     f92:	ldr.w	r1, [r3, #1152]	; 0x480
     f96:	cbz	r1, fb0 <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     f98:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f9a:	add	r0, sp, #8
     f9c:	str	r3, [sp, #8]
     f9e:	movs	r3, #1
     fa0:	bl	75e2 <FatFile::open(FatVolume*, char const*, int)>
     fa4:	cbz	r0, fac <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fa6:	add	r0, sp, #8
     fa8:	bl	865c <FatFile::remove()>
     fac:	add	sp, #68	; 0x44
     fae:	pop	{r4, r5, pc}
     fb0:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
     fb4:	cmp	r0, #0
     fb6:	beq.n	fac <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fb8:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     fba:	movs	r3, #1
     fbc:	mov	r1, r0
     fbe:	add	r0, sp, #8
     fc0:	bl	60d6 <ExFatFile::open(ExFatVolume*, char const*, int)>
     fc4:	cbnz	r0, fca <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     fc6:	movs	r0, #0
     fc8:	b.n	fac <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fca:	add	r0, sp, #8
     fcc:	bl	6654 <ExFatFile::remove()>
     fd0:	cmp	r0, #0
     fd2:	beq.n	fc6 <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     fd4:	b.n	fac <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fd6:	nop
     fd8:	.word	0x20001d30

00000fdc <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
     fdc:	add.w	r1, r0, r1, lsl #2
     fe0:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
     fe2:	ldr.w	r1, [r3, #1152]	; 0x480
     fe6:	push	{lr}
     fe8:	sub	sp, #60	; 0x3c
     fea:	cbz	r1, 1004 <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
     fec:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fee:	mov	r0, sp
     ff0:	str	r3, [sp, #0]
     ff2:	bl	75e2 <FatFile::open(FatVolume*, char const*, int)>
     ff6:	cbz	r0, ffe <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     ff8:	mov	r0, sp
     ffa:	bl	730a <FatFile::rmdir()>
     ffe:	add	sp, #60	; 0x3c
    1000:	ldr.w	pc, [sp], #4
    1004:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    1008:	cmp	r0, #0
    100a:	beq.n	ffe <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    100c:	mov	r3, r1
    100e:	str	r1, [sp, #48]	; 0x30
    1010:	mov	r1, r0
    1012:	mov	r0, sp
    1014:	bl	60d6 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1018:	cbnz	r0, 101e <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
    101a:	movs	r0, #0
    101c:	b.n	ffe <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    101e:	mov	r0, sp
    1020:	bl	66e0 <ExFatFile::rmdir()>
    1024:	cmp	r0, #0
    1026:	beq.n	101a <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
    1028:	b.n	ffe <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
	...

0000102c <MTPStorage_SD::OpenIndex()>:
  { 
    102c:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
    102e:	add.w	r5, r0, #184	; 0xb8
  { 
    1032:	sub	sp, #84	; 0x54
    1034:	mov	r4, r0
    if(index_.isOpen()) return; // only once
    1036:	mov	r0, r5
    1038:	bl	e88 <FsBaseFile::isOpen() const>
    103c:	cbnz	r0, 107e <MTPStorage_SD::OpenIndex()+0x52>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    103e:	ldr	r2, [pc, #68]	; (1084 <MTPStorage_SD::OpenIndex()+0x58>)
    1040:	movw	r3, #514	; 0x202
    1044:	ldr	r1, [r4, #88]	; 0x58
    1046:	mov	r0, sp
    1048:	bl	8948 <FsVolume::open(char const*, int)>
class Print
    104c:	ldr	r3, [sp, #4]
    104e:	add	r1, sp, #16
    1050:	mov	r0, r5
    1052:	str.w	r3, [r4, #172]	; 0xac
class Stream : public Print
    1056:	ldr	r3, [sp, #8]
    1058:	str.w	r3, [r4, #176]	; 0xb0
    105c:	ldrb.w	r3, [sp, #12]
    1060:	strb.w	r3, [r4, #180]	; 0xb4
    1064:	bl	873e <FsBaseFile::operator=(FsBaseFile const&)>
    index_=sd_open(0,indexFile, (O_RDWR | O_CREAT));
    1068:	mov	r0, sp
    106a:	bl	f20 <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    106e:	mov	r0, r5
    1070:	bl	e88 <FsBaseFile::isOpen() const>
    1074:	cbnz	r0, 107e <MTPStorage_SD::OpenIndex()+0x52>
    1076:	ldr	r1, [pc, #16]	; (1088 <MTPStorage_SD::OpenIndex()+0x5c>)
    1078:	ldr	r0, [pc, #16]	; (108c <MTPStorage_SD::OpenIndex()+0x60>)
    107a:	bl	d3c <Print::println(char const*)>
  }
    107e:	add	sp, #84	; 0x54
    1080:	pop	{r4, r5, pc}
    1082:	nop
    1084:	.word	0x2000112d
    1088:	.word	0x2000113b
    108c:	.word	0x20001d30

00001090 <MTPStorage_SD::ResetIndex()>:
  void MTPStorage_SD::ResetIndex() {
    1090:	push	{r4, lr}
    1092:	mov	r4, r0
    if(!index_.isOpen()) return;
    1094:	adds	r0, #184	; 0xb8
    1096:	bl	e88 <FsBaseFile::isOpen() const>
    109a:	cbz	r0, 10bc <MTPStorage_SD::ResetIndex()+0x2c>
    CloseIndex();
    109c:	ldr	r3, [r4, #0]
    109e:	mov	r0, r4
    10a0:	ldr	r3, [r3, #64]	; 0x40
    10a2:	blx	r3
    all_scanned_ = false;
    10a4:	movs	r3, #0
    OpenIndex();
    10a6:	mov	r0, r4
    all_scanned_ = false;
    10a8:	strb.w	r3, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    10ac:	mvn.w	r3, #1
    10b0:	str.w	r3, [r4, #420]	; 0x1a4
  }
    10b4:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    10b8:	b.w	102c <MTPStorage_SD::OpenIndex()>
  }
    10bc:	pop	{r4, pc}

000010be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    10be:	push	{r0, r1, r4, r5, r6, lr}
    10c0:	mov	r4, r0
    10c2:	mov	r5, r1
    index_.seekSet((sizeof(r) * i));
    10c4:	mov.w	r6, #280	; 0x118
  { OpenIndex();
    10c8:	str	r2, [sp, #4]
    index_.seekSet((sizeof(r) * i));
    10ca:	adds	r4, #184	; 0xb8
  { OpenIndex();
    10cc:	bl	102c <MTPStorage_SD::OpenIndex()>
    index_.seekSet((sizeof(r) * i));
    10d0:	mul.w	r2, r6, r5
    10d4:	movs	r3, #0
    10d6:	mov	r0, r4
    10d8:	bl	ed4 <FsBaseFile::seekSet(unsigned long long)>
    index_.write((char*)&r, sizeof(r));
    10dc:	mov	r2, r6
    10de:	ldr	r1, [sp, #4]
    10e0:	mov	r0, r4
    10e2:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
    10e6:	add	sp, #8
    10e8:	pop	{r4, r5, r6, pc}

000010ea <MTPStorage_SD::AppendIndexRecord(Record const&)>:
  { uint32_t new_record = index_entries_++;
    10ea:	push	{r4, lr}
    10ec:	ldr.w	r4, [r0, #424]	; 0x1a8
    10f0:	mov	r2, r1
    10f2:	adds	r1, r4, #1
    10f4:	str.w	r1, [r0, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    10f8:	mov	r1, r4
    10fa:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    10fe:	mov	r0, r4
    1100:	pop	{r4, pc}
	...

00001104 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
    index_generated = true;
    1104:	movs	r3, #1
    sd_remove(0,indexFile);
    1106:	ldr	r2, [pc, #88]	; (1160 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    1108:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    110a:	push	{r4, r5, r6, r7, lr}
    110c:	mov	r4, r0
    index_generated = true;
    110e:	strb.w	r3, [r0, #428]	; 0x1ac
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    1112:	sub	sp, #284	; 0x11c
    sd_remove(0,indexFile);
    1114:	adds	r0, #4
    1116:	bl	f78 <mSD_Base::sd_remove(unsigned long, char const*)>
    index_entries_ = 0;
    111a:	movs	r5, #0
    num_storage = sd_getFSCount();
    111c:	ldr	r3, [r4, #4]
      r.parent = 0xFFFFFFFFUL; // 
    111e:	mov.w	r6, #4294967295
      strcpy(r.name, "/");
    1122:	ldr	r7, [pc, #64]	; (1164 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x60>)
    num_storage = sd_getFSCount();
    1124:	str.w	r3, [r4, #408]	; 0x198
    index_entries_ = 0;
    1128:	str.w	r5, [r4, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    112c:	ldr.w	r3, [r4, #408]	; 0x198
    1130:	cmp	r5, r3
    1132:	blt.n	1138 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x34>
  }
    1134:	add	sp, #284	; 0x11c
    1136:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    1138:	movs	r3, #0
      strcpy(r.name, "/");
    113a:	mov	r1, r7
    113c:	add	r0, sp, #24
      r.store = ii; // 
    113e:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    1142:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    1144:	adds	r5, #1
      r.sibling = 0;
    1146:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    114a:	movs	r3, #1
    114c:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    1150:	bl	ecdc <strcpy>
      AppendIndexRecord(r);
    1154:	mov	r1, sp
    1156:	mov	r0, r4
    1158:	bl	10ea <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    115c:	b.n	112c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x28>
    115e:	nop
    1160:	.word	0x2000112d
    1164:	.word	0x20000d7e

00001168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    1168:	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    116a:	mov.w	r7, #280	; 0x118
  {
    116e:	mov	r4, r1
    1170:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    1172:	movs	r1, #0
    1174:	mov	r2, r7
  {
    1176:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    1178:	bl	a1d4 <memset>
    if (i > index_entries_) 
    117c:	ldr.w	r3, [r4, #424]	; 0x1a8
    1180:	cmp	r3, r6
    1182:	bcc.n	11a2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3a>
    OpenIndex();
    1184:	mov	r0, r4
    index_.seekSet(sizeof(ret) * i);
    1186:	adds	r4, #184	; 0xb8
    OpenIndex();
    1188:	bl	102c <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    118c:	mul.w	r2, r7, r6
    1190:	movs	r3, #0
    1192:	mov	r0, r4
    1194:	bl	ed4 <FsBaseFile::seekSet(unsigned long long)>
    index_.read((char *)&ret, sizeof(ret));
    1198:	mov	r2, r7
    119a:	mov	r1, r5
    119c:	mov	r0, r4
    119e:	bl	ebc <FsBaseFile::read(void*, unsigned int)>
  }
    11a2:	mov	r0, r5
    11a4:	pop	{r3, r4, r5, r6, r7, pc}

000011a6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    11a6:	push	{r4, r5, lr}
    11a8:	mov	r4, r0
    11aa:	sub	sp, #284	; 0x11c
    { if (next_ == 0) return 0;
    11ac:	ldr.w	r5, [r4, #432]	; 0x1b0
    11b0:	cbz	r5, 11d0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>
      Record r = ReadIndexRecord(ret);
    11b2:	mov	r2, r5
    11b4:	mov	r1, r4
    11b6:	mov	r0, sp
    11b8:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    11bc:	ldrb.w	r3, [r4, #436]	; 0x1b4
    11c0:	cbz	r3, 11d6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    11c2:	ldr	r3, [sp, #8]
        if (next_ >= index_entries_) next_ = 0;
    11c4:	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    11c8:	ldrb.w	r3, [sp, #24]
    11cc:	cmp	r3, #0
    11ce:	beq.n	11ac <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
  }
    11d0:	mov	r0, r5
    11d2:	add	sp, #284	; 0x11c
    11d4:	pop	{r4, r5, pc}
      { next_++;
    11d6:	ldr.w	r1, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    11da:	ldr.w	r2, [r4, #424]	; 0x1a8
      { next_++;
    11de:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    11e0:	cmp	r1, r2
    11e2:	it	cc
    11e4:	movcc	r3, r1
    11e6:	b.n	11c4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

000011e8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)>:
  {
    11e8:	push	{r4, r5, lr}
    11ea:	sub	sp, #308	; 0x134
    11ec:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    11ee:	mov	r2, r1
    11f0:	mov	r1, r0
    11f2:	add	r0, sp, #24
  {
    11f4:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    11f6:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    11fa:	add	r1, sp, #48	; 0x30
    11fc:	mov	r0, r5
    11fe:	bl	ecdc <strcpy>
    *parent = r.parent;
    1202:	ldr	r3, [sp, #320]	; 0x140
    1204:	ldr	r2, [sp, #24]
    1206:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1208:	ldrb.w	r3, [sp, #36]	; 0x24
    120c:	cmp	r3, #0
    120e:	bne.n	128c <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xa4>
    1210:	ldr	r3, [sp, #28]
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    1212:	ldrh.w	r1, [sp, #42]	; 0x2a
    *store = r.store;
    1216:	ldrh.w	r2, [sp, #38]	; 0x26
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    121a:	and.w	r0, r1, #31
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    121e:	str	r3, [r4, #0]
    *store = r.store;
    1220:	ldr	r3, [sp, #324]	; 0x144
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    1222:	lsls	r0, r0, #1
    *store = r.store;
    1224:	strh	r2, [r3, #0]
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    1226:	ldrh.w	r2, [sp, #40]	; 0x28
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    122a:	str	r0, [sp, #16]
    122c:	ubfx	r0, r1, #5, #6
    1230:	lsrs	r1, r1, #11
  return 1980 + (fatDate >> 9);
    1232:	lsrs	r3, r2, #9
    1234:	str	r0, [sp, #12]
    1236:	str	r1, [sp, #8]
    1238:	and.w	r1, r2, #31
    123c:	ubfx	r2, r2, #5, #4
    1240:	addw	r3, r3, #1980	; 0x7bc
    1244:	str	r1, [sp, #4]
    1246:	movs	r1, #32
    1248:	str	r2, [sp, #0]
    124a:	ldr	r0, [sp, #328]	; 0x148
    124c:	ldr	r2, [pc, #68]	; (1294 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    124e:	bl	e894 <sniprintf>
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    1252:	ldrh.w	r1, [sp, #46]	; 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    1256:	ldrh.w	r2, [sp, #44]	; 0x2c
  return 2*(fatTime & 0X1F);
    125a:	and.w	r0, r1, #31
  return 1980 + (fatDate >> 9);
    125e:	lsrs	r3, r2, #9
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    1260:	lsls	r0, r0, #1
    1262:	addw	r3, r3, #1980	; 0x7bc
    1266:	str	r0, [sp, #16]
    1268:	ubfx	r0, r1, #5, #6
    126c:	lsrs	r1, r1, #11
    126e:	str	r0, [sp, #12]
    1270:	str	r1, [sp, #8]
    1272:	and.w	r1, r2, #31
    1276:	ubfx	r2, r2, #5, #4
    127a:	ldr	r0, [sp, #332]	; 0x14c
    127c:	str	r1, [sp, #4]
    127e:	movs	r1, #32
    1280:	str	r2, [sp, #0]
    1282:	ldr	r2, [pc, #16]	; (1294 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    1284:	bl	e894 <sniprintf>
  }
    1288:	add	sp, #308	; 0x134
    128a:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    128c:	mov.w	r3, #4294967295
    1290:	b.n	1212 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    1292:	nop
    1294:	.word	0x20001113

00001298 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    1298:	push	{lr}
    129a:	sub	sp, #284	; 0x11c
    129c:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    129e:	mov	r1, r0
    12a0:	mov	r0, sp
    12a2:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    12a6:	ldr	r0, [sp, #4]
    12a8:	add	sp, #284	; 0x11c
    12aa:	ldr.w	pc, [sp], #4

000012ae <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    12ae:	ldr.w	r3, [r0, #320]	; 0x140
  {
    12b2:	push	{r4, r5, r6, lr}
    12b4:	mov	r4, r0
    12b6:	sub	sp, #288	; 0x120
    12b8:	cbz	r3, 1324 <MTPStorage_SD::close()+0x76>
    12ba:	ldr	r5, [r3, #28]
    file_.getCreateDateTime(&cpdate,&cptime);
    12bc:	add.w	r6, r4, #264	; 0x108
    12c0:	add.w	r2, sp, #2
    12c4:	mov	r1, sp
    12c6:	mov	r0, r6
    12c8:	bl	e52 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.getCreateDateTime(&mpdate,&mptime);
    12cc:	add.w	r2, sp, #6
    12d0:	add	r1, sp, #4
    12d2:	mov	r0, r6
    12d4:	bl	e52 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.close();
    12d8:	mov	r0, r6
    12da:	bl	8714 <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    12de:	ldr.w	r2, [r4, #420]	; 0x1a4
    12e2:	mov	r1, r4
    12e4:	add	r0, sp, #8
    12e6:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.cpdate=cpdate;
    12ea:	ldrh.w	r3, [sp]
    WriteIndexRecord(open_file_, r);
    12ee:	add	r2, sp, #8
    12f0:	ldr.w	r1, [r4, #420]	; 0x1a4
    r.cpdate=cpdate;
    12f4:	strh.w	r3, [sp, #24]
    WriteIndexRecord(open_file_, r);
    12f8:	mov	r0, r4
    r.cptime=cptime;
    12fa:	ldrh.w	r3, [sp, #2]
    uint32_t size = (uint32_t) file_.size();
    12fe:	str	r5, [sp, #12]
    r.cptime=cptime;
    1300:	strh.w	r3, [sp, #26]
    r.mpdate=mpdate;
    1304:	ldrh.w	r3, [sp, #4]
    1308:	strh.w	r3, [sp, #28]
    r.mptime=mptime;
    130c:	ldrh.w	r3, [sp, #6]
    1310:	strh.w	r3, [sp, #30]
    WriteIndexRecord(open_file_, r);
    1314:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    1318:	mvn.w	r3, #1
    131c:	str.w	r3, [r4, #420]	; 0x1a4
  }
    1320:	add	sp, #288	; 0x120
    1322:	pop	{r4, r5, r6, pc}
    1324:	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    1328:	cmp	r5, #0
    132a:	beq.n	12bc <MTPStorage_SD::close()+0xe>
  uint64_t fileSize() const {return m_validLength;}
    132c:	ldr	r5, [r5, #16]
    132e:	b.n	12bc <MTPStorage_SD::close()+0xe>

00001330 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1330:	push	{r4, r5, r6, lr}
    1332:	sub	sp, #280	; 0x118
    1334:	mov	r6, r0
    1336:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    1338:	mov	r2, r1
    133a:	mov	r1, r0
    133c:	mov	r0, sp
  {
    133e:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1340:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    1344:	ldr	r1, [sp, #0]
    1346:	adds	r3, r1, #1
    1348:	bne.n	135a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    134a:	ldr	r1, [pc, #64]	; (138c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    134c:	mov	r0, r4
    134e:	bl	ecdc <strcpy>
      return tmp.store;
    1352:	ldrh.w	r0, [sp, #14]
  }
    1356:	add	sp, #280	; 0x118
    1358:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    135a:	mov	r3, r5
    135c:	mov	r2, r4
    135e:	mov	r0, r6
    1360:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    1364:	mov	r0, r4
    1366:	bl	ed90 <strlen>
    136a:	add	r0, r4
    136c:	ldrb.w	r3, [r0, #-1]
    1370:	cmp	r3, #47	; 0x2f
    1372:	beq.n	137e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    1374:	mov	r2, r5
    1376:	ldr	r1, [pc, #20]	; (138c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1378:	mov	r0, r4
    137a:	bl	eb30 <strlcat>
      strlcat(out, tmp.name,len);
    137e:	mov	r2, r5
    1380:	add	r1, sp, #24
    1382:	mov	r0, r4
    1384:	bl	eb30 <strlcat>
    1388:	b.n	1352 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    138a:	nop
    138c:	.word	0x20000d7e

00001390 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    1390:	push	{r4, r5, r6, r7, lr}
    1392:	subw	sp, sp, #1052	; 0x41c
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1396:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    139a:	mov	r4, r0
    139c:	mov	r5, r1
    139e:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    13a0:	mov	r2, sp
    13a2:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    13a6:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    13a8:	mov	r6, r0
    Serial.println(oldName);
    13aa:	ldr	r0, [pc, #120]	; (1424 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    13ac:	bl	d3c <Print::println(char const*)>
    Record p1 = ReadIndexRecord(handle);
    13b0:	mov	r2, r5
    13b2:	mov	r1, r4
    13b4:	add	r0, sp, #768	; 0x300
    13b6:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    13ba:	mov.w	r2, #256	; 0x100
    13be:	add	r1, sp, #792	; 0x318
    13c0:	add	r0, sp, #512	; 0x200
    13c2:	bl	eb76 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    13c6:	mov.w	r2, #256	; 0x100
    13ca:	mov	r1, r7
    13cc:	add	r0, sp, #792	; 0x318
    13ce:	bl	eb76 <strlcpy>
    WriteIndexRecord(handle, p1);
    13d2:	add	r2, sp, #768	; 0x300
    13d4:	mov	r1, r5
    13d6:	mov	r0, r4
    13d8:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    13dc:	mov.w	r3, #256	; 0x100
    13e0:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    13e2:	add.w	r6, r4, r6, lsl #2
    13e6:	add.w	r2, sp, r3
    13ea:	mov	r0, r4
    13ec:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    13f0:	add	r1, sp, #256	; 0x100
    13f2:	ldr	r0, [pc, #48]	; (1424 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    13f4:	bl	d3c <Print::println(char const*)>
    13f8:	ldr	r0, [r6, #88]	; 0x58
    13fa:	add	r2, sp, #256	; 0x100
    13fc:	mov	r1, sp
    13fe:	bl	da2 <FsVolume::rename(char const*, char const*)>
    if (sd_rename(store,oldName,newName)) return true;
    1402:	mov	r6, r0
    1404:	cbnz	r0, 141c <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    1406:	mov.w	r2, #256	; 0x100
    140a:	add	r1, sp, #512	; 0x200
    140c:	add	r0, sp, #792	; 0x318
    140e:	bl	eb76 <strlcpy>
    WriteIndexRecord(handle, p1);
    1412:	add	r2, sp, #768	; 0x300
    1414:	mov	r1, r5
    1416:	mov	r0, r4
    1418:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    141c:	mov	r0, r6
    141e:	addw	sp, sp, #1052	; 0x41c
    1422:	pop	{r4, r5, r6, r7, pc}
    1424:	.word	0x20001d30

00001428 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    1428:	ldr.w	r3, [r0, #420]	; 0x1a4
    142c:	cmp	r3, r1
  {
    142e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1432:	mov	r4, r0
    1434:	sub	sp, #336	; 0x150
    1436:	mov	r6, r1
    1438:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    143a:	bne.n	1444 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    143c:	ldr.w	r3, [r0, #416]	; 0x1a0
    1440:	cmp	r3, r2
    1442:	beq.n	149c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    1444:	add.w	r8, r4, #264	; 0x108
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    1448:	mov.w	r3, #256	; 0x100
    144c:	add	r2, sp, #80	; 0x50
    144e:	mov	r1, r6
    1450:	mov	r0, r4
    1452:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1456:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    1458:	mov	r0, r8
    145a:	bl	e88 <FsBaseFile::isOpen() const>
    145e:	cbz	r0, 1466 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1460:	mov	r0, r8
    1462:	bl	8714 <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    1466:	add.w	r7, r4, r7, lsl #2
    146a:	add	r2, sp, #80	; 0x50
    146c:	mov	r3, r5
    146e:	mov	r0, sp
    1470:	ldr	r1, [r7, #88]	; 0x58
    1472:	bl	8948 <FsVolume::open(char const*, int)>
    1476:	ldr	r3, [sp, #4]
    1478:	add	r1, sp, #16
    147a:	mov	r0, r8
    147c:	str.w	r3, [r4, #252]	; 0xfc
    1480:	ldr	r3, [sp, #8]
    1482:	str.w	r3, [r4, #256]	; 0x100
    1486:	ldrb.w	r3, [sp, #12]
    148a:	strb.w	r3, [r4, #260]	; 0x104
    148e:	bl	873e <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    1492:	mov	r0, sp
    1494:	bl	f20 <FsFile::~FsFile()>
    mode_ = mode;
    1498:	strd	r5, r6, [r4, #416]	; 0x1a0
  }
    149c:	add	sp, #336	; 0x150
    149e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000014a2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    14a2:	push	{r4, r5, r6, lr}
    14a4:	mov	r4, r0
    14a6:	mov	r6, r2
    14a8:	mov	r5, r3
    OpenFileByIndex(handle);
    14aa:	movs	r2, #0
    file_.seekSet(pos);
    14ac:	add.w	r4, r4, #264	; 0x108
    OpenFileByIndex(handle);
    14b0:	bl	1428 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    file_.seekSet(pos);
    14b4:	mov	r2, r6
    14b6:	movs	r3, #0
    14b8:	mov	r0, r4
    14ba:	bl	ed4 <FsBaseFile::seekSet(unsigned long long)>
    file_.read(out,bytes);
    14be:	ldr	r2, [sp, #16]
    14c0:	mov	r1, r5
    14c2:	mov	r0, r4
    14c4:	bl	ebc <FsBaseFile::read(void*, unsigned int)>
  }
    14c8:	pop	{r4, r5, r6, pc}

000014ca <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    14ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    14ce:	cmp.w	r2, #4294967295
    14d2:	ite	ne
    14d4:	movne	r8, r2
    14d6:	moveq	r8, r1
  {
    14d8:	sub.w	sp, sp, #816	; 0x330
    14dc:	mov	r4, r0
    14de:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    14e0:	mov	r2, r8
    14e2:	mov	r1, r0
    14e4:	add	r0, sp, #256	; 0x100
  {
    14e6:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    14e8:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    14ec:	mov.w	r2, #256	; 0x100
    14f0:	ldr	r1, [sp, #840]	; 0x348
    14f2:	add	r0, sp, #560	; 0x230
    14f4:	bl	eb76 <strlcpy>
    r.store = p.store;
    14f8:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.sibling = p.child;
    14fc:	ldr	r2, [sp, #260]	; 0x104
    ret = p.child = AppendIndexRecord(r);
    14fe:	add	r1, sp, #536	; 0x218
    r.store = p.store;
    1500:	strh.w	r3, [sp, #550]	; 0x226
    r.child = 0;
    1504:	movs	r3, #0
    ret = p.child = AppendIndexRecord(r);
    1506:	mov	r0, r4
    r.sibling = p.child;
    1508:	str	r2, [sp, #544]	; 0x220
    r.child = 0;
    150a:	str	r3, [sp, #540]	; 0x21c
    r.parent = parent;
    150c:	str.w	r8, [sp, #536]	; 0x218
    r.isdir = folder;
    1510:	strb.w	r7, [sp, #548]	; 0x224
    r.mpdate = 0;
    1514:	strd	r3, r3, [sp, #552]	; 0x228
    r.scanned = 1;
    1518:	movs	r3, #1
    151a:	strb.w	r3, [sp, #549]	; 0x225
    ret = p.child = AppendIndexRecord(r);
    151e:	bl	10ea <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    1522:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    1524:	mov	r5, r0
    1526:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    1528:	mov	r1, r8
    152a:	mov	r0, r4
    152c:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    1530:	cbz	r7, 1554 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8a>
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    1532:	mov	r2, sp
    1534:	mov	r1, r5
    1536:	mov.w	r3, #256	; 0x100
    153a:	mov	r0, r4
    153c:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_mkdir(store,filename);
    1540:	mov	r2, sp
    1542:	mov	r1, r6
    1544:	adds	r0, r4, #4
    1546:	bl	f38 <mSD_Base::sd_mkdir(unsigned long, char*)>
  }
    154a:	mov	r0, r5
    154c:	add.w	sp, sp, #816	; 0x330
    1550:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, (O_RDWR | O_CREAT));
    1554:	movw	r2, #514	; 0x202
    1558:	mov	r1, r5
    155a:	mov	r0, r4
    155c:	bl	1428 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    1560:	b.n	154a <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x80>

00001562 <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    1562:	ldrb.w	r3, [r0, #428]	; 0x1ac
    1566:	cbnz	r3, 156c <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    1568:	b.w	1104 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    156c:	bx	lr

0000156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    156e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1572:	cmp.w	r2, #4294967295
    1576:	ite	ne
    1578:	movne	r6, r2
    157a:	moveq	r6, r1
    157c:	sub.w	sp, sp, #564	; 0x234
    Record record = ReadIndexRecord(i);
    1580:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    1582:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    1584:	mov	r2, r6
    1586:	mov	r0, sp
    1588:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    158c:	ldrb.w	r3, [sp, #12]
    1590:	cmp	r3, #0
    1592:	beq.n	168c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
    1594:	ldrb.w	r5, [sp, #13]
    1598:	cmp	r5, #0
    159a:	bne.n	168c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
      if (!file_.isOpen()) return;
    159c:	add.w	r8, r4, #264	; 0x108
      OpenFileByIndex(i);
    15a0:	mov	r0, r4
    15a2:	mov	r2, r5
    15a4:	mov	r1, r6
    15a6:	bl	1428 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    15aa:	mov	r0, r8
    15ac:	bl	e88 <FsBaseFile::isOpen() const>
    15b0:	cmp	r0, #0
    15b2:	beq.n	168c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    15b4:	mov	r9, r5
    FsFile tmpFile;
    15b6:	add	r0, sp, #280	; 0x118
    15b8:	add.w	r7, r4, #344	; 0x158
    15bc:	bl	f04 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    15c0:	movs	r2, #0
    15c2:	mov	r1, r8
    15c4:	add	r0, sp, #296	; 0x128
    15c6:	bl	8814 <FsBaseFile::openNext(FsBaseFile*, int)>
    15ca:	ldr	r3, [sp, #284]	; 0x11c
    15cc:	add	r1, sp, #296	; 0x128
    15ce:	mov	r0, r7
    15d0:	str.w	r3, [r4, #332]	; 0x14c
    15d4:	ldr	r3, [sp, #288]	; 0x120
    15d6:	str.w	r3, [r4, #336]	; 0x150
    15da:	ldrb.w	r3, [sp, #292]	; 0x124
    15de:	strb.w	r3, [r4, #340]	; 0x154
    15e2:	bl	873e <FsBaseFile::operator=(FsBaseFile const&)>
        child_=file_.openNextFile();
    15e6:	add	r0, sp, #280	; 0x118
    15e8:	bl	f20 <FsFile::~FsFile()>
        if(!child_.isOpen()) break;
    15ec:	mov	r0, r7
    15ee:	bl	e88 <FsBaseFile::isOpen() const>
    15f2:	cmp	r0, #0
    15f4:	beq.n	167a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
        r.store = record.store;
    15f6:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    15fa:	mov	r0, r7
        r.parent = i;
    15fc:	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    15fe:	strh.w	r3, [sp, #294]	; 0x126
        r.sibling = sibling;
    1602:	str	r5, [sp, #288]	; 0x120
    1604:	bl	e66 <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    1608:	strb.w	r0, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    160c:	cbnz	r0, 1662 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf4>
    return m_fFile ? m_fFile->fileSize() :
    160e:	ldr.w	r3, [r4, #400]	; 0x190
    1612:	cbz	r3, 1656 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xe8>
    1614:	ldr	r3, [r3, #28]
        child_.getName(r.name,MAX_FILENAME_LEN);
    1616:	mov.w	r2, #256	; 0x100
    161a:	add	r1, sp, #304	; 0x130
    161c:	mov	r0, r7
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    161e:	str	r3, [sp, #284]	; 0x11c
        r.scanned = false;
    1620:	strb.w	r9, [sp, #293]	; 0x125
        child_.getName(r.name,MAX_FILENAME_LEN);
    1624:	bl	c9e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        child_.getCreateDateTime(&r.cpdate, &r.cptime);
    1628:	add.w	r2, sp, #298	; 0x12a
    162c:	add	r1, sp, #296	; 0x128
    162e:	mov	r0, r7
    1630:	bl	e52 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    1634:	ldr.w	r0, [r4, #400]	; 0x190
    1638:	cbz	r0, 1666 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf8>
    163a:	add.w	r2, sp, #302	; 0x12e
    163e:	add	r1, sp, #300	; 0x12c
    1640:	bl	7646 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
        sibling = AppendIndexRecord(r);
    1644:	add	r1, sp, #280	; 0x118
    1646:	mov	r0, r4
    1648:	bl	10ea <MTPStorage_SD::AppendIndexRecord(Record const&)>
    164c:	mov	r5, r0
        child_.close();
    164e:	mov	r0, r7
    1650:	bl	8714 <FsBaseFile::close()>
      }
    1654:	b.n	15b6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    1656:	ldr.w	r3, [r4, #404]	; 0x194
           m_xFile ? m_xFile->fileSize() : 0;
    165a:	cmp	r3, #0
    165c:	beq.n	1616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    165e:	ldr	r3, [r3, #16]
    1660:	b.n	1616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1662:	movs	r3, #0
    1664:	b.n	1616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    1666:	ldr.w	r0, [r4, #404]	; 0x194
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    166a:	cmp	r0, #0
    166c:	beq.n	1644 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    166e:	add.w	r2, sp, #302	; 0x12e
    1672:	add	r1, sp, #300	; 0x12c
    1674:	bl	596a <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    1678:	b.n	1644 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
      record.scanned = true;
    167a:	movs	r3, #1
      WriteIndexRecord(i, record);
    167c:	mov	r2, sp
    167e:	mov	r1, r6
    1680:	mov	r0, r4
      record.scanned = true;
    1682:	strb.w	r3, [sp, #13]
      record.child = sibling;
    1686:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    1688:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    168c:	add.w	sp, sp, #564	; 0x234
    1690:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001694 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1694:	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    1696:	cmp.w	r2, #4294967295
    169a:	it	eq
    169c:	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    169e:	sub	sp, #288	; 0x120
    16a0:	mov	r4, r0
      ScanDir(store, parent);
    16a2:	str	r2, [sp, #4]
    16a4:	bl	156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    16a8:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    16aa:	ldr	r2, [sp, #4]
    16ac:	mov	r1, r4
    16ae:	add	r0, sp, #8
      follow_sibling_ = true;
    16b0:	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    16b4:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    16b8:	ldr	r3, [sp, #12]
    16ba:	str.w	r3, [r4, #432]	; 0x1b0
  }
    16be:	add	sp, #288	; 0x120
    16c0:	pop	{r4, pc}

000016c2 <MTPStorage_SD::ScanAll(unsigned long)>:
  { if (all_scanned_) return;
    16c2:	push	{r4, r5, r6, lr}
    16c4:	ldrb.w	r4, [r0, #429]	; 0x1ad
    16c8:	mov	r5, r0
    16ca:	mov	r6, r1
    16cc:	cbnz	r4, 16e0 <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    16ce:	movs	r3, #1
    16d0:	strb.w	r3, [r0, #429]	; 0x1ad
    GenerateIndex(store);
    16d4:	bl	1562 <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16d8:	ldr.w	r3, [r5, #424]	; 0x1a8
    16dc:	cmp	r4, r3
    16de:	bcc.n	16e2 <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    16e0:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16e2:	mov	r2, r4
    16e4:	mov	r1, r6
    16e6:	mov	r0, r5
    16e8:	adds	r4, #1
    16ea:	bl	156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    16ee:	b.n	16d8 <MTPStorage_SD::ScanAll(unsigned long)+0x16>

000016f0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { 
    16f0:	push	{r4, r5, r6, lr}
    16f2:	mov	r5, r2
    16f4:	mov	r4, r0
    16f6:	mov	r6, r1
    GenerateIndex(store);
    16f8:	bl	1562 <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    16fc:	cbz	r5, 170c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1c>
    16fe:	mov	r2, r5
    1700:	mov	r1, r6
    1702:	mov	r0, r4
  }
    1704:	ldmia.w	sp!, {r4, r5, r6, lr}
    1708:	b.w	1694 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
      ScanAll(store);
    170c:	mov	r1, r6
    170e:	mov	r0, r4
    1710:	bl	16c2 <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    1714:	movs	r3, #1
      follow_sibling_ = false;
    1716:	strb.w	r5, [r4, #436]	; 0x1b4
      next_ = 1;
    171a:	str.w	r3, [r4, #432]	; 0x1b0
  }
    171e:	pop	{r4, r5, r6, pc}

00001720 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    1720:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1724:	mov	r4, r1
    1726:	sub.w	sp, sp, #764	; 0x2fc
    172a:	add.w	r1, r0, r1, lsl #2
    172e:	mov	r6, r0
  FsFile f1=sd_open(store,file,O_READ);
    1730:	adds	r7, r0, #4
    1732:	movs	r3, #0
    1734:	add	r0, sp, #8
    1736:	ldr	r1, [r1, #88]	; 0x58
{ 
    1738:	mov	r5, r2
    173a:	bl	8948 <FsVolume::open(char const*, int)>
    173e:	add	r0, sp, #24
    1740:	bl	e66 <FsBaseFile::isDir() const>
  if(f1.isDirectory())
    1744:	cmp	r0, #0
    1746:	beq.n	17ea <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1748:	ldr.w	r9, [pc, #172]	; 17f8 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd8>
    FsFile f2;
    174c:	add	r0, sp, #88	; 0x58
    174e:	bl	f04 <FsFile::FsFile()>
    FsFile tmpFile;
    1752:	add	r0, sp, #168	; 0xa8
    1754:	bl	f04 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1758:	movs	r2, #0
    175a:	add	r1, sp, #24
    175c:	add	r0, sp, #184	; 0xb8
    175e:	bl	8814 <FsBaseFile::openNext(FsBaseFile*, int)>
    1762:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    1764:	add	r1, sp, #184	; 0xb8
    1766:	add	r0, sp, #104	; 0x68
    1768:	str	r3, [sp, #92]	; 0x5c
    176a:	ldr	r3, [sp, #176]	; 0xb0
    176c:	str	r3, [sp, #96]	; 0x60
    176e:	ldrb.w	r3, [sp, #180]	; 0xb4
    1772:	strb.w	r3, [sp, #100]	; 0x64
    1776:	bl	873e <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    177a:	add	r0, sp, #104	; 0x68
    177c:	bl	e88 <FsBaseFile::isOpen() const>
    1780:	mov	r8, r0
    while(f2=f1.openNextFile())
    1782:	add	r0, sp, #168	; 0xa8
    1784:	bl	f20 <FsFile::~FsFile()>
    1788:	cmp.w	r8, #0
    178c:	bne.n	17ac <MTPStorage_SD::removeFile(unsigned long, char*)+0x8c>
    sd_rmdir(store,file);
    178e:	mov	r2, r5
    1790:	mov	r1, r4
    1792:	mov	r0, r7
    1794:	bl	fdc <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    1798:	add	r0, sp, #88	; 0x58
    179a:	bl	f20 <FsFile::~FsFile()>
}
    179e:	add	r0, sp, #8
    17a0:	bl	f20 <FsFile::~FsFile()>
    17a4:	add.w	sp, sp, #764	; 0x2fc
    17a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    17ac:	add.w	r8, sp, #504	; 0x1f8
    17b0:	mov.w	r2, #256	; 0x100
    17b4:	add	r0, sp, #104	; 0x68
    17b6:	mov	r1, r8
    17b8:	bl	c9e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    17bc:	mov	r2, r9
    17be:	mov.w	r1, #256	; 0x100
    17c2:	mov	r3, r5
    17c4:	add	r0, sp, #248	; 0xf8
    17c6:	str.w	r8, [sp]
    17ca:	bl	e894 <sniprintf>
    return BaseFile::isDir();
    17ce:	add	r0, sp, #104	; 0x68
    17d0:	bl	e66 <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    17d4:	add	r2, sp, #248	; 0xf8
    17d6:	mov	r1, r4
    17d8:	cbz	r0, 17e2 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc2>
    17da:	mov	r0, r6
    17dc:	bl	1720 <MTPStorage_SD::removeFile(unsigned long, char*)>
    17e0:	b.n	1752 <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    17e2:	mov	r0, r7
    17e4:	bl	f78 <mSD_Base::sd_remove(unsigned long, char const*)>
    17e8:	b.n	1752 <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    sd_remove(store,file);
    17ea:	mov	r2, r5
    17ec:	mov	r1, r4
    17ee:	mov	r0, r7
    17f0:	bl	f78 <mSD_Base::sd_remove(unsigned long, char const*)>
    17f4:	b.n	179e <MTPStorage_SD::removeFile(unsigned long, char*)+0x7e>
    17f6:	nop
    17f8:	.word	0x2000110d

000017fc <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    17fc:	push	{r4, r5, r6, r7, lr}
    17fe:	subw	sp, sp, #1380	; 0x564
    1802:	mov	r4, r0
    1804:	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    1806:	mov.w	r3, #256	; 0x100
    180a:	add	r2, sp, #280	; 0x118
    180c:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    1810:	mov	r2, r5
    1812:	mov	r1, r4
    1814:	add	r0, sp, #536	; 0x218
    1816:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    181a:	add	r2, sp, #280	; 0x118
    181c:	ldrh.w	r1, [sp, #550]	; 0x226
    1820:	mov	r0, r4
    1822:	bl	1720 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    1826:	movs	r3, #0
    WriteIndexRecord(object, r);
    1828:	add	r2, sp, #536	; 0x218
    182a:	mov	r1, r5
    182c:	mov	r0, r4
    r.name[0]=0;
    182e:	strb.w	r3, [sp, #560]	; 0x230
    WriteIndexRecord(object, r);
    1832:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    1836:	ldr	r2, [sp, #536]	; 0x218
    1838:	mov	r1, r4
    183a:	add	r0, sp, #816	; 0x330
    183c:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    1840:	ldr	r6, [sp, #820]	; 0x334
    1842:	cmp	r5, r6
    1844:	bne.n	185a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      t.child = r.sibling;
    1846:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(r.parent, t);
    1848:	add	r2, sp, #816	; 0x330
    184a:	ldr	r1, [sp, #536]	; 0x218
      t.child = r.sibling;
    184c:	str	r3, [sp, #820]	; 0x334
      WriteIndexRecord(is, x);
    184e:	mov	r0, r4
    1850:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1854:	addw	sp, sp, #1380	; 0x564
    1858:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    185a:	mov	r2, r6
    185c:	mov	r1, r4
    185e:	add.w	r0, sp, #1096	; 0x448
    1862:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1866:	ldr.w	r7, [sp, #1104]	; 0x450
    186a:	cmp	r5, r7
    186c:	bne.n	187c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x80>
      x.sibling = r.sibling;
    186e:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(is, x);
    1870:	add.w	r2, sp, #1096	; 0x448
    1874:	mov	r1, r6
      x.sibling = r.sibling;
    1876:	str.w	r3, [sp, #1104]	; 0x450
      WriteIndexRecord(is, x);
    187a:	b.n	184e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x52>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    187c:	mov	r2, r7
    187e:	mov	r1, r4
    1880:	mov	r0, sp
    1882:	mov	r6, r7
    1884:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1888:	mov.w	r2, #280	; 0x118
    188c:	mov	r1, sp
    188e:	add.w	r0, sp, #1096	; 0x448
    1892:	bl	a218 <memcpy>
    1896:	b.n	1866 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x6a>

00001898 <MTPStorage_SD::DeleteObject(unsigned long)>:
  {
    1898:	push	{r3, lr}
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    189a:	adds	r3, r1, #1
    189c:	beq.n	18a2 <MTPStorage_SD::DeleteObject(unsigned long)+0xa>
    189e:	bl	17fc <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    18a2:	movs	r0, #1
    18a4:	pop	{r3, pc}

000018a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    18a6:	push	{r4, r5, r6, lr}
    18a8:	add.w	r1, r0, r1, lsl #2
    18ac:	sub.w	sp, sp, #2208	; 0x8a0
    18b0:	mov	r5, r0
    18b2:	mov	r6, r3
    18b4:	ldr	r1, [r1, #84]	; 0x54
    18b6:	movs	r3, #0
    18b8:	mov	r0, sp
    18ba:	bl	8948 <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,O_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    18be:	add	r0, sp, #16
    18c0:	bl	e88 <FsBaseFile::isOpen() const>
    18c4:	mov	r4, r0
    18c6:	cbnz	r0, 18de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    18c8:	movw	r0, #690	; 0x2b2
    18cc:	bl	d00 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    18d0:	mov	r0, sp
    18d2:	bl	f20 <FsFile::~FsFile()>
    18d6:	mov	r0, r4
    18d8:	add.w	sp, sp, #2208	; 0x8a0
    18dc:	pop	{r4, r5, r6, pc}
    18de:	add.w	r5, r5, r6, lsl #2
    18e2:	movw	r3, #514	; 0x202
    18e6:	ldr.w	r2, [sp, #2224]	; 0x8b0
    18ea:	add	r0, sp, #80	; 0x50
    18ec:	ldr	r1, [r5, #84]	; 0x54
    18ee:	bl	8948 <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    18f2:	add	r0, sp, #96	; 0x60
    18f4:	bl	e88 <FsBaseFile::isOpen() const>
    18f8:	mov	r4, r0
    18fa:	cbnz	r0, 1912 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    18fc:	add	r0, sp, #16
    18fe:	bl	8714 <FsBaseFile::close()>
    1902:	movw	r0, #693	; 0x2b5
    1906:	bl	d00 <dbgPrint(unsigned short)>
}
    190a:	add	r0, sp, #80	; 0x50
    190c:	bl	f20 <FsFile::~FsFile()>
    1910:	b.n	18d0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    1912:	mov.w	r5, #4294967295
    return BaseFile::available();
    1916:	add	r0, sp, #16
    1918:	bl	e02 <FsBaseFile::available() const>
  while(f1.available()>0)
    191c:	cmp	r0, #0
    191e:	ble.n	1940 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    1920:	mov.w	r2, #2048	; 0x800
    1924:	add	r1, sp, #160	; 0xa0
    1926:	add	r0, sp, #16
    1928:	bl	ebc <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    192c:	subs	r5, r0, #0
    192e:	blt.n	1940 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    1930:	mov	r2, r5
    1932:	add	r1, sp, #160	; 0xa0
    1934:	add	r0, sp, #96	; 0x60
    1936:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    193a:	cmp.w	r5, #2048	; 0x800
    193e:	bge.n	1916 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    1940:	add	r0, sp, #16
    1942:	bl	8714 <FsBaseFile::close()>
  f2.close();
    1946:	add	r0, sp, #96	; 0x60
    1948:	bl	8714 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    194c:	cmp	r5, #0
    194e:	bge.n	190a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    1950:	movw	r0, #705	; 0x2c1
    1954:	movs	r4, #0
    1956:	bl	d00 <dbgPrint(unsigned short)>
    195a:	b.n	190a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

0000195c <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    195c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1960:	sub.w	sp, sp, #1360	; 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1964:	cmp.w	r3, #4294967295
    1968:	ite	ne
    196a:	movne	r8, r3
    196c:	moveq	r8, r2
  { 
    196e:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1970:	mov	r2, r1
  { 
    1972:	mov	r7, r1
    Record p1 = ReadIndexRecord(handle);
    1974:	mov	r1, r0
    1976:	add	r0, sp, #520	; 0x208
    1978:	add	r6, sp, #544	; 0x220
    197a:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    197e:	mov	r2, r8
    1980:	mov	r1, r4
    1982:	add	r0, sp, #800	; 0x320
    1984:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    1988:	ldrb.w	r5, [sp, #532]	; 0x214
    198c:	cbz	r5, 19d2 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    198e:	ldrh.w	r1, [sp, #534]	; 0x216
    1992:	mov	r2, r7
    1994:	mov	r0, r4
    1996:	adds	r1, #1
    1998:	bl	156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    199c:	ldrb.w	r3, [sp, #532]	; 0x214
    19a0:	ldr	r2, [r4, #0]
    19a2:	mov	r0, r4
    19a4:	subs	r3, #0
    19a6:	str	r6, [sp, #0]
    19a8:	ldrh.w	r1, [sp, #814]	; 0x32e
    19ac:	ldr	r5, [r2, #44]	; 0x2c
    19ae:	it	ne
    19b0:	movne	r3, #1
    19b2:	mov	r2, r8
    19b4:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    19b6:	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    19b8:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    19ba:	ldrh.w	r2, [sp, #814]	; 0x32e
    19be:	ldr	r6, [r3, #84]	; 0x54
    19c0:	mov	r1, r7
    19c2:	mov	r3, r0
    19c4:	mov	r0, r4
    19c6:	blx	r6
  }
    19c8:	mov	r0, r5
    19ca:	add.w	sp, sp, #1360	; 0x550
    19ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    19d2:	mov.w	r2, #256	; 0x100
    19d6:	mov	r1, r6
    19d8:	add.w	r0, sp, #1104	; 0x450
    19dc:	bl	eb76 <strlcpy>
      r.store = p2.store;
    19e0:	ldrh.w	r3, [sp, #814]	; 0x32e
      newHandle = p2.child = AppendIndexRecord(r);
    19e4:	add.w	r1, sp, #1080	; 0x438
    19e8:	mov	r0, r4
      r.store = p2.store;
    19ea:	strh.w	r3, [sp, #1094]	; 0x446
      r.sibling = p2.child;
    19ee:	ldr	r3, [sp, #804]	; 0x324
      r.child = 0;
    19f0:	str.w	r5, [sp, #1084]	; 0x43c
      r.sibling = p2.child;
    19f4:	str.w	r3, [sp, #1088]	; 0x440
      r.isdir = 0;
    19f8:	strh.w	r5, [sp, #1092]	; 0x444
      r.parent = newParent;
    19fc:	str.w	r8, [sp, #1080]	; 0x438
      newHandle = p2.child = AppendIndexRecord(r);
    1a00:	bl	10ea <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    1a04:	add	r2, sp, #800	; 0x320
      newHandle = p2.child = AppendIndexRecord(r);
    1a06:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    1a08:	mov	r1, r8
      newHandle = p2.child = AppendIndexRecord(r);
    1a0a:	str	r0, [sp, #804]	; 0x324
      WriteIndexRecord(newParent, p2);
    1a0c:	mov	r0, r4
    1a0e:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1a12:	add	r2, sp, #8
    1a14:	mov	r1, r7
    1a16:	mov.w	r3, #256	; 0x100
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a1a:	add	r7, sp, #264	; 0x108
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1a1c:	mov	r0, r4
    1a1e:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1a22:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a24:	mov	r2, r7
    1a26:	mov	r1, r5
    1a28:	mov.w	r3, #256	; 0x100
    1a2c:	mov	r0, r4
    1a2e:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    1a32:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a34:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1a36:	mov	r1, r6
    1a38:	adds	r0, r4, #4
    1a3a:	str	r7, [sp, #0]
    1a3c:	bl	18a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    1a40:	b.n	19c8 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

00001a42 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    1a42:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a46:	subw	sp, sp, #1644	; 0x66c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1a4a:	cmp.w	r3, #4294967295
    1a4e:	ite	ne
    1a50:	movne	r7, r3
    1a52:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1a54:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1a56:	mov	r2, r1
    1a58:	mov	r1, r0
    1a5a:	add	r0, sp, #520	; 0x208
    1a5c:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    1a60:	mov	r2, r7
    1a62:	mov	r1, r4
    1a64:	add	r0, sp, #800	; 0x320
  Record p1=ReadIndexRecord(handle);
    1a66:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    1a6a:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    1a6c:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    1a70:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    1a72:	cbnz	r6, 1a8a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1a74:	mov	r0, r4
    1a76:	add	r2, sp, #800	; 0x320
    1a78:	mov	r1, r7
  p2.child=iy;
    1a7a:	str	r5, [sp, #804]	; 0x324
  WriteIndexRecord(newHandle,p2);
    1a7c:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    1a80:	movs	r0, #1
    1a82:	addw	sp, sp, #1644	; 0x66c
    1a86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Record px = ReadIndexRecord(ix) ;
    1a8a:	mov	r2, r6
    1a8c:	mov	r1, r4
    1a8e:	add.w	r0, sp, #1080	; 0x438
    1a92:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1a96:	mov.w	r2, #280	; 0x118
    1a9a:	add.w	r1, sp, #1080	; 0x438
    1a9e:	add.w	r0, sp, #1360	; 0x550
    1aa2:	bl	a218 <memcpy>
    py.store = p2.store;
    1aa6:	ldrh.w	r3, [sp, #814]	; 0x32e
    iy = AppendIndexRecord(py);
    1aaa:	add.w	r1, sp, #1360	; 0x550
    1aae:	mov	r0, r4
    py.store = p2.store;
    1ab0:	strh.w	r3, [sp, #1374]	; 0x55e
    py.sibling = iy;
    1ab4:	str.w	r5, [sp, #1368]	; 0x558
    py.parent = newHandle;
    1ab8:	str.w	r7, [sp, #1360]	; 0x550
    iy = AppendIndexRecord(py);
    1abc:	bl	10ea <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1ac0:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    1ac2:	mov.w	r3, #256	; 0x100
    1ac6:	add	r2, sp, #8
    1ac8:	mov	r1, r6
    1aca:	mov	r0, r4
    1acc:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    1ad0:	add	r2, sp, #264	; 0x108
    1ad2:	mov.w	r3, #256	; 0x100
    1ad6:	mov	r1, r5
    1ad8:	mov	r0, r4
    1ada:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    1ade:	ldrb.w	r1, [sp, #1372]	; 0x55c
      sd_mkdir(py.store,newfilename);
    1ae2:	adds	r0, r4, #4
    1ae4:	ldrh.w	r3, [sp, #1374]	; 0x55e
    if(py.isdir) 
    1ae8:	add	r2, sp, #264	; 0x108
    1aea:	cbz	r1, 1b14 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd2>
      sd_mkdir(py.store,newfilename);
    1aec:	mov	r1, r3
    1aee:	bl	f38 <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    1af2:	mov	r2, r6
    1af4:	mov	r1, r8
    1af6:	mov	r0, r4
    1af8:	bl	156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    1afc:	ldr	r3, [r4, #0]
    1afe:	ldrh.w	r2, [sp, #814]	; 0x32e
    1b02:	mov	r1, r6
    1b04:	ldr.w	r9, [r3, #84]	; 0x54
    1b08:	mov	r0, r4
    1b0a:	mov	r3, r5
    1b0c:	blx	r9
    ix = px.sibling;
    1b0e:	ldr.w	r6, [sp, #1088]	; 0x440
    1b12:	b.n	1a72 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    1b14:	str	r2, [sp, #0]
    1b16:	mov	r1, r8
    1b18:	add	r2, sp, #8
    1b1a:	bl	18a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1b1e:	b.n	1b0e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xcc>

00001b20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    1b20:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1b24:	ldr.w	r8, [sp, #32]
    1b28:	mov	r6, r1
    1b2a:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b2c:	mov	r1, r3
    1b2e:	mov	r2, r8
    1b30:	str	r3, [sp, #4]
{ // old and new are directory paths
    1b32:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b34:	bl	f38 <mSD_Base::sd_mkdir(unsigned long, char*)>
    1b38:	ldr	r3, [sp, #4]
    1b3a:	mov	r4, r0
    1b3c:	cbz	r0, 1b52 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1b3e:	mov	r2, r7
    1b40:	mov	r1, r6
    1b42:	mov	r0, r5
    1b44:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1b48:	add	sp, #8
    1b4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1b4e:	b.w	1b64 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b52:	movw	r0, #715	; 0x2cb
    1b56:	bl	d00 <dbgPrint(unsigned short)>
}
    1b5a:	mov	r0, r4
    1b5c:	add	sp, #8
    1b5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001b64 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1b64:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b68:	mov	r6, r1
    1b6a:	sub.w	sp, sp, #680	; 0x2a8
    1b6e:	add.w	r1, r0, r1, lsl #2
    1b72:	mov	r5, r0
    1b74:	mov	r8, r3
    1b76:	add	r0, sp, #8
    1b78:	movs	r3, #0
    1b7a:	ldr	r1, [r1, #84]	; 0x54
    1b7c:	mov	r7, r2
    1b7e:	bl	8948 <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1b82:	add	r0, sp, #24
    1b84:	bl	e88 <FsBaseFile::isOpen() const>
    1b88:	mov	r4, r0
    1b8a:	cmp	r0, #0
    1b8c:	beq.n	1c42 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1b8e:	ldr	r4, [pc, #264]	; (1c98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1b90:	mov.w	r2, #256	; 0x100
    1b94:	mov	r1, r7
    1b96:	add	r0, sp, #168	; 0xa8
    1b98:	bl	eb76 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1b9c:	add	r0, sp, #168	; 0xa8
    1b9e:	bl	ed90 <strlen>
    1ba2:	add	r3, sp, #168	; 0xa8
    1ba4:	add	r0, r3
    1ba6:	ldrb.w	r3, [r0, #-1]
    1baa:	cmp	r3, #47	; 0x2f
    1bac:	beq.n	1bba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1bae:	mov.w	r2, #256	; 0x100
    1bb2:	mov	r1, r4
    1bb4:	add	r0, sp, #168	; 0xa8
    1bb6:	bl	eb30 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1bba:	mov.w	r2, #256	; 0x100
    1bbe:	ldr	r1, [sp, #704]	; 0x2c0
    1bc0:	add	r0, sp, #424	; 0x1a8
    1bc2:	bl	eb76 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1bc6:	add	r0, sp, #424	; 0x1a8
    1bc8:	bl	ed90 <strlen>
    1bcc:	add	r3, sp, #424	; 0x1a8
    1bce:	add	r0, r3
    1bd0:	ldrb.w	r3, [r0, #-1]
    1bd4:	cmp	r3, #47	; 0x2f
    1bd6:	beq.n	1be4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1bd8:	mov.w	r2, #256	; 0x100
    1bdc:	mov	r1, r4
    1bde:	add	r0, sp, #424	; 0x1a8
    1be0:	bl	eb30 <strlcat>
    FsFile tmpFile;
    1be4:	add	r0, sp, #88	; 0x58
    1be6:	bl	f04 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1bea:	movs	r2, #0
    1bec:	add	r1, sp, #24
    1bee:	add	r0, sp, #104	; 0x68
    1bf0:	bl	8814 <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1bf4:	add	r0, sp, #104	; 0x68
    1bf6:	bl	e88 <FsBaseFile::isOpen() const>
    1bfa:	cmp	r0, #0
    1bfc:	beq.n	1c82 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1bfe:	mov.w	r2, #256	; 0x100
    1c02:	add	r1, sp, #168	; 0xa8
    1c04:	add	r0, sp, #104	; 0x68
    1c06:	bl	c9e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1c0a:	mov.w	r2, #256	; 0x100
    1c0e:	add	r1, sp, #424	; 0x1a8
    1c10:	add	r0, sp, #104	; 0x68
    1c12:	bl	c9e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1c16:	add	r0, sp, #104	; 0x68
    1c18:	bl	e66 <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c1c:	add	r3, sp, #424	; 0x1a8
    1c1e:	add	r2, sp, #168	; 0xa8
    1c20:	mov	r1, r6
    1c22:	str	r3, [sp, #0]
    1c24:	mov	r3, r8
        if(f2.isDirectory())
    1c26:	cbz	r0, 1c5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c28:	mov	r0, r5
    1c2a:	bl	1b20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1c2e:	cbnz	r0, 1c7a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c30:	movw	r0, #738	; 0x2e2
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c34:	bl	d00 <dbgPrint(unsigned short)>
    }
    1c38:	add	r0, sp, #88	; 0x58
    1c3a:	movs	r4, #0
    1c3c:	bl	f20 <FsFile::~FsFile()>
    1c40:	b.n	1c4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1c42:	movw	r0, #718	; 0x2ce
    1c46:	bl	d00 <dbgPrint(unsigned short)>
}
    1c4a:	add	r0, sp, #8
    1c4c:	bl	f20 <FsFile::~FsFile()>
    1c50:	mov	r0, r4
    1c52:	add.w	sp, sp, #680	; 0x2a8
    1c56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c5a:	mov	r0, r5
    1c5c:	bl	18a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1c60:	cbnz	r0, 1c68 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1c62:	movw	r0, #742	; 0x2e6
    1c66:	b.n	1c34 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c68:	add	r2, sp, #168	; 0xa8
    1c6a:	mov	r1, r6
    1c6c:	mov	r0, r5
    1c6e:	bl	f78 <mSD_Base::sd_remove(unsigned long, char const*)>
    1c72:	cbnz	r0, 1c7a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c74:	movw	r0, #743	; 0x2e7
    1c78:	b.n	1c34 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1c7a:	add	r0, sp, #88	; 0x58
    1c7c:	bl	f20 <FsFile::~FsFile()>
    1c80:	b.n	1b90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1c82:	add	r0, sp, #88	; 0x58
    1c84:	bl	f20 <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1c88:	mov	r2, r7
    1c8a:	mov	r1, r6
    1c8c:	mov	r0, r5
    1c8e:	bl	fdc <mSD_Base::sd_rmdir(unsigned long, char*)>
    1c92:	mov	r4, r0
    1c94:	b.n	1c4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1c96:	nop
    1c98:	.word	0x20000d7e

00001c9c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1c9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1ca0:	subw	sp, sp, #2764	; 0xacc
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1ca4:	cmp.w	r3, #4294967295
    1ca8:	ite	ne
    1caa:	movne	r7, r3
    1cac:	moveq	r7, r2
  { 
    1cae:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1cb0:	mov	r2, r1
  { 
    1cb2:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1cb4:	mov	r1, r0
    1cb6:	add	r0, sp, #800	; 0x320
    1cb8:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1cbc:	mov	r2, r7
    1cbe:	mov	r1, r4
    1cc0:	add.w	r0, sp, #1080	; 0x438
    1cc4:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1cc8:	ldr	r2, [sp, #800]	; 0x320
    1cca:	mov	r1, r4
    1ccc:	add.w	r0, sp, #1360	; 0x550
    1cd0:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1cd4:	ldrb.w	r3, [sp, #812]	; 0x32c
    1cd8:	cbz	r3, 1cf6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1cda:	ldrb.w	r3, [sp, #813]	; 0x32d
    1cde:	cbnz	r3, 1cf6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1ce0:	mov	r2, r5
    1ce2:	ldrh.w	r1, [sp, #814]	; 0x32e
    1ce6:	mov	r0, r4
    1ce8:	bl	156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1cec:	add	r2, sp, #800	; 0x320
    1cee:	mov	r1, r5
    1cf0:	mov	r0, r4
    1cf2:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1cf6:	mov.w	r2, #280	; 0x118
    1cfa:	add	r1, sp, #800	; 0x320
    1cfc:	add.w	r0, sp, #1640	; 0x668
    1d00:	bl	a218 <memcpy>
    Record p2o = p2;
    1d04:	mov.w	r2, #280	; 0x118
    1d08:	add.w	r1, sp, #1080	; 0x438
    1d0c:	add.w	r0, sp, #1920	; 0x780
    1d10:	bl	a218 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1d14:	mov.w	r3, #256	; 0x100
    1d18:	add	r2, sp, #288	; 0x120
    1d1a:	mov	r1, r5
    1d1c:	mov	r0, r4
    1d1e:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1d22:	ldr.w	r8, [sp, #1364]	; 0x554
    1d26:	cmp	r8, r5
    1d28:	bne.n	1da0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1d2a:	ldr	r3, [sp, #808]	; 0x328
    uint32_t jx=-1;
    1d2c:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1d30:	add.w	r2, sp, #1360	; 0x550
    1d34:	ldr	r1, [sp, #800]	; 0x320
    1d36:	mov	r0, r4
        p3.child = p1.sibling;
    1d38:	str.w	r3, [sp, #1364]	; 0x554
        WriteIndexRecord(p1.parent, p3);    
    1d3c:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1d40:	ldrh.w	r3, [sp, #1094]	; 0x446
      WriteIndexRecord(handle, p1);
    1d44:	add	r2, sp, #800	; 0x320
    1d46:	mov	r1, r5
    1d48:	mov	r0, r4
      p1.store = p2.store;
    1d4a:	strh.w	r3, [sp, #814]	; 0x32e
      p1.sibling = p2.child;
    1d4e:	ldr.w	r3, [sp, #1084]	; 0x43c
      p1.parent = newParent;
    1d52:	str	r7, [sp, #800]	; 0x320
      p1.sibling = p2.child;
    1d54:	str	r3, [sp, #808]	; 0x328
      p2.child = handle;
    1d56:	str.w	r5, [sp, #1084]	; 0x43c
      WriteIndexRecord(handle, p1);
    1d5a:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1d5e:	add.w	r2, sp, #1080	; 0x438
    1d62:	mov	r1, r7
    1d64:	mov	r0, r4
    1d66:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1d6a:	mov.w	r3, #256	; 0x100
    1d6e:	mov	r1, r5
    1d70:	add	r2, sp, #544	; 0x220
    1d72:	mov	r0, r4
    1d74:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1d78:	ldrh.w	r1, [sp, #1654]	; 0x676
    1d7c:	ldrh.w	r3, [sp, #1934]	; 0x78e
    1d80:	cmp	r1, r3
    1d82:	bne.n	1e30 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1d84:	add.w	r3, r4, r1, lsl #2
    1d88:	add	r2, sp, #544	; 0x220
    1d8a:	add	r1, sp, #288	; 0x120
    1d8c:	ldr	r0, [r3, #88]	; 0x58
    1d8e:	bl	da2 <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d92:	cbz	r0, 1e00 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1d94:	movs	r6, #1
  }
    1d96:	mov	r0, r6
    1d98:	addw	sp, sp, #2764	; 0xacc
    1d9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        px = ReadIndexRecord(jx); 
    1da0:	mov	r2, r8
    1da2:	mov	r1, r4
    1da4:	add	r0, sp, #8
    1da6:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1daa:	mov.w	r2, #280	; 0x118
    1dae:	add	r1, sp, #8
    1db0:	add.w	r0, sp, #2480	; 0x9b0
    1db4:	bl	a218 <memcpy>
        pxo = px;
    1db8:	mov.w	r2, #280	; 0x118
    1dbc:	add.w	r1, sp, #2480	; 0x9b0
    1dc0:	addw	r0, sp, #2200	; 0x898
    1dc4:	bl	a218 <memcpy>
        while(handle != px.sibling)
    1dc8:	ldr.w	r6, [sp, #2488]	; 0x9b8
    1dcc:	cmp	r6, r5
    1dce:	bne.n	1de4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1dd0:	ldr	r3, [sp, #808]	; 0x328
        WriteIndexRecord(jx, px);
    1dd2:	add.w	r2, sp, #2480	; 0x9b0
    1dd6:	mov	r1, r8
    1dd8:	mov	r0, r4
        px.sibling = p1.sibling;
    1dda:	str.w	r3, [sp, #2488]	; 0x9b8
        WriteIndexRecord(jx, px);
    1dde:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1de2:	b.n	1d40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1de4:	mov	r2, r6
    1de6:	mov	r1, r4
    1de8:	add	r0, sp, #8
    1dea:	mov	r8, r6
    1dec:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1df0:	mov.w	r2, #280	; 0x118
    1df4:	add	r1, sp, #8
    1df6:	add.w	r0, sp, #2480	; 0x9b0
    1dfa:	bl	a218 <memcpy>
          pxo = px;
    1dfe:	b.n	1db8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e00:	movw	r0, #579	; 0x243
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e04:	bl	d00 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1e08:	addw	r2, sp, #2200	; 0x898
    1e0c:	mov	r1, r8
    1e0e:	mov	r0, r4
    1e10:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1e14:	add.w	r2, sp, #1640	; 0x668
    1e18:	mov	r1, r5
    1e1a:	mov	r0, r4
    1e1c:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1e20:	add.w	r2, sp, #1920	; 0x780
    1e24:	mov	r1, r7
    1e26:	mov	r0, r4
    return false;
    1e28:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1e2a:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1e2e:	b.n	1d96 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1e30:	ldrb.w	r2, [sp, #1652]	; 0x674
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e34:	add.w	r9, r4, #4
    else if(!p1o.isdir)
    1e38:	cbnz	r2, 1e5e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e3a:	add	r2, sp, #544	; 0x220
    1e3c:	mov	r0, r9
    1e3e:	str	r2, [sp, #0]
    1e40:	add	r2, sp, #288	; 0x120
    1e42:	bl	18a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1e46:	mov	r6, r0
    1e48:	cbz	r0, 1e58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1bc>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1e4a:	add	r2, sp, #288	; 0x120
    1e4c:	ldrh.w	r1, [sp, #1934]	; 0x78e
    1e50:	mov	r0, r9
    1e52:	bl	f78 <mSD_Base::sd_remove(unsigned long, char const*)>
    1e56:	b.n	1d96 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1e58:	movw	r0, #583	; 0x247
    1e5c:	b.n	1e04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e5e:	add	r2, sp, #544	; 0x220
    1e60:	mov	r0, r9
    1e62:	str	r2, [sp, #0]
    1e64:	add	r2, sp, #288	; 0x120
    1e66:	bl	1b20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1e6a:	cmp	r0, #0
    1e6c:	bne.n	1d94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1e6e:	movw	r0, #587	; 0x24b
    1e72:	b.n	1e04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001e74 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1e74:	push	{r4, r5, r6, lr}
    1e76:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1e7a:	ldr	r4, [pc, #60]	; (1eb8 <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1e7c:	ldr	r0, [r5, #88]	; 0x58
    1e7e:	bl	d6e <FsVolume::clusterCount() const>
    1e82:	mov	r1, r0
    1e84:	mov	r0, r4
    1e86:	bl	cc4 <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1e8a:	ldr	r0, [r5, #88]	; 0x58
    1e8c:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1e90:	mov	r1, r0
    1e92:	mov	r0, r4
    1e94:	bl	cc4 <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1e98:	ldr	r6, [r5, #88]	; 0x58
    1e9a:	mov	r0, r6
    1e9c:	bl	d6e <FsVolume::clusterCount() const>
    1ea0:	mov	r4, r0
    1ea2:	mov	r0, r6
    1ea4:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1ea8:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1eaa:	ldr	r0, [r5, #88]	; 0x58
    1eac:	bl	d50 <FsVolume::bytesPerCluster() const>
    1eb0:	umull	r0, r1, r4, r0
    1eb4:	pop	{r4, r5, r6, pc}
    1eb6:	nop
    1eb8:	.word	0x20001d30

00001ebc <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1ebc:	push	{r4, lr}
    1ebe:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1ec0:	bl	c6d2 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1ec4:	mov	r0, r4
    1ec6:	ldmia.w	sp!, {r4, lr}
    1eca:	b.w	c6e4 <Print::println()>

00001ece <Print::print(char) [clone .isra.0]>:
	size_t print(char c)				{ return write((uint8_t)c); }
    1ece:	ldr	r3, [r0, #0]
    1ed0:	ldr	r3, [r3, #0]
    1ed2:	bx	r3

00001ed4 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1ed4:	push	{r0, r1, r4, lr}
    1ed6:	mov	r4, r0
    1ed8:	cbz	r1, 1ef4 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1eda:	mov	r0, r1
    1edc:	str	r1, [sp, #4]
    1ede:	bl	ed90 <strlen>
    1ee2:	ldr	r3, [r4, #0]
    1ee4:	mov	r2, r0
    1ee6:	ldr	r1, [sp, #4]
    1ee8:	ldr	r3, [r3, #4]
    1eea:	mov	r0, r4
    1eec:	add	sp, #8
    1eee:	ldmia.w	sp!, {r4, lr}
    1ef2:	bx	r3
    1ef4:	add	sp, #8
    1ef6:	pop	{r4, pc}

00001ef8 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1ef8:	b.w	1ed4 <Print::write(char const*) [clone .isra.0]>

00001efc <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1efc:	push	{r4, lr}
    1efe:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1f00:	bl	1ed4 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1f04:	mov	r0, r4
    1f06:	ldmia.w	sp!, {r4, lr}
    1f0a:	b.w	c6e4 <Print::println()>
	...

00001f10 <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1f10:	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    1f12:	bl	a700 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1f16:	cmp	r0, #0
    1f18:	beq.n	1f12 <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1f1a:	ldr	r4, [pc, #36]	; (1f40 <menuGetLine()+0x30>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    1f1c:	movw	r3, #5000	; 0x1388
    1f20:	ldr	r5, [pc, #32]	; (1f44 <menuGetLine()+0x34>)
    1f22:	movs	r1, #13
    1f24:	mov	r2, r4
    1f26:	str	r3, [r5, #8]
    1f28:	mov	r0, r5
    1f2a:	movs	r3, #40	; 0x28
    1f2c:	bl	c62c <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1f30:	movs	r3, #0
  Serial.println(buffer);
    1f32:	mov	r1, r4
  buffer[count]=0;
    1f34:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1f36:	mov	r0, r5
    1f38:	bl	1efc <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1f3c:	mov	r0, r4
    1f3e:	pop	{r3, r4, r5, pc}
    1f40:	.word	0x20015588
    1f44:	.word	0x20001d30

00001f48 <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1f48:	push	{r0, r1, r4, lr}
    1f4a:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f4c:	bl	1f10 <menuGetLine()>
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1f50:	add	r2, sp, #4
    1f52:	ldr	r1, [pc, #12]	; (1f60 <menuGetInt32(long*) [clone .isra.0]+0x18>)
    1f54:	bl	e93c <siscanf>
    1f58:	ldr	r3, [sp, #4]
    1f5a:	str	r3, [r4, #0]
  return 1;
}
    1f5c:	add	sp, #8
    1f5e:	pop	{r4, pc}
    1f60:	.word	0x20001450

00001f64 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1f64:	push	{r0, r1, r4, lr}
    1f66:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f68:	bl	1f10 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1f6c:	add	r2, sp, #4
    1f6e:	ldr	r1, [pc, #12]	; (1f7c <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1f70:	bl	e93c <siscanf>
    1f74:	ldr	r3, [sp, #4]
    1f76:	strh	r3, [r4, #0]
}
    1f78:	add	sp, #8
    1f7a:	pop	{r4, pc}
    1f7c:	.word	0x20001450

00001f80 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    1f80:	push	{r4, lr}
    1f82:	sub	sp, #32
    1f84:	bl	a700 <usb_serial_available>

    while(!Serial.available()) ;
    1f88:	cmp	r0, #0
    1f8a:	beq.n	1f84 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1f8c:	bl	a774 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1f90:	uxtb	r0, r0
    if(ch=='d') // set date
    1f92:	cmp	r0, #100	; 0x64
    1f94:	bne.n	1fc2 <menu3()+0x42>
{ char *buffer=menuGetLine();
    1f96:	bl	1f10 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1f9a:	add	r3, sp, #28
    1f9c:	add	r2, sp, #20
    1f9e:	ldr	r1, [pc, #340]	; (20f4 <menu3()+0x174>)
    1fa0:	str	r3, [sp, #8]
    1fa2:	add.w	r3, sp, #19
    1fa6:	str	r3, [sp, #4]
    1fa8:	add	r3, sp, #24
    1faa:	str	r3, [sp, #0]
    1fac:	add.w	r3, sp, #18
    1fb0:	bl	e93c <siscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    1fb4:	ldr	r0, [sp, #20]
    1fb6:	ldrd	r1, r2, [sp, #24]
    1fba:	bl	3c4e <rtcSetDate(int, int, int)>
    }
    else if(ch=='0')
    { 
      menuGetInt16((int16_t *)&d_0);
    }
}
    1fbe:	add	sp, #32
    1fc0:	pop	{r4, pc}
    else if(ch=='t') // set time
    1fc2:	cmp	r0, #54	; 0x36
    1fc4:	bhi.n	1fdc <menu3()+0x5c>
    1fc6:	cmp	r0, #47	; 0x2f
    1fc8:	bls.n	1fbe <menu3()+0x3e>
    1fca:	subs	r0, #49	; 0x31
    1fcc:	cmp	r0, #5
    1fce:	bhi.w	20f0 <menu3()+0x170>
    1fd2:	tbb	[pc, r0]
    1fd6:	.short	0x8381
    1fd8:	.word	0x8b898785
    1fdc:	subs	r0, #97	; 0x61
    1fde:	uxtb	r3, r0
    1fe0:	cmp	r3, #22
    1fe2:	bhi.n	1fbe <menu3()+0x3e>
    1fe4:	cmp	r0, #22
    1fe6:	bhi.n	1fbe <menu3()+0x3e>
    1fe8:	add	r3, pc, #4	; (adr r3, 1ff0 <menu3()+0x70>)
    1fea:	ldr.w	pc, [r3, r0, lsl #2]
    1fee:	nop
    1ff0:	.word	0x00002077
    1ff4:	.word	0x00001fbf
    1ff8:	.word	0x000020b3
    1ffc:	.word	0x00001fbf
    2000:	.word	0x00001fbf
    2004:	.word	0x0000208b
    2008:	.word	0x000020bf
    200c:	.word	0x00001fbf
    2010:	.word	0x00001fbf
    2014:	.word	0x00001fbf
    2018:	.word	0x00001fbf
    201c:	.word	0x00001fbf
    2020:	.word	0x00001fbf
    2024:	.word	0x00001fbf
    2028:	.word	0x00002083
    202c:	.word	0x00001fbf
    2030:	.word	0x00001fbf
    2034:	.word	0x00002087
    2038:	.word	0x0000209f
    203c:	.word	0x0000204d
    2040:	.word	0x00001fbf
    2044:	.word	0x00001fbf
    2048:	.word	0x000020d5
{ char *buffer=menuGetLine();
    204c:	bl	1f10 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    2050:	add	r3, sp, #28
    2052:	add	r2, sp, #20
    2054:	ldr	r1, [pc, #156]	; (20f4 <menu3()+0x174>)
    2056:	str	r3, [sp, #8]
    2058:	add.w	r3, sp, #19
    205c:	str	r3, [sp, #4]
    205e:	add	r3, sp, #24
    2060:	str	r3, [sp, #0]
    2062:	add.w	r3, sp, #18
    2066:	bl	e93c <siscanf>
      rtcSetTime(hour,minutes,seconds);
    206a:	ldr	r0, [sp, #20]
    206c:	ldrd	r1, r2, [sp, #24]
    2070:	bl	3c72 <rtcSetTime(int, int, int)>
    2074:	b.n	1fbe <menu3()+0x3e>
      menuGetInt32((int32_t *)&t_acq);
    2076:	ldr	r0, [pc, #128]	; (20f8 <menu3()+0x178>)
}
    2078:	add	sp, #32
    207a:	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_on);
    207e:	b.w	1f48 <menuGetInt32(long*) [clone .isra.0]>
    2082:	ldr	r0, [pc, #120]	; (20fc <menu3()+0x17c>)
    2084:	b.n	2078 <menu3()+0xf8>
      menuGetInt32((int32_t *)&t_rep);
    2086:	ldr	r0, [pc, #120]	; (2100 <menu3()+0x180>)
    2088:	b.n	2078 <menu3()+0xf8>
      menuGetInt32((int32_t *)&fsamp);
    208a:	ldr	r4, [pc, #120]	; (2104 <menu3()+0x184>)
    208c:	mov	r0, r4
    208e:	bl	1f48 <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    2092:	ldr	r0, [r4, #0]
}
    2094:	add	sp, #32
    2096:	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    209a:	b.w	c28 <acqModifyFrequency(unsigned long)>
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    209e:	ldr	r4, [pc, #104]	; (2108 <menu3()+0x188>)
    20a0:	mov	r0, r4
    20a2:	bl	1f64 <menuGetInt16(short*) [clone .isra.0]>
    20a6:	ldrh	r3, [r4, #0]
    20a8:	lsls	r3, r3, #16
    20aa:	bpl.n	1fbe <menu3()+0x3e>
    20ac:	movs	r3, #0
    20ae:	strh	r3, [r4, #0]
    20b0:	b.n	1fbe <menu3()+0x3e>
      menuGetInt16((int16_t *)&proc);
    20b2:	ldr	r0, [pc, #88]	; (210c <menu3()+0x18c>)
}
    20b4:	add	sp, #32
    20b6:	ldmia.w	sp!, {r4, lr}
      menuGetInt16((int16_t *)&d_0);
    20ba:	b.w	1f64 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt16((int16_t *)&again);
    20be:	ldr	r4, [pc, #80]	; (2110 <menu3()+0x190>)
    20c0:	mov	r0, r4
    20c2:	bl	1f64 <menuGetInt16(short*) [clone .isra.0]>
      setAGain(again);
    20c6:	ldrh	r0, [r4, #0]
    20c8:	sxtb	r0, r0
}
    20ca:	add	sp, #32
    20cc:	ldmia.w	sp!, {r4, lr}
      setAGain(again);
    20d0:	b.w	38f0 <setAGain(signed char)>
      menuGetInt16((int16_t *)&store[0]);
    20d4:	ldr	r0, [pc, #60]	; (2114 <menu3()+0x194>)
    20d6:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_1);
    20d8:	ldr	r0, [pc, #60]	; (2118 <menu3()+0x198>)
    20da:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_2);
    20dc:	ldr	r0, [pc, #60]	; (211c <menu3()+0x19c>)
    20de:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_3);
    20e0:	ldr	r0, [pc, #60]	; (2120 <menu3()+0x1a0>)
    20e2:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_4);
    20e4:	ldr	r0, [pc, #60]	; (2124 <menu3()+0x1a4>)
    20e6:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&d_on);
    20e8:	ldr	r0, [pc, #60]	; (2128 <menu3()+0x1a8>)
    20ea:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&d_rep);
    20ec:	ldr	r0, [pc, #60]	; (212c <menu3()+0x1ac>)
    20ee:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&d_0);
    20f0:	ldr	r0, [pc, #60]	; (2130 <menu3()+0x1b0>)
    20f2:	b.n	20b4 <menu3()+0x134>
    20f4:	.word	0x20001014
    20f8:	.word	0x200022f4
    20fc:	.word	0x200022f6
    2100:	.word	0x20015468
    2104:	.word	0x200022d4
    2108:	.word	0x20015466
    210c:	.word	0x200153c2
    2110:	.word	0x200022e8
    2114:	.word	0x20015394
    2118:	.word	0x200153be
    211c:	.word	0x200022ee
    2120:	.word	0x200022f0
    2124:	.word	0x200022f2
    2128:	.word	0x200022ec
    212c:	.word	0x200153b8
    2130:	.word	0x200022ea

00002134 <storeConfig(unsigned short*, int)>:

/******************** Parameter ******************************/
void storeConfig(uint16_t *store, int ns)
{ 
  #if defined(__IMXRT1062__)
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    2134:	lsls	r2, r1, #1
    2136:	movs	r1, #0
    2138:	b.w	bd74 <eeprom_write_block>

0000213c <loadConfig(unsigned short*, int)>:
}

void loadConfig(uint16_t *store, int ns)
{
  #if defined(__IMXRT1062__)
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    213c:	lsls	r2, r1, #1
    213e:	movs	r1, #0
    2140:	b.w	bac4 <eeprom_read_block>

00002144 <saveParameters()>:
  #endif
}

void saveParameters(void)
{
  store[1]  = t_acq;
    2144:	ldr	r3, [pc, #104]	; (21b0 <saveParameters()+0x6c>)
  store[7]  = h_2;
  store[8]  = h_3;
  store[9]  = h_4;
  store[10] = d_on;
  store[11] = d_rep;
  store[12] = fsamp/1000;
    2146:	mov.w	r2, #1000	; 0x3e8
  store[1]  = t_acq;
    214a:	ldr	r0, [pc, #104]	; (21b4 <saveParameters()+0x70>)
  store[13] = again;
  store[14] = dgain;
  store[15] = d_0;
  
  storeConfig(store, 16);
    214c:	movs	r1, #16
  store[1]  = t_acq;
    214e:	ldrh	r3, [r3, #0]
    2150:	strh	r3, [r0, #2]
  store[2]  = t_on;
    2152:	ldr	r3, [pc, #100]	; (21b8 <saveParameters()+0x74>)
    2154:	ldrh	r3, [r3, #0]
    2156:	strh	r3, [r0, #4]
  store[3]  = t_rep;
    2158:	ldr	r3, [pc, #96]	; (21bc <saveParameters()+0x78>)
    215a:	ldrh	r3, [r3, #0]
    215c:	strh	r3, [r0, #6]
  store[4]  = proc;
    215e:	ldr	r3, [pc, #96]	; (21c0 <saveParameters()+0x7c>)
    2160:	ldrh	r3, [r3, #0]
    2162:	strh	r3, [r0, #8]
  store[5]  = shift;
    2164:	ldr	r3, [pc, #92]	; (21c4 <saveParameters()+0x80>)
    2166:	ldrh	r3, [r3, #0]
    2168:	strh	r3, [r0, #10]
  store[6]  = h_1;
    216a:	ldr	r3, [pc, #92]	; (21c8 <saveParameters()+0x84>)
    216c:	ldrh	r3, [r3, #0]
    216e:	strh	r3, [r0, #12]
  store[7]  = h_2;
    2170:	ldr	r3, [pc, #88]	; (21cc <saveParameters()+0x88>)
    2172:	ldrh	r3, [r3, #0]
    2174:	strh	r3, [r0, #14]
  store[8]  = h_3;
    2176:	ldr	r3, [pc, #88]	; (21d0 <saveParameters()+0x8c>)
    2178:	ldrh	r3, [r3, #0]
    217a:	strh	r3, [r0, #16]
  store[9]  = h_4;
    217c:	ldr	r3, [pc, #84]	; (21d4 <saveParameters()+0x90>)
    217e:	ldrh	r3, [r3, #0]
    2180:	strh	r3, [r0, #18]
  store[10] = d_on;
    2182:	ldr	r3, [pc, #84]	; (21d8 <saveParameters()+0x94>)
    2184:	ldrh	r3, [r3, #0]
    2186:	strh	r3, [r0, #20]
  store[11] = d_rep;
    2188:	ldr	r3, [pc, #80]	; (21dc <saveParameters()+0x98>)
    218a:	ldrh	r3, [r3, #0]
    218c:	strh	r3, [r0, #22]
  store[12] = fsamp/1000;
    218e:	ldr	r3, [pc, #80]	; (21e0 <saveParameters()+0x9c>)
    2190:	ldr	r3, [r3, #0]
    2192:	sdiv	r3, r3, r2
    2196:	strh	r3, [r0, #24]
  store[13] = again;
    2198:	ldr	r3, [pc, #72]	; (21e4 <saveParameters()+0xa0>)
    219a:	ldrh	r3, [r3, #0]
    219c:	strh	r3, [r0, #26]
  store[14] = dgain;
    219e:	ldr	r3, [pc, #72]	; (21e8 <saveParameters()+0xa4>)
    21a0:	ldrh	r3, [r3, #0]
    21a2:	strh	r3, [r0, #28]
  store[15] = d_0;
    21a4:	ldr	r3, [pc, #68]	; (21ec <saveParameters()+0xa8>)
    21a6:	ldrh	r3, [r3, #0]
    21a8:	strh	r3, [r0, #30]
  storeConfig(store, 16);
    21aa:	b.w	2134 <storeConfig(unsigned short*, int)>
    21ae:	nop
    21b0:	.word	0x200022f4
    21b4:	.word	0x20015394
    21b8:	.word	0x200022f6
    21bc:	.word	0x20015468
    21c0:	.word	0x200153c2
    21c4:	.word	0x20015466
    21c8:	.word	0x200153be
    21cc:	.word	0x200022ee
    21d0:	.word	0x200022f0
    21d4:	.word	0x200022f2
    21d8:	.word	0x200022ec
    21dc:	.word	0x200153b8
    21e0:	.word	0x200022d4
    21e4:	.word	0x200022e8
    21e8:	.word	0x200153ba
    21ec:	.word	0x200022ea

000021f0 <menu1(short)>:
{   // have ':'
    21f0:	push	{r3, r4, r5, lr}
    21f2:	mov	r5, r0
        virtual int available() { return usb_serial_available(); }
    21f4:	bl	a700 <usb_serial_available>
    while(!Serial.available()) ;
    21f8:	cmp	r0, #0
    21fa:	beq.n	21f4 <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    21fc:	bl	a774 <usb_serial_getchar>
    ch=Serial.read();
    2200:	uxtb	r4, r0
	size_t println(char c)				{ return print(c) + println(); }
    2202:	ldr	r0, [pc, #80]	; (2254 <menu1(short)+0x64>)
    2204:	mov	r1, r4
    2206:	bl	1ece <Print::print(char) [clone .isra.0]>
    220a:	ldr	r0, [pc, #72]	; (2254 <menu1(short)+0x64>)
    220c:	bl	c6e4 <Print::println()>
    if(ch=='w') 
    2210:	cmp	r4, #119	; 0x77
    2212:	bne.n	2222 <menu1(short)+0x32>
    { saveParameters();
    2214:	bl	2144 <saveParameters()>
      Serial.println("Save parameters");
    2218:	ldr	r1, [pc, #60]	; (2258 <menu1(short)+0x68>)
      Serial.print(ch); Serial.println(" not recognized");
    221a:	ldr	r0, [pc, #56]	; (2254 <menu1(short)+0x64>)
    221c:	bl	1efc <Print::println(char const*) [clone .isra.0]>
    2220:	b.n	222c <menu1(short)+0x3c>
    else if(ch=='m') // control monitor (needed for gui)
    2222:	cmp	r4, #109	; 0x6d
    2224:	bne.n	2236 <menu1(short)+0x46>
      menuGetInt16((int16_t *)&monitor);
    2226:	ldr	r0, [pc, #52]	; (225c <menu1(short)+0x6c>)
    2228:	bl	1f64 <menuGetInt16(short*) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    222c:	bl	a700 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    2230:	cbnz	r0, 224c <menu1(short)+0x5c>
}
    2232:	mov	r0, r5
    2234:	pop	{r3, r4, r5, pc}
      else if(ch=='c') // transfer internal rtc to external rtc
    2236:	cmp	r4, #99	; 0x63
    2238:	bne.n	2240 <menu1(short)+0x50>
      { rtcXferTime();
    223a:	bl	3c24 <rtcXferTime()>
    223e:	b.n	222c <menu1(short)+0x3c>
      Serial.print(ch); Serial.println(" not recognized");
    2240:	mov	r1, r4
    2242:	ldr	r0, [pc, #16]	; (2254 <menu1(short)+0x64>)
    2244:	bl	1ece <Print::print(char) [clone .isra.0]>
    2248:	ldr	r1, [pc, #20]	; (2260 <menu1(short)+0x70>)
    224a:	b.n	221a <menu1(short)+0x2a>
        virtual int read() { return usb_serial_getchar(); }
    224c:	bl	a774 <usb_serial_getchar>
    2250:	b.n	222c <menu1(short)+0x3c>
    2252:	nop
    2254:	.word	0x20001d30
    2258:	.word	0x20000e98
    225c:	.word	0x200153c0
    2260:	.word	0x20000ea8

00002264 <loadParameters()>:
}

uint16_t *loadParameters(void)
{
    2264:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  loadConfig(store,16);
    2268:	ldr	r4, [pc, #252]	; (2368 <loadParameters()+0x104>)
    226a:	movs	r1, #16
    226c:	ldr.w	sl, [pc, #296]	; 2398 <loadParameters()+0x134>
    2270:	mov	r0, r4
    2272:	ldr.w	r9, [pc, #296]	; 239c <loadParameters()+0x138>
    2276:	bl	213c <loadConfig(unsigned short*, int)>
  if(store[0]==1)
    227a:	ldrh	r3, [r4, #0]
    227c:	ldr.w	lr, [pc, #288]	; 23a0 <loadParameters()+0x13c>
    2280:	cmp	r3, #1
    2282:	ldr.w	ip, [pc, #288]	; 23a4 <loadParameters()+0x140>
    2286:	ldr	r7, [pc, #228]	; (236c <loadParameters()+0x108>)
    2288:	ldr	r2, [pc, #228]	; (2370 <loadParameters()+0x10c>)
    228a:	ldr	r6, [pc, #232]	; (2374 <loadParameters()+0x110>)
    228c:	ldr	r5, [pc, #232]	; (2378 <loadParameters()+0x114>)
    228e:	ldr	r0, [pc, #236]	; (237c <loadParameters()+0x118>)
    2290:	ldr	r1, [pc, #236]	; (2380 <loadParameters()+0x11c>)
    2292:	bne.n	22f8 <loadParameters()+0x94>
  {
    t_acq   = store[1];
    2294:	ldrh	r3, [r4, #2]
    2296:	strh.w	r3, [sl]
    t_on    = store[2];
    229a:	ldrh	r3, [r4, #4]
    229c:	strh.w	r3, [r9]
    t_rep   = store[3];
    22a0:	ldrh	r3, [r4, #6]
    22a2:	strh.w	r3, [lr]
    proc    = store[4];
    22a6:	ldrsh.w	r3, [r4, #8]
    22aa:	strh.w	r3, [ip]
    shift   = store[5];
    22ae:	ldrsh.w	r3, [r4, #10]
    22b2:	strh	r3, [r7, #0]
    h_1     = store[6];
    22b4:	ldrh	r3, [r4, #12]
    22b6:	strh	r3, [r2, #0]
    h_2     = store[7];
    22b8:	ldrh	r3, [r4, #14]
    h_3     = store[8];
    h_4     = store[9];
    d_on    = store[10];
    d_rep   = store[11];
    22ba:	ldrh	r2, [r4, #22]
    h_2     = store[7];
    22bc:	strh	r3, [r6, #0]
    h_3     = store[8];
    22be:	ldrh	r3, [r4, #16]
    22c0:	strh	r3, [r5, #0]
    h_4     = store[9];
    22c2:	ldrh	r3, [r4, #18]
    22c4:	strh	r3, [r0, #0]
    d_on    = store[10];
    22c6:	ldrh	r3, [r4, #20]
    22c8:	strh	r3, [r1, #0]
    d_rep   = store[11];
    22ca:	ldr	r3, [pc, #184]	; (2384 <loadParameters()+0x120>)
    22cc:	strh	r2, [r3, #0]
    fsamp   = store[12]*1000;
    22ce:	mov.w	r2, #1000	; 0x3e8
    22d2:	ldrh	r3, [r4, #24]
    22d4:	muls	r3, r2
    22d6:	ldr	r2, [pc, #176]	; (2388 <loadParameters()+0x124>)
    22d8:	str	r3, [r2, #0]
    again   = store[13];
    22da:	ldrsh.w	r2, [r4, #26]
    22de:	ldr	r3, [pc, #172]	; (238c <loadParameters()+0x128>)
    22e0:	strh	r2, [r3, #0]
    dgain   = store[14];
    22e2:	ldrsh.w	r2, [r4, #28]
    22e6:	ldr	r3, [pc, #168]	; (2390 <loadParameters()+0x12c>)
    22e8:	strh	r2, [r3, #0]
    d_0     = store[15];
    22ea:	ldrsh.w	r2, [r4, #30]
    22ee:	ldr	r3, [pc, #164]	; (2394 <loadParameters()+0x130>)
    22f0:	strh	r2, [r3, #0]
    store[13] = again    = AGAIN;
    store[14] = dgain    = DGAIN;
    store[15] = d_0      = 0; 
  }
  return store;
}
    22f2:	ldr	r0, [pc, #116]	; (2368 <loadParameters()+0x104>)
    22f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    store[1]  = t_acq    = T_ACQ;
    22f8:	mov.w	r8, #20
    store[0]  = 0;
    22fc:	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    22fe:	strh.w	r8, [sl]
    2302:	strh.w	r8, [r4, #2]
    store[2]  = t_on     = T_ON;
    2306:	mov.w	r8, #60	; 0x3c
    store[0]  = 0;
    230a:	strh	r3, [r4, #0]
    store[2]  = t_on     = T_ON;
    230c:	strh.w	r8, [r9]
    store[3]  = t_rep    = T_REP;
    2310:	strh.w	r3, [lr]
    store[4]  = proc     = PROC_MODE;
    2314:	strh.w	r3, [ip]
    store[5]  = shift    = SHIFT;
    2318:	strh	r3, [r7, #0]
    store[6]  = h_1      = H_1;
    231a:	strh	r3, [r2, #0]
    store[7]  = h_2      = H_2;
    231c:	movs	r2, #12
    store[2]  = t_on     = T_ON;
    231e:	strh.w	r8, [r4, #4]
    store[7]  = h_2      = H_2;
    2322:	strh	r2, [r6, #0]
    2324:	strh	r2, [r4, #14]
    store[8]  = h_3      = H_3;
    2326:	strh	r2, [r5, #0]
    2328:	strh	r2, [r4, #16]
    store[9]  = h_4      = H_4;
    232a:	movs	r2, #24
    store[3]  = t_rep    = T_REP;
    232c:	strh	r3, [r4, #6]
    store[9]  = h_4      = H_4;
    232e:	strh	r2, [r0, #0]
    2330:	strh	r2, [r4, #18]
    store[10] = d_on     = D_ON;
    2332:	movs	r2, #1
    store[4]  = proc     = PROC_MODE;
    2334:	strh	r3, [r4, #8]
    store[10] = d_on     = D_ON;
    2336:	strh	r2, [r1, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    2338:	movw	r1, #48000	; 0xbb80
    store[10] = d_on     = D_ON;
    233c:	strh	r2, [r4, #20]
    store[11] = d_rep    = D_REP;
    233e:	ldr	r2, [pc, #68]	; (2384 <loadParameters()+0x120>)
    store[5]  = shift    = SHIFT;
    2340:	strh	r3, [r4, #10]
    store[11] = d_rep    = D_REP;
    2342:	strh	r3, [r2, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    2344:	ldr	r2, [pc, #64]	; (2388 <loadParameters()+0x124>)
    store[6]  = h_1      = H_1;
    2346:	strh	r3, [r4, #12]
    store[12] = (fsamp   = FSAMP)/1000; 
    2348:	str	r1, [r2, #0]
    234a:	movs	r2, #48	; 0x30
    store[13] = again    = AGAIN;
    234c:	ldr	r1, [pc, #60]	; (238c <loadParameters()+0x128>)
    store[12] = (fsamp   = FSAMP)/1000; 
    234e:	strh	r2, [r4, #24]
    store[13] = again    = AGAIN;
    2350:	movs	r2, #10
    store[11] = d_rep    = D_REP;
    2352:	strh	r3, [r4, #22]
    store[13] = again    = AGAIN;
    2354:	strh	r2, [r1, #0]
    2356:	strh	r2, [r4, #26]
    store[14] = dgain    = DGAIN;
    2358:	ldr	r2, [pc, #52]	; (2390 <loadParameters()+0x12c>)
    235a:	strh	r3, [r4, #28]
    235c:	strh	r3, [r2, #0]
    store[15] = d_0      = 0; 
    235e:	ldr	r2, [pc, #52]	; (2394 <loadParameters()+0x130>)
    2360:	strh	r3, [r4, #30]
    2362:	strh	r3, [r2, #0]
    2364:	b.n	22f2 <loadParameters()+0x8e>
    2366:	nop
    2368:	.word	0x20015394
    236c:	.word	0x20015466
    2370:	.word	0x200153be
    2374:	.word	0x200022ee
    2378:	.word	0x200022f0
    237c:	.word	0x200022f2
    2380:	.word	0x200022ec
    2384:	.word	0x200153b8
    2388:	.word	0x200022d4
    238c:	.word	0x200022e8
    2390:	.word	0x200153ba
    2394:	.word	0x200022ea
    2398:	.word	0x200022f4
    239c:	.word	0x200022f6
    23a0:	.word	0x20015468
    23a4:	.word	0x200153c2

000023a8 <menu2()>:
{   // have '?'
    23a8:	push	{r4, lr}
    23aa:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    23ac:	bl	a700 <usb_serial_available>
    while(!Serial.available()) ;
    23b0:	cmp	r0, #0
    23b2:	beq.n	23ac <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    23b4:	bl	a774 <usb_serial_getchar>
    ch=Serial.read();
    23b8:	uxtb	r0, r0
    if(ch=='p') // get parameters
    23ba:	cmp	r0, #112	; 0x70
    23bc:	bne.w	2522 <menu2()+0x17a>
      Serial.println();
    23c0:	ldr	r0, [pc, #624]	; (2634 <menu2()+0x28c>)
    23c2:	bl	c6e4 <Print::println()>
      Serial.println(version);
    23c6:	ldr	r1, [pc, #624]	; (2638 <menu2()+0x290>)
    23c8:	ldr	r0, [pc, #616]	; (2634 <menu2()+0x28c>)
    23ca:	bl	1efc <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    23ce:	add	r0, sp, #24
    23d0:	bl	3c2a <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    23d4:	ldrsb.w	r3, [sp, #28]
    23d8:	ldrsh.w	r2, [sp, #24]
    23dc:	str	r3, [sp, #16]
    23de:	ldrsb.w	r3, [sp, #31]
    23e2:	ldr	r1, [pc, #600]	; (263c <menu2()+0x294>)
    23e4:	str	r3, [sp, #12]
    23e6:	ldrsb.w	r3, [sp, #30]
    23ea:	ldr	r0, [pc, #584]	; (2634 <menu2()+0x28c>)
    23ec:	str	r3, [sp, #8]
    23ee:	ldrsb.w	r3, [sp, #29]
    23f2:	str	r3, [sp, #4]
    23f4:	ldrsb.w	r3, [sp, #27]
    23f8:	str	r3, [sp, #0]
    23fa:	ldrsb.w	r3, [sp, #26]
    23fe:	bl	c71c <Print::printf(char const*, ...)>
      Serial.println(rtcGetTimestamp());
    2402:	bl	3c26 <rtcGetTimestamp()>
    2406:	mov	r1, r0
    2408:	ldr	r0, [pc, #552]	; (2634 <menu2()+0x28c>)
    240a:	bl	1efc <Print::println(char const*) [clone .isra.0]>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    240e:	ldr	r1, [pc, #560]	; (2640 <menu2()+0x298>)
    2410:	ldr	r0, [pc, #544]	; (2634 <menu2()+0x28c>)
    2412:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2416:	ldr	r3, [pc, #556]	; (2644 <menu2()+0x29c>)
	size_t println(long n)				{ return print(n) + println(); }
    2418:	ldr	r0, [pc, #536]	; (2634 <menu2()+0x28c>)
    241a:	ldr	r1, [r3, #0]
    241c:	bl	c6d2 <Print::print(long)>
    2420:	ldr	r0, [pc, #528]	; (2634 <menu2()+0x28c>)
    2422:	bl	c6e4 <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    2426:	ldr	r1, [pc, #544]	; (2648 <menu2()+0x2a0>)
    2428:	ldr	r0, [pc, #520]	; (2634 <menu2()+0x28c>)
    242a:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    242e:	ldr	r3, [pc, #540]	; (264c <menu2()+0x2a4>)
    2430:	ldr	r0, [pc, #512]	; (2634 <menu2()+0x28c>)
    2432:	ldrh	r1, [r3, #0]
    2434:	sxth	r1, r1
    2436:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    243a:	ldr	r1, [pc, #532]	; (2650 <menu2()+0x2a8>)
    243c:	ldr	r0, [pc, #500]	; (2634 <menu2()+0x28c>)
    243e:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2442:	ldr	r3, [pc, #528]	; (2654 <menu2()+0x2ac>)
    2444:	ldr	r0, [pc, #492]	; (2634 <menu2()+0x28c>)
    2446:	ldrh	r1, [r3, #0]
    2448:	sxth	r1, r1
    244a:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    244e:	ldr	r1, [pc, #520]	; (2658 <menu2()+0x2b0>)
    2450:	ldr	r0, [pc, #480]	; (2634 <menu2()+0x28c>)
    2452:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2456:	ldr	r3, [pc, #516]	; (265c <menu2()+0x2b4>)
    2458:	ldr	r0, [pc, #472]	; (2634 <menu2()+0x28c>)
    245a:	ldrh	r1, [r3, #0]
    245c:	sxth	r1, r1
    245e:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    2462:	ldr	r1, [pc, #508]	; (2660 <menu2()+0x2b8>)
    2464:	ldr	r0, [pc, #460]	; (2634 <menu2()+0x28c>)
    2466:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    246a:	ldr	r3, [pc, #504]	; (2664 <menu2()+0x2bc>)
    246c:	ldr	r0, [pc, #452]	; (2634 <menu2()+0x28c>)
    246e:	ldrh	r1, [r3, #0]
    2470:	uxth	r1, r1
    2472:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    2476:	ldr	r1, [pc, #496]	; (2668 <menu2()+0x2c0>)
    2478:	ldr	r0, [pc, #440]	; (2634 <menu2()+0x28c>)
    247a:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    247e:	ldr	r3, [pc, #492]	; (266c <menu2()+0x2c4>)
    2480:	ldr	r0, [pc, #432]	; (2634 <menu2()+0x28c>)
    2482:	ldrh	r1, [r3, #0]
    2484:	uxth	r1, r1
    2486:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    248a:	ldr	r1, [pc, #484]	; (2670 <menu2()+0x2c8>)
    248c:	ldr	r0, [pc, #420]	; (2634 <menu2()+0x28c>)
    248e:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2492:	ldr	r3, [pc, #480]	; (2674 <menu2()+0x2cc>)
    2494:	ldr	r0, [pc, #412]	; (2634 <menu2()+0x28c>)
    2496:	ldrh	r1, [r3, #0]
    2498:	uxth	r1, r1
    249a:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("h_1   (1) = "); Serial.println(h_1);
    249e:	ldr	r1, [pc, #472]	; (2678 <menu2()+0x2d0>)
    24a0:	ldr	r0, [pc, #400]	; (2634 <menu2()+0x28c>)
    24a2:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    24a6:	ldr	r3, [pc, #468]	; (267c <menu2()+0x2d4>)
    24a8:	ldr	r0, [pc, #392]	; (2634 <menu2()+0x28c>)
    24aa:	ldrh	r1, [r3, #0]
    24ac:	uxth	r1, r1
    24ae:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("h_2   (2) = "); Serial.println(h_2);
    24b2:	ldr	r1, [pc, #460]	; (2680 <menu2()+0x2d8>)
    24b4:	ldr	r0, [pc, #380]	; (2634 <menu2()+0x28c>)
    24b6:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    24ba:	ldr	r3, [pc, #456]	; (2684 <menu2()+0x2dc>)
    24bc:	ldr	r0, [pc, #372]	; (2634 <menu2()+0x28c>)
    24be:	ldrh	r1, [r3, #0]
    24c0:	uxth	r1, r1
    24c2:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("h_3   (3) = "); Serial.println(h_3);
    24c6:	ldr	r1, [pc, #448]	; (2688 <menu2()+0x2e0>)
    24c8:	ldr	r0, [pc, #360]	; (2634 <menu2()+0x28c>)
    24ca:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    24ce:	ldr	r3, [pc, #444]	; (268c <menu2()+0x2e4>)
    24d0:	ldr	r0, [pc, #352]	; (2634 <menu2()+0x28c>)
    24d2:	ldrh	r1, [r3, #0]
    24d4:	uxth	r1, r1
    24d6:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("h_4   (4) = "); Serial.println(h_4);
    24da:	ldr	r1, [pc, #436]	; (2690 <menu2()+0x2e8>)
    24dc:	ldr	r0, [pc, #340]	; (2634 <menu2()+0x28c>)
    24de:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    24e2:	ldr	r3, [pc, #432]	; (2694 <menu2()+0x2ec>)
    24e4:	ldr	r0, [pc, #332]	; (2634 <menu2()+0x28c>)
    24e6:	ldrh	r1, [r3, #0]
    24e8:	uxth	r1, r1
    24ea:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("d_on  (5) = "); Serial.println(d_on);
    24ee:	ldr	r1, [pc, #424]	; (2698 <menu2()+0x2f0>)
    24f0:	ldr	r0, [pc, #320]	; (2634 <menu2()+0x28c>)
    24f2:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    24f6:	ldr	r3, [pc, #420]	; (269c <menu2()+0x2f4>)
    24f8:	ldr	r0, [pc, #312]	; (2634 <menu2()+0x28c>)
    24fa:	ldrh	r1, [r3, #0]
    24fc:	uxth	r1, r1
    24fe:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    2502:	ldr	r1, [pc, #412]	; (26a0 <menu2()+0x2f8>)
    2504:	ldr	r0, [pc, #300]	; (2634 <menu2()+0x28c>)
    2506:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    250a:	ldr	r3, [pc, #408]	; (26a4 <menu2()+0x2fc>)
    250c:	ldr	r0, [pc, #292]	; (2634 <menu2()+0x28c>)
    250e:	ldrh	r1, [r3, #0]
    2510:	uxth	r1, r1
    2512:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    2516:	ldr	r1, [pc, #400]	; (26a8 <menu2()+0x300>)
    2518:	ldr	r0, [pc, #280]	; (2634 <menu2()+0x28c>)
    251a:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    251e:	ldr	r3, [pc, #396]	; (26ac <menu2()+0x304>)
    2520:	b.n	2614 <menu2()+0x26c>
    else if(ch=='d') // get date
    2522:	cmp	r0, #54	; 0x36
    2524:	bhi.n	2576 <menu2()+0x1ce>
    2526:	cmp	r0, #47	; 0x2f
    2528:	bls.n	257e <menu2()+0x1d6>
    252a:	subs	r0, #49	; 0x31
    252c:	cmp	r0, #5
    252e:	bhi.n	2516 <menu2()+0x16e>
    2530:	tbh	[pc, r0, lsl #1]
    2534:	.word	0x00ca00c4
    2538:	.word	0x00d600d0
    253c:	.word	0x00e200dc
    2540:	cmp	r0, #22
    2542:	bhi.n	257e <menu2()+0x1d6>
    2544:	tbh	[pc, r0, lsl #1]
    2548:	.word	0x001b003d
    254c:	.word	0x00220069
    2550:	.word	0x0054001b
    2554:	.word	0x001b006f
    2558:	.word	0x001b001b
    255c:	.word	0x001b001b
    2560:	.word	0x001b001b
    2564:	.word	0x001b0048
    2568:	.word	0x004e001b
    256c:	.word	0x00310061
    2570:	.word	0x001b001b
    2574:	.short	0x00de
    2576:	subs	r0, #97	; 0x61
    2578:	uxtb	r3, r0
    257a:	cmp	r3, #22
    257c:	bls.n	2540 <menu2()+0x198>
        virtual int available() { return usb_serial_available(); }
    257e:	bl	a700 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    2582:	cmp	r0, #0
    2584:	bne.w	2716 <menu2()+0x36e>
}
    2588:	add	sp, #32
    258a:	pop	{r4, pc}
      rtc_get_datetime(&t);
    258c:	add	r0, sp, #24
    258e:	bl	3c2a <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    2592:	ldrsb.w	r3, [sp, #27]
    2596:	ldrsh.w	r2, [sp, #24]
    259a:	str	r3, [sp, #0]
    259c:	ldr	r1, [pc, #272]	; (26b0 <menu2()+0x308>)
    259e:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    25a2:	ldr	r0, [pc, #144]	; (2634 <menu2()+0x28c>)
    25a4:	bl	c71c <Print::printf(char const*, ...)>
    25a8:	b.n	257e <menu2()+0x1d6>
      rtc_get_datetime(&t);
    25aa:	add	r0, sp, #24
    25ac:	bl	3c2a <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    25b0:	ldrsb.w	r3, [sp, #31]
    25b4:	ldrsb.w	r2, [sp, #29]
    25b8:	str	r3, [sp, #0]
    25ba:	ldr	r1, [pc, #248]	; (26b4 <menu2()+0x30c>)
    25bc:	ldrsb.w	r3, [sp, #30]
    25c0:	b.n	25a2 <menu2()+0x1fa>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    25c2:	ldr	r1, [pc, #156]	; (2660 <menu2()+0x2b8>)
    25c4:	ldr	r0, [pc, #108]	; (2634 <menu2()+0x28c>)
    25c6:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    25ca:	ldr	r3, [pc, #152]	; (2664 <menu2()+0x2bc>)
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    25cc:	ldrh	r1, [r3, #0]
    25ce:	uxth	r1, r1
      Serial.print("params[0]  = "); Serial.println(params[0]);
    25d0:	ldr	r0, [pc, #96]	; (2634 <menu2()+0x28c>)
    25d2:	bl	1ebc <Print::println(int) [clone .isra.0]>
    25d6:	b.n	257e <menu2()+0x1d6>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    25d8:	ldr	r1, [pc, #220]	; (26b8 <menu2()+0x310>)
    25da:	ldr	r0, [pc, #88]	; (2634 <menu2()+0x28c>)
    25dc:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    25e0:	ldr	r3, [pc, #136]	; (266c <menu2()+0x2c4>)
    25e2:	b.n	25cc <menu2()+0x224>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    25e4:	ldr	r1, [pc, #136]	; (2670 <menu2()+0x2c8>)
    25e6:	ldr	r0, [pc, #76]	; (2634 <menu2()+0x28c>)
    25e8:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    25ec:	ldr	r3, [pc, #132]	; (2674 <menu2()+0x2cc>)
    25ee:	b.n	25cc <menu2()+0x224>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    25f0:	ldr	r1, [pc, #76]	; (2640 <menu2()+0x298>)
    25f2:	ldr	r0, [pc, #64]	; (2634 <menu2()+0x28c>)
    25f4:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    25f8:	ldr	r3, [pc, #72]	; (2644 <menu2()+0x29c>)
    25fa:	ldr	r0, [pc, #56]	; (2634 <menu2()+0x28c>)
    25fc:	ldr	r1, [r3, #0]
    25fe:	bl	c6d2 <Print::print(long)>
    2602:	ldr	r0, [pc, #48]	; (2634 <menu2()+0x28c>)
    2604:	bl	c6e4 <Print::println()>
    2608:	b.n	257e <menu2()+0x1d6>
      Serial.print("shift (s) = "); Serial.println(shift);
    260a:	ldr	r1, [pc, #60]	; (2648 <menu2()+0x2a0>)
    260c:	ldr	r0, [pc, #36]	; (2634 <menu2()+0x28c>)
    260e:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2612:	ldr	r3, [pc, #56]	; (264c <menu2()+0x2a4>)
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    2614:	ldrh	r1, [r3, #0]
    2616:	sxth	r1, r1
    2618:	b.n	25d0 <menu2()+0x228>
      Serial.print("proc  (c) = "); Serial.println(proc);
    261a:	ldr	r1, [pc, #52]	; (2650 <menu2()+0x2a8>)
    261c:	ldr	r0, [pc, #20]	; (2634 <menu2()+0x28c>)
    261e:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2622:	ldr	r3, [pc, #48]	; (2654 <menu2()+0x2ac>)
    2624:	b.n	2614 <menu2()+0x26c>
      Serial.print("again (g) = "); Serial.println(again);
    2626:	ldr	r1, [pc, #48]	; (2658 <menu2()+0x2b0>)
    2628:	ldr	r0, [pc, #8]	; (2634 <menu2()+0x28c>)
    262a:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    262e:	ldr	r3, [pc, #44]	; (265c <menu2()+0x2b4>)
    2630:	b.n	2614 <menu2()+0x26c>
    2632:	nop
    2634:	.word	0x20001d30
    2638:	.word	0x200010c2
    263c:	.word	0x20000eb8
    2640:	.word	0x20000ede
    2644:	.word	0x200022d4
    2648:	.word	0x20000eeb
    264c:	.word	0x20015466
    2650:	.word	0x20000ef8
    2654:	.word	0x200153c2
    2658:	.word	0x20000f05
    265c:	.word	0x200022e8
    2660:	.word	0x20000f12
    2664:	.word	0x200022f4
    2668:	.word	0x20000f1f
    266c:	.word	0x200022f6
    2670:	.word	0x20000f2c
    2674:	.word	0x20015468
    2678:	.word	0x20000f39
    267c:	.word	0x200153be
    2680:	.word	0x20000f46
    2684:	.word	0x200022ee
    2688:	.word	0x20000f53
    268c:	.word	0x200022f0
    2690:	.word	0x20000f60
    2694:	.word	0x200022f2
    2698:	.word	0x20000f6d
    269c:	.word	0x200022ec
    26a0:	.word	0x20000f7a
    26a4:	.word	0x200153b8
    26a8:	.word	0x20000f87
    26ac:	.word	0x200022ea
    26b0:	.word	0x20000f94
    26b4:	.word	0x20000fae
    26b8:	.word	0x20000fc9
      Serial.print("h_1  (1) = "); Serial.println(h_1);
    26bc:	ldr	r1, [pc, #92]	; (271c <menu2()+0x374>)
    26be:	ldr	r0, [pc, #96]	; (2720 <menu2()+0x378>)
    26c0:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    26c4:	ldr	r3, [pc, #92]	; (2724 <menu2()+0x37c>)
    26c6:	b.n	25cc <menu2()+0x224>
      Serial.print("h_2  (2) = "); Serial.println(h_2);
    26c8:	ldr	r1, [pc, #92]	; (2728 <menu2()+0x380>)
    26ca:	ldr	r0, [pc, #84]	; (2720 <menu2()+0x378>)
    26cc:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    26d0:	ldr	r3, [pc, #88]	; (272c <menu2()+0x384>)
    26d2:	b.n	25cc <menu2()+0x224>
      Serial.print("h_3  (3) = "); Serial.println(h_3);
    26d4:	ldr	r1, [pc, #88]	; (2730 <menu2()+0x388>)
    26d6:	ldr	r0, [pc, #72]	; (2720 <menu2()+0x378>)
    26d8:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    26dc:	ldr	r3, [pc, #84]	; (2734 <menu2()+0x38c>)
    26de:	b.n	25cc <menu2()+0x224>
      Serial.print("h_4  (4) = "); Serial.println(h_4);
    26e0:	ldr	r1, [pc, #84]	; (2738 <menu2()+0x390>)
    26e2:	ldr	r0, [pc, #60]	; (2720 <menu2()+0x378>)
    26e4:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    26e8:	ldr	r3, [pc, #80]	; (273c <menu2()+0x394>)
    26ea:	b.n	25cc <menu2()+0x224>
      Serial.print("d_on  (5) = "); Serial.println(d_on);
    26ec:	ldr	r1, [pc, #80]	; (2740 <menu2()+0x398>)
    26ee:	ldr	r0, [pc, #48]	; (2720 <menu2()+0x378>)
    26f0:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    26f4:	ldr	r3, [pc, #76]	; (2744 <menu2()+0x39c>)
    26f6:	b.n	25cc <menu2()+0x224>
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    26f8:	ldr	r1, [pc, #76]	; (2748 <menu2()+0x3a0>)
    26fa:	ldr	r0, [pc, #36]	; (2720 <menu2()+0x378>)
    26fc:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2700:	ldr	r3, [pc, #72]	; (274c <menu2()+0x3a4>)
    2702:	b.n	25cc <menu2()+0x224>
    { uint16_t *params=loadParameters();
    2704:	bl	2264 <loadParameters()>
    2708:	mov	r4, r0
      Serial.print("params[0]  = "); Serial.println(params[0]);
    270a:	ldr	r1, [pc, #68]	; (2750 <menu2()+0x3a8>)
    270c:	ldr	r0, [pc, #16]	; (2720 <menu2()+0x378>)
    270e:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2712:	ldrh	r1, [r4, #0]
    2714:	b.n	25d0 <menu2()+0x228>
        virtual int read() { return usb_serial_getchar(); }
    2716:	bl	a774 <usb_serial_getchar>
    271a:	b.n	257e <menu2()+0x1d6>
    271c:	.word	0x20000fd6
    2720:	.word	0x20001d30
    2724:	.word	0x200153be
    2728:	.word	0x20000fe2
    272c:	.word	0x200022ee
    2730:	.word	0x20000fee
    2734:	.word	0x200022f0
    2738:	.word	0x20000ffa
    273c:	.word	0x200022f2
    2740:	.word	0x20000f6d
    2744:	.word	0x200022ec
    2748:	.word	0x20000f7a
    274c:	.word	0x200153b8
    2750:	.word	0x20001006

00002754 <menu(short)>:
{
    2754:	push	{r3, r4, r5, lr}
    2756:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    2758:	bl	a700 <usb_serial_available>
  if(Serial.available())
    275c:	cmp	r0, #0
    275e:	beq.n	2816 <menu(short)+0xc2>
        virtual int read() { return usb_serial_getchar(); }
    2760:	bl	a774 <usb_serial_getchar>
    char ch=Serial.read();
    2764:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    2766:	cmp	r1, #115	; 0x73
    2768:	bne.n	277c <menu(short)+0x28>
    276a:	movs	r4, #0
    276c:	ldr	r1, [pc, #172]	; (281c <menu(short)+0xc8>)
    276e:	ldr	r0, [pc, #176]	; (2820 <menu(short)+0xcc>)
    2770:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2774:	bl	392c <adcStatus()>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    2778:	ldr	r5, [pc, #164]	; (2820 <menu(short)+0xcc>)
    277a:	b.n	280e <menu(short)+0xba>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    277c:	cmp	r1, #101	; 0x65
    277e:	beq.n	27d4 <menu(short)+0x80>
    2780:	bhi.n	27aa <menu(short)+0x56>
    2782:	cmp	r1, #63	; 0x3f
    2784:	beq.n	27f6 <menu(short)+0xa2>
    2786:	bhi.n	27a0 <menu(short)+0x4c>
    2788:	cmp	r1, #33	; 0x21
    278a:	beq.n	27fc <menu(short)+0xa8>
    278c:	cmp	r1, #58	; 0x3a
    278e:	beq.n	27ec <menu(short)+0x98>
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    2790:	ldr	r0, [pc, #140]	; (2820 <menu(short)+0xcc>)
    2792:	bl	1ece <Print::print(char) [clone .isra.0]>
    2796:	ldr	r1, [pc, #140]	; (2824 <menu(short)+0xd0>)
    2798:	ldr	r0, [pc, #132]	; (2820 <menu(short)+0xcc>)
    279a:	bl	1efc <Print::println(char const*) [clone .isra.0]>
    279e:	b.n	2778 <menu(short)+0x24>
    27a0:	cmp	r1, #98	; 0x62
    27a2:	bne.n	2790 <menu(short)+0x3c>
    else if(ch=='b') {reboot();}
    27a4:	bl	248 <reboot()>
    27a8:	b.n	2778 <menu(short)+0x24>
    27aa:	cmp	r1, #114	; 0x72
    27ac:	beq.n	27e0 <menu(short)+0x8c>
    27ae:	cmp	r1, #120	; 0x78
    27b0:	beq.n	27e6 <menu(short)+0x92>
    27b2:	cmp	r1, #109	; 0x6d
    27b4:	bne.n	2790 <menu(short)+0x3c>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    27b6:	ldr	r5, [pc, #112]	; (2828 <menu(short)+0xd4>)
    27b8:	ldr	r1, [pc, #112]	; (282c <menu(short)+0xd8>)
    27ba:	ldrh	r3, [r5, #0]
    27bc:	ldr	r0, [pc, #96]	; (2820 <menu(short)+0xcc>)
    27be:	rsb	r3, r3, #1
    27c2:	strh	r3, [r5, #0]
    27c4:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    27c8:	ldrsh.w	r1, [r5]
    27cc:	ldr	r0, [pc, #80]	; (2820 <menu(short)+0xcc>)
    27ce:	bl	c6d2 <Print::print(long)>
    27d2:	b.n	2778 <menu(short)+0x24>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    27d4:	ldr	r1, [pc, #88]	; (2830 <menu(short)+0xdc>)
    27d6:	movs	r4, #5
    27d8:	ldr	r0, [pc, #68]	; (2820 <menu(short)+0xcc>)
    27da:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    27de:	b.n	2778 <menu(short)+0x24>
    else if(ch=='r') {resetUSB();}
    27e0:	bl	218 <resetUSB()>
    27e4:	b.n	2778 <menu(short)+0x24>
    else if(ch=='x') {powerDown();}
    27e6:	bl	2f78 <powerDown()>
    27ea:	b.n	2778 <menu(short)+0x24>
    else if(ch==':') status=menu1(status); 
    27ec:	mov	r0, r4
    27ee:	bl	21f0 <menu1(short)>
    27f2:	mov	r4, r0
    27f4:	b.n	2778 <menu(short)+0x24>
    else if(ch=='?') menu2(); 
    27f6:	bl	23a8 <menu2()>
    27fa:	b.n	2778 <menu(short)+0x24>
    else if(ch=='!') menu3(); 
    27fc:	bl	1f80 <menu3()>
    2800:	b.n	2778 <menu(short)+0x24>
    2802:	bl	a774 <usb_serial_getchar>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    2806:	uxtb	r1, r0
    2808:	mov	r0, r5
    280a:	bl	1ece <Print::print(char) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    280e:	bl	a700 <usb_serial_available>
    2812:	cmp	r0, #0
    2814:	bne.n	2802 <menu(short)+0xae>
}
    2816:	mov	r0, r4
    2818:	pop	{r3, r4, r5, pc}
    281a:	nop
    281c:	.word	0x20000e3d
    2820:	.word	0x20001d30
    2824:	.word	0x20000e57
    2828:	.word	0x200153c0
    282c:	.word	0x20000e4c
    2830:	.word	0x20000e45

00002834 <getStore()>:

uint16_t *getStore(void) {return store;}
    2834:	ldr	r0, [pc, #0]	; (2838 <getStore()+0x4>)
    2836:	bx	lr
    2838:	.word	0x20015394

0000283c <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    283c:	ldr	r3, [pc, #16]	; (2850 <getDataCount()+0x14>)
    283e:	ldr	r0, [r3, #0]
    2840:	ldr	r3, [pc, #16]	; (2854 <getDataCount()+0x18>)
    2842:	ldr	r3, [r3, #0]
    2844:	subs	r0, r0, r3
    2846:	it	mi
    2848:	addmi.w	r0, r0, #4608	; 0x1200
    284c:	uxth	r0, r0
    284e:	bx	lr
    2850:	.word	0x200141e8
    2854:	.word	0x200141e4

00002858 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    2858:	ldr	r3, [pc, #4]	; (2860 <queue_isBusy()+0x8>)
    285a:	ldr	r0, [r3, #0]
    285c:	bx	lr
    285e:	nop
    2860:	.word	0x2000dfd4

00002864 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    2864:	push	{r3, r4, r5, r6, r7, lr}
//    while(queue_busy); 
    queue_busy=1;
    2866:	movs	r4, #1
    2868:	ldr	r5, [pc, #72]	; (28b4 <pushData(unsigned long*)+0x50>)
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    286a:	ldr	r6, [pc, #76]	; (28b8 <pushData(unsigned long*)+0x54>)
    286c:	mov.w	r7, #4608	; 0x1200
    queue_busy=1;
    2870:	str	r4, [r5, #0]
  {
    2872:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2874:	ldr	r3, [r6, #0]
    2876:	ldr	r2, [pc, #68]	; (28bc <pushData(unsigned long*)+0x58>)
    2878:	add	r3, r4
    287a:	ldr	r2, [r2, #0]
    287c:	sdiv	r0, r3, r7
    2880:	mls	r3, r7, r0, r3
    2884:	cmp	r3, r2
    2886:	bne.n	288e <pushData(unsigned long*)+0x2a>
    2888:	movs	r0, #0
    288a:	str	r0, [r5, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    288c:	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    288e:	ldr	r3, [pc, #48]	; (28c0 <pushData(unsigned long*)+0x5c>)
    2890:	mov.w	r2, #512	; 0x200
    2894:	ldr	r0, [r6, #0]
    2896:	add.w	r0, r3, r0, lsl #9
    289a:	bl	a218 <memcpy>
    tail = (tail+1)%MAXBUF;
    289e:	ldr	r3, [r6, #0]
    return 1; // signal success.
    28a0:	mov	r0, r4
    tail = (tail+1)%MAXBUF;
    28a2:	adds	r3, #1
    28a4:	sdiv	r2, r3, r7
    28a8:	mls	r3, r7, r2, r3
    28ac:	str	r3, [r6, #0]
    queue_busy=0;
    28ae:	movs	r3, #0
    28b0:	str	r3, [r5, #0]
    return 1; // signal success.
    28b2:	b.n	288c <pushData(unsigned long*)+0x28>
    28b4:	.word	0x2000dfd4
    28b8:	.word	0x200141e8
    28bc:	.word	0x200141e4
    28c0:	.word	0x70000000

000028c4 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    28c4:	push	{r4, r5, r6, lr}
//    while(queue_busy); 
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    28c6:	ldr	r3, [pc, #64]	; (2908 <pullData(unsigned long*)+0x44>)
    queue_busy=1;
    28c8:	movs	r4, #1
    28ca:	ldr	r6, [pc, #64]	; (290c <pullData(unsigned long*)+0x48>)
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    28cc:	ldr	r5, [pc, #64]	; (2910 <pullData(unsigned long*)+0x4c>)
    queue_busy=1;
    28ce:	str	r4, [r6, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    28d0:	ldr	r2, [r5, #0]
    28d2:	ldr	r3, [r3, #0]
    28d4:	cmp	r2, r3
    28d6:	bne.n	28de <pullData(unsigned long*)+0x1a>
    28d8:	movs	r0, #0
    28da:	str	r0, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    head = (head+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    28dc:	pop	{r4, r5, r6, pc}
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    28de:	ldr	r3, [pc, #52]	; (2914 <pullData(unsigned long*)+0x50>)
    28e0:	mov.w	r2, #512	; 0x200
    28e4:	ldr	r1, [r5, #0]
    28e6:	add.w	r1, r3, r1, lsl #9
    28ea:	bl	a218 <memcpy>
    head = (head+1)%MAXBUF;
    28ee:	ldr	r3, [r5, #0]
    28f0:	mov.w	r2, #4608	; 0x1200
    return 1; // signal success.
    28f4:	mov	r0, r4
    head = (head+1)%MAXBUF;
    28f6:	adds	r3, #1
    28f8:	sdiv	r1, r3, r2
    28fc:	mls	r3, r2, r1, r3
    2900:	str	r3, [r5, #0]
    queue_busy=0;
    2902:	movs	r3, #0
    2904:	str	r3, [r6, #0]
    return 1; // signal success.
    2906:	b.n	28dc <pullData(unsigned long*)+0x18>
    2908:	.word	0x200141e8
    290c:	.word	0x2000dfd4
    2910:	.word	0x200141e4
    2914:	.word	0x70000000

00002918 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
{
    2918:	push	{r0, r1, r4, r5, r6, lr}
    291a:	mov	r6, r0
    rtc_get_datetime(&t);
    291c:	mov	r0, sp
{
    291e:	mov	r5, r2
    2920:	mov	r4, r1
    rtc_get_datetime(&t);
    2922:	bl	3c2a <rtc_get_datetime(datetime_t*)>
  year -= 1980;
    2926:	ldrh.w	r2, [sp]
    *date = FS_DATE(t.year,t.month,t.day);
    292a:	ldrsb.w	r3, [sp, #3]
    292e:	subw	r2, r2, #1980	; 0x7bc
    2932:	uxth	r2, r2
         year << 9 | month << 5 | day;
    2934:	cmp	r2, #127	; 0x7f
    2936:	bhi.n	2982 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2938:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    293c:	cmp	r1, #12
    293e:	bhi.n	2982 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2940:	uxtb	r3, r3
    2942:	cmp	r3, #31
    2944:	bhi.n	2982 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    2946:	orr.w	r3, r3, r1, lsl #5
    294a:	orr.w	r3, r3, r2, lsl #9
    294e:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    2950:	ldrb.w	r1, [sp, #5]
    2954:	ldrsb.w	r2, [sp, #7]
         hour << 11 | minute << 5 | second >> 1;
    2958:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    295a:	strh	r3, [r6, #0]
    295c:	bhi.n	2986 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    295e:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    2962:	cmp	r3, #59	; 0x3b
    2964:	bhi.n	2986 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    2966:	uxtb	r2, r2
    2968:	cmp	r2, #59	; 0x3b
    296a:	bhi.n	2986 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    296c:	lsls	r3, r3, #5
    296e:	orr.w	r3, r3, r1, lsl #11
    2972:	orr.w	r3, r3, r2, lsr #1
    2976:	uxth	r3, r3
    2978:	strh	r3, [r4, #0]
    *ms10 = 0;
    297a:	movs	r3, #0
    297c:	strb	r3, [r5, #0]
}
    297e:	add	sp, #8
    2980:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    2982:	movs	r3, #0
    2984:	b.n	2950 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    2986:	movs	r3, #0
    2988:	b.n	2978 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

0000298a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    298a:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    298c:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    298e:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2990:	cbz	r5, 299c <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    2992:	cbnz	r3, 29a6 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    2994:	mov	r0, r5
  }
    2996:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2998:	b.w	726a <FatFile::seekSet(unsigned long)>
    299c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    299e:	cbz	r0, 29a6 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    29a0:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    29a2:	b.w	5be0 <ExFatFile::seekSet(unsigned long long)>
  }
    29a6:	pop	{r4, r5}
    29a8:	bx	lr

000029aa <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    29aa:	movs	r3, #0
    29ac:	movs	r2, #10
    29ae:	b.w	c736 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000029b2 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    29b2:	push	{r0, r1, r4, lr}
    29b4:	mov	r4, r0
    29b6:	cbz	r1, 29d2 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    29b8:	mov	r0, r1
    29ba:	str	r1, [sp, #4]
    29bc:	bl	ed90 <strlen>
    29c0:	ldr	r3, [r4, #0]
    29c2:	mov	r2, r0
    29c4:	ldr	r1, [sp, #4]
    29c6:	ldr	r3, [r3, #4]
    29c8:	mov	r0, r4
    29ca:	add	sp, #8
    29cc:	ldmia.w	sp!, {r4, lr}
    29d0:	bx	r3
    29d2:	add	sp, #8
    29d4:	pop	{r4, pc}

000029d6 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    29d6:	b.w	29b2 <Print::write(char const*) [clone .isra.0]>

000029da <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    29da:	push	{r4, lr}
    29dc:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    29de:	bl	29b2 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    29e2:	mov	r0, r4
    29e4:	ldmia.w	sp!, {r4, lr}
    29e8:	b.w	c6e4 <Print::println()>

000029ec <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    29ec:	ldr	r3, [r0, #56]	; 0x38
    29ee:	cbz	r3, 29f6 <FsBaseFile::sync()+0xa>
    29f0:	mov	r0, r3
    29f2:	b.w	74b4 <FatFile::sync()>
    29f6:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    29f8:	cbz	r0, 29fe <FsBaseFile::sync()+0x12>
    29fa:	b.w	6814 <ExFatFile::sync()>
  }
    29fe:	bx	lr

00002a00 <timeStamp()>:
{
    2a00:	push	{r4, lr}
    2a02:	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2a04:	ldr	r4, [pc, #52]	; (2a3c <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    2a06:	add	r0, sp, #16
    2a08:	bl	3c2a <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2a0c:	ldrsb.w	r3, [sp, #23]
    2a10:	ldrsh.w	r2, [sp, #16]
    2a14:	mov	r0, r4
    2a16:	str	r3, [sp, #12]
    2a18:	ldrsb.w	r3, [sp, #22]
    2a1c:	ldr	r1, [pc, #32]	; (2a40 <timeStamp()+0x40>)
    2a1e:	str	r3, [sp, #8]
    2a20:	ldrsb.w	r3, [sp, #21]
    2a24:	str	r3, [sp, #4]
    2a26:	ldrsb.w	r3, [sp, #19]
    2a2a:	str	r3, [sp, #0]
    2a2c:	ldrsb.w	r3, [sp, #18]
    2a30:	bl	e8fc <siprintf>
}
    2a34:	mov	r0, r4
    2a36:	add	sp, #24
    2a38:	pop	{r4, pc}
    2a3a:	nop
    2a3c:	.word	0x20015538
    2a40:	.word	0x20000cc8

00002a44 <wavHeaderInit(long, long, long, int)>:
{
    2a44:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  memcpy(wav_hdr.rId,"RIFF",4);
    2a46:	ldr	r4, [pc, #196]	; (2b0c <wavHeaderInit(long, long, long, int)+0xc8>)
  int nbytes=nbits/8;
    2a48:	cmp	r2, #0
    2a4a:	str	r3, [sp, #4]
    2a4c:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    2a4e:	ldr	r3, [pc, #192]	; (2b10 <wavHeaderInit(long, long, long, int)+0xcc>)
  int nbytes=nbits/8;
    2a50:	it	lt
    2a52:	addlt	r5, r2, #7
  wav_hdr.nSamplesPerSec=fsamp;
    2a54:	str	r0, [r4, #24]
  wav_hdr.nChannels=nchan;
    2a56:	uxth	r6, r1
  memcpy(wav_hdr.rId,"RIFF",4);
    2a58:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    2a5a:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    2a5e:	asrs	r5, r5, #3
  wav_hdr.nBitsPerSamples=nbits;
    2a60:	strh	r2, [r4, #34]	; 0x22
  memcpy(wav_hdr.wId,"WAVE",4);
    2a62:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nChannels=nchan;
    2a66:	strh	r6, [r4, #22]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2a68:	muls	r0, r5
  memcpy(wav_hdr.wId,"WAVE",4);
    2a6a:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    2a6c:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nBlockAlign=nchan*nbytes;
    2a70:	smulbb	r5, r5, r6
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2a74:	muls	r1, r0
  memcpy(wav_hdr.fId,"fmt ",4);
    2a76:	add.w	r3, r3, #1974272	; 0x1e2000
  strcpy(&wav_hdr.info[0], MAGIC);
    2a7a:	add.w	r0, r4, #44	; 0x2c
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2a7e:	str	r1, [r4, #28]
  memcpy(wav_hdr.fId,"fmt ",4);
    2a80:	addw	r3, r3, #3087	; 0xc0f
  strcpy(&wav_hdr.info[0], MAGIC);
    2a84:	ldr	r1, [pc, #140]	; (2b14 <wavHeaderInit(long, long, long, int)+0xd0>)
  wav_hdr.nBlockAlign=nchan*nbytes;
    2a86:	strh	r5, [r4, #32]
  memcpy(wav_hdr.fId,"fmt ",4);
    2a88:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    2a8a:	add.w	r3, r3, #1090519040	; 0x41000000
    2a8e:	subw	r3, r3, #3074	; 0xc02
    2a92:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    2a96:	add.w	r3, r3, #218107136	; 0xd000d00
    2a9a:	add.w	r3, r3, #15859712	; 0xf20000
    2a9e:	adds	r3, #5
    2aa0:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    2aa2:	mov.w	r3, #504	; 0x1f8
    2aa6:	str	r3, [r4, #4]
  wav_hdr.fLen = 0x10;
    2aa8:	movs	r3, #16
    2aaa:	str	r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
    2aac:	mov.w	r3, #460	; 0x1cc
    2ab0:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    2ab2:	movs	r3, #0
    2ab4:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    2ab8:	movs	r3, #1
    2aba:	strh	r3, [r4, #20]
    2abc:	ldr	r3, [pc, #88]	; (2b18 <wavHeaderInit(long, long, long, int)+0xd4>)
    2abe:	ldr	r5, [r3, #0]
  strcpy(&wav_hdr.info[0], MAGIC);
    2ac0:	bl	ecdc <strcpy>
  strcpy(&wav_hdr.info[4], timeStamp());
    2ac4:	bl	2a00 <timeStamp()>
    2ac8:	mov	r1, r0
    2aca:	add.w	r0, r4, #48	; 0x30
    2ace:	bl	ecdc <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    2ad2:	ldr	r2, [sp, #4]
    2ad4:	ldr	r1, [pc, #68]	; (2b1c <wavHeaderInit(long, long, long, int)+0xd8>)
    2ad6:	add.w	r0, r4, #64	; 0x40
    2ada:	bl	e8fc <siprintf>
  memcpy(&wav_hdr.info[32], &tt,4);
    2ade:	str	r5, [r4, #76]	; 0x4c
  memcpy(&wav_hdr.info[36], getStore(),16*2);
    2ae0:	bl	2834 <getStore()>
    2ae4:	adds	r4, #80	; 0x50
    2ae6:	mov	r3, r0
    2ae8:	add.w	r5, r0, #32
    2aec:	ldr	r0, [r3, #0]
    2aee:	adds	r3, #8
    2af0:	ldr.w	r1, [r3, #-4]
    2af4:	mov	r2, r4
    2af6:	cmp	r3, r5
    2af8:	stmia	r2!, {r0, r1}
    2afa:	mov	r4, r2
    2afc:	bne.n	2aec <wavHeaderInit(long, long, long, int)+0xa8>
  strcpy(&wav_hdr.info[68]," end");
    2afe:	ldr	r1, [pc, #32]	; (2b20 <wavHeaderInit(long, long, long, int)+0xdc>)
    2b00:	ldr	r0, [pc, #32]	; (2b24 <wavHeaderInit(long, long, long, int)+0xe0>)
    2b02:	bl	ecdc <strcpy>
}
    2b06:	ldr	r0, [pc, #4]	; (2b0c <wavHeaderInit(long, long, long, int)+0xc8>)
    2b08:	add	sp, #12
    2b0a:	pop	{r4, r5, r6, r7, pc}
    2b0c:	.word	0x200143f4
    2b10:	.word	0x46464952
    2b14:	.word	0x20000d80
    2b18:	.word	0x20015374
    2b1c:	.word	0x20000d85
    2b20:	.word	0x20000d8a
    2b24:	.word	0x20014464

00002b28 <wavHeaderUpdate(long)>:
  wav_hdr.dLen = nbytes;
    2b28:	ldr	r3, [pc, #12]	; (2b38 <wavHeaderUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    2b2a:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    2b2c:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    2b30:	add	r2, r0
}
    2b32:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    2b34:	str	r2, [r3, #4]
}
    2b36:	bx	lr
    2b38:	.word	0x200143f4

00002b3c <wavHeaderWrite(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    2b3c:	ldr	r3, [pc, #76]	; (2b8c <wavHeaderWrite(char*)+0x50>)
    2b3e:	ldr	r2, [r3, #72]	; 0x48
{ 
    2b40:	push	{r4, r5, r6, lr}
    2b42:	mov	r6, r0
    2b44:	cbz	r2, 2b7a <wavHeaderWrite(char*)+0x3e>
    2b46:	ldr	r4, [r2, #20]
    2b48:	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    2b4a:	mov	r2, r4
    2b4c:	mov	r3, r5
    2b4e:	ldr	r1, [pc, #64]	; (2b90 <wavHeaderWrite(char*)+0x54>)
    2b50:	ldr	r0, [pc, #64]	; (2b94 <wavHeaderWrite(char*)+0x58>)
    2b52:	bl	c71c <Print::printf(char const*, ...)>
  file.seekSet(0);
    2b56:	movs	r3, #0
    2b58:	movs	r2, #0
    2b5a:	ldr	r0, [pc, #60]	; (2b98 <wavHeaderWrite(char*)+0x5c>)
    2b5c:	bl	298a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write((const uint8_t*)wav_hdr,512);
    2b60:	mov.w	r2, #512	; 0x200
    2b64:	mov	r1, r6
    2b66:	ldr	r0, [pc, #36]	; (2b8c <wavHeaderWrite(char*)+0x50>)
    2b68:	bl	1f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>
  file.seekSet(fpos);
    2b6c:	mov	r2, r4
    2b6e:	mov	r3, r5
    2b70:	ldr	r0, [pc, #36]	; (2b98 <wavHeaderWrite(char*)+0x5c>)
}
    2b72:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    2b76:	b.w	298a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    2b7a:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    2b7c:	cbz	r3, 2b84 <wavHeaderWrite(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    2b7e:	ldrd	r4, r5, [r3]
    2b82:	b.n	2b4a <wavHeaderWrite(char*)+0xe>
    2b84:	mov	r4, r3
    2b86:	mov	r5, r3
    2b88:	b.n	2b4a <wavHeaderWrite(char*)+0xe>
    2b8a:	nop
    2b8c:	.word	0x20014bb8
    2b90:	.word	0x20000d8f
    2b94:	.word	0x20001d30
    2b98:	.word	0x20014bc8

00002b9c <makeHeader(long*)>:
{
    2b9c:	push	{r4, lr}
    2b9e:	sub	sp, #32
    2ba0:	mov	r4, r0
    rtc_get_datetime(&t);
    2ba2:	add	r0, sp, #24
    2ba4:	bl	3c2a <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    2ba8:	ldrsb.w	r3, [sp, #31]
    2bac:	ldr	r2, [pc, #156]	; (2c4c <makeHeader(long*)+0xb0>)
    2bae:	mov	r0, r4
    2bb0:	str	r3, [sp, #16]
    2bb2:	ldrsb.w	r3, [sp, #30]
    2bb6:	ldr	r1, [pc, #152]	; (2c50 <makeHeader(long*)+0xb4>)
    2bb8:	str	r3, [sp, #12]
    2bba:	ldrsb.w	r3, [sp, #29]
    2bbe:	str	r3, [sp, #8]
    2bc0:	ldrsb.w	r3, [sp, #27]
    2bc4:	str	r3, [sp, #4]
    2bc6:	ldrsb.w	r3, [sp, #26]
    2bca:	str	r3, [sp, #0]
    2bcc:	ldrsh.w	r3, [sp, #24]
    2bd0:	bl	e8fc <siprintf>
    header[5] = 20;          // SW version
    2bd4:	movs	r3, #20
    2bd6:	str	r3, [r4, #20]
    header[6] = SerNum;      // serial number
    2bd8:	ldr	r3, [pc, #120]	; (2c54 <makeHeader(long*)+0xb8>)
    2bda:	ldr	r3, [r3, #0]
    2bdc:	str	r3, [r4, #24]
    header[7] = fsamp;
    2bde:	ldr	r3, [pc, #120]	; (2c58 <makeHeader(long*)+0xbc>)
    2be0:	ldr	r3, [r3, #0]
    2be2:	str	r3, [r4, #28]
    header[8] = NCHAN_ACQ;
    2be4:	movs	r3, #1
    2be6:	str	r3, [r4, #32]
    header[9] = t_acq;
    2be8:	ldr	r3, [pc, #112]	; (2c5c <makeHeader(long*)+0xc0>)
    2bea:	ldrh	r3, [r3, #0]
    2bec:	uxth	r3, r3
    2bee:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    2bf0:	ldr	r3, [pc, #108]	; (2c60 <makeHeader(long*)+0xc4>)
    2bf2:	ldrh	r3, [r3, #0]
    2bf4:	uxth	r3, r3
    2bf6:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    2bf8:	ldr	r3, [pc, #104]	; (2c64 <makeHeader(long*)+0xc8>)
    2bfa:	ldrh	r3, [r3, #0]
    2bfc:	uxth	r3, r3
    2bfe:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    2c00:	ldr	r3, [pc, #100]	; (2c68 <makeHeader(long*)+0xcc>)
    2c02:	ldrh	r3, [r3, #0]
    2c04:	sxth	r3, r3
    2c06:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    2c08:	ldr	r3, [pc, #96]	; (2c6c <makeHeader(long*)+0xd0>)
    2c0a:	ldrh	r3, [r3, #0]
    2c0c:	sxth	r3, r3
    2c0e:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    2c10:	ldr	r3, [pc, #92]	; (2c70 <makeHeader(long*)+0xd4>)
    2c12:	ldrh	r3, [r3, #0]
    2c14:	sxth	r3, r3
    2c16:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    2c18:	ldr	r3, [pc, #88]	; (2c74 <makeHeader(long*)+0xd8>)
    2c1a:	ldrh	r3, [r3, #0]
    2c1c:	sxth	r3, r3
    2c1e:	str	r3, [r4, #60]	; 0x3c
    2c20:	ldr	r3, [pc, #84]	; (2c78 <makeHeader(long*)+0xdc>)
    2c22:	ldr	r3, [r3, #0]
    header[16] = millis();
    2c24:	str	r3, [r4, #64]	; 0x40
    memcpy(&header[20], getStore(),16*2);
    2c26:	bl	2834 <getStore()>
    2c2a:	add.w	r3, r4, #80	; 0x50
    2c2e:	add.w	r2, r0, #32
    2c32:	ldr.w	r1, [r0], #4
    2c36:	cmp	r0, r2
    2c38:	str.w	r1, [r3], #4
    2c3c:	bne.n	2c32 <makeHeader(long*)+0x96>
    header[127]=0x55555555;
    2c3e:	mov.w	r3, #1431655765	; 0x55555555
}
    2c42:	movs	r0, #1
    header[127]=0x55555555;
    2c44:	str.w	r3, [r4, #508]	; 0x1fc
}
    2c48:	add	sp, #32
    2c4a:	pop	{r4, pc}
    2c4c:	.word	0x20000d80
    2c50:	.word	0x20000cc6
    2c54:	.word	0x20007dc8
    2c58:	.word	0x200022d4
    2c5c:	.word	0x200022f4
    2c60:	.word	0x200022f6
    2c64:	.word	0x20015468
    2c68:	.word	0x200153c2
    2c6c:	.word	0x20015466
    2c70:	.word	0x200022e8
    2c74:	.word	0x200153ba
    2c78:	.word	0x20015374

00002c7c <checkEndOfFile(short)>:
  if(state==RUNNING)
    2c7c:	cmp	r0, #2
{ 
    2c7e:	push	{r4, lr}
    2c80:	mov	r4, r0
  if(state==RUNNING)
    2c82:	bne.n	2d18 <checkEndOfFile(short)+0x9c>
    uint32_t tt = rtc_get();
    2c84:	bl	b95c <rtc_get>
    uint32_t dt1 = tt % t_acq;
    2c88:	ldr	r3, [pc, #172]	; (2d38 <checkEndOfFile(short)+0xbc>)
    2c8a:	ldrh	r2, [r3, #0]
    2c8c:	uxth	r2, r2
    2c8e:	udiv	r3, r0, r2
    2c92:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2c96:	ldr	r2, [pc, #164]	; (2d3c <checkEndOfFile(short)+0xc0>)
    2c98:	ldr	r1, [r2, #0]
    dta = dt1;
    2c9a:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2c9c:	cmp	r3, r1
    2c9e:	bcs.n	2d18 <checkEndOfFile(short)+0x9c>
      if(t_rep>t_on)                      // and if foreseen  check for hibernation
    2ca0:	ldr	r4, [pc, #156]	; (2d40 <checkEndOfFile(short)+0xc4>)
    2ca2:	ldr	r1, [pc, #160]	; (2d44 <checkEndOfFile(short)+0xc8>)
    2ca4:	ldrh	r2, [r4, #0]
    2ca6:	ldrh	r3, [r1, #0]
    2ca8:	uxth	r2, r2
    2caa:	uxth	r3, r3
    2cac:	cmp	r2, r3
    2cae:	bhi.n	2d1c <checkEndOfFile(short)+0xa0>
      if(d_rep>d_on)                      // and if foreseen  check for hibernation
    2cb0:	ldr	r4, [pc, #148]	; (2d48 <checkEndOfFile(short)+0xcc>)
    2cb2:	ldr	r1, [pc, #152]	; (2d4c <checkEndOfFile(short)+0xd0>)
    2cb4:	ldrh	r2, [r4, #0]
    2cb6:	ldrh	r3, [r1, #0]
    2cb8:	uxth	r2, r2
    2cba:	uxth	r3, r3
    2cbc:	cmp	r2, r3
    2cbe:	bls.n	2cda <checkEndOfFile(short)+0x5e>
      { int32_t dd=tt/(24*3600);
    2cc0:	ldr	r3, [pc, #140]	; (2d50 <checkEndOfFile(short)+0xd4>)
        uint32_t dd2 = (dd % d_rep);
    2cc2:	ldrh	r2, [r4, #0]
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    2cc4:	ldrh	r1, [r1, #0]
        uint32_t dd2 = (dd % d_rep);
    2cc6:	uxth	r2, r2
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    2cc8:	uxth	r1, r1
      { int32_t dd=tt/(24*3600);
    2cca:	udiv	r3, r0, r3
        uint32_t dd2 = (dd % d_rep);
    2cce:	udiv	r4, r3, r2
    2cd2:	mls	r3, r2, r4, r3
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    2cd6:	cmp	r3, r1
    2cd8:	bcs.n	2d30 <checkEndOfFile(short)+0xb4>
      uint32_t hh=(tt%(24*3600)/3600);
    2cda:	ldr	r3, [pc, #116]	; (2d50 <checkEndOfFile(short)+0xd4>)
    2cdc:	mov.w	r4, #3600	; 0xe10
    2ce0:	udiv	r2, r0, r3
    2ce4:	mls	r0, r3, r2, r0
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    2ce8:	ldr	r3, [pc, #104]	; (2d54 <checkEndOfFile(short)+0xd8>)
      uint32_t hh=(tt%(24*3600)/3600);
    2cea:	udiv	r0, r0, r4
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    2cee:	ldrh	r3, [r3, #0]
    2cf0:	uxth	r3, r3
    2cf2:	cmp	r0, r3
    2cf4:	bcc.n	2d00 <checkEndOfFile(short)+0x84>
    2cf6:	ldr	r3, [pc, #96]	; (2d58 <checkEndOfFile(short)+0xdc>)
    2cf8:	ldrh	r3, [r3, #0]
    2cfa:	uxth	r3, r3
    2cfc:	cmp	r0, r3
    2cfe:	bcc.n	2d34 <checkEndOfFile(short)+0xb8>
    2d00:	ldr	r3, [pc, #88]	; (2d5c <checkEndOfFile(short)+0xe0>)
    2d02:	ldrh	r3, [r3, #0]
    2d04:	uxth	r3, r3
    2d06:	cmp	r0, r3
    2d08:	bcc.n	2d30 <checkEndOfFile(short)+0xb4>
    2d0a:	ldr	r3, [pc, #84]	; (2d60 <checkEndOfFile(short)+0xe4>)
    2d0c:	ldrh	r3, [r3, #0]
    2d0e:	uxth	r3, r3
    2d10:	cmp	r0, r3
    2d12:	ite	cs
    2d14:	movcs	r4, #4
    2d16:	movcc	r4, #3
}
    2d18:	mov	r0, r4
    2d1a:	pop	{r4, pc}
        uint32_t dt2 = (tt % t_rep);
    2d1c:	ldrh	r3, [r4, #0]
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2d1e:	ldrh	r2, [r1, #0]
        uint32_t dt2 = (tt % t_rep);
    2d20:	uxth	r3, r3
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2d22:	uxth	r2, r2
        uint32_t dt2 = (tt % t_rep);
    2d24:	udiv	r1, r0, r3
    2d28:	mls	r3, r3, r1, r0
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2d2c:	cmp	r3, r2
    2d2e:	bcc.n	2cb0 <checkEndOfFile(short)+0x34>
    2d30:	movs	r4, #4
    2d32:	b.n	2d18 <checkEndOfFile(short)+0x9c>
    2d34:	movs	r4, #3
    2d36:	b.n	2d18 <checkEndOfFile(short)+0x9c>
    2d38:	.word	0x200022f4
    2d3c:	.word	0x2001483c
    2d40:	.word	0x20015468
    2d44:	.word	0x200022f6
    2d48:	.word	0x200153b8
    2d4c:	.word	0x200022ec
    2d50:	.word	0x00015180
    2d54:	.word	0x200153be
    2d58:	.word	0x200022ee
    2d5c:	.word	0x200022f0
    2d60:	.word	0x200022f2

00002d64 <newFolder(int)>:

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    2d64:	ldr	r3, [pc, #12]	; (2d74 <newFolder(int)+0x10>)
    2d66:	ldr	r2, [r3, #0]
    2d68:	cmp	r2, r0
  d0=d;
    2d6a:	itte	ne
    2d6c:	strne	r0, [r3, #0]
  return 1;
    2d6e:	movne	r0, #1
  if(d==d0) return 0; // same day
    2d70:	moveq	r0, #0
}
    2d72:	bx	lr
    2d74:	.word	0x20002100

00002d78 <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    2d78:	push	{r4, lr}
    2d7a:	sub	sp, #24
    2d7c:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2d7e:	add	r0, sp, #16
    2d80:	bl	3c2a <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    2d84:	ldrsb.w	r1, [sp, #21]
    2d88:	mov	r0, r1
    2d8a:	bl	2d64 <newFolder(int)>
    2d8e:	cbz	r0, 2dca <newDirectory(char*)+0x52>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    2d90:	ldrsb.w	r3, [sp, #19]
    2d94:	mov	r0, r4
    2d96:	ldr	r2, [pc, #56]	; (2dd0 <newDirectory(char*)+0x58>)
    2d98:	str	r3, [sp, #8]
    2d9a:	ldrsb.w	r3, [sp, #18]
    2d9e:	str	r1, [sp, #12]
    2da0:	str	r3, [sp, #4]
    2da2:	ldrsh.w	r3, [sp, #16]
    2da6:	ldr	r1, [pc, #44]	; (2dd4 <newDirectory(char*)+0x5c>)
    2da8:	str	r3, [sp, #0]
    2daa:	ldr	r3, [pc, #44]	; (2dd8 <newDirectory(char*)+0x60>)
    2dac:	ldr	r3, [r3, #0]
    2dae:	bl	e8fc <siprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    2db2:	ldr	r0, [pc, #40]	; (2ddc <newDirectory(char*)+0x64>)
    2db4:	bl	c6e4 <Print::println()>
    2db8:	ldr	r1, [pc, #36]	; (2de0 <newDirectory(char*)+0x68>)
    2dba:	ldr	r0, [pc, #32]	; (2ddc <newDirectory(char*)+0x64>)
    2dbc:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
    2dc0:	ldr	r0, [pc, #24]	; (2ddc <newDirectory(char*)+0x64>)
    2dc2:	mov	r1, r4
    2dc4:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
          return 1;   // have new directory
    2dc8:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    2dca:	add	sp, #24
    2dcc:	pop	{r4, pc}
    2dce:	nop
    2dd0:	.word	0x20001157
    2dd4:	.word	0x20000d65
    2dd8:	.word	0x20007dc8
    2ddc:	.word	0x20001d30
    2de0:	.word	0x20001454

00002de4 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    2de4:	push	{r4, r5, r6, r7, lr}
    2de6:	sub	sp, #36	; 0x24
    2de8:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2dea:	add	r0, sp, #24
    2dec:	bl	3c2a <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    2df0:	ldr	r3, [pc, #104]	; (2e5c <newFileName(char*)+0x78>)
    2df2:	ldrsb.w	r7, [sp, #31]
    2df6:	ldrh	r2, [r3, #0]
    2df8:	ldrsb.w	r6, [sp, #30]
    2dfc:	ldrsb.w	r5, [sp, #29]
    2e00:	sxth	r2, r2
    2e02:	ldrsb.w	r0, [sp, #27]
    2e06:	ldrsb.w	r1, [sp, #26]
    2e0a:	ldrsh.w	r3, [sp, #24]
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e0e:	str	r1, [sp, #0]
    2e10:	strd	r6, r7, [sp, #12]
    2e14:	strd	r0, r5, [sp, #4]
    if(proc==0)
    2e18:	cbnz	r2, 2e54 <newFileName(char*)+0x70>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e1a:	ldr	r2, [pc, #68]	; (2e60 <newFileName(char*)+0x7c>)
    2e1c:	ldr	r1, [pc, #68]	; (2e64 <newFileName(char*)+0x80>)
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e1e:	mov	r0, r4
    2e20:	bl	e8fc <siprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    2e24:	ldr	r0, [pc, #64]	; (2e68 <newFileName(char*)+0x84>)
    2e26:	bl	c6e4 <Print::println()>
    2e2a:	ldr	r1, [pc, #64]	; (2e6c <newFileName(char*)+0x88>)
    2e2c:	ldr	r0, [pc, #56]	; (2e68 <newFileName(char*)+0x84>)
    2e2e:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
    2e32:	mov	r1, r4
    2e34:	ldr	r0, [pc, #48]	; (2e68 <newFileName(char*)+0x84>)
    2e36:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
    Serial.print(" "); Serial.print(micros());
    2e3a:	ldr	r1, [pc, #52]	; (2e70 <newFileName(char*)+0x8c>)
    2e3c:	ldr	r0, [pc, #40]	; (2e68 <newFileName(char*)+0x84>)
    2e3e:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
    2e42:	bl	b714 <micros>
    2e46:	mov	r1, r0
    2e48:	ldr	r0, [pc, #28]	; (2e68 <newFileName(char*)+0x84>)
    2e4a:	bl	29aa <Print::print(unsigned long) [clone .isra.0]>

    return 1;
}
    2e4e:	movs	r0, #1
    2e50:	add	sp, #36	; 0x24
    2e52:	pop	{r4, r5, r6, r7, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e54:	ldr	r2, [pc, #8]	; (2e60 <newFileName(char*)+0x7c>)
    2e56:	ldr	r1, [pc, #28]	; (2e74 <newFileName(char*)+0x90>)
    2e58:	b.n	2e1e <newFileName(char*)+0x3a>
    2e5a:	nop
    2e5c:	.word	0x200153c2
    2e60:	.word	0x200013f1
    2e64:	.word	0x20000d20
    2e68:	.word	0x20001d30
    2e6c:	.word	0x20001454
    2e70:	.word	0x2000145c
    2e74:	.word	0x20000d40

00002e78 <getAlarmTime(unsigned long)>:
    24 hour aquisition is ensured by t_1=0, t_2=12, t_3=12, t_4=24

    wakeup time is estimated by getAlarmTime
*/
uint32_t getAlarmTime(uint32_t secs)
{   // estimate the wakup-time in seconds 
    2e78:	push	{r4, r5, r6, r7, lr}
    // input: actual time in s
    // output: next wakup time in s
    // wakeup is in absolute seconds
    // 
    // secs is actual time in s
    uint32_t dd = secs/(24*3600);       // full days so far
    2e7a:	ldr	r5, [pc, #216]	; (2f54 <getAlarmTime(unsigned long)+0xdc>)
    uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    2e7c:	mov.w	r2, #3600	; 0xe10
    { // we are too early
      secs=(d_0+20000)*(24*3600);
      return secs;
    }
    //
    if(d_rep> d_on)
    2e80:	ldr	r7, [pc, #212]	; (2f58 <getAlarmTime(unsigned long)+0xe0>)
    uint32_t dd = secs/(24*3600);       // full days so far
    2e82:	udiv	r4, r0, r5
    uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    2e86:	mls	r3, r5, r4, r0
    2e8a:	udiv	r3, r3, r2
    if(d_rep> d_on)
    2e8e:	ldr	r2, [pc, #204]	; (2f5c <getAlarmTime(unsigned long)+0xe4>)
    2e90:	ldrh	r6, [r2, #0]
    2e92:	ldrh	r1, [r7, #0]
    2e94:	uxth	r6, r6
    2e96:	uxth	r1, r1
    2e98:	cmp	r6, r1
    2e9a:	bls.n	2ec4 <getAlarmTime(unsigned long)+0x4c>
    {  // check if day is good for acqisition
      if(dd % d_rep >=d_on)
    2e9c:	ldrh	r1, [r2, #0]
    2e9e:	ldrh	r6, [r7, #0]
    2ea0:	uxth	r1, r1
    2ea2:	uxth	r6, r6
    2ea4:	udiv	r7, r4, r1
    2ea8:	mls	r1, r1, r7, r4
    2eac:	cmp	r1, r6
    2eae:	bcc.n	2ec4 <getAlarmTime(unsigned long)+0x4c>
      {
        secs = ((dd/d_rep)+1)*d_rep*(24*3600);  
    2eb0:	ldrh	r3, [r2, #0]
    2eb2:	ldrh	r0, [r2, #0]
    2eb4:	uxth	r3, r3
    2eb6:	uxth	r0, r0
    2eb8:	udiv	r3, r4, r3
    2ebc:	mla	r0, r3, r0, r0
    2ec0:	muls	r0, r5
      dd++;
      secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    }
    //
    return secs;
}
    2ec2:	pop	{r4, r5, r6, r7, pc}
    if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)) )
    2ec4:	ldr	r2, [pc, #152]	; (2f60 <getAlarmTime(unsigned long)+0xe8>)
    2ec6:	ldrh	r1, [r2, #0]
    2ec8:	uxth	r1, r1
    2eca:	cmp	r3, r1
    2ecc:	bcc.n	2ed8 <getAlarmTime(unsigned long)+0x60>
    2ece:	ldr	r1, [pc, #148]	; (2f64 <getAlarmTime(unsigned long)+0xec>)
    2ed0:	ldrh	r1, [r1, #0]
    2ed2:	uxth	r1, r1
    2ed4:	cmp	r3, r1
    2ed6:	bcc.n	2eec <getAlarmTime(unsigned long)+0x74>
    2ed8:	ldr	r1, [pc, #140]	; (2f68 <getAlarmTime(unsigned long)+0xf0>)
    2eda:	ldrh	r1, [r1, #0]
    2edc:	uxth	r1, r1
    2ede:	cmp	r3, r1
    2ee0:	bcc.n	2f0e <getAlarmTime(unsigned long)+0x96>
    2ee2:	ldr	r1, [pc, #136]	; (2f6c <getAlarmTime(unsigned long)+0xf4>)
    2ee4:	ldrh	r1, [r1, #0]
    2ee6:	uxth	r1, r1
    2ee8:	cmp	r3, r1
    2eea:	bcs.n	2f0e <getAlarmTime(unsigned long)+0x96>
      if(t_rep>t_on)
    2eec:	ldr	r1, [pc, #128]	; (2f70 <getAlarmTime(unsigned long)+0xf8>)
    2eee:	ldr	r5, [pc, #132]	; (2f74 <getAlarmTime(unsigned long)+0xfc>)
    2ef0:	ldrh	r6, [r1, #0]
    2ef2:	ldrh	r5, [r5, #0]
    2ef4:	uxth	r6, r6
    2ef6:	uxth	r5, r5
    2ef8:	cmp	r6, r5
    2efa:	bls.n	2f0e <getAlarmTime(unsigned long)+0x96>
        secs = ((secs/t_rep)+1)*t_rep;
    2efc:	ldrh	r3, [r1, #0]
    2efe:	uxth	r3, r3
    2f00:	udiv	r3, r0, r3
    2f04:	ldrh	r0, [r1, #0]
    2f06:	uxth	r0, r0
    2f08:	mla	r0, r3, r0, r0
        return secs;
    2f0c:	b.n	2ec2 <getAlarmTime(unsigned long)+0x4a>
    if (hh<h_1)                // from mid-night to h_1 
    2f0e:	ldrh	r1, [r2, #0]
    2f10:	uxth	r1, r1
    2f12:	cmp	r3, r1
    2f14:	bcs.n	2f28 <getAlarmTime(unsigned long)+0xb0>
      secs = (dd*24+ h_1)*3600;     // next time is h1
    2f16:	ldrh	r0, [r2, #0]
      secs = (dd*24+h_3)*3600;      // next time is h3
    2f18:	movs	r3, #24
    2f1a:	muls	r3, r4
      secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    2f1c:	uxtah	r0, r3, r0
    2f20:	mov.w	r3, #3600	; 0xe10
    2f24:	muls	r0, r3
    2f26:	b.n	2ec2 <getAlarmTime(unsigned long)+0x4a>
    else if ((hh>=h_2) && (hh<h_3)) // between the two recording periods
    2f28:	ldr	r1, [pc, #56]	; (2f64 <getAlarmTime(unsigned long)+0xec>)
    2f2a:	ldrh	r1, [r1, #0]
    2f2c:	uxth	r1, r1
    2f2e:	cmp	r3, r1
    2f30:	bcc.n	2f3c <getAlarmTime(unsigned long)+0xc4>
    2f32:	ldr	r5, [pc, #52]	; (2f68 <getAlarmTime(unsigned long)+0xf0>)
    2f34:	ldrh	r1, [r5, #0]
    2f36:	uxth	r1, r1
    2f38:	cmp	r3, r1
    2f3a:	bcc.n	2f50 <getAlarmTime(unsigned long)+0xd8>
    else if (hh>=h_4) // after the second recording period (goes into next day)
    2f3c:	ldr	r1, [pc, #44]	; (2f6c <getAlarmTime(unsigned long)+0xf4>)
    2f3e:	ldrh	r1, [r1, #0]
    2f40:	uxth	r1, r1
    2f42:	cmp	r3, r1
    2f44:	bcc.n	2ec2 <getAlarmTime(unsigned long)+0x4a>
      secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    2f46:	movs	r3, #24
    2f48:	ldrh	r0, [r2, #0]
    2f4a:	mla	r3, r4, r3, r3
    2f4e:	b.n	2f1c <getAlarmTime(unsigned long)+0xa4>
      secs = (dd*24+h_3)*3600;      // next time is h3
    2f50:	ldrh	r0, [r5, #0]
    2f52:	b.n	2f18 <getAlarmTime(unsigned long)+0xa0>
    2f54:	.word	0x00015180
    2f58:	.word	0x200022ec
    2f5c:	.word	0x200153b8
    2f60:	.word	0x200153be
    2f64:	.word	0x200022ee
    2f68:	.word	0x200022f0
    2f6c:	.word	0x200022f2
    2f70:	.word	0x20015468
    2f74:	.word	0x200022f6

00002f78 <powerDown()>:

void powerDown(void)
{
  SNVS_LPCR |= (1 << 6); // turn off power
    2f78:	ldr	r2, [pc, #12]	; (2f88 <powerDown()+0x10>)
    2f7a:	ldr	r3, [r2, #56]	; 0x38
    2f7c:	orr.w	r3, r3, #64	; 0x40
    2f80:	str	r3, [r2, #56]	; 0x38
  while (1) asm("wfi");      
    2f82:	wfi
    2f84:	b.n	2f82 <powerDown()+0xa>
    2f86:	nop
    2f88:	.word	0x400d4000

00002f8c <do_hibernate()>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(void)
{
    uint32_t tmp = SNVS_LPCR;   // save control register
    2f8c:	ldr	r3, [pc, #132]	; (3014 <do_hibernate()+0x88>)
{
    2f8e:	push	{r4, r5, r6, lr}
    uint32_t tmp = SNVS_LPCR;   // save control register
    2f90:	ldr	r6, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
    2f92:	ldr	r2, [r3, #76]	; 0x4c
    2f94:	orr.w	r2, r2, #1
    2f98:	str	r2, [r3, #76]	; 0x4c
    asm volatile("DSB");
    2f9a:	dsb	sy

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2f9e:	ldr	r2, [r3, #56]	; 0x38
    2fa0:	bic.w	r2, r2, #2
    2fa4:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2fa6:	ldr	r2, [r3, #56]	; 0x38
    2fa8:	ands.w	r2, r2, #2
    2fac:	bne.n	2fa6 <do_hibernate()+0x1a>

    // clear alarm value
    SNVS_LPTAR = 0;
    2fae:	str	r2, [r3, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    2fb0:	ldr	r2, [r3, #88]	; 0x58
    2fb2:	cmp	r2, #0
    2fb4:	bne.n	2fb0 <do_hibernate()+0x24>

    __disable_irq();
    2fb6:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    2fb8:	ldr	r5, [pc, #88]	; (3014 <do_hibernate()+0x88>)
    2fba:	ldr	r3, [r5, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    2fbc:	ldr	r4, [r5, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    2fbe:	ldr	r1, [r5, #84]	; 0x54
    2fc0:	ldr	r2, [r5, #80]	; 0x50
    2fc2:	cmp	r1, r4
    2fc4:	bne.n	2fba <do_hibernate()+0x2e>
    2fc6:	cmp	r2, r3
    2fc8:	bne.n	2fba <do_hibernate()+0x2e>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2fca:	lsrs	r4, r4, #15

    //set alarm
    Serial.print(secs); Serial.print(" -> ");
    2fcc:	ldr	r0, [pc, #72]	; (3018 <do_hibernate()+0x8c>)
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2fce:	orr.w	r4, r4, r3, lsl #17
    Serial.print(secs); Serial.print(" -> ");
    2fd2:	mov	r1, r4
    2fd4:	bl	29aa <Print::print(unsigned long) [clone .isra.0]>
    2fd8:	ldr	r1, [pc, #64]	; (301c <do_hibernate()+0x90>)
    2fda:	ldr	r0, [pc, #60]	; (3018 <do_hibernate()+0x8c>)
    2fdc:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
    secs = getAlarmTime(secs);
    2fe0:	mov	r0, r4
    2fe2:	bl	2e78 <getAlarmTime(unsigned long)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    2fe6:	mov	r1, r0
    2fe8:	mov	r4, r0
    2fea:	ldr	r0, [pc, #44]	; (3018 <do_hibernate()+0x8c>)
    2fec:	bl	29aa <Print::print(unsigned long) [clone .isra.0]>
    2ff0:	ldr	r0, [pc, #36]	; (3018 <do_hibernate()+0x8c>)
    2ff2:	bl	c6e4 <Print::println()>
    Serial.println(secs);

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    2ff6:	ldr	r3, [pc, #28]	; (3014 <do_hibernate()+0x88>)
    SNVS_LPTAR = secs;
    2ff8:	str	r4, [r5, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    2ffa:	ldr	r2, [r3, #88]	; 0x58
    2ffc:	cmp	r2, r4
    2ffe:	bne.n	2ffa <do_hibernate()+0x6e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    3000:	orr.w	r6, r6, #2
    3004:	str	r6, [r3, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    3006:	ldr	r2, [r3, #56]	; 0x38
    3008:	lsls	r2, r2, #30
    300a:	bpl.n	3006 <do_hibernate()+0x7a>

    __enable_irq();
    300c:	cpsie	i
  
    //
    powerDown(); 
    300e:	bl	2f78 <powerDown()>
    3012:	nop
    3014:	.word	0x400d4000
    3018:	.word	0x20001d30
    301c:	.word	0x20000d60

00003020 <storeData(short)>:
{
    3020:	push	{r4, r5, lr}
    if(status==CLOSED) // file closed: should open
    3022:	mov	r4, r0
{
    3024:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    3026:	cmp	r0, #0
    3028:	bne.w	3130 <storeData(short)+0x110>
        if(newDirectory(dirName))
    302c:	ldr	r0, [pc, #496]	; (3220 <storeData(short)+0x200>)
    302e:	bl	2d78 <newDirectory(char*)>
    3032:	cmp	r0, #0
    3034:	beq.n	30d0 <storeData(short)+0xb0>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    3036:	ldr	r5, [pc, #492]	; (3224 <storeData(short)+0x204>)
    3038:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    303a:	ldr.w	r1, [r3, #1152]	; 0x480
    303e:	cbz	r1, 306e <storeData(short)+0x4e>
    return tmp.open(this, path, O_RDONLY);
    3040:	mov	r3, r4
    3042:	ldr	r2, [pc, #476]	; (3220 <storeData(short)+0x200>)
    3044:	mov	r0, sp
    3046:	str	r4, [sp, #0]
    3048:	bl	75e2 <FatFile::open(FatVolume*, char const*, int)>
    304c:	cbnz	r0, 30ac <storeData(short)+0x8c>
    304e:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    3050:	ldr.w	r1, [r3, #1152]	; 0x480
    3054:	cbnz	r1, 3086 <storeData(short)+0x66>
    3056:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    305a:	cbz	r0, 309a <storeData(short)+0x7a>
  ExFatFile() {}
    305c:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    305e:	movs	r3, #1
    3060:	add.w	r1, r0, #1096	; 0x448
    3064:	ldr	r2, [pc, #440]	; (3220 <storeData(short)+0x200>)
    3066:	mov	r0, sp
    3068:	bl	694e <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    306c:	b.n	3098 <storeData(short)+0x78>
    306e:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    3072:	cmp	r0, #0
    3074:	beq.n	304e <storeData(short)+0x2e>
    return tmp.open(this, path, O_RDONLY);
    3076:	mov	r3, r1
    3078:	str	r1, [sp, #48]	; 0x30
    307a:	ldr	r2, [pc, #420]	; (3220 <storeData(short)+0x200>)
    307c:	mov	r1, r0
    307e:	mov	r0, sp
    3080:	bl	60d6 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3084:	b.n	304c <storeData(short)+0x2c>
    3086:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    3088:	ldr	r2, [pc, #404]	; (3220 <storeData(short)+0x200>)
    308a:	add.w	r1, r1, #1096	; 0x448
    308e:	mov	r0, sp
    3090:	str	r3, [sp, #0]
    3092:	movs	r3, #1
    3094:	bl	7760 <FatFile::mkdir(FatFile*, char const*, bool)>
    3098:	cbnz	r0, 30ac <storeData(short)+0x8c>
    309a:	ldr	r1, [pc, #396]	; (3228 <storeData(short)+0x208>)
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    309c:	ldr	r0, [pc, #396]	; (322c <storeData(short)+0x20c>)
    309e:	bl	29da <Print::println(char const*) [clone .isra.0]>
        {  return STOPPED; // if file open fails: don't do anything
    30a2:	mov.w	r4, #4294967295
}
    30a6:	mov	r0, r4
    30a8:	add	sp, #84	; 0x54
    30aa:	pop	{r4, r5, pc}
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    30ac:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    30ae:	ldr.w	r0, [r3, #1152]	; 0x480
    30b2:	cbz	r0, 30c0 <storeData(short)+0xa0>
    30b4:	ldr	r1, [pc, #360]	; (3220 <storeData(short)+0x200>)
    30b6:	bl	7fb8 <FatVolume::chdir(char const*)>
    30ba:	cbnz	r0, 30d0 <storeData(short)+0xb0>
    30bc:	ldr	r1, [pc, #368]	; (3230 <storeData(short)+0x210>)
    30be:	b.n	309c <storeData(short)+0x7c>
    30c0:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    30c4:	cmp	r0, #0
    30c6:	beq.n	30bc <storeData(short)+0x9c>
    30c8:	ldr	r1, [pc, #340]	; (3220 <storeData(short)+0x200>)
    30ca:	bl	6520 <ExFatVolume::chdir(char const*)>
    30ce:	b.n	30ba <storeData(short)+0x9a>
        if(newFileName(fileName))
    30d0:	ldr	r0, [pc, #352]	; (3234 <storeData(short)+0x214>)
    30d2:	bl	2de4 <newFileName(char*)>
    30d6:	cmp	r0, #0
    30d8:	beq.n	30a2 <storeData(short)+0x82>
            file = sd->open(fileName, FILE_WRITE); 
    30da:	ldr	r1, [pc, #328]	; (3224 <storeData(short)+0x204>)
    30dc:	movw	r3, #16898	; 0x4202
    30e0:	ldr	r2, [pc, #336]	; (3234 <storeData(short)+0x214>)
    30e2:	mov	r0, sp
    30e4:	ldr	r1, [r1, #0]
    30e6:	bl	8948 <FsVolume::open(char const*, int)>
class Print
    30ea:	ldr	r4, [pc, #332]	; (3238 <storeData(short)+0x218>)
    30ec:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    30ee:	add	r1, sp, #16
    30f0:	add.w	r0, r4, #16
    30f4:	str	r3, [r4, #4]
class Stream : public Print
    30f6:	ldr	r3, [sp, #8]
    30f8:	str	r3, [r4, #8]
    30fa:	ldrb.w	r3, [sp, #12]
    30fe:	strb	r3, [r4, #12]
    3100:	bl	873e <FsBaseFile::operator=(FsBaseFile const&)>
    3104:	mov	r0, sp
    3106:	bl	f20 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    310a:	ldr	r3, [r4, #72]	; 0x48
    310c:	cbz	r3, 3126 <storeData(short)+0x106>
    {   nbuf=0;
    310e:	ldr	r3, [pc, #300]	; (323c <storeData(short)+0x21c>)
    3110:	movs	r2, #0
    3112:	str	r2, [r3, #0]
        if(proc==0)
    3114:	ldr	r3, [pc, #296]	; (3240 <storeData(short)+0x220>)
    3116:	ldrh	r3, [r3, #0]
    3118:	sxth	r3, r3
    311a:	cbz	r3, 317c <storeData(short)+0x15c>
          makeHeader(fileHeader);
    311c:	ldr	r0, [pc, #292]	; (3244 <storeData(short)+0x224>)
    311e:	bl	2b9c <makeHeader(long*)>
          hdr=(char *)fileHeader;
    3122:	ldr	r1, [pc, #288]	; (3244 <storeData(short)+0x224>)
    3124:	b.n	318e <storeData(short)+0x16e>
    3126:	ldr	r3, [r4, #76]	; 0x4c
    3128:	cmp	r3, #0
    312a:	bne.n	310e <storeData(short)+0xee>
            {   Serial.println("Failing open file");
    312c:	ldr	r1, [pc, #280]	; (3248 <storeData(short)+0x228>)
    312e:	b.n	309c <storeData(short)+0x7c>
    if(status==OPENED) // file is open: write first record (header)
    3130:	cmp	r0, #1
    3132:	beq.n	310e <storeData(short)+0xee>
    if(status==RUNNING) // file is open and header written: store data records
    3134:	cmp	r0, #2
    3136:	beq.n	319e <storeData(short)+0x17e>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    3138:	subs	r3, r4, #3
    313a:	uxth	r3, r3
    313c:	cmp	r3, #2
    313e:	bhi.n	30a6 <storeData(short)+0x86>
    3140:	ldr	r3, [pc, #244]	; (3238 <storeData(short)+0x218>)
    3142:	ldr	r2, [r3, #72]	; 0x48
    3144:	cbnz	r2, 314a <storeData(short)+0x12a>
    3146:	ldr	r3, [r3, #76]	; 0x4c
    3148:	cbz	r3, 316a <storeData(short)+0x14a>
        {   if(proc==0)
    314a:	ldr	r3, [pc, #244]	; (3240 <storeData(short)+0x220>)
    314c:	ldrh	r3, [r3, #0]
    314e:	sxth	r3, r3
    3150:	cbnz	r3, 3164 <storeData(short)+0x144>
              char *hdr = wavHeaderUpdate(nbuf*MAX_DISK_BUFFER*4);
    3152:	ldr	r3, [pc, #232]	; (323c <storeData(short)+0x21c>)
    3154:	mov.w	r0, #24576	; 0x6000
    3158:	ldr	r3, [r3, #0]
    315a:	muls	r0, r3
    315c:	bl	2b28 <wavHeaderUpdate(long)>
              wavHeaderWrite(hdr);
    3160:	bl	2b3c <wavHeaderWrite(char*)>
            file.close();
    3164:	ldr	r0, [pc, #228]	; (324c <storeData(short)+0x22c>)
    3166:	bl	8714 <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    316a:	cmp	r4, #4
    316c:	bne.n	320c <storeData(short)+0x1ec>
            adcReset();
    316e:	bl	373c <adcReset()>
            acqPower(LOW);
    3172:	movs	r0, #0
    3174:	bl	3728 <acqPower(int)>
            do_hibernate();
    3178:	bl	2f8c <do_hibernate()>
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    317c:	ldr	r3, [pc, #208]	; (3250 <storeData(short)+0x230>)
    317e:	movs	r1, #1
    3180:	movs	r2, #32
    3182:	ldr	r0, [r3, #0]
    3184:	ldr	r3, [pc, #204]	; (3254 <storeData(short)+0x234>)
    3186:	ldr	r3, [r3, #0]
    3188:	bl	2a44 <wavHeaderInit(long, long, long, int)>
    318c:	mov	r1, r0
    return BaseFile::write(buffer, size);
    318e:	mov.w	r2, #512	; 0x200
    3192:	ldr	r0, [pc, #184]	; (324c <storeData(short)+0x22c>)
    3194:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    3198:	cmp.w	r0, #512	; 0x200
    319c:	blt.n	3208 <storeData(short)+0x1e8>
    319e:	mov.w	r2, #24576	; 0x6000
    31a2:	ldr	r1, [pc, #180]	; (3258 <storeData(short)+0x238>)
    31a4:	ldr	r0, [pc, #164]	; (324c <storeData(short)+0x22c>)
    31a6:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    31aa:	cmp.w	r0, #24576	; 0x6000
    31ae:	mov	r4, r0
    31b0:	ldr	r5, [pc, #136]	; (323c <storeData(short)+0x21c>)
    31b2:	bcs.n	31fe <storeData(short)+0x1de>
        { Serial.print(">"); 
    31b4:	ldr	r1, [pc, #164]	; (325c <storeData(short)+0x23c>)
    31b6:	ldr	r0, [pc, #116]	; (322c <storeData(short)+0x20c>)
    31b8:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
          Serial.print(nd); 
    31bc:	mov	r1, r4
    31be:	ldr	r0, [pc, #108]	; (322c <storeData(short)+0x20c>)
          status=DOCLOSE; 
    31c0:	movs	r4, #3
          Serial.print(nd); 
    31c2:	bl	29aa <Print::print(unsigned long) [clone .isra.0]>
          Serial.print(" "); 
    31c6:	ldr	r1, [pc, #152]	; (3260 <storeData(short)+0x240>)
    31c8:	ldr	r0, [pc, #96]	; (322c <storeData(short)+0x20c>)
    31ca:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    31ce:	movs	r1, #2
    31d0:	ldr	r0, [pc, #88]	; (322c <storeData(short)+0x20c>)
    31d2:	bl	c6d2 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    31d6:	ldr	r0, [pc, #84]	; (322c <storeData(short)+0x20c>)
    31d8:	bl	c6e4 <Print::println()>
        disk_count++;
    31dc:	ldr	r2, [pc, #132]	; (3264 <storeData(short)+0x244>)
    31de:	ldr	r3, [r2, #0]
    31e0:	adds	r3, #1
    31e2:	str	r3, [r2, #0]
    31e4:	mov.w	r2, #1000	; 0x3e8
    31e8:	ldr	r3, [r5, #0]
    31ea:	udiv	r1, r3, r2
    31ee:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    31f2:	cmp	r3, #0
    31f4:	bne.n	3138 <storeData(short)+0x118>
    BaseFile::sync();
    31f6:	ldr	r0, [pc, #84]	; (324c <storeData(short)+0x22c>)
    31f8:	bl	29ec <FsBaseFile::sync()>
  }
    31fc:	b.n	3138 <storeData(short)+0x118>
          nbuf++;
    31fe:	ldr	r3, [r5, #0]
    3200:	movs	r4, #2
    3202:	adds	r3, #1
    3204:	str	r3, [r5, #0]
    3206:	b.n	31dc <storeData(short)+0x1bc>
        { status = DOCLOSE;
    3208:	movs	r4, #3
    320a:	b.n	3138 <storeData(short)+0x118>
        else if(status==DOCLOSE)
    320c:	cmp	r4, #3
    320e:	beq.n	321a <storeData(short)+0x1fa>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    3210:	ldr	r3, [pc, #84]	; (3268 <storeData(short)+0x248>)
    3212:	movs	r2, #8
    3214:	str.w	r2, [r3, #136]	; 0x88
    3218:	b.n	30a2 <storeData(short)+0x82>
          status=CLOSED;
    321a:	movs	r4, #0
    321c:	b.n	30a6 <storeData(short)+0x86>
    321e:	nop
    3220:	.word	0x20015494
    3224:	.word	0x200022dc
    3228:	.word	0x20001062
    322c:	.word	0x20001d30
    3230:	.word	0x2000106e
    3234:	.word	0x200154e4
    3238:	.word	0x20014bb8
    323c:	.word	0x20014c34
    3240:	.word	0x200153c2
    3244:	.word	0x2000ddd0
    3248:	.word	0x2000107a
    324c:	.word	0x20014bc8
    3250:	.word	0x200022d4
    3254:	.word	0x20007dc8
    3258:	.word	0x20007dd0
    325c:	.word	0x2000108c
    3260:	.word	0x2000145c
    3264:	.word	0x20014b98
    3268:	.word	0x42004000

0000326c <saveData(short)>:
    if(status==STOPPED) 
    326c:	adds	r3, r0, #1
{
    326e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3272:	mov	r4, r0
    if(status==STOPPED) 
    3274:	bne.n	329e <saveData(short)+0x32>
    { while(queue_isBusy()) {;} //wait if acq writes to queue
    3276:	bl	2858 <queue_isBusy()>
    327a:	mov	r5, r0
    327c:	cmp	r0, #0
    327e:	bne.n	3276 <saveData(short)+0xa>
      pullData((uint32_t*)tempBuffer0);
    3280:	ldr	r0, [pc, #180]	; (3338 <saveData(short)+0xcc>)
    3282:	bl	28c4 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    3286:	ldr	r3, [pc, #176]	; (3338 <saveData(short)+0xcc>)
    3288:	ldr	r2, [pc, #176]	; (333c <saveData(short)+0xd0>)
    328a:	ldr.w	r1, [r3], #4
    328e:	str.w	r1, [r2, r5, lsl #2]
    3292:	adds	r5, #1
    3294:	cmp	r5, #8
    3296:	bne.n	328a <saveData(short)+0x1e>
}
    3298:	mov	r0, r4
    329a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(status<CLOSED) return status; // we are stopped: don't do anything
    329e:	cmp	r0, #0
    32a0:	blt.n	3298 <saveData(short)+0x2c>
    status=checkEndOfFile(status);
    32a2:	bl	2c7c <checkEndOfFile(short)>
    32a6:	mov	r4, r0
    if(getDataCount() >= NDBL)
    32a8:	bl	283c <getDataCount()>
    32ac:	cmp	r0, #47	; 0x2f
    32ae:	bls.n	3298 <saveData(short)+0x2c>
      if(proc==0)
    32b0:	ldr	r3, [pc, #140]	; (3340 <saveData(short)+0xd4>)
    32b2:	ldrh	r5, [r3, #0]
    32b4:	sxth	r5, r5
    32b6:	cbnz	r5, 3304 <saveData(short)+0x98>
    32b8:	ldr	r7, [pc, #124]	; (3338 <saveData(short)+0xcc>)
    32ba:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    32bc:	bl	2858 <queue_isBusy()>
    32c0:	mov	r6, r0
    32c2:	cmp	r0, #0
    32c4:	bne.n	32bc <saveData(short)+0x50>
        for(int ii=0; ii<NDBL; ii++)
    32c6:	adds	r5, #1
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    32c8:	mov	r0, r8
    32ca:	bl	28c4 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    32ce:	add.w	r8, r8, #512	; 0x200
    32d2:	cmp	r5, #48	; 0x30
    32d4:	bne.n	32bc <saveData(short)+0x50>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    32d6:	ldr	r3, [pc, #100]	; (333c <saveData(short)+0xd0>)
    32d8:	ldr.w	r2, [r7], #4
    32dc:	str.w	r2, [r3, r6, lsl #2]
    32e0:	adds	r6, #1
    32e2:	cmp	r6, #8
    32e4:	bne.n	32d8 <saveData(short)+0x6c>
          { diskBuffer[ii]=tempBuffer0[ii];
    32e6:	mov.w	r2, #24576	; 0x6000
    32ea:	ldr	r1, [pc, #76]	; (3338 <saveData(short)+0xcc>)
    32ec:	ldr	r0, [pc, #84]	; (3344 <saveData(short)+0xd8>)
    32ee:	bl	a218 <memcpy>
      if(haveStore)
    32f2:	ldr	r3, [pc, #84]	; (3348 <saveData(short)+0xdc>)
    32f4:	ldr	r3, [r3, #0]
    32f6:	cmp	r3, #0
    32f8:	beq.n	3298 <saveData(short)+0x2c>
        status=storeData(status);
    32fa:	mov	r0, r4
}
    32fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status=storeData(status);
    3300:	b.w	3020 <storeData(short)>
    3304:	ldr	r6, [pc, #60]	; (3344 <saveData(short)+0xd8>)
        for(int ii=0; ii<NDBL; ii++)
    3306:	movs	r7, #0
      if(proc==0)
    3308:	mov	r8, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    330a:	bl	2858 <queue_isBusy()>
    330e:	mov	r5, r0
    3310:	cmp	r0, #0
    3312:	bne.n	330a <saveData(short)+0x9e>
        for(int ii=0; ii<NDBL; ii++)
    3314:	adds	r7, #1
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    3316:	mov	r0, r8
    3318:	bl	28c4 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    331c:	add.w	r8, r8, #512	; 0x200
    3320:	cmp	r7, #48	; 0x30
    3322:	bne.n	330a <saveData(short)+0x9e>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    3324:	ldr	r3, [pc, #20]	; (333c <saveData(short)+0xd0>)
    3326:	ldr.w	r2, [r6], #4
    332a:	str.w	r2, [r3, r5, lsl #2]
    332e:	adds	r5, #1
    3330:	cmp	r5, #8
    3332:	bne.n	3326 <saveData(short)+0xba>
    3334:	b.n	32f2 <saveData(short)+0x86>
    3336:	nop
    3338:	.word	0x2000dfdc
    333c:	.word	0x20014c0c
    3340:	.word	0x200153c2
    3344:	.word	0x20007dd0
    3348:	.word	0x20014c08

0000334c <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    334c:	ldr	r0, [pc, #28]	; (336c <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    334e:	movs	r3, #0
    3350:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    3354:	ldr	r1, [pc, #24]	; (3370 <_GLOBAL__sub_I_t_acq+0x24>)
    3356:	strb	r3, [r0, #12]
    3358:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    335c:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3360:	ldr	r3, [pc, #16]	; (3374 <_GLOBAL__sub_I_t_acq+0x28>)
    3362:	ldr	r2, [pc, #20]	; (3378 <_GLOBAL__sub_I_t_acq+0x2c>)
    3364:	str	r3, [r0, #0]
    3366:	b.w	c910 <__aeabi_atexit>
    336a:	nop
    336c:	.word	0x20014bb8
    3370:	.word	0x00000f21
    3374:	.word	0x20000554
    3378:	.word	0x20002108

0000337c <filing_init()>:
{
    337c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3380:	ldr	r3, [pc, #132]	; (3408 <filing_init()+0x8c>)
  FsDateTime::callback = dateTime;
    3382:	movs	r4, #5
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3384:	ldr	r2, [pc, #132]	; (340c <filing_init()+0x90>)
    3386:	ldr.w	r3, [r3, #544]	; 0x220
    if (sd->begin(SD_CONFIG)) 
    338a:	ldr.w	r9, [pc, #156]	; 3428 <filing_init()+0xac>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    338e:	bic.w	r3, r3, #4278190080	; 0xff000000
    { Serial.println("still trying..."); 
    3392:	ldr.w	r8, [pc, #152]	; 342c <filing_init()+0xb0>
    3396:	ldr	r7, [pc, #120]	; (3410 <filing_init()+0x94>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3398:	str	r3, [r2, #0]
  FsDateTime::callback = dateTime;
    339a:	ldr	r3, [pc, #120]	; (3414 <filing_init()+0x98>)
    339c:	ldr	r2, [pc, #120]	; (3418 <filing_init()+0x9c>)
    339e:	str	r2, [r3, #0]
    if (sd->begin(SD_CONFIG)) 
    33a0:	ldr.w	r5, [r9]
    spiConfigBackupPin = 255;
    33a4:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
    33a6:	movs	r1, #0
    33a8:	add.w	r6, r5, #1168	; 0x490
    spiConfigBackupPin = 255;
    33ac:	strb.w	r3, [r5, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
    33b0:	strb.w	r1, [r5, #1224]	; 0x4c8
    33b4:	mov	r0, r6
    33b6:	bl	9b30 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    33ba:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    33bc:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    33c0:	bl	922c <SdioCard::errorCode() const>
    33c4:	cbnz	r0, 33e8 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    33c6:	movs	r3, #1
    33c8:	ldr.w	r1, [r5, #1164]	; 0x48c
    33cc:	mov	r0, r5
    33ce:	mov	r2, r3
    33d0:	bl	8874 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    33d4:	cbz	r0, 33e8 <filing_init()+0x6c>
    { Serial.println("card initialized.");
    33d6:	ldr	r0, [pc, #56]	; (3410 <filing_init()+0x94>)
    33d8:	ldr	r1, [pc, #64]	; (341c <filing_init()+0xa0>)
    33da:	bl	29da <Print::println(char const*) [clone .isra.0]>
      haveStore=1;
    33de:	movs	r0, #1
    33e0:	ldr	r3, [pc, #60]	; (3420 <filing_init()+0xa4>)
    33e2:	str	r0, [r3, #0]
}
    33e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { Serial.println("still trying..."); 
    33e8:	mov	r1, r8
    33ea:	mov	r0, r7
    33ec:	bl	29da <Print::println(char const*) [clone .isra.0]>
      delay(100);
    33f0:	movs	r0, #100	; 0x64
    33f2:	bl	b760 <delay>
  for(int ii=0; ii<5;ii++)
    33f6:	subs	r4, #1
    33f8:	bne.n	33a0 <filing_init()+0x24>
  Serial.println("Card failed, or not present");
    33fa:	ldr	r0, [pc, #20]	; (3410 <filing_init()+0x94>)
    33fc:	ldr	r1, [pc, #36]	; (3424 <filing_init()+0xa8>)
    33fe:	bl	29da <Print::println(char const*) [clone .isra.0]>
  return 0;
    3402:	mov	r0, r4
    3404:	b.n	33e4 <filing_init()+0x68>
    3406:	nop
    3408:	.word	0x401f4400
    340c:	.word	0x20007dc8
    3410:	.word	0x20001d30
    3414:	.word	0x200147fc
    3418:	.word	0x00002919
    341c:	.word	0x20000ce2
    3420:	.word	0x20014c08
    3424:	.word	0x20000d04
    3428:	.word	0x200022dc
    342c:	.word	0x20000cf4

00003430 <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    3430:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3434:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    3436:	bl	b95c <rtc_get>
    343a:	str	r0, [sp, #4]
  uint32_t t1;
  t1 = micros();
    343c:	bl	b714 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3440:	ldr	r3, [pc, #604]	; (36a0 <compress(void*)+0x270>)
  t1 = micros();
    3442:	mov	sl, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3444:	movs	r2, #0
    3446:	ldr	r3, [r3, #0]
    3448:	ldr.w	r1, [r4, r2, lsl #2]
    344c:	str.w	r1, [r3, r2, lsl #2]
    3450:	adds	r2, #1
    3452:	cmp	r2, #128	; 0x80
    3454:	bne.n	3448 <compress(void*)+0x18>
    3456:	subs	r4, #4
    3458:	add.w	r0, r3, #508	; 0x1fc
    345c:	mov	r2, r3
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    345e:	ldr.w	r1, [r2, #4]!
    3462:	ldr.w	r5, [r4, #4]!
    3466:	cmp	r0, r2
    3468:	sub.w	r1, r1, r5
    346c:	str	r1, [r2, #0]
    346e:	bne.n	345e <compress(void*)+0x2e>

  // find maximum in filtered data 
  int32_t mx = 0;
    3470:	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    3472:	ldr.w	r1, [r3, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    3476:	cmp	r1, #0
    3478:	it	lt
    347a:	neglt	r1, r1
    347c:	cmp	r2, r1
    347e:	it	lt
    3480:	movlt	r2, r1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    3482:	cmp	r0, r3
    3484:	bne.n	3472 <compress(void*)+0x42>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    3486:	movs	r4, #2
    3488:	movs	r1, #1
    348a:	subs	r3, r4, #1
    348c:	lsl.w	r3, r1, r3
    3490:	cmp	r3, r2
    3492:	bgt.n	349a <compress(void*)+0x6a>
    3494:	adds	r4, #1
    3496:	cmp	r4, #24
    3498:	bne.n	348a <compress(void*)+0x5a>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    349a:	ldr	r2, [pc, #520]	; (36a4 <compress(void*)+0x274>)
    349c:	subs	r1, r4, #1
    349e:	ldr.w	r8, [pc, #536]	; 36b8 <compress(void*)+0x288>
    34a2:	ldr.w	r3, [r2, r1, lsl #2]
    34a6:	mov	fp, r8
    34a8:	adds	r3, #1
    34aa:	str.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    34ae:	ldr	r3, [pc, #504]	; (36a8 <compress(void*)+0x278>)
    34b0:	ldr	r2, [r3, #0]
    34b2:	cmp	r4, r2

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    34b4:	mov	r2, r8
  if((uint32_t)nb>max_stat) max_stat=nb;
    34b6:	it	hi
    34b8:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    34ba:	movs	r3, #1
    34bc:	lsl.w	r0, r3, r4
    34c0:	subs	r0, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    34c2:	ldr.w	r1, [r2, #4]!
    34c6:	adds	r3, #1
    34c8:	ands	r1, r0
    34ca:	cmp	r3, #128	; 0x80
    34cc:	str	r1, [r2, #0]
    34ce:	bne.n	34c2 <compress(void*)+0x92>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    34d0:	ldr	r5, [pc, #472]	; (36ac <compress(void*)+0x27c>)
    34d2:	mov.w	r2, #512	; 0x200
    34d6:	movs	r1, #0
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    34d8:	mov.w	r9, r4, lsl #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    34dc:	mov	r0, r5
    34de:	bl	a1d4 <memset>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
    34e2:	mov.w	r2, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
    34e6:	ldr	r3, [sp, #4]
  int ndat = NH + NCHAN_ACQ + ncmp;
    34e8:	add.w	r7, r9, #7
  *iptr++ = 0xA5A5A5A5;
    34ec:	str	r2, [r5, #0]
  ndat= ((ndat>>1) + 1)<<1;
    34ee:	add.w	r6, r9, #8
  *iptr++ = nb | shift<<16;
    34f2:	ldr	r2, [pc, #444]	; (36b0 <compress(void*)+0x280>)
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    34f4:	movs	r1, #7
  *iptr++ = nb | shift<<16;
    34f6:	ldrh	r2, [r2, #0]
  *iptr++ = t1;
    34f8:	strd	r3, sl, [r5, #8]
  *iptr++ = nb | shift<<16;
    34fc:	orr.w	r2, r4, r2, lsl #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3500:	ldr.w	r3, [fp]
  *iptr++ = nb | shift<<16;
    3504:	str	r2, [r5, #4]
  *iptr++ = NCHAN_ACQ;
    3506:	movs	r2, #1
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3508:	str	r3, [r5, #24]
    350a:	movs	r3, #0
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    350c:	add.w	r0, r9, r2
  *iptr++ = NCHAN_ACQ;
    3510:	str	r2, [r5, #16]
  #endif

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    3512:	mov	ip, r3
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3514:	str.w	r3, [fp]
  int nx = MBIT;
    3518:	movs	r3, #32
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    351a:	str	r0, [r5, #20]
  {   nx -= nb;
    351c:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    3520:	ldr.w	sl, [r5, r1, lsl #2]
    3524:	ldr.w	r2, [r8], #4
      if(nx > 0)
    3528:	cmp.w	lr, #0
    352c:	ble.n	3576 <compress(void*)+0x146>
      {   outData[kk] |= (tempData[ii] << nx);
    352e:	lsl.w	r2, r2, lr
    3532:	mov	r3, lr
    3534:	orr.w	r2, r2, sl
    3538:	str.w	r2, [r5, r1, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    353c:	add.w	ip, ip, #1
    3540:	cmp.w	ip, #128	; 0x80
    3544:	bne.n	351c <compress(void*)+0xec>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    3546:	ldr.w	r8, [pc, #372]	; 36bc <compress(void*)+0x28c>
    354a:	ldr.w	r4, [r8]
    354e:	add.w	r9, r4, r6
    3552:	cmp.w	r9, #128	; 0x80
    3556:	bgt.n	35a6 <compress(void*)+0x176>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3558:	ldr	r0, [pc, #344]	; (36b4 <compress(void*)+0x284>)
    355a:	lsls	r2, r6, #2
    355c:	ldr	r1, [pc, #332]	; (36ac <compress(void*)+0x27c>)
    355e:	add.w	r0, r0, r4, lsl #2
    3562:	bl	a218 <memcpy>
    3566:	str.w	r9, [r8]
  int ret=1;
    356a:	mov.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    356e:	mov	r0, r9
    3570:	add	sp, #12
    3572:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    3576:	add.w	r9, r1, #1
      else if(nx==0) 
    357a:	bne.n	358a <compress(void*)+0x15a>
      {   outData[kk++] |= tempData[ii];
    357c:	orr.w	r2, sl, r2
          nx=MBIT;
    3580:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    3582:	str.w	r2, [r5, r1, lsl #2]
    3586:	mov	r1, r9
    3588:	b.n	353c <compress(void*)+0x10c>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    358a:	subs	r3, r4, r3
    358c:	lsr.w	r3, r2, r3
    3590:	orr.w	r3, r3, sl
    3594:	str.w	r3, [r5, r1, lsl #2]
          nx += MBIT;
    3598:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    359c:	mov	r1, r9
          outData[kk] = (tempData[ii] << nx);
    359e:	lsls	r2, r3
    35a0:	str.w	r2, [r5, r9, lsl #2]
    35a4:	b.n	353c <compress(void*)+0x10c>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    35a6:	cmp	r4, #122	; 0x7a
    35a8:	ble.n	35f4 <compress(void*)+0x1c4>
    35aa:	movs	r2, #0
    35ac:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    35ae:	ldr	r1, [pc, #260]	; (36b4 <compress(void*)+0x284>)
    35b0:	mov	r0, r2
    35b2:	cmp	r3, #127	; 0x7f
    35b4:	bls.n	35ea <compress(void*)+0x1ba>
    35b6:	cmp	r4, #128	; 0x80
    35b8:	rsb	r3, r4, #128	; 0x80
    35bc:	it	gt
    35be:	movgt	r3, #0
    35c0:	add	r3, r4
    35c2:	cbz	r2, 35c8 <compress(void*)+0x198>
    35c4:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    35c8:	ldr	r0, [pc, #232]	; (36b4 <compress(void*)+0x284>)
    35ca:	bl	2864 <pushData(unsigned long*)>
    35ce:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    35d2:	mov.w	r2, r6, lsl #2
    35d6:	ldr	r1, [pc, #212]	; (36ac <compress(void*)+0x27c>)
    35d8:	ldr	r0, [pc, #216]	; (36b4 <compress(void*)+0x284>)
      if(!pushData(dout)) ret = 0;
    35da:	it	ne
    35dc:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    35e0:	bl	a218 <memcpy>
    35e4:	str.w	r6, [r8]
    35e8:	b.n	356e <compress(void*)+0x13e>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    35ea:	str.w	r0, [r1, r3, lsl #2]
    35ee:	movs	r2, #1
    35f0:	adds	r3, #1
    35f2:	b.n	35b2 <compress(void*)+0x182>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    35f4:	rsb	r3, r4, #122	; 0x7a
    35f8:	ldr	r1, [pc, #176]	; (36ac <compress(void*)+0x27c>)
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    35fa:	ldr	r2, [pc, #184]	; (36b4 <compress(void*)+0x284>)
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    35fc:	orr.w	r3, r3, r0, lsl #16
    3600:	mov	r0, r1
    3602:	str	r3, [r5, #20]
    3604:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3606:	ldr.w	ip, [r0], #4
    360a:	str.w	ip, [r2, r3, lsl #2]
    360e:	adds	r3, #1
    3610:	cmp	r3, #128	; 0x80
    3612:	bne.n	3606 <compress(void*)+0x1d6>
      if(!pushData(dout)) ret = 0;
    3614:	ldr	r0, [pc, #156]	; (36b4 <compress(void*)+0x284>)
    3616:	rsb	sl, r4, #128	; 0x80
    361a:	str	r1, [sp, #4]
    361c:	str.w	r3, [r8]
    3620:	bl	2864 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3624:	ldr	r3, [r5, #20]
      nr=ndat0-ii; // for header
    3626:	sub.w	r7, r7, sl
      if(!pushData(dout)) ret = 0;
    362a:	subs.w	r9, r0, #0
    362e:	mov	fp, sl
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3630:	mov.w	r3, r3, lsr #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3634:	mov.w	r0, #7
      if(!pushData(dout)) ret = 0;
    3638:	it	ne
    363a:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    363e:	ldr	r1, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3640:	lsls	r3, r3, #16
    3642:	orrs	r3, r7
    3644:	ldr	r7, [pc, #108]	; (36b4 <compress(void*)+0x284>)
    3646:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3648:	mov	r2, r7
    364a:	movs	r3, #0
    364c:	str.w	r3, [r8]
    3650:	subs	r0, #1
    3652:	bne.n	3682 <compress(void*)+0x252>
    3654:	cbz	r3, 365c <compress(void*)+0x22c>
    3656:	movs	r3, #6
    3658:	str.w	r3, [r8]
    365c:	ldr.w	r1, [r8]
    3660:	movs	r3, #0
    3662:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    3666:	cmp	sl, r6
    3668:	blt.n	368e <compress(void*)+0x25e>
    366a:	subs	r4, #128	; 0x80
    366c:	add	r4, r6
    366e:	cmp	r6, fp
    3670:	it	lt
    3672:	movlt	r4, #0
    3674:	add	r4, r1
    3676:	cmp	r3, #0
    3678:	beq.w	356e <compress(void*)+0x13e>
    367c:	str.w	r4, [r8]
  return ret;
    3680:	b.n	356e <compress(void*)+0x13e>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3682:	ldr.w	r3, [r1], #4
    3686:	str.w	r3, [r7], #4
    368a:	movs	r3, #1
    368c:	b.n	3650 <compress(void*)+0x220>
      while (ii < ndat) dout[nout++] = outData[ii++];
    368e:	ldr.w	r3, [r5, sl, lsl #2]
    3692:	add.w	sl, sl, #1
    3696:	str.w	r3, [r2], #4
    369a:	movs	r3, #1
    369c:	b.n	3666 <compress(void*)+0x236>
    369e:	nop
    36a0:	.word	0x200022e4
    36a4:	.word	0x20014c58
    36a8:	.word	0x20014c2c
    36ac:	.word	0x200141f4
    36b0:	.word	0x20015466
    36b4:	.word	0x20013fe4
    36b8:	.word	0x200145f4
    36bc:	.word	0x20014848

000036c0 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    36c0:	push	{r0, r1, r4, lr}
    36c2:	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    36c4:	cbz	r1, 36e0 <Print::print(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    36c6:	mov	r0, r1
    36c8:	str	r1, [sp, #4]
    36ca:	bl	ed90 <strlen>
    36ce:	ldr	r3, [r4, #0]
    36d0:	mov	r2, r0
    36d2:	ldr	r1, [sp, #4]
    36d4:	ldr	r3, [r3, #4]
    36d6:	mov	r0, r4
	size_t print(const char s[])			{ return write(s); }
    36d8:	add	sp, #8
    36da:	ldmia.w	sp!, {r4, lr}
							  return write((const uint8_t *)str, strlen(str)); }
    36de:	bx	r3
	size_t print(const char s[])			{ return write(s); }
    36e0:	add	sp, #8
    36e2:	pop	{r4, pc}

000036e4 <usbPowerInit()>:
    static const uint8_t i2c_addr[2]= {I2C_ADDRESS1, I2C_ADDRESS2};
    static const uint8_t regs[4]={0x3C, 0x41, 0x46, 0x4B};

    void usbPowerInit()
    {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    36e4:	ldr	r3, [pc, #24]	; (3700 <usbPowerInit()+0x1c>)
    36e6:	movs	r2, #5
    36e8:	str.w	r2, [r3, #180]	; 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    36ec:	movs	r2, #8
    36ee:	str.w	r2, [r3, #676]	; 0x2a4

      GPIO8_GDIR |= 1<<26;
    36f2:	ldr	r2, [pc, #16]	; (3704 <usbPowerInit()+0x20>)
    36f4:	ldr	r3, [r2, #4]
    36f6:	orr.w	r3, r3, #67108864	; 0x4000000
    36fa:	str	r3, [r2, #4]
    }
    36fc:	bx	lr
    36fe:	nop
    3700:	.word	0x401f8000
    3704:	.word	0x42008000

00003708 <usbPowerSetup()>:
    {
      GPIO8_DR_CLEAR = 1<<26;
    }

    void usbPowerSetup(void)
    {
    3708:	push	{r3, lr}
      #if USB_POWER==1
        usbPowerInit();
    370a:	bl	36e4 <usbPowerInit()>
      GPIO8_DR_SET = 1<<26;
    370e:	ldr	r3, [pc, #20]	; (3724 <usbPowerSetup()+0x1c>)
    3710:	mov.w	r2, #67108864	; 0x4000000
        usbPowerOn();
        delay(1000);
    3714:	mov.w	r0, #1000	; 0x3e8
      GPIO8_DR_SET = 1<<26;
    3718:	str.w	r2, [r3, #132]	; 0x84
      #endif
    }
    371c:	ldmia.w	sp!, {r3, lr}
        delay(1000);
    3720:	b.w	b760 <delay>
    3724:	.word	0x42008000

00003728 <acqPower(int)>:

    void acqPower(int flag)
    {   
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
    3728:	uxtb	r1, r0
    372a:	movs	r0, #2
    {   
    372c:	push	{r3, lr}
            digitalWrite(ADC_EN,flag);
    372e:	bl	beb0 <digitalWrite>
            delay(100);
    3732:	movs	r0, #100	; 0x64
        #else
            (void) flag;
        #endif
    }
    3734:	ldmia.w	sp!, {r3, lr}
            delay(100);
    3738:	b.w	b760 <delay>

0000373c <adcReset()>:

    void adcReset(void) 
    { digitalWrite(ADC_SHDNZ,LOW); 
    373c:	movs	r1, #0
    373e:	movs	r0, #3
    3740:	b.w	beb0 <digitalWrite>

00003744 <adcStart()>:
    }
    void adcStart(void) 
    { digitalWrite(ADC_SHDNZ,HIGH); 
    3744:	movs	r1, #1
    3746:	movs	r0, #3
    3748:	b.w	beb0 <digitalWrite>

0000374c <adc_init()>:
    }


    void adc_init(void)
    {
    374c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        #if defined(ADC_EN)
            pinMode(ADC_EN,OUTPUT);
    3750:	movs	r1, #1
    3752:	movs	r0, #2
    3754:	bl	bef0 <pinMode>
        #endif
        acqPower(HIGH);
    3758:	movs	r0, #1
    375a:	bl	3728 <acqPower(int)>

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
    375e:	movs	r1, #1
    3760:	movs	r0, #3
    3762:	bl	bef0 <pinMode>
        adcReset();
    3766:	bl	373c <adcReset()>
        delay(100);
    376a:	movs	r0, #100	; 0x64
    376c:	bl	b760 <delay>
        adcStart();
    3770:	bl	3744 <adcStart()>

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
    3774:	ldr	r2, [pc, #332]	; (38c4 <adc_init()+0x178>)
    3776:	ldr	r1, [pc, #336]	; (38c8 <adc_init()+0x17c>)
    3778:	add	r0, sp, #4
    377a:	bl	3994 <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
    377e:	movs	r1, #76	; 0x4c
    3780:	add	r0, sp, #4
    3782:	bl	39b8 <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
    3786:	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
    3788:	cmp	r0, #0
    378a:	beq.w	38be <adc_init()+0x172>
                Serial.printf("found %x\n",i2c_addr[ii]);
    378e:	ldr	r1, [pc, #316]	; (38cc <adc_init()+0x180>)
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    3790:	ldr	r0, [pc, #316]	; (38d0 <adc_init()+0x184>)

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    3792:	movs	r4, #11
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    3794:	bl	c71c <Print::printf(char const*, ...)>
            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
    3798:	movs	r3, #129	; 0x81
    379a:	movs	r2, #2
    379c:	movs	r1, #76	; 0x4c
    379e:	add	r0, sp, #4
    37a0:	ldr	r5, [pc, #304]	; (38d4 <adc_init()+0x188>)
    37a2:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
    37a6:	movs	r3, #48	; 0x30
    37a8:	movs	r2, #7
    37aa:	movs	r1, #76	; 0x4c
    37ac:	add	r0, sp, #4
    37ae:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    37b2:	movs	r3, #0
    37b4:	movs	r2, #8
    37b6:	movs	r1, #76	; 0x4c
    37b8:	add	r0, sp, #4
    37ba:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    37be:	mov	r2, r4
            for(int jj=0;jj<4;jj++)
    37c0:	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    37c2:	ldrb.w	r3, [r5], #1
    37c6:	movs	r1, #76	; 0x4c
            for(int jj=0;jj<4;jj++)
    37c8:	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    37ca:	add	r0, sp, #4
    37cc:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
    37d0:	cmp	r4, #15
    37d2:	bne.n	37be <adc_init()+0x72>
            }

            //i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	//Enable Input Ch-1 to Ch-8 by I2C write into P0_R115 
            i2c.write(i2c_addr[ii],0x73,0x30);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    37d4:	movs	r3, #48	; 0x30
    37d6:	movs	r2, #115	; 0x73
    37d8:	movs	r1, #76	; 0x4c
    37da:	add	r0, sp, #4
    37dc:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
            i2c.write(i2c_addr[ii],0x74,0x20);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    37e0:	movs	r3, #32
    37e2:	movs	r2, #116	; 0x74
    37e4:	movs	r1, #76	; 0x4c
    37e6:	add	r0, sp, #4
    37e8:	ldr	r6, [pc, #236]	; (38d8 <adc_init()+0x18c>)
    37ea:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    37ee:	movs	r3, #224	; 0xe0
    37f0:	movs	r2, #117	; 0x75
    37f2:	movs	r1, #76	; 0x4c
    37f4:	add	r0, sp, #4

            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2

            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V

            for(int jj=0; jj<4; jj++)
    37f6:	movs	r5, #0
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    37f8:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    37fc:	ldr.w	r8, [pc, #236]	; 38ec <adc_init()+0x1a0>
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    3800:	movs	r3, #37	; 0x25
    3802:	movs	r2, #107	; 0x6b
    3804:	movs	r1, #76	; 0x4c
    3806:	add	r0, sp, #4
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    3808:	ldr	r7, [pc, #208]	; (38dc <adc_init()+0x190>)
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    380a:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
    380e:	movs	r3, #96	; 0x60
    3810:	movs	r2, #59	; 0x3b
    3812:	movs	r1, #76	; 0x4c
    3814:	add	r0, sp, #4
    3816:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    381a:	ldrb.w	r4, [r6], #1
    381e:	movs	r3, #136	; 0x88
    3820:	movs	r1, #76	; 0x4c
    3822:	add	r0, sp, #4
    3824:	mov	r2, r4
            for(int jj=0; jj<4; jj++)
    3826:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3828:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    382c:	ldrh.w	r3, [r8]
    3830:	adds	r2, r4, #1
    3832:	movs	r1, #76	; 0x4c
    3834:	uxtb	r3, r3
    3836:	add	r0, sp, #4
    3838:	uxtb	r2, r2
    383a:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    383e:	ldrh	r3, [r7, #0]
    3840:	adds	r2, r4, #2
    3842:	movs	r1, #76	; 0x4c
    3844:	subs	r3, #55	; 0x37
    3846:	add	r0, sp, #4
    3848:	uxtb	r2, r2
    384a:	uxtb	r3, r3
    384c:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
    3850:	adds	r2, r4, #3
    3852:	movs	r3, #128	; 0x80
    3854:	movs	r1, #76	; 0x4c
    3856:	uxtb	r2, r2
    3858:	add	r0, sp, #4
    385a:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
    385e:	adds	r2, r4, #4
    3860:	movs	r3, #0
    3862:	movs	r1, #76	; 0x4c
    3864:	uxtb	r2, r2
    3866:	add	r0, sp, #4
    3868:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    386c:	cmp	r5, #4
    386e:	bne.n	381a <adc_init()+0xce>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
    3870:	ldr	r1, [pc, #108]	; (38e0 <adc_init()+0x194>)
    3872:	ldr	r0, [pc, #92]	; (38d0 <adc_init()+0x184>)
    3874:	bl	36c0 <Print::print(char const*) [clone .isra.0]>
    3878:	movs	r2, #21
    387a:	movs	r1, #76	; 0x4c
    387c:	add	r0, sp, #4
    387e:	bl	39da <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3882:	movs	r3, #0
    3884:	mov	r1, r0
    3886:	movs	r2, #16
    3888:	ldr	r0, [pc, #68]	; (38d0 <adc_init()+0x184>)
    388a:	bl	c736 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    388e:	ldr	r0, [pc, #64]	; (38d0 <adc_init()+0x184>)
    3890:	bl	c6e4 <Print::println()>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
    3894:	ldr	r1, [pc, #76]	; (38e4 <adc_init()+0x198>)
    3896:	ldr	r0, [pc, #56]	; (38d0 <adc_init()+0x184>)
    3898:	bl	36c0 <Print::print(char const*) [clone .isra.0]>
    389c:	movs	r2, #118	; 0x76
    389e:	movs	r1, #76	; 0x4c
    38a0:	add	r0, sp, #4
    38a2:	bl	39da <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    38a6:	movs	r3, #0
    38a8:	mov	r1, r0
    38aa:	movs	r2, #16
    38ac:	ldr	r0, [pc, #32]	; (38d0 <adc_init()+0x184>)
    38ae:	bl	c736 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    38b2:	ldr	r0, [pc, #28]	; (38d0 <adc_init()+0x184>)
    38b4:	bl	c6e4 <Print::println()>
            
        }
    }
    38b8:	add	sp, #8
    38ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    38be:	ldr	r1, [pc, #40]	; (38e8 <adc_init()+0x19c>)
    38c0:	b.n	3790 <adc_init()+0x44>
    38c2:	nop
    38c4:	.word	0x000186a0
    38c8:	.word	0x20001d40
    38cc:	.word	0x20001032
    38d0:	.word	0x20001d30
    38d4:	.word	0x20001092
    38d8:	.word	0x2000108e
    38dc:	.word	0x200153ba
    38e0:	.word	0x20001053
    38e4:	.word	0x2000105b
    38e8:	.word	0x2000103c
    38ec:	.word	0x200022e8

000038f0 <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
    38f0:	push	{r0, r1, r4, r5, r6, lr}
    38f2:	mov	r4, r0
    38f4:	ldr	r6, [pc, #40]	; (3920 <setAGain(signed char)+0x30>)
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
    38f6:	movs	r5, #0
        i2c_class i2c(&mWire,100'000);
    38f8:	ldr	r2, [pc, #40]	; (3924 <setAGain(signed char)+0x34>)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    38fa:	uxtb	r4, r4
        i2c_class i2c(&mWire,100'000);
    38fc:	ldr	r1, [pc, #40]	; (3928 <setAGain(signed char)+0x38>)
    38fe:	add	r0, sp, #4
    3900:	bl	3994 <i2c_class::i2c_class(TwoWire*, unsigned long)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3904:	ldrb.w	r2, [r6], #1
            for(int jj=0; jj<4; jj++)
    3908:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    390a:	mov	r3, r4
    390c:	movs	r1, #76	; 0x4c
    390e:	adds	r2, #1
    3910:	add	r0, sp, #4
    3912:	uxtb	r2, r2
    3914:	bl	3a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    3918:	cmp	r5, #4
    391a:	bne.n	3904 <setAGain(signed char)+0x14>
            }
    }
    391c:	add	sp, #8
    391e:	pop	{r4, r5, r6, pc}
    3920:	.word	0x2000108e
    3924:	.word	0x000186a0
    3928:	.word	0x20001d40

0000392c <adcStatus()>:
    void adcStatus(void)
    {
    392c:	push	{r0, r1, r4, lr}
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    392e:	ldr	r4, [pc, #80]	; (3980 <adcStatus()+0x54>)
        i2c_class i2c(&mWire,100'000);
    3930:	add	r0, sp, #4
    3932:	ldr	r2, [pc, #80]	; (3984 <adcStatus()+0x58>)
    3934:	ldr	r1, [pc, #80]	; (3988 <adcStatus()+0x5c>)
    3936:	bl	3994 <i2c_class::i2c_class(TwoWire*, unsigned long)>
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    393a:	mov	r0, r4
    393c:	ldr	r1, [pc, #76]	; (398c <adcStatus()+0x60>)
    393e:	bl	36c0 <Print::print(char const*) [clone .isra.0]>
    3942:	movs	r2, #21
    3944:	movs	r1, #76	; 0x4c
    3946:	add	r0, sp, #4
    3948:	bl	39da <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    394c:	movs	r3, #0
    394e:	mov	r1, r0
    3950:	movs	r2, #16
    3952:	mov	r0, r4
    3954:	bl	c736 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    3958:	mov	r0, r4
    395a:	ldr	r1, [pc, #52]	; (3990 <adcStatus()+0x64>)
    395c:	bl	36c0 <Print::print(char const*) [clone .isra.0]>
    3960:	movs	r2, #118	; 0x76
    3962:	movs	r1, #76	; 0x4c
    3964:	add	r0, sp, #4
    3966:	bl	39da <i2c_class::read(unsigned char, unsigned char)>
    396a:	movs	r3, #0
    396c:	mov	r1, r0
    396e:	movs	r2, #16
    3970:	mov	r0, r4
    3972:	bl	c736 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    3976:	mov	r0, r4
    3978:	bl	c6e4 <Print::println()>
    }
    397c:	add	sp, #8
    397e:	pop	{r4, pc}
    3980:	.word	0x20001d30
    3984:	.word	0x000186a0
    3988:	.word	0x20001d40
    398c:	.word	0x20001052
    3990:	.word	0x2000105a

00003994 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    3994:	push	{r0, r1, r2, r4, r5, lr}
    3996:	mov	r4, r1
    {   this->wire = wire;
    3998:	str	r1, [r0, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    399a:	mov	r5, r0
        wire->begin();
    399c:	mov	r0, r1
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    399e:	str	r2, [sp, #4]
        wire->begin();
    39a0:	bl	12088 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    39a4:	movs	r0, #100	; 0x64
    39a6:	bl	b760 <delay>
        wire->setClock(speed);
    39aa:	mov	r0, r4
    39ac:	ldr	r1, [sp, #4]
    39ae:	bl	5484 <TwoWire::setClock(unsigned long)>
    }
    39b2:	mov	r0, r5
    39b4:	add	sp, #12
    39b6:	pop	{r4, r5, pc}

000039b8 <i2c_class::exist(unsigned char)>:
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    39b8:	push	{r3, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    39ba:	lsls	r1, r1, #1
        wire->beginTransmission(addr);
    39bc:	ldr	r3, [r0, #0]
    39be:	strb.w	r1, [r3, #165]	; 0xa5
		transmitting = 1;
    39c2:	movs	r1, #1
    39c4:	strb.w	r1, [r3, #304]	; 0x130
		txBufferLength = 1;
    39c8:	strb.w	r1, [r3, #303]	; 0x12f
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    39cc:	ldr	r0, [r0, #0]
    39ce:	bl	51d0 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    39d2:	clz	r0, r0
    39d6:	lsrs	r0, r0, #5
    39d8:	pop	{r3, pc}

000039da <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    39da:	push	{r4, r5, r6, lr}
        unsigned int val;
        wire->beginTransmission(addr);
    39dc:	ldr	r3, [r0, #0]
		transmitting = 1;
    39de:	movs	r6, #1
    { 
    39e0:	mov	r5, r1
		txBuffer[0] = (address << 1);
    39e2:	lsls	r1, r1, #1
		transmitting = 1;
    39e4:	strb.w	r6, [r3, #304]	; 0x130
    39e8:	mov	r4, r0
		txBuffer[0] = (address << 1);
    39ea:	strb.w	r1, [r3, #165]	; 0xa5
        wire->write(reg);
    39ee:	mov	r1, r2
		txBufferLength = 1;
    39f0:	strb.w	r6, [r3, #303]	; 0x12f
    39f4:	ldr	r0, [r0, #0]
    39f6:	ldr	r3, [r0, #0]
    39f8:	ldr	r3, [r3, #0]
    39fa:	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    39fc:	movs	r1, #0
    39fe:	ldr	r0, [r4, #0]
    3a00:	bl	51d0 <TwoWire::endTransmission(unsigned char)>
    3a04:	cbz	r0, 3a0a <i2c_class::read(unsigned char, unsigned char)+0x30>
    3a06:	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    3a08:	pop	{r4, r5, r6, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    3a0a:	mov	r3, r6
    3a0c:	mov	r2, r6
    3a0e:	mov	r1, r5
    3a10:	ldr	r0, [r4, #0]
    3a12:	bl	52b4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    3a16:	cmp	r0, #0
    3a18:	beq.n	3a06 <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    3a1a:	ldr	r0, [r4, #0]
    3a1c:	ldr	r3, [r0, #0]
    3a1e:	ldr	r3, [r3, #20]
    3a20:	blx	r3
        return val;
    3a22:	uxtb	r0, r0
    3a24:	b.n	3a08 <i2c_class::read(unsigned char, unsigned char)+0x2e>

00003a26 <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    3a26:	push	{r4, r5, r6, lr}
    3a28:	mov	r4, r0
		transmitting = 1;
    3a2a:	movs	r5, #1
    3a2c:	mov	r6, r3
        wire->beginTransmission(addr);
    3a2e:	ldr	r3, [r0, #0]
		txBuffer[0] = (address << 1);
    3a30:	lsls	r0, r1, #1
        wire->write(reg);
    3a32:	mov	r1, r2
		transmitting = 1;
    3a34:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    3a38:	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    3a3c:	strb.w	r0, [r3, #165]	; 0xa5
    3a40:	ldr	r0, [r4, #0]
    3a42:	ldr	r3, [r0, #0]
    3a44:	ldr	r3, [r3, #0]
    3a46:	blx	r3
        wire->write(val);
    3a48:	ldr	r0, [r4, #0]
    3a4a:	mov	r1, r6
    3a4c:	ldr	r3, [r0, #0]
    3a4e:	ldr	r3, [r3, #0]
    3a50:	blx	r3
		return endTransmission(1);
    3a52:	mov	r1, r5
    3a54:	ldr	r0, [r4, #0]
    3a56:	bl	51d0 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    3a5a:	clz	r0, r0
    3a5e:	lsrs	r0, r0, #5
    3a60:	pop	{r4, r5, r6, pc}
	...

00003a64 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    3a64:	push	{r4, r5, r6, r7, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now time is minutes
    3a66:	movs	r4, #60	; 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3a68:	movw	lr, #365	; 0x16d
    3a6c:	movs	r6, #100	; 0x64
    3a6e:	mov.w	ip, #400	; 0x190
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3a72:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now time is hours
    3a76:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3a7a:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now time is hours
    3a7e:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3a82:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now time is days
    3a84:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now time is hours
    3a86:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now time is days
    3a88:	udiv	r2, r3, r0
    3a8c:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3a90:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now time is days
    3a92:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3a94:	movs	r3, #7
    3a96:	udiv	r3, r0, r3
    3a9a:	rsb	r3, r3, r3, lsl #3
    3a9e:	subs	r0, r0, r3
    3aa0:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3aa2:	movs	r0, #0
    days = 0;
    3aa4:	mov	r4, r0
    3aa6:	uxtb	r3, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3aa8:	addw	r3, r3, #1970	; 0x7b2
    3aac:	ands.w	r7, r3, #3
    3ab0:	bne.n	3b34 <time2date(unsigned long, datetime_t*)+0xd0>
    3ab2:	sdiv	r5, r3, r6
    3ab6:	mls	r5, r6, r5, r3
    3aba:	cmp	r5, #0
    3abc:	bne.n	3b3a <time2date(unsigned long, datetime_t*)+0xd6>
    3abe:	sdiv	r5, r3, ip
    3ac2:	mls	r5, ip, r5, r3
    3ac6:	cmp	r5, #0
    3ac8:	ite	ne
    3aca:	movne	r5, lr
    3acc:	moveq.w	r5, #366	; 0x16e
    3ad0:	add	r4, r5
    3ad2:	adds	r0, #1
    3ad4:	cmp	r2, r4
    3ad6:	bcs.n	3aa6 <time2date(unsigned long, datetime_t*)+0x42>
    3ad8:	movs	r0, #100	; 0x64
      year++;
    }
    tm->year = year+YEAR0;
    3ada:	strh	r3, [r1, #0]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3adc:	udiv	r6, r3, r0
    3ae0:	mls	r6, r0, r6, r3
    3ae4:	mov.w	r0, #400	; 0x190
    3ae8:	udiv	r5, r3, r0
    3aec:	mls	r3, r0, r5, r3
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    3af0:	cbnz	r7, 3b40 <time2date(unsigned long, datetime_t*)+0xdc>
    3af2:	cbnz	r6, 3b46 <time2date(unsigned long, datetime_t*)+0xe2>
    3af4:	cmp	r3, #0
    3af6:	movw	r0, #365	; 0x16d
    3afa:	it	eq
    3afc:	moveq.w	r0, #366	; 0x16e
    time -= days; // now time is days in this year, starting at 0
    3b00:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    3b02:	ldr.w	ip, [pc, #88]	; 3b5c <time2date(unsigned long, datetime_t*)+0xf8>
    time -= days; // now time is days in this year, starting at 0
    3b06:	add	r2, r0
    3b08:	movs	r0, #0
      if (month==1) { // february
    3b0a:	cmp	r0, #1
    3b0c:	uxtb	r5, r0
    3b0e:	bne.n	3b4c <time2date(unsigned long, datetime_t*)+0xe8>
        if (LEAP_YEAR(year)) {
    3b10:	cbnz	r7, 3b52 <time2date(unsigned long, datetime_t*)+0xee>
    3b12:	cbnz	r6, 3b56 <time2date(unsigned long, datetime_t*)+0xf2>
          monthLength=29;
    3b14:	cmp	r3, #0
    3b16:	ite	ne
    3b18:	movne	r4, #28
    3b1a:	moveq	r4, #29
      }
      
      if (time >= monthLength) {
    3b1c:	cmp	r4, r2
    3b1e:	bhi.n	3b2a <time2date(unsigned long, datetime_t*)+0xc6>
    for (month=0; month<12; month++) {
    3b20:	adds	r0, #1
        time -= monthLength;
    3b22:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    3b24:	cmp	r0, #12
    3b26:	bne.n	3b0a <time2date(unsigned long, datetime_t*)+0xa6>
    3b28:	mov	r5, r0
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    3b2a:	adds	r5, #1
    tm->day = time + 1;     // day of month
    3b2c:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    3b2e:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
    3b30:	strb	r2, [r1, #3]
  }
    3b32:	pop	{r4, r5, r6, r7, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3b34:	movw	r5, #365	; 0x16d
    3b38:	b.n	3ad0 <time2date(unsigned long, datetime_t*)+0x6c>
    3b3a:	mov.w	r5, #366	; 0x16e
    3b3e:	b.n	3ad0 <time2date(unsigned long, datetime_t*)+0x6c>
    days -= LEAP_YEAR(year) ? 366 : 365;
    3b40:	movw	r0, #365	; 0x16d
    3b44:	b.n	3b00 <time2date(unsigned long, datetime_t*)+0x9c>
    3b46:	mov.w	r0, #366	; 0x16e
    3b4a:	b.n	3b00 <time2date(unsigned long, datetime_t*)+0x9c>
        monthLength = monthDays[month];
    3b4c:	ldrb.w	r4, [r0, ip]
    3b50:	b.n	3b1c <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=28;
    3b52:	movs	r4, #28
    3b54:	b.n	3b1c <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=29;
    3b56:	movs	r4, #29
    3b58:	b.n	3b1c <time2date(unsigned long, datetime_t*)+0xb8>
    3b5a:	nop
    3b5c:	.word	0x20001101

00003b60 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    3b60:	ldrh	r3, [r0, #0]
      if (LEAP_YEAR(ii)) {
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    #endif
    uint32_t days= year*365;
    3b62:	movw	r2, #365	; 0x16d
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3b66:	movw	r1, #1970	; 0x7b2
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    3b6a:	adds	r3, #78	; 0x4e
    3b6c:	uxtb	r3, r3
  {
    3b6e:	push	{r4, r5, r6, r7, lr}
    uint32_t days= year*365;
    3b70:	muls	r2, r3
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3b72:	movs	r5, #100	; 0x64
    3b74:	mov.w	r6, #400	; 0x190
    3b78:	subw	r4, r1, #1970	; 0x7b2
    3b7c:	cmp	r3, r4
    3b7e:	bgt.n	3bda <date2time(datetime_t*)+0x7a>
    seconds = days*SECS_PER_DAY;

    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3b80:	addw	r3, r3, #1970	; 0x7b2
    3b84:	movs	r1, #100	; 0x64
    seconds = days*SECS_PER_DAY;
    3b86:	ldr	r7, [pc, #148]	; (3c1c <date2time(datetime_t*)+0xbc>)
    for (ii = 1; ii < tm->month; ii++) {
    3b88:	ldrsb.w	ip, [r0, #2]
    seconds = days*SECS_PER_DAY;
    3b8c:	muls	r2, r7
    for (ii = 1; ii < tm->month; ii++) {
    3b8e:	ldr	r6, [pc, #144]	; (3c20 <date2time(datetime_t*)+0xc0>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3b90:	udiv	r4, r3, r1
    3b94:	mls	r4, r1, r4, r3
    3b98:	mov.w	r1, #400	; 0x190
    3b9c:	udiv	r5, r3, r1
    3ba0:	mls	r5, r1, r5, r3
    for (ii = 1; ii < tm->month; ii++) {
    3ba4:	movs	r1, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3ba6:	and.w	r3, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    3baa:	cmp	ip, r1
    3bac:	bgt.n	3bf8 <date2time(datetime_t*)+0x98>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    3bae:	ldrsb.w	r3, [r0, #6]
    seconds+= tm->sec;
    3bb2:	mov.w	r4, #3600	; 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    3bb6:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    3bba:	rsb	r3, r3, r3, lsl #4
    3bbe:	lsls	r3, r3, #2
    seconds+= tm->sec;
    3bc0:	mla	r3, r4, r1, r3
    3bc4:	ldrsb.w	r1, [r0, #7]
    3bc8:	add	r3, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3bca:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    3bce:	ldr	r0, [pc, #76]	; (3c1c <date2time(datetime_t*)+0xbc>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3bd0:	subs	r1, #1
    seconds+= tm->sec;
    3bd2:	mla	r0, r0, r1, r3
    return seconds; 
  }
    3bd6:	add	r0, r2
    3bd8:	pop	{r4, r5, r6, r7, pc}
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3bda:	lsls	r4, r1, #30
    3bdc:	bne.n	3bf4 <date2time(datetime_t*)+0x94>
    3bde:	sdiv	r4, r1, r5
    3be2:	mls	r4, r5, r4, r1
    3be6:	cbnz	r4, 3bf2 <date2time(datetime_t*)+0x92>
    3be8:	sdiv	r4, r1, r6
    3bec:	mls	r4, r6, r4, r1
    3bf0:	cbnz	r4, 3bf4 <date2time(datetime_t*)+0x94>
    3bf2:	adds	r2, #1
    3bf4:	adds	r1, #1
    3bf6:	b.n	3b78 <date2time(datetime_t*)+0x18>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3bf8:	cmp	r1, #2
    3bfa:	bne.n	3c10 <date2time(datetime_t*)+0xb0>
    3bfc:	cbnz	r3, 3c10 <date2time(datetime_t*)+0xb0>
    3bfe:	cbnz	r4, 3c02 <date2time(datetime_t*)+0xa2>
    3c00:	cbnz	r5, 3c10 <date2time(datetime_t*)+0xb0>
        seconds += SECS_PER_DAY * 29;
    3c02:	add.w	r2, r2, #2490368	; 0x260000
    3c06:	add.w	r2, r2, #15232	; 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    3c0a:	adds	r1, #1
    3c0c:	adds	r6, #1
    3c0e:	b.n	3baa <date2time(datetime_t*)+0x4a>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    3c10:	ldrb.w	lr, [r6]
    3c14:	mla	r2, r7, lr, r2
    3c18:	b.n	3c0a <date2time(datetime_t*)+0xaa>
    3c1a:	nop
    3c1c:	.word	0x00015180
    3c20:	.word	0x20001101

00003c24 <rtcXferTime()>:
    3c24:	bx	lr

00003c26 <rtcGetTimestamp()>:
      return rtc.stringTimeStamp();
    }
    #else
      return 0;
    #endif
  }
    3c26:	movs	r0, #0
    3c28:	bx	lr

00003c2a <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    3c2a:	push	{r0, r1, r2, lr}
    3c2c:	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    3c2e:	bl	b95c <rtc_get>
    3c32:	ldr	r1, [sp, #4]
    3c34:	bl	3a64 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    3c38:	movs	r0, #1
    3c3a:	add	sp, #12
    3c3c:	ldr.w	pc, [sp], #4

00003c40 <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    3c40:	push	{r3, lr}
    rtc_set(date2time(t));
    3c42:	bl	3b60 <date2time(datetime_t*)>
    3c46:	bl	b980 <rtc_set>
    return 1;
  }
    3c4a:	movs	r0, #1
    3c4c:	pop	{r3, pc}

00003c4e <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    3c4e:	push	{r0, r1, r4, r5, r6, lr}
    3c50:	mov	r5, r1
    3c52:	mov	r4, r2
    3c54:	mov	r6, r0
    rtc_get_datetime(&t);
    3c56:	mov	r0, sp
    3c58:	bl	3c2a <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    3c5c:	mov	r0, sp
    t.year=year;
    3c5e:	strh.w	r6, [sp]
    t.month=month;
    3c62:	strb.w	r5, [sp, #2]
    t.day=day;
    3c66:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    3c6a:	bl	3c40 <rtc_set_datetime(datetime_t*)>
  }
    3c6e:	add	sp, #8
    3c70:	pop	{r4, r5, r6, pc}

00003c72 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    3c72:	push	{r0, r1, r4, r5, r6, lr}
    3c74:	mov	r5, r1
    3c76:	mov	r4, r2
    3c78:	mov	r6, r0
    rtc_get_datetime(&t);
    3c7a:	mov	r0, sp
    3c7c:	bl	3c2a <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    3c80:	mov	r0, sp
    t.hour=hour;
    3c82:	strb.w	r6, [sp, #5]
    t.min=minutes;
    3c86:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    3c8a:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    3c8e:	bl	3c40 <rtc_set_datetime(datetime_t*)>
  }
    3c92:	add	sp, #8
    3c94:	pop	{r4, r5, r6, pc}

00003c96 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    3c96:	push	{r3, r4, r5, lr}
    3c98:	mov	r4, r0
    3c9a:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3c9c:	movs	r2, #60	; 0x3c
    3c9e:	mov	r1, r5
    3ca0:	mov	r0, r4
    3ca2:	bl	c270 <usb_mtp_send>
    3ca6:	cmp	r0, #0
    3ca8:	ble.n	3c9c <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    3caa:	pop	{r3, r4, r5, pc}

00003cac <MTPD::write(char const*, int) [clone .part.0]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    3cac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cb0:	mov	r7, r1
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3cb2:	add.w	r1, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    3cb6:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    3cb8:	ldr.w	r3, [r1, #1064]	; 0x428
    3cbc:	cbnz	r3, 3cc6 <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    3cbe:	add.w	r2, r0, #544	; 0x220
    3cc2:	ldr	r4, [pc, #92]	; (3d20 <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    3cc4:	str	r2, [r4, #0]
        write_length_ += len;
    3cc6:	add	r3, r6
        
        const char * src=data;
        //
        int pos = 0; // into data
    3cc8:	mov.w	r8, #0
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3ccc:	add.w	r9, r0, #1056	; 0x420
    3cd0:	ldr.w	sl, [pc, #76]	; 3d20 <MTPD::write(char const*, int) [clone .part.0]+0x74>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3cd4:	add.w	r4, r0, #544	; 0x220
        write_length_ += len;
    3cd8:	str.w	r3, [r1, #1064]	; 0x428
        while(pos<len)
    3cdc:	cmp	r6, r8
    3cde:	bgt.n	3ce4 <MTPD::write(char const*, int) [clone .part.0]+0x38>
            dst=tx_data_buffer;
          }
        }
      }
    }
    3ce0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3ce4:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    3ce8:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    3cec:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3cee:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    3cf2:	mov	r0, r3
    3cf4:	cmp	r5, r2
    3cf6:	it	ge
    3cf8:	movge	r5, r2
    3cfa:	mov	r2, r5
          pos += to_copy;
    3cfc:	add	r8, r5
          memcpy(dst,src,to_copy);
    3cfe:	bl	a218 <memcpy>
    3d02:	mov	r3, r0
          src += to_copy;
    3d04:	add	r7, r5
          dst += to_copy;
    3d06:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d08:	cmp	r9, r3
          dst += to_copy;
    3d0a:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d0e:	bne.n	3cdc <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d10:	mov.w	r1, #512	; 0x200
    3d14:	mov	r0, r4
    3d16:	bl	3c96 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    3d1a:	str.w	r4, [sl]
    3d1e:	b.n	3cdc <MTPD::write(char const*, int) [clone .part.0]+0x30>
    3d20:	.word	0x20014850

00003d24 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3d24:	push	{r4, r5, r6, lr}
    3d26:	mov	r5, r0
    storage_->StartGetObjectHandles(store, parent);
    3d28:	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    3d2a:	subs	r4, r1, #1
    int num = 0;
    3d2c:	movs	r6, #0
    storage_->StartGetObjectHandles(store, parent);
    3d2e:	ldr	r3, [r0, #0]
    3d30:	mov	r1, r4
    3d32:	ldr	r3, [r3, #28]
    3d34:	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    3d36:	ldr	r0, [r5, #0]
    3d38:	mov	r1, r4
    3d3a:	ldr	r3, [r0, #0]
    3d3c:	ldr	r3, [r3, #32]
    3d3e:	blx	r3
    3d40:	cbnz	r0, 3d46 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x22>
  }
    3d42:	mov	r0, r6
    3d44:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    3d46:	adds	r6, #1
    3d48:	b.n	3d36 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>

00003d4a <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3d4a:	ldr	r0, [r0, #0]
    3d4c:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3d4e:	push	{r4, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3d50:	ldr	r4, [r0, #0]
    3d52:	ldr	r4, [r4, #76]	; 0x4c
    3d54:	blx	r4
    }
    3d56:	movw	r2, #8193	; 0x2001
    3d5a:	movw	r3, #8197	; 0x2005
    3d5e:	cmp	r0, #0
    3d60:	ite	ne
    3d62:	movne	r0, r2
    3d64:	moveq	r0, r3
    3d66:	pop	{r4, pc}

00003d68 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    3d68:	ldr	r0, [r0, #0]
    3d6a:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3d6c:	push	{r4}
      return storage_->copy(handle,store1,newHandle);
    3d6e:	ldr	r4, [r0, #0]
    3d70:	ldr	r4, [r4, #80]	; 0x50
    3d72:	mov	ip, r4
    }
    3d74:	ldr.w	r4, [sp], #4
      return storage_->copy(handle,store1,newHandle);
    3d78:	bx	ip
	...

00003d7c <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    3d7c:	ldr	r3, [pc, #8]	; (3d88 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    3d7e:	ldr	r0, [r0, #0]
      sessionID_ = id;
    3d80:	str	r1, [r3, #0]
      storage_->ResetIndex();
    3d82:	ldr	r3, [r0, #0]
    3d84:	ldr	r3, [r3, #68]	; 0x44
    3d86:	bx	r3
    3d88:	.word	0x200151b0

00003d8c <MTPD::pull_packet(unsigned char*)>:
    {
    3d8c:	push	{r4, lr}
    3d8e:	mov	r4, r1
      while(!usb_mtp_available());
    3d90:	bl	c240 <usb_mtp_available>
    3d94:	cmp	r0, #0
    3d96:	beq.n	3d90 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    3d98:	mov	r0, r4
    3d9a:	movs	r1, #60	; 0x3c
    }
    3d9c:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    3da0:	b.w	c1ac <usb_mtp_recv>

00003da4 <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    3da4:	add.w	r3, r0, #8192	; 0x2000
    3da8:	push	{r4, r5}
    3daa:	ldrb.w	r5, [r3, #1060]	; 0x424
    3dae:	cbz	r5, 3dbe <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    3db0:	ldr.w	r1, [r3, #1064]	; 0x428
    3db4:	add	r1, r2
    }
    3db6:	pop	{r4, r5}
        write_length_ += len;
    3db8:	str.w	r1, [r3, #1064]	; 0x428
    }
    3dbc:	bx	lr
    3dbe:	pop	{r4, r5}
    3dc0:	b.w	3cac <MTPD::write(char const*, int) [clone .part.0]>

00003dc4 <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    3dc4:	push	{r0, r1, r2, lr}
    3dc6:	movs	r2, #1
    3dc8:	strb.w	r1, [sp, #7]
    3dcc:	add.w	r1, sp, #7
    3dd0:	bl	3da4 <MTPD::write(char const*, int)>
    3dd4:	add	sp, #12
    3dd6:	ldr.w	pc, [sp], #4

00003dda <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    3dda:	push	{r0, r1, r2, lr}
    3ddc:	movs	r2, #2
    3dde:	strh.w	r1, [sp, #6]
    3de2:	add.w	r1, sp, #6
    3de6:	bl	3da4 <MTPD::write(char const*, int)>
    3dea:	add	sp, #12
    3dec:	ldr.w	pc, [sp], #4

00003df0 <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    3df0:	push	{r3, r4, r5, lr}
    3df2:	mov	r4, r1
    if (*str) 
    3df4:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    3df6:	mov	r5, r0
    if (*str) 
    3df8:	cbz	r1, 3e22 <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    3dfa:	mov	r0, r4
    3dfc:	subs	r4, #1
    3dfe:	bl	ed90 <strlen>
    3e02:	adds	r0, #1
    3e04:	uxtb	r1, r0
    3e06:	mov	r0, r5
    3e08:	bl	3dc4 <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3e0c:	ldrb.w	r1, [r4, #1]!
    3e10:	mov	r0, r5
    3e12:	cbnz	r1, 3e1c <MTPD::writestring(char const*)+0x2c>
  }
    3e14:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3e18:	b.w	3dda <MTPD::write16(unsigned short)>
    3e1c:	bl	3dda <MTPD::write16(unsigned short)>
    3e20:	b.n	3e0c <MTPD::writestring(char const*)+0x1c>
  }
    3e22:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    3e26:	b.w	3dc4 <MTPD::write8(unsigned char)>
	...

00003e2c <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    3e2c:	movw	r3, #54274	; 0xd402
    3e30:	cmp	r1, r3
    3e32:	bne.n	3e3a <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    3e34:	ldr	r1, [pc, #4]	; (3e3c <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    3e36:	b.w	3df0 <MTPD::writestring(char const*)>
  }
    3e3a:	bx	lr
    3e3c:	.word	0x20001189

00003e40 <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    3e40:	movw	r3, #54274	; 0xd402
    3e44:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    3e46:	push	{r4, lr}
    3e48:	mov	r4, r0
    switch (prop) {
    3e4a:	bne.n	3e7e <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    3e4c:	bl	3dda <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    3e50:	mov	r0, r4
    3e52:	movw	r1, #65535	; 0xffff
    3e56:	bl	3dda <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    3e5a:	mov	r0, r4
    3e5c:	movs	r1, #0
    3e5e:	bl	3dc4 <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    3e62:	mov	r0, r4
    3e64:	ldr	r1, [pc, #24]	; (3e80 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3e66:	bl	3df0 <MTPD::writestring(char const*)>
    3e6a:	mov	r0, r4
    3e6c:	ldr	r1, [pc, #16]	; (3e80 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3e6e:	bl	3df0 <MTPD::writestring(char const*)>
        write8(0);       // no form
    3e72:	mov	r0, r4
    3e74:	movs	r1, #0
  }
    3e76:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    3e7a:	b.w	3dc4 <MTPD::write8(unsigned char)>
  }
    3e7e:	pop	{r4, pc}
    3e80:	.word	0x20001189

00003e84 <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    3e84:	push	{r0, r1, r2, lr}
    3e86:	movs	r2, #4
    3e88:	str	r1, [sp, #4]
    3e8a:	add.w	r1, sp, r2
    3e8e:	bl	3da4 <MTPD::write(char const*, int)>
    3e92:	add	sp, #12
    3e94:	ldr.w	pc, [sp], #4

00003e98 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    3e98:	push	{r4, r5, r6, lr}
    3e9a:	mov	r4, r0
    3e9c:	sub	sp, #24
    write16(100);  // MTP version
    3e9e:	movs	r1, #100	; 0x64
    3ea0:	ldr	r6, [pc, #240]	; (3f94 <MTPD::WriteDescriptor()+0xfc>)
    3ea2:	bl	3dda <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    3ea6:	movs	r1, #6
    3ea8:	mov	r0, r4
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3eaa:	movs	r5, #0
    write32(6);    // MTP extension
    3eac:	bl	3e84 <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    3eb0:	movs	r1, #100	; 0x64
    3eb2:	mov	r0, r4
    3eb4:	bl	3dda <MTPD::write16(unsigned short)>
    writestring("microsoft.com: 1.0;");
    3eb8:	ldr	r1, [pc, #220]	; (3f98 <MTPD::WriteDescriptor()+0x100>)
    3eba:	mov	r0, r4
    3ebc:	bl	3df0 <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    3ec0:	movs	r1, #0
    3ec2:	mov	r0, r4
    3ec4:	bl	3dda <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    3ec8:	movs	r1, #20
    3eca:	mov	r0, r4
    3ecc:	bl	3e84 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3ed0:	adds	r5, #1
    3ed2:	ldrh.w	r1, [r6], #2
    3ed6:	mov	r0, r4
    3ed8:	bl	3dda <MTPD::write16(unsigned short)>
    3edc:	cmp	r5, #20
    3ede:	bne.n	3ed0 <MTPD::WriteDescriptor()+0x38>
    write32(supported_event_num);      
    3ee0:	movs	r1, #4
    3ee2:	mov	r0, r4
    3ee4:	bl	3e84 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    3ee8:	movw	r1, #16388	; 0x4004
    3eec:	mov	r0, r4
    3eee:	bl	3dda <MTPD::write16(unsigned short)>
    3ef2:	movw	r1, #16389	; 0x4005
    3ef6:	mov	r0, r4
    3ef8:	bl	3dda <MTPD::write16(unsigned short)>
    3efc:	movw	r1, #16395	; 0x400b
    3f00:	mov	r0, r4
    3f02:	bl	3dda <MTPD::write16(unsigned short)>
    3f06:	movw	r1, #16396	; 0x400c
    3f0a:	mov	r0, r4
    3f0c:	bl	3dda <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    3f10:	movs	r1, #1
    3f12:	mov	r0, r4
    3f14:	bl	3e84 <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    3f18:	movw	r1, #54274	; 0xd402
    3f1c:	mov	r0, r4
    3f1e:	bl	3dda <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    3f22:	movs	r1, #0
    3f24:	mov	r0, r4
    3f26:	bl	3e84 <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    3f2a:	movs	r1, #2
    3f2c:	mov	r0, r4
    3f2e:	bl	3e84 <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    3f32:	mov.w	r1, #12288	; 0x3000
    3f36:	mov	r0, r4
    3f38:	bl	3dda <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    3f3c:	movw	r1, #12289	; 0x3001
    3f40:	mov	r0, r4
    3f42:	bl	3dda <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    3f46:	ldr	r1, [pc, #84]	; (3f9c <MTPD::WriteDescriptor()+0x104>)
    3f48:	mov	r0, r4
    3f4a:	bl	3df0 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    3f4e:	ldr	r1, [pc, #80]	; (3fa0 <MTPD::WriteDescriptor()+0x108>)
    3f50:	mov	r0, r4
    3f52:	bl	3df0 <MTPD::writestring(char const*)>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    3f56:	vldr	s0, [pc, #76]	; 3fa4 <MTPD::WriteDescriptor()+0x10c>
    3f5a:	add	r2, sp, #4
    3f5c:	movs	r1, #2
    3f5e:	movs	r0, #3
    3f60:	bl	b4cc <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    3f64:	mov	r2, r5
    3f66:	ldr	r1, [pc, #64]	; (3fa8 <MTPD::WriteDescriptor()+0x110>)
    3f68:	add	r0, sp, #4
    3f6a:	bl	eb30 <strlcat>
    writestring( buf );    
    3f6e:	add	r1, sp, #4
    3f70:	mov	r0, r4
    3f72:	bl	3df0 <MTPD::writestring(char const*)>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3f76:	ldr	r1, [pc, #52]	; (3fac <MTPD::WriteDescriptor()+0x114>)
    3f78:	add	r2, sp, #4
    writestring( buf );    
    3f7a:	movs	r3, #10
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3f7c:	ldrh.w	r0, [r1, #2]!
    3f80:	subs	r3, #1
    3f82:	strb.w	r0, [r2], #1
    3f86:	bne.n	3f7c <MTPD::WriteDescriptor()+0xe4>
    writestring(buf);    
    3f88:	add	r1, sp, #4
    3f8a:	mov	r0, r4
    3f8c:	bl	3df0 <MTPD::writestring(char const*)>
  }
    3f90:	add	sp, #24
    3f92:	pop	{r4, r5, r6, pc}
    3f94:	.word	0x20000b70
    3f98:	.word	0x20001165
    3f9c:	.word	0x20001179
    3fa0:	.word	0x20001189
    3fa4:	.word	0x3fcb851f
    3fa8:	.word	0x2000117e
    3fac:	.word	0x200022f8

00003fb0 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    3fb0:	push	{r4, r5, r6, lr}
    3fb2:	mov	r4, r0
    uint32_t num=storage_->get_FSCount();
    3fb4:	ldr	r0, [r0, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3fb6:	movs	r6, #0
    uint32_t num=storage_->get_FSCount();
    3fb8:	ldr	r3, [r0, #0]
    3fba:	ldr	r3, [r3, #4]
    3fbc:	blx	r3
    write32(num); // number of storages (disks)
    3fbe:	mov	r1, r0
    uint32_t num=storage_->get_FSCount();
    3fc0:	mov	r5, r0
    write32(num); // number of storages (disks)
    3fc2:	mov	r0, r4
    3fc4:	bl	3e84 <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3fc8:	cmp	r6, r5
    3fca:	bne.n	3fce <MTPD::WriteStorageIDs()+0x1e>
  }
    3fcc:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3fce:	adds	r6, #1
    3fd0:	mov	r0, r4
    3fd2:	mov	r1, r6
    3fd4:	bl	3e84 <MTPD::write32(unsigned long)>
    3fd8:	b.n	3fc8 <MTPD::WriteStorageIDs()+0x18>

00003fda <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3fda:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    3fdc:	add.w	r7, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    3fe0:	mov	r4, r0
    3fe2:	mov	r6, r2
    if (write_get_length_) {
    3fe4:	ldrb.w	r3, [r7, #1060]	; 0x424
    3fe8:	cbz	r3, 3ff8 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    3fea:	bl	3d24 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    3fee:	adds	r0, #1
      write_length_ *= 4;
    3ff0:	lsls	r0, r0, #2
    3ff2:	str.w	r0, [r7, #1064]	; 0x428
  }
    3ff6:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    3ff8:	subs	r5, r1, #1
      write32(GetNumObjects(storage, parent));
    3ffa:	bl	3d24 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    3ffe:	mov	r1, r0
    4000:	mov	r0, r4
    4002:	bl	3e84 <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    4006:	ldr	r0, [r4, #0]
    4008:	mov	r2, r6
    400a:	mov	r1, r5
    400c:	ldr	r3, [r0, #0]
    400e:	ldr	r3, [r3, #28]
    4010:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    4012:	ldr	r0, [r4, #0]
    4014:	mov	r1, r5
    4016:	ldr	r3, [r0, #0]
    4018:	ldr	r3, [r3, #32]
    401a:	blx	r3
    401c:	mov	r1, r0
    401e:	cmp	r0, #0
    4020:	beq.n	3ff6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    4022:	mov	r0, r4
    4024:	bl	3e84 <MTPD::write32(unsigned long)>
    4028:	b.n	4012 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
	...

0000402c <MTPD::GetObjectInfo(unsigned long)>:
  {
    402c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4030:	mov	r4, r0
    4032:	sub	sp, #420	; 0x1a4
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    4034:	ldr	r0, [r0, #0]
    4036:	add	r5, sp, #96	; 0x60
    4038:	add	r6, sp, #32
    403a:	ldr	r3, [r0, #0]
    403c:	add.w	r8, sp, #22
    4040:	add	r7, sp, #28
    4042:	add	r2, sp, #160	; 0xa0
    4044:	str	r5, [sp, #12]
    4046:	str	r6, [sp, #8]
    4048:	str.w	r8, [sp, #4]
    404c:	str	r7, [sp, #0]
    404e:	ldr.w	r9, [r3, #36]	; 0x24
    4052:	add	r3, sp, #24
    4054:	blx	r9
    uint32_t storage = Store2Storage(store);
    4056:	ldrh.w	r1, [sp, #22]
    write32(storage); // storage
    405a:	mov	r0, r4
    405c:	adds	r1, #1
    405e:	bl	3e84 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    4062:	ldr	r3, [sp, #24]
    4064:	movw	r1, #12289	; 0x3001
    4068:	mov	r0, r4
    406a:	adds	r3, #1
    406c:	it	ne
    406e:	movne	r1, #0
    4070:	bl	3dda <MTPD::write16(unsigned short)>
    write16(0);  // protection
    4074:	mov	r0, r4
    4076:	movs	r1, #0
    4078:	bl	3dda <MTPD::write16(unsigned short)>
    write32(size); // size
    407c:	ldr	r1, [sp, #24]
    407e:	mov	r0, r4
    4080:	bl	3e84 <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    4084:	mov	r0, r4
    4086:	movs	r1, #0
    4088:	bl	3dda <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    408c:	mov	r0, r4
    408e:	movs	r1, #0
    4090:	bl	3e84 <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    4094:	mov	r0, r4
    4096:	movs	r1, #0
    4098:	bl	3e84 <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    409c:	mov	r0, r4
    409e:	movs	r1, #0
    40a0:	bl	3e84 <MTPD::write32(unsigned long)>
    write32(0); // pix width
    40a4:	mov	r0, r4
    40a6:	movs	r1, #0
    40a8:	bl	3e84 <MTPD::write32(unsigned long)>
    write32(0); // pix height
    40ac:	mov	r0, r4
    40ae:	movs	r1, #0
    40b0:	bl	3e84 <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    40b4:	mov	r0, r4
    40b6:	movs	r1, #0
    40b8:	bl	3e84 <MTPD::write32(unsigned long)>
    write32(parent); // parent
    40bc:	ldr	r1, [sp, #28]
    40be:	mov	r0, r4
    40c0:	bl	3e84 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    40c4:	ldr	r1, [sp, #24]
    40c6:	mov	r0, r4
    40c8:	adds	r3, r1, #1
    40ca:	negs	r1, r3
    40cc:	adcs	r1, r3
    40ce:	bl	3dda <MTPD::write16(unsigned short)>
    write32(0); // association description
    40d2:	mov	r0, r4
    40d4:	movs	r1, #0
    40d6:	bl	3e84 <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    40da:	mov	r0, r4
    40dc:	movs	r1, #0
    40de:	bl	3e84 <MTPD::write32(unsigned long)>
    writestring(filename);
    40e2:	add	r1, sp, #160	; 0xa0
    40e4:	mov	r0, r4
    40e6:	bl	3df0 <MTPD::writestring(char const*)>
    writestring(create);  // date created
    40ea:	mov	r1, r6
    40ec:	mov	r0, r4
    40ee:	bl	3df0 <MTPD::writestring(char const*)>
    writestring(modify);  // date modified
    40f2:	mov	r1, r5
    40f4:	mov	r0, r4
    40f6:	bl	3df0 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    40fa:	ldr	r1, [pc, #12]	; (4108 <MTPD::GetObjectInfo(unsigned long)+0xdc>)
    40fc:	mov	r0, r4
    40fe:	bl	3df0 <MTPD::writestring(char const*)>
  }
    4102:	add	sp, #420	; 0x1a4
    4104:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4108:	.word	0x20000dbc

0000410c <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    410c:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    410e:	ldr	r6, [pc, #36]	; (4134 <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4110:	movs	r4, #0
    4112:	ldr	r7, [pc, #36]	; (4138 <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    4114:	mov	r5, r0
      write32(propertyListNum);
    4116:	ldr	r1, [r6, #0]
    4118:	bl	3e84 <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    411c:	ldr	r3, [r6, #0]
    411e:	cmp	r3, r4
    4120:	bhi.n	4124 <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    4122:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4124:	ldrh.w	r1, [r7], #2
    4128:	mov	r0, r5
    412a:	adds	r4, #1
    412c:	bl	3dda <MTPD::write16(unsigned short)>
    4130:	b.n	411c <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    4132:	nop
    4134:	.word	0x200022d8
    4138:	.word	0x20000b5c

0000413c <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    413c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4140:	mov	r4, r0
    4142:	sub	sp, #420	; 0x1a4
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    4144:	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    4146:	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    4148:	add.w	r8, sp, #22
    414c:	add.w	r9, sp, #96	; 0x60
    4150:	ldr	r3, [r0, #0]
    4152:	add.w	sl, sp, #32
    4156:	add	r6, sp, #28
    4158:	str.w	r8, [sp, #4]
    415c:	add	r2, sp, #160	; 0xa0
    415e:	str.w	r9, [sp, #12]
    4162:	str.w	sl, [sp, #8]
    { char name[MAX_FILENAME_LEN];
    4166:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    4168:	str	r6, [sp, #0]
    416a:	ldr.w	fp, [r3, #36]	; 0x24
    416e:	add	r3, sp, #24
    4170:	blx	fp
      switch(p2)
    4172:	movw	r2, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    4176:	ldrh.w	r3, [sp, #22]
      switch(p2)
    417a:	cmp	r5, r2
      dir = size == 0xFFFFFFFFUL;
    417c:	ldr	r1, [sp, #24]
      uint32_t storage = Store2Storage(store);
    417e:	add.w	r8, r3, #1
      switch(p2)
    4182:	bhi.n	41a4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    4184:	cmp.w	r5, #56320	; 0xdc00
    4188:	bls.n	41b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    418a:	sub.w	r5, r5, #56320	; 0xdc00
    418e:	subs	r5, #1
    4190:	cmp	r5, #10
    4192:	bhi.n	41b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    4194:	tbb	[pc, r5]
    4198:	.word	0x39201611
    419c:	.word	0x27220e0e
    41a0:	.short	0x0e29
    41a2:	.byte	0x2b
    41a3:	.byte	0x00
    41a4:	movw	r3, #56385	; 0xdc41
    41a8:	cmp	r5, r3
    41aa:	beq.n	41f8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbc>
    41ac:	movw	r3, #56388	; 0xdc44
    41b0:	cmp	r5, r3
    41b2:	beq.n	41dc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa0>
    }
    41b4:	add	sp, #420	; 0x1a4
    41b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          write32(storage);
    41ba:	mov	r1, r8
          write32(0);
    41bc:	mov	r0, r4
    41be:	bl	3e84 <MTPD::write32(unsigned long)>
    }
    41c2:	b.n	41b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(dir?0x3001:0x3000);
    41c4:	adds	r1, #1
    41c6:	movw	r1, #12289	; 0x3001
    41ca:	it	ne
    41cc:	movne.w	r1, #12288	; 0x3000
          write16(0);
    41d0:	mov	r0, r4
    41d2:	bl	3dda <MTPD::write16(unsigned short)>
          break;
    41d6:	b.n	41b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(0);
    41d8:	movs	r1, #0
    41da:	b.n	41d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
          writestring(name);
    41dc:	add	r1, sp, #160	; 0xa0
          writestring(modify);
    41de:	mov	r0, r4
    41e0:	bl	3df0 <MTPD::writestring(char const*)>
          break;
    41e4:	b.n	41b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          writestring(create);
    41e6:	mov	r1, sl
    41e8:	b.n	41de <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          writestring(modify);
    41ea:	mov	r1, r9
    41ec:	b.n	41de <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          write32((store==parent)? 0: parent);
    41ee:	ldr	r1, [r6, #0]
    41f0:	cmp	r3, r1
    41f2:	it	eq
    41f4:	moveq	r1, #0
    41f6:	b.n	41bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
          write32(p1);
    41f8:	mov	r1, r7
    41fa:	mov	r0, r4
    41fc:	bl	3e84 <MTPD::write32(unsigned long)>
          write32(parent);
    4200:	ldr	r1, [r6, #0]
    4202:	mov	r0, r4
    4204:	bl	3e84 <MTPD::write32(unsigned long)>
          write32(storage);
    4208:	mov	r1, r8
    420a:	mov	r0, r4
    420c:	bl	3e84 <MTPD::write32(unsigned long)>
          write32(0);
    4210:	movs	r1, #0
    4212:	b.n	41bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>

00004214 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    4214:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4218:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    421a:	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    421c:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    421e:	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4220:	ldr	r3, [r0, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4222:	mov.w	fp, #0
    4226:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    4228:	ldr	r6, [pc, #228]	; (4310 <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    422a:	ldr	r3, [r3, #20]
    422c:	blx	r3
    422e:	cmp	r0, #0
    4230:	mov	r0, r4
    4232:	ite	ne
    4234:	movne	r1, #1
    4236:	moveq	r1, #4
    4238:	bl	3dda <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    423c:	ldr	r0, [r4, #0]
    423e:	mov	r1, r7
    4240:	ldr	r3, [r0, #0]
    4242:	ldr	r3, [r3, #24]
    4244:	blx	r3
    4246:	adds	r0, #1
    4248:	uxth	r1, r0
    424a:	mov	r0, r4
    424c:	bl	3dda <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    4250:	mov	r0, r4
    4252:	movs	r1, #0
    4254:	bl	3dda <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    4258:	ldr	r0, [r4, #0]
    425a:	mov	r1, r7
    425c:	ldr	r3, [r0, #0]
    425e:	ldr	r3, [r3, #12]
    4260:	blx	r3
    4262:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    4264:	ldr	r0, [r4, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    4266:	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    4268:	mov	r1, r7
    426a:	ldr	r3, [r0, #0]
    426c:	ldr	r3, [r3, #16]
    426e:	blx	r3
    4270:	ldr	r3, [r6, #0]
    4272:	mov	r9, r0
    4274:	mov	sl, r1
    4276:	ldr	r3, [r3, #4]
    4278:	movs	r2, #5
    427a:	ldr	r1, [pc, #152]	; (4314 <MTPD::GetStorageInfo(unsigned long)+0x100>)
    427c:	mov	r0, r6
    427e:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4280:	movs	r3, #10
    4282:	mov	r2, r5
    4284:	mov	r0, r6
    4286:	strd	r3, fp, [sp]
    428a:	mov	r3, r8
    428c:	bl	c74a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    4290:	mov	r0, r6
    4292:	bl	c6e4 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    4296:	ldr	r3, [r6, #0]
    4298:	ldr	r1, [pc, #124]	; (4318 <MTPD::GetStorageInfo(unsigned long)+0x104>)
    429a:	movs	r2, #5
    429c:	ldr	r3, [r3, #4]
    429e:	mov	r0, r6
    42a0:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    42a2:	movs	r3, #10
    42a4:	mov	r2, r9
    42a6:	mov	r0, r6
    42a8:	str	r3, [sp, #0]
    42aa:	mov	r3, sl
    42ac:	str.w	fp, [sp, #4]
    42b0:	bl	c74a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    42b4:	mov	r0, r6
    42b6:	bl	c6e4 <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    42ba:	movs	r2, #8
    42bc:	mov	r0, r4
    42be:	add.w	r1, sp, r2
    42c2:	strd	r5, r8, [sp, #8]
    42c6:	bl	3da4 <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    42ca:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    42ce:	mov.w	r2, #8
    42d2:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    42d4:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    42d8:	add.w	r1, sp, r2
    42dc:	strd	r5, r3, [sp, #8]
    42e0:	bl	3da4 <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    42e4:	mov	r0, r4
    42e6:	mov.w	r1, #4294967295
    42ea:	bl	3e84 <MTPD::write32(unsigned long)>
    const char *name = storage_->get_FSName(store);
    42ee:	ldr	r0, [r4, #0]
    42f0:	mov	r1, r7
    42f2:	ldr	r3, [r0, #0]
    42f4:	ldr	r3, [r3, #8]
    42f6:	blx	r3
    42f8:	mov	r1, r0
    writestring(name);  // storage descriptor
    42fa:	mov	r0, r4
    42fc:	bl	3df0 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    4300:	ldr	r1, [pc, #24]	; (431c <MTPD::GetStorageInfo(unsigned long)+0x108>)
    4302:	mov	r0, r4
  }
    4304:	add	sp, #20
    4306:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    430a:	b.w	3df0 <MTPD::writestring(char const*)>
    430e:	nop
    4310:	.word	0x20001d30
    4314:	.word	0x20001159
    4318:	.word	0x2000115f
    431c:	.word	0x20000dbc

00004320 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    4320:	movw	r2, #56331	; 0xdc0b
    4324:	cmp	r1, r2
    {
    4326:	push	{r0, r1, r4, r6, r7, lr}
    4328:	mov	r4, r0
      switch(p1)
    432a:	bhi.n	434c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    432c:	cmp.w	r1, #56320	; 0xdc00
    4330:	bls.n	435c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    4332:	sub.w	r3, r1, #56320	; 0xdc00
    4336:	subs	r3, #1
    4338:	cmp	r3, #10
    433a:	bhi.n	435c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    433c:	tbb	[pc, r3]
    4340:	.word	0x413e2210
    4344:	.word	0x69570e0e
    4348:	.short	0x0e75
    434a:	.byte	0x78
    434b:	.byte	0x00
    434c:	movw	r2, #56385	; 0xdc41
    4350:	cmp	r1, r2
    4352:	beq.n	4436 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    4354:	movw	r2, #56388	; 0xdc44
    4358:	cmp	r1, r2
    435a:	beq.n	4418 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    435c:	add	sp, #8
    435e:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    4360:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    4364:	mov	r0, r4
    4366:	bl	3dda <MTPD::write16(unsigned short)>
          write16(6);
    436a:	mov	r0, r4
    436c:	movs	r1, #6
    436e:	bl	3dda <MTPD::write16(unsigned short)>
          write8(0); //get
    4372:	mov	r0, r4
    4374:	movs	r1, #0
    4376:	bl	3dc4 <MTPD::write8(unsigned char)>
          write32(0);
    437a:	movs	r1, #0
    437c:	mov	r0, r4
    437e:	bl	3e84 <MTPD::write32(unsigned long)>
          write32(0);
    4382:	b.n	43a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    4384:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    4388:	mov	r0, r4
    438a:	bl	3dda <MTPD::write16(unsigned short)>
          write16(0x004);
    438e:	movs	r1, #4
    4390:	mov	r0, r4
    4392:	bl	3dda <MTPD::write16(unsigned short)>
          write8(0); //get
    4396:	movs	r1, #0
    4398:	mov	r0, r4
    439a:	bl	3dc4 <MTPD::write8(unsigned char)>
          write16(0);
    439e:	movs	r1, #0
    43a0:	mov	r0, r4
    43a2:	bl	3dda <MTPD::write16(unsigned short)>
          write32(0);
    43a6:	mov	r0, r4
    43a8:	movs	r1, #0
    43aa:	bl	3e84 <MTPD::write32(unsigned long)>
          write8(0);
    43ae:	movs	r1, #0
    43b0:	mov	r0, r4
    }
    43b2:	add	sp, #8
    43b4:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    43b8:	b.w	3dc4 <MTPD::write8(unsigned char)>
          write16(0xDC03);
    43bc:	movw	r1, #56323	; 0xdc03
    43c0:	b.n	4388 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    43c2:	movw	r1, #56324	; 0xdc04
    43c6:	bl	3dda <MTPD::write16(unsigned short)>
          write16(0x008);
    43ca:	movs	r1, #8
    43cc:	mov	r0, r4
    43ce:	bl	3dda <MTPD::write16(unsigned short)>
          write8(0); //get
    43d2:	movs	r1, #0
    43d4:	mov	r0, r4
    43d6:	bl	3dc4 <MTPD::write8(unsigned char)>
          write64(0);
    43da:	movs	r2, #0
    43dc:	movs	r3, #0
    43de:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    43e2:	movs	r2, #8
    43e4:	mov	r1, sp
    43e6:	mov	r0, r4
    43e8:	bl	3da4 <MTPD::write(char const*, int)>
          write32(0);
    43ec:	b.n	43a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    43ee:	movw	r1, #56327	; 0xdc07
    43f2:	bl	3dda <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    43f6:	movw	r1, #65535	; 0xffff
    43fa:	mov	r0, r4
    43fc:	bl	3dda <MTPD::write16(unsigned short)>
          write8(1); //get/set
    4400:	movs	r1, #1
          write8(0); //get
    4402:	mov	r0, r4
    4404:	bl	3dc4 <MTPD::write8(unsigned char)>
          write8(0);
    4408:	movs	r1, #0
    440a:	mov	r0, r4
    440c:	bl	3dc4 <MTPD::write8(unsigned char)>
    4410:	b.n	43a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    4412:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    4416:	mov	r0, r4
          write16(0xDC44);
    4418:	bl	3dda <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    441c:	movw	r1, #65535	; 0xffff
    4420:	mov	r0, r4
    4422:	bl	3dda <MTPD::write16(unsigned short)>
          write8(0); //get
    4426:	movs	r1, #0
    4428:	b.n	4402 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    442a:	movw	r1, #56329	; 0xdc09
    442e:	b.n	4416 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    4430:	movw	r1, #56331	; 0xdc0b
    4434:	b.n	4364 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    4436:	bl	3dda <MTPD::write16(unsigned short)>
          write16(0x0A);
    443a:	movs	r1, #10
    443c:	mov	r0, r4
    443e:	movs	r6, #0
    4440:	bl	3dda <MTPD::write16(unsigned short)>
          write8(0); //get
    4444:	movs	r7, #0
    4446:	movs	r1, #0
    4448:	mov	r0, r4
    444a:	bl	3dc4 <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    444e:	movs	r2, #8
    4450:	mov	r1, sp
    4452:	mov	r0, r4
    4454:	strd	r6, r7, [sp]
    4458:	bl	3da4 <MTPD::write(char const*, int)>
          write64(0);
    445c:	strd	r6, r7, [sp]
    4460:	b.n	43e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

00004462 <MTPD::GetObject(unsigned long)>:

    void MTPD::GetObject(uint32_t object_id) 
    {
    4462:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4466:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    4468:	ldr	r0, [r0, #0]
    446a:	ldr	r3, [r0, #0]

      if (write_get_length_) {
    446c:	add.w	r5, r6, #8192	; 0x2000
    {
    4470:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    4474:	ldr	r3, [r3, #40]	; 0x28
    {
    4476:	sub	sp, #20
    4478:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    447c:	blx	r3
      if (write_get_length_) {
    447e:	ldrb.w	r4, [r5, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    4482:	mov	r8, r0
      if (write_get_length_) {
    4484:	cbz	r4, 449a <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    4486:	ldr.w	r3, [r5, #1064]	; 0x428
    448a:	add	r3, r0
    448c:	str.w	r3, [r5, #1064]	; 0x428
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    4490:	add	sp, #20
    4492:	vpop	{d8}
    4496:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    449a:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    449e:	movs	r7, #12
    44a0:	add.w	fp, r6, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    44a4:	add.w	sl, r6, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    44a8:	str.w	r3, [r5, #1056]	; 0x420
        uint32_t pos = 0; // into data
    44ac:	str	r4, [sp, #12]
        while(pos<size)
    44ae:	ldr	r3, [sp, #12]
    44b0:	cmp	r3, r8
    44b2:	bcc.n	44ce <MTPD::GetObject(unsigned long)+0x6c>
        if(len>0)
    44b4:	cmp	r7, #0
    44b6:	beq.n	4490 <MTPD::GetObject(unsigned long)+0x2e>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    44b8:	mov.w	r1, #512	; 0x200
    44bc:	add.w	r0, r6, #544	; 0x220
    }
    44c0:	add	sp, #20
    44c2:	vpop	{d8}
    44c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    44ca:	b.w	3c96 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
          if(disk_pos==DISK_BUFFER_SIZE)
    44ce:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    44d2:	ldr	r2, [sp, #12]
          if(disk_pos==DISK_BUFFER_SIZE)
    44d4:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    44d8:	sub.w	r9, r8, r2
          if(disk_pos==DISK_BUFFER_SIZE)
    44dc:	bne.n	4500 <MTPD::GetObject(unsigned long)+0x9e>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    44de:	ldr	r0, [r6, #0]
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    44e0:	cmp.w	r9, #8192	; 0x2000
    44e4:	it	cc
    44e6:	movcc	r3, r9
    44e8:	vmov	r1, s16
    44ec:	ldr	r2, [r0, #0]
    44ee:	str	r3, [sp, #0]
    44f0:	ldr	r3, [r2, #48]	; 0x30
    44f2:	ldr	r2, [sp, #12]
    44f4:	mov	r4, r3
    44f6:	mov	r3, fp
    44f8:	blx	r4
            disk_pos=0;
    44fa:	movs	r3, #0
    44fc:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    4500:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4504:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4508:	add.w	r0, sl, r7
    450c:	cmp	r9, r3
    450e:	it	cs
    4510:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4512:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4516:	add	r1, fp
    4518:	cmp	r9, r3
    451a:	it	cs
    451c:	movcs	r9, r3
    451e:	mov	r2, r9
          len += to_copy;
    4520:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4522:	bl	a218 <memcpy>
          disk_pos += to_copy;
    4526:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    452a:	cmp.w	r7, #512	; 0x200
          disk_pos += to_copy;
    452e:	add	r3, r9
    4530:	str.w	r3, [r5, #1056]	; 0x420
          pos += to_copy;
    4534:	ldr	r3, [sp, #12]
    4536:	add	r3, r9
    4538:	str	r3, [sp, #12]
          if(len==MTP_TX_SIZE)
    453a:	bne.n	44ae <MTPD::GetObject(unsigned long)+0x4c>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    453c:	mov	r1, r7
    453e:	mov	r0, sl
            len=0;
    4540:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4542:	bl	3c96 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4546:	b.n	44ae <MTPD::GetObject(unsigned long)+0x4c>

00004548 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    4548:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    454c:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    454e:	ldr	r0, [r0, #0]
    {
    4550:	mov	r4, r3
    4552:	mov	r6, r2
      uint32_t size = storage_->GetSize(object_id);
    4554:	ldr	r3, [r0, #0]

      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
    4556:	add.w	r5, r8, #8192	; 0x2000
    {
    455a:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    455e:	ldr	r3, [r3, #40]	; 0x28
    {
    4560:	sub	sp, #20
    4562:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    4566:	blx	r3
      size -= offset;
    4568:	subs	r0, r0, r6
      if(NumBytes == 0xffffffff) NumBytes=size;
    456a:	cmp.w	r4, #4294967295
    456e:	it	eq
    4570:	moveq	r4, r0
      if (NumBytes<size) size=NumBytes;
    4572:	cmp	r4, r0
    4574:	mov	r3, r4
    4576:	it	cs
    4578:	movcs	r3, r0
    457a:	str	r3, [sp, #8]
      if (write_get_length_) {
    457c:	ldrb.w	r3, [r5, #1060]	; 0x424
    4580:	str	r3, [sp, #12]
    4582:	cbz	r3, 459c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x54>
        write_length_ += size;
    4584:	ldr.w	r3, [r5, #1064]	; 0x428
    4588:	ldr	r2, [sp, #8]
    458a:	add	r3, r2
    458c:	str.w	r3, [r5, #1064]	; 0x428
            len=0;
          }
        }
      }
      return size;
    }
    4590:	ldr	r0, [sp, #8]
    4592:	add	sp, #20
    4594:	vpop	{d8}
    4598:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    459c:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    45a0:	movs	r7, #12
    45a2:	add.w	fp, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    45a6:	add.w	sl, r8, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    45aa:	str.w	r3, [r5, #1056]	; 0x420
        while(pos<size)
    45ae:	ldr	r3, [sp, #8]
    45b0:	cmp	r3, r6
    45b2:	bls.n	4590 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x48>
          if(disk_pos==DISK_BUFFER_SIZE)
    45b4:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    45b8:	ldr	r2, [sp, #8]
          if(disk_pos==DISK_BUFFER_SIZE)
    45ba:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    45be:	sub.w	r9, r2, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    45c2:	bne.n	45e8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    45c4:	ldr.w	r0, [r8]
    45c8:	cmp.w	r9, #8192	; 0x2000
    45cc:	it	cc
    45ce:	movcc	r3, r9
    45d0:	vmov	r1, s16
    45d4:	ldr	r2, [r0, #0]
    45d6:	str	r3, [sp, #0]
    45d8:	ldr	r3, [r2, #48]	; 0x30
    45da:	mov	r2, r6
    45dc:	mov	r4, r3
    45de:	mov	r3, fp
    45e0:	blx	r4
            disk_pos=0;
    45e2:	ldr	r3, [sp, #12]
    45e4:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    45e8:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    45ec:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    45f0:	add.w	r0, sl, r7
    45f4:	cmp	r9, r3
    45f6:	it	cs
    45f8:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    45fa:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    45fe:	add	r1, fp
    4600:	cmp	r9, r3
    4602:	it	cs
    4604:	movcs	r9, r3
    4606:	mov	r2, r9
          len += to_copy;
    4608:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    460a:	bl	a218 <memcpy>
          disk_pos += to_copy;
    460e:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4612:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    4616:	add	r6, r9
          disk_pos += to_copy;
    4618:	add	r3, r9
    461a:	str.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    461e:	bne.n	45ae <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4620:	mov	r1, r7
    4622:	mov	r0, sl
            len=0;
    4624:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4626:	bl	3c96 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    462a:	b.n	45ae <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>

0000462c <MTPD::read(char*, unsigned long)>:
      printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    462c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4630:	mov	r8, r0
    4632:	mov	r5, r1
      static int index=0;
      if(!size) 
    4634:	mov	r4, r2
    4636:	ldr.w	fp, [pc, #84]	; 468c <MTPD::read(char*, unsigned long)+0x60>
    463a:	cbz	r2, 4682 <MTPD::read(char*, unsigned long)+0x56>

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    463c:	add.w	r9, r0, #32
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
          index=0;
    4640:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    4644:	ldr.w	r6, [fp]
    4648:	rsb	r7, r6, #512	; 0x200
    464c:	cmp	r7, r4
    464e:	it	cs
    4650:	movcs	r7, r4
        if (data) {
    4652:	cbz	r5, 4662 <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    4654:	mov	r0, r5
          data += to_copy;
    4656:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    4658:	mov	r2, r7
    465a:	add.w	r1, r9, r6
    465e:	bl	a218 <memcpy>
        index += to_copy;
    4662:	add	r6, r7
        size -= to_copy;
    4664:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    4666:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    466a:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    466e:	bne.n	467c <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    4670:	mov	r1, r9
    4672:	mov	r0, r8
    4674:	bl	3d8c <MTPD::pull_packet(unsigned char*)>
          index=0;
    4678:	str.w	sl, [fp]
      while (size) {
    467c:	cmp	r4, #0
    467e:	bne.n	4644 <MTPD::read(char*, unsigned long)+0x18>
    4680:	b.n	4686 <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    4682:	str.w	r2, [fp]
        }
      }
    }
    4686:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    468a:	nop
    468c:	.word	0x2001484c

00004690 <MTPD::ReadMTPHeader()>:
  {
    4690:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    4692:	movs	r2, #12
    4694:	add	r1, sp, #4
    4696:	bl	462c <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    469a:	ldrh.w	r3, [sp, #8]
    469e:	cmp	r3, #2
      return header.len - 12;
    46a0:	itet	eq
    46a2:	ldreq	r0, [sp, #4]
      return 0;
    46a4:	movne	r0, #0
      return header.len - 12;
    46a6:	subeq	r0, #12
  }
    46a8:	add	sp, #20
    46aa:	ldr.w	pc, [sp], #4

000046ae <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    46ae:	push	{r0, r1, r2, lr}
    46b0:	movs	r2, #1
    46b2:	add.w	r1, sp, #7
    46b6:	bl	462c <MTPD::read(char*, unsigned long)>
    46ba:	ldrb.w	r0, [sp, #7]
    46be:	add	sp, #12
    46c0:	ldr.w	pc, [sp], #4

000046c4 <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    46c4:	push	{r0, r1, r2, lr}
    46c6:	movs	r2, #2
    46c8:	add.w	r1, sp, #6
    46cc:	bl	462c <MTPD::read(char*, unsigned long)>
    46d0:	ldrh.w	r0, [sp, #6]
    46d4:	add	sp, #12
    46d6:	ldr.w	pc, [sp], #4

000046da <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    46da:	push	{r0, r1, r2, lr}
    46dc:	movs	r2, #4
    46de:	add.w	r1, sp, r2
    46e2:	bl	462c <MTPD::read(char*, unsigned long)>
    46e6:	ldr	r0, [sp, #4]
    46e8:	add	sp, #12
    46ea:	ldr.w	pc, [sp], #4

000046ee <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    46ee:	push	{r4, r5, r6, lr}
    46f0:	mov	r5, r1
    46f2:	mov	r6, r0
    int len = read8();
    46f4:	bl	46ae <MTPD::read8()>
    if (!buffer) {
    46f8:	cbz	r5, 4702 <MTPD::readstring(char*)+0x14>
    46fa:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    46fc:	cmp	r5, r4
    46fe:	bne.n	4712 <MTPD::readstring(char*)+0x24>
  }
    4700:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    4702:	sxth	r2, r0
    4704:	mov	r1, r5
    4706:	mov	r0, r6
    4708:	lsls	r2, r2, #1
  }
    470a:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    470e:	b.w	462c <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    4712:	mov	r0, r6
    4714:	bl	46c4 <MTPD::read16()>
    4718:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    471c:	b.n	46fc <MTPD::readstring(char*)+0xe>

0000471e <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    471e:	push	{r4, r5, lr}
    4720:	mov	r4, r0
    4722:	sub	sp, #260	; 0x104
    4724:	mov	r5, r1
      //printContainer(); 
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
    4726:	bl	4690 <MTPD::ReadMTPHeader()>
        readstring(filename);
    472a:	mov	r1, sp
    472c:	mov	r0, r4
    472e:	bl	46ee <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    4732:	ldr	r0, [r4, #0]
    4734:	mov	r2, sp
    4736:	mov	r1, r5
    4738:	ldr	r3, [r0, #0]
    473a:	ldr	r3, [r3, #72]	; 0x48
    473c:	blx	r3
      }
      else
        return 0x2005;
    }
    473e:	movw	r2, #8193	; 0x2001
    4742:	movw	r3, #8197	; 0x2005
    4746:	cmp	r0, #0
    4748:	ite	ne
    474a:	movne	r0, r2
    474c:	moveq	r0, r3
    474e:	add	sp, #260	; 0x104
    4750:	pop	{r4, r5, pc}
	...

00004754 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4754:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4758:	mov	r4, r0
    475a:	sub	sp, #268	; 0x10c
    475c:	mov	r6, r1
      pull_packet(rx_data_buffer);
    475e:	add.w	r1, r0, #32
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4762:	mov	r7, r2
      pull_packet(rx_data_buffer);
    4764:	bl	3d8c <MTPD::pull_packet(unsigned char*)>
        index=0;
    4768:	movs	r2, #0
    476a:	ldr	r3, [pc, #196]	; (4830 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xdc>)
      int len=ReadMTPHeader();
    476c:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    476e:	add.w	r9, sp, #8
        index=0;
    4772:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    4774:	bl	4690 <MTPD::ReadMTPHeader()>
    4778:	mov	r5, r0
      read32(); len -=4; // storage
    477a:	mov	r0, r4
    477c:	bl	46da <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    4780:	mov	r0, r4
    4782:	bl	46c4 <MTPD::read16()>
    4786:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    478a:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    478c:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    478e:	subs	r3, r0, r3
      read16(); len -=2; // protection
    4790:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    4792:	rsbs	r8, r3, #0
    4796:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    479a:	bl	46c4 <MTPD::read16()>
      read32(); len -=4; // size
    479e:	mov	r0, r4
    47a0:	bl	46da <MTPD::read32()>
      read16(); len -=2; // thumb format
    47a4:	mov	r0, r4
    47a6:	bl	46c4 <MTPD::read16()>
      read32(); len -=4; // thumb size
    47aa:	mov	r0, r4
    47ac:	bl	46da <MTPD::read32()>
      read32(); len -=4; // thumb width
    47b0:	mov	r0, r4
    47b2:	bl	46da <MTPD::read32()>
      read32(); len -=4; // thumb height
    47b6:	mov	r0, r4
    47b8:	bl	46da <MTPD::read32()>
      read32(); len -=4; // pix width
    47bc:	mov	r0, r4
    47be:	bl	46da <MTPD::read32()>
      read32(); len -=4; // pix height
    47c2:	mov	r0, r4
    47c4:	bl	46da <MTPD::read32()>
      read32(); len -=4; // bit depth
    47c8:	mov	r0, r4
    47ca:	bl	46da <MTPD::read32()>
      read32(); len -=4; // parent
    47ce:	mov	r0, r4
    47d0:	bl	46da <MTPD::read32()>
      read16(); len -=2; // association type
    47d4:	mov	r0, r4
    47d6:	bl	46c4 <MTPD::read16()>
      read32(); len -=4; // association description
    47da:	mov	r0, r4
    47dc:	bl	46da <MTPD::read32()>
      read32(); len -=4; // sequence number
    47e0:	mov	r0, r4
    47e2:	bl	46da <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    47e6:	mov	r1, r9
    47e8:	mov	r0, r4
    47ea:	bl	46ee <MTPD::readstring(char*)>
    47ee:	mov	r0, r9
    47f0:	bl	ed90 <strlen>
    47f4:	adds	r0, #1
    47f6:	sub.w	r5, r5, r0, lsl #1
    47fa:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    47fc:	cmp	r5, #3
    47fe:	bgt.n	481a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc6>
      while(len) {read8(); len--;}
    4800:	cbnz	r5, 4824 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd0>
      return storage_->Create(store, parent, dir, filename);
    4802:	ldr	r0, [r4, #0]
    4804:	mov	r2, r7
    4806:	mov	r1, r6
    4808:	ldr	r3, [r0, #0]
    480a:	str.w	r9, [sp]
    480e:	ldr	r4, [r3, #44]	; 0x2c
    4810:	mov	r3, r8
    4812:	blx	r4
    }
    4814:	add	sp, #268	; 0x10c
    4816:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    481a:	mov	r0, r4
    481c:	subs	r5, #4
    481e:	bl	46da <MTPD::read32()>
    4822:	b.n	47fc <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    4824:	mov	r0, r4
    4826:	subs	r5, #1
    4828:	bl	46ae <MTPD::read8()>
    482c:	b.n	4800 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    482e:	nop
    4830:	.word	0x2001484c

00004834 <MTPD::SendObject()>:
    { 
    4834:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4838:	add.w	r9, r0, #32
    { 
    483c:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    483e:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    4842:	mov	r1, r9
      disk_pos=0;
    4844:	add.w	r6, r4, #8192	; 0x2000
      pull_packet(rx_data_buffer);
    4848:	bl	3d8c <MTPD::pull_packet(unsigned char*)>
        index=0;
    484c:	ldr	r3, [pc, #212]	; (4924 <MTPD::SendObject()+0xf0>)
    484e:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    4850:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4852:	add.w	fp, r4, #1056	; 0x420
        index=0;
    4856:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4858:	bl	4690 <MTPD::ReadMTPHeader()>
      disk_pos=0;
    485c:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    485e:	mov	r7, r0
      disk_pos=0;
    4860:	str.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    4864:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4866:	ldr.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    486a:	bgt.n	4880 <MTPD::SendObject()+0x4c>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    486c:	ldr	r0, [r4, #0]
    486e:	ldr	r2, [r0, #0]
      if(disk_pos)
    4870:	cmp	r3, #0
    4872:	bne.n	490e <MTPD::SendObject()+0xda>
      storage_->close();
    4874:	ldr	r0, [r4, #0]
    4876:	ldr	r3, [r0, #0]
    4878:	ldr	r3, [r3, #56]	; 0x38
    487a:	blx	r3
      return true;
    487c:	movs	r0, #1
    487e:	b.n	48c8 <MTPD::SendObject()+0x94>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    4880:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4884:	rsb	r5, r3, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4888:	add.w	r0, fp, r3
    488c:	add.w	r1, r9, sl
    4890:	cmp	r8, r7
    4892:	it	cs
    4894:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4896:	cmp	r5, r8
    4898:	it	cs
    489a:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    489c:	mov	r2, r5
    489e:	bl	a218 <memcpy>
        disk_pos += to_copy;
    48a2:	ldr.w	r2, [r6, #1056]	; 0x420
        len -= to_copy;
    48a6:	subs	r3, r7, r5
        disk_pos += to_copy;
    48a8:	add	r2, r5
        len -= to_copy;
    48aa:	str	r3, [sp, #4]
        if(disk_pos==DISK_BUFFER_SIZE)
    48ac:	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    48b0:	str.w	r2, [r6, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    48b4:	bne.n	48fa <MTPD::SendObject()+0xc6>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    48b6:	ldr	r0, [r4, #0]
    48b8:	mov	r1, fp
    48ba:	ldr	r3, [r0, #0]
    48bc:	ldr	r3, [r3, #52]	; 0x34
    48be:	blx	r3
    48c0:	cmp.w	r0, #8192	; 0x2000
    48c4:	bcs.n	48ce <MTPD::SendObject()+0x9a>
    48c6:	movs	r0, #0
    }
    48c8:	add	sp, #12
    48ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    48ce:	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    48d0:	subs.w	r2, r8, r5
          disk_pos =0;
    48d4:	str.w	r3, [r6, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    48d8:	beq.n	48fa <MTPD::SendObject()+0xc6>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    48da:	add.w	r1, sl, r5
    48de:	mov	r0, fp
    48e0:	str	r2, [sp, #4]
    48e2:	add	r1, r9
    48e4:	bl	a218 <memcpy>
            disk_pos += bytes;
    48e8:	ldr.w	r3, [r6, #1056]	; 0x420
    48ec:	ldr	r2, [sp, #4]
    48ee:	add	r3, r2
    48f0:	str.w	r3, [r6, #1056]	; 0x420
            len -= bytes;
    48f4:	sub.w	r3, r7, r8
    48f8:	str	r3, [sp, #4]
        if(len>0)  // we have still data to be transfered
    48fa:	ldr	r3, [sp, #4]
    48fc:	cbz	r3, 490a <MTPD::SendObject()+0xd6>
          index=0;
    48fe:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    4902:	mov	r1, r9
    4904:	mov	r0, r4
    4906:	bl	3d8c <MTPD::pull_packet(unsigned char*)>
          index=0;
    490a:	ldr	r7, [sp, #4]
    490c:	b.n	4864 <MTPD::SendObject()+0x30>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    490e:	ldr	r5, [r2, #52]	; 0x34
    4910:	add.w	r1, r4, #1056	; 0x420
    4914:	mov	r2, r3
    4916:	blx	r5
    4918:	ldr.w	r3, [r6, #1056]	; 0x420
    491c:	cmp	r0, r3
    491e:	bcs.n	4874 <MTPD::SendObject()+0x40>
    4920:	b.n	48c6 <MTPD::SendObject()+0x92>
    4922:	nop
    4924:	.word	0x2001484c

00004928 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4928:	push	{r4, r5, r6, lr}
    492a:	mov	r5, r1
    492c:	add.w	r1, r0, #32
    4930:	mov	r6, r2
    4932:	mov	r4, r0
    4934:	bl	3d8c <MTPD::pull_packet(unsigned char*)>
        index=0;
    4938:	ldr	r3, [pc, #28]	; (4958 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    493a:	movs	r2, #0
    493c:	str	r2, [r3, #0]
      if(p2==0xDC07)
    493e:	movw	r3, #56327	; 0xdc07
    4942:	cmp	r6, r3
    4944:	bne.n	4952 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    4946:	mov	r1, r5
    4948:	mov	r0, r4
    }
    494a:	ldmia.w	sp!, {r4, r5, r6, lr}
    494e:	b.w	471e <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    4952:	movw	r0, #8197	; 0x2005
    4956:	pop	{r4, r5, r6, pc}
    4958:	.word	0x2001484c

0000495c <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    495c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4960:	sub	sp, #60	; 0x3c
    4962:	mov	r4, r0
    4964:	bl	c240 <usb_mtp_available>
    4968:	cmp	r0, #0
    496a:	beq.w	4dc4 <MTPD::loop()+0x468>
      if(fetch_packet(rx_data_buffer))
    496e:	add.w	fp, r4, #32
      return usb_mtp_recv(data_buffer,60);
    4972:	movs	r1, #60	; 0x3c
    4974:	mov	r0, fp
    4976:	bl	c1ac <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    497a:	cmp	r0, #0
    497c:	beq.w	4dc4 <MTPD::loop()+0x468>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4980:	ldr	r3, [r4, #40]	; 0x28
    4982:	ldr	r1, [pc, #756]	; (4c78 <MTPD::loop()+0x31c>)
    4984:	str	r3, [sp, #4]
    4986:	ldrh	r3, [r4, #36]	; 0x24
    4988:	ldr	r0, [pc, #752]	; (4c7c <MTPD::loop()+0x320>)
    498a:	str	r3, [sp, #0]
    498c:	ldr	r3, [r4, #32]
    498e:	ldrh	r2, [r4, #38]	; 0x26
    4990:	bl	c71c <Print::printf(char const*, ...)>
    4994:	ldr	r3, [r4, #32]
    4996:	cmp	r3, #12
    4998:	bls.n	49a4 <MTPD::loop()+0x48>
    499a:	ldr	r2, [r4, #44]	; 0x2c
    499c:	ldr	r1, [pc, #736]	; (4c80 <MTPD::loop()+0x324>)
    499e:	ldr	r0, [pc, #732]	; (4c7c <MTPD::loop()+0x320>)
    49a0:	bl	c71c <Print::printf(char const*, ...)>
    49a4:	ldr	r3, [r4, #32]
    49a6:	cmp	r3, #16
    49a8:	bls.n	49b4 <MTPD::loop()+0x58>
    49aa:	ldr	r2, [r4, #48]	; 0x30
    49ac:	ldr	r1, [pc, #720]	; (4c80 <MTPD::loop()+0x324>)
    49ae:	ldr	r0, [pc, #716]	; (4c7c <MTPD::loop()+0x320>)
    49b0:	bl	c71c <Print::printf(char const*, ...)>
    49b4:	ldr	r3, [r4, #32]
    49b6:	cmp	r3, #20
    49b8:	bls.n	49c4 <MTPD::loop()+0x68>
    49ba:	ldr	r2, [r4, #52]	; 0x34
    49bc:	ldr	r1, [pc, #704]	; (4c80 <MTPD::loop()+0x324>)
    49be:	ldr	r0, [pc, #700]	; (4c7c <MTPD::loop()+0x320>)
    49c0:	bl	c71c <Print::printf(char const*, ...)>
    49c4:	ldr	r1, [pc, #700]	; (4c84 <MTPD::loop()+0x328>)
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    49c6:	add.w	r5, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    49ca:	ldr	r0, [pc, #688]	; (4c7c <MTPD::loop()+0x320>)

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    49cc:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    49d0:	bl	c71c <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    49d4:	ldr	r3, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
    49d6:	ldr	r1, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
    49d8:	ldrh	r0, [r4, #36]	; 0x24
        int p1 = CONTAINER->params[0];
    49da:	mov	r6, r3
        int op = CONTAINER->op;
    49dc:	ldrh	r2, [r4, #38]	; 0x26
        int len= CONTAINER->len;
    49de:	ldr.w	r9, [r4, #32]
        int p1 = CONTAINER->params[0];
    49e2:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    49e4:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    49e6:	ldrd	r8, r3, [r4, #48]	; 0x30
        TID=id;
    49ea:	str.w	r1, [r5, #1068]	; 0x42c
        if(typ==2) return_code=0x2005; // we should only get cmds
    49ee:	movw	r1, #8197	; 0x2005
    49f2:	cmp	r0, #2
    49f4:	it	eq
    49f6:	moveq	r7, r1

        switch (op)
    49f8:	movw	r0, #4123	; 0x101b
    49fc:	cmp	r2, r0
    49fe:	bhi.n	4a88 <MTPD::loop()+0x12c>
    4a00:	cmp.w	r2, #4096	; 0x1000
    4a04:	bhi.n	4a0c <MTPD::loop()+0xb0>
    4a06:	movw	r7, #8197	; 0x2005
    4a0a:	b.n	4b06 <MTPD::loop()+0x1aa>
    4a0c:	sub.w	r2, r2, #4096	; 0x1000
    4a10:	subs	r2, #1
    4a12:	cmp	r2, #26
    4a14:	bhi.n	4a06 <MTPD::loop()+0xaa>
    4a16:	add	r1, pc, #4	; (adr r1, 4a1c <MTPD::loop()+0xc0>)
    4a18:	ldr.w	pc, [r1, r2, lsl #2]
    4a1c:	.word	0x00004aab
    4a20:	.word	0x00004aff
    4a24:	.word	0x00004dbf
    4a28:	.word	0x00004b35
    4a2c:	.word	0x00004b79
    4a30:	.word	0x00004bc3
    4a34:	.word	0x00004bd9
    4a38:	.word	0x00004c2f
    4a3c:	.word	0x00004c89
    4a40:	.word	0x00004a07
    4a44:	.word	0x00004cd3
    4a48:	.word	0x00004cf1
    4a4c:	.word	0x00004d05
    4a50:	.word	0x00004a07
    4a54:	.word	0x00004a07
    4a58:	.word	0x00004a07
    4a5c:	.word	0x00004a07
    4a60:	.word	0x00004a07
    4a64:	.word	0x00004a07
    4a68:	.word	0x00004d1b
    4a6c:	.word	0x00004d65
    4a70:	.word	0x00004a07
    4a74:	.word	0x00004a07
    4a78:	.word	0x00004a07
    4a7c:	.word	0x00004daf
    4a80:	.word	0x00004dcb
    4a84:	.word	0x00004df5
    4a88:	add.w	r3, r2, #26496	; 0x6780
    4a8c:	adds	r3, #127	; 0x7f
    4a8e:	uxth	r3, r3
    4a90:	cmp	r3, #3
    4a92:	bhi.n	4a06 <MTPD::loop()+0xaa>
    4a94:	sub.w	r2, r2, #38912	; 0x9800
    4a98:	subs	r2, #2
    4a9a:	cmp	r2, #2
    4a9c:	bhi.w	4e48 <MTPD::loop()+0x4ec>
    4aa0:	tbh	[pc, r2, lsl #1]
    4aa4:	.word	0x021e01f7
    4aa8:	.short	0x0245
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    4aaa:	movs	r6, #0
    4aac:	movs	r3, #1
    4aae:	mov	r0, r4
    4ab0:	strb.w	r3, [r5, #1060]	; 0x424
    4ab4:	str.w	r6, [r5, #1064]	; 0x428
    4ab8:	bl	3e98 <MTPD::WriteDescriptor()>
    4abc:	ldr.w	r3, [r5, #1064]	; 0x428
    4ac0:	mov	r0, r4
    4ac2:	movs	r2, #12
    4ac4:	adds	r3, #12
    4ac6:	add	r1, sp, #24
    4ac8:	str	r3, [sp, #24]
    4aca:	movs	r3, #2
    4acc:	strh.w	r3, [sp, #28]
    4ad0:	ldrh	r3, [r4, #38]	; 0x26
    4ad2:	strh.w	r3, [sp, #30]
    4ad6:	ldr	r3, [r4, #40]	; 0x28
    4ad8:	str.w	r6, [r5, #1064]	; 0x428
    4adc:	strb.w	r6, [r5, #1060]	; 0x424
    4ae0:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4ae2:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    4ae6:	mov	r0, r4
    4ae8:	bl	3e98 <MTPD::WriteDescriptor()>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    4aec:	ldr	r1, [sp, #24]
    4aee:	ubfx	r1, r1, #0, #9
    4af2:	cbz	r1, 4b06 <MTPD::loop()+0x1aa>
    4af4:	add.w	r0, r4, #544	; 0x220
    4af8:	bl	3c96 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    4afc:	b.n	4b06 <MTPD::loop()+0x1aa>
            openSession(p1);
    4afe:	mov	r1, r6
    4b00:	mov	r0, r4
    4b02:	bl	3d7c <MTPD::openSession(unsigned long)>
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    4b06:	movs	r3, #3
            CONTAINER->len=len;
    4b08:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
    4b0c:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    4b0e:	mov	r1, fp
            CONTAINER->type=3;
    4b10:	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4b12:	mov	r2, r9
            CONTAINER->transaction_id=id;
    4b14:	ldr	r3, [sp, #16]
    4b16:	str	r3, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
    4b18:	ldr	r3, [sp, #12]
    4b1a:	str	r3, [r4, #44]	; 0x2c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4b1c:	add.w	r4, r4, #544	; 0x220
    4b20:	mov	r0, r4
    4b22:	bl	a218 <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4b26:	mov	r1, r9
    4b28:	mov	r0, r4
        }
      }
    }
    4b2a:	add	sp, #60	; 0x3c
    4b2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4b30:	b.w	3c96 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    4b34:	movs	r6, #0
    4b36:	movs	r3, #1
    4b38:	mov	r0, r4
    4b3a:	strb.w	r3, [r5, #1060]	; 0x424
    4b3e:	str.w	r6, [r5, #1064]	; 0x428
    4b42:	bl	3fb0 <MTPD::WriteStorageIDs()>
    4b46:	ldr.w	r3, [r5, #1064]	; 0x428
    4b4a:	mov	r0, r4
    4b4c:	movs	r2, #12
    4b4e:	adds	r3, #12
    4b50:	add	r1, sp, #24
    4b52:	str	r3, [sp, #24]
    4b54:	movs	r3, #2
    4b56:	strh.w	r3, [sp, #28]
    4b5a:	ldrh	r3, [r4, #38]	; 0x26
    4b5c:	strh.w	r3, [sp, #30]
    4b60:	ldr	r3, [r4, #40]	; 0x28
    4b62:	str.w	r6, [r5, #1064]	; 0x428
    4b66:	strb.w	r6, [r5, #1060]	; 0x424
    4b6a:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4b6c:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    4b70:	mov	r0, r4
    4b72:	bl	3fb0 <MTPD::WriteStorageIDs()>
    4b76:	b.n	4aec <MTPD::loop()+0x190>
            TRANSMIT(GetStorageInfo(p1));
    4b78:	mov.w	r8, #0
    4b7c:	movs	r3, #1
    4b7e:	mov	r1, r6
    4b80:	mov	r0, r4
    4b82:	strb.w	r3, [r5, #1060]	; 0x424
    4b86:	str.w	r8, [r5, #1064]	; 0x428
    4b8a:	bl	4214 <MTPD::GetStorageInfo(unsigned long)>
    4b8e:	ldr.w	r3, [r5, #1064]	; 0x428
    4b92:	add	r1, sp, #24
    4b94:	mov	r0, r4
    4b96:	adds	r3, #12
    4b98:	movs	r2, #12
    4b9a:	str	r3, [sp, #24]
    4b9c:	movs	r3, #2
    4b9e:	strh.w	r3, [sp, #28]
    4ba2:	ldrh	r3, [r4, #38]	; 0x26
    4ba4:	strh.w	r3, [sp, #30]
    4ba8:	ldr	r3, [r4, #40]	; 0x28
    4baa:	str.w	r8, [r5, #1064]	; 0x428
    4bae:	strb.w	r8, [r5, #1060]	; 0x424
    4bb2:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4bb4:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    4bb8:	mov	r1, r6
    4bba:	mov	r0, r4
    4bbc:	bl	4214 <MTPD::GetStorageInfo(unsigned long)>
    4bc0:	b.n	4aec <MTPD::loop()+0x190>
            if (p2) 
    4bc2:	cmp.w	r8, #0
    4bc6:	bne.w	4f3c <MTPD::loop()+0x5e0>
                p1 = GetNumObjects(p1, p3);
    4bca:	mov	r2, r3
    4bcc:	mov	r1, r6
    4bce:	mov	r0, r4
    4bd0:	bl	3d24 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    4bd4:	str	r0, [sp, #12]
    4bd6:	b.n	4b06 <MTPD::loop()+0x1aa>
            if (p2) 
    4bd8:	cmp.w	r8, #0
    4bdc:	bne.w	4f3c <MTPD::loop()+0x5e0>
              TRANSMIT(GetObjectHandles(p1, p3));
    4be0:	movs	r2, #1
    4be2:	mov	r1, r6
    4be4:	mov	r0, r4
    4be6:	str.w	r8, [r5, #1064]	; 0x428
    4bea:	strb.w	r2, [r5, #1060]	; 0x424
    4bee:	mov	r2, r3
    4bf0:	str	r3, [sp, #20]
    4bf2:	bl	3fda <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4bf6:	ldr.w	r2, [r5, #1064]	; 0x428
    4bfa:	add	r1, sp, #24
    4bfc:	mov	r0, r4
    4bfe:	adds	r2, #12
    4c00:	str	r2, [sp, #24]
    4c02:	movs	r2, #2
    4c04:	strh.w	r2, [sp, #28]
    4c08:	ldrh	r2, [r4, #38]	; 0x26
    4c0a:	strh.w	r2, [sp, #30]
    4c0e:	ldr	r2, [r4, #40]	; 0x28
    4c10:	str.w	r8, [r5, #1064]	; 0x428
    4c14:	str	r2, [sp, #32]
    4c16:	movs	r2, #12
    4c18:	strb.w	r8, [r5, #1060]	; 0x424
    { if (write_get_length_) 
    4c1c:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    4c20:	ldr	r3, [sp, #20]
    4c22:	mov	r1, r6
    4c24:	mov	r0, r4
    4c26:	mov	r2, r3
    4c28:	bl	3fda <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4c2c:	b.n	4aec <MTPD::loop()+0x190>
            TRANSMIT(GetObjectInfo(p1));
    4c2e:	mov.w	r8, #0
    4c32:	movs	r3, #1
    4c34:	mov	r1, r6
    4c36:	mov	r0, r4
    4c38:	strb.w	r3, [r5, #1060]	; 0x424
    4c3c:	str.w	r8, [r5, #1064]	; 0x428
    4c40:	bl	402c <MTPD::GetObjectInfo(unsigned long)>
    4c44:	ldr.w	r3, [r5, #1064]	; 0x428
    4c48:	add	r1, sp, #24
    4c4a:	mov	r0, r4
    4c4c:	adds	r3, #12
    4c4e:	movs	r2, #12
    4c50:	str	r3, [sp, #24]
    4c52:	movs	r3, #2
    4c54:	strh.w	r3, [sp, #28]
    4c58:	ldrh	r3, [r4, #38]	; 0x26
    4c5a:	strh.w	r3, [sp, #30]
    4c5e:	ldr	r3, [r4, #40]	; 0x28
    4c60:	str.w	r8, [r5, #1064]	; 0x428
    4c64:	strb.w	r8, [r5, #1060]	; 0x424
    4c68:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4c6a:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    4c6e:	mov	r1, r6
    4c70:	mov	r0, r4
    4c72:	bl	402c <MTPD::GetObjectInfo(unsigned long)>
    4c76:	b.n	4aec <MTPD::loop()+0x190>
    4c78:	.word	0x20001190
    4c7c:	.word	0x20001d30
    4c80:	.word	0x2000119e
    4c84:	.word	0x20000dba
            TRANSMIT(GetObject(p1));
    4c88:	mov.w	r8, #0
    4c8c:	movs	r3, #1
    4c8e:	mov	r1, r6
    4c90:	mov	r0, r4
    4c92:	strb.w	r3, [r5, #1060]	; 0x424
    4c96:	str.w	r8, [r5, #1064]	; 0x428
    4c9a:	bl	4462 <MTPD::GetObject(unsigned long)>
    4c9e:	ldr.w	r3, [r5, #1064]	; 0x428
    4ca2:	add	r1, sp, #24
    4ca4:	mov	r0, r4
    4ca6:	adds	r3, #12
    4ca8:	movs	r2, #12
    4caa:	str	r3, [sp, #24]
    4cac:	movs	r3, #2
    4cae:	strh.w	r3, [sp, #28]
    4cb2:	ldrh	r3, [r4, #38]	; 0x26
    4cb4:	strh.w	r3, [sp, #30]
    4cb8:	ldr	r3, [r4, #40]	; 0x28
    4cba:	str.w	r8, [r5, #1064]	; 0x428
    4cbe:	strb.w	r8, [r5, #1060]	; 0x424
    4cc2:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4cc4:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    4cc8:	mov	r1, r6
    4cca:	mov	r0, r4
    4ccc:	bl	4462 <MTPD::GetObject(unsigned long)>
    4cd0:	b.n	4aec <MTPD::loop()+0x190>
              if (p2) {
    4cd2:	cmp.w	r8, #0
    4cd6:	bne.w	4f3c <MTPD::loop()+0x5e0>
                if (!storage_->DeleteObject(p1)) {
    4cda:	ldr	r0, [r4, #0]
    4cdc:	mov	r1, r6
    4cde:	ldr	r3, [r0, #0]
    4ce0:	ldr	r3, [r3, #60]	; 0x3c
    4ce2:	blx	r3
                  return_code = 0x2012; // partial deletion
    4ce4:	movw	r3, #8210	; 0x2012
    4ce8:	cmp	r0, #0
    4cea:	it	eq
    4cec:	moveq	r7, r3
    4cee:	b.n	4b06 <MTPD::loop()+0x1aa>
              p3 = SendObjectInfo(p1, // storage
    4cf0:	mov	r2, r8
    4cf2:	mov	r1, r6
    4cf4:	mov	r0, r4
              len = 12 + 3 * 4;
    4cf6:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    4cfa:	bl	4754 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    4cfe:	strd	r8, r0, [r4, #48]	; 0x30
              break;
    4d02:	b.n	4b06 <MTPD::loop()+0x1aa>
              if(!SendObject()) return_code = 0x2005;
    4d04:	mov	r0, r4
    4d06:	mov.w	r9, #12
    4d0a:	bl	4834 <MTPD::SendObject()>
    4d0e:	movw	r3, #8197	; 0x2005
    4d12:	cmp	r0, #0
    4d14:	it	eq
    4d16:	moveq	r7, r3
    4d18:	b.n	4b06 <MTPD::loop()+0x1aa>
              TRANSMIT(GetDevicePropDesc(p1));
    4d1a:	mov.w	r8, #0
    4d1e:	movs	r3, #1
    4d20:	mov	r1, r6
    4d22:	mov	r0, r4
    4d24:	strb.w	r3, [r5, #1060]	; 0x424
    4d28:	str.w	r8, [r5, #1064]	; 0x428
    4d2c:	bl	3e40 <MTPD::GetDevicePropDesc(unsigned long)>
    4d30:	ldr.w	r3, [r5, #1064]	; 0x428
    4d34:	add	r1, sp, #24
    4d36:	mov	r0, r4
    4d38:	adds	r3, #12
    4d3a:	movs	r2, #12
    4d3c:	str	r3, [sp, #24]
    4d3e:	movs	r3, #2
    4d40:	strh.w	r3, [sp, #28]
    4d44:	ldrh	r3, [r4, #38]	; 0x26
    4d46:	strh.w	r3, [sp, #30]
    4d4a:	ldr	r3, [r4, #40]	; 0x28
    4d4c:	str.w	r8, [r5, #1064]	; 0x428
    4d50:	strb.w	r8, [r5, #1060]	; 0x424
    4d54:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4d56:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    4d5a:	mov	r1, r6
    4d5c:	mov	r0, r4
    4d5e:	bl	3e40 <MTPD::GetDevicePropDesc(unsigned long)>
    4d62:	b.n	4aec <MTPD::loop()+0x190>
              TRANSMIT(GetDevicePropValue(p1));
    4d64:	mov.w	r8, #0
    4d68:	movs	r3, #1
    4d6a:	mov	r1, r6
    4d6c:	mov	r0, r4
    4d6e:	strb.w	r3, [r5, #1060]	; 0x424
    4d72:	str.w	r8, [r5, #1064]	; 0x428
    4d76:	bl	3e2c <MTPD::GetDevicePropValue(unsigned long)>
    4d7a:	ldr.w	r3, [r5, #1064]	; 0x428
    4d7e:	add	r1, sp, #24
    4d80:	mov	r0, r4
    4d82:	adds	r3, #12
    4d84:	movs	r2, #12
    4d86:	str	r3, [sp, #24]
    4d88:	movs	r3, #2
    4d8a:	strh.w	r3, [sp, #28]
    4d8e:	ldrh	r3, [r4, #38]	; 0x26
    4d90:	strh.w	r3, [sp, #30]
    4d94:	ldr	r3, [r4, #40]	; 0x28
    4d96:	str.w	r8, [r5, #1064]	; 0x428
    4d9a:	strb.w	r8, [r5, #1060]	; 0x424
    4d9e:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4da0:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    4da4:	mov	r1, r6
    4da6:	mov	r0, r4
    4da8:	bl	3e2c <MTPD::GetDevicePropValue(unsigned long)>
    4dac:	b.n	4aec <MTPD::loop()+0x190>
              return_code = moveObject(p1,p2,p3);
    4dae:	mov	r2, r8
    4db0:	mov	r1, r6
    4db2:	mov	r0, r4
              len = 12;
    4db4:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    4db8:	bl	3d4a <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    4dbc:	mov	r7, r0
        if(return_code)
    4dbe:	cmp	r7, #0
    4dc0:	bne.w	4b06 <MTPD::loop()+0x1aa>
    }
    4dc4:	add	sp, #60	; 0x3c
    4dc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    4dca:	mov	r2, r8
    4dcc:	mov	r1, r6
    4dce:	mov	r0, r4
              if(!return_code) 
    4dd0:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    4dd4:	bl	3d68 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    4dd8:	cmp	r0, #0
    4dda:	itete	eq
    4ddc:	moveq	r3, r6
    4dde:	movne	r3, r0
    4de0:	moveq.w	r9, #12
    4de4:	movne.w	r9, #16
    4de8:	str	r3, [sp, #12]
    4dea:	movw	r3, #8193	; 0x2001
    4dee:	it	ne
    4df0:	movne	r7, r3
    4df2:	b.n	4b06 <MTPD::loop()+0x1aa>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4df4:	mov.w	sl, #0
    4df8:	movs	r2, #1
    4dfa:	mov	r1, r6
    4dfc:	mov	r0, r4
    4dfe:	strb.w	r2, [r5, #1060]	; 0x424
    4e02:	mov	r2, r8
    4e04:	str.w	sl, [r5, #1064]	; 0x428
    4e08:	str	r3, [sp, #20]
    4e0a:	bl	4548 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4e0e:	ldr.w	r2, [r5, #1064]	; 0x428
    4e12:	add	r1, sp, #24
    4e14:	adds	r2, #12
    4e16:	str	r2, [sp, #24]
    4e18:	movs	r2, #2
    4e1a:	strh.w	r2, [sp, #28]
    4e1e:	ldrh	r2, [r4, #38]	; 0x26
    4e20:	strh.w	r2, [sp, #30]
    4e24:	ldr	r2, [r4, #40]	; 0x28
    4e26:	str.w	sl, [r5, #1064]	; 0x428
    4e2a:	strb.w	sl, [r5, #1060]	; 0x424
    4e2e:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    4e32:	mov	r0, r4
    4e34:	movs	r2, #32
    4e36:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4e3a:	ldr	r3, [sp, #20]
    4e3c:	mov	r2, r8
    4e3e:	mov	r1, r6
    4e40:	mov	r0, r4
    4e42:	bl	4548 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4e46:	b.n	4aec <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropsSupported(p1));
    4e48:	mov.w	r8, #0
    4e4c:	movs	r3, #1
    4e4e:	mov	r1, r6
    4e50:	mov	r0, r4
    4e52:	strb.w	r3, [r5, #1060]	; 0x424
    4e56:	str.w	r8, [r5, #1064]	; 0x428
    4e5a:	bl	410c <MTPD::getObjectPropsSupported(unsigned long)>
    4e5e:	ldr.w	r3, [r5, #1064]	; 0x428
    4e62:	add	r1, sp, #24
    4e64:	mov	r0, r4
    4e66:	adds	r3, #12
    4e68:	movs	r2, #12
    4e6a:	str	r3, [sp, #24]
    4e6c:	movs	r3, #2
    4e6e:	strh.w	r3, [sp, #28]
    4e72:	ldrh	r3, [r4, #38]	; 0x26
    4e74:	strh.w	r3, [sp, #30]
    4e78:	ldr	r3, [r4, #40]	; 0x28
    4e7a:	str.w	r8, [r5, #1064]	; 0x428
    4e7e:	strb.w	r8, [r5, #1060]	; 0x424
    4e82:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4e84:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    4e88:	mov	r1, r6
    4e8a:	mov	r0, r4
    4e8c:	bl	410c <MTPD::getObjectPropsSupported(unsigned long)>
    4e90:	b.n	4aec <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4e92:	mov.w	sl, #0
    4e96:	movs	r3, #1
    4e98:	mov	r2, r8
    4e9a:	mov	r1, r6
    4e9c:	mov	r0, r4
    4e9e:	strb.w	r3, [r5, #1060]	; 0x424
    4ea2:	str.w	sl, [r5, #1064]	; 0x428
    4ea6:	bl	4320 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4eaa:	ldr.w	r3, [r5, #1064]	; 0x428
    4eae:	add	r1, sp, #24
    4eb0:	mov	r0, r4
    4eb2:	adds	r3, #12
    4eb4:	movs	r2, #12
    4eb6:	str	r3, [sp, #24]
    4eb8:	movs	r3, #2
    4eba:	strh.w	r3, [sp, #28]
    4ebe:	ldrh	r3, [r4, #38]	; 0x26
    4ec0:	strh.w	r3, [sp, #30]
    4ec4:	ldr	r3, [r4, #40]	; 0x28
    4ec6:	str.w	sl, [r5, #1064]	; 0x428
    4eca:	strb.w	sl, [r5, #1060]	; 0x424
    4ece:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4ed0:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4ed4:	mov	r2, r8
    4ed6:	mov	r1, r6
    4ed8:	mov	r0, r4
    4eda:	bl	4320 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4ede:	b.n	4aec <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropValue(p1,p2));
    4ee0:	mov.w	sl, #0
    4ee4:	movs	r3, #1
    4ee6:	mov	r2, r8
    4ee8:	mov	r1, r6
    4eea:	mov	r0, r4
    4eec:	strb.w	r3, [r5, #1060]	; 0x424
    4ef0:	str.w	sl, [r5, #1064]	; 0x428
    4ef4:	bl	413c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4ef8:	ldr.w	r3, [r5, #1064]	; 0x428
    4efc:	add	r1, sp, #24
    4efe:	mov	r0, r4
    4f00:	adds	r3, #12
    4f02:	movs	r2, #12
    4f04:	str	r3, [sp, #24]
    4f06:	movs	r3, #2
    4f08:	strh.w	r3, [sp, #28]
    4f0c:	ldrh	r3, [r4, #38]	; 0x26
    4f0e:	strh.w	r3, [sp, #30]
    4f12:	ldr	r3, [r4, #40]	; 0x28
    4f14:	str.w	sl, [r5, #1064]	; 0x428
    4f18:	strb.w	sl, [r5, #1060]	; 0x424
    4f1c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4f1e:	bl	3cac <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    4f22:	mov	r2, r8
    4f24:	mov	r1, r6
    4f26:	mov	r0, r4
    4f28:	bl	413c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4f2c:	b.n	4aec <MTPD::loop()+0x190>
              return_code = setObjectPropValue(p1,p2);
    4f2e:	mov	r2, r8
    4f30:	mov	r1, r6
    4f32:	mov	r0, r4
    4f34:	bl	4928 <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    4f38:	mov	r7, r0
              break;
    4f3a:	b.n	4dbe <MTPD::loop()+0x462>
                return_code = 0x2014; // spec by format unsupported
    4f3c:	movw	r7, #8212	; 0x2014
    4f40:	b.n	4b06 <MTPD::loop()+0x1aa>
    4f42:	nop

00004f44 <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    4f44:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    4f46:	cbz	r3, 4f7e <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4f48:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4f4a:	movw	r5, #513	; 0x201
    4f4e:	str	r5, [r4, #16]
    4f50:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4f52:	cbz	r1, 4f80 <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    4f54:	ldrb.w	r5, [r1], #1
    4f58:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    4f5a:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4f5c:	str	r5, [r6, #100]	; 0x64
    4f5e:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4f60:	ldr	r6, [r5, #112]	; 0x70
    4f62:	lsls	r6, r6, #30
    4f64:	bmi.n	4f70 <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4f66:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    4f68:	cbz	r2, 4f6e <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4f6a:	strb.w	r5, [r2], #1
				count_read--;
    4f6e:	subs	r4, #1
    4f70:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4f72:	ldr	r5, [r5, #20]
    4f74:	lsls	r5, r5, #31
    4f76:	bpl.n	4f5e <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    4f78:	cmp	r3, #0
    4f7a:	bne.n	4f52 <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    4f7c:	cbnz	r4, 4f86 <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    4f7e:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4f80:	ldrb.w	r5, [r0, #60]	; 0x3c
    4f84:	b.n	4f58 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    4f86:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4f88:	ldr	r1, [r3, #112]	; 0x70
    4f8a:	lsls	r1, r1, #30
    4f8c:	bmi.n	4f7c <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4f8e:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    4f90:	cbz	r2, 4f96 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4f92:	strb.w	r3, [r2], #1
			count_read--;
    4f96:	subs	r4, #1
    4f98:	b.n	4f7c <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

00004f9a <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4f9a:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4f9c:	ldr	r2, [r3, #0]
    4f9e:	ldr	r1, [r2, #0]
    4fa0:	ldr	r2, [r3, #4]
    4fa2:	tst	r1, r2
void SPIClass::end() {
    4fa4:	push	{r4, lr}
    4fa6:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4fa8:	beq.n	4fe0 <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4faa:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    4fac:	movs	r1, #0
    4fae:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    4fb0:	movs	r1, #5
    4fb2:	ldrb	r2, [r0, #16]
    4fb4:	add	r3, r2
    4fb6:	ldrb	r0, [r3, #16]
    4fb8:	bl	bef0 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    4fbc:	ldrb	r2, [r4, #17]
    4fbe:	ldr	r3, [r4, #4]
    4fc0:	movs	r1, #5
    4fc2:	add	r3, r2
    4fc4:	ldrb.w	r0, [r3, #36]	; 0x24
    4fc8:	bl	bef0 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4fcc:	ldr	r3, [r4, #4]
    4fce:	ldrb	r2, [r4, #18]
    4fd0:	movs	r1, #5
    4fd2:	add	r3, r2
	}
}
    4fd4:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4fd8:	ldrb.w	r0, [r3, #56]	; 0x38
    4fdc:	b.w	bef0 <pinMode>
}
    4fe0:	pop	{r4, pc}

00004fe2 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    4fe2:	ldrb.w	r2, [r0, #163]	; 0xa3
    4fe6:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    4fea:	subs	r0, r2, r0
    4fec:	bx	lr

00004fee <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4fee:	ldrb.w	r3, [r0, #162]	; 0xa2
    4ff2:	ldrb.w	r2, [r0, #163]	; 0xa3
    4ff6:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    4ff8:	itttt	hi
    4ffa:	addhi	r2, r3, #1
    4ffc:	strbhi.w	r2, [r0, #162]	; 0xa2
    5000:	addhi	r0, r0, r3
    5002:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    5004:	it	ls
    5006:	movls.w	r0, #4294967295
	}
    500a:	bx	lr

0000500c <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    500c:	ldrb.w	r3, [r0, #162]	; 0xa2
    5010:	ldrb.w	r2, [r0, #163]	; 0xa3
    5014:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    5016:	itte	hi
    5018:	addhi	r0, r0, r3
    501a:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    501c:	movls.w	r0, #4294967295
	}
    5020:	bx	lr

00005022 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    5022:	bx	lr

00005024 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    5024:	ldrh.w	r3, [r0, #304]	; 0x130
    5028:	cbz	r3, 5036 <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    502a:	ldrb.w	r3, [r0, #303]	; 0x12f
    502e:	cmp	r3, #136	; 0x88
    5030:	bls.n	503a <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    5032:	movs	r3, #1
    5034:	str	r3, [r0, #4]
			return 0;
    5036:	movs	r0, #0
    5038:	bx	lr
		txBuffer[txBufferLength++] = data;
    503a:	adds	r2, r3, #1
    503c:	strb.w	r2, [r0, #303]	; 0x12f
    5040:	add	r0, r3
    5042:	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    5046:	movs	r0, #1
    5048:	bx	lr

0000504a <TwoWire::write(unsigned char const*, unsigned int)>:
{
    504a:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    504c:	ldrh.w	r3, [r0, #304]	; 0x130
{
    5050:	mov	r5, r0
    5052:	mov	r4, r2
	if (transmitting || slave_mode) {
    5054:	cbz	r3, 5082 <TwoWire::write(unsigned char const*, unsigned int)+0x38>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    5056:	ldrb.w	r3, [r0, #303]	; 0x12f
    505a:	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    505e:	cmp	r4, r2
    5060:	ittt	hi
    5062:	movhi	r0, #1
    5064:	movhi	r4, r2
    5066:	strhi	r0, [r5, #4]
		memcpy(txBuffer + txBufferLength, data, quantity);
    5068:	add.w	r0, r5, #165	; 0xa5
    506c:	mov	r2, r4
    506e:	add	r0, r3
    5070:	bl	a218 <memcpy>
		txBufferLength += quantity;
    5074:	ldrb.w	r3, [r5, #303]	; 0x12f
    5078:	add	r3, r4
    507a:	strb.w	r3, [r5, #303]	; 0x12f
}
    507e:	mov	r0, r4
    5080:	pop	{r3, r4, r5, pc}
	return 0;
    5082:	mov	r4, r3
    5084:	b.n	507e <TwoWire::write(unsigned char const*, unsigned int)+0x34>
	...

00005088 <TwoWire::force_clock()>:
{
    5088:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    508c:	ldr	r1, [r0, #20]
{
    508e:	mov	r2, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    5090:	ldrb	r3, [r0, #24]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    5092:	mov.w	lr, #21
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    5096:	ldr	r4, [pc, #244]	; (518c <TwoWire::force_clock()+0x104>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    5098:	add.w	r3, r1, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    509c:	ldr.w	r8, [pc, #244]	; 5194 <TwoWire::force_clock()+0x10c>
    50a0:	ldrb	r0, [r3, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    50a2:	ldrb	r3, [r2, #25]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    50a4:	lsls	r6, r0, #4
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    50a6:	add.w	r3, r1, r3, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    50aa:	add.w	r0, r4, r0, lsl #4
	*portSetRegister(sda_pin) = sda_mask;
    50ae:	ldr	r6, [r4, r6]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    50b0:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    50b4:	ldr.w	ip, [r0, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    50b8:	ldr.w	r9, [r0, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    50bc:	lsls	r7, r3, #4
    50be:	add.w	r3, r4, r3, lsl #4
    50c2:	ldr	r5, [r3, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    50c4:	str.w	lr, [r9]
	*portSetRegister(sda_pin) = sda_mask;
    50c8:	str.w	ip, [r6, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    50cc:	ldr	r0, [r6, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    50ce:	ldr	r3, [r3, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    50d0:	orr.w	r0, r0, ip
	*portConfigRegister(scl_pin) = 5 | 0x10;
    50d4:	str	r3, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    50d6:	str	r0, [r6, #4]
	*portSetRegister(scl_pin) = scl_mask;
    50d8:	ldr	r0, [r4, r7]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    50da:	str.w	lr, [r3]
	*portSetRegister(scl_pin) = scl_mask;
    50de:	str.w	r5, [r0, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    50e2:	ldr	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    50e4:	ldr	r4, [pc, #168]	; (5190 <TwoWire::force_clock()+0x108>)
    50e6:	orrs	r3, r5
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    50e8:	ldr.w	lr, [pc, #172]	; 5198 <TwoWire::force_clock()+0x110>
    50ec:	str	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    50ee:	ldr	r7, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    50f0:	ldr.w	r3, [lr]
    50f4:	udiv	r3, r3, r8
    50f8:	mov.w	r8, #10
    50fc:	mul.w	r3, r8, r3
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    5100:	ldr.w	r8, [r4, #4]
    5104:	sub.w	r8, r8, r7
    5108:	cmp	r3, r8
    510a:	bhi.n	5100 <TwoWire::force_clock()+0x78>
    510c:	movs	r3, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    510e:	ldr	r7, [pc, #128]	; (5190 <TwoWire::force_clock()+0x108>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5110:	ldr.w	sl, [pc, #128]	; 5194 <TwoWire::force_clock()+0x10c>
		if ((*portInputRegister(sda_pin) & sda_mask)
    5114:	ldr	r4, [r6, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    5116:	tst.w	r4, ip
    511a:	beq.n	5122 <TwoWire::force_clock()+0x9a>
    511c:	ldr	r4, [r0, #8]
    511e:	tst	r4, r5
    5120:	bne.n	5186 <TwoWire::force_clock()+0xfe>
		*portClearRegister(scl_pin) = scl_mask;
    5122:	str.w	r5, [r0, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    5126:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    512a:	ldr.w	r4, [lr]
    512e:	udiv	r4, r4, sl
    5132:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    5136:	ldr.w	r8, [r7, #4]
    513a:	sub.w	r8, r8, fp
    513e:	cmp	r4, r8
    5140:	bhi.n	5136 <TwoWire::force_clock()+0xae>
		*portSetRegister(scl_pin) = scl_mask;
    5142:	str.w	r5, [r0, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    5146:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    514a:	ldr.w	r4, [lr]
    514e:	udiv	r4, r4, sl
    5152:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    5156:	ldr.w	r8, [r7, #4]
    515a:	sub.w	r8, r8, fp
    515e:	cmp	r4, r8
    5160:	bhi.n	5156 <TwoWire::force_clock()+0xce>
	for (int i=0; i < 9; i++) {
    5162:	subs	r3, #1
    5164:	bne.n	5114 <TwoWire::force_clock()+0x8c>
	bool ret = false;
    5166:	mov	r0, r3
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    5168:	ldrb	r3, [r2, #24]
    516a:	add.w	r3, r1, r3, lsl #4
    516e:	ldr	r3, [r3, #12]
    5170:	str.w	r3, [r9]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    5174:	ldrb	r3, [r2, #25]
    5176:	ldr	r2, [sp, #4]
    5178:	add.w	r1, r1, r3, lsl #4
    517c:	ldr	r3, [r1, #44]	; 0x2c
    517e:	str	r3, [r2, #0]
}
    5180:	add	sp, #12
    5182:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    5186:	movs	r0, #1
    5188:	b.n	5168 <TwoWire::force_clock()+0xe0>
    518a:	nop
    518c:	.word	0x20000614
    5190:	.word	0xe0001000
    5194:	.word	0x000f4240
    5198:	.word	0x20001d2c

0000519c <TwoWire::wait_idle()>:
	return systick_millis_count;
    519c:	ldr	r2, [pc, #44]	; (51cc <TwoWire::wait_idle()+0x30>)
{
    519e:	push	{r4, lr}
    51a0:	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    51a2:	ldr	r4, [r0, #16]
		uint32_t status = port->MSR; // pg 2899 & 2892
    51a4:	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    51a6:	tst.w	r3, #33554432	; 0x2000000
    51aa:	bne.n	51b6 <TwoWire::wait_idle()+0x1a>
	port->MSR = 0x00007F00; // clear all prior flags
    51ac:	mov.w	r3, #32512	; 0x7f00
	return true;
    51b0:	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    51b2:	str	r3, [r4, #20]
}
    51b4:	pop	{r4, pc}
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    51b6:	lsls	r3, r3, #7
    51b8:	bmi.n	51ac <TwoWire::wait_idle()+0x10>
    51ba:	ldr	r3, [r2, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    51bc:	subs	r3, r3, r1
		if (timeout > 16) {
    51be:	cmp	r3, #16
    51c0:	bls.n	51a4 <TwoWire::wait_idle()+0x8>
			if (force_clock()) break;
    51c2:	bl	5088 <TwoWire::force_clock()>
    51c6:	cmp	r0, #0
    51c8:	bne.n	51ac <TwoWire::wait_idle()+0x10>
    51ca:	b.n	51b4 <TwoWire::wait_idle()+0x18>
    51cc:	.word	0x20015374

000051d0 <TwoWire::endTransmission(unsigned char)>:
{
    51d0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tx_len = txBufferLength;
    51d4:	ldrb.w	r8, [r0, #303]	; 0x12f
{
    51d8:	mov	r7, r0
    51da:	mov	r5, r1
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    51dc:	ldr	r4, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    51de:	cmp.w	r8, #0
    51e2:	beq.n	5242 <TwoWire::endTransmission(unsigned char)+0x72>
	if (!wait_idle()) return 4;
    51e4:	bl	519c <TwoWire::wait_idle()>
    51e8:	cbz	r0, 5242 <TwoWire::endTransmission(unsigned char)+0x72>
    51ea:	ldr.w	r9, [pc, #196]	; 52b0 <TwoWire::endTransmission(unsigned char)+0xe0>
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    51ee:	movs	r6, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    51f0:	mov.w	fp, #512	; 0x200
    51f4:	ldr.w	sl, [r9]
		if (tx_index <= tx_len) {
    51f8:	cmp	r6, r8
    51fa:	bhi.n	5234 <TwoWire::endTransmission(unsigned char)+0x64>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    51fc:	ldr	r3, [r4, #92]	; 0x5c
    51fe:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    5202:	cmp	r3, #3
    5204:	bhi.n	5234 <TwoWire::endTransmission(unsigned char)+0x64>
				if (tx_index == 0) {
    5206:	cbnz	r6, 521a <TwoWire::endTransmission(unsigned char)+0x4a>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    5208:	ldrb.w	r2, [r7, #165]	; 0xa5
    520c:	orr.w	r2, r2, #1024	; 0x400
    5210:	str	r2, [r4, #96]	; 0x60
					tx_index = 1;
    5212:	movs	r2, #1
				fifo_used++;
    5214:	adds	r3, #1
    5216:	mov	r6, r2
    5218:	b.n	5202 <TwoWire::endTransmission(unsigned char)+0x32>
				} else if (tx_index < tx_len) {
    521a:	cmp	r6, r8
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    521c:	add.w	r2, r6, #1
				} else if (tx_index < tx_len) {
    5220:	bcs.n	522c <TwoWire::endTransmission(unsigned char)+0x5c>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    5222:	add	r6, r7
    5224:	ldrb.w	r1, [r6, #165]	; 0xa5
    5228:	str	r1, [r4, #96]	; 0x60
    522a:	b.n	5214 <TwoWire::endTransmission(unsigned char)+0x44>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    522c:	cbz	r5, 5232 <TwoWire::endTransmission(unsigned char)+0x62>
    522e:	str.w	fp, [r4, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    5232:	mov	r6, r2
		uint32_t status = port->MSR; // pg 2884 & 2891
    5234:	ldr	r3, [r4, #20]
		if (status & LPI2C_MSR_ALF) {
    5236:	lsls	r2, r3, #20
    5238:	bpl.n	5246 <TwoWire::endTransmission(unsigned char)+0x76>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    523a:	ldr	r3, [r4, #16]
    523c:	orr.w	r3, r3, #768	; 0x300
    5240:	str	r3, [r4, #16]
	if (!tx_len) return 4; // no address for transmit
    5242:	movs	r5, #4
    5244:	b.n	5254 <TwoWire::endTransmission(unsigned char)+0x84>
		if (status & LPI2C_MSR_FEF) {
    5246:	lsls	r0, r3, #19
    5248:	bpl.n	525a <TwoWire::endTransmission(unsigned char)+0x8a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    524a:	ldr	r3, [r4, #16]
			return 5; // FIFO error
    524c:	movs	r5, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    524e:	orr.w	r3, r3, #768	; 0x300
    5252:	str	r3, [r4, #16]
}
    5254:	mov	r0, r5
    5256:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (status & LPI2C_MSR_NDF) {
    525a:	lsls	r1, r3, #21
    525c:	bpl.n	5270 <TwoWire::endTransmission(unsigned char)+0xa0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    525e:	ldr	r3, [r4, #16]
			return 2; // NACK (assume address, TODO: how to tell address from data)
    5260:	movs	r5, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5262:	orr.w	r3, r3, #768	; 0x300
    5266:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    5268:	mov.w	r3, #512	; 0x200
    526c:	str	r3, [r4, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    526e:	b.n	5254 <TwoWire::endTransmission(unsigned char)+0x84>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    5270:	lsls	r2, r3, #18
    5272:	bmi.n	5280 <TwoWire::endTransmission(unsigned char)+0xb0>
    5274:	ldr.w	r2, [r9]
    5278:	sub.w	r2, r2, sl
    527c:	cmp	r2, #50	; 0x32
    527e:	bls.n	5290 <TwoWire::endTransmission(unsigned char)+0xc0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5280:	ldr	r3, [r4, #16]
    5282:	orr.w	r3, r3, #768	; 0x300
    5286:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    5288:	mov.w	r3, #512	; 0x200
    528c:	str	r3, [r4, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    528e:	b.n	5242 <TwoWire::endTransmission(unsigned char)+0x72>
		if (tx_index > tx_len) {
    5290:	cmp	r6, r8
    5292:	bls.n	52a4 <TwoWire::endTransmission(unsigned char)+0xd4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    5294:	ldr	r2, [r4, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    5296:	ands.w	r2, r2, #7
    529a:	bne.n	52a4 <TwoWire::endTransmission(unsigned char)+0xd4>
    529c:	lsls	r3, r3, #22
    529e:	bmi.n	52aa <TwoWire::endTransmission(unsigned char)+0xda>
    52a0:	cmp	r5, #0
    52a2:	beq.n	5254 <TwoWire::endTransmission(unsigned char)+0x84>
		yield();
    52a4:	bl	c3dc <yield>
	}
    52a8:	b.n	51f8 <TwoWire::endTransmission(unsigned char)+0x28>
				return 0;
    52aa:	mov	r5, r2
    52ac:	b.n	5254 <TwoWire::endTransmission(unsigned char)+0x84>
    52ae:	nop
    52b0:	.word	0x20015374

000052b4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    52b4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52b8:	mov	r7, r0
    52ba:	mov	r6, r1
    52bc:	mov	r9, r2
    52be:	mov	r8, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    52c0:	ldr	r5, [r0, #16]
	if (!wait_idle()) return 4;
    52c2:	bl	519c <TwoWire::wait_idle()>
    52c6:	cmp	r0, #0
    52c8:	beq.n	53c0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10c>
	address = (address & 0x7F) << 1;
    52ca:	lsls	r6, r6, #1
	if (length < 1) length = 1;
    52cc:	cmp.w	r9, #1
    52d0:	ldr.w	sl, [pc, #240]	; 53c4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
	rxBufferIndex = 0;
    52d4:	mov.w	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    52d8:	uxtb	r6, r6
    52da:	it	cc
    52dc:	movcc.w	r9, #1
    52e0:	ldr.w	fp, [sl]
    52e4:	orr.w	r6, r6, #1024	; 0x400
	rxBufferIndex = 0;
    52e8:	strh.w	r4, [r7, #162]	; 0xa2
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    52ec:	orr.w	r6, r6, #1
		if (tx_state < 3) {
    52f0:	cmp	r4, #2
    52f2:	bhi.n	5312 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    52f4:	ldr	r3, [r5, #92]	; 0x5c
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    52f6:	add.w	r2, r9, #4294967295
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    52fa:	mov.w	r1, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    52fe:	and.w	r3, r3, #7
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    5302:	orr.w	r2, r2, #256	; 0x100
    5306:	add	r3, r4
			while (tx_fifo < 4 && tx_state < 3) {
    5308:	subs	r0, r3, r4
    530a:	cmp	r0, #3
    530c:	bhi.n	5312 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
    530e:	cmp	r4, #3
    5310:	bne.n	5340 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x8c>
		if (rxBufferLength < sizeof(rxBuffer)) {
    5312:	ldrb.w	r3, [r7, #163]	; 0xa3
    5316:	cmp	r3, #135	; 0x87
    5318:	bls.n	535a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    531a:	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    531c:	lsls	r1, r3, #20
    531e:	bpl.n	537c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5320:	ldr	r3, [r5, #16]
    5322:	orr.w	r3, r3, #768	; 0x300
    5326:	str	r3, [r5, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    5328:	ldr	r3, [r5, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    532a:	tst.w	r3, #458752	; 0x70000
    532e:	beq.n	5338 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x84>
    5330:	ldr	r3, [r5, #16]
    5332:	orr.w	r3, r3, #512	; 0x200
    5336:	str	r3, [r5, #16]
	return rxBufferLength;
    5338:	ldrb.w	r0, [r7, #163]	; 0xa3
}
    533c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (tx_state == 0) {
    5340:	cbnz	r4, 5348 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x94>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    5342:	str	r6, [r5, #96]	; 0x60
				tx_state++;
    5344:	adds	r4, #1
				tx_fifo--;
    5346:	b.n	5308 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x54>
				} else if (tx_state == 1) {
    5348:	cmp	r4, #1
    534a:	bne.n	5350 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    534c:	str	r2, [r5, #96]	; 0x60
    534e:	b.n	5344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5350:	cmp.w	r8, #0
    5354:	beq.n	5344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
    5356:	str	r1, [r5, #96]	; 0x60
    5358:	b.n	5344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    535a:	ldr	r2, [r5, #92]	; 0x5c
    535c:	ubfx	r2, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    5360:	cmp	r2, #0
    5362:	beq.n	531a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
    5364:	ldrb.w	r3, [r7, #163]	; 0xa3
    5368:	cmp	r3, #135	; 0x87
    536a:	bhi.n	531a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
				rxBuffer[rxBufferLength++] = port->MRDR;
    536c:	ldr	r1, [r5, #112]	; 0x70
    536e:	adds	r0, r3, #1
    5370:	add	r3, r7
				rx_fifo--;
    5372:	subs	r2, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    5374:	strb.w	r0, [r7, #163]	; 0xa3
    5378:	strb	r1, [r3, #26]
				rx_fifo--;
    537a:	b.n	5360 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xac>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    537c:	tst.w	r3, #9216	; 0x2400
    5380:	bne.n	538e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
    5382:	ldr.w	r2, [sl]
    5386:	sub.w	r2, r2, fp
    538a:	cmp	r2, #50	; 0x32
    538c:	bls.n	539e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    538e:	ldr	r3, [r5, #16]
    5390:	orr.w	r3, r3, #768	; 0x300
    5394:	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    5396:	mov.w	r3, #512	; 0x200
    539a:	str	r3, [r5, #96]	; 0x60
			break;
    539c:	b.n	5328 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		if (rxBufferLength >= length && tx_state >= 3) {
    539e:	ldrb.w	r2, [r7, #163]	; 0xa3
    53a2:	cmp	r2, r9
    53a4:	bcc.n	53ba <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    53a6:	cmp	r4, #2
    53a8:	bls.n	53ba <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			uint32_t tx_fifo = port->MFSR & 0x07;
    53aa:	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    53ac:	lsls	r2, r2, #29
    53ae:	bne.n	53ba <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    53b0:	lsls	r3, r3, #22
    53b2:	bmi.n	5328 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
    53b4:	cmp.w	r8, #0
    53b8:	beq.n	5328 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		yield();
    53ba:	bl	c3dc <yield>
	}
    53be:	b.n	52f0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3c>
	if (!wait_idle()) return 4;
    53c0:	movs	r0, #4
    53c2:	b.n	533c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    53c4:	.word	0x20015374

000053c8 <TwoWire::isr()>:
{
    53c8:	push	{r4, r5, r6, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    53ca:	ldr	r6, [r0, #16]
{
    53cc:	mov	r4, r0
	uint32_t status = port->SSR;
    53ce:	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    53d2:	ands.w	r3, r5, #3840	; 0xf00
    53d6:	beq.n	53dc <TwoWire::isr()+0x14>
    53d8:	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    53dc:	lsls	r0, r5, #30
    53de:	bpl.n	5400 <TwoWire::isr()+0x38>
		int rx = port->SRDR;
    53e0:	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    53e4:	lsls	r1, r2, #16
			rxBufferIndex = 0;
    53e6:	itt	mi
    53e8:	movmi	r3, #0
    53ea:	strhmi.w	r3, [r4, #162]	; 0xa2
		if (rxBufferLength < BUFFER_LENGTH) {
    53ee:	ldrb.w	r3, [r4, #163]	; 0xa3
    53f2:	cmp	r3, #135	; 0x87
			rxBuffer[rxBufferLength++] = rx & 255;
    53f4:	itttt	ls
    53f6:	addls	r1, r3, #1
    53f8:	addls	r3, r3, r4
    53fa:	strbls.w	r1, [r4, #163]	; 0xa3
    53fe:	strbls	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    5400:	lsls	r2, r5, #31
    5402:	bpl.n	543e <TwoWire::isr()+0x76>
		if (!transmitting) {
    5404:	ldrb.w	r3, [r4, #304]	; 0x130
    5408:	cbnz	r3, 541e <TwoWire::isr()+0x56>
			if (user_onRequest != nullptr) {
    540a:	ldr.w	r3, [r4, #312]	; 0x138
    540e:	cbz	r3, 5412 <TwoWire::isr()+0x4a>
				(*user_onRequest)();
    5410:	blx	r3
			txBufferIndex = 0;
    5412:	movs	r3, #0
    5414:	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    5418:	movs	r3, #1
    541a:	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    541e:	ldrb.w	r3, [r4, #302]	; 0x12e
    5422:	ldrb.w	r2, [r4, #303]	; 0x12f
    5426:	cmp	r2, r3
			port->STDR = txBuffer[txBufferIndex++];
    5428:	ittet	hi
    542a:	addhi	r2, r3, #1
    542c:	addhi	r3, r3, r4
			port->STDR = 0;
    542e:	movls	r3, #0
			port->STDR = txBuffer[txBufferIndex++];
    5430:	strbhi.w	r2, [r4, #302]	; 0x12e
    5434:	it	hi
    5436:	ldrbhi.w	r3, [r3, #165]	; 0xa5
			port->STDR = 0;
    543a:	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    543e:	lsls	r3, r5, #22
    5440:	bpl.n	545e <TwoWire::isr()+0x96>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    5442:	ldrb.w	r0, [r4, #163]	; 0xa3
    5446:	cbz	r0, 5450 <TwoWire::isr()+0x88>
    5448:	ldr.w	r3, [r4, #316]	; 0x13c
    544c:	cbz	r3, 5450 <TwoWire::isr()+0x88>
			(*user_onReceive)(rxBufferLength);
    544e:	blx	r3
		rxBufferIndex = 0;
    5450:	movs	r3, #0
    5452:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    5456:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    545a:	strb.w	r3, [r4, #304]	; 0x130
}
    545e:	pop	{r4, r5, r6, pc}

00005460 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    5460:	ldr	r0, [pc, #4]	; (5468 <lpi2c1_isr()+0x8>)
    5462:	b.w	53c8 <TwoWire::isr()>
    5466:	nop
    5468:	.word	0x20001d40

0000546c <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    546c:	ldr	r0, [pc, #4]	; (5474 <lpi2c3_isr()+0x8>)
    546e:	b.w	53c8 <TwoWire::isr()>
    5472:	nop
    5474:	.word	0x20001e80

00005478 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    5478:	ldr	r0, [pc, #4]	; (5480 <lpi2c4_isr()+0x8>)
    547a:	b.w	53c8 <TwoWire::isr()>
    547e:	nop
    5480:	.word	0x20001fc0

00005484 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5484:	ldr	r3, [r0, #16]
	port->MCR = 0;
    5486:	movs	r2, #0
	if (frequency < 400000) {
    5488:	ldr	r0, [pc, #76]	; (54d8 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    548a:	str	r2, [r3, #16]
	if (frequency < 400000) {
    548c:	cmp	r1, r0
    548e:	bhi.n	54b6 <TwoWire::setClock(unsigned long)+0x32>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    5490:	ldr	r2, [pc, #72]	; (54dc <TwoWire::setClock(unsigned long)+0x58>)
    5492:	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    5494:	movs	r2, #1
    5496:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    5498:	ldr	r2, [pc, #68]	; (54e0 <TwoWire::setClock(unsigned long)+0x5c>)
    549a:	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    549c:	mov.w	r2, #180224	; 0x2c000
    54a0:	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    54a2:	ldr	r2, [r3, #72]	; 0x48
    54a4:	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    54a6:	movs	r2, #0
    54a8:	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    54aa:	mov.w	r2, #65537	; 0x10001
    54ae:	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    54b0:	movs	r2, #1
    54b2:	str	r2, [r3, #16]
}
    54b4:	bx	lr
	} else if (frequency < 1000000) {
    54b6:	ldr	r0, [pc, #44]	; (54e4 <TwoWire::setClock(unsigned long)+0x60>)
    54b8:	cmp	r1, r0
    54ba:	ldr	r1, [pc, #44]	; (54e8 <TwoWire::setClock(unsigned long)+0x64>)
    54bc:	bhi.n	54cc <TwoWire::setClock(unsigned long)+0x48>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    54be:	ldr	r0, [pc, #44]	; (54ec <TwoWire::setClock(unsigned long)+0x68>)
    54c0:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    54c2:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    54c4:	ldr	r2, [pc, #40]	; (54f0 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    54c6:	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    54c8:	str	r1, [r3, #44]	; 0x2c
    54ca:	b.n	54a2 <TwoWire::setClock(unsigned long)+0x1e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    54cc:	ldr	r0, [pc, #36]	; (54f4 <TwoWire::setClock(unsigned long)+0x70>)
    54ce:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    54d0:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    54d2:	ldr	r2, [pc, #36]	; (54f8 <TwoWire::setClock(unsigned long)+0x74>)
    54d4:	b.n	54c6 <TwoWire::setClock(unsigned long)+0x42>
    54d6:	nop
    54d8:	.word	0x00061a7f
    54dc:	.word	0x1928373b
    54e0:	.word	0x05050bb8
    54e4:	.word	0x000f423f
    54e8:	.word	0x00057f00
    54ec:	.word	0x0c121a1c
    54f0:	.word	0x02020e10
    54f4:	.word	0x0407090a
    54f8:	.word	0x01010960

000054fc <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    54fc:	mov	r3, r0
    size_t n = end - str;
    54fe:	subs	r0, r2, r1
    if (cp < 0X80) {
    5500:	cmp	r3, #127	; 0x7f
    5502:	bhi.n	5510 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    5504:	cmp	r0, #0
    5506:	beq.n	558c <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    5508:	mov	r0, r1
    550a:	strb.w	r3, [r0], #1
    550e:	bx	lr
    } else if (cp < 0X800) {
    5510:	cmp.w	r3, #2048	; 0x800
    5514:	bcs.n	5532 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    5516:	cmp	r0, #1
    5518:	bls.n	558a <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    551a:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    551c:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5520:	mov	r0, r1
    5522:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5526:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    552a:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    552e:	strb	r3, [r1, #1]
    5530:	bx	lr
    } else if (cp < 0X10000) {
    5532:	cmp.w	r3, #65536	; 0x10000
    5536:	bcs.n	555c <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    5538:	cmp	r0, #2
    553a:	bls.n	558a <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    553c:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    553e:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5540:	orn	r2, r2, #31
    5544:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5546:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    554a:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    554e:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5552:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5556:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5558:	strb	r3, [r1, #2]
    555a:	bx	lr
       if (n < 4) goto fail;
    555c:	cmp	r0, #3
    555e:	bls.n	558a <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    5560:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5562:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    5564:	orn	r2, r2, #15
    5568:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    556a:	ubfx	r2, r3, #12, #6
    556e:	orn	r2, r2, #127	; 0x7f
    5572:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5574:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5578:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    557c:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5580:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5584:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5586:	strb	r3, [r1, #3]
    5588:	bx	lr
    return nullptr;
    558a:	movs	r0, #0
  }
    558c:	bx	lr
	...

00005590 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    5590:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    5592:	push	{r4, r5, lr}
    5594:	mov	r5, r0
    if (str >= end) {
    5596:	bcs.n	560e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    5598:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    559a:	ldrsb.w	r0, [r0]
    559e:	cmp	r0, #0
    55a0:	blt.n	55a8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    55a2:	adds	r0, r5, #1
      *rtn = ch;
    55a4:	str	r3, [r2, #0]
  }
    55a6:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    55a8:	and.w	r0, r3, #224	; 0xe0
    55ac:	cmp	r0, #192	; 0xc0
    55ae:	bne.n	55ee <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    55b0:	and.w	r3, r3, #31
      n = 2;
    55b4:	movs	r4, #2
    if ((str + n) > end) {
    55b6:	adds	r0, r5, r4
    55b8:	cmp	r0, r1
    55ba:	bhi.n	560e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    55bc:	adds	r5, #1
      ch = str[i];
    55be:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    55c2:	and.w	r4, r1, #192	; 0xc0
    55c6:	cmp	r4, #128	; 0x80
    55c8:	bne.n	560e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    55ca:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    55ce:	cmp	r5, r0
      cp |= ch & 0X3F;
    55d0:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    55d4:	bne.n	55be <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    55d6:	sub.w	r4, r3, #128	; 0x80
    55da:	ldr	r1, [pc, #56]	; (5614 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    55dc:	cmp	r4, r1
    55de:	bhi.n	560e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    55e0:	sub.w	r1, r3, #55296	; 0xd800
    55e4:	cmp.w	r1, #2048	; 0x800
    55e8:	bcc.n	560e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    55ea:	str	r3, [r2, #0]
    return str + n;
    55ec:	b.n	55a6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    55ee:	and.w	r0, r3, #240	; 0xf0
    55f2:	cmp	r0, #224	; 0xe0
    55f4:	bne.n	55fe <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    55f6:	and.w	r3, r3, #15
      n = 3;
    55fa:	movs	r4, #3
    55fc:	b.n	55b6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    55fe:	and.w	r0, r3, #248	; 0xf8
    5602:	cmp	r0, #240	; 0xf0
    5604:	bne.n	560e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    5606:	and.w	r3, r3, #7
      n = 4;
    560a:	movs	r4, #4
    560c:	b.n	55b6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    560e:	movs	r0, #0
    5610:	b.n	55a6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    5612:	nop
    5614:	.word	0x0010ff7f

00005618 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    5618:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    561a:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    561c:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    561e:	lsls	r2, r3, #31
    5620:	bpl.n	5662 <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    5622:	ldr	r0, [r0, #4]
    5624:	add.w	r2, r4, #16
    5628:	ldr	r1, [r4, #12]
    562a:	ldr	r3, [r0, #0]
    562c:	str	r2, [sp, #4]
    562e:	ldr	r3, [r3, #36]	; 0x24
    5630:	blx	r3
    5632:	ldr	r2, [sp, #4]
    5634:	mov	r5, r0
    5636:	cbnz	r0, 5640 <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    5638:	movs	r5, #0
}
    563a:	mov	r0, r5
    563c:	add	sp, #8
    563e:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5640:	ldrb	r3, [r4, #0]
    5642:	lsls	r3, r3, #30
    5644:	bmi.n	5650 <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    5646:	ldrb	r3, [r4, #0]
    5648:	bic.w	r3, r3, #1
    564c:	strb	r3, [r4, #0]
    564e:	b.n	563a <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    5650:	adds	r0, r4, #4
    5652:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    5654:	ldr	r3, [r0, #0]
    5656:	add	r1, r6
    5658:	ldr	r3, [r3, #36]	; 0x24
    565a:	blx	r3
    565c:	cmp	r0, #0
    565e:	bne.n	5646 <FsCache::sync()+0x2e>
    5660:	b.n	5638 <FsCache::sync()+0x20>
  return true;
    5662:	movs	r5, #1
    5664:	b.n	563a <FsCache::sync()+0x22>

00005666 <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    5666:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    5668:	push	{r4, r5, r6, lr}
    566a:	mov	r4, r0
    566c:	mov	r6, r1
    566e:	mov	r5, r2
  if (!m_blockDev) {
    5670:	cbnz	r3, 5676 <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    5672:	movs	r0, #0
}
    5674:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    5676:	ldr	r3, [r0, #12]
    5678:	cmp	r3, r1
    567a:	beq.n	568e <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    567c:	bl	5618 <FsCache::sync()>
    5680:	cmp	r0, #0
    5682:	beq.n	5672 <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    5684:	lsls	r3, r5, #29
    5686:	bpl.n	569e <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    5688:	movs	r3, #0
    m_sector = sector;
    568a:	str	r6, [r4, #12]
    m_status = 0;
    568c:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    568e:	ldrb	r3, [r4, #0]
    5690:	and.w	r5, r5, #3
    5694:	mov	r0, r4
    5696:	orrs	r3, r5
    5698:	strb.w	r3, [r0], #16
  return m_buffer;
    569c:	b.n	5674 <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    569e:	ldr	r0, [r4, #4]
    56a0:	add.w	r2, r4, #16
    56a4:	mov	r1, r6
    56a6:	ldr	r3, [r0, #0]
    56a8:	ldr	r3, [r3, #16]
    56aa:	blx	r3
    56ac:	cmp	r0, #0
    56ae:	bne.n	5688 <FsCache::prepare(unsigned long, unsigned char)+0x22>
    56b0:	b.n	5672 <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

000056b4 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    56b4:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    56b6:	push	{r4, r5, lr}
  if (chr < 127) {
    56b8:	bhi.n	570a <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    56ba:	sub.w	r3, r0, #97	; 0x61
    56be:	cmp	r3, #25
    56c0:	ite	hi
    56c2:	movhi	r3, #0
    56c4:	movls	r3, #1
    56c6:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    56ca:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    56cc:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    56ce:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    56d2:	ldrh.w	r5, [r1, r2, lsl #2]
    56d6:	cmp	r5, r0
    mid = left + (right - left)/2;
    56d8:	ite	hi
    56da:	movhi	r4, r2
    56dc:	movls	r3, r2
  while (right - left > 1) {
    56de:	subs	r2, r4, r3
    56e0:	cmp	r2, #1
    56e2:	bhi.n	56ce <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    56e4:	uxth	r2, r3
    56e6:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    56ea:	cmp	r0, r3
    56ec:	bcc.n	574a <toUpcase(unsigned short)+0x96>
    56ee:	add.w	r1, r1, r2, lsl #2
    56f2:	subs	r3, r0, r3
    56f4:	ldrb	r2, [r1, #3]
    56f6:	cmp	r3, r2
    56f8:	bge.n	574a <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    56fa:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    56fe:	cmp	r2, #1
    5700:	bne.n	5712 <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    5702:	and.w	r3, r3, #1
    5706:	subs	r3, r0, r3
    5708:	b.n	56ca <toUpcase(unsigned short)+0x16>
  size_t right = size;
    570a:	movs	r4, #53	; 0x35
  size_t left = 0;
    570c:	movs	r3, #0
    570e:	ldr	r1, [pc, #68]	; (5754 <toUpcase(unsigned short)+0xa0>)
    5710:	b.n	56de <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    5712:	cbz	r2, 571c <toUpcase(unsigned short)+0x68>
    5714:	uxth	r2, r2
    5716:	add	r2, r0
    5718:	uxth	r0, r2
    571a:	b.n	56cc <toUpcase(unsigned short)+0x18>
    571c:	movw	r2, #58272	; 0xe3a0
    5720:	b.n	5716 <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    5722:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5726:	ldrh.w	r5, [r1, r2, lsl #2]
    572a:	cmp	r5, r0
    mid = left + (right - left)/2;
    572c:	ite	hi
    572e:	movhi	r4, r2
    5730:	movls	r3, r2
  while (right - left > 1) {
    5732:	subs	r2, r4, r3
    5734:	cmp	r2, #1
    5736:	bhi.n	5722 <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    5738:	uxth	r3, r3
    573a:	ldrh.w	r2, [r1, r3, lsl #2]
    573e:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    5740:	itt	eq
    5742:	addeq.w	r1, r1, r3, lsl #2
    5746:	ldrheq	r0, [r1, #2]
    5748:	b.n	56cc <toUpcase(unsigned short)+0x18>
    574a:	movs	r4, #75	; 0x4b
    574c:	movs	r3, #0
    574e:	ldr	r1, [pc, #8]	; (5758 <toUpcase(unsigned short)+0xa4>)
    5750:	b.n	5732 <toUpcase(unsigned short)+0x7e>
    5752:	nop
    5754:	.word	0x20000b98
    5758:	.word	0x20000a30

0000575c <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    575c:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    575e:	push	{r0, r1, r4, lr}
    5760:	mov	r4, r0
  if (ls) {
    5762:	cbz	r3, 576e <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    5764:	movs	r2, #0
    5766:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    5768:	mov	r0, r3
    576a:	add	sp, #8
    576c:	pop	{r4, pc}
  } else if (next >= end) {
    576e:	ldrd	r0, r1, [r0, #4]
    5772:	cmp	r0, r1
    5774:	bcs.n	5768 <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    5776:	add	r2, sp, #4
    5778:	bl	5590 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    577c:	cbnz	r0, 5784 <FsName::get16()+0x28>
  return 0XFFFF;
    577e:	movw	r3, #65535	; 0xffff
    5782:	b.n	5768 <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    5784:	ldr	r2, [sp, #4]
    next = ptr;
    5786:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    5788:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    578c:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    578e:	bcc.n	5768 <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    5790:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5794:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    5796:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    579a:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    579e:	strh	r3, [r4, #12]
    57a0:	uxth	r3, r2
    57a2:	b.n	5768 <FsName::get16()+0xc>

000057a4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    57a4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57a8:	mov	r6, r2
    57aa:	mov	r5, r1
    57ac:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    57b0:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    57b2:	ldrh.w	r4, [r5, #2]!
    57b6:	cbnz	r3, 57ca <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    57b8:	ldrd	r2, r3, [r6, #4]
    57bc:	cmp	r2, r3
    57be:	bne.n	57ca <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    57c0:	clz	r0, r4
    57c4:	lsrs	r0, r0, #5
}
    57c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    57ca:	mov	r0, r6
    57cc:	bl	575c <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    57d0:	bl	56b4 <toUpcase(unsigned short)>
    57d4:	mov	r7, r0
    57d6:	mov	r0, r4
    57d8:	bl	56b4 <toUpcase(unsigned short)>
    57dc:	cmp	r7, r0
    57de:	bne.n	57e8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    57e0:	cmp	r5, r8
    57e2:	bne.n	57b0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    57e4:	movs	r0, #1
    57e6:	b.n	57c6 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    57e8:	movs	r0, #0
    57ea:	b.n	57c6 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

000057ec <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    57ec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    57f0:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    57f4:	mov	sl, r0
    57f6:	mov	r8, r1
  if (!isOpen()) {
    57f8:	cmp	r3, #0
    57fa:	beq.n	588e <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    57fc:	subs	r2, #1
  char* str = name;
    57fe:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5800:	mov.w	r9, #2
  uint16_t hs = 0;
    5804:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5806:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5808:	ldrb.w	r3, [sl, #48]	; 0x30
    580c:	cmp	r3, r9
    580e:	bcc.n	5878 <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    5810:	movs	r2, #0
    5812:	mov	r1, r9
    5814:	mov	r0, sl
    5816:	bl	58fe <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    581a:	cbz	r0, 588e <ExFatFile::getName8(char*, unsigned int)+0xa2>
    581c:	ldrb	r3, [r0, #0]
    581e:	cmp	r3, #193	; 0xc1
    5820:	bne.n	588e <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5822:	mov	r6, r0
    5824:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5828:	ldr	r3, [pc, #108]	; (5898 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    582a:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    582e:	cbz	r5, 5868 <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    5830:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    5834:	uxth	r2, r2
    5836:	cmp.w	r2, #1024	; 0x400
    583a:	bcs.n	588e <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    583c:	and.w	r5, r3, r5, lsl #10
    5840:	ubfx	r0, r0, #0, #10
    5844:	orrs	r0, r5
    5846:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    584a:	mov	r1, r4
    584c:	mov	r2, r7
    584e:	bl	54fc <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    5852:	mov	r4, r0
    5854:	cbz	r0, 588e <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5856:	movs	r5, #0
    5858:	ldr	r3, [pc, #60]	; (5898 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    585a:	cmp	fp, r6
    585c:	bne.n	582a <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    585e:	add.w	r9, r9, #1
    5862:	uxtb.w	r9, r9
    5866:	b.n	5808 <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    5868:	add.w	r2, r0, #10240	; 0x2800
    586c:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    586e:	cmp.w	r2, #2048	; 0x800
    5872:	bcc.n	5884 <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    5874:	cmp	r0, #0
    5876:	bne.n	584a <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    5878:	movs	r3, #0
  return str - name;
    587a:	sub.w	r0, r4, r8
  *str = '\0';
    587e:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    5880:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    5884:	cmp.w	r2, #1024	; 0x400
    5888:	bcs.n	588e <ExFatFile::getName8(char*, unsigned int)+0xa2>
    588a:	mov	r5, r0
    588c:	b.n	585a <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    588e:	movs	r0, #0
    5890:	strb.w	r0, [r8]
  return 0;
    5894:	b.n	5880 <ExFatFile::getName8(char*, unsigned int)+0x94>
    5896:	nop
    5898:	.word	0x000ffc00

0000589c <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    589c:	movs	r0, #0
    next = begin;
    589e:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    58a0:	push	{r4, r5, r6, lr}
    58a2:	mov	r4, r1
  uint16_t hash = 0;
    58a4:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    58a6:	movw	r5, #65535	; 0xffff
    58aa:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    58ac:	strh	r0, [r1, #12]
    return !ls && next == end;
    58ae:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    58b0:	str	r0, [r4, #16]
    58b2:	cbnz	r3, 58f0 <ExFatFile::hashName(ExName_t*)+0x54>
    58b4:	ldrd	r2, r3, [r4, #4]
    58b8:	cmp	r2, r3
    58ba:	bne.n	58f0 <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    58bc:	subs	r0, #1
  fname->nameHash = hash;
    58be:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    58c0:	cmp	r0, #254	; 0xfe
    58c2:	ite	hi
    58c4:	movhi	r0, #0
    58c6:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    58c8:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    58ca:	bl	56b4 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    58ce:	lsls	r3, r6, #15
    58d0:	orr.w	r3, r3, r6, lsr #1
    58d4:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    58d8:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    58da:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    58dc:	ubfx	r3, r3, #1, #15
    58e0:	orr.w	r3, r3, r2, lsl #15
    58e4:	uxtah	r3, r0, r3
    fname->nameLength++;
    58e8:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    58ea:	uxth	r6, r3
    fname->nameLength++;
    58ec:	adds	r0, #1
    58ee:	b.n	58ae <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    58f0:	mov	r0, r4
    58f2:	bl	575c <FsName::get16()>
    if (u == 0XFFFF) {
    58f6:	cmp	r0, r5
    58f8:	bne.n	58ca <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    58fa:	movs	r0, #0
    58fc:	b.n	58c8 <ExFatFile::hashName(ExName_t*)+0x2c>

000058fe <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    58fe:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    5900:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5904:	sub	sp, #20
    5906:	mov	r4, r0
    5908:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    590a:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    590c:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    590e:	ldmia.w	r3, {r0, r1, r2}
    5912:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    5916:	lsls	r2, r7, #5
    5918:	mov	r1, r5
    591a:	ldr	r0, [r4, #32]
    591c:	bl	62f2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5920:	cmp	r0, #1
    5922:	bne.n	5932 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    5924:	mov	r2, r6
    5926:	mov	r1, r5
    5928:	ldr	r0, [r4, #32]
    592a:	bl	6258 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    592e:	add	sp, #20
    5930:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    5932:	movs	r0, #0
    5934:	b.n	592e <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00005936 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    5936:	push	{r4, lr}
    5938:	mov	r4, r0
  bool rtn = sync();
    593a:	bl	6814 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    593e:	movs	r3, #0
    5940:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    5944:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5948:	pop	{r4, pc}

0000594a <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    594a:	push	{r3, r4, r5, lr}
    594c:	mov	r5, r1
    594e:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5950:	add.w	r1, r0, #36	; 0x24
    5954:	movs	r2, #0
    5956:	ldr	r0, [r0, #32]
    5958:	bl	6258 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    595c:	cbz	r0, 5968 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    595e:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    5960:	strh	r3, [r5, #0]
    5962:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    5964:	movs	r0, #1
  *ptime = getLe16(df->createTime);
    5966:	strh	r3, [r4, #0]

 fail:
  return false;
}
    5968:	pop	{r3, r4, r5, pc}

0000596a <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    596a:	push	{r3, r4, r5, lr}
    596c:	mov	r5, r1
    596e:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5970:	add.w	r1, r0, #36	; 0x24
    5974:	movs	r2, #0
    5976:	ldr	r0, [r0, #32]
    5978:	bl	6258 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    597c:	cbz	r0, 5988 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    597e:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    5980:	strh	r3, [r5, #0]
    5982:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    5984:	movs	r0, #1
  *ptime = getLe16(df->modifyTime);
    5986:	strh	r3, [r4, #0]

 fail:
  return false;
}
    5988:	pop	{r3, r4, r5, pc}

0000598a <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    598a:	push	{r3, r4, r5, lr}
    598c:	mov	r5, r1
  if (isOpen()) {
    598e:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5992:	mov	r4, r0
  if (isOpen()) {
    5994:	cbnz	r1, 59ac <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    5996:	movs	r2, #56	; 0x38
    5998:	bl	a1d4 <memset>
  m_attributes = FILE_ATTR_ROOT;
    599c:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    599e:	movs	r0, #1
  m_vol = vol;
    59a0:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    59a2:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    59a6:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    59aa:	pop	{r3, r4, r5, pc}
  return false;
    59ac:	movs	r0, #0
    59ae:	b.n	59aa <ExFatFile::openRoot(ExFatVolume*)+0x20>

000059b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    59b0:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    59b2:	mov	r5, r1
    59b4:	ldrb.w	r4, [r1], #1
    59b8:	cmp	r4, #32
    59ba:	beq.n	59b2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    59bc:	ldr	r7, [pc, #108]	; (5a2c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    59be:	str	r5, [r2, #0]
  fname->end = path;
    59c0:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    59c2:	mov	r6, r5
    59c4:	ldrb.w	r4, [r6], #1
    59c8:	cbz	r4, 59ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    59ca:	cmp	r4, #47	; 0x2f
    59cc:	bne.n	59e6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    59ce:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    59d0:	ldrb.w	r1, [r5], #1
    59d4:	cmp	r1, #32
    59d6:	beq.n	59ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    59d8:	cmp	r1, #47	; 0x2f
    59da:	beq.n	59ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    59dc:	str	r4, [r3, #0]
  return hashName(fname);
    59de:	mov	r1, r2

 fail:
  return false;
}
    59e0:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    59e2:	b.w	589c <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    59e6:	cmp	r4, #60	; 0x3c
    59e8:	bhi.n	5a10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    59ea:	cmp	r4, #33	; 0x21
    59ec:	bhi.n	59fc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    59ee:	subs	r1, r4, #1
    59f0:	cmp	r1, #30
    59f2:	bls.n	5a0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    59f4:	cmp	r4, #32
    59f6:	bne.n	5a1c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    59f8:	mov	r5, r6
    59fa:	b.n	59c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    59fc:	sub.w	r1, r4, #34	; 0x22
    5a00:	uxtb	r1, r1
    5a02:	lsr.w	r1, r7, r1
    5a06:	lsls	r1, r1, #31
    5a08:	bpl.n	5a26 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    5a0a:	movs	r0, #0
    5a0c:	pop	{r4, r5, r6, r7}
    5a0e:	bx	lr
    5a10:	cmp	r4, #92	; 0x5c
    5a12:	beq.n	5a0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    5a14:	bhi.n	5a20 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    5a16:	subs	r4, #62	; 0x3e
    5a18:	cmp	r4, #1
    5a1a:	bls.n	5a0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    5a1c:	str	r6, [r2, #8]
    5a1e:	b.n	59f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5a20:	cmp	r4, #124	; 0x7c
    5a22:	beq.n	5a0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    5a24:	b.n	5a1c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    5a26:	cmp	r4, #46	; 0x2e
    5a28:	b.n	59f6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    5a2a:	nop
    5a2c:	.word	0x05002101

00005a30 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    5a30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a34:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5a38:	ldrb.w	r3, [r0, #51]	; 0x33
    5a3c:	sub	sp, #12
    5a3e:	mov	r4, r0
    5a40:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    5a42:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    5a44:	mov	r6, r2
  if (!isReadable()) {
    5a46:	bpl.n	5b10 <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5a48:	lsls	r0, r3, #25
    5a4a:	bmi.n	5a54 <ExFatFile::read(void*, unsigned int)+0x24>
    5a4c:	ldrb.w	r3, [r4, #49]	; 0x31
    5a50:	lsls	r1, r3, #28
    5a52:	bpl.n	5a6c <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    5a54:	ldrd	r2, r3, [r4]
    5a58:	ldrd	r1, r0, [r4, #16]
    5a5c:	adds	r5, r6, r2
    5a5e:	adc.w	r3, r3, #0
    5a62:	cmp	r1, r5
    5a64:	sbcs.w	r3, r0, r3
    5a68:	bcs.n	5a6c <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    5a6a:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5a6c:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5a70:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5a72:	vmov	s16, r3
    5a76:	b.n	5b5c <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5a78:	ldr	r0, [r4, #32]
    5a7a:	ldrd	r3, r2, [r4]
    5a7e:	ldr.w	r7, [r0, #1080]	; 0x438
    5a82:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5a84:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    5a88:	cbnz	r7, 5a9e <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    5a8a:	orrs	r3, r2
    5a8c:	bne.n	5ae8 <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5a8e:	ldrb.w	r3, [r4, #49]	; 0x31
    5a92:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5a94:	ite	mi
    5a96:	ldrmi.w	r3, [r0, #1076]	; 0x434
    5a9a:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    5a9c:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    5a9e:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5aa2:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5aa4:	ldr	r2, [r4, #24]
    5aa6:	ldrb.w	r1, [fp, #1093]	; 0x445
    5aaa:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5aac:	ldr.w	r2, [fp, #1068]	; 0x42c
    5ab0:	lsls	r5, r1
    5ab2:	add.w	r5, r5, r7, lsr #9
    5ab6:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    5ab8:	cmp.w	sl, #0
    5abc:	bne.n	5b22 <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5abe:	cmp.w	r8, #512	; 0x200
    5ac2:	bcc.n	5b22 <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5ac4:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5ac8:	cmp	r5, r2
    5aca:	beq.n	5b22 <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5acc:	cmp.w	r8, #1024	; 0x400
    5ad0:	bcs.n	5b70 <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    5ad2:	ldr.w	r0, [fp, #532]	; 0x214
    5ad6:	mov	r2, r9
    5ad8:	mov	r1, r5
    5ada:	ldr	r3, [r0, #0]
    5adc:	ldr	r3, [r3, #16]
    5ade:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5ae0:	cbz	r0, 5b10 <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    5ae2:	mov.w	r7, #512	; 0x200
    5ae6:	b.n	5b48 <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    5ae8:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    5aec:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    5aee:	lsls	r3, r3, #25
    5af0:	bpl.n	5af8 <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    5af2:	adds	r1, #1
    5af4:	str	r1, [r4, #24]
    5af6:	b.n	5a9e <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5af8:	vmov	r2, s16
    5afc:	bl	628c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5b00:	cmp	r0, #0
    5b02:	blt.n	5b10 <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    5b04:	bne.n	5a9e <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    5b06:	ldrb.w	r3, [r4, #49]	; 0x31
    5b0a:	tst.w	r3, #80	; 0x50
    5b0e:	bne.n	5b62 <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    5b10:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    5b14:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    5b18:	orr.w	r3, r3, #2
    5b1c:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5b20:	b.n	5b66 <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    5b22:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    5b26:	movs	r2, #0
    5b28:	mov	r1, r5
    5b2a:	add.w	r0, fp, #528	; 0x210
    5b2e:	cmp	r7, r8
    5b30:	it	cs
    5b32:	movcs	r7, r8
    5b34:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5b38:	cmp	r0, #0
    5b3a:	beq.n	5b10 <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    5b3c:	add.w	r1, r0, sl
    5b40:	mov	r2, r7
    5b42:	mov	r0, r9
    5b44:	bl	a218 <memcpy>
    dst += n;
    5b48:	add	r9, r7
    toRead -= n;
    5b4a:	sub.w	r8, r8, r7
    m_curPosition += n;
    5b4e:	ldrd	r3, r2, [r4]
    5b52:	adds	r3, r3, r7
    5b54:	adc.w	r2, r2, #0
    5b58:	strd	r3, r2, [r4]
  while (toRead) {
    5b5c:	cmp.w	r8, #0
    5b60:	bne.n	5a78 <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    5b62:	sub.w	r0, r6, r8
}
    5b66:	add	sp, #12
    5b68:	vpop	{d8}
    5b6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5b70:	movs	r3, #1
    5b72:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5b74:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5b78:	subs	r3, r3, r0
    5b7a:	cmp	r3, r1
    5b7c:	it	cs
    5b7e:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    5b80:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    5b82:	mov.w	r7, r3, lsl #9
    5b86:	bls.n	5b9e <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    5b88:	ldr.w	r0, [fp, #532]	; 0x214
    5b8c:	mov	r1, r5
    5b8e:	ldr	r2, [r0, #0]
    5b90:	ldr.w	fp, [r2, #20]
    5b94:	mov	r2, r9
    5b96:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5b98:	cmp	r0, #0
    5b9a:	bne.n	5b48 <ExFatFile::read(void*, unsigned int)+0x118>
    5b9c:	b.n	5b10 <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    5b9e:	adds	r1, r5, r3
    5ba0:	cmp	r2, r1
    5ba2:	bcs.n	5b88 <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    5ba4:	add.w	r0, fp, #528	; 0x210
    5ba8:	str	r3, [sp, #4]
    5baa:	bl	5618 <FsCache::sync()>
    5bae:	ldr	r3, [sp, #4]
    5bb0:	cmp	r0, #0
    5bb2:	bne.n	5b88 <ExFatFile::read(void*, unsigned int)+0x158>
    5bb4:	b.n	5b10 <ExFatFile::read(void*, unsigned int)+0xe0>

00005bb6 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5bb6:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5bb8:	movs	r2, #1
    5bba:	add.w	r1, sp, #7
    5bbe:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    5bc0:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    5bc2:	ldrd	r6, r7, [r0]
    5bc6:	bl	5a30 <ExFatFile::read(void*, unsigned int)>
    5bca:	cmp	r0, #1
  m_curCluster = curCluster;
    5bcc:	str	r5, [r4, #24]
    5bce:	ite	eq
    5bd0:	ldrbeq.w	r0, [sp, #7]
    5bd4:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    5bd8:	strd	r6, r7, [r4]
}
    5bdc:	add	sp, #12
    5bde:	pop	{r4, r5, r6, r7, pc}

00005be0 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5be0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    5be4:	ldrb.w	ip, [r0, #49]	; 0x31
    5be8:	mov	r4, r0
    5bea:	mov	r6, r2
    5bec:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5bee:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    5bf2:	cmp.w	ip, #0
    5bf6:	beq.n	5cb0 <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5bf8:	ldrd	r0, r3, [r0]
    5bfc:	cmp	r3, r7
    5bfe:	it	eq
    5c00:	cmpeq	r0, r2
    5c02:	beq.n	5c12 <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    5c04:	orrs.w	r2, r6, r7
    5c08:	bne.n	5c16 <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    5c0a:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    5c0c:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    5c0e:	strd	r6, r7, [r4]
    return true;
    5c12:	movs	r0, #1
    5c14:	b.n	5cb6 <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    5c16:	tst.w	ip, #8
    5c1a:	beq.n	5c26 <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    5c1c:	ldrd	r1, r2, [r4, #16]
    5c20:	cmp	r1, r6
    5c22:	sbcs	r2, r7
    5c24:	bcc.n	5cb0 <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    5c26:	ldr.w	lr, [r4, #32]
    5c2a:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5c2c:	ldrb.w	r1, [lr, #1093]	; 0x445
    5c30:	adc.w	sl, r7, #4294967295
    5c34:	adds	r1, #9
    5c36:	uxtb	r1, r1
    5c38:	rsb	r9, r1, #32
    5c3c:	sub.w	r2, r1, #32
    5c40:	lsrs	r5, r1
    5c42:	lsl.w	r9, sl, r9
    5c46:	lsr.w	r2, sl, r2
    5c4a:	sub.w	sl, r1, #32
    5c4e:	orr.w	r5, r5, r9
    5c52:	rsb	r9, r1, #32
    5c56:	orrs	r5, r2
  if (isContiguous()) {
    5c58:	ldrb.w	r2, [r4, #51]	; 0x33
    5c5c:	tst.w	r2, #64	; 0x40
    5c60:	beq.n	5c68 <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    5c62:	ldr	r3, [r4, #28]
    5c64:	add	r3, r5
    5c66:	b.n	5c0c <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5c68:	adds.w	fp, r0, #4294967295
    5c6c:	adc.w	r2, r3, #4294967295
    5c70:	lsr.w	r1, fp, r1
    5c74:	lsl.w	r9, r2, r9
    5c78:	lsr.w	r2, r2, sl
    5c7c:	orr.w	r1, r1, r9
    5c80:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    5c82:	cmp	r5, r1
    5c84:	bcc.n	5c8a <ExFatFile::seekSet(unsigned long long)+0xaa>
    5c86:	orrs	r3, r0
    5c88:	bne.n	5cba <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5c8a:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5c8e:	ite	ne
    5c90:	ldrne.w	r3, [lr, #1076]	; 0x434
    5c94:	ldreq	r3, [r4, #28]
    5c96:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5c98:	add.w	r9, r4, #24
  while (nNew--) {
    5c9c:	cmp	r5, #0
    5c9e:	beq.n	5c0e <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5ca0:	mov	r2, r9
    5ca2:	ldr	r1, [r4, #24]
    5ca4:	ldr	r0, [r4, #32]
    5ca6:	subs	r5, #1
    5ca8:	bl	628c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5cac:	cmp	r0, #0
    5cae:	bgt.n	5c9c <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    5cb0:	movs	r0, #0
  m_curCluster = tmp;
    5cb2:	str.w	r8, [r4, #24]
}
    5cb6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    5cba:	subs	r5, r5, r1
    5cbc:	b.n	5c98 <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00005cc0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5cc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cc4:	mov	sl, r3
    5cc6:	ldrb.w	r3, [r0, #49]	; 0x31
    5cca:	sub	sp, #52	; 0x34
    5ccc:	mov	r4, r0
    5cce:	mov	r6, r1
    5cd0:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    5cd2:	cmp	r3, #0
    5cd4:	bne.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5cd6:	ldrb.w	r3, [r1, #49]	; 0x31
    5cda:	tst.w	r3, #80	; 0x50
    5cde:	beq.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5ce0:	and.w	r9, sl, #3
    5ce4:	cmp.w	r9, #3
    5ce8:	beq.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    5cea:	add.w	r9, r9, #1
    5cee:	and.w	r3, sl, #8
    5cf2:	orr.w	r9, r9, r3
  if (fname) {
    5cf6:	cmp	r2, #0
    5cf8:	beq.n	5d6c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    5cfa:	ldr	r7, [r2, #16]
    5cfc:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5cfe:	movs	r2, #0
    5d00:	mov	r0, r1
    5d02:	adds	r7, #14
    5d04:	udiv	r7, r7, r3
    5d08:	adds	r7, #2
    5d0a:	movs	r3, #0
    5d0c:	uxtb	r7, r7
    5d0e:	bl	5be0 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    5d12:	mov.w	fp, #0
    5d16:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    5d18:	movs	r2, #32
    5d1a:	add	r1, sp, #16
    5d1c:	mov	r0, r6
    5d1e:	bl	5a30 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5d22:	cmp	r0, #0
    5d24:	beq.w	5eae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    5d28:	cmp	r0, #32
    5d2a:	bne.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    5d2c:	ldrsb.w	r1, [sp, #16]
    5d30:	ldrb.w	r2, [sp, #16]
    5d34:	cmp	r1, #0
    5d36:	blt.n	5d76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    5d38:	cmp.w	fp, #0
    5d3c:	bne.n	5d4a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5d3e:	ldr	r1, [r6, #0]
    5d40:	sub.w	r3, r1, #32
    5d44:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5d46:	ldr	r3, [r6, #24]
    5d48:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    5d4a:	cmp	fp, r7
        freeCount++;
    5d4c:	itt	cc
    5d4e:	addcc.w	r3, fp, #1
    5d52:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    5d56:	cbnz	r2, 5d70 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    5d58:	cmp	r5, #0
    5d5a:	bne.w	5eae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    5d5e:	mov.w	r8, #0
    5d62:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    5d66:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    5d6a:	b.n	5e42 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    5d6c:	movs	r7, #3
    5d6e:	b.n	5d12 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    5d70:	movs	r0, #0
    5d72:	mov	r8, r0
    5d74:	b.n	5d18 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    5d76:	cmp.w	r8, #0
    5d7a:	bne.n	5dcc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    5d7c:	cmp	fp, r7
    5d7e:	it	cc
    5d80:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    5d84:	cmp	r2, #133	; 0x85
    5d86:	bne.n	5d70 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    5d88:	movs	r2, #56	; 0x38
    5d8a:	mov	r1, r8
    5d8c:	mov	r0, r4
    5d8e:	bl	a1d4 <memset>
      m_setCount = dirFile->setCount;
    5d92:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5d96:	ldrb.w	r1, [sp, #20]
      inSet = true;
    5d9a:	movs	r0, #1
      m_setCount = dirFile->setCount;
    5d9c:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5da0:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5da4:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    5da6:	it	pl
    5da8:	orrpl.w	r2, r2, #8
    5dac:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    5db0:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    5db2:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    5db4:	ldr	r2, [r6, #24]
    5db6:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5db8:	ldr	r2, [r6, #0]
    5dba:	subs	r2, #32
    5dbc:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5dbe:	ldrb.w	r2, [r6, #51]	; 0x33
    5dc2:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    5dc6:	strb.w	r2, [r4, #44]	; 0x2c
    5dca:	b.n	5d72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5dcc:	cmp	r2, #192	; 0xc0
    5dce:	bne.n	5e72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5dd0:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    5dd4:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5dd8:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    5dda:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5dde:	it	mi
    5de0:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    5de4:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5de8:	it	mi
    5dea:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    5dee:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    5df0:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    5df4:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    5df6:	strd	r0, r1, [r4, #8]
      if (!fname) {
    5dfa:	cbnz	r5, 5e4a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    5dfc:	tst.w	sl, #2048	; 0x800
    5e00:	bne.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    5e02:	tst.w	sl, #17408	; 0x4400
    5e06:	bne.n	5e10 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    5e08:	ldrb.w	r3, [r4, #51]	; 0x33
    5e0c:	lsls	r0, r3, #30
    5e0e:	bpl.n	5e1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    5e10:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    5e14:	lsls	r1, r3, #27
    5e16:	bmi.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5e18:	lsls	r2, r3, #31
    5e1a:	bmi.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    5e1c:	tst.w	sl, #1024	; 0x400
    5e20:	beq.n	5e9c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    5e22:	ldrb.w	r3, [r4, #51]	; 0x33
    5e26:	lsls	r3, r3, #30
    5e28:	bpl.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    5e2a:	movs	r2, #0
    5e2c:	movs	r3, #0
    5e2e:	mov	r0, r4
    5e30:	bl	5be0 <ExFatFile::seekSet(unsigned long long)>
    5e34:	cmp	r0, #0
    5e36:	beq.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5e38:	mov	r0, r4
    5e3a:	bl	6aa0 <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5e3e:	cmp	r0, #0
    5e40:	beq.n	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    5e42:	mov	r0, r8
    5e44:	add	sp, #52	; 0x34
    5e46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    5e4a:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    5e4c:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    5e50:	ldr	r1, [r5, #16]
    next = begin;
    5e52:	str	r2, [r5, #4]
    5e54:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    5e58:	strh	r3, [r5, #12]
    5e5a:	cmp	r1, r2
    5e5c:	bne.n	5d70 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    5e5e:	ldrh	r0, [r5, #20]
    5e60:	ldrh.w	r2, [sp, #20]
    5e64:	sub.w	ip, r0, r2
    5e68:	rsbs	r0, ip, #0
    5e6c:	adc.w	r0, r0, ip
    5e70:	b.n	5d72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    5e72:	cmp	r2, #193	; 0xc1
    5e74:	bne.w	5d70 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    5e78:	mov	r2, r5
    5e7a:	add	r1, sp, #16
    5e7c:	mov	r0, r4
    5e7e:	bl	57a4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    5e82:	cmp	r0, #0
    5e84:	beq.w	5d72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    5e88:	ldrh	r2, [r5, #12]
    5e8a:	cmp	r2, #0
    5e8c:	bne.w	5d72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5e90:	ldrd	r1, r2, [r5, #4]
    5e94:	cmp	r1, r2
    5e96:	bne.w	5d72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5e9a:	b.n	5dfc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5e9c:	tst.w	sl, #16384	; 0x4000
    5ea0:	beq.n	5e42 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    5ea2:	mov	r0, r4
    5ea4:	ldrd	r2, r3, [r4, #16]
    5ea8:	bl	5be0 <ExFatFile::seekSet(unsigned long long)>
    5eac:	b.n	5e3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5eae:	tst.w	sl, #512	; 0x200
    5eb2:	beq.w	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5eb6:	tst.w	r9, #2
    5eba:	beq.w	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5ebe:	cmp	r5, #0
    5ec0:	beq.w	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    5ec4:	cmp	fp, r7
    5ec6:	bcc.n	5f16 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    5ec8:	movs	r2, #56	; 0x38
    5eca:	movs	r1, #0
    5ecc:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5ece:	ldrb.w	r8, [r6, #51]	; 0x33
    5ed2:	bl	a1d4 <memset>
  ExFatVolume* volume() const {return m_vol;}
    5ed6:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    5ed8:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    5edc:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    5ee0:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    5ee2:	movs	r3, #8
  m_dirPos = freePos;
    5ee4:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    5ee8:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    5eec:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    5ef0:	mov.w	r8, #0
  m_dirPos = freePos;
    5ef4:	ldr	r3, [sp, #0]
    5ef6:	str	r3, [r4, #36]	; 0x24
    5ef8:	ldr	r3, [sp, #4]
    5efa:	str	r3, [r4, #40]	; 0x28
    next = begin;
    5efc:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    5efe:	strh.w	r8, [r5, #12]
    next = begin;
    5f02:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5f04:	uxtb.w	fp, r8
    5f08:	cmp	r7, fp
    5f0a:	bhi.n	5f5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    5f0c:	mov	r0, r4
    5f0e:	bl	6814 <ExFatFile::sync()>
    5f12:	mov	r8, r0
    5f14:	b.n	5e42 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    5f16:	movs	r2, #32
    5f18:	add	r1, sp, #16
    5f1a:	mov	r0, r6
    5f1c:	bl	5a30 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5f20:	cbnz	r0, 5f38 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    5f22:	mov	r0, r6
      curCluster = dir->m_curCluster;
    5f24:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    5f28:	bl	6856 <ExFatFile::addDirCluster()>
    5f2c:	cmp	r0, #0
    5f2e:	beq.w	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    5f32:	str.w	r8, [r6, #24]
      continue;
    5f36:	b.n	5ec4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    5f38:	cmp	r0, #32
    5f3a:	bne.w	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    5f3e:	cmp.w	fp, #0
    5f42:	bne.n	5f50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5f44:	ldr	r2, [r6, #0]
    5f46:	sub.w	r3, r2, #32
    5f4a:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    5f4c:	ldr	r3, [r6, #24]
    5f4e:	str	r3, [sp, #0]
    freeCount++;
    5f50:	add.w	r3, fp, #1
    5f54:	uxtb.w	fp, r3
    5f58:	b.n	5ec4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5f5a:	movs	r2, #1
    5f5c:	mov	r1, fp
    5f5e:	mov	r0, r4
    5f60:	bl	58fe <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5f64:	mov	r6, r0
    5f66:	cmp	r0, #0
    5f68:	beq.w	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5f6c:	ldrsb.w	r2, [r0]
    5f70:	cmp	r2, #0
    5f72:	blt.w	5d5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    5f76:	movs	r2, #32
    5f78:	movs	r1, #0
    5f7a:	bl	a1d4 <memset>
    if (i == 0) {
    5f7e:	cmp.w	fp, #0
    5f82:	bne.n	5fc6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    5f84:	movs	r3, #133	; 0x85
    5f86:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    5f88:	ldr	r3, [pc, #128]	; (600c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    5f8a:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5f8e:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    5f92:	ldr	r3, [r3, #0]
    5f94:	cbz	r3, 5fba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    5f96:	add.w	r2, sp, #11
    5f9a:	add.w	r1, sp, #14
    5f9e:	add	r0, sp, #12
    5fa0:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5fa2:	ldrh.w	r3, [sp, #12]
    5fa6:	strh	r3, [r6, #10]
    5fa8:	ldrh.w	r3, [sp, #14]
    5fac:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    5fae:	ldrb.w	r3, [sp, #11]
    5fb2:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5fb4:	add.w	r8, r8, #1
    5fb8:	b.n	5f04 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    5fba:	movw	r3, #22561	; 0x5821
    5fbe:	strh	r3, [r6, #10]
    5fc0:	strh	r3, [r6, #14]
    5fc2:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    5fc4:	b.n	5fb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    5fc6:	cmp.w	fp, #1
    5fca:	bne.n	5fe6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5fcc:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    5fd0:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    5fd2:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    5fd6:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5fd8:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    5fdc:	ldr	r3, [r5, #16]
    5fde:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    5fe0:	ldrh	r3, [r5, #20]
    5fe2:	strh	r3, [r6, #4]
}
    5fe4:	b.n	5fb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    5fe6:	movs	r3, #193	; 0xc1
    5fe8:	add.w	fp, r6, #30
    5fec:	strb	r3, [r6, #0]
    return !ls && next == end;
    5fee:	ldrh	r2, [r5, #12]
    5ff0:	cbnz	r2, 5ffa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    5ff2:	ldrd	r1, r2, [r5, #4]
    5ff6:	cmp	r1, r2
    5ff8:	beq.n	5fb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    5ffa:	mov	r0, r5
    5ffc:	bl	575c <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    6000:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    6004:	cmp	fp, r6
    6006:	bne.n	5fee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    6008:	b.n	5fb4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    600a:	nop
    600c:	.word	0x200147fc

00006010 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    6010:	push	{r4, r5, r6, r7, lr}
    6012:	mov	r7, r3
    6014:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    6016:	movs	r3, #0
    6018:	mov	r5, r0
    601a:	mov	r4, r1
    601c:	str	r2, [sp, #4]
    601e:	str	r3, [sp, #80]	; 0x50
class FsName {
    6020:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    6024:	ldrb.w	r3, [r0, #49]	; 0x31
    6028:	cbz	r3, 6030 <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    602a:	movs	r0, #0
}
    602c:	add	sp, #92	; 0x5c
    602e:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    6030:	ldrb.w	r1, [r1, #49]	; 0x31
    6034:	tst.w	r1, #80	; 0x50
    6038:	beq.n	602a <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    603a:	ldrb	r1, [r2, #0]
    603c:	cmp	r1, #47	; 0x2f
    603e:	bne.n	607a <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    6040:	mov	r0, r2
    while (isDirSeparator(*path)) {
    6042:	ldrb.w	r1, [r2], #1
    6046:	cmp	r1, #47	; 0x2f
    6048:	beq.n	605c <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    604a:	cbz	r3, 604e <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    604c:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    604e:	ldr	r4, [r4, #32]
    if (*path == 0) {
    6050:	cbnz	r1, 6060 <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    6052:	mov	r1, r4
    6054:	mov	r0, r5
    6056:	bl	598a <ExFatFile::openRoot(ExFatVolume*)>
    605a:	b.n	602c <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    605c:	movs	r3, #1
    605e:	b.n	6040 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    6060:	movs	r2, #56	; 0x38
    6062:	movs	r1, #0
    6064:	add	r0, sp, #32
    6066:	bl	a1d4 <memset>
  m_attributes = FILE_ATTR_ROOT;
    606a:	movs	r3, #64	; 0x40
  m_vol = vol;
    606c:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    606e:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    6070:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    6074:	movs	r3, #1
    6076:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    607a:	add	r3, sp, #4
    607c:	add	r2, sp, #8
    607e:	ldr	r1, [sp, #4]
    6080:	mov	r0, r5
    6082:	bl	59b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6086:	cmp	r0, #0
    6088:	beq.n	602a <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    608a:	ldr	r3, [sp, #4]
    608c:	ldrb	r3, [r3, #0]
    608e:	cbz	r3, 60c8 <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    6090:	movs	r3, #0
    6092:	add	r2, sp, #8
    6094:	mov	r1, r4
    6096:	mov	r0, r5
    6098:	bl	5cc0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    609c:	cmp	r0, #0
    609e:	beq.n	602a <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    60a0:	add	r6, sp, #32
    60a2:	mov	r2, r5
    60a4:	add.w	ip, r5, #48	; 0x30
    60a8:	mov	r4, r6
    60aa:	ldr	r0, [r2, #0]
    60ac:	adds	r2, #8
    60ae:	ldr.w	r1, [r2, #-4]
    60b2:	mov	r3, r6
    60b4:	cmp	r2, ip
    60b6:	stmia	r3!, {r0, r1}
    60b8:	mov	r6, r3
    60ba:	bne.n	60aa <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    60bc:	ldr	r0, [r2, #0]
    60be:	str	r0, [r3, #0]
    close();
    60c0:	mov	r0, r5
    60c2:	bl	5936 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    60c6:	b.n	607a <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    60c8:	mov	r3, r7
    60ca:	add	r2, sp, #8
    60cc:	mov	r1, r4
    60ce:	mov	r0, r5
    60d0:	bl	5cc0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    60d4:	b.n	602c <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

000060d6 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    60d6:	cbz	r1, 60e0 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    60d8:	add.w	r1, r1, #1096	; 0x448
    60dc:	b.w	6010 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    60e0:	mov	r0, r1
    60e2:	bx	lr

000060e4 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    60e4:	mov	r3, r2
    60e6:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    60e8:	ldrb.w	r2, [r0, #49]	; 0x31
    60ec:	cbnz	r2, 6108 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    60ee:	ldrb.w	r2, [r1, #49]	; 0x31
    60f2:	tst.w	r2, #80	; 0x50
    60f6:	beq.n	6108 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    60f8:	ldr	r2, [r1, #0]
    60fa:	ands.w	r2, r2, #31
    60fe:	bne.n	6108 <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    6100:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    6104:	b.w	5cc0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    6108:	movs	r0, #0
    610a:	ldr.w	r4, [sp], #4
    610e:	bx	lr

00006110 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6110:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6114:	mov	r7, r0
    6116:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6118:	mov	sl, r1
    611a:	cbz	r1, 6150 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    611c:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    611e:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    6122:	movs	r4, #1
    start = 0;
    6124:	cmp	r3, r5
    6126:	it	ls
    6128:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    612a:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    612e:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    6132:	mov	r8, r5
  uint32_t endAlloc = start;
    6134:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    6136:	lsls	r4, r3
    6138:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    613a:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    613e:	movs	r2, #0
    6140:	mov	r0, r7
    6142:	add.w	r1, r1, r6, lsr #12
    6146:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    614a:	cbnz	r0, 617e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    614c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6150:	ldr.w	r5, [r0, #1056]	; 0x420
    6154:	b.n	611e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    6156:	mov	r8, r6
        if (endAlloc == start) {
    6158:	cmp	r5, r6
    615a:	beq.n	61b4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    615c:	ldr.w	r2, [r7, #1072]	; 0x430
    6160:	cmp	r2, r6
    6162:	bls.n	61a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    6164:	lsls	r4, r4, #1
    6166:	ands.w	r4, r4, #255	; 0xff
    616a:	bne.n	6182 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    616c:	add.w	r3, r9, #1
    6170:	movs	r4, #1
    i = 0;
    6172:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    6176:	cmp.w	r3, #512	; 0x200
    617a:	bcs.n	613a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    617c:	mov	r9, r3
        if (!(mask & cache[i])) {
    617e:	ldrb.w	r3, [r0, r9]
    6182:	tst	r3, r4
        endAlloc++;
    6184:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    6188:	bne.n	6156 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    618a:	sub.w	r2, r6, r8
    618e:	cmp	r2, fp
    6190:	bne.n	6158 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    6192:	cmp.w	sl, #0
    6196:	bne.n	61a2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    6198:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    619c:	it	eq
    619e:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    61a2:	add.w	r0, r8, #2
    61a6:	b.n	614c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    61a8:	mov.w	r8, #0
          i = sectorSize;
    61ac:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    61b0:	mov	r6, r8
    61b2:	b.n	616c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    61b4:	movs	r0, #1
    61b6:	b.n	614c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

000061b8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    61b8:	subs	r1, #2
                                  uint32_t count, bool value) {
    61ba:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    61be:	mov	r5, r0
    61c0:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    61c2:	ldr.w	r0, [r0, #1072]	; 0x430
    61c6:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    61c8:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    61ca:	cmp	r3, r0
    61cc:	bhi.n	624e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    61ce:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    61d2:	cbz	r7, 6244 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    61d4:	cmp	r1, r2
    61d6:	bhi.n	61e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    61d8:	cmp	r3, r2
    61da:	bls.n	61e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    61dc:	cmp	r3, r0
    61de:	it	cs
    61e0:	movcs	r3, #0
    61e2:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    61e6:	and.w	r3, r1, #7
    61ea:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    61ee:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    61f2:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    61f6:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    61fa:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    61fe:	add.w	r8, r3, r1, lsr #12
    6202:	movs	r2, #1
    6204:	mov	r1, r8
    6206:	mov	r0, r5
    6208:	add	r8, r2
    620a:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    620e:	cbz	r0, 624e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    6210:	adds	r3, r0, r4
    6212:	mov	r1, r9
    6214:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    6218:	ldrb	r2, [r3, #0]
    621a:	tst	r2, r1
    621c:	ite	ne
    621e:	movne	r4, #1
    6220:	moveq	r4, #0
    6222:	cmp	r4, r7
    6224:	beq.n	624e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    6226:	eors	r2, r1
        if (--count == 0) {
    6228:	subs	r6, #1
        cache[i] ^= mask;
    622a:	strb	r2, [r3, #0]
        if (--count == 0) {
    622c:	beq.n	6254 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    622e:	lsls	r1, r1, #1
    6230:	ands.w	r1, r1, #255	; 0xff
    6234:	bne.n	6218 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    6236:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    6238:	mov	r4, r1
    623a:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    623c:	cmp	r0, r3
      mask = 1;
    623e:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    6240:	bne.n	6218 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    6242:	b.n	6202 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    6244:	cmp	r1, r2
      m_bitmapStart = start;
    6246:	it	cc
    6248:	strcc.w	r1, [r5, #1056]	; 0x420
    624c:	b.n	61e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    624e:	movs	r0, #0
}
    6250:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    6254:	movs	r0, #1
    6256:	b.n	6250 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

00006258 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6258:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    625a:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    625e:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    6260:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    6262:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    6266:	ldrb.w	r5, [r0, #565]	; 0x235
    626a:	ands	r1, r3
    626c:	ldr	r3, [r4, #0]
    626e:	subs	r3, #2
    6270:	lsls	r3, r5
    6272:	add.w	r3, r3, r1, lsr #9
    6276:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    627a:	add	r1, r3
    627c:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    6280:	cbz	r0, 628a <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    6282:	ldr	r3, [r4, #4]
    6284:	ubfx	r3, r3, #0, #9
    6288:	add	r0, r3
}
    628a:	pop	{r3, r4, r5, pc}

0000628c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    628c:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    628e:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6292:	mov	r4, r1
    6294:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    6296:	adds	r3, #1
    6298:	cmp	r3, r1
    629a:	bcs.n	62a2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    629c:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    62a0:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    62a2:	ldr.w	r1, [r0, #1060]	; 0x424
    62a6:	movs	r2, #0
    62a8:	add.w	r0, r0, #528	; 0x210
    62ac:	add.w	r1, r1, r4, lsr #7
    62b0:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    62b4:	cmp	r0, #0
    62b6:	beq.n	629c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    62b8:	lsls	r4, r4, #2
    62ba:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    62be:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    62c0:	adds	r2, r3, #1
  return 1;
    62c2:	itet	ne
    62c4:	movne	r0, #1
    return 0;
    62c6:	moveq	r0, #0
  *value = next;
    62c8:	strne	r3, [r5, #0]
  return 1;
    62ca:	b.n	62a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

000062cc <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    62cc:	push	{r0, r1, r2, r4, r5, lr}
    62ce:	mov	r5, r0
  uint32_t n = 0;
    62d0:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    62d2:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    62d4:	add	r2, sp, #4
    62d6:	ldr	r1, [sp, #4]
    62d8:	mov	r0, r5
    62da:	bl	628c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    62de:	cmp	r0, #0
    62e0:	blt.n	62ee <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    62e2:	add.w	r4, r4, #1
  } while (status);
    62e6:	bne.n	62d4 <ExFatPartition::chainSize(unsigned long)+0x8>
}
    62e8:	mov	r0, r4
    62ea:	add	sp, #12
    62ec:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    62ee:	movs	r4, #0
    62f0:	b.n	62e8 <ExFatPartition::chainSize(unsigned long)+0x1c>

000062f2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    62f2:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    62f4:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    62f6:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    62f8:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    62fc:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    62fe:	ands	r4, r3
    6300:	add	r4, r2
  pos->position += offset;
    6302:	add	r2, r3
    6304:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6306:	ldrb.w	r3, [r0, #1093]	; 0x445
    630a:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    630c:	uxtb	r3, r3
    630e:	lsrs	r4, r3
  while (tmp--) {
    6310:	cbnz	r4, 6316 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    6312:	movs	r0, #1
    6314:	b.n	6330 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    6316:	ldrb	r3, [r5, #8]
      pos->cluster++;
    6318:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    631a:	cbz	r3, 6324 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    631c:	adds	r1, #1
    631e:	str	r1, [r5, #0]
    6320:	subs	r4, #1
    6322:	b.n	6310 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    6324:	mov	r2, r5
    6326:	mov	r0, r6
    6328:	bl	628c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    632c:	cmp	r0, #1
    632e:	beq.n	6320 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    6330:	pop	{r4, r5, r6, pc}

00006332 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6332:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6334:	push	{r3, r4, r5, lr}
    6336:	mov	r4, r1
    6338:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    633a:	bhi.n	6340 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    633c:	movs	r0, #0
}
    633e:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6340:	ldr.w	r3, [r0, #1072]	; 0x430
    6344:	adds	r3, #1
    6346:	cmp	r3, r1
    6348:	bcc.n	633c <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    634a:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    634e:	movs	r2, #1
    6350:	add.w	r0, r0, #528	; 0x210
    6354:	add.w	r1, r1, r4, lsr #7
    6358:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    635c:	cmp	r0, #0
    635e:	beq.n	633c <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    6360:	lsls	r4, r4, #2
    6362:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6366:	str	r5, [r0, r4]
  return true;
    6368:	movs	r0, #1
    636a:	b.n	633e <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

0000636c <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    636c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6370:	mov	r7, r0
    6372:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    6374:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    6376:	add	r2, sp, #4
    6378:	mov	r1, r4
    637a:	mov	r0, r7
    637c:	bl	628c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    6380:	subs	r6, r0, #0
    6382:	bge.n	638e <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    6384:	movs	r5, #0
}
    6386:	mov	r0, r5
    6388:	add	sp, #8
    638a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    638e:	movs	r2, #0
    6390:	mov	r1, r4
    6392:	mov	r0, r7
    6394:	bl	6332 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6398:	mov	r5, r0
    639a:	cmp	r0, #0
    639c:	beq.n	6384 <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    639e:	adds	r2, r4, #1
    63a0:	cbz	r6, 63a8 <ExFatPartition::freeChain(unsigned long)+0x3c>
    63a2:	ldr	r3, [sp, #4]
    63a4:	cmp	r3, r2
    63a6:	beq.n	63be <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    63a8:	movs	r3, #0
    63aa:	sub.w	r2, r2, r8
    63ae:	mov	r1, r8
    63b0:	mov	r0, r7
    63b2:	bl	61b8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    63b6:	cmp	r0, #0
    63b8:	beq.n	6384 <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    63ba:	ldr.w	r8, [sp, #4]
    cluster = next;
    63be:	ldr	r4, [sp, #4]
  } while (status);
    63c0:	cmp	r6, #0
    63c2:	bne.n	6376 <ExFatPartition::freeChain(unsigned long)+0xa>
    63c4:	b.n	6386 <ExFatPartition::freeChain(unsigned long)+0x1a>

000063c6 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    63c6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    63ca:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    63cc:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    63ce:	ldr.w	r7, [r0, #1068]	; 0x42c
    63d2:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    63d6:	mov	r5, r4
    63d8:	mov	r1, r7
    63da:	movs	r2, #0
    63dc:	mov	r0, r8
    63de:	adds	r7, #1
    63e0:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    63e4:	cbz	r0, 6402 <ExFatPartition::freeClusterCount()+0x3c>
    63e6:	subs	r0, #1
    63e8:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    63ec:	ldrb.w	r1, [r0, #1]!
    63f0:	cmp	r1, #255	; 0xff
    63f2:	bne.n	6406 <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    63f4:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    63f6:	adds	r5, #8
      if (nc >= m_clusterCount) {
    63f8:	ldr.w	r3, [r6, #1072]	; 0x430
    63fc:	cmp	r3, r5
    63fe:	bhi.n	6420 <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    6400:	subs	r0, r3, r4
      }
    }
  }
}
    6402:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    6406:	cmp	r1, #0
    6408:	beq.n	63f6 <ExFatPartition::freeClusterCount()+0x30>
    640a:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    640c:	movs	r3, #1
          if ((mask & cache[i])) {
    640e:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6410:	mov.w	r3, r3, lsl #1
            usedCount++;
    6414:	it	ne
    6416:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6418:	subs	r2, #1
    641a:	uxtb	r3, r3
    641c:	bne.n	640e <ExFatPartition::freeClusterCount()+0x48>
    641e:	b.n	63f6 <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    6420:	cmp	r5, ip
    6422:	bne.n	63ec <ExFatPartition::freeClusterCount()+0x26>
    6424:	b.n	63d8 <ExFatPartition::freeClusterCount()+0x12>
	...

00006428 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6428:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    642a:	mov.w	r3, #4294967295
    642e:	mov	r6, r2
    6430:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    6434:	movs	r2, #0
  m_blockDev = dev;
    6436:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    643a:	mov	r4, r0
    m_blockDev = blockDev;
    643c:	str	r1, [r0, #4]
    643e:	str.w	r1, [r0, #532]	; 0x214
    6442:	mov	r1, r2
  m_fatType = 0;
    6444:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    6448:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    644a:	str	r3, [r0, #12]
    m_status = 0;
    644c:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6450:	str.w	r3, [r0, #540]	; 0x21c
    6454:	mov	r0, r7
    6456:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    645a:	cmp	r6, #4
    645c:	mov	r5, r0
    645e:	bls.n	6464 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    6460:	movs	r0, #0
}
    6462:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    6464:	cmp	r0, #0
    6466:	beq.n	6460 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    6468:	cbz	r6, 6498 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    646a:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    646c:	add.w	r3, r0, r3, lsl #4
    6470:	ldrb.w	r2, [r3, #446]	; 0x1be
    6474:	ands.w	r2, r2, #127	; 0x7f
    6478:	bne.n	6460 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    647a:	ldrb.w	r3, [r3, #450]	; 0x1c2
    647e:	cmp	r3, #0
    6480:	beq.n	6460 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    6482:	add.w	r6, r0, r6, lsl #4
    6486:	mov	r0, r7
    6488:	ldr.w	r6, [r6, #438]	; 0x1b6
    648c:	mov	r1, r6
    648e:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6492:	mov	r5, r0
    6494:	cmp	r0, #0
    6496:	beq.n	6460 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6498:	ldr	r1, [pc, #104]	; (6504 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    649a:	movs	r2, #5
    649c:	adds	r0, r5, #3
    649e:	bl	ebac <strncmp>
    64a2:	mov	r1, r0
    64a4:	cmp	r0, #0
    64a6:	bne.n	6460 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    64a8:	ldrb.w	r3, [r5, #108]	; 0x6c
    64ac:	cmp	r3, #9
    64ae:	bne.n	6460 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    64b0:	ldr	r3, [r5, #80]	; 0x50
    64b2:	add	r3, r6
    64b4:	str.w	r3, [r4, #1060]	; 0x424
    64b8:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    64ba:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    64be:	ldr	r3, [r5, #88]	; 0x58
    64c0:	add	r3, r6
    64c2:	str.w	r3, [r4, #1068]	; 0x42c
    64c6:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    64c8:	str.w	r3, [r4, #1072]	; 0x430
    64cc:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    64ce:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    64d2:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    64d6:	movs	r5, #1
  m_bitmapStart = 0;
    64d8:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    64dc:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    64de:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    64e2:	adds	r3, #9
  bitmapFind(0, 1);
    64e4:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    64e6:	lsl.w	r3, r5, r3
    64ea:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    64ee:	subs	r3, #1
    64f0:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    64f4:	bl	6110 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    64f8:	movs	r3, #64	; 0x40
  return true;
    64fa:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    64fc:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    6500:	b.n	6462 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    6502:	nop
    6504:	.word	0x20001153

00006508 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    6508:	push	{r4, lr}
    650a:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    650c:	ldr.w	r1, [r0, #1076]	; 0x434
    6510:	bl	62cc <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6514:	ldrb.w	r3, [r4, #1093]	; 0x445
    6518:	adds	r3, #9
  return nc << bytesPerClusterShift();
    651a:	uxtb	r3, r3
}
    651c:	lsls	r0, r3
    651e:	pop	{r4, pc}

00006520 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    6520:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    6522:	add.w	r4, r0, #1096	; 0x448
    6526:	sub	sp, #56	; 0x38
    6528:	movs	r3, #0
    652a:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    652c:	mov	r0, sp
    652e:	mov	r1, r4
    6530:	str	r3, [sp, #48]	; 0x30
    6532:	bl	6010 <ExFatFile::open(ExFatFile*, char const*, int)>
    6536:	mov	r5, r0
    6538:	cbz	r0, 6562 <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    653a:	ldrb.w	r3, [sp, #49]	; 0x31
    653e:	ands.w	r3, r3, #80	; 0x50
    6542:	beq.n	6568 <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    6544:	mov	r2, sp
    6546:	mov	r3, r4
    6548:	add	r6, sp, #48	; 0x30
    654a:	mov	r4, r2
    654c:	adds	r3, #8
    654e:	ldmia	r4!, {r0, r1}
    6550:	cmp	r4, r6
    6552:	str.w	r0, [r3, #-8]
    6556:	str.w	r1, [r3, #-4]
    655a:	mov	r2, r4
    655c:	bne.n	654a <ExFatVolume::chdir(char const*)+0x2a>
    655e:	ldr	r0, [r4, #0]
    6560:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    6562:	mov	r0, r5
    6564:	add	sp, #56	; 0x38
    6566:	pop	{r4, r5, r6, pc}
  return false;
    6568:	mov	r5, r3
    656a:	b.n	6562 <ExFatVolume::chdir(char const*)+0x42>

0000656c <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    656c:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    656e:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6570:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6572:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6574:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6576:	orr.w	r2, r2, r1, lsr #1
    657a:	ldrb	r1, [r0, r3]
    657c:	uxtah	r2, r1, r2
    6580:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6582:	bne.n	6596 <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    6584:	cmp	r4, #133	; 0x85
    6586:	ite	ne
    6588:	movne	r2, #1
    658a:	moveq	r2, #3
    658c:	add	r3, r2
    658e:	cmp	r3, #31
    6590:	bls.n	6572 <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    6592:	mov	r0, r1
    6594:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6596:	movs	r2, #1
    6598:	b.n	658c <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

0000659a <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    659a:	push	{r4, lr}
    659c:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    659e:	bl	5618 <FsCache::sync()>
    65a2:	cbz	r0, 65bc <ExFatPartition::cacheSync()+0x22>
    65a4:	add.w	r0, r4, #528	; 0x210
    65a8:	bl	5618 <FsCache::sync()>
    65ac:	cbz	r0, 65bc <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    65ae:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    65b2:	ldr	r3, [r0, #0]
  }
    65b4:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    65b8:	ldr	r3, [r3, #32]
    65ba:	bx	r3
  }
    65bc:	movs	r0, #0
    65be:	pop	{r4, pc}

000065c0 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    65c0:	push	{r3, r4, r5, r6, r7, lr}
    65c2:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    65c4:	ldr	r0, [r0, #32]
    65c6:	ldr	r1, [r4, #24]
    65c8:	cbz	r1, 65cc <ExFatFile::addCluster()+0xc>
    65ca:	adds	r1, #1
    65cc:	movs	r2, #1
    65ce:	bl	6110 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    65d2:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    65d4:	mov	r5, r0
  if (find < 2) {
    65d6:	bhi.n	65de <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    65d8:	movs	r6, #0
}
    65da:	mov	r0, r6
    65dc:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    65de:	movs	r3, #1
    65e0:	mov	r1, r0
    65e2:	ldr	r0, [r4, #32]
    65e4:	mov	r2, r3
    65e6:	bl	61b8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    65ea:	mov	r6, r0
    65ec:	cmp	r0, #0
    65ee:	beq.n	65d8 <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    65f0:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    65f2:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    65f6:	cbnz	r2, 6604 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    65f8:	orr.w	r3, r3, #64	; 0x40
    65fc:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    6600:	str	r5, [r4, #24]
  return true;
    6602:	b.n	65da <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    6604:	lsls	r1, r3, #25
    6606:	bmi.n	662c <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    6608:	mov.w	r2, #4294967295
    660c:	mov	r1, r5
    660e:	ldr	r0, [r4, #32]
    6610:	bl	6332 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6614:	cmp	r0, #0
    6616:	beq.n	65d8 <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    6618:	ldr	r1, [r4, #24]
    661a:	cmp	r1, #0
    661c:	beq.n	6600 <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    661e:	mov	r2, r5
    6620:	ldr	r0, [r4, #32]
    6622:	bl	6332 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6626:	cmp	r0, #0
    6628:	bne.n	6600 <ExFatFile::addCluster()+0x40>
    662a:	b.n	65d8 <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    662c:	adds	r2, #1
    662e:	cmp	r2, r5
    6630:	beq.n	6600 <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6632:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6636:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6638:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    663c:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    663e:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6640:	cmp	r3, r1
    6642:	bls.n	6608 <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    6644:	adds	r7, r1, #1
    6646:	mov	r2, r7
    6648:	bl	6332 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    664c:	cmp	r0, #0
    664e:	beq.n	65d8 <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6650:	mov	r1, r7
    6652:	b.n	663c <ExFatFile::addCluster()+0x7c>

00006654 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6654:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6656:	ldrb.w	r3, [r0, #51]	; 0x33
    665a:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    665c:	lsls	r2, r3, #30
    665e:	bmi.n	6664 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    6660:	movs	r0, #0
}
    6662:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    6664:	ldr	r1, [r0, #28]
    6666:	cbnz	r1, 669e <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    6668:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    666a:	movs	r2, #1
    666c:	uxtb	r1, r5
    666e:	mov	r0, r4
    6670:	bl	58fe <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6674:	cmp	r0, #0
    6676:	beq.n	6660 <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    6678:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    667a:	adds	r5, #1
    cache[0] &= 0x7F;
    667c:	and.w	r3, r3, #127	; 0x7f
    6680:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6682:	uxtb	r3, r5
    6684:	ldrb.w	r2, [r4, #48]	; 0x30
    6688:	cmp	r2, r3
    668a:	bcs.n	666a <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    668c:	movs	r3, #0
  return m_vol->cacheSync();
    668e:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    6690:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    6694:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    6698:	bl	659a <ExFatPartition::cacheSync()>
    669c:	b.n	6662 <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    669e:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    66a0:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    66a2:	bpl.n	66da <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    66a4:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    66a8:	ldrd	r2, r5, [r4, #8]
    66ac:	adds	r3, #9
    66ae:	subs	r2, #1
    66b0:	uxtb	r3, r3
    66b2:	adc.w	r5, r5, #4294967295
    66b6:	rsb	r7, r3, #32
    66ba:	sub.w	r6, r3, #32
    66be:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    66c0:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    66c2:	lsl.w	r7, r5, r7
    66c6:	lsr.w	r6, r5, r6
    66ca:	orrs	r2, r7
    66cc:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    66ce:	adds	r2, #1
    66d0:	bl	61b8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    66d4:	cmp	r0, #0
    66d6:	bne.n	6668 <ExFatFile::remove()+0x14>
    66d8:	b.n	6660 <ExFatFile::remove()+0xc>
    66da:	bl	636c <ExFatPartition::freeChain(unsigned long)>
    66de:	b.n	66d4 <ExFatFile::remove()+0x80>

000066e0 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    66e0:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    66e2:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    66e6:	sub	sp, #32
    66e8:	mov	r4, r0
  if (!isSubDir()) {
    66ea:	lsls	r3, r3, #27
    66ec:	bmi.n	66f4 <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    66ee:	movs	r0, #0
}
    66f0:	add	sp, #32
    66f2:	pop	{r4, pc}
    seekSet(0);
    66f4:	movs	r2, #0
    66f6:	movs	r3, #0
    66f8:	bl	5be0 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    66fc:	movs	r2, #32
    66fe:	mov	r1, sp
    6700:	mov	r0, r4
    6702:	bl	5a30 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6706:	cbz	r0, 671c <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    6708:	cmp	r0, #32
    670a:	bne.n	66ee <ExFatFile::rmdir()+0xe>
    670c:	ldrsb.w	r2, [sp]
    6710:	ldrb.w	r3, [sp]
    6714:	cmp	r2, #0
    6716:	blt.n	66ee <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    6718:	cmp	r3, #0
    671a:	bne.n	66fc <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    671c:	movs	r3, #8
  return remove();
    671e:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6720:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    6724:	ldrb.w	r3, [r4, #51]	; 0x33
    6728:	orr.w	r3, r3, #2
    672c:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    6730:	bl	6654 <ExFatFile::remove()>
    6734:	b.n	66f0 <ExFatFile::rmdir()+0x10>
	...

00006738 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    6738:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    673c:	movs	r7, #0
    673e:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    6740:	ldr.w	r8, [pc, #204]	; 6810 <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    6744:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6746:	movs	r2, #0
    6748:	uxtb	r1, r7
    674a:	mov	r0, r4
    674c:	bl	58fe <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6750:	mov	r5, r0
    6752:	cmp	r0, #0
    6754:	beq.n	67d2 <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    6756:	ldrb	r3, [r0, #0]
    6758:	cmp	r3, #192	; 0xc0
    675a:	beq.n	67e6 <ExFatFile::syncDir()+0xae>
    675c:	cmp	r3, #193	; 0xc1
    675e:	beq.n	67a4 <ExFatFile::syncDir()+0x6c>
    6760:	cmp	r3, #133	; 0x85
    6762:	bne.n	67d2 <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6764:	ldrb.w	r3, [r4, #49]	; 0x31
    6768:	and.w	r3, r3, #55	; 0x37
    676c:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    676e:	ldr.w	r3, [r8]
    6772:	cbz	r3, 6796 <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    6774:	add.w	r2, sp, #3
    6778:	add.w	r1, sp, #6
    677c:	add	r0, sp, #4
    677e:	blx	r3
          df->modifyTimeMs = ms10;
    6780:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    6784:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    6788:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    678a:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    678e:	strh	r2, [r5, #12]
    6790:	strh	r3, [r5, #14]
    6792:	strh	r2, [r5, #16]
    6794:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    6796:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6798:	ldrb.w	r3, [r2, #528]	; 0x210
    679c:	orr.w	r3, r3, #1
    67a0:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    67a4:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    67a6:	mov	r1, r6
    67a8:	mov	r0, r5
    67aa:	bl	656c <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    67ae:	ldrb.w	r2, [r4, #48]	; 0x30
    67b2:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    67b4:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    67b6:	cmp	r2, r3
    67b8:	bcs.n	6746 <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    67ba:	movs	r2, #1
    67bc:	add.w	r1, r4, #36	; 0x24
    67c0:	ldr	r0, [r4, #32]
    67c2:	bl	6258 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    67c6:	cbz	r0, 67d2 <ExFatFile::syncDir()+0x9a>
    67c8:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    67ca:	ldr	r0, [r4, #32]
    67cc:	bl	659a <ExFatPartition::cacheSync()>
    67d0:	cbnz	r0, 67e0 <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    67d2:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    67d6:	movs	r0, #0
  m_error |= WRITE_ERROR;
    67d8:	orr.w	r3, r3, #1
    67dc:	strb.w	r3, [r4, #50]	; 0x32
}
    67e0:	add	sp, #8
    67e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    67e6:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    67ea:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    67ec:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    67ee:	ite	mi
    67f0:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    67f4:	andpl.w	r3, r3, #253	; 0xfd
    67f8:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    67fa:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    67fe:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    6802:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    6804:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    6806:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    680a:	strd	r2, r3, [r0, #24]
    680e:	b.n	6796 <ExFatFile::syncDir()+0x5e>
    6810:	.word	0x200147fc

00006814 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    6814:	push	{r4, lr}
  if (!isOpen()) {
    6816:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    681a:	mov	r4, r0
  if (!isOpen()) {
    681c:	cbnz	r3, 6822 <ExFatFile::sync()+0xe>
    return true;
    681e:	movs	r0, #1
}
    6820:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6822:	ldrsb.w	r2, [r0, #51]	; 0x33
    6826:	ldrb.w	r3, [r0, #51]	; 0x33
    682a:	cmp	r2, #0
    682c:	bge.n	683e <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    682e:	and.w	r3, r3, #127	; 0x7f
    6832:	strb.w	r3, [r0, #51]	; 0x33
}
    6836:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    683a:	b.w	6738 <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    683e:	ldr	r0, [r0, #32]
    6840:	bl	659a <ExFatPartition::cacheSync()>
    6844:	cmp	r0, #0
    6846:	bne.n	681e <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    6848:	ldrb.w	r3, [r4, #50]	; 0x32
    684c:	orr.w	r3, r3, #1
    6850:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6854:	b.n	6820 <ExFatFile::sync()+0xc>

00006856 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6856:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6858:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    685c:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    685e:	lsls	r2, r3, #25
    6860:	bpl.n	68e2 <ExFatFile::addDirCluster()+0x8c>
    6862:	ldr	r0, [r0, #32]
    6864:	bl	6508 <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6868:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    686a:	ldr.w	r3, [r3, #1084]	; 0x43c
    686e:	add	r0, r3
  if (dl >= 0X4000000) {
    6870:	cmp.w	r0, #67108864	; 0x4000000
    6874:	bcs.n	6902 <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    6876:	mov	r0, r4
    6878:	bl	65c0 <ExFatFile::addCluster()>
    687c:	cmp	r0, #0
    687e:	beq.n	6902 <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    6880:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6882:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    6884:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6886:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    6888:	ldrb.w	r2, [r3, #1093]	; 0x445
    688c:	subs	r5, #2
    688e:	ldr.w	r3, [r3, #1068]	; 0x42c
    6892:	lsls	r5, r2
    6894:	add	r5, r3
    6896:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6898:	ldrb.w	r3, [r0, #1093]	; 0x445
    689c:	lsl.w	r3, r7, r3
    68a0:	cmp	r6, r3
    68a2:	bcc.n	68e6 <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    68a4:	ldrb.w	r3, [r4, #49]	; 0x31
    68a8:	lsls	r3, r3, #25
    68aa:	bmi.n	68d8 <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    68ac:	ldrb.w	r3, [r4, #51]	; 0x33
    68b0:	orn	r3, r3, #127	; 0x7f
    68b4:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    68b8:	ldr.w	r2, [r0, #1084]	; 0x43c
    68bc:	ldrd	r3, r1, [r4, #8]
    68c0:	adds	r3, r3, r2
    68c2:	adc.w	r1, r1, #0
    68c6:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    68ca:	ldrd	r3, r1, [r4, #16]
    68ce:	adds	r3, r3, r2
    68d0:	adc.w	r1, r1, #0
    68d4:	strd	r3, r1, [r4, #16]
  return sync();
    68d8:	mov	r0, r4
}
    68da:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    68de:	b.w	6814 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    68e2:	ldr	r0, [r0, #8]
    68e4:	b.n	6868 <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    68e6:	movs	r2, #5
    68e8:	adds	r1, r5, r6
    68ea:	add.w	r0, r0, #528	; 0x210
    68ee:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    68f2:	cbz	r0, 6902 <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    68f4:	mov.w	r2, #512	; 0x200
    68f8:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    68fa:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    68fc:	bl	a1d4 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6900:	b.n	6896 <ExFatFile::addDirCluster()+0x40>
}
    6902:	movs	r0, #0
    6904:	pop	{r3, r4, r5, r6, r7, pc}

00006906 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6906:	push	{r4, lr}
  if (!parent->isDir()) {
    6908:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    690c:	mov	r4, r0
  if (!parent->isDir()) {
    690e:	tst.w	r3, #80	; 0x50
    6912:	beq.n	694a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6914:	movw	r3, #2562	; 0xa02
    6918:	bl	5cc0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    691c:	cbz	r0, 694a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    691e:	movs	r3, #16
  if (!addDirCluster()) {
    6920:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    6922:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    6926:	bl	6856 <ExFatFile::addDirCluster()>
    692a:	cbz	r0, 694a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    692c:	ldr	r3, [r4, #24]
    692e:	mov	r0, r4
    6930:	movs	r2, #0
    6932:	str	r3, [r4, #28]
    6934:	movs	r3, #0
    6936:	bl	5be0 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    693a:	movs	r3, #193	; 0xc1
  return sync();
    693c:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    693e:	strb.w	r3, [r4, #51]	; 0x33
}
    6942:	ldmia.w	sp!, {r4, lr}
  return sync();
    6946:	b.w	6814 <ExFatFile::sync()>
}
    694a:	movs	r0, #0
    694c:	pop	{r4, pc}

0000694e <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    694e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6952:	mov	r8, r3
    6954:	sub	sp, #88	; 0x58
    6956:	movs	r3, #0
    6958:	mov	r5, r0
    695a:	mov	r4, r1
    695c:	str	r2, [sp, #4]
    695e:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    6962:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    6964:	ldrb.w	r3, [r0, #49]	; 0x31
    6968:	cbz	r3, 6972 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    696a:	movs	r0, #0
}
    696c:	add	sp, #88	; 0x58
    696e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    6972:	ldrb.w	r3, [r1, #49]	; 0x31
    6976:	tst.w	r3, #80	; 0x50
    697a:	beq.n	696a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    697c:	ldrb	r3, [r2, #0]
    697e:	cmp	r3, #47	; 0x2f
    6980:	bne.n	6998 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    6982:	ldr	r2, [sp, #4]
    6984:	ldrb	r3, [r2, #0]
    6986:	cmp	r3, #47	; 0x2f
    6988:	beq.n	69e4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    698a:	ldr	r1, [r4, #32]
    698c:	add	r0, sp, #32
    698e:	bl	598a <ExFatFile::openRoot(ExFatVolume*)>
    6992:	cmp	r0, #0
    6994:	beq.n	696a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    6996:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6998:	add	r3, sp, #4
    699a:	add	r2, sp, #8
    699c:	ldr	r1, [sp, #4]
    699e:	mov	r0, r5
    69a0:	bl	59b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    69a4:	cmp	r0, #0
    69a6:	beq.n	696a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    69a8:	ldr	r3, [sp, #4]
    69aa:	ldrb	r3, [r3, #0]
    69ac:	cbz	r3, 6a00 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    69ae:	movs	r3, #0
    69b0:	add	r2, sp, #8
    69b2:	mov	r1, r4
    69b4:	mov	r0, r5
    69b6:	bl	5cc0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    69ba:	cbz	r0, 69ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    69bc:	add	r6, sp, #32
    69be:	mov	r2, r5
    69c0:	add.w	r3, r5, #48	; 0x30
    69c4:	mov	r4, r6
    69c6:	ldr	r0, [r2, #0]
    69c8:	adds	r2, #8
    69ca:	ldr.w	r1, [r2, #-4]
    69ce:	mov	r7, r6
    69d0:	cmp	r2, r3
    69d2:	stmia	r7!, {r0, r1}
    69d4:	mov	r6, r7
    69d6:	bne.n	69c6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    69d8:	ldr	r0, [r2, #0]
    69da:	str	r0, [r7, #0]
    close();
    69dc:	mov	r0, r5
    69de:	bl	5936 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    69e2:	b.n	6998 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    69e4:	adds	r2, #1
    69e6:	str	r2, [sp, #4]
    69e8:	b.n	6982 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    69ea:	cmp.w	r8, #0
    69ee:	beq.n	696a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    69f0:	add	r2, sp, #8
    69f2:	mov	r1, r4
    69f4:	mov	r0, r5
    69f6:	bl	6906 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    69fa:	cmp	r0, #0
    69fc:	bne.n	69bc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    69fe:	b.n	696a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    6a00:	add	r2, sp, #8
    6a02:	mov	r1, r4
    6a04:	mov	r0, r5
    6a06:	bl	6906 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6a0a:	b.n	696c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

00006a0c <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    6a0c:	push	{r4, r5, r6, r7, lr}
    6a0e:	mov	r4, r0
    6a10:	sub	sp, #116	; 0x74
    6a12:	movs	r0, #0
    6a14:	str	r0, [sp, #48]	; 0x30
    6a16:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    6a18:	ldrb.w	r0, [r4, #49]	; 0x31
    6a1c:	tst.w	r0, #24
    6a20:	bne.n	6a28 <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    6a22:	movs	r0, #0
}
    6a24:	add	sp, #116	; 0x74
    6a26:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    6a28:	ldr	r0, [r4, #32]
    6a2a:	ldr	r3, [r1, #32]
    6a2c:	cmp	r0, r3
    6a2e:	bne.n	6a22 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6a30:	movw	r3, #2561	; 0xa01
    6a34:	mov	r0, sp
    6a36:	bl	6010 <ExFatFile::open(ExFatFile*, char const*, int)>
    6a3a:	cmp	r0, #0
    6a3c:	beq.n	6a22 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    6a3e:	add	r2, sp, #56	; 0x38
    6a40:	mov	r3, r4
    6a42:	add.w	r7, r4, #48	; 0x30
    6a46:	mov	r6, r2
    6a48:	ldr	r0, [r3, #0]
    6a4a:	adds	r3, #8
    6a4c:	ldr.w	r1, [r3, #-4]
    6a50:	mov	r5, r2
    6a52:	cmp	r3, r7
    6a54:	stmia	r5!, {r0, r1}
    6a56:	mov	r2, r5
    6a58:	bne.n	6a48 <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    6a5a:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    6a5c:	add	r2, sp, #36	; 0x24
    6a5e:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    6a62:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    6a64:	ldmia	r2, {r0, r1, r2}
    6a66:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    6a6a:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    6a6e:	mov	r0, r4
  m_setCount = file.m_setCount;
    6a70:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6a74:	ldrb.w	r3, [r4, #51]	; 0x33
    6a78:	orn	r3, r3, #127	; 0x7f
    6a7c:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    6a80:	bl	6814 <ExFatFile::sync()>
    6a84:	cmp	r0, #0
    6a86:	beq.n	6a22 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    6a88:	movs	r3, #0
  return oldFile.remove();
    6a8a:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    6a8c:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    6a8e:	movs	r3, #2
    6a90:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    6a94:	movs	r3, #8
    6a96:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    6a9a:	bl	6654 <ExFatFile::remove()>
    6a9e:	b.n	6a24 <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00006aa0 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    6aa0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6aa2:	ldrb.w	r2, [r0, #51]	; 0x33
    6aa6:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6aa8:	lsls	r3, r2, #30
    6aaa:	bmi.n	6ab2 <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    6aac:	movs	r0, #0
}
    6aae:	add	sp, #12
    6ab0:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    6ab2:	ldr	r3, [r0, #28]
    6ab4:	cmp	r3, #0
    6ab6:	beq.n	6b66 <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    6ab8:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    6abc:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    6abe:	beq.n	6b30 <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6ac0:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6ac2:	ldrb.w	r5, [r0, #1093]	; 0x445
    6ac6:	ldrd	r2, r6, [r4, #8]
    6aca:	adds	r5, #9
    6acc:	subs	r2, #1
    6ace:	uxtb	r5, r5
    6ad0:	adc.w	r6, r6, #4294967295
    6ad4:	rsb	ip, r5, #32
    6ad8:	sub.w	r7, r5, #32
    6adc:	lsrs	r2, r5
    6ade:	lsl.w	ip, r6, ip
    6ae2:	lsr.w	r7, r6, r7
    6ae6:	orr.w	r2, r2, ip
    6aea:	orrs	r2, r7
    6aec:	adds	r2, #1
    if (m_curCluster) {
    6aee:	cbz	r1, 6b1c <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    6af0:	subs	r3, #1
      toFree = m_curCluster + 1;
    6af2:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    6af4:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    6af6:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    6af8:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6afa:	cbnz	r2, 6b22 <ExFatFile::truncate()+0x82>
  return sync();
    6afc:	mov	r0, r4
  m_dataLength = m_curPosition;
    6afe:	ldrd	r2, r3, [r4]
    6b02:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    6b06:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6b0a:	ldrb.w	r3, [r4, #51]	; 0x33
    6b0e:	orn	r3, r3, #127	; 0x7f
    6b12:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    6b16:	bl	6814 <ExFatFile::sync()>
    6b1a:	b.n	6aae <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    6b1c:	str	r3, [sp, #4]
      m_firstCluster = 0;
    6b1e:	str	r1, [r4, #28]
    6b20:	b.n	6afa <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6b22:	movs	r3, #0
    6b24:	ldr	r1, [sp, #4]
    6b26:	bl	61b8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    6b2a:	cmp	r0, #0
    6b2c:	bne.n	6afc <ExFatFile::truncate()+0x5c>
    6b2e:	b.n	6aac <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    6b30:	cbz	r1, 6b60 <ExFatFile::truncate()+0xc0>
      toFree = 0;
    6b32:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6b34:	add	r2, sp, #4
    6b36:	ldr	r0, [r0, #32]
    6b38:	bl	628c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    6b3c:	cmp	r0, #0
    6b3e:	blt.n	6aac <ExFatFile::truncate()+0xc>
      if (fg) {
    6b40:	beq.n	6b52 <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    6b42:	mov.w	r2, #4294967295
    6b46:	ldr	r1, [r4, #24]
    6b48:	ldr	r0, [r4, #32]
    6b4a:	bl	6332 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6b4e:	cmp	r0, #0
    6b50:	beq.n	6aac <ExFatFile::truncate()+0xc>
    if (toFree) {
    6b52:	ldr	r1, [sp, #4]
    6b54:	cmp	r1, #0
    6b56:	beq.n	6afc <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    6b58:	ldr	r0, [r4, #32]
    6b5a:	bl	636c <ExFatPartition::freeChain(unsigned long)>
    6b5e:	b.n	6b2a <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    6b60:	str	r3, [sp, #4]
      m_firstCluster = 0;
    6b62:	str	r1, [r0, #28]
    6b64:	b.n	6b52 <ExFatFile::truncate()+0xb2>
      return true;
    6b66:	movs	r0, #1
    6b68:	b.n	6aae <ExFatFile::truncate()+0xe>
	...

00006b6c <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6b6c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b70:	ldrb.w	r3, [r0, #51]	; 0x33
    6b74:	mov	r8, r1
    6b76:	mov	r4, r0
    6b78:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6b7a:	lsls	r1, r3, #30
    6b7c:	bpl.n	6bbc <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6b7e:	lsls	r2, r3, #28
    6b80:	bmi.n	6bb0 <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    6b82:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6b84:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6b88:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6b8c:	ldrd	r5, r3, [r4]
  while (toWrite) {
    6b90:	cbnz	r7, 6bce <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    6b92:	ldrd	r1, r2, [r4, #8]
    6b96:	cmp	r1, r5
    6b98:	sbcs	r2, r3
    6b9a:	bcs.w	6d60 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    6b9e:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6ba2:	ldrb.w	r3, [r4, #51]	; 0x33
    6ba6:	orn	r3, r3, #127	; 0x7f
    6baa:	strb.w	r3, [r4, #51]	; 0x33
    6bae:	b.n	6d6a <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    6bb0:	ldrd	r2, r3, [r0, #16]
    6bb4:	bl	5be0 <ExFatFile::seekSet(unsigned long long)>
    6bb8:	cmp	r0, #0
    6bba:	bne.n	6b82 <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6bbc:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    6bc0:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    6bc4:	orr.w	r3, r3, #1
    6bc8:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    6bcc:	b.n	6d6a <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6bce:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    6bd0:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6bd2:	ldr.w	r3, [r0, #1080]	; 0x438
    6bd6:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6bd8:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    6bdc:	cbnz	r5, 6c28 <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    6bde:	cmp	r1, #0
    6be0:	beq.n	6c8e <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    6be2:	ldrb.w	r3, [r4, #51]	; 0x33
    6be6:	lsls	r3, r3, #25
    6be8:	bpl.n	6c80 <ExFatFile::write(void const*, unsigned int)+0x114>
    6bea:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6bee:	ldrd	r3, r2, [r4, #8]
    6bf2:	adds	r0, #9
    6bf4:	subs	r3, #1
    6bf6:	uxtb	r0, r0
    6bf8:	adc.w	r2, r2, #4294967295
    6bfc:	rsb	lr, r0, #32
    6c00:	sub.w	ip, r0, #32
    6c04:	lsrs	r3, r0
    6c06:	lsl.w	lr, r2, lr
    6c0a:	lsr.w	ip, r2, ip
    6c0e:	ldr	r2, [r4, #28]
    6c10:	orr.w	r3, r3, lr
    6c14:	orr.w	r3, r3, ip
    6c18:	add	r3, r2
          if (m_curCluster < lc) {
    6c1a:	cmp	r3, r1
    6c1c:	bhi.n	6c7a <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    6c1e:	mov	r0, r4
    6c20:	bl	65c0 <ExFatFile::addCluster()>
    6c24:	cmp	r0, #0
    6c26:	beq.n	6bbc <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    6c28:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6c2c:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    6c2e:	ldr	r1, [r4, #24]
    6c30:	ldrb.w	r2, [ip, #1093]	; 0x445
    6c34:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    6c36:	ldr.w	r0, [ip, #1068]	; 0x42c
    6c3a:	lsls	r1, r2
    6c3c:	add.w	r1, r1, r5, lsr #9
    6c40:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    6c42:	cbnz	r6, 6ca6 <ExFatFile::write(void const*, unsigned int)+0x13a>
    6c44:	cmp.w	r7, #512	; 0x200
    6c48:	bcc.n	6ca6 <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    6c4a:	cmp.w	r7, #1024	; 0x400
    6c4e:	ldr.w	lr, [ip, #540]	; 0x21c
    6c52:	ldr.w	r0, [ip, #532]	; 0x214
    6c56:	bcs.n	6d2e <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    6c58:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    6c5a:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    6c5c:	ittt	eq
    6c5e:	moveq.w	r3, #4294967295
    m_status = 0;
    6c62:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6c66:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    6c6a:	ldr	r3, [r0, #0]
    6c6c:	ldr	r3, [r3, #36]	; 0x24
    6c6e:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6c70:	cmp	r0, #0
    6c72:	beq.n	6bbc <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    6c74:	mov.w	r5, #512	; 0x200
    6c78:	b.n	6cfa <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    6c7a:	adds	r1, #1
    6c7c:	str	r1, [r4, #24]
        if (fg == 0) {
    6c7e:	b.n	6c28 <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6c80:	mov	r2, sl
    6c82:	bl	628c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6c86:	cmp	r0, #0
    6c88:	blt.n	6bbc <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    6c8a:	beq.n	6c1e <ExFatFile::write(void const*, unsigned int)+0xb2>
    6c8c:	b.n	6c28 <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    6c8e:	ldr	r3, [r4, #28]
    6c90:	cbnz	r3, 6ca2 <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    6c92:	mov	r0, r4
    6c94:	bl	65c0 <ExFatFile::addCluster()>
    6c98:	cmp	r0, #0
    6c9a:	beq.n	6bbc <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    6c9c:	ldr	r3, [r4, #24]
    6c9e:	str	r3, [r4, #28]
    6ca0:	b.n	6c28 <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    6ca2:	str	r3, [r4, #24]
    6ca4:	b.n	6c28 <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    6ca6:	rsb	r5, r6, #512	; 0x200
    6caa:	cmp	r5, r7
    6cac:	it	cs
    6cae:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6cb0:	cmp	r6, #0
    6cb2:	bne.n	6d2a <ExFatFile::write(void const*, unsigned int)+0x1be>
    6cb4:	ldr	r3, [r4, #20]
    6cb6:	ldr	r0, [r4, #0]
    6cb8:	str	r3, [sp, #4]
    6cba:	ldr	r3, [r4, #16]
    6cbc:	ldr	r2, [r4, #4]
    6cbe:	cmp	r0, r3
    6cc0:	ldr	r3, [sp, #4]
    6cc2:	sbcs.w	r3, r2, r3
    6cc6:	bcc.n	6d2a <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6cc8:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    6cca:	add.w	r0, ip, #528	; 0x210
    6cce:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6cd2:	cmp	r0, #0
    6cd4:	beq.w	6bbc <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    6cd8:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6cda:	add	r6, r5
      memcpy(dst, src, n);
    6cdc:	mov	r2, r5
    6cde:	mov	r1, r8
    6ce0:	bl	a218 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6ce4:	cmp.w	r6, #512	; 0x200
    6ce8:	ldr	r0, [r4, #32]
    6cea:	bne.n	6cfa <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    6cec:	add.w	r0, r0, #528	; 0x210
    6cf0:	bl	5618 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    6cf4:	cmp	r0, #0
    6cf6:	beq.w	6bbc <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    6cfa:	add	r8, r5
    toWrite -= n;
    6cfc:	subs	r7, r7, r5
    m_curPosition += n;
    6cfe:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    6d02:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    6d06:	adds	r3, r5, r3
    6d08:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    6d0c:	cmp	r0, r3
    6d0e:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6d10:	itt	cc
    6d12:	ldrbcc.w	r1, [r4, #51]	; 0x33
    6d16:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    6d1a:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6d1e:	itt	cc
    6d20:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6d24:	strdcc	r3, r2, [r4, #16]
    6d28:	b.n	6b8c <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6d2a:	movs	r2, #1
    6d2c:	b.n	6cca <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6d2e:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6d32:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6d34:	lsrs	r2, r7, #9
    6d36:	cmp	r3, r2
    6d38:	it	cs
    6d3a:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6d3c:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    6d3e:	mov.w	r5, r3, lsl #9
    6d42:	bhi.n	6d56 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    6d44:	adds	r2, r1, r3
    6d46:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    6d48:	ittt	hi
    6d4a:	movhi.w	r2, #4294967295
    m_status = 0;
    6d4e:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6d52:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    6d56:	ldr	r2, [r0, #0]
    6d58:	ldr	r6, [r2, #40]	; 0x28
    6d5a:	mov	r2, r8
    6d5c:	blx	r6
    6d5e:	b.n	6cf4 <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    6d60:	ldr	r3, [pc, #16]	; (6d74 <ExFatFile::write(void const*, unsigned int)+0x208>)
    6d62:	ldr	r3, [r3, #0]
    6d64:	cmp	r3, #0
    6d66:	bne.w	6ba2 <ExFatFile::write(void const*, unsigned int)+0x36>
}
    6d6a:	mov	r0, r9
    6d6c:	add	sp, #12
    6d6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d72:	nop
    6d74:	.word	0x200147fc

00006d78 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    6d78:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6d7a:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    6d7c:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6d7e:	bl	726a <FatFile::seekSet(unsigned long)>
    6d82:	cbz	r0, 6d90 <FatFile::cacheDir(unsigned short)+0x18>
    6d84:	mov	r0, r4
    6d86:	movs	r1, #0
  }
    6d88:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6d8c:	b.w	722c <FatFile::readDirCache(bool)>
  }
    6d90:	pop	{r4, pc}

00006d92 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    6d92:	cmp	r2, #4
    6d94:	bhi.n	6da0 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    6d96:	add.w	r2, r1, r2, lsl #1
    6d9a:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    6d9e:	bx	lr
  } else if (i < 11) {
    6da0:	cmp	r2, #10
    6da2:	bhi.n	6dac <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    6da4:	add.w	r2, r1, r2, lsl #1
    6da8:	ldrh	r0, [r2, #4]
    6daa:	bx	lr
  } else if (i < 13) {
    6dac:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    6dae:	itte	ls
    6db0:	addls.w	r2, r1, r2, lsl #1
    6db4:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    6db6:	movhi	r0, #0
}
    6db8:	bx	lr

00006dba <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    6dba:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    6dbc:	ldrb	r4, [r0, #0]
    6dbe:	mov	r5, r1
    6dc0:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    6dc2:	cbz	r4, 6e34 <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6dc4:	ands.w	r4, r4, #96	; 0x60
    6dc8:	beq.n	6dda <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    6dca:	cmp	r2, #1
    6dcc:	bls.n	6e34 <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    6dce:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    6dd0:	movs	r0, #1
    name[0] = '/';
    6dd2:	strb	r3, [r1, #0]
    name[1] = '\0';
    6dd4:	movs	r3, #0
    6dd6:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    6dd8:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6dda:	mov	r1, r4
    6ddc:	bl	7028 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6de0:	cbz	r0, 6e34 <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    6de2:	mov	r6, r0
    6de4:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    6de6:	movs	r2, #8
    if (i == 8) {
    6de8:	cmp	r1, #8
      if (*ptr == ' ') {
    6dea:	ldrb	r3, [r6, #0]
    if (i == 8) {
    6dec:	bne.n	6e06 <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    6dee:	cmp	r3, #32
    6df0:	beq.n	6e2c <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    6df2:	movs	r2, #16
      c = '.';
    6df4:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    6df6:	mov	ip, r4
    6df8:	adds	r4, #1
    6dfa:	cmp	r4, r7
    6dfc:	bcs.n	6e34 <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    6dfe:	uxtb	r4, r4
    6e00:	strb.w	r3, [r5, ip]
    6e04:	b.n	6e26 <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6e06:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    6e0a:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6e0c:	cmp.w	ip, #25
    6e10:	bhi.n	6e22 <FatFile::getSFN(char*, unsigned int)+0x68>
    6e12:	ldrb.w	ip, [r0, #12]
    6e16:	tst.w	r2, ip
    6e1a:	beq.n	6df6 <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    6e1c:	adds	r3, #32
    6e1e:	uxtb	r3, r3
    6e20:	b.n	6df6 <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    6e22:	cmp	r3, #32
    6e24:	bne.n	6df6 <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    6e26:	adds	r1, #1
    6e28:	cmp	r1, #12
    6e2a:	bne.n	6de8 <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    6e2c:	movs	r3, #0
    6e2e:	mov	r0, r4
    6e30:	strb	r3, [r5, r4]
  return j;
    6e32:	b.n	6dd8 <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    6e34:	movs	r0, #0
    6e36:	strb	r0, [r5, #0]
  return 0;
    6e38:	b.n	6dd8 <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

00006e3c <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    6e3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    6e40:	movs	r5, #0
    6e42:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    6e44:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    6e46:	mov	r6, r0
    6e48:	mov	r8, r1
    6e4a:	mov	r7, r2
    6e4c:	str	r5, [sp, #4]
  if (!isOpen()) {
    6e4e:	cbz	r3, 6e6a <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    6e50:	ldrb	r3, [r0, #3]
    6e52:	cbnz	r3, 6e5e <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    6e54:	bl	6dba <FatFile::getSFN(char*, unsigned int)>
}
    6e58:	add	sp, #44	; 0x2c
    6e5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    6e5e:	mov	r1, r0
    6e60:	add	r0, sp, #4
    6e62:	bl	7052 <FatFile::openCluster(FatFile*)>
    6e66:	cmp	r0, #0
    6e68:	bne.n	6f16 <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    6e6a:	movs	r0, #0
    6e6c:	strb.w	r0, [r8]
  return 0;
    6e70:	b.n	6e58 <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    6e72:	ldrh	r1, [r6, #4]
    6e74:	add	r0, sp, #4
    6e76:	sub.w	r1, r1, r9
    6e7a:	uxth	r1, r1
    6e7c:	bl	6d78 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    6e80:	mov	sl, r0
    6e82:	cmp	r0, #0
    6e84:	beq.n	6e6a <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6e86:	ldrb	r3, [r0, #11]
    6e88:	cmp	r3, #15
    6e8a:	bne.n	6e6a <FatFile::getName8(char*, unsigned int)+0x2e>
    6e8c:	ldrb	r3, [r0, #0]
    6e8e:	and.w	r3, r3, #31
    6e92:	cmp	fp, r3
    6e94:	bne.n	6e6a <FatFile::getName8(char*, unsigned int)+0x2e>
    6e96:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    6e9a:	uxtb.w	r2, fp
    6e9e:	mov	r1, sl
    6ea0:	mov	r0, r6
    6ea2:	bl	6d92 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    6ea6:	cbz	r5, 6ef2 <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    6ea8:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6eac:	uxth	r2, r2
    6eae:	cmp.w	r2, #1024	; 0x400
    6eb2:	bcs.n	6e6a <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6eb4:	ldr	r3, [pc, #108]	; (6f24 <FatFile::getName8(char*, unsigned int)+0xe8>)
    6eb6:	ubfx	r0, r0, #0, #10
    6eba:	and.w	r5, r3, r5, lsl #10
    6ebe:	orrs	r0, r5
    6ec0:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6ec4:	mov	r1, r4
    6ec6:	mov	r2, r7
    6ec8:	bl	54fc <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6ecc:	mov	r4, r0
    6ece:	cmp	r0, #0
    6ed0:	beq.n	6e6a <FatFile::getName8(char*, unsigned int)+0x2e>
    6ed2:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    6ed4:	add.w	fp, fp, #1
    6ed8:	cmp.w	fp, #13
    6edc:	bne.n	6e9a <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6ede:	add.w	r9, r9, #1
    6ee2:	uxth.w	r9, r9
    6ee6:	uxtb.w	fp, r9
    6eea:	ldrb	r3, [r6, #3]
    6eec:	cmp	r3, fp
    6eee:	bcs.n	6e72 <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    6ef0:	b.n	6f02 <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    6ef2:	add.w	r2, r0, #10240	; 0x2800
    6ef6:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    6ef8:	cmp.w	r2, #2048	; 0x800
    6efc:	bcc.n	6f0c <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    6efe:	cmp	r0, #0
    6f00:	bne.n	6ec4 <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    6f02:	movs	r3, #0
  return str - name;
    6f04:	sub.w	r0, r4, r8
  *str = '\0';
    6f08:	strb	r3, [r4, #0]
  return str - name;
    6f0a:	b.n	6e58 <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    6f0c:	cmp.w	r2, #1024	; 0x400
    6f10:	bcs.n	6e6a <FatFile::getName8(char*, unsigned int)+0x2e>
    6f12:	mov	r5, r0
    6f14:	b.n	6ed4 <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6f16:	subs	r7, #1
  char* str = name;
    6f18:	mov	r4, r8
    6f1a:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6f1e:	add	r7, r8
    6f20:	b.n	6ee6 <FatFile::getName8(char*, unsigned int)+0xaa>
    6f22:	nop
    6f24:	.word	0x000ffc00

00006f28 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    6f28:	b.w	6e3c <FatFile::getName8(char*, unsigned int)>

00006f2c <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    6f2c:	push	{r3, r4, r5, lr}
    6f2e:	mov	r5, r1
    6f30:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    6f32:	movs	r2, #36	; 0x24
    6f34:	movs	r1, #0
    6f36:	bl	a1d4 <memset>

  m_vol = vol;
    6f3a:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    6f3c:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    6f3e:	cmp	r3, #16
    6f40:	beq.n	6f4a <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    6f42:	cmp	r3, #32
    6f44:	beq.n	6f54 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    6f46:	cmp	r3, #12
    6f48:	bne.n	6f58 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    6f4a:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    6f4c:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6f4e:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6f50:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    6f52:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    6f54:	movs	r3, #64	; 0x40
    6f56:	b.n	6f4c <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    6f58:	movs	r0, #0
    6f5a:	b.n	6f52 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

00006f5c <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    6f5c:	push	{r4, lr}
    6f5e:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6f60:	adds	r0, #40	; 0x28
    6f62:	bl	5618 <FsCache::sync()>
    6f66:	cbz	r0, 6f7e <FatPartition::cacheSync()+0x22>
    6f68:	add.w	r0, r4, #568	; 0x238
    6f6c:	bl	5618 <FsCache::sync()>
    6f70:	cbz	r0, 6f7e <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6f72:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    6f74:	ldr	r3, [r0, #0]
  }
    6f76:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6f7a:	ldr	r3, [r3, #32]
    6f7c:	bx	r3
  }
    6f7e:	movs	r0, #0
    6f80:	pop	{r4, pc}

00006f82 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    6f82:	mov	r2, r0
bool FatFile::addCluster() {
    6f84:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    6f86:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    6f8a:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    6f8c:	ldr	r0, [r0, #8]
    6f8e:	mov	r1, r5
    6f90:	bl	7d30 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    6f94:	cbz	r0, 6fa8 <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6f96:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    6f98:	cbnz	r5, 6faa <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6f9a:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6f9e:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6fa0:	ldrb	r3, [r4, #2]
    6fa2:	orn	r3, r3, #127	; 0x7f
    6fa6:	strb	r3, [r4, #2]
}
    6fa8:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    6faa:	adds	r5, #1
    6fac:	ldr	r2, [r4, #16]
    6fae:	cmp	r2, r5
    6fb0:	beq.n	6fa0 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6fb2:	bic.w	r3, r3, #64	; 0x40
    6fb6:	b.n	6f9e <FatFile::addCluster()+0x1c>

00006fb8 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    6fb8:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    6fba:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    6fbc:	mov	r4, r0
  if (isRootFixed()) {
    6fbe:	ands.w	r5, r5, #32
    6fc2:	beq.n	6fca <FatFile::addDirCluster()+0x12>
  return false;
    6fc4:	movs	r6, #0
}
    6fc6:	mov	r0, r6
    6fc8:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    6fca:	ldr	r2, [r0, #20]
    6fcc:	ldr	r3, [pc, #84]	; (7024 <FatFile::addDirCluster()+0x6c>)
    6fce:	cmp	r2, r3
    6fd0:	bcs.n	6fc4 <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    6fd2:	bl	6f82 <FatFile::addCluster()>
    6fd6:	mov	r6, r0
    6fd8:	cmp	r0, #0
    6fda:	beq.n	6fc4 <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    6fdc:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6fde:	ldr	r3, [r4, #16]
    6fe0:	ldrb	r1, [r2, #6]
    6fe2:	subs	r3, #2
    6fe4:	ldr	r7, [r2, #20]
    6fe6:	lsls	r3, r1
    6fe8:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    6fea:	ldr	r0, [r4, #8]
    6fec:	uxtb	r1, r5
    6fee:	ldrb	r3, [r0, #4]
    6ff0:	cmp	r3, r1
    6ff2:	bhi.n	7006 <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    6ff4:	ldrb	r2, [r0, #6]
    6ff6:	mov.w	r3, #512	; 0x200
    6ffa:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    6ffc:	ldr	r2, [r4, #20]
    6ffe:	uxtah	r3, r2, r3
    7002:	str	r3, [r4, #20]
  return true;
    7004:	b.n	6fc6 <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    7006:	movs	r2, #5
    7008:	add	r1, r7
    700a:	adds	r0, #40	; 0x28
    if (!pc) {
    700c:	adds	r5, #1
    700e:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
    7012:	cmp	r0, #0
    7014:	beq.n	6fc4 <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    7016:	mov.w	r2, #512	; 0x200
    701a:	movs	r1, #0
    701c:	bl	a1d4 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7020:	b.n	6fea <FatFile::addDirCluster()+0x32>
    7022:	nop
    7024:	.word	0x001ffe00

00007028 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    7028:	push	{r4, lr}
    702a:	mov	r4, r0
    702c:	ldr	r0, [r0, #8]
    702e:	mov	r2, r1
    7030:	adds	r0, #40	; 0x28
    7032:	ldr	r1, [r4, #24]
    7034:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7038:	cbz	r0, 7044 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    703a:	ldrh	r3, [r4, #4]
    703c:	and.w	r3, r3, #15
    7040:	add.w	r0, r0, r3, lsl #5
}
    7044:	pop	{r4, pc}

00007046 <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    7046:	ldrb	r3, [r0, #0]
    7048:	cbnz	r3, 704e <FatFile::openRoot(FatVolume*)+0x8>
    704a:	b.w	6f2c <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    704e:	movs	r0, #0
    7050:	bx	lr

00007052 <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    7052:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    7054:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    7056:	mov	r4, r0
    7058:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    705a:	cbnz	r3, 7066 <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    705c:	ldr	r1, [r1, #8]
}
    705e:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    7062:	b.w	7046 <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    7066:	movs	r2, #36	; 0x24
    7068:	movs	r1, #0
    706a:	bl	a1d4 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    706e:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    7070:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7072:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7074:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    7076:	ldr	r3, [r5, #8]
    7078:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    707a:	ldr	r3, [r5, #12]
    707c:	str	r3, [r4, #32]
}
    707e:	pop	{r3, r4, r5, pc}

00007080 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    7080:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7084:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    7088:	ldrb	r3, [r0, #2]
    708a:	mov	r4, r0
    708c:	sub	sp, #12
    708e:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    7090:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    7092:	mov	r5, r2
  if (!isReadable()) {
    7094:	bpl.n	717a <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    7096:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    7098:	lsls	r1, r3, #28
    709a:	bpl.n	70c4 <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    709c:	ldr	r3, [r4, #28]
    709e:	ldr	r2, [r4, #20]
    70a0:	subs	r3, r3, r2
    70a2:	cmp	r5, r3
    70a4:	it	cs
    70a6:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    70a8:	add.w	r3, r4, #16
  toRead = nbyte;
    70ac:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    70ae:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    70b2:	vmov	s16, r3
  while (toRead) {
    70b6:	cbnz	r6, 70d6 <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    70b8:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    70ba:	add	sp, #12
    70bc:	vpop	{d8}
    70c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    70c4:	lsls	r2, r3, #26
    70c6:	bpl.n	70a8 <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    70c8:	ldr	r3, [r4, #8]
    70ca:	ldrh	r2, [r3, #10]
    70cc:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    70ce:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    70d2:	uxth	r3, r3
    70d4:	b.n	70a2 <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    70d6:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    70d8:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    70da:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    70dc:	ldr	r0, [r4, #8]
    70de:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    70e2:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    70e6:	bpl.n	7120 <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    70e8:	ldr	r2, [r0, #32]
    70ea:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    70ec:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    70f0:	cmp.w	fp, #0
    70f4:	bne.n	7188 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    70f6:	cmp.w	r6, #512	; 0x200
    70fa:	bcc.n	7188 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    70fc:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    7100:	cmp	r1, r2
    7102:	beq.n	7188 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7104:	cmp.w	r6, #1024	; 0x400
    7108:	bcs.n	71b8 <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    710a:	ldr.w	r0, [sl, #44]	; 0x2c
    710e:	mov	r2, r8
    7110:	ldr	r3, [r0, #0]
    7112:	ldr	r3, [r3, #16]
    7114:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    7116:	cmp	r0, #0
    7118:	beq.n	717a <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    711a:	mov.w	r7, #512	; 0x200
    711e:	b.n	71ac <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    7120:	ldrb.w	r9, [r0, #5]
    7124:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    7128:	cmp.w	fp, #0
    712c:	bne.n	7140 <FatFile::read(void*, unsigned int)+0xc0>
    712e:	cmp.w	r9, #0
    7132:	bne.n	7140 <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    7134:	cbnz	r7, 7152 <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7136:	lsls	r2, r2, #25
    return m_rootDirStart;
    7138:	ite	mi
    713a:	ldrmi	r2, [r0, #32]
    713c:	ldrpl	r2, [r4, #32]
    713e:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7140:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7142:	ldr	r1, [r4, #16]
    7144:	ldrb	r0, [r2, #6]
    7146:	subs	r1, #2
    7148:	ldr	r2, [r2, #20]
    714a:	lsls	r1, r0
    714c:	add	r1, r2
    714e:	add	r1, r9
    7150:	b.n	70ec <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    7152:	lsls	r3, r2, #28
          m_curCluster++;
    7154:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    7156:	bpl.n	7164 <FatFile::read(void*, unsigned int)+0xe4>
    7158:	ldrb	r2, [r4, #2]
    715a:	lsls	r7, r2, #25
    715c:	bpl.n	7164 <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    715e:	adds	r1, #1
    7160:	str	r1, [r4, #16]
    7162:	b.n	7140 <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7164:	vmov	r2, s16
    7168:	bl	7ba2 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    716c:	cmp	r0, #0
    716e:	blt.n	717a <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    7170:	bne.n	7140 <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    7172:	ldrb	r3, [r4, #0]
    7174:	tst.w	r3, #112	; 0x70
    7178:	bne.n	70b8 <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    717a:	ldrb	r3, [r4, #1]
  return -1;
    717c:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    7180:	orr.w	r3, r3, #2
    7184:	strb	r3, [r4, #1]
  return -1;
    7186:	b.n	70ba <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    7188:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    718c:	movs	r2, #0
    718e:	add.w	r0, sl, #40	; 0x28
    7192:	cmp	r7, r6
    7194:	it	cs
    7196:	movcs	r7, r6
    7198:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    719c:	cmp	r0, #0
    719e:	beq.n	717a <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    71a0:	add.w	r1, r0, fp
    71a4:	mov	r2, r7
    71a6:	mov	r0, r8
    71a8:	bl	a218 <memcpy>
    m_curPosition += n;
    71ac:	ldr	r3, [r4, #20]
    dst += n;
    71ae:	add	r8, r7
    toRead -= n;
    71b0:	subs	r6, r6, r7
    m_curPosition += n;
    71b2:	add	r3, r7
    71b4:	str	r3, [r4, #20]
    toRead -= n;
    71b6:	b.n	70b6 <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    71b8:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    71ba:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    71bc:	lsls	r0, r0, #26
    71be:	bmi.n	71ce <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    71c0:	ldrb.w	r0, [sl, #4]
    71c4:	sub.w	r0, r0, r9
    71c8:	cmp	r3, r0
    71ca:	it	cs
    71cc:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    71ce:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    71d0:	mov.w	r7, r3, lsl #9
    71d4:	bls.n	71ea <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    71d6:	ldr.w	r0, [sl, #44]	; 0x2c
    71da:	ldr	r2, [r0, #0]
    71dc:	ldr.w	sl, [r2, #20]
    71e0:	mov	r2, r8
    71e2:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    71e4:	cmp	r0, #0
    71e6:	bne.n	71ac <FatFile::read(void*, unsigned int)+0x12c>
    71e8:	b.n	717a <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    71ea:	adds	r0, r1, r3
    71ec:	cmp	r2, r0
    71ee:	bcs.n	71d6 <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    71f0:	add.w	r0, sl, #40	; 0x28
    71f4:	strd	r1, r3, [sp]
    71f8:	bl	5618 <FsCache::sync()>
    71fc:	ldrd	r1, r3, [sp]
    7200:	cmp	r0, #0
    7202:	bne.n	71d6 <FatFile::read(void*, unsigned int)+0x156>
    7204:	b.n	717a <FatFile::read(void*, unsigned int)+0xfa>

00007206 <FatFile::peek()>:
int FatFile::peek() {
    7206:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    7208:	movs	r2, #1
    720a:	add.w	r1, sp, #7
    720e:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    7210:	ldrd	r5, r6, [r0, #16]
    7214:	bl	7080 <FatFile::read(void*, unsigned int)>
    7218:	cmp	r0, #1
    721a:	ite	eq
    721c:	ldrbeq.w	r0, [sp, #7]
    7220:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    7224:	strd	r5, r6, [r4, #16]
}
    7228:	add	sp, #8
    722a:	pop	{r4, r5, r6, pc}

0000722c <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    722c:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    722e:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    7232:	push	{r0, r1, r2, r4, r5, lr}
    7234:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7236:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    723a:	beq.n	723e <FatFile::readDirCache(bool)+0x12>
    723c:	cbnz	r1, 7266 <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    723e:	movs	r2, #1
    7240:	add.w	r1, sp, #7
    7244:	mov	r0, r4
    7246:	bl	7080 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    724a:	sxtb	r0, r0
    724c:	cmp	r0, #1
    724e:	beq.n	7256 <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    7250:	movs	r0, #0
}
    7252:	add	sp, #12
    7254:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    7256:	ldr	r3, [r4, #20]
    7258:	adds	r3, #31
    return m_buffer;
    725a:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    725c:	str	r3, [r4, #20]
    725e:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7260:	add.w	r0, r0, r5, lsl #5
    7264:	b.n	7252 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    7266:	adds	r3, #32
    7268:	b.n	725a <FatFile::readDirCache(bool)+0x2e>

0000726a <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    726a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    726e:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    7270:	ldrb	r1, [r0, #0]
    7272:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    7274:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    7276:	cbz	r1, 729a <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7278:	ldr	r0, [r0, #20]
    727a:	cmp	r0, r5
    727c:	beq.n	728c <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    727e:	cbnz	r5, 7290 <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    7280:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7282:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    7284:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7286:	bic.w	r3, r3, #32
    728a:	strb	r3, [r4, #2]
    return true;
    728c:	movs	r0, #1
    728e:	b.n	729e <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    7290:	lsls	r3, r1, #28
    7292:	bpl.n	72a2 <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    7294:	ldr	r3, [r4, #28]
    7296:	cmp	r3, r5
    7298:	bcs.n	72b2 <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    729a:	movs	r0, #0
  m_curCluster = tmp;
    729c:	str	r7, [r4, #16]
}
    729e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    72a2:	lsls	r6, r1, #26
    72a4:	bpl.n	72b2 <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    72a6:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    72a8:	ldrh	r3, [r3, #10]
    72aa:	cmp.w	r5, r3, lsl #5
    72ae:	bhi.n	729a <FatFile::seekSet(unsigned long)+0x30>
    72b0:	b.n	7282 <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    72b2:	ldr.w	ip, [r4, #8]
    72b6:	subs	r6, r5, #1
  if (isContiguous()) {
    72b8:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    72ba:	ldrb.w	r3, [ip, #6]
    72be:	lsls	r2, r2, #25
    72c0:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    72c4:	uxtb	r3, r3
    72c6:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    72ca:	bpl.n	72d4 <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    72cc:	ldr	r3, [r4, #32]
    72ce:	add	r3, r6
    72d0:	str	r3, [r4, #16]
    goto done;
    72d2:	b.n	7282 <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    72d4:	subs	r2, r0, #1
    72d6:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    72da:	cmp	r6, r3
    72dc:	bcc.n	72e0 <FatFile::seekSet(unsigned long)+0x76>
    72de:	cbnz	r0, 7306 <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    72e0:	lsls	r3, r1, #25
    return m_rootDirStart;
    72e2:	ite	mi
    72e4:	ldrmi.w	r3, [ip, #32]
    72e8:	ldrpl	r3, [r4, #32]
    72ea:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    72ec:	add.w	r8, r4, #16
  while (nNew--) {
    72f0:	cmp	r6, #0
    72f2:	beq.n	7282 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    72f4:	mov	r2, r8
    72f6:	ldr	r1, [r4, #16]
    72f8:	ldr	r0, [r4, #8]
    72fa:	subs	r6, #1
    72fc:	bl	7ba2 <FatPartition::fatGet(unsigned long, unsigned long*)>
    7300:	cmp	r0, #0
    7302:	bgt.n	72f0 <FatFile::seekSet(unsigned long)+0x86>
    7304:	b.n	729a <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    7306:	subs	r6, r6, r3
    7308:	b.n	72ec <FatFile::seekSet(unsigned long)+0x82>

0000730a <FatFile::rmdir()>:
bool FatFile::rmdir() {
    730a:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    730c:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    730e:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7310:	lsls	r2, r3, #27
    7312:	bpl.n	7328 <FatFile::rmdir()+0x1e>
    seekSet(0);
    7314:	movs	r1, #0
    7316:	bl	726a <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    731a:	movs	r1, #1
    731c:	mov	r0, r4
    731e:	bl	722c <FatFile::readDirCache(bool)>
    if (!dir) {
    7322:	cbnz	r0, 732c <FatFile::rmdir()+0x22>
      if (!getError()) {
    7324:	ldrb	r3, [r4, #1]
    7326:	cbz	r3, 7340 <FatFile::rmdir()+0x36>
}
    7328:	movs	r0, #0
    732a:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    732c:	ldrb	r3, [r0, #0]
    732e:	cbz	r3, 7340 <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7330:	cmp	r3, #229	; 0xe5
    7332:	beq.n	731a <FatFile::rmdir()+0x10>
    7334:	cmp	r3, #46	; 0x2e
    7336:	beq.n	731a <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    7338:	ldrb	r3, [r0, #11]
    733a:	lsls	r3, r3, #28
    733c:	bmi.n	731a <FatFile::rmdir()+0x10>
    733e:	b.n	7328 <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    7340:	movs	r3, #8
  return remove();
    7342:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    7344:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    7346:	ldrb	r3, [r4, #2]
    7348:	orr.w	r3, r3, #2
    734c:	strb	r3, [r4, #2]
}
    734e:	ldmia.w	sp!, {r4, lr}
  return remove();
    7352:	b.w	865c <FatFile::remove()>

00007356 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    7356:	push	{r3, r4, r5, r6, r7, lr}
    7358:	mov	r7, r1
    735a:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    735c:	movs	r1, #0
    735e:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    7360:	mov	r4, r0
    7362:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    7364:	bl	a1d4 <memset>
  m_vol = dirFile->m_vol;
    7368:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    736a:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    736c:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    736e:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    7372:	str	r3, [r4, #12]
    7374:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    7378:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    737a:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    737e:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    7380:	lsls	r1, r2, #28
    7382:	bmi.n	73fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    7384:	and.w	r2, r2, #23
    7388:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    738a:	ldrb	r1, [r3, #11]
    738c:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    7390:	itt	eq
    7392:	orreq.w	r2, r2, #8
    7396:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    7398:	ldrb.w	r2, [sp, #24]
    739c:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    739e:	and.w	r2, r5, #3
    73a2:	cmp	r2, #1
    73a4:	beq.n	73ea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    73a6:	cmp	r2, #2
    73a8:	beq.n	73ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    73aa:	cbnz	r2, 73fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    73ac:	lsls	r2, r5, #21
    73ae:	bmi.n	73fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    73b0:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    73b2:	lsls	r7, r2, #30
    73b4:	bpl.n	73c0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    73b6:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    73b8:	lsls	r6, r1, #27
    73ba:	bmi.n	73fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    73bc:	lsls	r1, r1, #31
    73be:	bmi.n	73fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    73c0:	and.w	r1, r5, #8
    73c4:	orrs	r2, r1
    73c6:	strb	r2, [r4, #2]
    return m_sector;
    73c8:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    73ca:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    73cc:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    73ce:	ldrh	r2, [r3, #20]
    73d0:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    73d4:	lsls	r2, r5, #21
    73d6:	bpl.n	7402 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    73d8:	cbnz	r1, 73f2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    73da:	ldrb	r3, [r4, #2]
    73dc:	orn	r3, r3, #127	; 0x7f
    73e0:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    73e2:	lsls	r3, r5, #17
    73e4:	bmi.n	740a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    73e6:	movs	r0, #1
}
    73e8:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    73ea:	movs	r2, #2
    73ec:	b.n	73b2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    73ee:	movs	r2, #3
    73f0:	b.n	73b2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    73f2:	bl	7db2 <FatPartition::freeChain(unsigned long)>
    73f6:	cmp	r0, #0
    73f8:	bne.n	73da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    73fa:	movs	r0, #0
    73fc:	strb	r0, [r4, #0]
  m_flags = 0;
    73fe:	strb	r0, [r4, #2]
  return false;
    7400:	b.n	73e8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    7402:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7404:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    7406:	str	r3, [r4, #28]
    7408:	b.n	73e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    740a:	ldr	r1, [r4, #28]
    740c:	mov	r0, r4
    740e:	bl	726a <FatFile::seekSet(unsigned long)>
    7412:	cmp	r0, #0
    7414:	bne.n	73e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    7416:	b.n	73fa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

00007418 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7418:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    741c:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    741e:	ldrb	r2, [r0, #0]
    7420:	sub	sp, #20
    7422:	mov	r7, r0
    7424:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7426:	cmp	r2, #0
    7428:	bne.n	74b0 <FatFile::openNext(FatFile*, int)+0x98>
    742a:	ldrb	r2, [r1, #0]
    742c:	tst.w	r2, #112	; 0x70
    7430:	beq.n	74b0 <FatFile::openNext(FatFile*, int)+0x98>
    7432:	ldr	r4, [r1, #20]
    7434:	ands.w	r4, r4, #31
    7438:	bne.n	74b0 <FatFile::openNext(FatFile*, int)+0x98>
    743a:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    743c:	movs	r1, #0
    743e:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    7440:	ldr.w	r8, [r6, #20]
    7444:	str	r3, [sp, #12]
    7446:	bl	722c <FatFile::readDirCache(bool)>
    if (!dir) {
    744a:	cbz	r0, 74b0 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    744c:	ldrb	r1, [r0, #0]
    744e:	cbz	r1, 74b0 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7450:	cmp	r1, #46	; 0x2e
    7452:	ldr	r3, [sp, #12]
    7454:	beq.n	749a <FatFile::openNext(FatFile*, int)+0x82>
    7456:	cmp	r1, #229	; 0xe5
    7458:	beq.n	749a <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    745a:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    745c:	ands.w	ip, r2, #8
    7460:	bne.n	749e <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    7462:	cbz	r4, 7486 <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    7464:	subs	r1, r0, #1
    7466:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    746a:	mov.w	r2, ip, lsl #7
    746e:	ldrb.w	r0, [r1, #1]!
    7472:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    7476:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7478:	uxtab	r2, r0, r2
    747c:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    7480:	bne.n	746a <FatFile::openNext(FatFile*, int)+0x52>
    7482:	cmp	r9, ip
    7484:	bne.n	74b0 <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    7486:	ubfx	r2, r8, #5, #16
    748a:	mov	r1, r6
    748c:	mov	r0, r7
    748e:	str	r4, [sp, #0]
    7490:	bl	7356 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    7494:	add	sp, #20
    7496:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    749a:	movs	r4, #0
    749c:	b.n	743c <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    749e:	cmp	r2, #15
    74a0:	bne.n	749a <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    74a2:	lsls	r2, r1, #25
    74a4:	bpl.n	743c <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    74a6:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    74aa:	ldrb.w	r9, [r0, #13]
    74ae:	b.n	743c <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    74b0:	movs	r0, #0
    74b2:	b.n	7494 <FatFile::openNext(FatFile*, int)+0x7c>

000074b4 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    74b4:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    74b6:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    74b8:	mov	r4, r0
  if (!isOpen()) {
    74ba:	cmp	r3, #0
    74bc:	beq.n	752a <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    74be:	ldrsb.w	r3, [r0, #2]
    74c2:	cmp	r3, #0
    74c4:	bge.n	751e <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    74c6:	movs	r1, #1
    74c8:	bl	7028 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    74cc:	mov	r5, r0
    74ce:	cbnz	r0, 74de <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    74d0:	ldrb	r3, [r4, #1]
  return false;
    74d2:	movs	r0, #0
  m_error |= WRITE_ERROR;
    74d4:	orr.w	r3, r3, #1
    74d8:	strb	r3, [r4, #1]
}
    74da:	add	sp, #12
    74dc:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    74de:	ldrb	r3, [r0, #0]
    74e0:	cmp	r3, #229	; 0xe5
    74e2:	beq.n	74d0 <FatFile::sync()+0x1c>
    if (isFile()) {
    74e4:	ldrb	r3, [r4, #0]
    74e6:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    74e8:	itt	mi
    74ea:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    74ec:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    74ee:	ldr	r3, [r4, #32]
    74f0:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    74f2:	lsrs	r3, r3, #16
    74f4:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    74f6:	ldr	r3, [pc, #56]	; (7530 <FatFile::sync()+0x7c>)
    74f8:	ldr	r3, [r3, #0]
    74fa:	cbz	r3, 7516 <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    74fc:	add.w	r2, sp, #3
    7500:	add.w	r1, sp, #6
    7504:	add	r0, sp, #4
    7506:	blx	r3
      setLe16(dir->modifyDate, date);
    7508:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    750c:	strh	r3, [r5, #24]
    750e:	strh	r3, [r5, #18]
    7510:	ldrh.w	r3, [sp, #6]
    7514:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7516:	ldrb	r3, [r4, #2]
    7518:	and.w	r3, r3, #127	; 0x7f
    751c:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    751e:	ldr	r0, [r4, #8]
    7520:	bl	6f5c <FatPartition::cacheSync()>
    7524:	cmp	r0, #0
    7526:	beq.n	74d0 <FatFile::sync()+0x1c>
    7528:	b.n	74da <FatFile::sync()+0x26>
    return true;
    752a:	movs	r0, #1
    752c:	b.n	74da <FatFile::sync()+0x26>
    752e:	nop
    7530:	.word	0x200147fc

00007534 <FatFile::close()>:
bool FatFile::close() {
    7534:	push	{r4, lr}
    7536:	mov	r4, r0
  bool rtn = sync();
    7538:	bl	74b4 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    753c:	movs	r3, #0
    753e:	strb	r3, [r4, #0]
  m_flags = 0;
    7540:	strb	r3, [r4, #2]
}
    7542:	pop	{r4, pc}

00007544 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7544:	push	{r4, r5, r6, r7, lr}
    7546:	mov	r7, r3
    7548:	sub	sp, #84	; 0x54
  FatFile() {}
    754a:	movs	r3, #0
    754c:	mov	r6, r0
    754e:	mov	r4, r1
    7550:	str	r2, [sp, #4]
    7552:	str	r3, [sp, #8]
    7554:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    7558:	ldrb	r3, [r0, #0]
    755a:	cbz	r3, 7562 <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    755c:	movs	r0, #0
}
    755e:	add	sp, #84	; 0x54
    7560:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    7562:	ldrb	r3, [r1, #0]
    7564:	tst.w	r3, #112	; 0x70
    7568:	beq.n	755c <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    756a:	ldrb	r3, [r2, #0]
    756c:	cmp	r3, #47	; 0x2f
    756e:	bne.n	7596 <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    7570:	ldr	r2, [sp, #4]
    7572:	ldrb	r3, [r2, #0]
    7574:	cmp	r3, #47	; 0x2f
    7576:	beq.n	7584 <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    7578:	ldr	r1, [r4, #8]
    if (*path == 0) {
    757a:	cbnz	r3, 758a <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    757c:	mov	r0, r6
    757e:	bl	7046 <FatFile::openRoot(FatVolume*)>
    7582:	b.n	755e <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    7584:	adds	r2, #1
    7586:	str	r2, [sp, #4]
    7588:	b.n	7570 <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    758a:	add	r0, sp, #8
    758c:	bl	6f2c <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7590:	cmp	r0, #0
    7592:	beq.n	755c <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    7594:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    7596:	add	r3, sp, #4
    7598:	add	r2, sp, #44	; 0x2c
    759a:	ldr	r1, [sp, #4]
    759c:	mov	r0, r6
    759e:	bl	85b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    75a2:	cmp	r0, #0
    75a4:	beq.n	755c <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    75a6:	ldr	r3, [sp, #4]
    75a8:	ldrb	r3, [r3, #0]
    75aa:	cbz	r3, 75d4 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    75ac:	movs	r3, #0
    75ae:	add	r2, sp, #44	; 0x2c
    75b0:	mov	r1, r4
    75b2:	mov	r0, r6
    75b4:	bl	832c <FatFile::open(FatFile*, FatLfn_t*, int)>
    75b8:	cmp	r0, #0
    75ba:	beq.n	755c <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    75bc:	mov	r5, r6
    75be:	add	r4, sp, #8
    75c0:	ldmia	r5!, {r0, r1, r2, r3}
    75c2:	stmia	r4!, {r0, r1, r2, r3}
    75c4:	ldmia	r5!, {r0, r1, r2, r3}
    75c6:	stmia	r4!, {r0, r1, r2, r3}
    75c8:	ldr	r3, [r5, #0]
    close();
    75ca:	mov	r0, r6
    tmpDir = *this;
    75cc:	str	r3, [r4, #0]
    close();
    75ce:	bl	7534 <FatFile::close()>
  while (1) {
    75d2:	b.n	7594 <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    75d4:	mov	r3, r7
    75d6:	add	r2, sp, #44	; 0x2c
    75d8:	mov	r1, r4
    75da:	mov	r0, r6
    75dc:	bl	832c <FatFile::open(FatFile*, FatLfn_t*, int)>
    75e0:	b.n	755e <FatFile::open(FatFile*, char const*, int)+0x1a>

000075e2 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    75e2:	cbz	r1, 75ec <FatFile::open(FatVolume*, char const*, int)+0xa>
    75e4:	add.w	r1, r1, #1096	; 0x448
    75e8:	b.w	7544 <FatFile::open(FatFile*, char const*, int)>
}
    75ec:	mov	r0, r1
    75ee:	bx	lr

000075f0 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    75f0:	push	{r4, r5, r6, lr}
    75f2:	mov	r6, r0
    75f4:	mov	r4, r1
  if (!sync()) {
    75f6:	bl	74b4 <FatFile::sync()>
    75fa:	mov	r5, r0
    75fc:	cbnz	r0, 7604 <FatFile::dirEntry(DirFat_t*)+0x14>
  return false;
    75fe:	movs	r5, #0
}
    7600:	mov	r0, r5
    7602:	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7604:	movs	r1, #0
    7606:	mov	r0, r6
    7608:	bl	7028 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    760c:	mov	r3, r0
    760e:	cmp	r0, #0
    7610:	beq.n	75fe <FatFile::dirEntry(DirFat_t*)+0xe>
  memcpy(dst, dir, sizeof(DirFat_t));
    7612:	mov	r1, r4
    7614:	add.w	r2, r0, #32
    7618:	ldr.w	r0, [r3], #4
    761c:	cmp	r3, r2
    761e:	str.w	r0, [r1], #4
    7622:	bne.n	7618 <FatFile::dirEntry(DirFat_t*)+0x28>
    7624:	b.n	7600 <FatFile::dirEntry(DirFat_t*)+0x10>

00007626 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7626:	push	{r4, r5, lr}
    7628:	sub	sp, #36	; 0x24
    762a:	mov	r5, r1
    762c:	mov	r4, r2
  if (!dirEntry(&dir)) {
    762e:	mov	r1, sp
    7630:	bl	75f0 <FatFile::dirEntry(DirFat_t*)>
    7634:	cbz	r0, 7642 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    7636:	ldrh.w	r3, [sp, #16]
    763a:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    763c:	ldrh.w	r3, [sp, #14]
    7640:	strh	r3, [r4, #0]
}
    7642:	add	sp, #36	; 0x24
    7644:	pop	{r4, r5, pc}

00007646 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7646:	push	{r4, r5, lr}
    7648:	sub	sp, #36	; 0x24
    764a:	mov	r5, r1
    764c:	mov	r4, r2
  if (!dirEntry(&dir)) {
    764e:	mov	r1, sp
    7650:	bl	75f0 <FatFile::dirEntry(DirFat_t*)>
    7654:	cbz	r0, 7662 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    7656:	ldrh.w	r3, [sp, #24]
    765a:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    765c:	ldrh.w	r3, [sp, #22]
    7660:	strh	r3, [r4, #0]
}
    7662:	add	sp, #36	; 0x24
    7664:	pop	{r4, r5, pc}

00007666 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7666:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    7668:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    766a:	sub	sp, #36	; 0x24
    766c:	mov	r4, r0
    766e:	mov	r6, r1
  if (!parent->isDir()) {
    7670:	tst.w	r3, #112	; 0x70
    7674:	bne.n	767c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    7676:	movs	r0, #0
}
    7678:	add	sp, #36	; 0x24
    767a:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    767c:	movw	r3, #2562	; 0xa02
    7680:	bl	832c <FatFile::open(FatFile*, FatLfn_t*, int)>
    7684:	cmp	r0, #0
    7686:	beq.n	7676 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    7688:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    768a:	movs	r5, #16
  if (!addDirCluster()) {
    768c:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    768e:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7690:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    7692:	bl	6fb8 <FatFile::addDirCluster()>
    7696:	cmp	r0, #0
    7698:	beq.n	7676 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    769a:	ldr	r3, [r4, #16]
    seekSet(0);
    769c:	movs	r1, #0
    769e:	mov	r0, r4
    76a0:	str	r3, [r4, #32]
    76a2:	bl	726a <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    76a6:	mov	r0, r4
    76a8:	bl	74b4 <FatFile::sync()>
    76ac:	cmp	r0, #0
    76ae:	beq.n	7676 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    76b0:	mov	r1, r7
    76b2:	mov	r0, r4
    76b4:	bl	7028 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    76b8:	cmp	r0, #0
    76ba:	beq.n	7676 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    76bc:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    76be:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    76c0:	mov	r3, r0
    76c2:	add.w	ip, r0, #32
    76c6:	mov	r5, r2
    76c8:	ldr	r0, [r3, #0]
    76ca:	adds	r3, #8
    76cc:	ldr.w	r1, [r3, #-4]
    76d0:	mov	r7, r2
    76d2:	cmp	r3, ip
    76d4:	stmia	r7!, {r0, r1}
    76d6:	mov	r2, r7
    76d8:	bne.n	76c8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    76da:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    76de:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    76e0:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    76e2:	movs	r2, #1
    dot.name[i] = ' ';
    76e4:	str.w	r3, [sp, #1]
    76e8:	adds	r0, #40	; 0x28
    76ea:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    76ee:	subs	r1, #2
    76f0:	strh.w	r3, [sp, #9]
    76f4:	ldrb.w	r3, [r0, #-34]
    76f8:	lsls	r1, r3
    76fa:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    76fe:	add	r1, r3
    7700:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7704:	mov	r3, r0
    7706:	cmp	r0, #0
    7708:	beq.n	7676 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    770a:	movs	r2, #46	; 0x2e
    770c:	mov	ip, r5
    770e:	mov	r7, r0
    7710:	add.w	lr, sp, #32
    7714:	strb.w	r2, [sp]
    7718:	mov	r2, ip
    771a:	adds	r7, #8
    771c:	ldmia	r2!, {r0, r1}
    771e:	cmp	r2, lr
    7720:	str.w	r0, [r7, #-8]
    7724:	str.w	r1, [r7, #-4]
    7728:	mov	ip, r2
    772a:	bne.n	7718 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    772c:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    772e:	adds	r3, #32
  dot.name[1] = '.';
    7730:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7734:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    7736:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7738:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    773a:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    773e:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7740:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    7744:	mov	r5, r2
    7746:	adds	r3, #8
    7748:	ldmia	r5!, {r0, r1}
    774a:	cmp	r5, r6
    774c:	str.w	r0, [r3, #-8]
    7750:	str.w	r1, [r3, #-4]
    7754:	mov	r2, r5
    7756:	bne.n	7744 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    7758:	ldr	r0, [r4, #8]
    775a:	bl	6f5c <FatPartition::cacheSync()>
    775e:	b.n	7678 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

00007760 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7760:	push	{r4, r5, r6, r7, lr}
    7762:	mov	r7, r3
    7764:	sub	sp, #84	; 0x54
    7766:	movs	r3, #0
    7768:	mov	r6, r0
    776a:	mov	r4, r1
    776c:	str	r2, [sp, #4]
    776e:	strh.w	r3, [sp, #20]
  FatFile() {}
    7772:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    7774:	ldrb	r3, [r0, #0]
    7776:	cbz	r3, 777e <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    7778:	movs	r0, #0
}
    777a:	add	sp, #84	; 0x54
    777c:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    777e:	ldrb	r3, [r1, #0]
    7780:	tst.w	r3, #112	; 0x70
    7784:	beq.n	7778 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    7786:	ldrb	r3, [r2, #0]
    7788:	cmp	r3, #47	; 0x2f
    778a:	bne.n	77a2 <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    778c:	ldr	r2, [sp, #4]
    778e:	ldrb	r3, [r2, #0]
    7790:	cmp	r3, #47	; 0x2f
    7792:	beq.n	77de <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    7794:	ldr	r1, [r4, #8]
    7796:	add	r0, sp, #44	; 0x2c
    7798:	bl	6f2c <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    779c:	cmp	r0, #0
    779e:	beq.n	7778 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    77a0:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    77a2:	add	r3, sp, #4
    77a4:	add	r2, sp, #8
    77a6:	ldr	r1, [sp, #4]
    77a8:	mov	r0, r6
    77aa:	bl	85b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    77ae:	cmp	r0, #0
    77b0:	beq.n	7778 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    77b2:	ldr	r3, [sp, #4]
    77b4:	ldrb	r3, [r3, #0]
    77b6:	cbz	r3, 77f8 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    77b8:	movs	r3, #0
    77ba:	add	r2, sp, #8
    77bc:	mov	r1, r4
    77be:	mov	r0, r6
    77c0:	bl	832c <FatFile::open(FatFile*, FatLfn_t*, int)>
    77c4:	cbz	r0, 77e4 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    77c6:	mov	r5, r6
    77c8:	add	r4, sp, #44	; 0x2c
    77ca:	ldmia	r5!, {r0, r1, r2, r3}
    77cc:	stmia	r4!, {r0, r1, r2, r3}
    77ce:	ldmia	r5!, {r0, r1, r2, r3}
    77d0:	stmia	r4!, {r0, r1, r2, r3}
    77d2:	ldr	r3, [r5, #0]
    close();
    77d4:	mov	r0, r6
    tmpDir = *this;
    77d6:	str	r3, [r4, #0]
    close();
    77d8:	bl	7534 <FatFile::close()>
  while (1) {
    77dc:	b.n	77a0 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    77de:	adds	r2, #1
    77e0:	str	r2, [sp, #4]
    77e2:	b.n	778c <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    77e4:	cmp	r7, #0
    77e6:	beq.n	7778 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    77e8:	add	r2, sp, #8
    77ea:	mov	r1, r4
    77ec:	mov	r0, r6
    77ee:	bl	7666 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    77f2:	cmp	r0, #0
    77f4:	bne.n	77c6 <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    77f6:	b.n	7778 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    77f8:	add	r2, sp, #8
    77fa:	mov	r1, r4
    77fc:	mov	r0, r6
    77fe:	bl	7666 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7802:	b.n	777a <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

00007804 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7804:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    7808:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    780a:	sub	sp, #108	; 0x6c
    780c:	mov.w	r9, #0
    7810:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    7812:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7816:	mov	r7, r1
    7818:	mov	r8, r2
    781a:	str.w	r9, [sp, #32]
    781e:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    7822:	bne.n	782c <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    7824:	movs	r0, #0
}
    7826:	add	sp, #108	; 0x6c
    7828:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    782c:	ldr	r2, [r0, #8]
    782e:	ldr	r3, [r1, #8]
    7830:	cmp	r2, r3
    7832:	bne.n	7824 <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    7834:	mov	r6, r4
  sync();
    7836:	bl	74b4 <FatFile::sync()>
  oldFile = *this;
    783a:	add	r5, sp, #68	; 0x44
    783c:	ldmia	r6!, {r0, r1, r2, r3}
    783e:	stmia	r5!, {r0, r1, r2, r3}
    7840:	ldmia	r6!, {r0, r1, r2, r3}
    7842:	stmia	r5!, {r0, r1, r2, r3}
    7844:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7846:	mov	r1, r9
    7848:	mov	r0, r4
  oldFile = *this;
    784a:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    784c:	bl	7028 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7850:	cmp	r0, #0
    7852:	beq.n	7824 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    7854:	mov	r2, sp
    7856:	mov	r3, r0
    7858:	add.w	ip, r0, #32
    785c:	mov	r5, r2
    785e:	ldr	r0, [r3, #0]
    7860:	adds	r3, #8
    7862:	ldr.w	r1, [r3, #-4]
    7866:	mov	r6, r2
    7868:	cmp	r3, ip
    786a:	stmia	r6!, {r0, r1}
    786c:	mov	r2, r6
    786e:	bne.n	785e <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    7870:	ldrb	r3, [r4, #0]
    7872:	add	r6, sp, #32
    7874:	ands.w	r3, r3, #8
    7878:	beq.n	7890 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    787a:	movw	r3, #2561	; 0xa01
    787e:	mov	r2, r8
    7880:	mov	r1, r7
    7882:	mov	r0, r6
    7884:	bl	7544 <FatFile::open(FatFile*, char const*, int)>
    7888:	cmp	r0, #0
    788a:	beq.n	7824 <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    788c:	movs	r7, #0
    788e:	b.n	78a0 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    7890:	mov	r2, r8
    7892:	mov	r1, r7
    7894:	mov	r0, r6
    7896:	bl	7760 <FatFile::mkdir(FatFile*, char const*, bool)>
    789a:	cmp	r0, #0
    789c:	beq.n	7824 <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    789e:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    78a0:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    78a2:	movs	r1, #1
    78a4:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    78a6:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    78a8:	ldrh.w	r3, [sp, #36]	; 0x24
    78ac:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    78ae:	ldrb.w	r3, [sp, #35]	; 0x23
    78b2:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    78b4:	ldr	r3, [sp, #44]	; 0x2c
    78b6:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    78b8:	movs	r3, #0
    78ba:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    78be:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    78c2:	bl	7028 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    78c6:	cmp	r0, #0
    78c8:	beq.n	7824 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    78ca:	add.w	r3, sp, #13
    78ce:	add.w	r2, r0, #13
    78d2:	add.w	r1, sp, #29
    78d6:	ldr.w	ip, [r3], #4
    78da:	cmp	r3, r1
    78dc:	str.w	ip, [r2], #4
    78e0:	bne.n	78d6 <FatFile::rename(FatFile*, char const*)+0xd2>
    78e2:	ldrh	r1, [r3, #0]
    78e4:	strh	r1, [r2, #0]
    78e6:	ldrb	r3, [r3, #2]
    78e8:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    78ea:	ldrb.w	r3, [sp, #11]
    78ee:	strb	r3, [r0, #11]
  if (dirCluster) {
    78f0:	cmp	r7, #0
    78f2:	beq.n	7970 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    78f4:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    78f6:	subs	r3, r7, #2
    78f8:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    78fa:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    78fc:	ldr.w	r1, [r0, #-20]
    7900:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    7902:	movs	r2, #0
    7904:	add	r1, r3
    7906:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    790a:	cmp	r0, #0
    790c:	beq.n	7824 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    790e:	add.w	r2, r0, #32
    7912:	mov	lr, r5
    7914:	add.w	r3, r0, #64	; 0x40
    7918:	ldr	r0, [r2, #0]
    791a:	adds	r2, #8
    791c:	ldr.w	r1, [r2, #-4]
    7920:	mov	ip, lr
    7922:	cmp	r2, r3
    7924:	stmia.w	ip!, {r0, r1}
    7928:	mov	lr, ip
    792a:	bne.n	7918 <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    792c:	mov	r1, r7
    792e:	ldr	r0, [r4, #8]
    7930:	bl	7db2 <FatPartition::freeChain(unsigned long)>
    7934:	cmp	r0, #0
    7936:	beq.w	7824 <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    793a:	ldr	r0, [r4, #8]
    793c:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    793e:	ldr	r1, [r4, #32]
    7940:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    7942:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7944:	subs	r1, #2
    7946:	lsls	r1, r3
    7948:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    794c:	add	r1, r3
    794e:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7952:	cmp	r0, #0
    7954:	beq.w	7824 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    7958:	add.w	r3, r0, #32
    795c:	mov	r2, r5
    795e:	adds	r3, #8
    7960:	ldmia	r2!, {r0, r1}
    7962:	cmp	r2, r6
    7964:	str.w	r0, [r3, #-8]
    7968:	str.w	r1, [r3, #-4]
    796c:	mov	r5, r2
    796e:	bne.n	795c <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    7970:	movs	r3, #0
  if (!oldFile.remove()) {
    7972:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    7974:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    7976:	movs	r3, #2
    7978:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    797c:	movs	r3, #8
    797e:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    7982:	bl	865c <FatFile::remove()>
    7986:	cmp	r0, #0
    7988:	beq.w	7824 <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    798c:	ldr	r0, [r4, #8]
    798e:	bl	6f5c <FatPartition::cacheSync()>
    7992:	b.n	7826 <FatFile::rename(FatFile*, char const*)+0x22>

00007994 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    7994:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7998:	ldrb	r3, [r0, #2]
    799a:	mov	r4, r0
    799c:	mov	r9, r1
    799e:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    79a0:	lsls	r5, r3, #30
    79a2:	bpl.n	79da <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    79a4:	lsls	r1, r3, #28
    79a6:	bmi.n	79d0 <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    79a8:	ldr	r3, [r4, #20]
    79aa:	adds	r3, r3, r7
    79ac:	bcs.n	79da <FatFile::write(void const*, unsigned int)+0x46>
    79ae:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    79b0:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    79b4:	ldr	r3, [r4, #20]
  while (nToWrite) {
    79b6:	cmp.w	r8, #0
    79ba:	bne.n	79e6 <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    79bc:	ldr	r2, [r4, #28]
    79be:	cmp	r2, r3
    79c0:	bcs.w	7b22 <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    79c4:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    79c6:	ldrb	r3, [r4, #2]
    79c8:	orn	r3, r3, #127	; 0x7f
    79cc:	strb	r3, [r4, #2]
    79ce:	b.n	7b2c <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    79d0:	ldr	r1, [r0, #28]
    79d2:	bl	726a <FatFile::seekSet(unsigned long)>
    79d6:	cmp	r0, #0
    79d8:	bne.n	79a8 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    79da:	ldrb	r3, [r4, #1]
  return 0;
    79dc:	movs	r7, #0
  m_error |= WRITE_ERROR;
    79de:	orr.w	r3, r3, #1
    79e2:	strb	r3, [r4, #1]
  return 0;
    79e4:	b.n	7b2c <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    79e6:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    79e8:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    79ec:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    79ee:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    79f0:	ands.w	r6, r6, r3, lsr #9
    79f4:	bne.n	7a0c <FatFile::write(void const*, unsigned int)+0x78>
    79f6:	cbnz	r5, 7a0c <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    79f8:	cmp	r1, #0
    79fa:	beq.n	7a74 <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    79fc:	ldrb	r2, [r4, #2]
    79fe:	lsls	r2, r2, #25
    7a00:	bpl.n	7a5c <FatFile::write(void const*, unsigned int)+0xc8>
    7a02:	ldr	r2, [r4, #28]
    7a04:	cmp	r2, r3
    7a06:	bls.n	7a5c <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    7a08:	adds	r1, #1
    7a0a:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    7a0c:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a10:	ldr	r1, [r4, #16]
    7a12:	ldrb.w	r3, [ip, #6]
    7a16:	subs	r1, #2
    7a18:	lsls	r1, r3
    7a1a:	ldr.w	r3, [ip, #20]
    7a1e:	add	r1, r3
                      + sectorOfCluster;
    7a20:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    7a22:	cmp	r5, #0
    7a24:	bne.n	7a8c <FatFile::write(void const*, unsigned int)+0xf8>
    7a26:	cmp.w	r8, #512	; 0x200
    7a2a:	bcc.n	7a8c <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    7a2c:	cmp.w	r8, #1024	; 0x400
    7a30:	ldr.w	r2, [ip, #52]	; 0x34
    7a34:	ldr.w	r0, [ip, #44]	; 0x2c
    7a38:	bcs.n	7aec <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    7a3a:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    7a3c:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    7a3e:	ittt	eq
    7a40:	moveq.w	r3, #4294967295
    m_status = 0;
    7a44:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7a48:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    7a4c:	ldr	r3, [r0, #0]
    7a4e:	ldr	r3, [r3, #36]	; 0x24
    7a50:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    7a52:	cmp	r0, #0
    7a54:	beq.n	79da <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    7a56:	mov.w	r6, #512	; 0x200
    7a5a:	b.n	7ad6 <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7a5c:	mov	r2, sl
    7a5e:	bl	7ba2 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7a62:	cmp	r0, #0
    7a64:	blt.n	79da <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    7a66:	bne.n	7a0c <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    7a68:	mov	r0, r4
    7a6a:	bl	6f82 <FatFile::addCluster()>
    7a6e:	cmp	r0, #0
    7a70:	bne.n	7a0c <FatFile::write(void const*, unsigned int)+0x78>
    7a72:	b.n	79da <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    7a74:	ldr	r3, [r4, #32]
    7a76:	cbnz	r3, 7a88 <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    7a78:	mov	r0, r4
    7a7a:	bl	6f82 <FatFile::addCluster()>
    7a7e:	cmp	r0, #0
    7a80:	beq.n	79da <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    7a82:	ldr	r3, [r4, #16]
    7a84:	str	r3, [r4, #32]
    7a86:	b.n	7a0c <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    7a88:	str	r3, [r4, #16]
    7a8a:	b.n	7a0c <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    7a8c:	rsb	r6, r5, #512	; 0x200
    7a90:	cmp	r6, r8
    7a92:	it	cs
    7a94:	movcs	r6, r8
      if (sectorOffset == 0 &&
    7a96:	cbnz	r5, 7ae4 <FatFile::write(void const*, unsigned int)+0x150>
    7a98:	ldr	r2, [r4, #20]
    7a9a:	ldr	r3, [r4, #28]
    7a9c:	cmp	r2, r3
    7a9e:	bcs.n	7ae8 <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    7aa0:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7aa2:	tst.w	r3, #32
    7aa6:	ite	eq
    7aa8:	moveq	r2, #1
    7aaa:	movne	r2, #5
    return m_cache.prepare(sector, options);
    7aac:	add.w	r0, ip, #40	; 0x28
    7ab0:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7ab4:	cmp	r0, #0
    7ab6:	beq.n	79da <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    7ab8:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7aba:	add	r5, r6
      memcpy(dst, src, n);
    7abc:	mov	r2, r6
    7abe:	mov	r1, r9
    7ac0:	bl	a218 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7ac4:	cmp.w	r5, #512	; 0x200
    7ac8:	ldr	r0, [r4, #8]
    7aca:	bne.n	7ad6 <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    7acc:	adds	r0, #40	; 0x28
    7ace:	bl	5618 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    7ad2:	cmp	r0, #0
    7ad4:	beq.n	79da <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    7ad6:	ldr	r3, [r4, #20]
    src += n;
    7ad8:	add	r9, r6
    nToWrite -= n;
    7ada:	sub.w	r8, r8, r6
    m_curPosition += n;
    7ade:	add	r3, r6
    7ae0:	str	r3, [r4, #20]
    nToWrite -= n;
    7ae2:	b.n	79b4 <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7ae4:	movs	r2, #1
    7ae6:	b.n	7aac <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7ae8:	movs	r2, #5
    7aea:	b.n	7aac <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    7aec:	ldrb.w	r3, [ip, #4]
    7af0:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    7af2:	mov.w	r6, r8, lsr #9
    7af6:	cmp	r3, r6
    7af8:	it	cs
    7afa:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    7afc:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    7afe:	mov.w	r6, r3, lsl #9
    7b02:	bhi.n	7b18 <FatFile::write(void const*, unsigned int)+0x184>
    7b04:	add.w	lr, r1, r3
    7b08:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    7b0a:	ittt	hi
    7b0c:	movhi.w	r2, #4294967295
    m_status = 0;
    7b10:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7b14:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    7b18:	ldr	r2, [r0, #0]
    7b1a:	ldr	r5, [r2, #40]	; 0x28
    7b1c:	mov	r2, r9
    7b1e:	blx	r5
    7b20:	b.n	7ad2 <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    7b22:	ldr	r3, [pc, #16]	; (7b34 <FatFile::write(void const*, unsigned int)+0x1a0>)
    7b24:	ldr	r3, [r3, #0]
    7b26:	cmp	r3, #0
    7b28:	bne.w	79c6 <FatFile::write(void const*, unsigned int)+0x32>
}
    7b2c:	mov	r0, r7
    7b2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b32:	nop
    7b34:	.word	0x200147fc

00007b38 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    7b38:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    7b3a:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    7b3e:	push	{r4, r5, lr}
    7b40:	mov	r4, r3
    7b42:	it	cs
    7b44:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    7b48:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    7b4c:	cmp	r1, r5
    7b4e:	bcc.n	7b56 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7b50:	subs	r3, r3, r4
    7b52:	str	r3, [r2, #0]
}
    7b54:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    7b56:	ldrh.w	r0, [r1], #2
    7b5a:	cmp	r0, #0
    7b5c:	bne.n	7b4c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    7b5e:	ldr	r0, [r2, #4]
    7b60:	adds	r0, #1
    7b62:	str	r0, [r2, #4]
    7b64:	b.n	7b4c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

00007b66 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    7b66:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    7b68:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    7b6a:	push	{r4, r5, lr}
    7b6c:	mov	r4, r3
    7b6e:	it	cs
    7b70:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    7b72:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    7b76:	cmp	r1, r5
    7b78:	bcc.n	7b80 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7b7a:	subs	r3, r3, r4
    7b7c:	str	r3, [r2, #0]
}
    7b7e:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    7b80:	ldr.w	r0, [r1], #4
    7b84:	cmp	r0, #0
    7b86:	bne.n	7b76 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    7b88:	ldr	r0, [r2, #4]
    7b8a:	adds	r0, #1
    7b8c:	str	r0, [r2, #4]
    7b8e:	b.n	7b76 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00007b90 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7b90:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    7b92:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7b96:	cmp	r3, #2
    7b98:	it	eq
    7b9a:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    7b9e:	b.w	5666 <FsCache::prepare(unsigned long, unsigned char)>

00007ba2 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7ba2:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7ba4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ba8:	mov	r6, r0
    7baa:	mov	r4, r1
    7bac:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7bae:	bhi.n	7bb8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    7bb0:	mov.w	r0, #4294967295
}
    7bb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7bb8:	ldr	r3, [r0, #28]
    7bba:	cmp	r3, r1
    7bbc:	bcc.n	7bb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    7bbe:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7bc0:	cmp	r3, #32
    7bc2:	bne.n	7bea <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7bc4:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7bc6:	movs	r2, #0
    7bc8:	add.w	r1, r1, r4, lsr #7
    7bcc:	bl	7b90 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7bd0:	cmp	r0, #0
    7bd2:	beq.n	7bb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7bd4:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    7bd6:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    7bda:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    7bdc:	ldr	r2, [r6, #28]
    7bde:	cmp	r2, r3
  return 1;
    7be0:	itet	cs
    7be2:	movcs	r0, #1
    return 0;
    7be4:	movcc	r0, #0
  *value = next;
    7be6:	strcs	r3, [r7, #0]
  return 1;
    7be8:	b.n	7bb4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    7bea:	cmp	r3, #16
    7bec:	bne.n	7c0a <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7bee:	ubfx	r1, r1, #8, #8
    7bf2:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7bf4:	movs	r2, #0
    7bf6:	add	r1, r3
    7bf8:	bl	7b90 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7bfc:	cmp	r0, #0
    7bfe:	beq.n	7bb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7c00:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    7c02:	and.w	r4, r4, #510	; 0x1fe
    7c06:	ldrh	r3, [r0, r4]
    7c08:	b.n	7bdc <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    7c0a:	cmp	r3, #12
    7c0c:	bne.n	7bb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    7c0e:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7c12:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7c14:	movs	r2, #0
    index += index >> 1;
    7c16:	uxtah	r8, r8, r1
    7c1a:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7c1e:	ubfx	r8, r8, #9, #7
    7c22:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7c24:	mov	r1, r8
    7c26:	bl	7b90 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7c2a:	cmp	r0, #0
    7c2c:	beq.n	7bb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    7c2e:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    7c32:	ldrb	r5, [r0, r3]
    index++;
    7c34:	adds	r3, #1
    if (index == m_bytesPerSector) {
    7c36:	cmp.w	r3, #512	; 0x200
    7c3a:	bne.n	7c4e <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    7c3c:	movs	r2, #0
    7c3e:	add.w	r1, r8, #1
    7c42:	mov	r0, r6
    7c44:	bl	7b90 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7c48:	cmp	r0, #0
    7c4a:	beq.n	7bb0 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    7c4c:	movs	r3, #0
    tmp |= pc[index] << 8;
    7c4e:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7c50:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    7c52:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7c56:	ite	mi
    7c58:	lsrmi	r3, r3, #4
    7c5a:	ubfxpl	r3, r3, #0, #12
    7c5e:	b.n	7bdc <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

00007c60 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7c60:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7c62:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c66:	mov	r8, r0
    7c68:	mov	r4, r1
    7c6a:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7c6c:	bhi.n	7c74 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    7c6e:	movs	r0, #0
}
    7c70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7c74:	ldr	r3, [r0, #28]
    7c76:	cmp	r3, r1
    7c78:	bcc.n	7c6e <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    7c7a:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7c7c:	cmp	r3, #32
    7c7e:	bne.n	7c9c <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7c80:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7c82:	movs	r2, #1
    7c84:	add.w	r1, r1, r4, lsr #7
    7c88:	bl	7b90 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7c8c:	cmp	r0, #0
    7c8e:	beq.n	7c6e <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7c90:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    7c92:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    7c96:	str	r5, [r0, r4]
    return true;
    7c98:	movs	r0, #1
    7c9a:	b.n	7c70 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    7c9c:	cmp	r3, #16
    7c9e:	bne.n	7cbc <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7ca0:	ubfx	r1, r1, #8, #8
    7ca4:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7ca6:	movs	r2, #1
    7ca8:	add	r1, r3
    7caa:	bl	7b90 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7cae:	cmp	r0, #0
    7cb0:	beq.n	7c6e <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7cb2:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    7cb4:	and.w	r4, r4, #510	; 0x1fe
    7cb8:	strh	r5, [r0, r4]
    return true;
    7cba:	b.n	7c98 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    7cbc:	cmp	r3, #12
    7cbe:	bne.n	7c6e <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    7cc0:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7cc4:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7cc6:	movs	r2, #1
    index += index >> 1;
    7cc8:	uxtah	r7, r7, r1
    7ccc:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7cce:	ubfx	r7, r7, #9, #7
    7cd2:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7cd4:	mov	r1, r7
    7cd6:	bl	7b90 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7cda:	cmp	r0, #0
    7cdc:	beq.n	7c6e <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    7cde:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    7ce2:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    7ce6:	itt	ne
    7ce8:	lslne	r2, r5, #4
    7cea:	ldrbne	r1, [r0, r3]
    7cec:	add.w	r6, r0, r3
    index++;
    7cf0:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    7cf4:	ittet	ne
    7cf6:	andne.w	r2, r2, #240	; 0xf0
    7cfa:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    7cfe:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    7d00:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    7d02:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    7d06:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    7d08:	bne.n	7d1a <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7d0a:	movs	r2, #1
    7d0c:	mov	r0, r8
    7d0e:	adds	r1, r7, r2
    7d10:	bl	7b90 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7d14:	cmp	r0, #0
    7d16:	beq.n	7c6e <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    7d18:	movs	r3, #0
    tmp = value >> 4;
    7d1a:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7d1e:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    7d20:	cbnz	r4, 7d2c <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7d22:	ldrb	r3, [r0, r3]
    7d24:	bic.w	r3, r3, #15
    7d28:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    7d2c:	strb	r5, [r2, #0]
    7d2e:	b.n	7c98 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

00007d30 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7d30:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    7d34:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7d36:	mov	r5, r0
    7d38:	mov	r6, r1
    7d3a:	mov	r8, r2
  if (m_allocSearchStart < current) {
    7d3c:	cmp	r4, r1
    7d3e:	bcc.n	7d44 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    7d40:	movs	r7, #1
    7d42:	b.n	7d48 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    7d44:	mov	r4, r1
    setStart = false;
    7d46:	movs	r7, #0
    find++;
    7d48:	adds	r4, #1
    if (find > m_lastCluster) {
    7d4a:	ldr	r3, [r5, #28]
    7d4c:	cmp	r3, r4
    7d4e:	bcs.n	7d56 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    7d50:	cbnz	r7, 7d84 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    7d52:	ldr	r4, [r5, #12]
    7d54:	b.n	7d40 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    7d56:	cmp	r6, r4
    7d58:	beq.n	7d84 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    7d5a:	add	r2, sp, #4
    7d5c:	mov	r1, r4
    7d5e:	mov	r0, r5
    7d60:	bl	7ba2 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7d64:	cmp	r0, #0
    7d66:	blt.n	7d84 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    7d68:	beq.n	7d48 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    7d6a:	ldr	r3, [sp, #4]
    7d6c:	cmp	r3, #0
    7d6e:	bne.n	7d48 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    7d70:	cbz	r7, 7d74 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    7d72:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    7d74:	mvn.w	r2, #4026531840	; 0xf0000000
    7d78:	mov	r1, r4
    7d7a:	mov	r0, r5
    7d7c:	bl	7c60 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    7d80:	mov	r7, r0
    7d82:	cbnz	r0, 7d8e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    7d84:	movs	r7, #0
}
    7d86:	mov	r0, r7
    7d88:	add	sp, #8
    7d8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    7d8e:	cbnz	r6, 7d9c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    7d90:	ldr	r3, [r5, #36]	; 0x24
    7d92:	cmp	r3, #0
    7d94:	bge.n	7dac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    7d96:	str.w	r4, [r8]
  return true;
    7d9a:	b.n	7d86 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    7d9c:	mov	r2, r4
    7d9e:	mov	r1, r6
    7da0:	mov	r0, r5
    7da2:	bl	7c60 <FatPartition::fatPut(unsigned long, unsigned long)>
    7da6:	cmp	r0, #0
    7da8:	bne.n	7d90 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    7daa:	b.n	7d84 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    7dac:	subs	r3, #1
    7dae:	str	r3, [r5, #36]	; 0x24
    7db0:	b.n	7d96 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

00007db2 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    7db2:	push	{r0, r1, r4, r5, r6, lr}
    7db4:	mov	r5, r0
    7db6:	mov	r4, r1
    fg = fatGet(cluster, &next);
    7db8:	add	r2, sp, #4
    7dba:	mov	r1, r4
    7dbc:	mov	r0, r5
    7dbe:	bl	7ba2 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7dc2:	subs	r6, r0, #0
    7dc4:	blt.n	7df2 <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    7dc6:	movs	r2, #0
    7dc8:	mov	r1, r4
    7dca:	mov	r0, r5
    7dcc:	bl	7c60 <FatPartition::fatPut(unsigned long, unsigned long)>
    7dd0:	cbz	r0, 7df2 <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    7dd2:	ldr	r3, [r5, #36]	; 0x24
    7dd4:	cmp	r3, #0
      m_freeClusterCount += change;
    7dd6:	itt	ge
    7dd8:	addge	r3, #1
    7dda:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    7ddc:	ldr	r3, [r5, #12]
    7dde:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    7de0:	itt	hi
    7de2:	addhi.w	r4, r4, #4294967295
    7de6:	strhi	r4, [r5, #12]
    cluster = next;
    7de8:	ldr	r4, [sp, #4]
  } while (fg);
    7dea:	cmp	r6, #0
    7dec:	bne.n	7db8 <FatPartition::freeChain(unsigned long)+0x6>
}
    7dee:	add	sp, #8
    7df0:	pop	{r4, r5, r6, pc}
  return false;
    7df2:	movs	r0, #0
    7df4:	b.n	7dee <FatPartition::freeChain(unsigned long)+0x3c>
	...

00007df8 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    7df8:	push	{r4, r5, r6, r7, lr}
    7dfa:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    7dfc:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    7dfe:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    7e00:	cmp	r0, #0
    7e02:	bge.n	7e76 <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    7e04:	ldrb	r3, [r4, #7]
    7e06:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    7e08:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    7e0a:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    7e0c:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    7e10:	beq.n	7e7a <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    7e12:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    7e16:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    7e18:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    7e1a:	strd	r6, r5, [sp, #16]
    7e1e:	bmi.n	7e7e <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    7e20:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    7e22:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7e24:	ldr	r0, [r4, #0]
    7e26:	add	r6, sp, #16
    7e28:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    7e2c:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    7e2e:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7e32:	ldr	r1, [r4, #24]
    7e34:	ldr	r5, [r0, #0]
    7e36:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    7e3a:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    7e3e:	bne.n	7e90 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7e40:	str	r6, [sp, #4]
    7e42:	ldr	r6, [pc, #84]	; (7e98 <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7e44:	str	r6, [sp, #0]
    7e46:	ldr	r5, [r5, #24]
    7e48:	blx	r5
    7e4a:	cbz	r0, 7e60 <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    7e4c:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    7e4e:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    7e50:	b.n	7e76 <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    7e52:	add	r2, sp, #16
    7e54:	mov	r1, r7
    7e56:	mov	r0, r4
    7e58:	bl	7ba2 <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    7e5c:	cmp	r0, #0
    7e5e:	bge.n	7e66 <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    7e60:	mov.w	r0, #4294967295
    7e64:	b.n	7e76 <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    7e66:	beq.n	7e6e <FatPartition::freeClusterCount()+0x76>
    7e68:	ldr	r3, [sp, #16]
    7e6a:	cbnz	r3, 7e6e <FatPartition::freeClusterCount()+0x76>
        free++;
    7e6c:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    7e6e:	adds	r7, #1
    7e70:	cmp	r7, r6
    7e72:	bcc.n	7e52 <FatPartition::freeClusterCount()+0x5a>
    return free;
    7e74:	mov	r0, r5
}
    7e76:	add	sp, #28
    7e78:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    7e7a:	movs	r7, #2
    7e7c:	b.n	7e70 <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    7e7e:	add.w	r0, r4, #568	; 0x238
    7e82:	str	r3, [sp, #12]
    7e84:	bl	5618 <FsCache::sync()>
    7e88:	ldr	r3, [sp, #12]
    7e8a:	cmp	r0, #0
    7e8c:	bne.n	7e20 <FatPartition::freeClusterCount()+0x28>
    7e8e:	b.n	7e60 <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7e90:	str	r6, [sp, #4]
    7e92:	ldr	r6, [pc, #8]	; (7e9c <FatPartition::freeClusterCount()+0xa4>)
    7e94:	b.n	7e44 <FatPartition::freeClusterCount()+0x4c>
    7e96:	nop
    7e98:	.word	0x00007b67
    7e9c:	.word	0x00007b39

00007ea0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7ea0:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    7ea2:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7ea4:	mov	r4, r0
  m_blockDev = dev;
    7ea6:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    7ea8:	mov	r5, r2
  m_fatType = 0;
    7eaa:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    7eac:	movs	r0, #1
  m_cache.init(dev);
    7eae:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    7eb2:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    7eb4:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    7eb6:	mov.w	r0, #4294967295
    m_status = 0;
    7eba:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7ebe:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    7ec0:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    7ec4:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    7ec8:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    7ecc:	cbz	r2, 7f02 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    7ece:	cmp	r2, #4
    7ed0:	bls.n	7ed6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    7ed2:	movs	r0, #0
}
    7ed4:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    7ed6:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    7eda:	mov	r2, r3
    7edc:	mov	r1, r3
    7ede:	mov	r0, r6
    7ee0:	subs	r5, #1
    7ee2:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
    7ee6:	add.w	r3, r0, #446	; 0x1be
    7eea:	lsls	r2, r5, #4
    7eec:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    7ef0:	cmp	r0, #0
    7ef2:	beq.n	7ed2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7ef4:	ldrb	r1, [r5, #4]
    7ef6:	cmp	r1, #0
    7ef8:	beq.n	7ed2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7efa:	ldrb	r3, [r3, r2]
    7efc:	lsls	r3, r3, #25
    7efe:	bne.n	7ed2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    7f00:	ldr	r5, [r5, #8]
    7f02:	movs	r2, #0
    7f04:	mov	r1, r5
    7f06:	mov	r0, r6
    7f08:	bl	5666 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    7f0c:	cmp	r0, #0
    7f0e:	beq.n	7ed2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7f10:	ldrh.w	r3, [r0, #11]
    7f14:	cmp.w	r3, #512	; 0x200
    7f18:	bne.n	7ed2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    7f1a:	ldrb	r3, [r0, #16]
    7f1c:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    7f1e:	subs	r3, #1
    7f20:	cmp	r3, #1
    7f22:	bhi.n	7ed2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7f24:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7f26:	movs	r6, #9
    7f28:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7f2a:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7f2c:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7f2e:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7f30:	movs	r3, #1
    7f32:	cmp	r1, r3
    7f34:	bne.n	7f9e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    7f36:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7f38:	ldrh	r3, [r0, #22]
    7f3a:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    7f3c:	cbnz	r3, 7f42 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    7f3e:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    7f40:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7f42:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    7f44:	ldrh.w	r1, [r0, #17]
    7f48:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7f4a:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    7f4c:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7f4e:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7f50:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7f52:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7f54:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7f58:	mla	r3, r6, r7, r3
    7f5c:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    7f5e:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    7f62:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    7f66:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    7f68:	cbnz	r1, 7f6c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    7f6a:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    7f6c:	subs	r5, r5, r3
    7f6e:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    7f70:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    7f72:	adds	r3, r5, #1
    7f74:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    7f76:	mov.w	r3, #4294967295
    7f7a:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    7f7c:	movw	r3, #4084	; 0xff4
    7f80:	cmp	r5, r3
    7f82:	bls.n	7fb0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    7f84:	movw	r3, #65524	; 0xfff4
    7f88:	cmp	r5, r3
    7f8a:	bls.n	7fb4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    7f8c:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    7f8e:	str	r3, [r4, #32]
    7f90:	movs	r3, #32
  return true;
    7f92:	movs	r0, #1
    m_fatType = 12;
    7f94:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    7f96:	str	r6, [r4, #48]	; 0x30
    7f98:	str.w	r6, [r4, #576]	; 0x240
  return true;
    7f9c:	b.n	7ed4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    7f9e:	subs	r6, #1
    7fa0:	bne.n	7fa6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    7fa2:	strb	r2, [r4, #6]
    7fa4:	b.n	7ed2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    7fa6:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7fa8:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    7faa:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7fac:	uxtb	r3, r3
    7fae:	b.n	7f32 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    7fb0:	movs	r3, #12
    7fb2:	b.n	7f92 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    7fb4:	movs	r3, #16
    7fb6:	b.n	7f92 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

00007fb8 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    7fb8:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    7fba:	add.w	r4, r0, #1096	; 0x448
    7fbe:	sub	sp, #40	; 0x28
  FatFile() {}
    7fc0:	movs	r3, #0
    7fc2:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    7fc4:	add	r0, sp, #4
    7fc6:	mov	r1, r4
    7fc8:	str	r3, [sp, #4]
    7fca:	bl	7544 <FatFile::open(FatFile*, char const*, int)>
    7fce:	mov	r6, r0
    7fd0:	cbz	r0, 7fee <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    7fd2:	ldrb.w	r3, [sp, #4]
    7fd6:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    7fda:	itett	ne
    7fdc:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    7fde:	moveq	r6, r3
  m_vwd = dir;
    7fe0:	ldmiane	r5!, {r0, r1, r2, r3}
    7fe2:	stmiane	r4!, {r0, r1, r2, r3}
    7fe4:	itttt	ne
    7fe6:	ldmiane	r5!, {r0, r1, r2, r3}
    7fe8:	stmiane	r4!, {r0, r1, r2, r3}
    7fea:	ldrne	r3, [r5, #0]
    7fec:	strne	r3, [r4, #0]
}
    7fee:	mov	r0, r6
    7ff0:	add	sp, #40	; 0x28
    7ff2:	pop	{r4, r5, r6, pc}

00007ff4 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    7ff4:	subs	r1, r0, #1
    7ff6:	add.w	r3, r0, #10
    uint8_t sum = 0;
    7ffa:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7ffc:	lsls	r2, r0, #7
    7ffe:	orr.w	r2, r2, r0, lsr #1
    8002:	ldrb.w	r0, [r1, #1]!
    8006:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    800a:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    800c:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    800e:	bne.n	7ffc <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    8010:	bx	lr

00008012 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8012:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    8016:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8018:	sub	sp, #52	; 0x34
    801a:	mov	r6, r2
    801c:	mov	r7, r0
    801e:	mov	r9, r1
    8020:	mov	r8, r3
  FatFile dir = *this;
    8022:	add	r4, sp, #12
    8024:	ldmia	r5!, {r0, r1, r2, r3}
    8026:	stmia	r4!, {r0, r1, r2, r3}
    8028:	ldmia	r5!, {r0, r1, r2, r3}
    802a:	stmia	r4!, {r0, r1, r2, r3}
    802c:	ldr	r3, [r5, #0]
    802e:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8030:	movs	r4, #1
    next = begin;
    8032:	ldr	r3, [r6, #0]
    8034:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    8036:	movs	r3, #0
    8038:	strh	r3, [r6, #12]
    803a:	cmp	r4, r8
    803c:	bls.n	8042 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    803e:	movs	r0, #1
    8040:	b.n	8054 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8042:	sub.w	r1, r9, r4
    8046:	add	r0, sp, #12
    8048:	uxth	r1, r1
    804a:	bl	6d78 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    804e:	mov	sl, r0
    8050:	cbnz	r0, 805a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    8052:	movs	r0, #0
}
    8054:	add	sp, #52	; 0x34
    8056:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    805a:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    805c:	uxtb	r2, r5
    805e:	mov	r1, sl
    8060:	mov	r0, r7
    8062:	bl	6d92 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    8066:	ldrh	r3, [r6, #12]
    8068:	mov	fp, r0
    806a:	cbnz	r3, 807c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    806c:	ldrd	r2, r3, [r6, #4]
    8070:	cmp	r2, r3
    8072:	bne.n	807c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    8074:	clz	r0, r0
    8078:	lsrs	r0, r0, #5
    807a:	b.n	8054 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    807c:	mov	r0, r6
    807e:	bl	575c <FsName::get16()>
    8082:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    8084:	mov	r0, fp
    8086:	bl	56b4 <toUpcase(unsigned short)>
    808a:	ldr	r3, [sp, #4]
    808c:	mov	fp, r0
    808e:	mov	r0, r3
    8090:	bl	56b4 <toUpcase(unsigned short)>
    8094:	cmp	fp, r0
    8096:	bne.n	8052 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    8098:	adds	r5, #1
    809a:	cmp	r5, #13
    809c:	bne.n	805c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    809e:	adds	r4, #1
    80a0:	uxtb	r4, r4
    80a2:	b.n	803a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

000080a4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    80a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    80a8:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    80aa:	sub	sp, #52	; 0x34
    80ac:	mov	r4, r2
    80ae:	mov	r9, r1
    80b0:	mov	r7, r3
  FatFile dir = *this;
    80b2:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    80b4:	mov.w	sl, #15
  FatFile dir = *this;
    80b8:	ldmia	r5!, {r0, r1, r2, r3}
    80ba:	stmia	r6!, {r0, r1, r2, r3}
    80bc:	ldmia	r5!, {r0, r1, r2, r3}
    80be:	stmia	r6!, {r0, r1, r2, r3}
    80c0:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    80c2:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    80c6:	movs	r5, #1
  FatFile dir = *this;
    80c8:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    80ca:	bl	7ff4 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    80ce:	movs	r6, #0
    next = begin;
    80d0:	ldr	r3, [r4, #0]
    80d2:	mov	r8, r0
    80d4:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    80d6:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    80d8:	cmp	r5, r7
    80da:	bls.n	80e4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    80dc:	movs	r0, #1

 fail:
  return false;
}
    80de:	add	sp, #52	; 0x34
    80e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    80e4:	sub.w	r1, r9, r5
    80e8:	add	r0, sp, #12
    80ea:	uxth	r1, r1
    80ec:	bl	6d78 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    80f0:	cmp	r0, #0
    80f2:	beq.n	80de <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    80f4:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    80f6:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    80f8:	mov.w	r1, #0
    80fc:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    8100:	ldrb.w	r3, [r2, #40]	; 0x28
    8104:	orr.w	r3, r3, #1
    8108:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    810c:	ite	eq
    810e:	orreq.w	r3, r5, #64	; 0x40
    8112:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8114:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    8118:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    811a:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    811c:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8120:	strh	r1, [r0, #26]
    return !ls && next == end;
    8122:	ldrh	r0, [r4, #12]
    8124:	cbnz	r0, 8152 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    8126:	ldrd	r2, r3, [r4, #4]
    812a:	cmp	r2, r3
    812c:	bne.n	8152 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    812e:	cbz	r6, 815e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    8130:	adds	r6, #1
    8132:	movw	r0, #65535	; 0xffff
    8136:	uxtb	r6, r6
  if (i < 5) {
    8138:	cmp	r1, #4
    813a:	uxtb	r3, r1
    813c:	bhi.n	8162 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    813e:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    8142:	adds	r1, #1
    8144:	add.w	fp, fp, #2
    8148:	cmp	r1, #13
    814a:	bne.n	8122 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    814c:	adds	r5, #1
    814e:	uxtb	r5, r5
    8150:	b.n	80d8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    8152:	mov	r0, r4
    8154:	str	r1, [sp, #4]
    8156:	bl	575c <FsName::get16()>
    815a:	ldr	r1, [sp, #4]
    815c:	b.n	8138 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    815e:	movs	r6, #1
    8160:	b.n	8138 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    8162:	cmp	r3, #10
    8164:	ite	ls
    8166:	strhls.w	r0, [fp, #3]
    816a:	strhhi.w	r0, [fp, #5]
}
    816e:	b.n	8142 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

00008170 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    8170:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    8172:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    8176:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    817a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    817e:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    8180:	mov	r5, r0
    fname->sfn[k] = ' ';
    8182:	str.w	r1, [r0, #22]
    8186:	str	r1, [r2, #4]
    8188:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    818c:	ldrb	r0, [r3, #0]
    818e:	subs	r0, #46	; 0x2e
    8190:	it	ne
    8192:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    8194:	mov	r7, r3
    8196:	ldrb.w	r2, [r3], #1
    819a:	cmp	r2, #46	; 0x2e
    819c:	beq.n	8194 <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    819e:	subs	r3, r6, #1
    81a0:	cmp	r3, r7
    81a2:	mov	lr, r3
    81a4:	bls.n	81ae <FatFile::makeSFN(FatLfn_t*)+0x3e>
    81a6:	ldrb.w	r2, [r3], #-1
    81aa:	cmp	r2, #46	; 0x2e
    81ac:	bne.n	81a0 <FatFile::makeSFN(FatLfn_t*)+0x30>
    81ae:	movs	r2, #0
    81b0:	mov.w	ip, #7
    81b4:	mov.w	r9, #8
    81b8:	mov	r1, r2
    81ba:	mov	r8, r2
    81bc:	b.n	81d4 <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    81be:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    81c0:	cmp	r3, #46	; 0x2e
    81c2:	bne.n	81f0 <FatFile::makeSFN(FatLfn_t*)+0x80>
    81c4:	cmp	lr, r7
    81c6:	bne.n	820c <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    81c8:	mov.w	ip, #10
      i = 8;    // Place for extension.
    81cc:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    81ce:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    81d2:	adds	r7, #1
    81d4:	cmp	r7, r6
    81d6:	bcc.n	81be <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    81d8:	ldrb	r3, [r5, #22]
    81da:	cmp	r3, #32
    81dc:	beq.n	8290 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    81de:	cmp	r0, #0
    81e0:	beq.n	827c <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    81e2:	tst.w	r8, r2
    81e6:	it	ne
    81e8:	movne	r2, #2
    81ea:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    81ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    81f0:	cmp	r3, #34	; 0x22
    81f2:	beq.n	820c <FatFile::makeSFN(FatLfn_t*)+0x9c>
    81f4:	cmp	r3, #124	; 0x7c
    81f6:	beq.n	820c <FatFile::makeSFN(FatLfn_t*)+0x9c>
    81f8:	sub.w	r4, r3, #91	; 0x5b
    81fc:	cmp	r4, #2
    81fe:	bls.n	820c <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    8200:	sub.w	r4, r3, #42	; 0x2a
    8204:	cmp	r4, #5
    8206:	bhi.n	8216 <FatFile::makeSFN(FatLfn_t*)+0xa6>
    8208:	cmp	r3, #45	; 0x2d
    820a:	beq.n	8232 <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    820c:	cmp	r1, ip
    820e:	bhi.n	8236 <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    8210:	movs	r0, #0
        c = '_';
    8212:	movs	r3, #95	; 0x5f
    8214:	b.n	8258 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    8216:	sub.w	r4, r3, #58	; 0x3a
    821a:	cmp	r4, #5
    821c:	bls.n	8226 <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    821e:	sub.w	r4, r3, #33	; 0x21
    8222:	cmp	r4, #93	; 0x5d
    8224:	bls.n	8232 <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    8226:	and.w	r3, r3, #192	; 0xc0
    822a:	cmp	r3, #128	; 0x80
    822c:	bne.n	820c <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    822e:	movs	r0, #0
    8230:	b.n	81d2 <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    8232:	cmp	r1, ip
    8234:	bls.n	8246 <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    8236:	cmp.w	ip, #10
    823a:	beq.n	8278 <FatFile::makeSFN(FatLfn_t*)+0x108>
    823c:	cmp	lr, r7
    823e:	bcc.n	8278 <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    8240:	add.w	r7, lr, #4294967295
        continue;
    8244:	b.n	822e <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    8246:	sub.w	r4, r3, #97	; 0x61
    824a:	cmp	r4, #25
    824c:	bhi.n	826a <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    824e:	subs	r3, #32
        lc |= bit;
    8250:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    8254:	uxtb	r3, r3
        lc |= bit;
    8256:	uxtb	r2, r2
      fname->sfn[i++] = c;
    8258:	adds	r4, r1, #1
    825a:	add	r1, r5
    825c:	uxtb	r4, r4
    825e:	strb	r3, [r1, #22]
      if (i < 7) {
    8260:	cmp	r4, #6
    8262:	bhi.n	8266 <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    8264:	strb	r4, [r5, #20]
    8266:	mov	r1, r4
    8268:	b.n	81d2 <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    826a:	sub.w	r4, r3, #65	; 0x41
    826e:	cmp	r4, #25
        uc |= bit;
    8270:	it	ls
    8272:	orrls.w	r8, r9, r8
    8276:	b.n	8258 <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    8278:	movs	r0, #0
    827a:	b.n	81d8 <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    827c:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    827e:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    8280:	movs	r1, #126	; 0x7e
    8282:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8284:	strb	r2, [r5, #21]
  return true;
    8286:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    8288:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    828a:	movs	r1, #49	; 0x31
    828c:	strb	r1, [r3, #23]
    828e:	b.n	81ec <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    8290:	movs	r0, #0
    8292:	b.n	81ec <FatFile::makeSFN(FatLfn_t*)+0x7c>

00008294 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8294:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8298:	mov	r7, r0
    829a:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    829c:	ldrb	r6, [r1, #20]
    829e:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    82a0:	mov.w	sl, #0
    82a4:	ldr.w	r8, [pc, #128]	; 8328 <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    82a8:	add.w	r9, r1, #22
    82ac:	ldr.w	r3, [r8]
    82b0:	cmp	r6, #3
    hex += millis();
    82b2:	add	r3, sl
    82b4:	it	cs
    82b6:	movcs	r6, #3
    82b8:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    82bc:	adds	r3, r6, #4
    82be:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    82c0:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    82c4:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    82c6:	subs	r3, #1
      hex >>= 4;
    82c8:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    82cc:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    82ce:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    82d0:	ite	ls
    82d2:	addls	r2, #48	; 0x30
    82d4:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    82d6:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    82d8:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    82da:	bne.n	82c0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    82dc:	adds	r3, r5, r6
    82de:	movs	r2, #126	; 0x7e
    seekSet(0);
    82e0:	movs	r1, #0
    82e2:	mov	r0, r7
    82e4:	strb	r2, [r3, #22]
    82e6:	bl	726a <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    82ea:	movs	r1, #1
    82ec:	mov	r0, r7
    82ee:	bl	722c <FatFile::readDirCache(bool)>
      if (!dir) {
    82f2:	mov	r1, r0
    82f4:	cbnz	r0, 8302 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    82f6:	ldrb	r0, [r7, #1]
    82f8:	clz	r0, r0
    82fc:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    82fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    8302:	ldrb	r3, [r0, #0]
    8304:	cbz	r3, 8324 <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8306:	ldrb	r3, [r0, #11]
    8308:	lsls	r3, r3, #28
    830a:	bmi.n	82ea <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    830c:	movs	r2, #11
    830e:	mov	r0, r9
    8310:	bl	eadc <memcmp>
    8314:	cmp	r0, #0
    8316:	bne.n	82ea <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8318:	subs	r0, r4, #1
    831a:	ands.w	r4, r0, #255	; 0xff
    831e:	bne.n	82ac <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    8320:	mov	r0, r4
 fail:
    8322:	b.n	82fe <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    8324:	movs	r0, #1
    8326:	b.n	82fe <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    8328:	.word	0x20015374

0000832c <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    832c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8330:	vpush	{d8}
    8334:	sub	sp, #44	; 0x2c
    8336:	mov	r5, r1
    8338:	mov	r7, r2
    833a:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    833c:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    833e:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    8340:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    8342:	ldrb	r3, [r1, #0]
    8344:	tst.w	r3, #112	; 0x70
    8348:	bne.n	8356 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    834a:	movs	r0, #0
}
    834c:	add	sp, #44	; 0x2c
    834e:	vpop	{d8}
    8352:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    8356:	ldr	r3, [sp, #28]
    8358:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    835a:	cmp	r3, #0
    835c:	bne.n	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    835e:	ldr	r3, [r2, #16]
    8360:	movs	r2, #13
    seekSet(0);
    8362:	movs	r1, #0
    8364:	mov	r0, r5
    8366:	adds	r3, #12
  uint8_t checksum = 0;
    8368:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    836c:	udiv	r3, r3, r2
    8370:	uxtb	r3, r3
  uint8_t order = 0;
    8372:	mov	r8, sl
  uint8_t freeFound = 0;
    8374:	mov	r4, sl
  bool fnameFound = false;
    8376:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    8378:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    837a:	ldrb	r3, [r7, #21]
    837c:	lsls	r2, r3, #30
    837e:	itett	ne
    8380:	ldrne	r3, [sp, #24]
    8382:	moveq	r3, #1
    8384:	addne.w	r9, r3, #1
    8388:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    838c:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    838e:	str	r3, [sp, #8]
    8390:	bl	726a <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8394:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    8398:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    839c:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    83a0:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    83a2:	movs	r1, #0
    83a4:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    83a6:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    83aa:	bl	722c <FatFile::readDirCache(bool)>
    if (!dir) {
    83ae:	cmp	r0, #0
    83b0:	bne.n	8476 <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    83b2:	ldrb	r3, [r5, #1]
    83b4:	cmp	r3, #0
    83b6:	bne.n	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    83b8:	ldr	r3, [sp, #16]
    83ba:	lsls	r2, r3, #22
    83bc:	bpl.n	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    83be:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    83c2:	subs	r3, #1
    83c4:	cmp	r3, #1
    83c6:	bhi.n	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    83c8:	ldr	r3, [sp, #12]
    83ca:	cmp	r4, #0
    83cc:	it	eq
    83ce:	moveq	r3, r6
    83d0:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    83d2:	ldr	r3, [sp, #8]
    83d4:	cmp	r4, r3
    83d6:	bcc.w	855a <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    83da:	cmp.w	fp, #0
    83de:	bne.w	8590 <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    83e2:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    83e4:	mov	r2, r7
    83e6:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    83e8:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    83ea:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    83ec:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    83f0:	uxtab	r6, r3, r6
    83f4:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    83f6:	mov	r3, fp
    83f8:	mov	r1, r6
    83fa:	bl	80a4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    83fe:	cmp	r0, #0
    8400:	beq.n	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    8402:	mov	r1, r6
    8404:	mov	r0, r5
    8406:	bl	6d78 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    840a:	mov	r4, r0
    840c:	cmp	r0, #0
    840e:	beq.n	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    8410:	movs	r2, #32
    8412:	movs	r1, #0
    8414:	bl	a1d4 <memset>
  memcpy(dir->name, fname->sfn, 11);
    8418:	ldr.w	r3, [r7, #22]
    841c:	str	r3, [r4, #0]
    841e:	ldr.w	r3, [r7, #26]
    8422:	str	r3, [r4, #4]
    8424:	ldrh	r3, [r7, #30]
    8426:	strh	r3, [r4, #8]
    8428:	ldrb.w	r3, [r7, #32]
    842c:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    842e:	ldrb	r3, [r7, #21]
    8430:	and.w	r3, r3, #24
    8434:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    8436:	ldr	r3, [pc, #372]	; (85ac <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    8438:	ldr	r3, [r3, #0]
    843a:	cmp	r3, #0
    843c:	beq.w	85a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    8440:	add.w	r2, sp, #35	; 0x23
    8444:	add.w	r1, sp, #38	; 0x26
    8448:	add	r0, sp, #36	; 0x24
    844a:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    844c:	ldrh.w	r3, [sp, #36]	; 0x24
    8450:	strh	r3, [r4, #16]
    8452:	ldrh.w	r3, [sp, #38]	; 0x26
    8456:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    8458:	ldrb.w	r3, [sp, #35]	; 0x23
    845c:	strb	r3, [r4, #13]
    845e:	ldr	r3, [sp, #20]
    8460:	ldr	r2, [sp, #20]
    8462:	ldrb.w	r3, [r3, #40]	; 0x28
    8466:	orr.w	r3, r3, #1
    846a:	strb.w	r3, [r2, #40]	; 0x28
  }
    846e:	b.n	8548 <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    8470:	mov.w	fp, #1
    8474:	b.n	83a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    8476:	ldrb	r2, [r0, #0]
    8478:	cmp	r2, #229	; 0xe5
    847a:	beq.n	847e <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    847c:	cbnz	r2, 84a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    847e:	ldr	r3, [sp, #12]
    8480:	cmp	r4, #0
    8482:	it	eq
    8484:	moveq	r3, r6
    8486:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    8488:	ldr	r3, [sp, #8]
    848a:	cmp	r4, r3
        freeFound++;
    848c:	itt	cc
    848e:	addcc	r4, #1
    8490:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    8492:	cmp	r2, #0
    8494:	beq.n	83b8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8496:	cmp	r2, #229	; 0xe5
    8498:	bne.n	84a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    849a:	mov.w	r9, #0
    849e:	b.n	83a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    84a0:	ldr	r3, [sp, #8]
    84a2:	cmp	r4, r3
    84a4:	it	cc
    84a6:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    84a8:	cmp	r2, #46	; 0x2e
    84aa:	beq.n	849a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    84ac:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    84ae:	cmp	r1, #15
    84b0:	bne.n	8506 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    84b2:	cmp.w	r9, #0
    84b6:	bne.n	84f2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    84b8:	and.w	r8, r2, #31
        if (order != nameOrd ||
    84bc:	ldr	r3, [sp, #24]
    84be:	cmp	r3, r8
    84c0:	bne.w	83a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    84c4:	ands.w	r9, r2, #64	; 0x40
    84c8:	beq.w	83a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    84cc:	ldrb.w	sl, [r0, #13]
    84d0:	mov	r9, r3
      if (order == 1) {
    84d2:	cmp.w	r8, #1
    84d6:	bne.w	83a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    84da:	adds	r1, r6, #1
    84dc:	mov	r3, r9
    84de:	mov	r2, r7
    84e0:	mov	r0, r5
    84e2:	uxth	r1, r1
    84e4:	bl	8012 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    84e8:	cmp	r0, #0
    84ea:	it	eq
    84ec:	moveq.w	r9, #0
    84f0:	b.n	83a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    84f2:	add.w	r8, r8, #4294967295
    84f6:	uxtb.w	r8, r8
    84fa:	cmp	r2, r8
    84fc:	bne.n	849a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    84fe:	ldrb	r2, [r0, #13]
    8500:	cmp	r2, sl
    8502:	beq.n	84d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    8504:	b.n	849a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    8506:	lsls	r3, r1, #28
    8508:	bmi.n	849a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    850a:	cmp.w	r9, #0
    850e:	beq.n	8526 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    8510:	cmp.w	r8, #1
    8514:	bne.w	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8518:	bl	7ff4 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    851c:	cmp	r0, sl
    851e:	bne.w	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8522:	mov	fp, r9
    8524:	b.n	8540 <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8526:	movs	r2, #11
    8528:	vmov	r1, s16
    852c:	bl	eadc <memcmp>
    8530:	cmp	r0, #0
    8532:	bne.w	83a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8536:	ldrb.w	fp, [r7, #21]
    853a:	ands.w	fp, fp, #1
    853e:	bne.n	8470 <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    8540:	ldr	r3, [sp, #16]
    8542:	lsls	r1, r3, #20
    8544:	bmi.w	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    8548:	ldr	r3, [sp, #16]
    854a:	mov	r2, r6
    854c:	mov	r1, r5
    854e:	ldr	r0, [sp, #28]
    8550:	str.w	fp, [sp]
    8554:	bl	7356 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8558:	b.n	834c <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    855a:	movs	r1, #0
    855c:	mov	r0, r5
    855e:	bl	722c <FatFile::readDirCache(bool)>
    if (!dir) {
    8562:	cbnz	r0, 858a <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    8564:	ldrb	r3, [r5, #1]
    8566:	cmp	r3, #0
    8568:	bne.w	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    856c:	mov	r0, r5
    856e:	bl	6fb8 <FatFile::addDirCluster()>
    8572:	cmp	r0, #0
    8574:	beq.w	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8578:	ldr	r3, [sp, #20]
    857a:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    857c:	add.w	r3, r4, r3, lsl #4
    8580:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    8582:	ldr	r3, [sp, #8]
    8584:	cmp	r3, r4
    8586:	bhi.n	856c <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    8588:	b.n	83da <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    858a:	adds	r4, #1
    858c:	uxtb	r4, r4
    858e:	b.n	83d2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    8590:	mov	r1, r7
    8592:	mov	r0, r5
    8594:	bl	8294 <FatFile::makeUniqueSfn(FatLfn_t*)>
    8598:	cmp	r0, #0
    859a:	bne.w	83e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    859e:	b.n	834a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    85a0:	movw	r3, #22561	; 0x5821
    85a4:	strh	r3, [r4, #16]
    85a6:	strh	r3, [r4, #24]
    85a8:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    85aa:	b.n	845e <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    85ac:	.word	0x200147fc

000085b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    85b0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    85b2:	mov	r4, r2
    85b4:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    85b6:	mov	r0, r1
    85b8:	ldrb.w	r3, [r1], #1
    85bc:	cmp	r3, #32
    85be:	beq.n	85b6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    85c0:	movs	r5, #0
    85c2:	ldr	r7, [pc, #148]	; (8658 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    85c4:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    85c6:	ldrb	r3, [r0, #0]
    85c8:	cbnz	r3, 8618 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    85ca:	ldr	r3, [r4, #16]
    85cc:	subs	r3, #1
    85ce:	cmp	r3, #254	; 0xfe
    85d0:	bhi.n	85fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    85d2:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    85d4:	ldrb.w	r3, [r0], #1
    85d8:	cmp	r3, #32
    85da:	beq.n	85d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    85dc:	cmp	r3, #47	; 0x2f
    85de:	beq.n	85d2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    85e0:	mov	r0, r4
  *ptr = path;
    85e2:	str	r2, [r6, #0]

 fail:
  return false;
}
    85e4:	add	sp, #12
    85e6:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    85ea:	b.w	8170 <FatFile::makeSFN(FatLfn_t*)>
    85ee:	subs	r1, #34	; 0x22
    85f0:	uxtb	r1, r1
    85f2:	lsr.w	r1, r7, r1
    85f6:	lsls	r2, r1, #31
    85f8:	bpl.n	8652 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    85fa:	movs	r0, #0
    85fc:	add	sp, #12
    85fe:	pop	{r4, r5, r6, r7, pc}
    8600:	cmp	r1, #92	; 0x5c
    8602:	beq.n	85fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8604:	bhi.n	8612 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    8606:	subs	r1, #62	; 0x3e
    8608:	cmp	r1, #1
    860a:	bls.n	85fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    860c:	str	r5, [r4, #16]
      fname->end = path;
    860e:	str	r0, [r4, #8]
    8610:	b.n	85c6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8612:	cmp	r1, #124	; 0x7c
    8614:	beq.n	85fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8616:	b.n	860c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    8618:	cmp	r3, #47	; 0x2f
    861a:	beq.n	85ca <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    861c:	add	r2, sp, #4
    861e:	adds	r1, r0, #4
    8620:	bl	5590 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8624:	cmp	r0, #0
    8626:	beq.n	85fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    8628:	ldr	r3, [sp, #4]
    862a:	cmp.w	r3, #65536	; 0x10000
    862e:	ite	cc
    8630:	movcc	r2, #1
    8632:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8634:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    8636:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8638:	bhi.n	860c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    863a:	cmp	r3, #60	; 0x3c
    863c:	uxtb	r1, r3
    863e:	bhi.n	8600 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    8640:	cmp	r1, #33	; 0x21
    8642:	bhi.n	85ee <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    8644:	cmp	r1, #31
    8646:	bls.n	85fa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    8648:	cmp	r3, #46	; 0x2e
    864a:	beq.n	85c6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    864c:	cmp	r3, #32
    864e:	beq.n	85c6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8650:	b.n	860c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    8652:	cmp	r3, #46	; 0x2e
    8654:	b.n	864e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    8656:	nop
    8658:	.word	0x05002101

0000865c <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    865c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    8660:	movs	r3, #0
    8662:	sub	sp, #40	; 0x28
    8664:	mov	r4, r0
    8666:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8668:	ldrb	r3, [r0, #2]
    866a:	lsls	r2, r3, #30
    866c:	bmi.n	8676 <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    866e:	movs	r0, #0
}
    8670:	add	sp, #40	; 0x28
    8672:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8676:	ldr	r1, [r0, #32]
    8678:	cmp	r1, #0
    867a:	bne.n	8708 <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    867c:	movs	r1, #1
    867e:	mov	r0, r4
    8680:	bl	7028 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8684:	mov	r5, r0
    8686:	cmp	r0, #0
    8688:	beq.n	866e <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    868a:	bl	7ff4 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    868e:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    8690:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    8692:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    8694:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    8696:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    8698:	ldr	r0, [r4, #8]
  m_flags = 0;
    869a:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    869c:	bl	6f5c <FatPartition::cacheSync()>
    86a0:	cmp	r0, #0
    86a2:	beq.n	866e <FatFile::remove()+0x12>
  if (!isLFN()) {
    86a4:	ldrb	r3, [r4, #3]
    86a6:	cmp	r3, #0
    86a8:	beq.n	8670 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    86aa:	mov	r1, r4
    86ac:	add	r0, sp, #4
    86ae:	bl	7052 <FatFile::openCluster(FatFile*)>
    86b2:	cmp	r0, #0
    86b4:	beq.n	866e <FatFile::remove()+0x12>
    86b6:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    86b8:	uxtb.w	r8, r5
    86bc:	ldrb	r3, [r4, #3]
    86be:	cmp	r3, r8
    86c0:	bcc.n	866e <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    86c2:	ldrh	r1, [r4, #4]
    86c4:	add	r0, sp, #4
    86c6:	subs	r1, r1, r5
    86c8:	uxth	r1, r1
    86ca:	bl	6d78 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    86ce:	cmp	r0, #0
    86d0:	beq.n	866e <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    86d2:	ldrb	r3, [r0, #11]
    86d4:	cmp	r3, #15
    86d6:	bne.n	866e <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    86d8:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    86da:	and.w	r3, r2, #31
    86de:	cmp	r3, r8
    86e0:	bne.n	866e <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    86e2:	ldrb	r3, [r0, #13]
    86e4:	cmp	r3, r6
    86e6:	bne.n	866e <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    86e8:	strb	r7, [r0, #0]
    if (last) {
    86ea:	adds	r5, #1
    m_vol->cacheDirty();
    86ec:	ldr	r1, [r4, #8]
    if (last) {
    86ee:	uxth	r5, r5
    86f0:	ldrb.w	r3, [r1, #40]	; 0x28
    86f4:	orr.w	r3, r3, #1
    86f8:	strb.w	r3, [r1, #40]	; 0x28
    86fc:	lsls	r3, r2, #25
    86fe:	bpl.n	86b8 <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    8700:	ldr	r0, [r4, #8]
    8702:	bl	6f5c <FatPartition::cacheSync()>
    8706:	b.n	8670 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8708:	ldr	r0, [r0, #8]
    870a:	bl	7db2 <FatPartition::freeChain(unsigned long)>
    870e:	cmp	r0, #0
    8710:	bne.n	867c <FatFile::remove()+0x20>
    8712:	b.n	866e <FatFile::remove()+0x12>

00008714 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    8714:	push	{r4, lr}
    8716:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8718:	ldr	r0, [r0, #56]	; 0x38
    871a:	cbz	r0, 8728 <FsBaseFile::close()+0x14>
    871c:	bl	7534 <FatFile::close()>
    8720:	cbz	r0, 8728 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    8722:	movs	r3, #0
    8724:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    8726:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    8728:	ldr	r0, [r4, #60]	; 0x3c
    872a:	cbnz	r0, 8730 <FsBaseFile::close()+0x1c>
  return false;
    872c:	movs	r0, #0
    872e:	b.n	8726 <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    8730:	bl	5936 <ExFatFile::close()>
    8734:	cmp	r0, #0
    8736:	beq.n	872c <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    8738:	movs	r3, #0
    873a:	str	r3, [r4, #60]	; 0x3c
    return true;
    873c:	b.n	8726 <FsBaseFile::close()+0x12>

0000873e <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    873e:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    8740:	push	{r4, r5, r6, lr}
    8742:	mov	r6, r0
    8744:	mov	r5, r1
  if (this == &from) return *this;
    8746:	beq.n	8770 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    8748:	bl	8714 <FsBaseFile::close()>
  if (from.m_fFile) {
    874c:	ldr	r4, [r5, #56]	; 0x38
    874e:	cbz	r4, 8774 <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8750:	mov	r1, r6
    8752:	movs	r0, #36	; 0x24
    8754:	bl	8970 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    8758:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    875a:	mov	r4, r0
    875c:	strh	r3, [r0, #0]
    875e:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8760:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    8762:	ldr	r5, [r5, #56]	; 0x38
    8764:	ldmia	r5!, {r0, r1, r2, r3}
    8766:	stmia	r4!, {r0, r1, r2, r3}
    8768:	ldmia	r5!, {r0, r1, r2, r3}
    876a:	stmia	r4!, {r0, r1, r2, r3}
    876c:	ldr	r3, [r5, #0]
    876e:	str	r3, [r4, #0]
}
    8770:	mov	r0, r6
    8772:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    8774:	ldr	r3, [r5, #60]	; 0x3c
    8776:	cmp	r3, #0
    8778:	beq.n	8770 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    877a:	mov	r1, r6
    877c:	movs	r0, #56	; 0x38
    877e:	bl	8970 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    8782:	strb.w	r4, [r0, #49]	; 0x31
    8786:	strh	r4, [r0, #50]	; 0x32
    8788:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    878a:	ldr	r3, [r5, #60]	; 0x3c
    878c:	add.w	r2, r3, #52	; 0x34
    8790:	ldr.w	r1, [r3], #4
    8794:	cmp	r3, r2
    8796:	str.w	r1, [r0], #4
    879a:	bne.n	8790 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    879c:	b.n	8770 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

0000879e <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    879e:	push	{r0, r1, r4, r5, r6, lr}
    87a0:	mov	r4, r0
  if (!vol) {
    87a2:	mov	r5, r1
    87a4:	cbnz	r1, 87ac <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    87a6:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    87a8:	add	sp, #8
    87aa:	pop	{r4, r5, r6, pc}
    87ac:	strd	r2, r3, [sp]
  close();
    87b0:	bl	8714 <FsBaseFile::close()>
  if (vol->m_fVol) {
    87b4:	ldr.w	r6, [r5, #1152]	; 0x480
    87b8:	ldrd	r2, r3, [sp]
    87bc:	cbz	r6, 87e4 <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    87be:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    87c0:	mov	r1, r4
    87c2:	movs	r0, #36	; 0x24
    87c4:	bl	8970 <operator new(unsigned int, unsigned long*)>
    87c8:	strh	r6, [r0, #0]
    87ca:	strb	r6, [r0, #2]
    87cc:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    87ce:	ldr.w	r1, [r5, #1152]	; 0x480
    87d2:	ldrd	r2, r3, [sp]
    87d6:	bl	75e2 <FatFile::open(FatVolume*, char const*, int)>
    87da:	cbz	r0, 87e0 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    87dc:	movs	r0, #1
    87de:	b.n	87a8 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    87e0:	str	r0, [r4, #56]	; 0x38
    87e2:	b.n	87a8 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    87e4:	ldr.w	r1, [r5, #1156]	; 0x484
    87e8:	strd	r2, r3, [sp]
    87ec:	cmp	r1, #0
    87ee:	beq.n	87a6 <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    87f0:	mov	r1, r4
    87f2:	movs	r0, #56	; 0x38
    87f4:	bl	8970 <operator new(unsigned int, unsigned long*)>
    87f8:	strb.w	r6, [r0, #49]	; 0x31
    87fc:	strh	r6, [r0, #50]	; 0x32
    87fe:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    8800:	ldr.w	r1, [r5, #1156]	; 0x484
    8804:	ldrd	r2, r3, [sp]
    8808:	bl	60d6 <ExFatFile::open(ExFatVolume*, char const*, int)>
    880c:	cmp	r0, #0
    880e:	bne.n	87dc <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    8810:	str	r0, [r4, #60]	; 0x3c
    8812:	b.n	87a8 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

00008814 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    8814:	push	{r0, r1, r4, r5, r6, lr}
    8816:	mov	r5, r1
    8818:	str	r2, [sp, #4]
    881a:	mov	r4, r0
  close();
    881c:	bl	8714 <FsBaseFile::close()>
  if (dir->m_fFile) {
    8820:	ldr	r6, [r5, #56]	; 0x38
    8822:	ldr	r2, [sp, #4]
    8824:	cbz	r6, 884a <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8826:	mov	r1, r4
    8828:	movs	r0, #36	; 0x24
    882a:	bl	8970 <operator new(unsigned int, unsigned long*)>
    882e:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8830:	ldr	r2, [sp, #4]
    8832:	strh	r1, [r0, #0]
    8834:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8836:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8838:	ldr	r1, [r5, #56]	; 0x38
    883a:	bl	7418 <FatFile::openNext(FatFile*, int)>
    883e:	cbz	r0, 8846 <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    8840:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8842:	add	sp, #8
    8844:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    8846:	str	r0, [r4, #56]	; 0x38
    8848:	b.n	8842 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    884a:	ldr	r0, [r5, #60]	; 0x3c
    884c:	str	r2, [sp, #4]
    884e:	cmp	r0, #0
    8850:	beq.n	8842 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    8852:	mov	r1, r4
    8854:	movs	r0, #56	; 0x38
    8856:	bl	8970 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    885a:	ldr	r2, [sp, #4]
    885c:	strb.w	r6, [r0, #49]	; 0x31
    8860:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    8862:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8864:	ldr	r1, [r5, #60]	; 0x3c
    8866:	bl	60e4 <ExFatFile::openNext(ExFatFile*, int)>
    886a:	cmp	r0, #0
    886c:	bne.n	8840 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    886e:	str	r0, [r4, #60]	; 0x3c
    8870:	b.n	8842 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

00008874 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8874:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    8878:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    887a:	mov	r4, r0
    887c:	mov	r6, r3
  m_blockDev = blockDev;
    887e:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    8882:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    8886:	mov	r1, r0
    8888:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    888c:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    888e:	bl	8970 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    8892:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    8894:	strb.w	r7, [r0, #1092]	; 0x444
    8898:	mov	r5, r0
    889a:	strb.w	r7, [r0, #1145]	; 0x479
    889e:	strh.w	r7, [r0, #1146]	; 0x47a
    88a2:	str.w	r0, [r4, #1156]	; 0x484
    88a6:	ldr.w	r1, [r4, #1160]	; 0x488
    88aa:	ldr.w	r8, [pc, #152]	; 8944 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    88ae:	bl	6428 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    88b2:	cbz	r0, 88e4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    88b4:	add.w	r7, r5, #1096	; 0x448
    88b8:	mov	r0, r7
    88ba:	bl	5936 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    88be:	mov	r1, r5
    88c0:	mov	r0, r7
    88c2:	bl	598a <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    88c6:	cbz	r0, 88e4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    88c8:	ldr	r3, [pc, #112]	; (893c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    88ca:	ldr	r2, [r3, #0]
    88cc:	cbnz	r2, 88d0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    88ce:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    88d0:	cmp.w	r9, #0
    88d4:	bne.n	88dc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    88d6:	ldr.w	r3, [r8]
    88da:	cbnz	r3, 88e0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    88dc:	str.w	r4, [r8]
  }
  return true;
    88e0:	movs	r0, #1
    88e2:	b.n	8936 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    88e4:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    88e6:	mov	r1, r4
    88e8:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    88ec:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    88f0:	bl	8970 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    88f4:	movs	r3, #2
    88f6:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    88f8:	mov	r2, r6
    88fa:	strb	r3, [r0, #8]
    88fc:	mov	r5, r0
    88fe:	strh.w	r7, [r0, #1096]	; 0x448
    8902:	strb.w	r7, [r0, #1098]	; 0x44a
    8906:	str.w	r0, [r4, #1152]	; 0x480
    890a:	ldr.w	r1, [r4, #1160]	; 0x488
    890e:	bl	7ea0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    8912:	cbz	r0, 892c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8914:	add.w	r6, r5, #1096	; 0x448
    8918:	mov	r0, r6
    891a:	bl	7534 <FatFile::close()>
    return m_vwd.openRoot(this);
    891e:	mov	r1, r5
    8920:	mov	r0, r6
    8922:	bl	7046 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    8926:	cbz	r0, 892c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    8928:	ldr	r3, [pc, #20]	; (8940 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    892a:	b.n	88ca <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    892c:	movs	r0, #0
    892e:	str.w	r0, [r8]
  m_fVol = nullptr;
    8932:	str.w	r0, [r4, #1152]	; 0x480
}
    8936:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    893a:	nop
    893c:	.word	0x20014800
    8940:	.word	0x20014838
    8944:	.word	0x20014834

00008948 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    8948:	push	{r3, r4, r5, lr}
    894a:	mov	r4, r0
    894c:	mov.w	r5, #1000	; 0x3e8
    8950:	movs	r0, #0
    8952:	strd	r0, r5, [r4, #4]
    8956:	strb	r0, [r4, #12]
    8958:	ldr	r5, [pc, #16]	; (896c <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    895a:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    895e:	mov	r0, r4
    8960:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    8964:	bl	879e <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    8968:	mov	r0, r4
    896a:	pop	{r3, r4, r5, pc}
    896c:	.word	0x20000554

00008970 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    8970:	mov	r0, r1
    8972:	bx	lr

00008974 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    8974:	mov.w	r0, #4294967295
    8978:	bx	lr

0000897a <SharedSpiCard::errorCode() const>:
  }
    897a:	ldrb	r0, [r0, #17]
    897c:	bx	lr

0000897e <SharedSpiCard::errorData() const>:
  }
    897e:	ldrb	r0, [r0, #20]
    8980:	bx	lr

00008982 <SharedSpiCard::type() const>:
  }
    8982:	ldrb	r0, [r0, #21]
    8984:	bx	lr

00008986 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    8986:	movs	r0, #1
    8988:	bx	lr

0000898a <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    898a:	ldrb	r0, [r0, #28]
    898c:	bx	lr

0000898e <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    898e:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    8990:	push	{r4}
  return readSectors(sector, dst, 1);
    8992:	ldr	r4, [r3, #20]
    8994:	movs	r3, #1
    8996:	mov	ip, r4
}
    8998:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    899c:	bx	ip

0000899e <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    899e:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    89a0:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    89a2:	mov	r4, r0
    89a4:	mov	r5, r1
  if (!syncDevice()) {
    89a6:	ldr	r3, [r3, #32]
    89a8:	blx	r3
    89aa:	cbz	r0, 89ae <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    89ac:	strb	r5, [r4, #28]
  return true;
}
    89ae:	pop	{r3, r4, r5, pc}

000089b0 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    89b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    89b4:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    89b6:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    89b8:	mov	r4, r0
    89ba:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    89bc:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    89be:	mov	r6, r2
    89c0:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    89c4:	bne.n	89cc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    89c6:	ldr	r3, [r0, #24]
    89c8:	cmp	r3, r1
    89ca:	beq.n	89e0 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    89cc:	ldr	r3, [r4, #0]
    89ce:	mov	r1, r5
    89d0:	mov	r0, r4
    89d2:	ldr	r3, [r3, #96]	; 0x60
    89d4:	blx	r3
    89d6:	cbnz	r0, 89de <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    89d8:	movs	r0, #0
}
    89da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    89de:	str	r5, [r4, #24]
    89e0:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    89e4:	cmp	r5, r8
    89e6:	bne.n	8a00 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    89e8:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    89ea:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    89ec:	add	r3, r6
    89ee:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    89f0:	cmp	r0, #0
    89f2:	bne.n	89da <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    89f4:	ldr	r3, [r4, #0]
    89f6:	mov	r0, r4
    89f8:	ldr	r3, [r3, #100]	; 0x64
}
    89fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    89fe:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    8a00:	mov	r1, r9
    8a02:	mov	r0, r5
    8a04:	blx	r7
    if (!writeData(src)) {
    8a06:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    8a08:	mov	r1, r0
    if (!writeData(src)) {
    8a0a:	mov	r0, r4
    8a0c:	ldr	r3, [r3, #92]	; 0x5c
    8a0e:	adds	r5, #1
    8a10:	blx	r3
    8a12:	cmp	r0, #0
    8a14:	bne.n	89e4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    8a16:	b.n	89d8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

00008a18 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8a18:	bx	lr

00008a1a <SharedSpiCard::end()>:
    m_spiDriver.end();
    8a1a:	adds	r0, #4
    8a1c:	b.w	a154 <SdSpiArduinoDriver::end()>

00008a20 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8a20:	push	{r4, lr}
    8a22:	mov	r4, r0
    8a24:	movs	r1, #32
    8a26:	bl	c90c <operator delete(void*, unsigned int)>
    8a2a:	mov	r0, r4
    8a2c:	pop	{r4, pc}

00008a2e <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    8a2e:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8a30:	ldr	r3, [r0, #0]
    8a32:	mov	r1, sp
    8a34:	ldr	r3, [r3, #76]	; 0x4c
    8a36:	blx	r3
    8a38:	cbz	r0, 8a80 <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8a3a:	ldrb.w	r3, [sp]
    8a3e:	ands.w	r3, r3, #192	; 0xc0
    8a42:	bne.n	8a86 <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8a44:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8a48:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8a4c:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8a50:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8a54:	lsls	r0, r0, #2
    8a56:	orr.w	r0, r0, r3, lsl #10
    8a5a:	ldrb.w	r3, [sp, #8]
    8a5e:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8a62:	ldrb.w	r3, [sp, #9]
    8a66:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8a6a:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    8a6c:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8a6e:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8a72:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8a76:	and.w	r2, r2, #15
    8a7a:	add	r3, r2
    8a7c:	subs	r3, #7
    8a7e:	lsls	r0, r3
}
    8a80:	add	sp, #20
    8a82:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    8a86:	cmp	r3, #64	; 0x40
    8a88:	bne.n	8aa8 <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8a8a:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8a8e:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8a92:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8a94:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8a98:	add.w	r0, r0, r3, lsl #16
    8a9c:	ldrb.w	r3, [sp, #8]
    8aa0:	add.w	r0, r0, r3, lsl #8
    8aa4:	lsls	r0, r0, #10
    8aa6:	b.n	8a80 <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8aa8:	movs	r0, #0
    8aaa:	b.n	8a80 <SharedSpiCard::sectorCount()+0x52>

00008aac <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    8aac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ab0:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8ab2:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8ab4:	mov	r4, r0
    8ab6:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8ab8:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    8aba:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8abc:	bne.n	8ac4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    8abe:	ldr	r3, [r0, #24]
    8ac0:	cmp	r3, r1
    8ac2:	beq.n	8ad8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    8ac4:	ldr	r3, [r4, #0]
    8ac6:	mov	r1, r5
    8ac8:	mov	r0, r4
    8aca:	ldr	r3, [r3, #96]	; 0x60
    8acc:	blx	r3
    8ace:	cbnz	r0, 8ad6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    8ad0:	movs	r0, #0
}
    8ad2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    8ad6:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8ad8:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    8ada:	cmp	r6, r5
    8adc:	add.w	r1, r7, r5, lsl #9
    8ae0:	bne.n	8afa <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    8ae2:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8ae4:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8ae6:	add	r3, r6
    8ae8:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8aea:	cmp	r0, #0
    8aec:	bne.n	8ad2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    8aee:	ldr	r3, [r4, #0]
    8af0:	mov	r0, r4
    8af2:	ldr	r3, [r3, #100]	; 0x64
}
    8af4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    8af8:	bx	r3
    if (!writeData(src)) {
    8afa:	ldr	r3, [r4, #0]
    8afc:	mov	r0, r4
    8afe:	ldr	r3, [r3, #92]	; 0x5c
    8b00:	blx	r3
    8b02:	cmp	r0, #0
    8b04:	beq.n	8ad0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8b06:	adds	r5, #1
    8b08:	b.n	8ada <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

00008b0a <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    8b0a:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    8b0c:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    8b0e:	mov	r4, r0
  if (!m_spiActive) {
    8b10:	cbnz	r6, 8b2e <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    8b12:	adds	r5, r0, #4
    8b14:	mov	r0, r5
    8b16:	bl	a0f8 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    8b1a:	mov	r1, r6
    8b1c:	ldrb	r0, [r4, #16]
    8b1e:	bl	a1ce <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8b22:	movs	r1, #255	; 0xff
    8b24:	mov	r0, r5
    8b26:	bl	a186 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    8b2a:	movs	r3, #1
    8b2c:	strb	r3, [r4, #18]
}
    8b2e:	pop	{r4, r5, r6, pc}

00008b30 <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    8b30:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    8b32:	push	{r0, r1, r4, lr}
    8b34:	mov	r4, r0
  if (m_spiActive) {
    8b36:	cbz	r3, 8b54 <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    8b38:	movs	r1, #1
    8b3a:	ldrb	r0, [r0, #16]
    8b3c:	bl	a1ce <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8b40:	adds	r0, r4, #4
    8b42:	movs	r1, #255	; 0xff
    8b44:	str	r0, [sp, #4]
    8b46:	bl	a186 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8b4a:	ldr	r0, [sp, #4]
    8b4c:	bl	a106 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8b50:	movs	r3, #0
    8b52:	strb	r3, [r4, #18]
}
    8b54:	add	sp, #8
    8b56:	pop	{r4, pc}

00008b58 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    8b58:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    8b5a:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    8b5c:	mov	r4, r0
  if (m_state == READ_STATE) {
    8b5e:	cmp	r3, #1
    8b60:	beq.n	8b84 <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    8b62:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    8b64:	cbnz	r6, 8b6a <SharedSpiCard::isBusy()+0x12>
    spiStart();
    8b66:	bl	8b0a <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    8b6a:	adds	r0, r4, #4
    8b6c:	bl	a15a <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    8b70:	subs.w	r5, r0, #255	; 0xff
    8b74:	it	ne
    8b76:	movne	r5, #1
  if (!spiActive) {
    8b78:	cbnz	r6, 8b80 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    8b7a:	mov	r0, r4
    8b7c:	bl	8b30 <SharedSpiCard::spiStop()>
}
    8b80:	mov	r0, r5
    8b82:	pop	{r4, r5, r6, pc}
    return false;
    8b84:	movs	r5, #0
    8b86:	b.n	8b80 <SharedSpiCard::isBusy()+0x28>

00008b88 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    8b88:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8b8a:	ldr	r7, [pc, #96]	; (8bec <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    8b8c:	mov	r4, r0
    8b8e:	adds	r6, r0, #4
    8b90:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    8b92:	add.w	r5, r5, #300	; 0x12c
    8b96:	uxth	r5, r5
    8b98:	mov	r0, r6
    8b9a:	strd	r1, r2, [sp]
    8b9e:	bl	a15a <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    8ba2:	cmp	r0, #255	; 0xff
    8ba4:	strb	r0, [r4, #20]
    8ba6:	ldrd	r1, r2, [sp]
    8baa:	beq.n	8bcc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    8bac:	cmp	r0, #254	; 0xfe
    8bae:	bne.n	8be2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    8bb0:	mov	r0, r6
    8bb2:	bl	a164 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    8bb6:	strb	r0, [r4, #20]
    8bb8:	cbnz	r0, 8be6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    8bba:	mov	r0, r6
    8bbc:	bl	a15a <SdSpiArduinoDriver::receive()>
    8bc0:	mov	r0, r6
    8bc2:	bl	a15a <SdSpiArduinoDriver::receive()>
  return true;
    8bc6:	movs	r0, #1
}
    8bc8:	add	sp, #12
    8bca:	pop	{r4, r5, r6, r7, pc}
    8bcc:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    8bce:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    8bd0:	lsls	r3, r3, #16
    8bd2:	bpl.n	8b98 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    8bd4:	movs	r3, #29
  spiStop();
    8bd6:	mov	r0, r4
    m_errorCode = code;
    8bd8:	strb	r3, [r4, #17]
    8bda:	bl	8b30 <SharedSpiCard::spiStop()>
  return false;
    8bde:	movs	r0, #0
    8be0:	b.n	8bc8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    8be2:	movs	r3, #24
    8be4:	b.n	8bd6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    8be6:	movs	r3, #37	; 0x25
    8be8:	b.n	8bd6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    8bea:	nop
    8bec:	.word	0x20015374

00008bf0 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    8bf0:	mov.w	r2, #512	; 0x200
    8bf4:	b.w	8b88 <SharedSpiCard::readData(unsigned char*, unsigned int)>

00008bf8 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    8bf8:	push	{r4, r5, r6, lr}
    8bfa:	ldr	r6, [pc, #36]	; (8c20 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    8bfc:	adds	r5, r0, #4
    8bfe:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    8c00:	add	r1, r3
    8c02:	uxth	r4, r1
    8c04:	mov	r0, r5
    8c06:	bl	a15a <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8c0a:	cmp	r0, #255	; 0xff
    8c0c:	bne.n	8c12 <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    8c0e:	movs	r0, #1
}
    8c10:	pop	{r4, r5, r6, pc}
    8c12:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    8c14:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8c16:	lsls	r3, r3, #16
    8c18:	bpl.n	8c04 <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    8c1a:	movs	r0, #0
    8c1c:	b.n	8c10 <SharedSpiCard::waitReady(unsigned short)+0x18>
    8c1e:	nop
    8c20:	.word	0x20015374

00008c24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    8c24:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8c26:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    8c2a:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8c2c:	mov	r4, r0
    8c2e:	str	r2, [sp, #4]
    8c30:	mov	r5, r1
  if (!syncDevice()) {
    8c32:	blx	r3
    8c34:	cmp	r0, #0
    8c36:	beq.n	8caa <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    8c38:	ldrb	r3, [r4, #18]
    8c3a:	cbnz	r3, 8c42 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    8c3c:	mov	r0, r4
    8c3e:	bl	8b0a <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    8c42:	cmp	r5, #12
    8c44:	bne.n	8c98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    8c46:	adds	r6, r4, #4
    8c48:	movs	r7, #3
    spiSend(pa[i]);
    8c4a:	add.w	r8, sp, #4
    8c4e:	orr.w	r1, r5, #64	; 0x40
    8c52:	mov	r0, r6
    8c54:	bl	a186 <SdSpiArduinoDriver::send(unsigned char)>
    8c58:	ldrb.w	r1, [r8, r7]
    8c5c:	mov	r0, r6
    8c5e:	bl	a186 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    8c62:	subs	r7, #1
    8c64:	bcs.n	8c58 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    8c66:	cmp	r5, #0
    8c68:	mov	r0, r6
    return m_spiDriver.receive();
    8c6a:	mov.w	r5, #10
    m_spiDriver.send(data);
    8c6e:	ite	eq
    8c70:	moveq	r1, #149	; 0x95
    8c72:	movne	r1, #135	; 0x87
    8c74:	bl	a186 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8c78:	mov	r0, r6
    8c7a:	bl	a15a <SdSpiArduinoDriver::receive()>
    8c7e:	mov	r0, r6
    8c80:	bl	a15a <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    8c84:	lsls	r3, r0, #24
    m_status = spiReceive();
    8c86:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    8c88:	bpl.n	8c92 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    8c8a:	subs	r5, #1
    8c8c:	uxth	r5, r5
    8c8e:	cmp	r5, #0
    8c90:	bne.n	8c7e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    8c92:	add	sp, #8
    8c94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    8c98:	mov.w	r1, #300	; 0x12c
    8c9c:	mov	r0, r4
    8c9e:	bl	8bf8 <SharedSpiCard::waitReady(unsigned short)>
    8ca2:	cmp	r0, #0
    8ca4:	bne.n	8c46 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    8ca6:	cmp	r5, #0
    8ca8:	beq.n	8c46 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    8caa:	movs	r0, #255	; 0xff
    8cac:	b.n	8c92 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00008cae <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8cae:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    8cb0:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8cb2:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    8cb4:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8cb6:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    8cb8:	bl	8c24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8cbc:	cbz	r0, 8ccc <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    8cbe:	movs	r3, #18
  spiStop();
    8cc0:	mov	r0, r4
    8cc2:	strb	r3, [r4, #17]
    8cc4:	bl	8b30 <SharedSpiCard::spiStop()>
  return false;
    8cc8:	movs	r0, #0
}
    8cca:	pop	{r3, r4, r5, r6, r7, pc}
    8ccc:	adds	r6, r5, #4
    return m_spiDriver.receive();
    8cce:	adds	r7, r4, #4
    8cd0:	mov	r0, r7
    8cd2:	bl	a15a <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    8cd6:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    8cda:	cmp	r6, r5
    8cdc:	bne.n	8cd0 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    8cde:	mov	r0, r4
    8ce0:	bl	8b30 <SharedSpiCard::spiStop()>
    8ce4:	movs	r0, #1
    8ce6:	b.n	8cca <SharedSpiCard::readOCR(unsigned long*)+0x1c>

00008ce8 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8ce8:	push	{r3, r4, r5, lr}
    8cea:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    8cec:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8cee:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    8cf0:	bl	8c24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8cf4:	cbz	r0, 8d04 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    8cf6:	movs	r3, #27
    8cf8:	strb	r3, [r4, #17]
  spiStop();
    8cfa:	mov	r0, r4
  return false;
    8cfc:	movs	r5, #0
  spiStop();
    8cfe:	bl	8b30 <SharedSpiCard::spiStop()>
  return false;
    8d02:	b.n	8d1a <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    8d04:	mov	r1, r5
    8d06:	movs	r2, #16
    8d08:	mov	r0, r4
    8d0a:	bl	8b88 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8d0e:	mov	r5, r0
    8d10:	cmp	r0, #0
    8d12:	beq.n	8cfa <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    8d14:	mov	r0, r4
    8d16:	bl	8b30 <SharedSpiCard::spiStop()>
}
    8d1a:	mov	r0, r5
    8d1c:	pop	{r3, r4, r5, pc}

00008d1e <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    8d1e:	mov	r2, r1
    return readRegister(CMD9, csd);
    8d20:	movs	r1, #9
    8d22:	b.w	8ce8 <SharedSpiCard::readRegister(unsigned char, void*)>

00008d26 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    8d26:	mov	r2, r1
    return readRegister(CMD10, cid);
    8d28:	movs	r1, #10
    8d2a:	b.w	8ce8 <SharedSpiCard::readRegister(unsigned char, void*)>

00008d2e <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    8d2e:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8d30:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    8d32:	mov	r5, r1
    8d34:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8d36:	ldr	r3, [r3, #88]	; 0x58
    8d38:	blx	r3
    8d3a:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8d3c:	mov.w	r1, #18
    8d40:	mov	r0, r4
    sector <<= 9;
    8d42:	it	ne
    8d44:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    8d46:	mov	r2, r5
    8d48:	bl	8c24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8d4c:	cbz	r0, 8d5c <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    8d4e:	movs	r3, #12
  spiStop();
    8d50:	mov	r0, r4
    8d52:	strb	r3, [r4, #17]
    8d54:	bl	8b30 <SharedSpiCard::spiStop()>
  return false;
    8d58:	movs	r0, #0
}
    8d5a:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    8d5c:	movs	r0, #1
    8d5e:	strb	r0, [r4, #19]
  return true;
    8d60:	b.n	8d5a <SharedSpiCard::readStart(unsigned long)+0x2c>

00008d62 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    8d62:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    8d64:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    8d66:	movs	r1, #12
bool SharedSpiCard::readStop() {
    8d68:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    8d6a:	mov	r2, r4
  m_state = IDLE_STATE;
    8d6c:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    8d6e:	bl	8c24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8d72:	cbz	r0, 8d82 <SharedSpiCard::readStop()+0x20>
    8d74:	movs	r3, #9
  spiStop();
    8d76:	mov	r0, r5
    8d78:	strb	r3, [r5, #17]
    8d7a:	bl	8b30 <SharedSpiCard::spiStop()>
  return false;
    8d7e:	mov	r0, r4
}
    8d80:	pop	{r3, r4, r5, pc}
  spiStop();
    8d82:	mov	r0, r5
    8d84:	bl	8b30 <SharedSpiCard::spiStop()>
  return true;
    8d88:	movs	r0, #1
    8d8a:	b.n	8d80 <SharedSpiCard::readStop()+0x1e>

00008d8c <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    8d8c:	ldrb	r2, [r0, #19]
    8d8e:	cmp	r2, #2
    8d90:	bne.n	8d98 <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    8d92:	ldr	r3, [r0, #0]
    8d94:	ldr	r3, [r3, #100]	; 0x64
    8d96:	bx	r3
  if (m_state == READ_STATE) {
    8d98:	cmp	r2, #1
    8d9a:	bne.n	8da0 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    8d9c:	b.w	8d62 <SharedSpiCard::readStop()>
}
    8da0:	movs	r0, #1
    8da2:	bx	lr

00008da4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    8da4:	push	{r3, r4, r5, r6, r7, lr}
    8da6:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8da8:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8daa:	mov	r4, r0
    8dac:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8dae:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    8db0:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8db2:	bne.n	8dba <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    8db4:	ldr	r3, [r0, #24]
    8db6:	cmp	r3, r1
    8db8:	beq.n	8dca <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    8dba:	mov	r1, r5
    8dbc:	mov	r0, r4
    8dbe:	bl	8d2e <SharedSpiCard::readStart(unsigned long)>
    8dc2:	cbnz	r0, 8dc8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    8dc4:	movs	r0, #0
}
    8dc6:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    8dc8:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8dca:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8dcc:	cmp	r5, r6
    8dce:	add.w	r1, r7, r5, lsl #9
    8dd2:	bne.n	8dea <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    8dd4:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8dd6:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8dd8:	add	r3, r5
    8dda:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8ddc:	cmp	r0, #0
    8dde:	bne.n	8dc6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    8de0:	mov	r0, r4
}
    8de2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    8de6:	b.w	8d62 <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    8dea:	mov	r0, r4
    8dec:	bl	8bf0 <SharedSpiCard::readData(unsigned char*)>
    8df0:	cmp	r0, #0
    8df2:	beq.n	8dc4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8df4:	adds	r5, #1
    8df6:	b.n	8dcc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

00008df8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8df8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8dfc:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8dfe:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8e00:	mov	r4, r0
    8e02:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8e04:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8e06:	mov	r7, r2
    8e08:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    8e0c:	bne.n	8e14 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    8e0e:	ldr	r3, [r0, #24]
    8e10:	cmp	r3, r1
    8e12:	beq.n	8e26 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    8e14:	mov	r1, r5
    8e16:	mov	r0, r4
    8e18:	bl	8d2e <SharedSpiCard::readStart(unsigned long)>
    8e1c:	cbnz	r0, 8e24 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    8e1e:	movs	r0, #0
}
    8e20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8e24:	str	r5, [r4, #24]
    8e26:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8e2a:	cmp	r5, r8
    8e2c:	bne.n	8e44 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    8e2e:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8e30:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8e32:	add	r3, r6
    8e34:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8e36:	cmp	r0, #0
    8e38:	bne.n	8e20 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    8e3a:	mov	r0, r4
}
    8e3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    8e40:	b.w	8d62 <SharedSpiCard::readStop()>
    if (readData(dst)) {
    8e44:	mov	r1, r7
    8e46:	mov	r0, r4
    8e48:	bl	8bf0 <SharedSpiCard::readData(unsigned char*)>
    8e4c:	cmp	r0, #0
    8e4e:	beq.n	8e1e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    8e50:	mov	r0, r5
    8e52:	mov	r2, sl
    8e54:	mov	r1, r7
    8e56:	adds	r5, #1
    8e58:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    8e5a:	b.n	8e2a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

00008e5c <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    8e5c:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8e5e:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    8e60:	mov	r5, r1
    8e62:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8e64:	ldr	r3, [r3, #88]	; 0x58
    8e66:	blx	r3
    8e68:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8e6a:	mov.w	r1, #25
    8e6e:	mov	r0, r4
    sector <<= 9;
    8e70:	it	ne
    8e72:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    8e74:	mov	r2, r5
    8e76:	bl	8c24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8e7a:	cbz	r0, 8e8a <SharedSpiCard::writeStart(unsigned long)+0x2e>
    8e7c:	movs	r3, #14
  spiStop();
    8e7e:	mov	r0, r4
    8e80:	strb	r3, [r4, #17]
    8e82:	bl	8b30 <SharedSpiCard::spiStop()>
  return false;
    8e86:	movs	r0, #0
}
    8e88:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    8e8a:	movs	r3, #2
  return true;
    8e8c:	movs	r0, #1
  m_state = WRITE_STATE;
    8e8e:	strb	r3, [r4, #19]
  return true;
    8e90:	b.n	8e88 <SharedSpiCard::writeStart(unsigned long)+0x2c>

00008e92 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8e92:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    8e94:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8e96:	mov	r6, r1
  if (!readCSD(&csd)) {
    8e98:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8e9a:	mov	r4, r0
  if (!readCSD(&csd)) {
    8e9c:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8e9e:	mov	r5, r2
  if (!readCSD(&csd)) {
    8ea0:	blx	r3
    8ea2:	cbz	r0, 8ec6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    8ea4:	ldrb.w	r3, [sp, #10]
    8ea8:	lsls	r2, r3, #25
    8eaa:	bmi.n	8ed0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    8eac:	and.w	r3, r3, #63	; 0x3f
    8eb0:	ldrb.w	r2, [sp, #11]
    8eb4:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8eb6:	orr.w	r3, r3, r2, lsr #7
    8eba:	adds	r2, r5, #1
    8ebc:	orrs	r2, r6
    8ebe:	tst	r3, r2
    8ec0:	beq.n	8ed0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    8ec2:	movs	r3, #39	; 0x27
    8ec4:	strb	r3, [r4, #17]
  spiStop();
    8ec6:	mov	r0, r4
  return false;
    8ec8:	movs	r5, #0
  spiStop();
    8eca:	bl	8b30 <SharedSpiCard::spiStop()>
  return false;
    8ece:	b.n	8f1e <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8ed0:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    8ed2:	movs	r1, #32
    8ed4:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    8ed6:	cmp	r3, #3
    firstSector <<= 9;
    8ed8:	itt	ne
    8eda:	lslne	r6, r6, #9
    lastSector <<= 9;
    8edc:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    8ede:	mov	r2, r6
    8ee0:	bl	8c24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    8ee4:	cbz	r0, 8eea <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    8ee6:	movs	r3, #38	; 0x26
    8ee8:	b.n	8ec4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    8eea:	mov	r2, r5
    8eec:	movs	r1, #33	; 0x21
    8eee:	mov	r0, r4
    8ef0:	bl	8c24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8ef4:	mov	r2, r0
    8ef6:	cmp	r0, #0
    8ef8:	bne.n	8ee6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    8efa:	movs	r1, #38	; 0x26
    8efc:	mov	r0, r4
    8efe:	bl	8c24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8f02:	cmp	r0, #0
    8f04:	bne.n	8ee6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    8f06:	movw	r1, #10000	; 0x2710
    8f0a:	mov	r0, r4
    8f0c:	bl	8bf8 <SharedSpiCard::waitReady(unsigned short)>
    8f10:	mov	r5, r0
    8f12:	cbnz	r0, 8f18 <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    8f14:	movs	r3, #40	; 0x28
    8f16:	b.n	8ec4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    8f18:	mov	r0, r4
    8f1a:	bl	8b30 <SharedSpiCard::spiStop()>
}
    8f1e:	mov	r0, r5
    8f20:	add	sp, #16
    8f22:	pop	{r4, r5, r6, pc}

00008f24 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    8f24:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8f26:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    8f2a:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8f2c:	bl	8bf8 <SharedSpiCard::waitReady(unsigned short)>
    8f30:	mov	r5, r0
    8f32:	cbnz	r0, 8f42 <SharedSpiCard::writeStop()+0x1e>
    8f34:	movs	r3, #30
  spiStop();
    8f36:	mov	r0, r4
    8f38:	strb	r3, [r4, #17]
    8f3a:	bl	8b30 <SharedSpiCard::spiStop()>
}
    8f3e:	mov	r0, r5
    8f40:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    8f42:	movs	r1, #253	; 0xfd
    8f44:	adds	r0, r4, #4
    8f46:	bl	a186 <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    8f4a:	mov	r0, r4
    8f4c:	bl	8b30 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    8f50:	movs	r3, #0
    8f52:	strb	r3, [r4, #19]
  return true;
    8f54:	b.n	8f3e <SharedSpiCard::writeStop()+0x1a>

00008f56 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    8f56:	push	{r0, r1, r2, r4, r5, lr}
    8f58:	mov	r5, r2
    8f5a:	mov	r4, r0
    8f5c:	adds	r0, #4
    8f5e:	str	r0, [sp, #4]
    8f60:	bl	a186 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    8f64:	mov.w	r2, #512	; 0x200
    8f68:	mov	r1, r5
    8f6a:	ldr	r0, [sp, #4]
    8f6c:	bl	a18e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    8f70:	movs	r1, #255	; 0xff
    8f72:	ldr	r0, [sp, #4]
    8f74:	bl	a186 <SdSpiArduinoDriver::send(unsigned char)>
    8f78:	movs	r1, #255	; 0xff
    8f7a:	ldr	r0, [sp, #4]
    8f7c:	bl	a186 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8f80:	ldr	r0, [sp, #4]
    8f82:	bl	a15a <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    8f86:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8f88:	and.w	r0, r0, #31
    8f8c:	cmp	r0, #5
    8f8e:	beq.n	8fa0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    8f90:	movs	r3, #32
  spiStop();
    8f92:	mov	r0, r4
    8f94:	strb	r3, [r4, #17]
    8f96:	bl	8b30 <SharedSpiCard::spiStop()>
  return false;
    8f9a:	movs	r0, #0
}
    8f9c:	add	sp, #12
    8f9e:	pop	{r4, r5, pc}
  return true;
    8fa0:	movs	r0, #1
    8fa2:	b.n	8f9c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

00008fa4 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8fa4:	push	{r0, r1, r4, lr}
    8fa6:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8fa8:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    8fac:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8fae:	bl	8bf8 <SharedSpiCard::waitReady(unsigned short)>
    8fb2:	ldr	r2, [sp, #4]
    8fb4:	cbnz	r0, 8fc4 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    8fb6:	movs	r3, #36	; 0x24
    8fb8:	strb	r3, [r4, #17]
  spiStop();
    8fba:	mov	r0, r4
    8fbc:	bl	8b30 <SharedSpiCard::spiStop()>
  return false;
    8fc0:	movs	r0, #0
    8fc2:	b.n	8fd0 <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8fc4:	movs	r1, #252	; 0xfc
    8fc6:	mov	r0, r4
    8fc8:	bl	8f56 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8fcc:	cmp	r0, #0
    8fce:	beq.n	8fba <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    8fd0:	add	sp, #8
    8fd2:	pop	{r4, pc}

00008fd4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8fd4:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8fd6:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8fd8:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8fda:	mov	r5, r1
    8fdc:	mov	r4, r0
    8fde:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    8fe0:	blx	r3
    8fe2:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    8fe4:	mov.w	r1, #24
    8fe8:	mov	r0, r4
    sector <<= 9;
    8fea:	it	ne
    8fec:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    8fee:	mov	r2, r5
    8ff0:	bl	8c24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8ff4:	cbz	r0, 9004 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    8ff6:	movs	r3, #13
    8ff8:	strb	r3, [r4, #17]
  spiStop();
    8ffa:	mov	r0, r4
  return false;
    8ffc:	movs	r5, #0
  spiStop();
    8ffe:	bl	8b30 <SharedSpiCard::spiStop()>
  return false;
    9002:	b.n	901a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    9004:	mov	r2, r6
    9006:	movs	r1, #254	; 0xfe
    9008:	mov	r0, r4
    900a:	bl	8f56 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    900e:	mov	r5, r0
    9010:	cmp	r0, #0
    9012:	beq.n	8ffa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    9014:	mov	r0, r4
    9016:	bl	8b30 <SharedSpiCard::spiStop()>
}
    901a:	mov	r0, r5
    901c:	pop	{r4, r5, r6, pc}

0000901e <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    901e:	push	{r4}
  if (m_dedicatedSpi) {
    9020:	ldrb	r4, [r0, #28]
    9022:	cbz	r4, 9032 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    9024:	ldr	r3, [r0, #0]
    9026:	ldr	r4, [r3, #40]	; 0x28
    9028:	movs	r3, #1
    902a:	mov	ip, r4
}
    902c:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    9030:	bx	ip
}
    9032:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    9036:	b.w	8fd4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000903a <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    903a:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    903e:	ldr	r5, [sp, #32]
    9040:	mov	r6, r0
    9042:	mov	r4, r1
    9044:	mov	r7, r2
    9046:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    904a:	cmp	r4, r8
    904c:	bne.n	9054 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    904e:	movs	r0, #1
  }
    9050:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    9054:	ldr	r3, [r6, #0]
    9056:	mov	r2, r7
    9058:	mov	r1, r4
    905a:	mov	r0, r6
    905c:	ldr	r3, [r3, #16]
    905e:	add.w	r9, r4, #1
    9062:	blx	r3
    9064:	cmp	r0, #0
    9066:	beq.n	9050 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    9068:	mov	r0, r4
    906a:	ldr	r2, [sp, #36]	; 0x24
    906c:	mov	r1, r7
    906e:	mov	r4, r9
    9070:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    9072:	b.n	904a <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

00009074 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    9074:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9078:	mov	r5, r0
    907a:	mov	r4, r1
    907c:	mov	r7, r3
    907e:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    9080:	cmp	r4, r6
    9082:	bne.n	9088 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    9084:	movs	r0, #1
    9086:	b.n	90a2 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    9088:	ldr	r3, [r5, #0]
    908a:	mov	r0, r4
    908c:	ldr	r1, [sp, #24]
    908e:	ldr.w	r8, [r3, #36]	; 0x24
    9092:	blx	r7
    9094:	mov	r1, r4
    9096:	mov	r2, r0
    9098:	mov	r0, r5
    909a:	adds	r4, #1
    909c:	blx	r8
    909e:	cmp	r0, #0
    90a0:	bne.n	9080 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    90a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000090a6 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    90a6:	movs	r0, #0
    90a8:	bx	lr

000090aa <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    90aa:	movs	r0, #0
    90ac:	bx	lr

000090ae <SdCardInterface::setDedicatedSpi(bool)>:
  }
    90ae:	movs	r0, #0
    90b0:	bx	lr

000090b2 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    90b2:	bx	lr

000090b4 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    90b4:	ldr	r3, [pc, #28]	; (90d4 <sdIrs()+0x20>)
    90b6:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    90b8:	ldr	r2, [pc, #28]	; (90d8 <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    90ba:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    90bc:	ldr	r0, [r3, #48]	; 0x30
    90be:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    90c0:	ldr	r2, [r2, #0]
    90c2:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    90c4:	ldr	r2, [r3, #72]	; 0x48
    90c6:	bic.w	r2, r2, #129	; 0x81
    90ca:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    90cc:	ldr	r3, [pc, #12]	; (90dc <sdIrs()+0x28>)
    90ce:	strb	r1, [r3, #0]
}
    90d0:	bx	lr
    90d2:	nop
    90d4:	.word	0x402c0000
    90d8:	.word	0x200147f8
    90dc:	.word	0x20015534

000090e0 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    90e0:	ldr	r3, [pc, #24]	; (90fc <gpioMux(unsigned char)+0x1c>)
    90e2:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    90e6:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    90ea:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    90ee:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    90f2:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    90f6:	str.w	r0, [r3, #456]	; 0x1c8
}
    90fa:	bx	lr
    90fc:	.word	0x401f8000

00009100 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    9100:	ldr	r3, [pc, #12]	; (9110 <isBusyCommandComplete()+0x10>)
    9102:	ldr	r0, [pc, #16]	; (9114 <isBusyCommandComplete()+0x14>)
    9104:	ldr	r3, [r3, #48]	; 0x30
    9106:	ands	r0, r3
}
    9108:	clz	r0, r0
    910c:	lsrs	r0, r0, #5
    910e:	bx	lr
    9110:	.word	0x402c0000
    9114:	.word	0x000f0001

00009118 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    9118:	ldr	r3, [pc, #8]	; (9124 <isBusyCommandInhibit()+0xc>)
    911a:	ldr	r0, [r3, #36]	; 0x24
}
    911c:	and.w	r0, r0, #1
    9120:	bx	lr
    9122:	nop
    9124:	.word	0x402c0000

00009128 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9128:	ldr	r3, [pc, #12]	; (9138 <isBusyDat()+0x10>)
    912a:	ldr	r0, [r3, #36]	; 0x24
    912c:	eor.w	r0, r0, #16777216	; 0x1000000
}
    9130:	ubfx	r0, r0, #24, #1
    9134:	bx	lr
    9136:	nop
    9138:	.word	0x402c0000

0000913c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    913c:	ldr	r3, [pc, #4]	; (9144 <isBusyDMA()+0x8>)
    913e:	ldrb	r0, [r3, #0]
}
    9140:	bx	lr
    9142:	nop
    9144:	.word	0x20015534

00009148 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    9148:	ldr	r3, [pc, #12]	; (9158 <isBusyFifoRead()+0x10>)
    914a:	ldr	r0, [r3, #36]	; 0x24
    914c:	eor.w	r0, r0, #2048	; 0x800
}
    9150:	ubfx	r0, r0, #11, #1
    9154:	bx	lr
    9156:	nop
    9158:	.word	0x402c0000

0000915c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    915c:	ldr	r3, [pc, #12]	; (916c <isBusyFifoWrite()+0x10>)
    915e:	ldr	r0, [r3, #36]	; 0x24
    9160:	eor.w	r0, r0, #1024	; 0x400
}
    9164:	ubfx	r0, r0, #10, #1
    9168:	bx	lr
    916a:	nop
    916c:	.word	0x402c0000

00009170 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9170:	ldr	r3, [pc, #12]	; (9180 <isBusyTransferComplete()+0x10>)
    9172:	ldr	r0, [pc, #16]	; (9184 <isBusyTransferComplete()+0x14>)
    9174:	ldr	r3, [r3, #48]	; 0x30
    9176:	ands	r0, r3
}
    9178:	clz	r0, r0
    917c:	lsrs	r0, r0, #5
    917e:	bx	lr
    9180:	.word	0x402c0000
    9184:	.word	0x117f0002

00009188 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    9188:	mov.w	r3, #1000	; 0x3e8
    918c:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    918e:	ldr	r3, [pc, #140]	; (921c <setSdclk(unsigned long)+0x94>)
    9190:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    9192:	sub.w	r3, r3, #147456	; 0x24000
    9196:	ldr.w	r1, [r3, #256]	; 0x100
    919a:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    919c:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    91a0:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    91a4:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    91a6:	udiv	r1, r1, r3
    91aa:	ldr	r3, [pc, #116]	; (9220 <setSdclk(unsigned long)+0x98>)
    91ac:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    91b0:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    91b2:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    91b6:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    91b8:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    91ba:	lsls	r4, r2, #4
    91bc:	udiv	r4, r3, r4
    91c0:	cmp	r4, r0
    91c2:	bls.n	91c8 <setSdclk(unsigned long)+0x40>
    91c4:	subs	r1, #1
    91c6:	bne.n	91ce <setSdclk(unsigned long)+0x46>
    91c8:	mov	r4, r2
    91ca:	movs	r1, #1
    91cc:	b.n	91d6 <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    91ce:	lsls	r2, r2, #1
    91d0:	b.n	91ba <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    91d2:	adds	r1, #1
    91d4:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    91d6:	udiv	r5, r3, r4
    91da:	cmp	r5, r0
    91dc:	bls.n	91e6 <setSdclk(unsigned long)+0x5e>
    91de:	cmp	r1, #16
    91e0:	add.w	r5, r2, r4
    91e4:	bne.n	91d2 <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    91e6:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    91ea:	subs	r1, #1
  sdclkfs >>= 1;
    91ec:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    91ee:	muls	r4, r0
    91f0:	ldr	r0, [pc, #48]	; (9224 <setSdclk(unsigned long)+0x9c>)
    91f2:	udiv	r3, r3, r4
    91f6:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    91f8:	ldr	r0, [pc, #44]	; (9228 <setSdclk(unsigned long)+0xa0>)
    91fa:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    91fc:	bic.w	r3, r3, #1044480	; 0xff000
    9200:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    9204:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    9208:	orr.w	r3, r3, r2, lsl #8
    920c:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    9210:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    9212:	ldr	r3, [r0, #36]	; 0x24
    9214:	lsls	r3, r3, #28
    9216:	bpl.n	9212 <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    9218:	pop	{r4, r5, pc}
    921a:	nop
    921c:	.word	0x400fc000
    9220:	.word	0x5e69ec00
    9224:	.word	0x2000dfd0
    9228:	.word	0x402c0000

0000922c <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    922c:	ldr	r3, [pc, #4]	; (9234 <SdioCard::errorCode() const+0x8>)
    922e:	ldrb	r0, [r3, #0]
    9230:	bx	lr
    9232:	nop
    9234:	.word	0x2000230e

00009238 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    9238:	ldr	r3, [pc, #4]	; (9240 <SdioCard::errorData() const+0x8>)
    923a:	ldr	r0, [r3, #0]
}
    923c:	bx	lr
    923e:	nop
    9240:	.word	0x200147f8

00009244 <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    9244:	ldr	r3, [pc, #20]	; (925c <SdioCard::readCID(CID*)+0x18>)
    9246:	add.w	r2, r3, #16
    924a:	ldr.w	r0, [r3], #4
    924e:	cmp	r3, r2
    9250:	str.w	r0, [r1], #4
    9254:	bne.n	924a <SdioCard::readCID(CID*)+0x6>
  return true;
}
    9256:	movs	r0, #1
    9258:	bx	lr
    925a:	nop
    925c:	.word	0x20015474

00009260 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    9260:	ldr	r3, [pc, #20]	; (9278 <SdioCard::readCSD(csd_t*)+0x18>)
    9262:	add.w	r2, r3, #16
    9266:	ldr.w	r0, [r3], #4
    926a:	cmp	r3, r2
    926c:	str.w	r0, [r1], #4
    9270:	bne.n	9266 <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    9272:	movs	r0, #1
    9274:	bx	lr
    9276:	nop
    9278:	.word	0x20015484

0000927c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    927c:	ldr	r3, [pc, #8]	; (9288 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    927e:	movs	r0, #1
  *ocr = m_ocr;
    9280:	ldr	r3, [r3, #0]
    9282:	str	r3, [r1, #0]
}
    9284:	bx	lr
    9286:	nop
    9288:	.word	0x200141ec

0000928c <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    928c:	bx	lr
	...

00009290 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    9290:	push	{r3, r4, r5, r6, r7, lr}
    9292:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9294:	ldr	r7, [pc, #24]	; (92b0 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    9296:	bl	b714 <micros>
    929a:	mov	r6, r0
  while (fcn()) {
    929c:	blx	r5
    929e:	mov	r4, r0
    92a0:	cbz	r0, 92ac <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    92a2:	bl	b714 <micros>
    92a6:	subs	r0, r0, r6
    92a8:	cmp	r0, r7
    92aa:	bls.n	929c <waitTimeout(bool (*)())+0xc>
}
    92ac:	mov	r0, r4
    92ae:	pop	{r3, r4, r5, r6, r7, pc}
    92b0:	.word	0x000f4240

000092b4 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    92b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    92b8:	ldr	r7, [pc, #44]	; (92e8 <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    92ba:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    92bc:	ldr.w	r8, [pc, #44]	; 92ec <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    92c0:	str	r0, [r7, #0]
  uint32_t m = micros();
    92c2:	bl	b714 <micros>
    92c6:	mov	r6, r0
  while (fcn()) {
    92c8:	blx	r5
    92ca:	mov	r4, r0
    92cc:	cbnz	r0, 92d8 <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    92ce:	movs	r3, #0
}
    92d0:	mov	r0, r4
      m_busyFcn = 0;
    92d2:	str	r3, [r7, #0]
}
    92d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    92d8:	bl	b714 <micros>
    92dc:	subs	r0, r0, r6
    92de:	cmp	r0, r8
    92e0:	bhi.n	92ce <yieldTimeout(bool (*)())+0x1a>
    yield();
    92e2:	bl	c3dc <yield>
    92e6:	b.n	92c8 <yieldTimeout(bool (*)())+0x14>
    92e8:	.word	0x200147f4
    92ec:	.word	0x000f4240

000092f0 <SdioCard::~SdioCard()>:
    92f0:	push	{r4, lr}
    92f2:	mov	r4, r0
    92f4:	movs	r1, #12
    92f6:	bl	c90c <operator delete(void*, unsigned int)>
    92fa:	mov	r0, r4
    92fc:	pop	{r4, pc}
	...

00009300 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    9300:	push	{r3, lr}
    gpioMux(0);
    9302:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9304:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    9308:	bl	90e0 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    930c:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9310:	ldr	r3, [pc, #24]	; (932c <enableGPIO(bool) [clone .part.0]+0x2c>)
    9312:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    9316:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    931a:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    931e:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    9322:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    9326:	str.w	r2, [r3, #952]	; 0x3b8
}
    932a:	pop	{r3, pc}
    932c:	.word	0x401f8000

00009330 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9330:	ldr	r3, [pc, #184]	; (93ec <initSDHC()+0xbc>)
    gpioMux(5);
    9332:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9334:	ldr.w	r2, [r3, #256]	; 0x100
    9338:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    933c:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    933e:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9342:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    9346:	ldr	r4, [pc, #168]	; (93f0 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9348:	bic.w	r2, r2, #63	; 0x3f
    934c:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    9350:	ldr.w	r2, [r3, #256]	; 0x100
    9354:	orr.w	r2, r2, #24
    9358:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    935c:	ldr.w	r2, [r3, #256]	; 0x100
    9360:	bic.w	r2, r2, #128	; 0x80
    9364:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9368:	add.w	r3, r3, #147456	; 0x24000
    936c:	ldr.w	r2, [r3, #128]	; 0x80
    9370:	orr.w	r2, r2, #12
    9374:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    9378:	ldr	r2, [r3, #36]	; 0x24
    937a:	bic.w	r2, r2, #14336	; 0x3800
    937e:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    9380:	ldr	r2, [r3, #28]
    9382:	orr.w	r2, r2, #65536	; 0x10000
    9386:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    9388:	ldr	r2, [r3, #36]	; 0x24
    938a:	orr.w	r2, r2, #2048	; 0x800
    938e:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    9390:	bl	90e0 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    9394:	ldr	r3, [r4, #72]	; 0x48
    9396:	orr.w	r3, r3, #2147483648	; 0x80000000
    939a:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    939c:	ldr	r3, [r4, #44]	; 0x2c
    939e:	orr.w	r3, r3, #16777216	; 0x1000000
    93a2:	orr.w	r3, r3, #32768	; 0x8000
    93a6:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    93a8:	ldr	r3, [r4, #44]	; 0x2c
    93aa:	lsls	r2, r3, #7
    93ac:	bmi.n	93a8 <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    93ae:	mov.w	r0, #400	; 0x190
    93b2:	bl	9188 <setSdclk(unsigned long)>
  if (enable) {
    93b6:	bl	9300 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    93ba:	ldr	r3, [pc, #56]	; (93f4 <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    93bc:	ldr	r2, [pc, #56]	; (93f8 <initSDHC()+0xc8>)
    93be:	str	r3, [r4, #52]	; 0x34
    93c0:	ldr	r3, [pc, #56]	; (93fc <initSDHC()+0xcc>)
    93c2:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    93c6:	ldr	r3, [pc, #56]	; (9400 <initSDHC()+0xd0>)
    93c8:	movs	r2, #96	; 0x60
    93ca:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    93ce:	mov.w	r3, #3758153728	; 0xe000e000
    93d2:	mov.w	r2, #16384	; 0x4000
    93d6:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    93da:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    93dc:	ldr	r2, [pc, #16]	; (93f0 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    93de:	orr.w	r3, r3, #134217728	; 0x8000000
    93e2:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    93e4:	ldr	r3, [r2, #44]	; 0x2c
    93e6:	lsls	r3, r3, #4
    93e8:	bmi.n	93e4 <initSDHC()+0xb4>
}
    93ea:	pop	{r4, pc}
    93ec:	.word	0x400d8000
    93f0:	.word	0x402c0000
    93f4:	.word	0x117f000b
    93f8:	.word	0x000090b5
    93fc:	.word	0x20002400
    9400:	.word	0xe000e400

00009404 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    9404:	ldr	r3, [pc, #16]	; (9418 <SdioCard::type() const+0x14>)
    9406:	ldrb	r3, [r3, #0]
    9408:	cbz	r3, 9414 <SdioCard::type() const+0x10>
    940a:	ldr	r3, [pc, #16]	; (941c <SdioCard::type() const+0x18>)
    940c:	ldrb	r0, [r3, #0]
    940e:	adds	r0, #2
    9410:	uxtb	r0, r0
    9412:	bx	lr
    9414:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    9416:	bx	lr
    9418:	.word	0x20015471
    941c:	.word	0x20015472

00009420 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9420:	push	{r3, r4, r5, lr}
    9422:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    9424:	ldr	r0, [pc, #80]	; (9478 <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9426:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    9428:	bl	9290 <waitTimeout(bool (*)())>
    942c:	cbnz	r0, 946e <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    942e:	ldr	r3, [pc, #76]	; (947c <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    9430:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    9432:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    9434:	bpl.n	9446 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    9436:	ldr	r2, [r3, #72]	; 0x48
    9438:	bic.w	r2, r2, #255	; 0xff
    943c:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    943e:	uxtb	r2, r4
    9440:	ldr	r1, [r3, #72]	; 0x48
    9442:	orrs	r2, r1
    9444:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    9446:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    944a:	ldr	r5, [pc, #48]	; (947c <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    944c:	ldr	r0, [pc, #48]	; (9480 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    944e:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    9450:	bl	9290 <waitTimeout(bool (*)())>
    9454:	cbnz	r0, 946e <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    9456:	ldr	r2, [r5, #48]	; 0x30
    9458:	ldr	r3, [pc, #40]	; (9484 <cardCommand(unsigned long, unsigned long)+0x64>)
    945a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    945c:	ldr	r2, [r3, #0]
    945e:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9460:	ldr	r2, [r3, #0]
    9462:	lsls	r2, r2, #31
    9464:	bpl.n	946e <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    9466:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9468:	tst.w	r3, #983040	; 0xf0000
    946c:	beq.n	9472 <cardCommand(unsigned long, unsigned long)+0x52>
    946e:	movs	r0, #0
}
    9470:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9472:	movs	r0, #1
    9474:	b.n	9470 <cardCommand(unsigned long, unsigned long)+0x50>
    9476:	nop
    9478:	.word	0x00009119
    947c:	.word	0x402c0000
    9480:	.word	0x00009101
    9484:	.word	0x200147f8

00009488 <statusCMD13()>:
static uint32_t statusCMD13() {
    9488:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    948a:	ldr	r3, [pc, #16]	; (949c <statusCMD13()+0x14>)
    948c:	ldr	r0, [pc, #16]	; (94a0 <statusCMD13()+0x18>)
    948e:	ldr	r1, [r3, #0]
    9490:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9494:	cbz	r0, 949a <statusCMD13()+0x12>
    9496:	ldr	r3, [pc, #12]	; (94a4 <statusCMD13()+0x1c>)
    9498:	ldr	r0, [r3, #16]
}
    949a:	pop	{r3, pc}
    949c:	.word	0x200141f0
    94a0:	.word	0x0d1a0000
    94a4:	.word	0x402c0000

000094a8 <isBusyCMD13()>:
static bool isBusyCMD13() {
    94a8:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    94aa:	bl	9488 <statusCMD13()>
    94ae:	eor.w	r0, r0, #256	; 0x100
}
    94b2:	ubfx	r0, r0, #8, #1
    94b6:	pop	{r3, pc}

000094b8 <SdioCard::status()>:
  return statusCMD13();
    94b8:	b.w	9488 <statusCMD13()>

000094bc <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    94bc:	ldr	r3, [pc, #76]	; (950c <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    94be:	push	{r4, r5, lr}
    94c0:	mov	r4, r1
    94c2:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    94c4:	ldr	r1, [r3, #0]
    94c6:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    94ca:	cbz	r0, 9508 <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    94cc:	ldr	r3, [pc, #64]	; (9510 <readReg16(unsigned long, void*)+0x54>)
    94ce:	add.w	r5, r4, #15
    94d2:	ldr	r2, [r3, #16]
    94d4:	str	r2, [sp, #0]
    94d6:	ldr	r2, [r3, #20]
    94d8:	str	r2, [sp, #4]
    94da:	ldr	r2, [r3, #24]
    94dc:	str	r2, [sp, #8]
    94de:	ldr	r3, [r3, #28]
    94e0:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    94e2:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    94e4:	bic.w	r2, r3, #3
    94e8:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    94ec:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    94ee:	adds	r2, #16
    94f0:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    94f2:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    94f4:	add	r2, sp
    94f6:	ldr.w	r2, [r2, #-16]
    94fa:	lsr.w	r2, r2, r1
    94fe:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    9502:	bne.n	94e4 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    9504:	movs	r3, #0
    9506:	strb	r3, [r4, #15]
}
    9508:	add	sp, #20
    950a:	pop	{r4, r5, pc}
    950c:	.word	0x200141f0
    9510:	.word	0x402c0000

00009514 <waitDmaStatus()>:
static bool waitDmaStatus() {
    9514:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    9516:	ldr	r0, [pc, #32]	; (9538 <waitDmaStatus()+0x24>)
    9518:	bl	92b4 <yieldTimeout(bool (*)())>
    951c:	cbnz	r0, 9534 <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    951e:	ldr	r3, [pc, #28]	; (953c <waitDmaStatus()+0x28>)
    9520:	ldr	r2, [r3, #0]
    9522:	lsls	r2, r2, #30
    9524:	bpl.n	9532 <waitDmaStatus()+0x1e>
    9526:	ldr	r2, [r3, #0]
    9528:	ldr	r3, [pc, #20]	; (9540 <waitDmaStatus()+0x2c>)
    952a:	tst	r2, r3
    952c:	ite	eq
    952e:	moveq	r0, #1
    9530:	movne	r0, #0
}
    9532:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9534:	movs	r0, #0
    9536:	b.n	9532 <waitDmaStatus()+0x1e>
    9538:	.word	0x0000913d
    953c:	.word	0x200147f8
    9540:	.word	0x117f0000

00009544 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    9544:	push	{r3, r4, r5, r6, r7, lr}
    9546:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    9548:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    954a:	mov	r7, r0
    954c:	mov	r4, r1
    954e:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    9550:	bne.n	9554 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    9552:	cbnz	r5, 9566 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    9554:	ldr	r3, [pc, #96]	; (95b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    9556:	movs	r2, #37	; 0x25
    9558:	strb	r2, [r3, #0]
  m_errorLine = line;
    955a:	movw	r2, #501	; 0x1f5
    955e:	ldr	r3, [pc, #92]	; (95bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    9560:	str	r2, [r3, #0]
}
    9562:	movs	r0, #0
    9564:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    9566:	ldr	r0, [pc, #88]	; (95c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    9568:	bl	92b4 <yieldTimeout(bool (*)())>
    956c:	cbz	r0, 957c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    956e:	ldr	r3, [pc, #72]	; (95b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    9570:	movs	r2, #10
    9572:	strb	r2, [r3, #0]
  m_errorLine = line;
    9574:	mov.w	r2, #504	; 0x1f8
    9578:	ldr	r3, [pc, #64]	; (95bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    957a:	b.n	9560 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    957c:	ldr	r3, [pc, #68]	; (95c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    957e:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    9580:	ldr	r1, [pc, #68]	; (95c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    9582:	strb	r2, [r3, #0]
  m_irqstat = 0;
    9584:	ldr	r3, [pc, #68]	; (95cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    9586:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9588:	ldr	r3, [pc, #68]	; (95d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    958a:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    958c:	and.w	r3, r3, r5, lsl #16
    9590:	orr.w	r3, r3, #512	; 0x200
    9594:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9596:	ldr	r3, [pc, #60]	; (95d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    9598:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    959a:	ldr	r3, [pc, #60]	; (95d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    959c:	ldrb	r3, [r3, #0]
    959e:	cbnz	r3, 95a2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    95a0:	lsls	r4, r4, #9
    95a2:	mov	r1, r4
    95a4:	mov	r0, r7
    95a6:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    95aa:	cmp	r0, #0
    95ac:	beq.n	9562 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    95ae:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    95b2:	b.w	9514 <waitDmaStatus()>
    95b6:	nop
    95b8:	.word	0x2000230e
    95bc:	.word	0x2000dfd8
    95c0:	.word	0x000094a9
    95c4:	.word	0x20015534
    95c8:	.word	0x402c0000
    95cc:	.word	0x200147f8
    95d0:	.word	0x1fff0000
    95d4:	.word	0x117f0002
    95d8:	.word	0x20015472

000095dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    95dc:	push	{r3, r4, r5, r6, r7, lr}
    95de:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    95e0:	ldrb	r0, [r0, #8]
    95e2:	mov	r4, r1
    95e4:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    95e6:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    95e8:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    95ea:	bmi.n	960a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    95ec:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    95ee:	cmp	r4, r6
    95f0:	beq.n	9614 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    95f2:	ldr	r3, [r7, #0]
    95f4:	mov	r2, r5
    95f6:	mov	r1, r4
    95f8:	mov	r0, r7
    95fa:	ldr	r3, [r3, #16]
    95fc:	adds	r4, #1
    95fe:	add.w	r5, r5, #512	; 0x200
    9602:	blx	r3
    9604:	cmp	r0, #0
    9606:	bne.n	95ee <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    9608:	b.n	9626 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    960a:	lsls	r0, r2, #30
    960c:	beq.n	9632 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    960e:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9610:	cmp	r4, r6
    9612:	bne.n	9618 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    9614:	movs	r0, #1
    9616:	b.n	9628 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    9618:	ldr	r3, [r7, #0]
    961a:	mov	r2, r5
    961c:	mov	r1, r4
    961e:	mov	r0, r7
    9620:	ldr	r3, [r3, #16]
    9622:	blx	r3
    9624:	cbnz	r0, 962a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    9626:	movs	r0, #0
}
    9628:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    962a:	adds	r4, #1
    962c:	add.w	r5, r5, #512	; 0x200
    9630:	b.n	9610 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    9632:	ldr	r0, [pc, #24]	; (964c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    9634:	bl	9544 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9638:	cmp	r0, #0
    963a:	bne.n	9614 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    963c:	ldr	r3, [pc, #16]	; (9650 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    963e:	movs	r2, #12
    9640:	strb	r2, [r3, #0]
  m_errorLine = line;
    9642:	movw	r2, #929	; 0x3a1
    9646:	ldr	r3, [pc, #12]	; (9654 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    9648:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    964a:	b.n	9628 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    964c:	.word	0x123a0037
    9650:	.word	0x2000230e
    9654:	.word	0x2000dfd8

00009658 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9658:	push	{r3, r4, r5, r6, r7, lr}
    965a:	mov	r7, r0
    965c:	ldrb	r0, [r0, #8]
    965e:	mov	r4, r1
    9660:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9662:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9664:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    9666:	bmi.n	9686 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    9668:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    966a:	cmp	r4, r6
    966c:	beq.n	9690 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    966e:	ldr	r3, [r7, #0]
    9670:	mov	r2, r5
    9672:	mov	r1, r4
    9674:	mov	r0, r7
    9676:	ldr	r3, [r3, #36]	; 0x24
    9678:	adds	r4, #1
    967a:	add.w	r5, r5, #512	; 0x200
    967e:	blx	r3
    9680:	cmp	r0, #0
    9682:	bne.n	966a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    9684:	b.n	96a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    9686:	lsls	r0, r2, #30
    9688:	beq.n	96ae <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    968a:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    968c:	cmp	r4, r6
    968e:	bne.n	9694 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    9690:	movs	r0, #1
    9692:	b.n	96a4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    9694:	ldr	r3, [r7, #0]
    9696:	mov	r2, r5
    9698:	mov	r1, r4
    969a:	mov	r0, r7
    969c:	ldr	r3, [r3, #36]	; 0x24
    969e:	blx	r3
    96a0:	cbnz	r0, 96a6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    96a2:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    96a4:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    96a6:	adds	r4, #1
    96a8:	add.w	r5, r5, #512	; 0x200
    96ac:	b.n	968c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    96ae:	ldr	r0, [pc, #24]	; (96c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    96b0:	bl	9544 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    96b4:	cmp	r0, #0
    96b6:	bne.n	9690 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    96b8:	ldr	r3, [pc, #16]	; (96cc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    96ba:	movs	r2, #14
    96bc:	strb	r2, [r3, #0]
  m_errorLine = line;
    96be:	movw	r2, #1085	; 0x43d
    96c2:	ldr	r3, [pc, #12]	; (96d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    96c4:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    96c6:	b.n	96a4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    96c8:	.word	0x193a0027
    96cc:	.word	0x2000230e
    96d0:	.word	0x2000dfd8

000096d4 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    96d4:	ldr	r2, [pc, #88]	; (9730 <SdioCard::sectorCount()+0x5c>)
    96d6:	ldrb	r3, [r2, #0]
    96d8:	ands.w	r3, r3, #192	; 0xc0
    96dc:	bne.n	9710 <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    96de:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    96e0:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    96e2:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    96e6:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    96e8:	lsls	r0, r0, #2
    96ea:	orr.w	r0, r0, r3, lsl #10
    96ee:	ldrb	r3, [r2, #8]
    96f0:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    96f4:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    96f6:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    96f8:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    96fc:	adds	r0, #1
    96fe:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    9702:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9704:	orr.w	r3, r3, r1, lsr #7
    9708:	add	r3, r2
    970a:	subs	r3, #7
    970c:	lsls	r0, r3
    970e:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    9710:	cmp	r3, #64	; 0x40
    9712:	bne.n	972c <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9714:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9716:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9718:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    971a:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    971e:	add.w	r0, r0, r3, lsl #16
    9722:	ldrb	r3, [r2, #8]
    9724:	add.w	r0, r0, r3, lsl #8
    9728:	lsls	r0, r0, #10
    972a:	bx	lr
  } else {
    return 0;
    972c:	movs	r0, #0
}
    972e:	bx	lr
    9730:	.word	0x20015484

00009734 <SdioCard::isBusy()>:
    9734:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    9736:	lsls	r3, r3, #31
    9738:	bpl.n	974c <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    973a:	ldr	r3, [pc, #40]	; (9764 <SdioCard::isBusy()+0x30>)
    973c:	ldr	r3, [r3, #0]
    973e:	cbz	r3, 9742 <SdioCard::isBusy()+0xe>
    9740:	bx	r3
    9742:	ldr	r3, [pc, #36]	; (9768 <SdioCard::isBusy()+0x34>)
    9744:	ldrb	r0, [r3, #0]
    9746:	cbz	r0, 9762 <SdioCard::isBusy()+0x2e>
    9748:	b.w	94a8 <isBusyCMD13()>
    if (m_transferActive) {
    974c:	ldr	r3, [pc, #28]	; (976c <SdioCard::isBusy()+0x38>)
    974e:	ldrb	r3, [r3, #0]
    9750:	cbz	r3, 9756 <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    9752:	b.w	9170 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9756:	ldr	r3, [pc, #24]	; (9770 <SdioCard::isBusy()+0x3c>)
    9758:	ldr	r0, [r3, #36]	; 0x24
    975a:	eor.w	r0, r0, #16777216	; 0x1000000
    975e:	ubfx	r0, r0, #24, #1
}
    9762:	bx	lr
    9764:	.word	0x200147f4
    9768:	.word	0x20015470
    976c:	.word	0x20015473
    9770:	.word	0x402c0000

00009774 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9774:	push	{r3, r4, r5, lr}
    9776:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    9778:	ldr	r2, [pc, #160]	; (981c <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    977a:	ldrb	r3, [r2, #10]
    977c:	ands.w	r4, r3, #64	; 0x40
    9780:	bne.n	97a8 <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    9782:	and.w	r3, r3, #63	; 0x3f
    9786:	ldrb	r2, [r2, #11]
    9788:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    978a:	orr.w	r3, r3, r2, lsr #7
    978e:	adds	r2, r5, #1
    9790:	orrs	r2, r1
    9792:	tst	r3, r2
    9794:	beq.n	97a8 <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    9796:	ldr	r3, [pc, #136]	; (9820 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9798:	movs	r2, #39	; 0x27
    979a:	strb	r2, [r3, #0]
  m_errorLine = line;
    979c:	movw	r2, #770	; 0x302
    97a0:	ldr	r3, [pc, #128]	; (9824 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    97a2:	str	r2, [r3, #0]
}
    97a4:	mov	r0, r4
    97a6:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    97a8:	ldr	r3, [pc, #124]	; (9828 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    97aa:	ldrb	r3, [r3, #0]
    97ac:	cbnz	r3, 97b2 <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    97ae:	lsls	r1, r1, #9
    lastSector <<= 9;
    97b0:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    97b2:	ldr	r0, [pc, #120]	; (982c <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    97b4:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    97b8:	mov	r4, r0
    97ba:	cbnz	r0, 97ca <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    97bc:	ldr	r3, [pc, #96]	; (9820 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    97be:	movs	r2, #15
    97c0:	strb	r2, [r3, #0]
  m_errorLine = line;
    97c2:	movw	r2, #778	; 0x30a
    97c6:	ldr	r3, [pc, #92]	; (9824 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    97c8:	b.n	97a2 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    97ca:	mov	r1, r5
    97cc:	ldr	r0, [pc, #96]	; (9830 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    97ce:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    97d2:	mov	r4, r0
    97d4:	cbnz	r0, 97e4 <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    97d6:	ldr	r3, [pc, #72]	; (9820 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    97d8:	movs	r2, #16
    97da:	strb	r2, [r3, #0]
  m_errorLine = line;
    97dc:	movw	r2, #781	; 0x30d
    97e0:	ldr	r3, [pc, #64]	; (9824 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    97e2:	b.n	97a2 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    97e4:	movs	r1, #0
    97e6:	ldr	r0, [pc, #76]	; (9834 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    97e8:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    97ec:	mov	r4, r0
    97ee:	cbnz	r0, 97fe <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    97f0:	ldr	r3, [pc, #44]	; (9820 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    97f2:	movs	r2, #17
    97f4:	strb	r2, [r3, #0]
  m_errorLine = line;
    97f6:	mov.w	r2, #784	; 0x310
    97fa:	ldr	r3, [pc, #40]	; (9824 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    97fc:	b.n	97a2 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    97fe:	ldr	r0, [pc, #56]	; (9838 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    9800:	bl	9290 <waitTimeout(bool (*)())>
    9804:	cmp	r0, #0
    9806:	beq.n	97a4 <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    9808:	ldr	r3, [pc, #20]	; (9820 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    980a:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    980c:	movs	r4, #0
  m_errorCode = code;
    980e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9810:	movw	r2, #787	; 0x313
    9814:	ldr	r3, [pc, #12]	; (9824 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9816:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9818:	b.n	97a4 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    981a:	nop
    981c:	.word	0x20015484
    9820:	.word	0x2000230e
    9824:	.word	0x2000dfd8
    9828:	.word	0x20015472
    982c:	.word	0x201a0000
    9830:	.word	0x211a0000
    9834:	.word	0x261b0000
    9838:	.word	0x000094a9

0000983c <waitTransferComplete()>:
static bool waitTransferComplete() {
    983c:	push	{r4, lr}
  if (!m_transferActive) {
    983e:	ldr	r4, [pc, #60]	; (987c <waitTransferComplete()+0x40>)
    9840:	ldrb	r3, [r4, #0]
    9842:	cbnz	r3, 9848 <waitTransferComplete()+0xc>
    return true;
    9844:	movs	r0, #1
}
    9846:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    9848:	ldr	r0, [pc, #52]	; (9880 <waitTransferComplete()+0x44>)
    984a:	bl	9290 <waitTimeout(bool (*)())>
  m_transferActive = false;
    984e:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    9850:	ldr	r2, [pc, #48]	; (9884 <waitTransferComplete()+0x48>)
  m_transferActive = false;
    9852:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    9854:	ldr	r1, [r2, #48]	; 0x30
    9856:	ldr	r3, [pc, #48]	; (9888 <waitTransferComplete()+0x4c>)
    9858:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    985a:	ldr	r1, [r3, #0]
    985c:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    985e:	cbnz	r0, 9868 <waitTransferComplete()+0x2c>
    9860:	ldr	r2, [r3, #0]
    9862:	ldr	r3, [pc, #40]	; (988c <waitTransferComplete()+0x50>)
    9864:	tst	r2, r3
    9866:	beq.n	9844 <waitTransferComplete()+0x8>
  m_errorCode = code;
    9868:	ldr	r3, [pc, #36]	; (9890 <waitTransferComplete()+0x54>)
    986a:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    986c:	movs	r0, #0
  m_errorCode = code;
    986e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9870:	movw	r2, #634	; 0x27a
    9874:	ldr	r3, [pc, #28]	; (9894 <waitTransferComplete()+0x58>)
    9876:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9878:	b.n	9846 <waitTransferComplete()+0xa>
    987a:	nop
    987c:	.word	0x20015473
    9880:	.word	0x00009171
    9884:	.word	0x402c0000
    9888:	.word	0x200147f8
    988c:	.word	0x117f0000
    9890:	.word	0x2000230e
    9894:	.word	0x2000dfd8

00009898 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9898:	push	{r4, r5, r6, r7, lr}
    989a:	ldrb	r5, [r0, #8]
    989c:	sub.w	sp, sp, #516	; 0x204
    98a0:	mov	r4, r0
    98a2:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    98a4:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    98a8:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    98aa:	beq.n	98e4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    98ac:	lsls	r3, r2, #30
    98ae:	beq.n	98be <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    98b0:	mov	r1, r6
      ptr = aligned;
    98b2:	mov	r6, sp
      memcpy(aligned, src, 512);
    98b4:	mov.w	r2, #512	; 0x200
    98b8:	mov	r0, sp
    98ba:	bl	a218 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    98be:	movs	r3, #1
    98c0:	mov	r2, r6
    98c2:	mov	r1, r7
    98c4:	ldr	r0, [pc, #104]	; (9930 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    98c6:	bl	9544 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    98ca:	mov	r5, r0
    98cc:	cbnz	r0, 98dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    98ce:	ldr	r3, [pc, #100]	; (9934 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    98d0:	movs	r2, #13
    98d2:	strb	r2, [r3, #0]
  m_errorLine = line;
    98d4:	movw	r2, #1041	; 0x411
    98d8:	ldr	r3, [pc, #92]	; (9938 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    98da:	str	r2, [r3, #0]
}
    98dc:	mov	r0, r5
    98de:	add.w	sp, sp, #516	; 0x204
    98e2:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    98e4:	bl	983c <waitTransferComplete()>
    98e8:	cmp	r0, #0
    98ea:	beq.n	98dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    98ec:	ldrb	r3, [r4, #9]
    98ee:	cmp	r3, #2
    98f0:	bne.n	98f8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    98f2:	ldr	r3, [r4, #4]
    98f4:	cmp	r3, r7
    98f6:	beq.n	9918 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    98f8:	ldr	r3, [r4, #0]
    98fa:	mov	r0, r4
    98fc:	ldr	r3, [r3, #32]
    98fe:	blx	r3
    9900:	cmp	r0, #0
    9902:	beq.n	98dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    9904:	ldr	r3, [r4, #0]
    9906:	mov	r1, r7
    9908:	mov	r0, r4
    990a:	ldr	r3, [r3, #96]	; 0x60
    990c:	blx	r3
    990e:	cmp	r0, #0
    9910:	beq.n	98dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    9912:	movs	r3, #2
      m_curSector = sector;
    9914:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    9916:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    9918:	ldr	r3, [r4, #0]
    991a:	mov	r1, r6
    991c:	mov	r0, r4
    991e:	ldr	r3, [r3, #92]	; 0x5c
    9920:	blx	r3
    9922:	cmp	r0, #0
    9924:	beq.n	98dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    9926:	ldr	r3, [r4, #4]
  return true;
    9928:	mov	r5, r0
    m_curSector++;
    992a:	adds	r3, #1
    992c:	str	r3, [r4, #4]
    992e:	b.n	98dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    9930:	.word	0x183a0001
    9934:	.word	0x2000230e
    9938:	.word	0x2000dfd8

0000993c <SdioCard::readStop()>:
bool SdioCard::readStop() {
    993c:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    993e:	ldr	r4, [pc, #92]	; (999c <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9940:	movs	r1, #0
    9942:	ldr	r0, [pc, #92]	; (99a0 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9944:	ldr	r3, [r4, #40]	; 0x28
    9946:	bic.w	r3, r3, #65536	; 0x10000
    994a:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    994c:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9950:	mov	r5, r0
    9952:	cbnz	r0, 9966 <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    9954:	ldr	r3, [pc, #76]	; (99a4 <SdioCard::readStop()+0x68>)
    9956:	movs	r2, #9
    9958:	strb	r2, [r3, #0]
  m_errorLine = line;
    995a:	movw	r2, #573	; 0x23d
    995e:	ldr	r3, [pc, #72]	; (99a8 <SdioCard::readStop()+0x6c>)
    9960:	str	r2, [r3, #0]
}
    9962:	mov	r0, r5
    9964:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    9966:	ldr	r0, [pc, #68]	; (99ac <SdioCard::readStop()+0x70>)
    9968:	bl	92b4 <yieldTimeout(bool (*)())>
    996c:	cbz	r0, 9980 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    996e:	ldr	r3, [pc, #52]	; (99a4 <SdioCard::readStop()+0x68>)
    9970:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9972:	movs	r5, #0
  m_errorCode = code;
    9974:	strb	r2, [r3, #0]
  m_errorLine = line;
    9976:	mov.w	r2, #576	; 0x240
    997a:	ldr	r3, [pc, #44]	; (99a8 <SdioCard::readStop()+0x6c>)
    997c:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    997e:	b.n	9962 <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9980:	ldr	r3, [r4, #36]	; 0x24
    9982:	lsls	r3, r3, #30
    9984:	bpl.n	9962 <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    9986:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9988:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    998a:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    998c:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9990:	orr.w	r2, r2, #67108864	; 0x4000000
    9994:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    9996:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    9998:	str	r3, [r4, #40]	; 0x28
    999a:	b.n	9962 <SdioCard::readStop()+0x26>
    999c:	.word	0x402c0000
    99a0:	.word	0x0cdb0000
    99a4:	.word	0x2000230e
    99a8:	.word	0x2000dfd8
    99ac:	.word	0x00009129

000099b0 <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    99b0:	push	{r4, r5, r6, lr}
    99b2:	mov	r4, r1
  if (!waitTransferComplete()) {
    99b4:	bl	983c <waitTransferComplete()>
    99b8:	mov	r5, r0
    99ba:	cbz	r0, 99f4 <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    99bc:	ldr	r3, [pc, #100]	; (9a24 <SdioCard::writeData(unsigned char const*)+0x74>)
    99be:	ldr	r2, [r3, #36]	; 0x24
    99c0:	lsls	r2, r2, #23
    99c2:	bmi.n	99d4 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    99c4:	ldr	r2, [r3, #40]	; 0x28
    99c6:	bic.w	r2, r2, #65536	; 0x10000
    99ca:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    99cc:	ldr	r2, [r3, #40]	; 0x28
    99ce:	orr.w	r2, r2, #131072	; 0x20000
    99d2:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    99d4:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    99d6:	ldr	r0, [pc, #80]	; (9a28 <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    99d8:	orr.w	r2, r2, #65536	; 0x10000
    99dc:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    99de:	bl	9290 <waitTimeout(bool (*)())>
    99e2:	cbz	r0, 99f8 <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    99e4:	ldr	r3, [pc, #68]	; (9a2c <SdioCard::writeData(unsigned char const*)+0x7c>)
    99e6:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    99e8:	movs	r5, #0
  m_errorCode = code;
    99ea:	strb	r2, [r3, #0]
  m_errorLine = line;
    99ec:	mov.w	r2, #1016	; 0x3f8
    99f0:	ldr	r3, [pc, #60]	; (9a30 <SdioCard::writeData(unsigned char const*)+0x80>)
    99f2:	str	r2, [r3, #0]
}
    99f4:	mov	r0, r5
    99f6:	pop	{r4, r5, r6, pc}
    99f8:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    99fc:	ldr	r2, [pc, #36]	; (9a24 <SdioCard::writeData(unsigned char const*)+0x74>)
    99fe:	ldr	r3, [r2, #36]	; 0x24
    9a00:	lsls	r3, r3, #21
    9a02:	bpl.n	99fe <SdioCard::writeData(unsigned char const*)+0x4e>
    9a04:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9a06:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    9a0a:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9a0e:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    9a10:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9a12:	bne.n	9a0a <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    9a14:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9a16:	cmp	r4, r1
    9a18:	bne.n	99fe <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    9a1a:	ldr	r3, [pc, #24]	; (9a34 <SdioCard::writeData(unsigned char const*)+0x84>)
    9a1c:	movs	r2, #1
    9a1e:	strb	r2, [r3, #0]
  return true;
    9a20:	b.n	99f4 <SdioCard::writeData(unsigned char const*)+0x44>
    9a22:	nop
    9a24:	.word	0x402c0000
    9a28:	.word	0x0000915d
    9a2c:	.word	0x2000230e
    9a30:	.word	0x2000dfd8
    9a34:	.word	0x20015473

00009a38 <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9a38:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9a3a:	ldr	r0, [pc, #80]	; (9a8c <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    9a3c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9a3e:	bl	92b4 <yieldTimeout(bool (*)())>
    9a42:	cbz	r0, 9a56 <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    9a44:	ldr	r3, [pc, #72]	; (9a90 <SdioCard::writeStart(unsigned long)+0x58>)
    9a46:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9a48:	movs	r0, #0
  m_errorCode = code;
    9a4a:	strb	r2, [r3, #0]
  m_errorLine = line;
    9a4c:	movw	r2, #1099	; 0x44b
    9a50:	ldr	r3, [pc, #64]	; (9a94 <SdioCard::writeStart(unsigned long)+0x5c>)
    9a52:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    9a54:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9a56:	ldr	r3, [pc, #64]	; (9a98 <SdioCard::writeStart(unsigned long)+0x60>)
    9a58:	ldr	r2, [r3, #40]	; 0x28
    9a5a:	bic.w	r2, r2, #65536	; 0x10000
    9a5e:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9a60:	mov.w	r2, #512	; 0x200
    9a64:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9a66:	ldr	r3, [pc, #52]	; (9a9c <SdioCard::writeStart(unsigned long)+0x64>)
    9a68:	ldrb	r3, [r3, #0]
    9a6a:	cbnz	r3, 9a6e <SdioCard::writeStart(unsigned long)+0x36>
    9a6c:	lsls	r4, r4, #9
    9a6e:	mov	r1, r4
    9a70:	ldr	r0, [pc, #44]	; (9aa0 <SdioCard::writeStart(unsigned long)+0x68>)
    9a72:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9a76:	cmp	r0, #0
    9a78:	bne.n	9a54 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    9a7a:	ldr	r3, [pc, #20]	; (9a90 <SdioCard::writeStart(unsigned long)+0x58>)
    9a7c:	movs	r2, #14
    9a7e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9a80:	movw	r2, #1111	; 0x457
    9a84:	ldr	r3, [pc, #12]	; (9a94 <SdioCard::writeStart(unsigned long)+0x5c>)
    9a86:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    9a88:	b.n	9a54 <SdioCard::writeStart(unsigned long)+0x1c>
    9a8a:	nop
    9a8c:	.word	0x000094a9
    9a90:	.word	0x2000230e
    9a94:	.word	0x2000dfd8
    9a98:	.word	0x402c0000
    9a9c:	.word	0x20015472
    9aa0:	.word	0x193a0020

00009aa4 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9aa4:	push	{r3, r4, r5, lr}
    9aa6:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    9aa8:	ldr	r0, [pc, #96]	; (9b0c <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9aaa:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    9aac:	bl	9290 <waitTimeout(bool (*)())>
    9ab0:	cbz	r0, 9ac4 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    9ab2:	ldr	r3, [pc, #92]	; (9b10 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9ab4:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9ab6:	movs	r0, #0
  m_errorCode = code;
    9ab8:	strb	r2, [r3, #0]
  m_errorLine = line;
    9aba:	mov.w	r2, #408	; 0x198
    9abe:	ldr	r3, [pc, #84]	; (9b14 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9ac0:	str	r2, [r3, #0]
}
    9ac2:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    9ac4:	ldr	r3, [pc, #80]	; (9b18 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    9ac6:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9ac8:	mov	r1, r4
  m_dmaBusy = true;
    9aca:	strb	r2, [r3, #0]
  m_irqstat = 0;
    9acc:	ldr	r3, [pc, #76]	; (9b1c <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9ace:	ldr	r2, [pc, #80]	; (9b20 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    9ad0:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    9ad2:	ldr	r3, [pc, #80]	; (9b24 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9ad4:	ldr	r0, [pc, #80]	; (9b28 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    9ad6:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9ad8:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9ada:	ldr	r2, [pc, #80]	; (9b2c <cardCMD6(unsigned long, unsigned char*)+0x88>)
    9adc:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9ade:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9ae2:	cbnz	r0, 9af4 <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    9ae4:	ldr	r3, [pc, #40]	; (9b10 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9ae6:	movs	r2, #4
    9ae8:	strb	r2, [r3, #0]
  m_errorLine = line;
    9aea:	movw	r2, #415	; 0x19f
    9aee:	ldr	r3, [pc, #36]	; (9b14 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9af0:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    9af2:	b.n	9ac2 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    9af4:	bl	9514 <waitDmaStatus()>
    9af8:	cmp	r0, #0
    9afa:	bne.n	9ac2 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    9afc:	ldr	r3, [pc, #16]	; (9b10 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9afe:	movs	r2, #37	; 0x25
    9b00:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b02:	mov.w	r2, #418	; 0x1a2
    9b06:	ldr	r3, [pc, #12]	; (9b14 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9b08:	b.n	9af0 <cardCMD6(unsigned long, unsigned char*)+0x4c>
    9b0a:	nop
    9b0c:	.word	0x000094a9
    9b10:	.word	0x2000230e
    9b14:	.word	0x2000dfd8
    9b18:	.word	0x20015534
    9b1c:	.word	0x200147f8
    9b20:	.word	0x00010040
    9b24:	.word	0x402c0000
    9b28:	.word	0x063a0011
    9b2c:	.word	0x117f0002

00009b30 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    9b30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    9b34:	movs	r4, #0
  m_initDone = false;
    9b36:	ldr	r7, [pc, #524]	; (9d44 <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    9b38:	ldr	r5, [pc, #524]	; (9d48 <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9b3a:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    9b3c:	ldr.w	r8, [pc, #584]	; 9d88 <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    9b40:	ldr	r6, [pc, #520]	; (9d4c <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    9b42:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    9b44:	strb	r4, [r0, #9]
  m_initDone = false;
    9b46:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    9b48:	strb	r4, [r5, #0]
  m_highCapacity = false;
    9b4a:	strb.w	r4, [r8]
  m_version2 = false;
    9b4e:	strb	r4, [r6, #0]
  initSDHC();
    9b50:	bl	9330 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9b54:	mov	r1, r4
    9b56:	mov	r0, r4
    9b58:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9b5c:	mov	r4, r0
    9b5e:	cbnz	r0, 9b74 <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    9b60:	movs	r3, #1
  m_errorLine = line;
    9b62:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    9b66:	strb	r3, [r5, #0]
  m_errorLine = line;
    9b68:	ldr	r3, [pc, #484]	; (9d50 <SdioCard::begin(SdioConfig)+0x220>)
    9b6a:	str	r2, [r3, #0]
}
    9b6c:	mov	r0, r4
    9b6e:	add	sp, #68	; 0x44
    9b70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b74:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9b76:	ldr.w	r9, [pc, #532]	; 9d8c <SdioCard::begin(SdioConfig)+0x25c>
    9b7a:	mov.w	r1, #426	; 0x1aa
    9b7e:	mov	r0, r9
    9b80:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9b84:	cbz	r0, 9ba8 <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    9b86:	ldr	r3, [pc, #460]	; (9d54 <SdioCard::begin(SdioConfig)+0x224>)
    9b88:	ldr	r3, [r3, #16]
    9b8a:	cmp.w	r3, #426	; 0x1aa
    9b8e:	beq.n	9ba0 <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    9b90:	movs	r3, #6
  m_errorLine = line;
    9b92:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    9b96:	strb	r3, [r5, #0]
  m_errorLine = line;
    9b98:	ldr	r3, [pc, #436]	; (9d50 <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    9b9a:	movs	r4, #0
  m_errorLine = line;
    9b9c:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    9b9e:	b.n	9b6c <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    9ba0:	movs	r3, #1
    9ba2:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9ba4:	ldr	r6, [pc, #432]	; (9d58 <SdioCard::begin(SdioConfig)+0x228>)
    9ba6:	b.n	9bc8 <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9ba8:	subs	r4, #1
    9baa:	bne.n	9b7a <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    9bac:	ldrb	r3, [r6, #0]
    9bae:	cmp	r3, #0
    9bb0:	bne.n	9ba4 <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    9bb2:	bl	9330 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    9bb6:	mov	r1, r4
    9bb8:	mov	r0, r4
    9bba:	bl	9420 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9bbe:	ldrb	r3, [r6, #0]
    9bc0:	cmp	r3, #0
    9bc2:	bne.n	9ba4 <SdioCard::begin(SdioConfig)+0x74>
    9bc4:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    9bc8:	bl	b714 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9bcc:	ldr.w	r9, [pc, #428]	; 9d7c <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    9bd0:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9bd2:	ldr.w	sl, [pc, #444]	; 9d90 <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9bd6:	ldr.w	fp, [pc, #444]	; 9d94 <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9bda:	movs	r1, #0
    9bdc:	mov	r0, r9
    9bde:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9be2:	cbnz	r0, 9bf0 <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    9be4:	movs	r3, #23
  m_errorLine = line;
    9be6:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    9bea:	strb	r3, [r5, #0]
  m_errorLine = line;
    9bec:	ldr	r3, [pc, #352]	; (9d50 <SdioCard::begin(SdioConfig)+0x220>)
    9bee:	b.n	9b9a <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9bf0:	mov	r1, r6
    9bf2:	mov	r0, sl
    9bf4:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9bf8:	cmp	r0, #0
    9bfa:	beq.n	9be4 <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    9bfc:	bl	b714 <micros>
    9c00:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9c02:	cmp	r0, fp
    9c04:	bhi.n	9be4 <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9c06:	ldr	r3, [pc, #332]	; (9d54 <SdioCard::begin(SdioConfig)+0x224>)
    9c08:	ldr	r2, [r3, #16]
    9c0a:	cmp	r2, #0
    9c0c:	bge.n	9bda <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    9c0e:	ldr	r1, [r3, #16]
    9c10:	ldr	r2, [pc, #328]	; (9d5c <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9c12:	ldr	r0, [pc, #332]	; (9d60 <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    9c14:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9c16:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    9c18:	ldr	r3, [r3, #16]
    9c1a:	lsls	r2, r3, #1
    m_highCapacity = true;
    9c1c:	itt	mi
    9c1e:	movmi	r3, #1
    9c20:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9c24:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9c28:	mov	r4, r0
    9c2a:	cbnz	r0, 9c38 <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    9c2c:	movs	r3, #2
  m_errorLine = line;
    9c2e:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    9c32:	strb	r3, [r5, #0]
  m_errorLine = line;
    9c34:	ldr	r3, [pc, #280]	; (9d50 <SdioCard::begin(SdioConfig)+0x220>)
    9c36:	b.n	9b6a <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    9c38:	movs	r1, #0
    9c3a:	ldr	r0, [pc, #296]	; (9d64 <SdioCard::begin(SdioConfig)+0x234>)
    9c3c:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9c40:	mov	r4, r0
    9c42:	cbnz	r0, 9c50 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    9c44:	movs	r3, #3
  m_errorLine = line;
    9c46:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    9c4a:	strb	r3, [r5, #0]
  m_errorLine = line;
    9c4c:	ldr	r3, [pc, #256]	; (9d50 <SdioCard::begin(SdioConfig)+0x220>)
    9c4e:	b.n	9b6a <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9c50:	ldr	r6, [pc, #256]	; (9d54 <SdioCard::begin(SdioConfig)+0x224>)
    9c52:	ldr.w	r8, [pc, #324]	; 9d98 <SdioCard::begin(SdioConfig)+0x268>
    9c56:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9c58:	ldr	r1, [pc, #268]	; (9d68 <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9c5a:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9c5c:	ldr	r0, [pc, #268]	; (9d6c <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9c5e:	lsls	r3, r3, #16
    9c60:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9c64:	bl	94bc <readReg16(unsigned long, void*)>
    9c68:	mov	r4, r0
    9c6a:	cbnz	r0, 9c78 <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    9c6c:	movs	r3, #7
  m_errorLine = line;
    9c6e:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    9c72:	strb	r3, [r5, #0]
  m_errorLine = line;
    9c74:	ldr	r3, [pc, #216]	; (9d50 <SdioCard::begin(SdioConfig)+0x220>)
    9c76:	b.n	9b6a <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9c78:	ldr	r1, [pc, #244]	; (9d70 <SdioCard::begin(SdioConfig)+0x240>)
    9c7a:	ldr	r0, [pc, #248]	; (9d74 <SdioCard::begin(SdioConfig)+0x244>)
    9c7c:	bl	94bc <readReg16(unsigned long, void*)>
    9c80:	mov	r4, r0
    9c82:	cbnz	r0, 9c90 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    9c84:	movs	r3, #8
  m_errorLine = line;
    9c86:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    9c8a:	strb	r3, [r5, #0]
  m_errorLine = line;
    9c8c:	ldr	r3, [pc, #192]	; (9d50 <SdioCard::begin(SdioConfig)+0x220>)
    9c8e:	b.n	9b6a <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9c90:	ldr.w	r1, [r8]
    9c94:	ldr	r0, [pc, #224]	; (9d78 <SdioCard::begin(SdioConfig)+0x248>)
    9c96:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9c9a:	mov	r4, r0
    9c9c:	cbnz	r0, 9caa <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    9c9e:	movs	r3, #5
  m_errorLine = line;
    9ca0:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    9ca4:	strb	r3, [r5, #0]
  m_errorLine = line;
    9ca6:	ldr	r3, [pc, #168]	; (9d50 <SdioCard::begin(SdioConfig)+0x220>)
    9ca8:	b.n	9b6a <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9caa:	ldr.w	r1, [r8]
    9cae:	ldr	r0, [pc, #204]	; (9d7c <SdioCard::begin(SdioConfig)+0x24c>)
    9cb0:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9cb4:	cbz	r0, 9cfe <SdioCard::begin(SdioConfig)+0x1ce>
    9cb6:	movs	r1, #2
    9cb8:	ldr	r0, [pc, #196]	; (9d80 <SdioCard::begin(SdioConfig)+0x250>)
    9cba:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9cbe:	mov	r4, r0
    9cc0:	cbz	r0, 9cfe <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9cc2:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9cc4:	mov	r1, sp
    9cc6:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9cca:	bic.w	r3, r3, #6
    9cce:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9cd0:	ldr	r3, [r6, #40]	; 0x28
    9cd2:	orr.w	r3, r3, #2
    9cd6:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9cd8:	mov.w	r3, #1048592	; 0x100010
    9cdc:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9cde:	bl	9aa4 <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9ce2:	cbnz	r0, 9d0a <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    9ce4:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    9ce8:	movs	r0, #5
    9cea:	bl	90e0 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    9cee:	mov	r0, r2
    9cf0:	bl	9188 <setSdclk(unsigned long)>
  if (enable) {
    9cf4:	bl	9300 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    9cf8:	movs	r3, #1
    9cfa:	strb	r3, [r7, #0]
  return true;
    9cfc:	b.n	9b6c <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    9cfe:	movs	r3, #20
  m_errorLine = line;
    9d00:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    9d04:	strb	r3, [r5, #0]
  m_errorLine = line;
    9d06:	ldr	r3, [pc, #72]	; (9d50 <SdioCard::begin(SdioConfig)+0x220>)
    9d08:	b.n	9b9a <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9d0a:	ldrb.w	r3, [sp, #13]
    9d0e:	lsls	r3, r3, #30
    9d10:	bpl.n	9ce4 <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    9d12:	ldr	r6, [pc, #60]	; (9d50 <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9d14:	mov	r1, sp
    9d16:	ldr	r0, [pc, #108]	; (9d84 <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    9d18:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    9d1c:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9d20:	bl	9aa4 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    9d24:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    9d28:	cbz	r0, 9d32 <SdioCard::begin(SdioConfig)+0x202>
    9d2a:	and.w	r3, r3, #15
    9d2e:	cmp	r3, #1
    9d30:	beq.n	9d3c <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    9d32:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    9d36:	str.w	r8, [r6]
    9d3a:	b.n	9ce4 <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    9d3c:	movw	r2, #50000	; 0xc350
    9d40:	b.n	9ce8 <SdioCard::begin(SdioConfig)+0x1b8>
    9d42:	nop
    9d44:	.word	0x20015470
    9d48:	.word	0x2000230e
    9d4c:	.word	0x20015471
    9d50:	.word	0x2000dfd8
    9d54:	.word	0x402c0000
    9d58:	.word	0x40300000
    9d5c:	.word	0x200141ec
    9d60:	.word	0x02090000
    9d64:	.word	0x031a0000
    9d68:	.word	0x20015484
    9d6c:	.word	0x09090000
    9d70:	.word	0x20015474
    9d74:	.word	0x0a090000
    9d78:	.word	0x071b0000
    9d7c:	.word	0x371a0000
    9d80:	.word	0x061a0000
    9d84:	.word	0x80fffff1
    9d88:	.word	0x20015472
    9d8c:	.word	0x081a0000
    9d90:	.word	0x29020000
    9d94:	.word	0x000f4240
    9d98:	.word	0x200141f0

00009d9c <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    9d9c:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9d9e:	ldr	r3, [pc, #148]	; (9e34 <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    9da0:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9da2:	ldr	r2, [r3, #36]	; 0x24
    9da4:	lsls	r0, r2, #22
    9da6:	bmi.n	9dc4 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9da8:	ldr	r2, [r3, #40]	; 0x28
    9daa:	bic.w	r2, r2, #65536	; 0x10000
    9dae:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    9db0:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9db2:	ldr	r2, [r3, #40]	; 0x28
    9db4:	orr.w	r2, r2, #131072	; 0x20000
    9db8:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9dba:	ldr	r2, [r3, #40]	; 0x28
    9dbc:	orr.w	r2, r2, #65536	; 0x10000
    9dc0:	str	r2, [r3, #40]	; 0x28
    interrupts();
    9dc2:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    9dc4:	ldr	r0, [pc, #112]	; (9e38 <SdioCard::readData(unsigned char*)+0x9c>)
    9dc6:	bl	9290 <waitTimeout(bool (*)())>
    9dca:	cbz	r0, 9dde <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    9dcc:	ldr	r3, [pc, #108]	; (9e3c <SdioCard::readData(unsigned char*)+0xa0>)
    9dce:	movs	r2, #26
    9dd0:	strb	r2, [r3, #0]
  m_errorLine = line;
    9dd2:	movw	r2, #854	; 0x356
    9dd6:	ldr	r3, [pc, #104]	; (9e40 <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9dd8:	movs	r0, #0
  m_errorLine = line;
    9dda:	str	r2, [r3, #0]
}
    9ddc:	pop	{r3, r4, r5, pc}
    9dde:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9de2:	ldr	r5, [pc, #80]	; (9e34 <SdioCard::readData(unsigned char*)+0x98>)
    9de4:	ldr	r3, [r5, #36]	; 0x24
    9de6:	lsls	r1, r3, #20
    9de8:	bpl.n	9de4 <SdioCard::readData(unsigned char*)+0x48>
    9dea:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9dec:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    9df0:	ldr	r0, [r5, #32]
    9df2:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9df6:	cmp	r3, r1
    9df8:	bne.n	9df0 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    9dfa:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9dfc:	cmp	r4, r2
    9dfe:	bne.n	9de4 <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    9e00:	ldr	r0, [pc, #64]	; (9e44 <SdioCard::readData(unsigned char*)+0xa8>)
    9e02:	bl	9290 <waitTimeout(bool (*)())>
    9e06:	cbz	r0, 9e16 <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    9e08:	ldr	r3, [pc, #48]	; (9e3c <SdioCard::readData(unsigned char*)+0xa0>)
    9e0a:	movs	r2, #29
    9e0c:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e0e:	movw	r2, #865	; 0x361
    9e12:	ldr	r3, [pc, #44]	; (9e40 <SdioCard::readData(unsigned char*)+0xa4>)
    9e14:	b.n	9dd8 <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    9e16:	ldr	r2, [r5, #48]	; 0x30
    9e18:	ldr	r3, [pc, #44]	; (9e48 <SdioCard::readData(unsigned char*)+0xac>)
    9e1a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9e1c:	ldr	r2, [r3, #0]
    9e1e:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9e20:	ldr	r2, [r3, #0]
    9e22:	lsls	r2, r2, #30
    9e24:	bpl.n	9ddc <SdioCard::readData(unsigned char*)+0x40>
    9e26:	ldr	r2, [r3, #0]
    9e28:	ldr	r3, [pc, #32]	; (9e4c <SdioCard::readData(unsigned char*)+0xb0>)
    9e2a:	tst	r2, r3
    9e2c:	ite	eq
    9e2e:	moveq	r0, #1
    9e30:	movne	r0, #0
    9e32:	b.n	9ddc <SdioCard::readData(unsigned char*)+0x40>
    9e34:	.word	0x402c0000
    9e38:	.word	0x00009149
    9e3c:	.word	0x2000230e
    9e40:	.word	0x2000dfd8
    9e44:	.word	0x00009171
    9e48:	.word	0x200147f8
    9e4c:	.word	0x117f0000

00009e50 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9e50:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9e52:	ldr	r0, [pc, #80]	; (9ea4 <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    9e54:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9e56:	bl	92b4 <yieldTimeout(bool (*)())>
    9e5a:	cbz	r0, 9e6e <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    9e5c:	ldr	r3, [pc, #72]	; (9ea8 <SdioCard::readStart(unsigned long)+0x58>)
    9e5e:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9e60:	movs	r0, #0
  m_errorCode = code;
    9e62:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e64:	movw	r2, #945	; 0x3b1
    9e68:	ldr	r3, [pc, #64]	; (9eac <SdioCard::readStart(unsigned long)+0x5c>)
    9e6a:	str	r2, [r3, #0]
}
    9e6c:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9e6e:	ldr	r3, [pc, #64]	; (9eb0 <SdioCard::readStart(unsigned long)+0x60>)
    9e70:	ldr	r2, [r3, #40]	; 0x28
    9e72:	orr.w	r2, r2, #65536	; 0x10000
    9e76:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9e78:	mov.w	r2, #512	; 0x200
    9e7c:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9e7e:	ldr	r3, [pc, #52]	; (9eb4 <SdioCard::readStart(unsigned long)+0x64>)
    9e80:	ldrb	r3, [r3, #0]
    9e82:	cbnz	r3, 9e86 <SdioCard::readStart(unsigned long)+0x36>
    9e84:	lsls	r4, r4, #9
    9e86:	mov	r1, r4
    9e88:	ldr	r0, [pc, #44]	; (9eb8 <SdioCard::readStart(unsigned long)+0x68>)
    9e8a:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9e8e:	cmp	r0, #0
    9e90:	bne.n	9e6c <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    9e92:	ldr	r3, [pc, #20]	; (9ea8 <SdioCard::readStart(unsigned long)+0x58>)
    9e94:	movs	r2, #12
    9e96:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e98:	movw	r2, #957	; 0x3bd
    9e9c:	ldr	r3, [pc, #12]	; (9eac <SdioCard::readStart(unsigned long)+0x5c>)
    9e9e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    9ea0:	b.n	9e6c <SdioCard::readStart(unsigned long)+0x1c>
    9ea2:	nop
    9ea4:	.word	0x000094a9
    9ea8:	.word	0x2000230e
    9eac:	.word	0x2000dfd8
    9eb0:	.word	0x402c0000
    9eb4:	.word	0x20015472
    9eb8:	.word	0x123a0030

00009ebc <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9ebc:	push	{r4, r5, r6, r7, lr}
    9ebe:	ldrb	r5, [r0, #8]
    9ec0:	sub.w	sp, sp, #516	; 0x204
    9ec4:	mov	r4, r0
    9ec6:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9ec8:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9ecc:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9ece:	beq.n	9f10 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9ed0:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9ed2:	ldr	r0, [pc, #132]	; (9f58 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    9ed4:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9ed8:	ite	eq
    9eda:	moveq	r4, r2
    9edc:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9ede:	mov	r2, r4
    9ee0:	bl	9544 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9ee4:	mov	r5, r0
    9ee6:	cbnz	r0, 9efe <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    9ee8:	ldr	r3, [pc, #112]	; (9f5c <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    9eea:	movs	r2, #11
    9eec:	strb	r2, [r3, #0]
  m_errorLine = line;
    9eee:	mov.w	r2, #884	; 0x374
    9ef2:	ldr	r3, [pc, #108]	; (9f60 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    9ef4:	str	r2, [r3, #0]
}
    9ef6:	mov	r0, r5
    9ef8:	add.w	sp, sp, #516	; 0x204
    9efc:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    9efe:	cmp	r4, r6
    9f00:	beq.n	9ef6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    9f02:	mov.w	r2, #512	; 0x200
    9f06:	mov	r1, sp
    9f08:	mov	r0, r6
    9f0a:	bl	a218 <memcpy>
    9f0e:	b.n	9ef6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    9f10:	bl	983c <waitTransferComplete()>
    9f14:	cmp	r0, #0
    9f16:	beq.n	9ef6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9f18:	ldrb	r3, [r4, #9]
    9f1a:	cmp	r3, #1
    9f1c:	bne.n	9f24 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    9f1e:	ldr	r3, [r4, #4]
    9f20:	cmp	r3, r7
    9f22:	beq.n	9f42 <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    9f24:	ldr	r3, [r4, #0]
    9f26:	mov	r0, r4
    9f28:	ldr	r3, [r3, #32]
    9f2a:	blx	r3
    9f2c:	cmp	r0, #0
    9f2e:	beq.n	9ef6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    9f30:	mov	r1, r7
    9f32:	mov	r0, r4
    9f34:	bl	9e50 <SdioCard::readStart(unsigned long)>
    9f38:	cmp	r0, #0
    9f3a:	beq.n	9ef6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    9f3c:	movs	r3, #1
      m_curSector = sector;
    9f3e:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9f40:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    9f42:	mov	r1, r6
    9f44:	mov	r0, r4
    9f46:	bl	9d9c <SdioCard::readData(unsigned char*)>
    9f4a:	cmp	r0, #0
    9f4c:	beq.n	9ef6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    9f4e:	ldr	r3, [r4, #4]
  return true;
    9f50:	mov	r5, r0
    m_curSector++;
    9f52:	adds	r3, #1
    9f54:	str	r3, [r4, #4]
    9f56:	b.n	9ef6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    9f58:	.word	0x113a0011
    9f5c:	.word	0x2000230e
    9f60:	.word	0x2000dfd8

00009f64 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    9f64:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9f66:	ldr	r2, [pc, #76]	; (9fb4 <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    9f68:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    9f6a:	mov	r6, r1
  m_curState = IDLE_STATE;
    9f6c:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9f6e:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9f70:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9f72:	ldr	r0, [pc, #68]	; (9fb8 <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9f74:	bic.w	r3, r3, #65536	; 0x10000
    9f78:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9f7a:	bl	9420 <cardCommand(unsigned long, unsigned long)>
    9f7e:	mov	r4, r0
    9f80:	cbnz	r0, 9f94 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    9f82:	ldr	r3, [pc, #56]	; (9fbc <SdioCard::stopTransmission(bool)+0x58>)
    9f84:	movs	r2, #9
    9f86:	strb	r2, [r3, #0]
  m_errorLine = line;
    9f88:	movw	r2, #979	; 0x3d3
    9f8c:	ldr	r3, [pc, #48]	; (9fc0 <SdioCard::stopTransmission(bool)+0x5c>)
    9f8e:	str	r2, [r3, #0]
}
    9f90:	mov	r0, r4
    9f92:	pop	{r4, r5, r6, pc}
  if (blocking) {
    9f94:	cmp	r6, #0
    9f96:	beq.n	9f90 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    9f98:	ldr	r0, [pc, #40]	; (9fc4 <SdioCard::stopTransmission(bool)+0x60>)
    9f9a:	bl	92b4 <yieldTimeout(bool (*)())>
    9f9e:	cmp	r0, #0
    9fa0:	beq.n	9f90 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    9fa2:	ldr	r3, [pc, #24]	; (9fbc <SdioCard::stopTransmission(bool)+0x58>)
    9fa4:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    9fa6:	mov	r4, r5
  m_errorCode = code;
    9fa8:	strb	r2, [r3, #0]
  m_errorLine = line;
    9faa:	movw	r2, #983	; 0x3d7
    9fae:	ldr	r3, [pc, #16]	; (9fc0 <SdioCard::stopTransmission(bool)+0x5c>)
    9fb0:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9fb2:	b.n	9f90 <SdioCard::stopTransmission(bool)+0x2c>
    9fb4:	.word	0x402c0000
    9fb8:	.word	0x0cdb0000
    9fbc:	.word	0x2000230e
    9fc0:	.word	0x2000dfd8
    9fc4:	.word	0x00009129

00009fc8 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    9fc8:	push	{r4, lr}
    9fca:	mov	r4, r0
  if (!waitTransferComplete()) {
    9fcc:	bl	983c <waitTransferComplete()>
    9fd0:	cbz	r0, 9fe2 <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    9fd2:	ldrb	r3, [r4, #9]
    9fd4:	cbz	r3, 9fe2 <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    9fd6:	mov	r0, r4
    9fd8:	movs	r1, #1
}
    9fda:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9fde:	b.w	9f64 <SdioCard::stopTransmission(bool)>
}
    9fe2:	pop	{r4, pc}

00009fe4 <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    9fe4:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9fe6:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9fe8:	tst.w	r3, #2031616	; 0x1f0000
    9fec:	beq.n	9fe6 <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    9fee:	ldr	r0, [r0, #116]	; 0x74
	}
    9ff0:	uxtb	r0, r0
    9ff2:	bx	lr

00009ff4 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    9ff4:	push	{r0, r1, r2, r4, r5, lr}
    9ff6:	add	r3, sp, #8
    9ff8:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    9ffc:	ldrb	r2, [r0, #19]
    9ffe:	mov	r3, r1
    a000:	cmp	r2, #0
    a002:	beq.n	a078 <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    a004:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    a006:	ldrb	r2, [r0, #19]
    a008:	lsls	r1, r2, #31
    a00a:	bpl.n	a01e <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    a00c:	mov.w	r4, #3758153728	; 0xe000e000
    a010:	ldr	r5, [r0, #20]
    a012:	ldr.w	r1, [r4, #384]	; 0x180
    a016:	ands	r1, r5
    a018:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    a01a:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    a01e:	lsls	r5, r2, #30
    a020:	bpl.n	a034 <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    a022:	mov.w	r4, #3758153728	; 0xe000e000
    a026:	ldr	r5, [r0, #24]
    a028:	ldr.w	r1, [r4, #388]	; 0x184
    a02c:	ands	r1, r5
    a02e:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    a030:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    a034:	lsls	r4, r2, #29
    a036:	bpl.n	a04a <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    a038:	mov.w	r4, #3758153728	; 0xe000e000
    a03c:	ldr	r5, [r0, #28]
    a03e:	ldr.w	r1, [r4, #392]	; 0x188
    a042:	ands	r1, r5
    a044:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    a046:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    a04a:	lsls	r1, r2, #28
    a04c:	bpl.n	a060 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    a04e:	mov.w	r4, #3758153728	; 0xe000e000
    a052:	ldr	r5, [r0, #32]
    a054:	ldr.w	r1, [r4, #396]	; 0x18c
    a058:	ands	r1, r5
    a05a:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    a05c:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    a060:	lsls	r2, r2, #27
    a062:	bpl.n	a076 <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    a064:	mov.w	r1, #3758153728	; 0xe000e000
    a068:	ldr	r4, [r0, #36]	; 0x24
    a06a:	ldr.w	r2, [r1, #400]	; 0x190
    a06e:	ands	r2, r4
    a070:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    a072:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    a076:	cpsie	i
		if (settings.clock() != _clock) {
    a078:	ldr	r2, [r0, #8]
    a07a:	cmp	r3, r2
    a07c:	beq.n	a0cc <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    a07e:	ldr	r2, [pc, #112]	; (a0f0 <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    a080:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    a082:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a084:	ldr	r1, [pc, #108]	; (a0f4 <SPIClass::beginTransaction(SPISettings)+0x100>)
    a086:	ubfx	r4, r2, #4, #2
    a08a:	ubfx	r2, r2, #26, #3
    a08e:	ldr.w	r4, [r1, r4, lsl #2]
    a092:	adds	r2, #1
    a094:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    a098:	cbz	r3, a0e6 <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    a09a:	cmp	r3, r1
    a09c:	bhi.n	a0b6 <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    a09e:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    a0a2:	udiv	r1, r1, r2
    a0a6:	cmp	r3, r1
    a0a8:	bcs.n	a0ac <SPIClass::beginTransaction(SPISettings)+0xb8>
    a0aa:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    a0ac:	cmp.w	r2, #258	; 0x102
    a0b0:	bcs.n	a0ba <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    a0b2:	cmp	r2, #2
    a0b4:	bhi.n	a0be <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    a0b6:	movs	r3, #0
    a0b8:	b.n	a0c0 <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    a0ba:	movw	r2, #257	; 0x101
				div = d-2;
    a0be:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    a0c0:	lsrs	r1, r3, #1
    a0c2:	lsls	r2, r1, #16
    a0c4:	orr.w	r2, r2, r1, lsl #8
    a0c8:	orrs	r3, r2
    a0ca:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a0cc:	ldr	r3, [r0, #0]
		port().CR = 0;
    a0ce:	movs	r2, #0
    a0d0:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    a0d2:	movs	r2, #3
    a0d4:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    a0d6:	ldr	r2, [r0, #12]
    a0d8:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    a0da:	ldr	r2, [sp, #4]
    a0dc:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    a0de:	movs	r2, #1
    a0e0:	str	r2, [r3, #16]
	}
    a0e2:	add	sp, #12
    a0e4:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    a0e6:	cmp	r4, r2
    a0e8:	bcc.n	a0c0 <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a0ea:	mov	r2, r1
    a0ec:	b.n	a0aa <SPIClass::beginTransaction(SPISettings)+0xb6>
    a0ee:	nop
    a0f0:	.word	0x400fc000
    a0f4:	.word	0x20000604

0000a0f8 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    a0f8:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    a0fc:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    a0fe:	ldr	r0, [r0, #0]
    a100:	bl	9ff4 <SPIClass::beginTransaction(SPISettings)>
}
    a104:	pop	{r3, pc}

0000a106 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    a106:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    a108:	ldrb	r2, [r3, #19]
    a10a:	cbz	r2, a152 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    a10c:	lsls	r0, r2, #31
    a10e:	bpl.n	a11a <SdSpiArduinoDriver::deactivate()+0x14>
    a110:	ldr	r0, [r3, #40]	; 0x28
    a112:	mov.w	r1, #3758153728	; 0xe000e000
    a116:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    a11a:	lsls	r1, r2, #30
    a11c:	bpl.n	a128 <SdSpiArduinoDriver::deactivate()+0x22>
    a11e:	ldr	r0, [r3, #44]	; 0x2c
    a120:	mov.w	r1, #3758153728	; 0xe000e000
    a124:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    a128:	lsls	r0, r2, #29
    a12a:	bpl.n	a136 <SdSpiArduinoDriver::deactivate()+0x30>
    a12c:	ldr	r0, [r3, #48]	; 0x30
    a12e:	mov.w	r1, #3758153728	; 0xe000e000
    a132:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a136:	lsls	r1, r2, #28
    a138:	bpl.n	a144 <SdSpiArduinoDriver::deactivate()+0x3e>
    a13a:	ldr	r0, [r3, #52]	; 0x34
    a13c:	mov.w	r1, #3758153728	; 0xe000e000
    a140:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a144:	lsls	r2, r2, #27
    a146:	bpl.n	a152 <SdSpiArduinoDriver::deactivate()+0x4c>
    a148:	ldr	r2, [r3, #56]	; 0x38
    a14a:	mov.w	r3, #3758153728	; 0xe000e000
    a14e:	str.w	r2, [r3, #272]	; 0x110
}
    a152:	bx	lr

0000a154 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    a154:	ldr	r0, [r0, #0]
    a156:	b.w	4f9a <SPIClass::end()>

0000a15a <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    a15a:	ldr	r3, [r0, #0]
    a15c:	movs	r1, #255	; 0xff
    a15e:	ldr	r0, [r3, #0]
    a160:	b.w	9fe4 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a164 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a164:	push	{r0, r1, r2, r4, r5, lr}
    a166:	mov	r4, r1
    a168:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a16a:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a16c:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    a16e:	mov	r0, r4
    a170:	bl	a1d4 <memset>
		transfer(buf, buf, count);
    a174:	ldr	r0, [r5, #0]
    a176:	ldr	r3, [sp, #4]
    a178:	mov	r2, r4
    a17a:	mov	r1, r4
    a17c:	bl	4f44 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a180:	movs	r0, #0
    a182:	add	sp, #12
    a184:	pop	{r4, r5, pc}

0000a186 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    a186:	ldr	r3, [r0, #0]
    a188:	ldr	r0, [r3, #0]
    a18a:	b.w	9fe4 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a18e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a18e:	subs	r3, r2, #1
    a190:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    a194:	push	{r4, r5, r6, lr}
    a196:	mov	r6, r0
    a198:	sub.w	sp, sp, #512	; 0x200
    a19c:	mov	r4, r1
    a19e:	mov	r5, r2
  if (0 < count && count <= 512) {
    a1a0:	bcc.n	a1b6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    a1a2:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a1a4:	cmp	r4, r5
    a1a6:	beq.n	a1c8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    a1a8:	ldr	r3, [r6, #0]
    a1aa:	ldrb.w	r1, [r4], #1
    a1ae:	ldr	r0, [r3, #0]
    a1b0:	bl	9fe4 <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    a1b4:	b.n	a1a4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    a1b6:	mov	r0, sp
    a1b8:	bl	a218 <memcpy>
    a1bc:	mov	r2, sp
    a1be:	mov	r3, r5
    a1c0:	ldr	r0, [r6, #0]
    a1c2:	mov	r1, r2
    a1c4:	bl	4f44 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    a1c8:	add.w	sp, sp, #512	; 0x200
    a1cc:	pop	{r4, r5, r6, pc}

0000a1ce <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    a1ce:	b.w	beb0 <digitalWrite>
	...

0000a1d4 <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    a1d4:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    a1d6:	cbz	r2, a214 <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    a1d8:	cmp	r2, #16
    blt     .L_bytewise
    a1da:	blt.n	a20c <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    a1dc:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    a1e0:	cbz	r3, a1f0 <memset+0x1c>
    rsb     r3, #8
    a1e2:	rsb	r3, r3, #8
    subs    r2, r3
    a1e6:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    a1e8:	subs	r3, #1
    strb    r1, [r0], #1
    a1ea:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    a1ee:	bgt.n	a1e8 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    a1f0:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    a1f2:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    a1f6:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    a1fa:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    a1fc:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    a1fe:	subs	r3, #1
    strd    r1, r12, [r0], #8
    a200:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    a204:	bgt.n	a1fe <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    a206:	ands.w	r2, r2, #7
    beq     .L_done
    a20a:	beq.n	a214 <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    a20c:	subs	r2, #1
    strb    r1, [r0], #1
    a20e:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    a212:	bgt.n	a20c <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    a214:	pop	{r0, pc}
    a216:	nop

0000a218 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a218:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a21a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a21e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a222:	bne.n	a300 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a224:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a226:	bcc.n	a2ac <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a228:	ldr.w	r3, [r1], #4
    a22c:	str.w	r3, [r0], #4
    a230:	ldr.w	r3, [r1], #4
    a234:	str.w	r3, [r0], #4
    a238:	ldr.w	r3, [r1], #4
    a23c:	str.w	r3, [r0], #4
    a240:	ldr.w	r3, [r1], #4
    a244:	str.w	r3, [r0], #4
    a248:	ldr.w	r3, [r1], #4
    a24c:	str.w	r3, [r0], #4
    a250:	ldr.w	r3, [r1], #4
    a254:	str.w	r3, [r0], #4
    a258:	ldr.w	r3, [r1], #4
    a25c:	str.w	r3, [r0], #4
    a260:	ldr.w	r3, [r1], #4
    a264:	str.w	r3, [r0], #4
    a268:	ldr.w	r3, [r1], #4
    a26c:	str.w	r3, [r0], #4
    a270:	ldr.w	r3, [r1], #4
    a274:	str.w	r3, [r0], #4
    a278:	ldr.w	r3, [r1], #4
    a27c:	str.w	r3, [r0], #4
    a280:	ldr.w	r3, [r1], #4
    a284:	str.w	r3, [r0], #4
    a288:	ldr.w	r3, [r1], #4
    a28c:	str.w	r3, [r0], #4
    a290:	ldr.w	r3, [r1], #4
    a294:	str.w	r3, [r0], #4
    a298:	ldr.w	r3, [r1], #4
    a29c:	str.w	r3, [r0], #4
    a2a0:	ldr.w	r3, [r1], #4
    a2a4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a2a8:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a2aa:	bcs.n	a228 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a2ac:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a2ae:	bcc.n	a2d4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a2b0:	ldr.w	r3, [r1], #4
    a2b4:	str.w	r3, [r0], #4
    a2b8:	ldr.w	r3, [r1], #4
    a2bc:	str.w	r3, [r0], #4
    a2c0:	ldr.w	r3, [r1], #4
    a2c4:	str.w	r3, [r0], #4
    a2c8:	ldr.w	r3, [r1], #4
    a2cc:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a2d0:	subs	r2, #16
	bhs	.Lmid_block_loop
    a2d2:	bcs.n	a2b0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a2d4:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a2d6:	bcc.n	a2e4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a2d8:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a2dc:	str.w	r3, [r0], #4
	subs	r2, #4
    a2e0:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a2e2:	bcs.n	a2d8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a2e4:	adds	r2, #4
	beq	.Ldone
    a2e6:	beq.n	a2fa <memcpy+0xe2>

	lsls	r2, r2, #31
    a2e8:	lsls	r2, r2, #31
	itt ne
    a2ea:	itt	ne
	ldrbne  r3, [r1], #1
    a2ec:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a2f0:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a2f4:	bcc.n	a2fa <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a2f6:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a2f8:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a2fa:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a2fc:	bx	lr
    a2fe:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a300:	cmp	r2, #8
	blo	.Lbyte_copy
    a302:	bcc.n	a32c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a304:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a306:	beq.n	a224 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a308:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a30c:	beq.n	a224 <memcpy+0xc>

	rsb	r3, #4
    a30e:	rsb	r3, r3, #4
	subs	r2, r3
    a312:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a314:	lsls	r3, r3, #31
	itt ne
    a316:	itt	ne
	ldrbne  r3, [r1], #1
    a318:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a31c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a320:	bcc.n	a224 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a322:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a326:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a32a:	b.n	a224 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a32c:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a32e:	bcc.n	a2e4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a330:	subs	r2, #1
	ldrb    r3, [r1], #1
    a332:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a336:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a33a:	bcs.n	a330 <memcpy+0x118>

	ldrb	r3, [r1]
    a33c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a33e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a340:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a342:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a344:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a346:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a348:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a34a:	bx	lr

0000a34c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a34c:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a34e:	ldr	r4, [pc, #80]	; (a3a0 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a350:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a354:	ldr	r5, [pc, #76]	; (a3a4 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a356:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a35a:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a35e:	ldr	r7, [pc, #72]	; (a3a8 <rx_queue_transfer+0x5c>)
    a360:	add.w	r5, r5, r0, lsl #5
{
    a364:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a366:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a36a:	mov	r1, r4
    a36c:	ldrh	r2, [r7, #0]
    a36e:	mov	r0, r5
    a370:	bl	b3f0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a374:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a376:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a378:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a37c:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    a380:	adds	r4, #32
	} while (location < end_addr);
    a382:	cmp	r3, r4
    a384:	bhi.n	a37c <rx_queue_transfer+0x30>
	asm("dsb");
    a386:	dsb	sy
	asm("isb");
    a38a:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a38e:	movs	r0, #3
    a390:	mov	r1, r5
    a392:	bl	b440 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a396:	mov.w	r3, #131072	; 0x20000
    a39a:	str.w	r3, [r6, #268]	; 0x10c
}
    a39e:	pop	{r3, r4, r5, r6, r7, pc}
    a3a0:	.word	0x20004b40
    a3a4:	.word	0x20005b40
    a3a8:	.word	0x200153e4

0000a3ac <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a3ac:	ldr	r3, [r0, #4]
    a3ae:	ldr	r2, [pc, #136]	; (a438 <rx_event+0x8c>)
    a3b0:	ubfx	r3, r3, #16, #15
{
    a3b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a3b8:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    a3ba:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a3bc:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a3be:	cmp	r4, #0
    a3c0:	ble.n	a40a <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    a3c2:	ldr	r2, [pc, #120]	; (a43c <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    a3c4:	uxth.w	sl, r4
		if (head != rx_tail) {
    a3c8:	ldr	r0, [pc, #116]	; (a440 <rx_event+0x94>)
		uint32_t head = rx_head;
    a3ca:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    a3cc:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a3ce:	uxtb	r3, r1
		if (head != rx_tail) {
    a3d0:	ldr.w	r8, [pc, #128]	; a454 <rx_event+0xa8>
    a3d4:	cmp	r1, r0
    a3d6:	ldr	r7, [pc, #108]	; (a444 <rx_event+0x98>)
    a3d8:	ldr	r1, [pc, #108]	; (a448 <rx_event+0x9c>)
    a3da:	beq.n	a414 <rx_event+0x68>
			uint32_t ii = rx_list[head];
    a3dc:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    a3e0:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a3e4:	rsb	r0, r6, #512	; 0x200
    a3e8:	cmp	r4, r0
    a3ea:	bhi.n	a414 <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a3ec:	ldr	r3, [pc, #92]	; (a44c <rx_event+0xa0>)
    a3ee:	add.w	r0, r6, r9, lsl #9
    a3f2:	mov	r2, r4
				rx_count[ii] = count + len;
    a3f4:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a3f6:	add.w	r1, r3, r5, lsl #9
    a3fa:	add	r0, r3
    a3fc:	bl	a218 <memcpy>
				rx_available += len;
    a400:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    a402:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    a406:	add	r3, r4
    a408:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    a40a:	mov	r0, r5
	}
}
    a40c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    a410:	b.w	a34c <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    a414:	adds	r3, #1
		rx_index[i] = 0;
    a416:	movs	r6, #0
    a418:	ldr	r0, [pc, #52]	; (a450 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    a41a:	cmp	r3, #9
		rx_count[i] = len;
    a41c:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    a420:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a424:	it	cs
    a426:	movcs	r3, r6
		rx_list[head] = i;
    a428:	strb	r5, [r1, r3]
		rx_head = head;
    a42a:	uxtb	r3, r3
    a42c:	strb	r3, [r2, #0]
		rx_available += len;
    a42e:	ldr	r3, [r7, #0]
    a430:	add	r4, r3
    a432:	str	r4, [r7, #0]
}
    a434:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a438:	.word	0x200153e4
    a43c:	.word	0x200155c5
    a440:	.word	0x200155d5
    a444:	.word	0x20014cb8
    a448:	.word	0x200155c7
    a44c:	.word	0x20004b40
    a450:	.word	0x200153d4
    a454:	.word	0x200153c4

0000a458 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a458:	ldr	r3, [pc, #112]	; (a4cc <usb_serial_flush_callback+0x74>)
{
    a45a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    a45e:	ldrb	r2, [r3, #0]
    a460:	and.w	r3, r2, #255	; 0xff
    a464:	cbnz	r2, a4c6 <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    a466:	ldr	r2, [pc, #104]	; (a4d0 <usb_serial_flush_callback+0x78>)
    a468:	ldrb	r2, [r2, #0]
    a46a:	cbz	r2, a4c6 <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    a46c:	ldr	r7, [pc, #100]	; (a4d4 <usb_serial_flush_callback+0x7c>)
    a46e:	ldrh	r5, [r7, #0]
    a470:	cbz	r5, a4c6 <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a472:	ldr	r6, [pc, #100]	; (a4d8 <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a474:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a478:	ldr	r1, [pc, #96]	; (a4dc <usb_serial_flush_callback+0x84>)
    a47a:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a47c:	ldr	r4, [pc, #96]	; (a4e0 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    a47e:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a482:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a486:	mov	r2, r5
    a488:	mov	r0, r8
    a48a:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a48c:	add	r5, r4
    a48e:	bl	b3f0 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    a492:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a496:	mov.w	r3, #3758153728	; 0xe000e000
    a49a:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a49e:	adds	r4, #32
	} while (location < end_addr);
    a4a0:	cmp	r5, r4
    a4a2:	bhi.n	a49a <usb_serial_flush_callback+0x42>
	asm("dsb");
    a4a4:	dsb	sy
	asm("isb");
    a4a8:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a4ac:	movs	r0, #3
    a4ae:	mov	r1, r8
    a4b0:	bl	b41c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a4b4:	ldrb	r3, [r6, #0]
    a4b6:	movs	r2, #0
    a4b8:	adds	r3, #1
	tx_available = 0;
    a4ba:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a4bc:	uxtb	r3, r3
    a4be:	cmp	r3, #3
    a4c0:	ite	ls
    a4c2:	strbls	r3, [r6, #0]
    a4c4:	strbhi	r2, [r6, #0]
}
    a4c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4ca:	nop
    a4cc:	.word	0x200155db
    a4d0:	.word	0x200155dd
    a4d4:	.word	0x2001546a
    a4d8:	.word	0x200155d9
    a4dc:	.word	0x20005cc0
    a4e0:	.word	0x20005dc0

0000a4e4 <usb_serial_reset>:
}
    a4e4:	bx	lr
	...

0000a4e8 <usb_serial_configure>:
	if (usb_high_speed) {
    a4e8:	ldr	r3, [pc, #180]	; (a5a0 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a4ea:	movs	r2, #128	; 0x80
    a4ec:	movs	r1, #0
    a4ee:	ldr	r0, [pc, #180]	; (a5a4 <usb_serial_configure+0xbc>)
{
    a4f0:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a4f2:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a4f4:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a4f6:	ldr	r5, [pc, #176]	; (a5a8 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    a4f8:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    a4fa:	ldr	r6, [pc, #176]	; (a5ac <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    a4fc:	ite	eq
    a4fe:	moveq	r3, #64	; 0x40
    a500:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a504:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a506:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a508:	bl	a1d4 <memset>
	tx_head = 0;
    a50c:	ldr	r3, [pc, #160]	; (a5b0 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a50e:	mov.w	r2, #256	; 0x100
    a512:	mov	r1, r4
    a514:	ldr	r0, [pc, #156]	; (a5b4 <usb_serial_configure+0xcc>)
	tx_head = 0;
    a516:	strb	r4, [r3, #0]
	tx_available = 0;
    a518:	ldr	r3, [pc, #156]	; (a5b8 <usb_serial_configure+0xd0>)
    a51a:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a51c:	bl	a1d4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a520:	movs	r2, #16
    a522:	mov	r1, r4
    a524:	ldr	r0, [pc, #148]	; (a5bc <usb_serial_configure+0xd4>)
    a526:	bl	a1d4 <memset>
	memset(rx_index, 0, sizeof(rx_index));
    a52a:	movs	r2, #16
    a52c:	mov	r1, r4
    a52e:	ldr	r0, [pc, #144]	; (a5c0 <usb_serial_configure+0xd8>)
    a530:	bl	a1d4 <memset>
	rx_head = 0;
    a534:	ldr	r3, [pc, #140]	; (a5c4 <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a536:	mov	r2, r4
    a538:	movs	r1, #16
	rx_head = 0;
    a53a:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a53c:	movs	r0, #2
	rx_tail = 0;
    a53e:	ldr	r3, [pc, #136]	; (a5c8 <usb_serial_configure+0xe0>)
    a540:	strb	r4, [r3, #0]
	rx_available = 0;
    a542:	ldr	r3, [pc, #136]	; (a5cc <usb_serial_configure+0xe4>)
    a544:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a546:	mov	r3, r4
    a548:	bl	b3b0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a54c:	ldr	r3, [pc, #128]	; (a5d0 <usb_serial_configure+0xe8>)
    a54e:	mov	r2, r4
    a550:	ldrh	r1, [r6, #0]
    a552:	movs	r0, #3
    a554:	bl	b370 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a558:	mov	r3, r4
    a55a:	movs	r2, #1
    a55c:	ldrh	r1, [r5, #0]
    a55e:	movs	r0, #3
    a560:	bl	b3b0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a564:	mov	r0, r4
    a566:	adds	r4, #1
    a568:	bl	a34c <rx_queue_transfer>
    a56c:	cmp	r4, #8
    a56e:	bne.n	a564 <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    a570:	ldr	r3, [pc, #96]	; (a5d4 <usb_serial_configure+0xec>)
    a572:	ldr	r2, [pc, #100]	; (a5d8 <usb_serial_configure+0xf0>)
    a574:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    a576:	movs	r2, #0
    a578:	ldr	r3, [pc, #96]	; (a5dc <usb_serial_configure+0xf4>)
    a57a:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a57e:	movs	r2, #74	; 0x4a
    a580:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a584:	ldr.w	r2, [r3, #328]	; 0x148
    a588:	orr.w	r2, r2, #16777216	; 0x1000000
    a58c:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    a590:	ldr	r3, [pc, #76]	; (a5e0 <usb_serial_configure+0xf8>)
    a592:	cbz	r3, a59e <usb_serial_configure+0xb6>
    a594:	ldr	r2, [pc, #76]	; (a5e4 <usb_serial_configure+0xfc>)
    a596:	ldrb	r3, [r2, #0]
    a598:	orr.w	r3, r3, #1
    a59c:	strb	r3, [r2, #0]
}
    a59e:	pop	{r4, r5, r6, pc}
    a5a0:	.word	0x200155de
    a5a4:	.word	0x20005cc0
    a5a8:	.word	0x2001546c
    a5ac:	.word	0x200153e4
    a5b0:	.word	0x200155d9
    a5b4:	.word	0x20005b40
    a5b8:	.word	0x2001546a
    a5bc:	.word	0x200153c4
    a5c0:	.word	0x200153d4
    a5c4:	.word	0x200155c5
    a5c8:	.word	0x200155d5
    a5cc:	.word	0x20014cb8
    a5d0:	.word	0x0000a3ad
    a5d4:	.word	0x2001538c
    a5d8:	.word	0x0000a459
    a5dc:	.word	0x402e0000
    a5e0:	.word	0x00000000
    a5e4:	.word	0x200155e0

0000a5e8 <usb_serial_read>:
{
    a5e8:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a5ec:	mov.w	r3, #3758153728	; 0xe000e000
    a5f0:	mov.w	r2, #131072	; 0x20000
{
    a5f4:	mov	r7, r0
    a5f6:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a5f8:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    a5fc:	movs	r5, #0
	uint32_t tail = rx_tail;
    a5fe:	ldr	r3, [pc, #160]	; (a6a0 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a600:	ldr.w	fp, [pc, #176]	; a6b4 <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    a604:	ldrb	r4, [r3, #0]
    a606:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    a608:	cmp	r5, r8
    a60a:	bcs.n	a614 <usb_serial_read+0x2c>
    a60c:	ldr	r3, [pc, #148]	; (a6a4 <usb_serial_read+0xbc>)
    a60e:	ldrb	r2, [r3, #0]
    a610:	cmp	r2, r4
    a612:	bne.n	a628 <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a614:	mov.w	r3, #3758153728	; 0xe000e000
    a618:	mov.w	r2, #131072	; 0x20000
}
    a61c:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a61e:	str.w	r2, [r3, #268]	; 0x10c
}
    a622:	add	sp, #12
    a624:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    a628:	adds	r4, #1
		uint32_t i = rx_list[tail];
    a62a:	ldr	r3, [pc, #124]	; (a6a8 <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a62c:	ldr	r0, [pc, #124]	; (a6ac <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a62e:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    a632:	cmp	r4, #9
    a634:	ldr.w	sl, [pc, #128]	; a6b8 <usb_serial_read+0xd0>
    a638:	it	cs
    a63a:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a63c:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a640:	ldrh.w	r1, [fp, r9, lsl #1]
    a644:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a648:	ldr	r0, [pc, #100]	; (a6b0 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a64a:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a64c:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    a650:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a652:	add	r1, r0
		if (avail > len) {
    a654:	bcs.n	a67c <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a656:	mov	r0, r7
    a658:	str	r2, [sp, #4]
    a65a:	bl	a218 <memcpy>
			rx_available -= len;
    a65e:	ldr.w	r1, [sl]
			rx_index[i] += len;
    a662:	ldr	r2, [sp, #4]
			rx_available -= len;
    a664:	sub.w	r1, r1, r8
    a668:	add	r1, r5
    a66a:	mov	r5, r8
    a66c:	str.w	r1, [sl]
			rx_index[i] += len;
    a670:	ldrh.w	r1, [fp, r9, lsl #1]
    a674:	add	r2, r1
    a676:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    a67a:	b.n	a608 <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a67c:	mov	r2, r6
    a67e:	mov	r0, r7
    a680:	bl	a218 <memcpy>
			rx_available -= avail;
    a684:	ldr.w	r2, [sl]
			rx_tail = tail;
    a688:	ldr	r3, [pc, #20]	; (a6a0 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    a68a:	mov	r0, r9
			rx_available -= avail;
    a68c:	subs	r2, r2, r6
			p += avail;
    a68e:	add	r7, r6
			count += avail;
    a690:	add	r5, r6
			rx_available -= avail;
    a692:	str.w	r2, [sl]
			rx_tail = tail;
    a696:	uxtb	r2, r4
    a698:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    a69a:	bl	a34c <rx_queue_transfer>
    a69e:	b.n	a608 <usb_serial_read+0x20>
    a6a0:	.word	0x200155d5
    a6a4:	.word	0x200155c5
    a6a8:	.word	0x200155c7
    a6ac:	.word	0x200153c4
    a6b0:	.word	0x20004b40
    a6b4:	.word	0x200153d4
    a6b8:	.word	0x20014cb8

0000a6bc <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    a6bc:	ldr	r3, [pc, #44]	; (a6ec <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    a6be:	ldr	r1, [pc, #48]	; (a6f0 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    a6c0:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    a6c2:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    a6c4:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a6c6:	cmp	r2, r1
    a6c8:	beq.n	a6e6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a6ca:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a6cc:	ldr	r2, [pc, #36]	; (a6f4 <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    a6ce:	cmp	r3, #9
    a6d0:	it	cs
    a6d2:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a6d4:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a6d6:	ldr	r3, [pc, #32]	; (a6f8 <usb_serial_peekchar+0x3c>)
    a6d8:	ldrh.w	r1, [r3, r2, lsl #1]
    a6dc:	ldr	r3, [pc, #28]	; (a6fc <usb_serial_peekchar+0x40>)
    a6de:	add.w	r3, r3, r2, lsl #9
    a6e2:	ldrb	r0, [r3, r1]
    a6e4:	bx	lr
	if (tail == rx_head) return -1;
    a6e6:	mov.w	r0, #4294967295
}
    a6ea:	bx	lr
    a6ec:	.word	0x200155d5
    a6f0:	.word	0x200155c5
    a6f4:	.word	0x200155c7
    a6f8:	.word	0x200153d4
    a6fc:	.word	0x20004b40

0000a700 <usb_serial_available>:
	uint32_t n = rx_available;
    a700:	ldr	r3, [pc, #12]	; (a710 <usb_serial_available+0x10>)
{
    a702:	push	{r4, lr}
	uint32_t n = rx_available;
    a704:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a706:	cbnz	r4, a70c <usb_serial_available+0xc>
    a708:	bl	c3dc <yield>
}
    a70c:	mov	r0, r4
    a70e:	pop	{r4, pc}
    a710:	.word	0x20014cb8

0000a714 <usb_serial_flush_input>:
{
    a714:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    a718:	ldr	r5, [pc, #64]	; (a75c <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    a71a:	ldr	r7, [pc, #68]	; (a760 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    a71c:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    a71e:	ldr.w	r8, [pc, #80]	; a770 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    a722:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    a724:	ldr	r6, [pc, #60]	; (a764 <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    a726:	ldrb	r3, [r7, #0]
    a728:	cmp	r3, r4
    a72a:	bne.n	a730 <usb_serial_flush_input+0x1c>
}
    a72c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    a730:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    a732:	ldr	r2, [pc, #52]	; (a768 <usb_serial_flush_input+0x54>)
    a734:	ldr	r1, [pc, #52]	; (a76c <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    a736:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    a738:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    a73a:	it	cs
    a73c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a73e:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a742:	ldrh.w	r2, [r2, r0, lsl #1]
    a746:	ldrh.w	r1, [r1, r0, lsl #1]
    a74a:	subs	r2, r2, r1
    a74c:	subs	r3, r3, r2
    a74e:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    a750:	bl	a34c <rx_queue_transfer>
		rx_tail = tail;
    a754:	uxtb	r3, r4
    a756:	strb	r3, [r5, #0]
    a758:	b.n	a726 <usb_serial_flush_input+0x12>
    a75a:	nop
    a75c:	.word	0x200155d5
    a760:	.word	0x200155c5
    a764:	.word	0x20014cb8
    a768:	.word	0x200153c4
    a76c:	.word	0x200153d4
    a770:	.word	0x200155c7

0000a774 <usb_serial_getchar>:
{
    a774:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    a776:	movs	r1, #1
    a778:	add.w	r0, sp, #7
    a77c:	bl	a5e8 <usb_serial_read>
    a780:	cbz	r0, a78c <usb_serial_getchar+0x18>
    a782:	ldrb.w	r0, [sp, #7]
}
    a786:	add	sp, #12
    a788:	ldr.w	pc, [sp], #4
	return -1;
    a78c:	mov.w	r0, #4294967295
    a790:	b.n	a786 <usb_serial_getchar+0x12>
	...

0000a794 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a794:	ldr	r3, [pc, #356]	; (a8fc <usb_serial_write+0x168>)
{
    a796:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    a79a:	ldrb	r3, [r3, #0]
{
    a79c:	mov	r6, r0
    a79e:	mov	r5, r1
	if (!usb_configuration) return 0;
    a7a0:	and.w	r4, r3, #255	; 0xff
    a7a4:	cmp	r3, #0
    a7a6:	beq.w	a8ba <usb_serial_write+0x126>
	uint32_t sent=0;
    a7aa:	movs	r4, #0
		tx_noautoflush = 1;
    a7ac:	ldr.w	fp, [pc, #360]	; a918 <usb_serial_write+0x184>
	while (size > 0) {
    a7b0:	cmp	r5, #0
    a7b2:	beq.w	a8ba <usb_serial_write+0x126>
		tx_noautoflush = 1;
    a7b6:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a7b8:	ldr.w	r9, [pc, #352]	; a91c <usb_serial_write+0x188>
		while (!tx_available) {
    a7bc:	ldr	r7, [pc, #320]	; (a900 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    a7be:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    a7c2:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    a7c6:	ldr	r3, [pc, #316]	; (a904 <usb_serial_write+0x170>)
    a7c8:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    a7cc:	movs	r3, #0
		int waiting=0;
    a7ce:	mov	r8, r3
		while (!tx_available) {
    a7d0:	ldrh	r1, [r7, #0]
    a7d2:	cbnz	r1, a7f2 <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    a7d4:	mov	r0, sl
    a7d6:	strd	r3, r1, [sp]
    a7da:	bl	b45c <usb_transfer_status>
			if (!(status & 0x80)) {
    a7de:	ands.w	r0, r0, #128	; 0x80
    a7e2:	ldr	r2, [pc, #292]	; (a908 <usb_serial_write+0x174>)
    a7e4:	ldrd	r3, r1, [sp]
    a7e8:	bne.n	a896 <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    a7ea:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    a7ee:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    a7f0:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a7f2:	ldrh.w	r8, [r7]
    a7f6:	ldrb.w	r3, [r9]
    a7fa:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    a7fe:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a800:	mov.w	r2, r3, lsl #11
    a804:	add.w	r0, r0, r3, lsl #11
    a808:	ldr	r3, [pc, #256]	; (a90c <usb_serial_write+0x178>)
    a80a:	str	r2, [sp, #0]
    a80c:	add	r0, r3
		if (size >= tx_available) {
    a80e:	bhi.n	a8dc <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    a810:	mov	r2, r8
    a812:	mov	r1, r6
    a814:	bl	a218 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a818:	ldr	r2, [sp, #0]
    a81a:	ldr	r3, [pc, #240]	; (a90c <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a81c:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a81e:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a820:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a822:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a824:	mov.w	r2, #2048	; 0x800
    a828:	mov	r1, r8
    a82a:	bl	b3f0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a82e:	mov	r1, r8
	asm("dsb");
    a830:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    a834:	add.w	r2, r8, #2048	; 0x800
    a838:	add.w	r3, r8, #32
    a83c:	cmp	r3, r2
    a83e:	ite	hi
    a840:	movhi	r3, #1
    a842:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a844:	mov.w	r2, #3758153728	; 0xe000e000
    a848:	add.w	r3, r8, r3, lsl #5
    a84c:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    a850:	adds	r1, #32
	} while (location < end_addr);
    a852:	cmp	r1, r3
    a854:	bne.n	a84c <usb_serial_write+0xb8>
	asm("dsb");
    a856:	dsb	sy
	asm("isb");
    a85a:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a85e:	movs	r0, #3
    a860:	mov	r1, sl
    a862:	bl	b41c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a866:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    a86a:	ldr	r2, [pc, #164]	; (a910 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    a86c:	adds	r3, #1
    a86e:	uxtb	r3, r3
    a870:	cmp	r3, #3
    a872:	it	hi
    a874:	movhi	r3, #0
    a876:	strb.w	r3, [r9]
			size -= tx_available;
    a87a:	ldrh	r3, [r7, #0]
    a87c:	subs	r5, r5, r3
			sent += tx_available;
    a87e:	add	r4, r3
			data += tx_available;
    a880:	add	r6, r3
			tx_available = 0;
    a882:	movs	r3, #0
    a884:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    a886:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a88a:	dsb	sy
		tx_noautoflush = 0;
    a88e:	movs	r3, #0
    a890:	strb.w	r3, [fp]
    a894:	b.n	a7b0 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    a896:	dsb	sy
			tx_noautoflush = 0;
    a89a:	strb.w	r1, [fp]
			if (!waiting) {
    a89e:	cmp.w	r8, #0
    a8a2:	bne.n	a8a8 <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    a8a4:	ldr	r3, [pc, #108]	; (a914 <usb_serial_write+0x180>)
    a8a6:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    a8a8:	ldrb	r1, [r2, #0]
    a8aa:	cbnz	r1, a8ba <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a8ac:	ldr	r1, [pc, #100]	; (a914 <usb_serial_write+0x180>)
    a8ae:	ldr	r1, [r1, #0]
    a8b0:	subs	r1, r1, r3
    a8b2:	cmp	r1, #120	; 0x78
    a8b4:	bls.n	a8c2 <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    a8b6:	movs	r3, #1
    a8b8:	strb	r3, [r2, #0]
}
    a8ba:	mov	r0, r4
    a8bc:	add	sp, #12
    a8be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    a8c2:	ldr	r1, [pc, #56]	; (a8fc <usb_serial_write+0x168>)
    a8c4:	ldrb	r1, [r1, #0]
    a8c6:	cmp	r1, #0
    a8c8:	beq.n	a8ba <usb_serial_write+0x126>
			tx_noautoflush = 1;
    a8ca:	mov.w	r8, #1
    a8ce:	str	r3, [sp, #0]
			yield();
    a8d0:	bl	c3dc <yield>
			tx_noautoflush = 1;
    a8d4:	ldr	r3, [sp, #0]
    a8d6:	strb.w	r8, [fp]
    a8da:	b.n	a7d0 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    a8dc:	mov	r2, r5
    a8de:	mov	r1, r6
    a8e0:	bl	a218 <memcpy>
			tx_available -= size;
    a8e4:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a8e8:	ldr	r3, [pc, #36]	; (a910 <usb_serial_write+0x17c>)
    a8ea:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    a8ee:	add	r4, r5
			tx_available -= size;
    a8f0:	strh.w	r8, [r7]
			size = 0;
    a8f4:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a8f6:	str.w	r2, [r3, #132]	; 0x84
}
    a8fa:	b.n	a88a <usb_serial_write+0xf6>
    a8fc:	.word	0x200155dd
    a900:	.word	0x2001546a
    a904:	.word	0x20005cc0
    a908:	.word	0x200155d8
    a90c:	.word	0x20005dc0
    a910:	.word	0x402e0000
    a914:	.word	0x20015374
    a918:	.word	0x200155db
    a91c:	.word	0x200155d9

0000a920 <usb_serial_putchar>:
{
    a920:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    a922:	movs	r1, #1
{
    a924:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    a928:	add.w	r0, sp, #7
    a92c:	bl	a794 <usb_serial_write>
}
    a930:	add	sp, #12
    a932:	ldr.w	pc, [sp], #4
	...

0000a938 <usb_serial_write_buffer_free>:
{
    a938:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a93c:	movs	r4, #0
	tx_noautoflush = 1;
    a93e:	ldr	r7, [pc, #56]	; (a978 <usb_serial_write_buffer_free+0x40>)
    a940:	movs	r3, #1
    a942:	ldr	r6, [pc, #56]	; (a97c <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a944:	mov	r5, r4
		if (i == tx_head) continue;
    a946:	ldr.w	r8, [pc, #56]	; a980 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    a94a:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    a94c:	ldrb.w	r3, [r8]
    a950:	cmp	r3, r4
    a952:	beq.n	a962 <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a954:	mov	r0, r6
    a956:	bl	b45c <usb_transfer_status>
    a95a:	lsls	r3, r0, #24
    a95c:	it	pl
    a95e:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a962:	adds	r4, #1
    a964:	adds	r6, #32
    a966:	cmp	r4, #4
    a968:	bne.n	a94c <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    a96a:	dsb	sy
	tx_noautoflush = 0;
    a96e:	movs	r3, #0
}
    a970:	mov	r0, r5
	tx_noautoflush = 0;
    a972:	strb	r3, [r7, #0]
}
    a974:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a978:	.word	0x200155db
    a97c:	.word	0x20005cc0
    a980:	.word	0x200155d9

0000a984 <usb_serial_flush_output>:
{
    a984:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a988:	ldr	r3, [pc, #116]	; (aa00 <usb_serial_flush_output+0x7c>)
    a98a:	ldrb	r3, [r3, #0]
    a98c:	cbz	r3, a9fc <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    a98e:	ldr.w	r8, [pc, #132]	; aa14 <usb_serial_flush_output+0x90>
    a992:	ldrh.w	r5, [r8]
    a996:	cbz	r5, a9fc <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    a998:	ldr	r7, [pc, #104]	; (aa04 <usb_serial_flush_output+0x80>)
    a99a:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a99c:	ldr	r6, [pc, #104]	; (aa08 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a99e:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    a9a2:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    a9a4:	ldr	r2, [pc, #100]	; (aa0c <usb_serial_flush_output+0x88>)
    a9a6:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a9a8:	ldr	r4, [pc, #100]	; (aa10 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a9aa:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a9ae:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a9b0:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a9b4:	movs	r3, #0
    a9b6:	mov	r0, r9
    a9b8:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    a9ba:	add	r5, r4
    a9bc:	bl	b3f0 <usb_prepare_transfer>
	asm("dsb");
    a9c0:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a9c4:	mov.w	r3, #3758153728	; 0xe000e000
    a9c8:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a9cc:	adds	r4, #32
	} while (location < end_addr);
    a9ce:	cmp	r5, r4
    a9d0:	bhi.n	a9c8 <usb_serial_flush_output+0x44>
	asm("dsb");
    a9d2:	dsb	sy
	asm("isb");
    a9d6:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a9da:	movs	r0, #3
    a9dc:	mov	r1, r9
    a9de:	bl	b41c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a9e2:	ldrb	r3, [r6, #0]
    a9e4:	movs	r2, #0
    a9e6:	adds	r3, #1
	tx_available = 0;
    a9e8:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a9ec:	uxtb	r3, r3
    a9ee:	cmp	r3, #3
    a9f0:	ite	ls
    a9f2:	strbls	r3, [r6, #0]
    a9f4:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    a9f6:	dsb	sy
	tx_noautoflush = 0;
    a9fa:	strb	r2, [r7, #0]
}
    a9fc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aa00:	.word	0x200155dd
    aa04:	.word	0x200155db
    aa08:	.word	0x200155d9
    aa0c:	.word	0x20005cc0
    aa10:	.word	0x20005dc0
    aa14:	.word	0x2001546a

0000aa18 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    aa18:	ldr	r3, [pc, #512]	; (ac1c <set_arm_clock+0x204>)
{
    aa1a:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    aa1c:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    aa1e:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    aa20:	sub.w	r3, r3, #507904	; 0x7c000
    aa24:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    aa26:	ldr	r3, [pc, #504]	; (ac20 <set_arm_clock+0x208>)
    aa28:	cmp	r0, r3
    aa2a:	bls.w	abec <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    aa2e:	ldr	r3, [pc, #500]	; (ac24 <set_arm_clock+0x20c>)
    aa30:	cmp	r0, r3
    aa32:	bls.w	abfe <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    aa36:	ldr	r2, [pc, #496]	; (ac28 <set_arm_clock+0x210>)
    aa38:	subs	r3, r0, r3
    aa3a:	udiv	r3, r3, r2
    aa3e:	movs	r2, #25
    aa40:	muls	r3, r2
    aa42:	movw	r2, #1575	; 0x627
    aa46:	addw	r3, r3, #1250	; 0x4e2
    aa4a:	cmp	r3, r2
    aa4c:	it	cs
    aa4e:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    aa50:	ldr	r6, [pc, #456]	; (ac1c <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa52:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    aa56:	ldr.w	r2, [r6, #128]	; 0x80
    aa5a:	orr.w	r2, r2, #192	; 0xc0
    aa5e:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa62:	movs	r2, #25
    aa64:	udiv	r2, r3, r2
    aa68:	and.w	r3, r4, #31
    aa6c:	cmp	r3, r2
    aa6e:	bcs.n	aa80 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    aa70:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    aa74:	ldr	r3, [pc, #436]	; (ac2c <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    aa76:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    aa78:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    aa7a:	ldr	r6, [r3, #0]
    aa7c:	cmp	r6, #0
    aa7e:	bge.n	aa7a <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    aa80:	ands.w	r3, r1, #33554432	; 0x2000000
    aa84:	bne.n	aad8 <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    aa86:	ldr	r6, [pc, #424]	; (ac30 <set_arm_clock+0x218>)
    aa88:	ldr	r7, [pc, #424]	; (ac34 <set_arm_clock+0x21c>)
    aa8a:	ldr	r6, [r6, #16]
    aa8c:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    aa8e:	cmp	r6, r7
    aa90:	itee	eq
    aa92:	moveq	r6, #3
    aa94:	movne	r6, #0
    aa96:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    aa98:	lsls	r7, r6, #27
    aa9a:	eor.w	r6, r1, r6, lsl #27
    aa9e:	tst.w	r6, #939524096	; 0x38000000
    aaa2:	beq.n	aaae <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    aaa4:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    aaa8:	ldr	r6, [pc, #368]	; (ac1c <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    aaaa:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    aaac:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    aaae:	lsls	r6, r3, #12
    aab0:	eor.w	r3, r5, r3, lsl #12
    aab4:	tst.w	r3, #12288	; 0x3000
    aab8:	beq.n	aaca <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    aaba:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    aabe:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    aac0:	ldr	r5, [pc, #344]	; (ac1c <set_arm_clock+0x204>)
    aac2:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    aac4:	ldr	r3, [r5, #72]	; 0x48
    aac6:	lsls	r6, r3, #28
    aac8:	bmi.n	aac4 <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    aaca:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    aace:	ldr	r3, [pc, #332]	; (ac1c <set_arm_clock+0x204>)
    aad0:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    aad2:	ldr	r5, [r3, #72]	; 0x48
    aad4:	lsls	r5, r5, #26
    aad6:	bmi.n	aad2 <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    aad8:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aada:	ldr	r7, [pc, #348]	; (ac38 <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    aadc:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    aade:	mul.w	r3, r6, r5
    aae2:	muls	r3, r0
    aae4:	cmp	r3, r7
    aae6:	bls.w	ac04 <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    aaea:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    aaee:	ldr	r0, [pc, #332]	; (ac3c <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    aaf0:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    aaf4:	cmp	r3, r0
    aaf6:	ldr	r0, [pc, #328]	; (ac40 <set_arm_clock+0x228>)
    aaf8:	bhi.w	ac18 <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    aafc:	udiv	r3, r3, r0
    ab00:	cmp	r3, #54	; 0x36
    ab02:	it	cc
    ab04:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab06:	ldr	r7, [pc, #296]	; (ac30 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab08:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab0a:	ldr.w	lr, [pc, #344]	; ac64 <set_arm_clock+0x24c>
    ab0e:	ldr.w	ip, [r7]
    ab12:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ab16:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab1a:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ab1e:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab22:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab24:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab28:	beq.n	ab3e <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ab2a:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    ab2e:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ab32:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    ab36:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    ab38:	ldr	r3, [r7, #0]
    ab3a:	cmp	r3, #0
    ab3c:	bge.n	ab38 <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    ab3e:	ldr	r3, [pc, #220]	; (ac1c <set_arm_clock+0x204>)
    ab40:	subs	r5, #1
    ab42:	ldr	r7, [r3, #16]
    ab44:	and.w	r7, r7, #7
    ab48:	cmp	r7, r5
    ab4a:	beq.n	ab54 <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    ab4c:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    ab4e:	ldr	r5, [r3, #72]	; 0x48
    ab50:	lsls	r7, r5, #15
    ab52:	bmi.n	ab4e <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab54:	subs	r3, r6, #1
    ab56:	lsls	r5, r3, #10
    ab58:	eor.w	r3, r1, r3, lsl #10
    ab5c:	tst.w	r3, #7168	; 0x1c00
    ab60:	beq.n	ab76 <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    ab62:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    ab66:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    ab6a:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    ab6c:	ldr	r3, [pc, #172]	; (ac1c <set_arm_clock+0x204>)
    ab6e:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    ab70:	ldr	r5, [r3, #72]	; 0x48
    ab72:	lsls	r5, r5, #30
    ab74:	bmi.n	ab70 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ab76:	ldr	r3, [pc, #204]	; (ac44 <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    ab78:	ldr	r5, [pc, #204]	; (ac48 <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ab7a:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    ab7c:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ab7e:	itet	ls
    ab80:	ldrls	r5, [pc, #200]	; (ac4c <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    ab82:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ab84:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    ab88:	subs	r6, r3, #1
    ab8a:	lsls	r5, r6, #8
    ab8c:	eor.w	r6, r1, r6, lsl #8
    ab90:	tst.w	r6, #768	; 0x300
    ab94:	ldr	r6, [pc, #132]	; (ac1c <set_arm_clock+0x204>)
    ab96:	beq.n	aba4 <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    ab98:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    ab9c:	and.w	r5, r5, #768	; 0x300
    aba0:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    aba2:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    aba4:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    aba6:	ldr	r5, [pc, #116]	; (ac1c <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    aba8:	bic.w	r1, r1, #33554432	; 0x2000000
    abac:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    abae:	ldr	r1, [r5, #72]	; 0x48
    abb0:	lsls	r1, r1, #26
    abb2:	bmi.n	abae <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    abb4:	ldr	r1, [pc, #152]	; (ac50 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    abb6:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    abba:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    abbc:	ldr	r1, [pc, #148]	; (ac54 <set_arm_clock+0x23c>)
    abbe:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    abc0:	mov.w	r3, #4294967295
    abc4:	ldr	r1, [pc, #144]	; (ac58 <set_arm_clock+0x240>)
    abc6:	udiv	r1, r0, r1
    abca:	udiv	r3, r3, r1
    abce:	ldr	r1, [pc, #140]	; (ac5c <set_arm_clock+0x244>)
    abd0:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    abd2:	and.w	r3, r4, #31
    abd6:	cmp	r2, r3
    abd8:	bcs.n	abea <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    abda:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    abde:	ldr	r3, [pc, #76]	; (ac2c <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    abe0:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    abe2:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    abe4:	ldr	r2, [r3, #0]
    abe6:	cmp	r2, #0
    abe8:	bge.n	abe4 <set_arm_clock+0x1cc>
	}

	return frequency;
}
    abea:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    abec:	ldr	r6, [pc, #112]	; (ac60 <set_arm_clock+0x248>)
    abee:	movw	r3, #1150	; 0x47e
    abf2:	movw	r2, #950	; 0x3b6
    abf6:	cmp	r0, r6
    abf8:	it	ls
    abfa:	movls	r3, r2
    abfc:	b.n	aa50 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    abfe:	movw	r3, #1250	; 0x4e2
    ac02:	b.n	aa50 <set_arm_clock+0x38>
		if (div_arm < 8) {
    ac04:	cmp	r5, #8
    ac06:	beq.n	ac0c <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    ac08:	adds	r5, #1
    ac0a:	b.n	aade <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    ac0c:	cmp	r6, #4
    ac0e:	bhi.w	aaea <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    ac12:	adds	r6, #1
				div_arm = 1;
    ac14:	movs	r5, #1
    ac16:	b.n	aade <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    ac18:	movs	r3, #108	; 0x6c
    ac1a:	b.n	ab06 <set_arm_clock+0xee>
    ac1c:	.word	0x400fc000
    ac20:	.word	0x1f78a400
    ac24:	.word	0x23c34600
    ac28:	.word	0x01ab3f00
    ac2c:	.word	0x40080000
    ac30:	.word	0x400d8000
    ac34:	.word	0x80003040
    ac38:	.word	0x269fb1ff
    ac3c:	.word	0x4df67eff
    ac40:	.word	0x00b71b00
    ac44:	.word	0x08f0d17f
    ac48:	.word	0x2cb4177f
    ac4c:	.word	0x08f0d180
    ac50:	.word	0x20001d2c
    ac54:	.word	0x20001d28
    ac58:	.word	0x000f4240
    ac5c:	.word	0x20014ce0
    ac60:	.word	0x016e3600
    ac64:	.word	0x8001307f

0000ac68 <endpoint0_receive>:
{
    ac68:	push	{r4, r5, lr}
    ac6a:	ldr	r4, [pc, #136]	; (acf4 <endpoint0_receive+0x8c>)
	if (len > 0) {
    ac6c:	cbz	r1, acb0 <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac6e:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ac70:	ldr	r3, [pc, #132]	; (acf8 <endpoint0_receive+0x90>)
    ac72:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac74:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ac78:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    ac7a:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ac7c:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ac7e:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    ac82:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ac84:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ac86:	add.w	r1, r0, #8192	; 0x2000
    ac8a:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ac8c:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ac90:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ac94:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ac96:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    ac98:	movs	r3, #0
    ac9a:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    ac9c:	ldr	r3, [pc, #92]	; (acfc <endpoint0_receive+0x94>)
    ac9e:	ldr.w	r1, [r3, #432]	; 0x1b0
    aca2:	orrs	r1, r5
    aca4:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    aca8:	ldr.w	r1, [r3, #432]	; 0x1b0
    acac:	cmp	r1, #0
    acae:	bne.n	aca8 <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    acb0:	ldr	r3, [pc, #76]	; (ad00 <endpoint0_receive+0x98>)
    acb2:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    acb4:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    acb6:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    acba:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    acbc:	movw	r1, #32896	; 0x8080
    acc0:	it	eq
    acc2:	moveq	r1, #128	; 0x80
    acc4:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    acc6:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    acc8:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    accc:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    acce:	mov.w	r1, #65537	; 0x10001
    acd2:	ldr	r3, [pc, #40]	; (acfc <endpoint0_receive+0x94>)
    acd4:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    acd8:	ldr.w	r1, [r3, #432]	; 0x1b0
    acdc:	orr.w	r1, r1, #65536	; 0x10000
    ace0:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ace4:	ldr	r1, [pc, #28]	; (ad04 <endpoint0_receive+0x9c>)
    ace6:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    ace8:	ldr.w	r2, [r3, #432]	; 0x1b0
    acec:	cmp	r2, #0
    acee:	bne.n	ace8 <endpoint0_receive+0x80>
}
    acf0:	pop	{r4, r5, pc}
    acf2:	nop
    acf4:	.word	0x20000000
    acf8:	.word	0x200026e0
    acfc:	.word	0x402e0000
    ad00:	.word	0x200026c0
    ad04:	.word	0x20014b9c

0000ad08 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    ad08:	ldr	r3, [r0, #56]	; 0x38
{
    ad0a:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    ad0c:	cbz	r3, ad16 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    ad0e:	ldr	r3, [r2, #4]
    ad10:	orr.w	r3, r3, #32768	; 0x8000
    ad14:	str	r3, [r2, #4]
	}
	__disable_irq();
    ad16:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ad18:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    ad1a:	ldr	r3, [pc, #96]	; (ad7c <schedule_transfer+0x74>)
    ad1c:	cbz	r4, ad68 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    ad1e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ad20:	ldr.w	r4, [r3, #432]	; 0x1b0
    ad24:	tst	r4, r1
    ad26:	bne.n	ad62 <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    ad28:	ldr	r6, [pc, #84]	; (ad80 <schedule_transfer+0x78>)
    ad2a:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ad2c:	ldr.w	r4, [r3, #320]	; 0x140
    ad30:	orr.w	r4, r4, #16384	; 0x4000
    ad34:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    ad38:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ad3c:	ldr.w	r5, [r3, #320]	; 0x140
    ad40:	lsls	r5, r5, #17
    ad42:	bmi.n	ad4e <schedule_transfer+0x46>
    ad44:	ldr	r5, [r6, #4]
    ad46:	subs	r5, r5, r7
    ad48:	cmp.w	r5, #2400	; 0x960
    ad4c:	bcc.n	ad2c <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ad4e:	ands	r4, r1
    ad50:	bne.n	ad62 <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    ad52:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    ad56:	ldr	r4, [pc, #36]	; (ad7c <schedule_transfer+0x74>)
    ad58:	ldr.w	r3, [r4, #432]	; 0x1b0
    ad5c:	orrs	r3, r1
    ad5e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    ad62:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ad64:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ad66:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    ad68:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ad6c:	ldr.w	r4, [r3, #432]	; 0x1b0
    ad70:	orrs	r1, r4
    ad72:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ad76:	str	r2, [r0, #48]	; 0x30
    ad78:	b.n	ad62 <schedule_transfer+0x5a>
    ad7a:	nop
    ad7c:	.word	0x402e0000
    ad80:	.word	0xe0001000

0000ad84 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    ad84:	push	{r4, r5, r6, lr}
    ad86:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    ad88:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    ad8a:	cbz	r0, ad9c <run_callbacks+0x18>
    ad8c:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    ad8e:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    ad90:	ldr	r3, [r2, #4]
    ad92:	ands.w	r3, r3, #128	; 0x80
    ad96:	beq.n	ad9e <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    ad98:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    ad9a:	cbnz	r5, adac <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    ad9c:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    ad9e:	ldr	r2, [r2, #0]
		count++;
    ada0:	adds	r5, #1
		if ((uint32_t)t == 1) {
    ada2:	cmp	r2, #1
    ada4:	bne.n	ad90 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    ada6:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    adaa:	b.n	ad9a <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    adac:	ldr	r6, [r0, #0]
		count--;
    adae:	subs	r5, #1
		ep->callback_function(first);
    adb0:	ldr	r3, [r4, #56]	; 0x38
    adb2:	blx	r3
		first = next;
    adb4:	mov	r0, r6
    adb6:	b.n	ad9a <run_callbacks+0x16>

0000adb8 <usb_endpoint_config>:
{
    adb8:	push	{r4, r5, r6, lr}
    adba:	mov	r4, r0
    adbc:	mov	r6, r1
    adbe:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    adc0:	movs	r1, #0
    adc2:	movs	r2, #60	; 0x3c
    adc4:	adds	r0, #4
    adc6:	bl	a1d4 <memset>
	qh->next = 1; // Terminate bit = 1
    adca:	movs	r3, #1
	qh->config = config;
    adcc:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    adce:	str	r3, [r4, #8]
	qh->callback_function = callback;
    add0:	str	r5, [r4, #56]	; 0x38
}
    add2:	pop	{r4, r5, r6, pc}

0000add4 <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    add4:	ldr	r2, [pc, #124]	; (ae54 <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    add6:	push	{r4, lr}
	if (len > 0) {
    add8:	cbz	r1, ae1e <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    adda:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    addc:	ldr	r3, [pc, #120]	; (ae58 <endpoint0_transmit.constprop.0+0x84>)
    adde:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ade0:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ade4:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ade6:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ade8:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    adea:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    adee:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    adf0:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    adf2:	add.w	r1, r0, #8192	; 0x2000
    adf6:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    adf8:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    adfc:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ae00:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ae02:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    ae04:	movs	r3, #0
    ae06:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    ae08:	ldr	r3, [pc, #80]	; (ae5c <endpoint0_transmit.constprop.0+0x88>)
    ae0a:	ldr.w	r1, [r3, #432]	; 0x1b0
    ae0e:	orr.w	r1, r1, #65536	; 0x10000
    ae12:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ae16:	ldr.w	r1, [r3, #432]	; 0x1b0
    ae1a:	cmp	r1, #0
    ae1c:	bne.n	ae16 <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    ae1e:	ldr	r3, [pc, #64]	; (ae60 <endpoint0_transmit.constprop.0+0x8c>)
    ae20:	movs	r1, #1
    ae22:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ae24:	movs	r1, #128	; 0x80
    ae26:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    ae28:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    ae2a:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    ae2e:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ae30:	mov.w	r2, #65537	; 0x10001
    ae34:	ldr	r3, [pc, #36]	; (ae5c <endpoint0_transmit.constprop.0+0x88>)
    ae36:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    ae3a:	ldr.w	r2, [r3, #432]	; 0x1b0
    ae3e:	orr.w	r2, r2, #1
    ae42:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ae46:	ldr	r2, [pc, #28]	; (ae64 <endpoint0_transmit.constprop.0+0x90>)
    ae48:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    ae4a:	ldr.w	r2, [r3, #432]	; 0x1b0
    ae4e:	cmp	r2, #0
    ae50:	bne.n	ae4a <endpoint0_transmit.constprop.0+0x76>
}
    ae52:	pop	{r4, pc}
    ae54:	.word	0x20000000
    ae58:	.word	0x200026e0
    ae5c:	.word	0x402e0000
    ae60:	.word	0x200026c0
    ae64:	.word	0x20014b9c

0000ae68 <usb_start_sof_interrupts>:
	__disable_irq();
    ae68:	cpsid	i
	sof_usage |= (1 << interface);
    ae6a:	ldr	r2, [pc, #40]	; (ae94 <usb_start_sof_interrupts+0x2c>)
    ae6c:	movs	r3, #1
    ae6e:	lsl.w	r0, r3, r0
    ae72:	ldrb	r3, [r2, #0]
    ae74:	orrs	r0, r3
    ae76:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    ae78:	ldr	r2, [pc, #28]	; (ae98 <usb_start_sof_interrupts+0x30>)
    ae7a:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    ae7e:	lsls	r1, r3, #24
    ae80:	bmi.n	ae8e <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ae82:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ae84:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ae86:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ae8a:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    ae8e:	cpsie	i
}
    ae90:	bx	lr
    ae92:	nop
    ae94:	.word	0x200155d7
    ae98:	.word	0x402e0000

0000ae9c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    ae9c:	movs	r3, #1
    ae9e:	ldr	r2, [pc, #32]	; (aec0 <usb_stop_sof_interrupts+0x24>)
    aea0:	lsl.w	r0, r3, r0
    aea4:	ldrb	r3, [r2, #0]
    aea6:	bic.w	r0, r3, r0
    aeaa:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    aeac:	cbnz	r0, aebc <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    aeae:	ldr	r2, [pc, #20]	; (aec4 <usb_stop_sof_interrupts+0x28>)
    aeb0:	ldr.w	r3, [r2, #328]	; 0x148
    aeb4:	bic.w	r3, r3, #128	; 0x80
    aeb8:	str.w	r3, [r2, #328]	; 0x148
}
    aebc:	bx	lr
    aebe:	nop
    aec0:	.word	0x200155d7
    aec4:	.word	0x402e0000

0000aec8 <usb_isr>:
{
    aec8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    aecc:	ldr	r4, [pc, #676]	; (b174 <usb_isr+0x2ac>)
    aece:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    aed2:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    aed4:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    aed8:	bmi.n	af40 <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    aeda:	lsls	r1, r6, #25
    aedc:	bmi.w	b306 <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    aee0:	lsls	r4, r6, #7
    aee2:	bpl.n	aeec <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    aee4:	ldr	r3, [pc, #656]	; (b178 <usb_isr+0x2b0>)
    aee6:	ldr	r3, [r3, #0]
    aee8:	cbz	r3, aeec <usb_isr+0x24>
    aeea:	blx	r3
	if (status & USB_USBSTS_TI1) {
    aeec:	lsls	r0, r6, #6
    aeee:	bpl.n	aef8 <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    aef0:	ldr	r3, [pc, #648]	; (b17c <usb_isr+0x2b4>)
    aef2:	ldr	r3, [r3, #0]
    aef4:	cbz	r3, aef8 <usb_isr+0x30>
    aef6:	blx	r3
	if (status & USB_USBSTS_PCI) {
    aef8:	lsls	r1, r6, #29
    aefa:	bpl.n	af0e <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    aefc:	ldr	r3, [pc, #628]	; (b174 <usb_isr+0x2ac>)
    aefe:	ldr	r2, [pc, #640]	; (b180 <usb_isr+0x2b8>)
    af00:	ldr.w	r3, [r3, #388]	; 0x184
    af04:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    af08:	it	ne
    af0a:	movne	r3, #1
			usb_high_speed = 0;
    af0c:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    af0e:	ldr	r3, [pc, #612]	; (b174 <usb_isr+0x2ac>)
    af10:	ldr.w	r3, [r3, #328]	; 0x148
    af14:	lsls	r2, r3, #24
    af16:	bpl.w	b336 <usb_isr+0x46e>
    af1a:	lsls	r3, r6, #24
    af1c:	bpl.w	b336 <usb_isr+0x46e>
		if (usb_reboot_timer) {
    af20:	ldr	r2, [pc, #608]	; (b184 <usb_isr+0x2bc>)
    af22:	ldrb	r3, [r2, #0]
    af24:	cmp	r3, #0
    af26:	beq.w	b336 <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    af2a:	subs	r3, #1
    af2c:	uxtb	r3, r3
    af2e:	strb	r3, [r2, #0]
    af30:	cmp	r3, #0
    af32:	bne.w	b336 <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    af36:	movs	r0, #3
    af38:	bl	ae9c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    af3c:	bl	120a0 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    af40:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    af44:	ldr	r7, [pc, #576]	; (b188 <usb_isr+0x2c0>)
		while (setupstatus) {
    af46:	cmp	r3, #0
    af48:	bne.n	afd2 <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    af4a:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    af4e:	cmp	r5, #0
    af50:	beq.n	aeda <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    af52:	ldr	r2, [pc, #568]	; (b18c <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    af54:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    af58:	ldr	r1, [r2, #0]
    af5a:	tst	r5, r1
    af5c:	beq.n	af94 <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    af5e:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    af60:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    af64:	ldr	r2, [pc, #552]	; (b190 <usb_isr+0x2c8>)
    af66:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    af68:	ldrh	r2, [r2, #0]
    af6a:	cmp	r2, r1
    af6c:	bne.w	b2c8 <usb_isr+0x400>
    af70:	uxth	r3, r3
    af72:	cbnz	r3, af94 <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    af74:	ldr	r2, [pc, #540]	; (b194 <usb_isr+0x2cc>)
    af76:	ldr	r3, [pc, #544]	; (b198 <usb_isr+0x2d0>)
    af78:	ldr	r0, [r2, #0]
    af7a:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    af7c:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    af7e:	ldrb	r2, [r2, #6]
    af80:	str	r0, [r3, #0]
    af82:	strh	r1, [r3, #4]
    af84:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    af86:	bne.n	af94 <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    af88:	movs	r0, #3
    af8a:	bl	ae68 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    af8e:	ldr	r3, [pc, #500]	; (b184 <usb_isr+0x2bc>)
    af90:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    af92:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    af94:	ldr	r3, [pc, #516]	; (b19c <usb_isr+0x2d4>)
    af96:	ldr	r3, [r3, #0]
			if (completestatus) {
    af98:	ands	r5, r3
    af9a:	beq.n	aeda <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    af9c:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    af9e:	ldr.w	r8, [pc, #512]	; b1a0 <usb_isr+0x2d8>
					tx &= ~(1<<p);
    afa2:	mov.w	r9, #1
				while (tx) {
    afa6:	cmp	r4, #0
    afa8:	bne.w	b2ea <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    afac:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    afae:	ldr	r7, [pc, #496]	; (b1a0 <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    afb0:	mov.w	r8, #1
				while(rx) {
    afb4:	cmp	r5, #0
    afb6:	beq.n	aeda <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    afb8:	rbit	r4, r5
    afbc:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    afc0:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    afc4:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    afc8:	bl	ad84 <run_callbacks>
					rx &= ~(1<<p);
    afcc:	bic.w	r5, r5, r4
    afd0:	b.n	afb4 <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    afd2:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    afd6:	ldr	r3, [pc, #456]	; (b1a0 <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    afd8:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    afdc:	ldr.w	r2, [r4, #320]	; 0x140
    afe0:	orr.w	r2, r2, #8192	; 0x2000
    afe4:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    afe8:	ldr.w	r2, [r4, #320]	; 0x140
    afec:	lsls	r2, r2, #18
    afee:	bpl.n	afdc <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    aff0:	ldr.w	r2, [r4, #320]	; 0x140
    aff4:	bic.w	r2, r2, #8192	; 0x2000
    aff8:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    affc:	mov.w	r2, #65537	; 0x10001
    b000:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    b004:	ldr.w	r2, [r4, #436]	; 0x1b4
    b008:	ands.w	r8, r2, #65537	; 0x10001
    b00c:	bne.n	b004 <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    b00e:	uxth	r1, r5
    b010:	ldr	r2, [pc, #376]	; (b18c <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    b012:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    b016:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    b01a:	beq.w	b156 <usb_isr+0x28e>
    b01e:	bhi.n	b0b6 <usb_isr+0x1ee>
    b020:	movw	r2, #770	; 0x302
    b024:	cmp	r1, r2
    b026:	beq.w	b1fa <usb_isr+0x332>
    b02a:	bhi.n	b04a <usb_isr+0x182>
    b02c:	cmp	r1, #130	; 0x82
    b02e:	beq.w	b1c4 <usb_isr+0x2fc>
    b032:	cmp.w	r1, #258	; 0x102
    b036:	beq.w	b220 <usb_isr+0x358>
    b03a:	cmp	r1, #128	; 0x80
    b03c:	beq.w	b166 <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b040:	mov.w	r3, #65537	; 0x10001
    b044:	str.w	r3, [r4, #448]	; 0x1c0
    b048:	b.n	b150 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    b04a:	cmp.w	r1, #1280	; 0x500
    b04e:	beq.n	b13a <usb_isr+0x272>
    b050:	sub.w	r1, r1, #1664	; 0x680
    b054:	cmp	r1, #1
    b056:	bhi.n	b040 <usb_isr+0x178>
    b058:	ldr	r2, [pc, #328]	; (b1a4 <usb_isr+0x2dc>)
    b05a:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b05e:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b062:	ldr	r1, [r2, #4]
    b064:	cmp	r1, #0
    b066:	beq.n	b040 <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b068:	ldrh.w	lr, [r2]
    b06c:	mov	r0, r5
    b06e:	cmp	lr, r5
    b070:	bne.w	b290 <usb_isr+0x3c8>
    b074:	ldrh.w	lr, [r2, #2]
    b078:	cmp	lr, ip
    b07a:	bne.w	b290 <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    b07e:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    b080:	mov.w	r8, r3, lsr #16
    b084:	ldr	r3, [pc, #288]	; (b1a8 <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    b086:	cmp	r5, #3
					datalen = *(list->addr);
    b088:	ite	eq
    b08a:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    b08c:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b08e:	cmp	r8, r2
    b090:	it	cs
    b092:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    b094:	cmp.w	r0, #512	; 0x200
    b098:	bne.w	b242 <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b09c:	ldr	r2, [pc, #224]	; (b180 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b09e:	ldr	r1, [pc, #268]	; (b1ac <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    b0a0:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b0a2:	mov	r2, r8
    b0a4:	ldr	r0, [pc, #264]	; (b1b0 <usb_isr+0x2e8>)
    b0a6:	cmp	r5, #0
    b0a8:	it	ne
    b0aa:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b0ac:	mov	r0, r3
    b0ae:	bl	a218 <memcpy>
    b0b2:	mov	r3, r0
    b0b4:	b.n	b264 <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    b0b6:	movw	r2, #8993	; 0x2321
    b0ba:	cmp	r1, r2
    b0bc:	beq.n	b100 <usb_isr+0x238>
    b0be:	bhi.n	b10c <usb_isr+0x244>
    b0c0:	movw	r2, #8225	; 0x2021
    b0c4:	cmp	r1, r2
    b0c6:	beq.w	b2ae <usb_isr+0x3e6>
    b0ca:	movw	r2, #8737	; 0x2221
    b0ce:	cmp	r1, r2
    b0d0:	beq.w	b294 <usb_isr+0x3cc>
    b0d4:	cmp.w	r1, #2304	; 0x900
    b0d8:	bne.n	b040 <usb_isr+0x178>
		usb_configuration = setup.wValue;
    b0da:	ldr	r3, [pc, #216]	; (b1b4 <usb_isr+0x2ec>)
    b0dc:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b0e0:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    b0e4:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b0e6:	ldr	r3, [pc, #208]	; (b1b8 <usb_isr+0x2f0>)
    b0e8:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b0ec:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b0f0:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    b0f4:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    b0f8:	bl	a4e8 <usb_serial_configure>
		usb_mtp_configure();
    b0fc:	bl	c108 <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    b100:	movs	r2, #0
    b102:	mov	r1, r2
    b104:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b106:	bl	ac68 <endpoint0_receive>
			return;
    b10a:	b.n	b150 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    b10c:	movw	r2, #25633	; 0x6421
    b110:	cmp	r1, r2
    b112:	beq.w	b2c2 <usb_isr+0x3fa>
    b116:	movw	r2, #26529	; 0x67a1
    b11a:	cmp	r1, r2
    b11c:	bne.n	b040 <usb_isr+0x178>
		if (setup.wLength >= 4) {
    b11e:	cmp.w	r3, #262144	; 0x40000
    b122:	bcc.n	b040 <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    b124:	ldr	r3, [pc, #148]	; (b1bc <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    b126:	movs	r1, #4
    b128:	ldr	r0, [pc, #104]	; (b194 <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    b12a:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    b12c:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    b12e:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    b130:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    b132:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    b136:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    b138:	b.n	b160 <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b13a:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    b13c:	mov	r2, r8
    b13e:	mov	r1, r8
    b140:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b142:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    b144:	bl	ac68 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b148:	orr.w	r5, r5, #16777216	; 0x1000000
    b14c:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b150:	ldr.w	r3, [r4, #428]	; 0x1ac
    b154:	b.n	af46 <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    b156:	ldr	r3, [pc, #92]	; (b1b4 <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b158:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    b15a:	ldr	r0, [pc, #100]	; (b1c0 <usb_isr+0x2f8>)
    b15c:	ldrb	r3, [r3, #0]
    b15e:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b160:	bl	add4 <endpoint0_transmit.constprop.0>
				return;
    b164:	b.n	b150 <usb_isr+0x288>
		reply_buffer[0] = 0;
    b166:	ldr	r0, [pc, #88]	; (b1c0 <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b168:	movs	r1, #2
		reply_buffer[0] = 0;
    b16a:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    b16e:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    b172:	b.n	b160 <usb_isr+0x298>
    b174:	.word	0x402e0000
    b178:	.word	0x2001538c
    b17c:	.word	0x20015390
    b180:	.word	0x200155de
    b184:	.word	0x200155df
    b188:	.word	0x402e01c0
    b18c:	.word	0x20014b9c
    b190:	.word	0x20007dc0
    b194:	.word	0x200155b3
    b198:	.word	0x20015380
    b19c:	.word	0x20014ba0
    b1a0:	.word	0x20000000
    b1a4:	.word	0x200009b8
    b1a8:	.word	0x20202000
    b1ac:	.word	0x6000264c
    b1b0:	.word	0x600026b5
    b1b4:	.word	0x200155dd
    b1b8:	.word	0x00cc0002
    b1bc:	.word	0x20002321
    b1c0:	.word	0x200155bd
		endpoint = setup.wIndex & 0x7F;
    b1c4:	uxth	r0, r3
		if (endpoint > 7) break;
    b1c6:	ands.w	r3, r3, #120	; 0x78
    b1ca:	bne.w	b040 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b1ce:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b1d2:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b1d4:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    b1d8:	ldr	r2, [pc, #352]	; (b33c <usb_isr+0x474>)
    b1da:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    b1dc:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b1de:	bpl.n	b1f4 <usb_isr+0x32c>
    b1e0:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    b1e4:	it	ne
    b1e6:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    b1e8:	mov.w	r1, #2
    b1ec:	ldr	r0, [pc, #332]	; (b33c <usb_isr+0x474>)
			reply_buffer[0] = 1;
    b1ee:	it	ne
    b1f0:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b1f2:	b.n	b160 <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b1f4:	tst.w	r1, #1
    b1f8:	b.n	b1e4 <usb_isr+0x31c>
		if (endpoint > 7) break;
    b1fa:	tst.w	r3, #120	; 0x78
    b1fe:	uxth	r2, r3
    b200:	bne.w	b040 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b204:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b208:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b20c:	ldr.w	r2, [r7, r3, lsl #2]
    b210:	ite	ne
    b212:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b216:	orreq.w	r2, r2, #1
    b21a:	str.w	r2, [r7, r3, lsl #2]
    b21e:	b.n	b100 <usb_isr+0x238>
		if (endpoint > 7) break;
    b220:	tst.w	r3, #120	; 0x78
    b224:	uxth	r2, r3
    b226:	bne.w	b040 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b22a:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b22e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b232:	ldr.w	r2, [r7, r3, lsl #2]
    b236:	ite	ne
    b238:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b23c:	biceq.w	r2, r2, #1
    b240:	b.n	b21a <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    b242:	cmp.w	r0, #1792	; 0x700
    b246:	bne.n	b28c <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b248:	ldr	r2, [pc, #244]	; (b340 <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b24a:	ldr	r0, [pc, #248]	; (b344 <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    b24c:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b24e:	mov	r2, r8
    b250:	ldr	r1, [pc, #244]	; (b348 <usb_isr+0x480>)
    b252:	cmp	r5, #0
    b254:	it	ne
    b256:	movne	r1, r0
    b258:	mov	r0, r3
    b25a:	bl	a218 <memcpy>
					usb_descriptor_buffer[1] = 7;
    b25e:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    b260:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    b262:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b264:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b268:	add.w	r0, r3, r8
	asm("dsb");
    b26c:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b270:	mov.w	r3, #3758153728	; 0xe000e000
    b274:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    b278:	adds	r5, #32
	} while (location < end_addr);
    b27a:	cmp	r0, r5
    b27c:	bhi.n	b274 <usb_isr+0x3ac>
	asm("dsb");
    b27e:	dsb	sy
	asm("isb");
    b282:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b286:	ldr	r0, [pc, #196]	; (b34c <usb_isr+0x484>)
    b288:	mov	r1, r8
    b28a:	b.n	b160 <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b28c:	mov	r2, r8
    b28e:	b.n	b0ac <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b290:	adds	r2, #12
    b292:	b.n	b062 <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b294:	uxth	r3, r3
    b296:	cmp	r3, #0
    b298:	bne.w	b100 <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b29c:	ldr	r3, [pc, #176]	; (b350 <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b29e:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b2a2:	ldr	r2, [r3, #0]
    b2a4:	ldr	r3, [pc, #172]	; (b354 <usb_isr+0x48c>)
    b2a6:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b2a8:	ldr	r3, [pc, #172]	; (b358 <usb_isr+0x490>)
    b2aa:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    b2ac:	b.n	b100 <usb_isr+0x238>
		if (setup.wLength != 7) break;
    b2ae:	lsrs	r1, r3, #16
    b2b0:	cmp	r1, #7
		if (setup.wLength == 6) {
    b2b2:	bne.w	b040 <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    b2b6:	ldr	r2, [pc, #164]	; (b35c <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b2b8:	ldr	r0, [pc, #164]	; (b360 <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    b2ba:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b2be:	movs	r2, #1
    b2c0:	b.n	b106 <usb_isr+0x23e>
		if (setup.wLength == 6) {
    b2c2:	lsrs	r1, r3, #16
    b2c4:	cmp	r1, #6
    b2c6:	b.n	b2b2 <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    b2c8:	movw	r3, #25633	; 0x6421
    b2cc:	cmp	r2, r3
    b2ce:	bne.w	af94 <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    b2d2:	ldr	r3, [pc, #140]	; (b360 <usb_isr+0x498>)
    b2d4:	ldrb	r2, [r3, #0]
    b2d6:	cmp	r2, #1
    b2d8:	bne.w	af94 <usb_isr+0xcc>
    b2dc:	ldrb	r3, [r3, #1]
    b2de:	cmp	r3, #64	; 0x40
    b2e0:	bne.w	af94 <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b2e4:	ldr	r3, [pc, #124]	; (b364 <usb_isr+0x49c>)
    b2e6:	movs	r2, #25
    b2e8:	b.n	af92 <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    b2ea:	rbit	r7, r4
    b2ee:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b2f2:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    b2f6:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b2fa:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    b2fc:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b300:	bl	ad84 <run_callbacks>
					tx &= ~(1<<p);
    b304:	b.n	afa6 <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b306:	ldr	r3, [pc, #96]	; (b368 <usb_isr+0x4a0>)
    b308:	ldr.w	r2, [r3, #428]	; 0x1ac
    b30c:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b310:	ldr.w	r2, [r3, #444]	; 0x1bc
    b314:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b318:	ldr.w	r4, [r3, #432]	; 0x1b0
    b31c:	cmp	r4, #0
    b31e:	bne.n	b318 <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b320:	mov.w	r2, #4294967295
    b324:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b328:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    b32c:	bl	a4e4 <usb_serial_reset>
		endpointN_notify_mask = 0;
    b330:	ldr	r3, [pc, #56]	; (b36c <usb_isr+0x4a4>)
    b332:	str	r4, [r3, #0]
    b334:	b.n	aee0 <usb_isr+0x18>
}
    b336:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b33a:	nop
    b33c:	.word	0x200155bd
    b340:	.word	0x200155de
    b344:	.word	0x6000264c
    b348:	.word	0x600026b5
    b34c:	.word	0x20202000
    b350:	.word	0x20015374
    b354:	.word	0x20015388
    b358:	.word	0x200155dc
    b35c:	.word	0x20007dc0
    b360:	.word	0x200155b3
    b364:	.word	0x20002321
    b368:	.word	0x402e0000
    b36c:	.word	0x20014ba0

0000b370 <usb_config_rx>:
{
    b370:	push	{r4, r5, r6, lr}
    b372:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b374:	subs	r3, r0, #2
{
    b376:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b378:	cmp	r3, #3
    b37a:	bhi.n	b3a4 <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b37c:	clz	r4, r2
    b380:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b382:	ldr	r0, [pc, #36]	; (b3a8 <usb_config_rx+0x38>)
    b384:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b386:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b388:	add.w	r0, r0, r5, lsl #7
    b38c:	orr.w	r1, r1, r4, lsl #29
    b390:	bl	adb8 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    b394:	cbz	r6, b3a4 <usb_config_rx+0x34>
    b396:	ldr	r2, [pc, #20]	; (b3ac <usb_config_rx+0x3c>)
    b398:	movs	r3, #1
    b39a:	lsl.w	r0, r3, r5
    b39e:	ldr	r3, [r2, #0]
    b3a0:	orrs	r0, r3
    b3a2:	str	r0, [r2, #0]
}
    b3a4:	pop	{r4, r5, r6, pc}
    b3a6:	nop
    b3a8:	.word	0x20000000
    b3ac:	.word	0x20014ba0

0000b3b0 <usb_config_tx>:
{
    b3b0:	push	{r4, r5, r6, lr}
    b3b2:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b3b4:	subs	r3, r0, #2
{
    b3b6:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b3b8:	cmp	r3, #3
    b3ba:	bhi.n	b3e6 <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b3bc:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b3c0:	ldr	r0, [pc, #36]	; (b3e8 <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b3c2:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b3c4:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b3c6:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b3c8:	add.w	r0, r0, r4, lsl #7
    b3cc:	orr.w	r1, r1, r5, lsl #29
    b3d0:	adds	r0, #64	; 0x40
    b3d2:	bl	adb8 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b3d6:	cbz	r6, b3e6 <usb_config_tx+0x36>
    b3d8:	ldr	r2, [pc, #16]	; (b3ec <usb_config_tx+0x3c>)
    b3da:	adds	r4, #16
    b3dc:	movs	r3, #1
    b3de:	ldr	r1, [r2, #0]
    b3e0:	lsls	r3, r4
    b3e2:	orrs	r3, r1
    b3e4:	str	r3, [r2, #0]
}
    b3e6:	pop	{r4, r5, r6, pc}
    b3e8:	.word	0x20000000
    b3ec:	.word	0x20014ba0

0000b3f0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b3f0:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b3f2:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    b3f4:	orr.w	r2, r2, #128	; 0x80
    b3f8:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    b3fa:	add.w	r2, r1, #4096	; 0x1000
    b3fe:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    b400:	add.w	r2, r1, #8192	; 0x2000
{
    b404:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    b406:	str	r2, [r0, #16]
	transfer->next = 1;
    b408:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    b40a:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    b40e:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    b412:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    b414:	str	r2, [r0, #20]
	transfer->callback_param = param;
    b416:	strd	r1, r3, [r0, #24]
}
    b41a:	pop	{r4, pc}

0000b41c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b41c:	subs	r3, r0, #2
{
    b41e:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b420:	cmp	r3, #3
    b422:	bhi.n	b43a <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b424:	ldr	r3, [pc, #20]	; (b43c <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b426:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b42a:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b42e:	movs	r3, #1
    b430:	adds	r0, #64	; 0x40
    b432:	lsl.w	r1, r3, r1
    b436:	b.w	ad08 <schedule_transfer>
}
    b43a:	bx	lr
    b43c:	.word	0x20000000

0000b440 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b440:	subs	r3, r0, #2
{
    b442:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b444:	cmp	r3, #3
    b446:	bhi.n	b456 <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b448:	movs	r1, #1
    b44a:	ldr	r3, [pc, #12]	; (b458 <usb_receive+0x18>)
    b44c:	lsls	r1, r0
    b44e:	add.w	r0, r3, r0, lsl #7
    b452:	b.w	ad08 <schedule_transfer>
}
    b456:	bx	lr
    b458:	.word	0x20000000

0000b45c <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    b45c:	ldr	r2, [pc, #32]	; (b480 <usb_transfer_status+0x24>)
{
    b45e:	mov	r1, r0
	cmd = USB1_USBCMD;
    b460:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    b464:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    b466:	orr.w	r3, r3, #16384	; 0x4000
    b46a:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    b46e:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    b470:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    b474:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    b476:	tst.w	r3, #16384	; 0x4000
    b47a:	beq.n	b464 <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    b47c:	bx	lr
    b47e:	nop
    b480:	.word	0x402e0000

0000b484 <ultoa>:
{
    b484:	push	{r4, r5, r6, lr}
	int i=0, j;
    b486:	movs	r4, #0
		digit = val % radix;
    b488:	udiv	r5, r0, r2
    b48c:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b490:	uxtb	r3, r6
    b492:	cmp	r6, #9
    b494:	ite	ls
    b496:	addls	r3, #48	; 0x30
    b498:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    b49a:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b49c:	uxtb	r3, r3
    b49e:	strb	r3, [r1, r4]
		if (val == 0) break;
    b4a0:	bhi.n	b4a8 <ultoa+0x24>
		i++;
    b4a2:	adds	r4, #1
		val /= radix;
    b4a4:	mov	r0, r5
		digit = val % radix;
    b4a6:	b.n	b488 <ultoa+0x4>
	buf[i + 1] = 0;
    b4a8:	adds	r3, r1, r4
    b4aa:	movs	r2, #0
    b4ac:	subs	r0, r1, #1
    b4ae:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    b4b0:	subs	r5, r4, r2
    b4b2:	cmp	r2, r5
    b4b4:	blt.n	b4ba <ultoa+0x36>
}
    b4b6:	mov	r0, r1
    b4b8:	pop	{r4, r5, r6, pc}
		t = buf[j];
    b4ba:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    b4be:	adds	r2, #1
		buf[j] = buf[i];
    b4c0:	ldrb	r6, [r3, #0]
    b4c2:	strb	r6, [r0, #0]
		buf[i] = t;
    b4c4:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    b4c8:	b.n	b4b0 <ultoa+0x2c>
	...

0000b4cc <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    b4cc:	vcmp.f32	s0, s0
{
    b4d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    b4d4:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    b4d8:	eor.w	r5, r0, r0, asr #31
{
    b4dc:	mov	r7, r0
    b4de:	mov	r6, r1
    b4e0:	mov	r4, r2
	int awidth = abs(width);
    b4e2:	sub.w	r5, r5, r0, asr #31
{
    b4e6:	vpush	{d8}
    b4ea:	vmov.f32	s16, s0
    b4ee:	sub	sp, #20
	if (isnanf(val)) {
    b4f0:	bvc.n	b550 <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    b4f2:	vcmpe.f32	s0, #0.0
    b4f6:	vmrs	APSR_nzcv, fpscr
    b4fa:	ite	mi
    b4fc:	movmi	r3, #4
    b4fe:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b500:	cmp	r3, r5
    b502:	ite	lt
    b504:	sublt	r5, r5, r3
    b506:	movge	r5, #0
		if (width<0) {
    b508:	cmp	r0, #0
    b50a:	bge.n	b51a <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    b50c:	mov	r2, r5
    b50e:	mov	r0, r4
    b510:	add	r4, r5
    b512:	movs	r5, #0
    b514:	movs	r1, #32
    b516:	bl	a1d4 <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b51a:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b51e:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b520:	cmp	r3, #0
    b522:	itt	lt
    b524:	movlt	r3, #45	; 0x2d
    b526:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b52a:	movs	r3, #65	; 0x41
    b52c:	strb	r2, [r4, #0]
    b52e:	strb	r3, [r4, #1]
    b530:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    b532:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b534:	strb	r2, [r4, #2]
			*buf++ = ' ';
    b536:	movs	r1, #32
    b538:	mov	r2, r5
    b53a:	bl	a1d4 <memset>
			awidth--;
		}
		*buf = 0;
    b53e:	movs	r2, #0
			*buf++ = ' ';
    b540:	mov	r3, r0
    b542:	add	r0, r5
		*buf = 0;
    b544:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    b546:	add	sp, #20
    b548:	vpop	{d8}
    b54c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    b550:	vabs.f32	s15, s0
    b554:	vldr	s14, [pc, #432]	; b708 <dtostrf+0x23c>
    b558:	vcmp.f32	s15, s14
    b55c:	vmrs	APSR_nzcv, fpscr
    b560:	ble.n	b5a8 <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    b562:	vcmpe.f32	s0, #0.0
    b566:	vmrs	APSR_nzcv, fpscr
    b56a:	ite	mi
    b56c:	movmi	r3, #4
    b56e:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b570:	cmp	r3, r5
    b572:	ite	lt
    b574:	sublt	r5, r5, r3
    b576:	movge	r5, #0
		if (width<0) {
    b578:	cmp	r0, #0
    b57a:	bge.n	b58a <dtostrf+0xbe>
				*buf++ = ' ';
    b57c:	mov	r2, r5
    b57e:	mov	r0, r4
    b580:	add	r4, r5
    b582:	movs	r5, #0
    b584:	movs	r1, #32
    b586:	bl	a1d4 <memset>
		if (val<0) *buf++ = '-';
    b58a:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b58e:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    b590:	vmrs	APSR_nzcv, fpscr
    b594:	itt	mi
    b596:	movmi	r3, #45	; 0x2d
    b598:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b59c:	movs	r3, #73	; 0x49
    b59e:	strb	r3, [r4, #0]
    b5a0:	movs	r3, #78	; 0x4e
    b5a2:	strb	r3, [r4, #1]
    b5a4:	adds	r3, r4, #3
    b5a6:	b.n	b532 <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    b5a8:	add	r2, sp, #8
    b5aa:	add	r1, sp, #4
    b5ac:	mov	r0, r6
    b5ae:	bl	daaa <fcvtf>
	if (precision == 0 && decpt == 0) {
    b5b2:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    b5b4:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    b5b6:	orrs.w	r2, r6, r3
    b5ba:	bne.n	b65a <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    b5bc:	ldrb	r1, [r0, #0]
    b5be:	ldr	r3, [pc, #332]	; (b70c <dtostrf+0x240>)
    b5c0:	ldr	r2, [pc, #332]	; (b710 <dtostrf+0x244>)
    b5c2:	cmp	r1, #52	; 0x34
    b5c4:	ite	ls
    b5c6:	movls	r8, r2
    b5c8:	movhi	r8, r3
		decpt++;
    b5ca:	movs	r3, #1
    b5cc:	str	r3, [sp, #4]
	reqd = strlen(s);
    b5ce:	mov	r0, r8
    b5d0:	bl	ed90 <strlen>
	if (reqd > decpt) reqd++;
    b5d4:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    b5d6:	mov	r5, r0
	if (reqd > decpt) reqd++;
    b5d8:	cmp	r3, r0
    b5da:	it	lt
    b5dc:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    b5de:	cmp	r3, #0
    b5e0:	bne.n	b66a <dtostrf+0x19e>
    b5e2:	adds	r5, #1
	if (sign) reqd++;
    b5e4:	ldr.w	fp, [sp, #8]
    b5e8:	cmp.w	fp, #0
    b5ec:	beq.n	b5f0 <dtostrf+0x124>
    b5ee:	adds	r5, #1
	pad = width - reqd;
    b5f0:	sub.w	sl, r7, r5
	e = p + reqd;
    b5f4:	add.w	r9, r4, r5
	if (pad > 0) {
    b5f8:	cmp.w	sl, #0
    b5fc:	ble.n	b6b2 <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    b5fe:	mov	r2, sl
    b600:	movs	r1, #32
    b602:	mov	r0, r4
		e += pad;
    b604:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    b606:	bl	a1d4 <memset>
    b60a:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    b60e:	cmp.w	fp, #0
    b612:	beq.n	b61a <dtostrf+0x14e>
    b614:	movs	r3, #45	; 0x2d
    b616:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    b61a:	ldr	r1, [sp, #4]
    b61c:	cmp	r1, #0
    b61e:	bne.n	b6b6 <dtostrf+0x1ea>
    b620:	cbz	r6, b630 <dtostrf+0x164>
		*p++ = '0';
    b622:	mov	r3, r2
    b624:	movs	r1, #48	; 0x30
    b626:	strb.w	r1, [r3], #2
		*p++ = '.';
    b62a:	movs	r1, #46	; 0x2e
    b62c:	strb	r1, [r2, #1]
    b62e:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    b630:	movs	r0, #46	; 0x2e
	while (p < e) {
    b632:	cmp	r9, r2
		*p++ = *s++;
    b634:	mov	r3, r2
	while (p < e) {
    b636:	bhi.n	b6ec <dtostrf+0x220>
	if (width < 0) {
    b638:	cmp	r7, #0
    b63a:	bge.n	b652 <dtostrf+0x186>
		pad = (reqd + width) * -1;
    b63c:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    b63e:	movs	r1, #32
		pad = (reqd + width) * -1;
    b640:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    b642:	mov	r0, r3
    b644:	bic.w	r5, r5, r5, asr #31
    b648:	mov	r2, r5
    b64a:	bl	a1d4 <memset>
    b64e:	mov	r3, r0
    b650:	add	r3, r5
	*p = 0;
    b652:	movs	r2, #0
	return buf;
    b654:	mov	r0, r4
	*p = 0;
    b656:	strb	r2, [r3, #0]
	return buf;
    b658:	b.n	b546 <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    b65a:	negs	r3, r3
    b65c:	cmp	r6, r3
		decpt = -precision;
    b65e:	ittt	lt
    b660:	neglt	r3, r6
		s = "0";
    b662:	ldrlt.w	r8, [pc, #172]	; b710 <dtostrf+0x244>
		decpt = -precision;
    b666:	strlt	r3, [sp, #4]
    b668:	b.n	b5ce <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    b66a:	bge.n	b5e4 <dtostrf+0x118>
    b66c:	cmp	r6, #0
    b66e:	beq.n	b5e4 <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    b670:	add	r3, r6
		reqd = precision + 2;
    b672:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    b674:	cmp	r0, r3
    b676:	bls.n	b5e4 <dtostrf+0x118>
				val *= 10.0f;
    b678:	vmov.f32	s15, #36	; 0x41200000  10.0
    b67c:	mov	r3, r6
    b67e:	b.n	b686 <dtostrf+0x1ba>
    b680:	vmul.f32	s16, s16, s15
				newPrecision--;
    b684:	subs	r3, #1
			while (newPrecision > 0) {
    b686:	cmp	r3, #0
    b688:	bgt.n	b680 <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b68a:	cmp	r6, #0
    b68c:	add	r2, sp, #8
    b68e:	add	r1, sp, #12
    b690:	vmov.f32	s0, s16
    b694:	ite	ge
    b696:	subge	r0, r6, r6
    b698:	movlt	r0, r6
    b69a:	bl	daaa <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b69e:	ldr	r3, [sp, #4]
    b6a0:	ldr	r2, [sp, #12]
    b6a2:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b6a4:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b6a6:	subs	r2, r2, r3
    b6a8:	cmp	r2, r1
    b6aa:	itt	eq
    b6ac:	addeq	r3, #1
    b6ae:	streq	r3, [sp, #4]
    b6b0:	b.n	b5e4 <dtostrf+0x118>
    b6b2:	mov	r2, r4
    b6b4:	b.n	b60e <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    b6b6:	bge.n	b630 <dtostrf+0x164>
    b6b8:	cmp	r6, #0
    b6ba:	beq.n	b630 <dtostrf+0x164>
		*p++ = '0';
    b6bc:	mov	r3, r2
		*p++ = '.';
    b6be:	movs	r0, #46	; 0x2e
		*p++ = '0';
    b6c0:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    b6c4:	movs	r6, #0
		*p++ = '0';
    b6c6:	strb.w	ip, [r3], #2
		*p++ = '.';
    b6ca:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    b6cc:	rsb	r0, r1, #2
    b6d0:	add	r2, r0
		*p++ = '.';
    b6d2:	mov	r0, r3
		while ( decpt < 0 ) {
    b6d4:	cmp	r0, r2
    b6d6:	bne.n	b6e4 <dtostrf+0x218>
    b6d8:	subs	r2, r3, r1
    b6da:	cmp	r6, #0
    b6dc:	beq.n	b630 <dtostrf+0x164>
    b6de:	movs	r3, #0
    b6e0:	str	r3, [sp, #4]
    b6e2:	b.n	b630 <dtostrf+0x164>
			*p++ = '0';
    b6e4:	movs	r6, #1
    b6e6:	strb.w	ip, [r0], #1
    b6ea:	b.n	b6d4 <dtostrf+0x208>
		*p++ = *s++;
    b6ec:	ldrb.w	r1, [r8], #1
    b6f0:	strb.w	r1, [r3], #1
		if (p == e) break;
    b6f4:	cmp	r9, r3
    b6f6:	beq.n	b638 <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    b6f8:	ldr	r1, [sp, #4]
    b6fa:	subs	r1, #1
    b6fc:	str	r1, [sp, #4]
    b6fe:	cbnz	r1, b704 <dtostrf+0x238>
    b700:	adds	r3, r2, #2
    b702:	strb	r0, [r2, #1]
			*p++ = '0';
    b704:	mov	r2, r3
    b706:	b.n	b632 <dtostrf+0x166>
    b708:	.word	0x7f7fffff
    b70c:	.word	0x20001024
    b710:	.word	0x20001187

0000b714 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    b714:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b716:	ldr	r3, [pc, #52]	; (b74c <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b718:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b71a:	ldr	r6, [pc, #52]	; (b750 <micros+0x3c>)
		scc = systick_cycle_count;
    b71c:	ldr	r5, [pc, #52]	; (b754 <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b71e:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b722:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    b724:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b726:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b72a:	cmp	r2, #0
    b72c:	bne.n	b71e <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b72e:	ldr	r3, [pc, #40]	; (b758 <micros+0x44>)
    b730:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b732:	ldr	r2, [pc, #40]	; (b75c <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    b734:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b736:	ldr	r2, [r2, #0]
    b738:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b73c:	mov.w	r3, #1000	; 0x3e8
    b740:	muls	r0, r3
	return usec;
}
    b742:	cmp	r2, r3
    b744:	ite	ls
    b746:	addls	r0, r0, r2
    b748:	addhi	r0, r0, r3
    b74a:	pop	{r4, r5, r6, pc}
    b74c:	.word	0x20015378
    b750:	.word	0x20015374
    b754:	.word	0x20015370
    b758:	.word	0xe0001000
    b75c:	.word	0x20014ce0

0000b760 <delay>:
{
    b760:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    b762:	mov	r4, r0
    b764:	cbz	r0, b788 <delay+0x28>
	start = micros();
    b766:	bl	b714 <micros>
    b76a:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    b76c:	bl	b714 <micros>
    b770:	subs	r0, r0, r5
    b772:	cmp.w	r0, #1000	; 0x3e8
    b776:	bcs.n	b77e <delay+0x1e>
		yield();
    b778:	bl	c3dc <yield>
		while ((micros() - start) >= 1000) {
    b77c:	b.n	b76c <delay+0xc>
			if (--msec == 0) return;
    b77e:	subs	r4, #1
    b780:	beq.n	b788 <delay+0x28>
			start += 1000;
    b782:	add.w	r5, r5, #1000	; 0x3e8
    b786:	b.n	b76c <delay+0xc>
}
    b788:	pop	{r3, r4, r5, pc}
	...

0000b78c <unused_interrupt_vector>:
	__disable_irq();
    b78c:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b78e:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b792:	ldr	r4, [pc, #316]	; (b8d0 <unused_interrupt_vector+0x144>)
    b794:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    b798:	tst.w	lr, #4
    b79c:	ite	eq
    b79e:	mrseq	r2, MSP
    b7a2:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    b7a6:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b7aa:	ldr	r7, [pc, #296]	; (b8d4 <unused_interrupt_vector+0x148>)
	while (p < end) {
    b7ac:	ldr	r6, [pc, #296]	; (b8d8 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b7ae:	ldr.w	r1, [r3, #3368]	; 0xd28
    b7b2:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    b7b6:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b7ba:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    b7be:	ldr.w	r1, [r3, #3380]	; 0xd34
    b7c2:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    b7c6:	ldr.w	r3, [r3, #3384]	; 0xd38
    b7ca:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    b7ce:	ldr	r3, [r2, #24]
    b7d0:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b7d4:	ldr	r3, [r2, #28]
    b7d6:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b7da:	bl	be50 <tempmonGetTemp>
    b7de:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b7e2:	bl	b95c <rtc_get>
	info->len = sizeof(*info) / 4;
    b7e6:	movs	r3, #11
	p = (uint32_t *)info;
    b7e8:	ldr	r2, [pc, #240]	; (b8dc <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    b7ea:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b7ee:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    b7f2:	mov	r0, r2
	crc = 0xFFFFFFFF;
    b7f4:	mov.w	r3, #4294967295
		crc ^= *p++;
    b7f8:	ldr	r1, [r2, #0]
    b7fa:	movs	r5, #32
    b7fc:	adds	r2, #4
    b7fe:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b800:	and.w	r1, r3, #1
    b804:	subs	r5, #1
    b806:	mul.w	r1, r7, r1
    b80a:	eor.w	r3, r1, r3, lsr #1
    b80e:	bne.n	b800 <unused_interrupt_vector+0x74>
	while (p < end) {
    b810:	cmp	r2, r6
    b812:	bne.n	b7f8 <unused_interrupt_vector+0x6c>
	info->crc = crc;
    b814:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    b818:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b81c:	mov.w	r3, #3758153728	; 0xe000e000
    b820:	ldr	r2, [pc, #188]	; (b8e0 <unused_interrupt_vector+0x154>)
    b822:	str.w	r0, [r3, #3952]	; 0xf70
    b826:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    b82a:	dsb	sy
	asm("isb");
    b82e:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b832:	ldr	r2, [pc, #176]	; (b8e4 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b834:	ldr	r4, [pc, #176]	; (b8e8 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b836:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b838:	ldr	r0, [pc, #176]	; (b8ec <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b83a:	orr.w	r3, r3, #12288	; 0x3000
    b83e:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b840:	movs	r3, #2
    b842:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b844:	ldr	r3, [r2, #28]
    b846:	bic.w	r3, r3, #127	; 0x7f
    b84a:	orr.w	r3, r3, #64	; 0x40
    b84e:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b850:	ldr	r3, [pc, #156]	; (b8f0 <unused_interrupt_vector+0x164>)
    b852:	ldr	r3, [r3, #0]
    b854:	cmp	r3, r0
    b856:	bls.n	b85c <unused_interrupt_vector+0xd0>
    b858:	bl	aa18 <set_arm_clock>
	PIT_MCR = 0;
    b85c:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b85e:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    b860:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b864:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    b866:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b86a:	ldr	r3, [pc, #136]	; (b8f4 <unused_interrupt_vector+0x168>)
    b86c:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    b870:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b874:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    b878:	ldr	r4, [pc, #108]	; (b8e8 <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    b87a:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b87e:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b882:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b886:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b88a:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    b88e:	ldr.w	r3, [r4, #268]	; 0x10c
    b892:	cbz	r3, b89e <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    b894:	adds	r5, #1
			PIT_TFLG0 = 1;
    b896:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b89a:	cmp	r5, #79	; 0x4f
    b89c:	bhi.n	b8a4 <unused_interrupt_vector+0x118>
		usb_isr();
    b89e:	bl	aec8 <usb_isr>
		if (PIT_TFLG0) {
    b8a2:	b.n	b88e <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    b8a4:	ldr	r3, [pc, #80]	; (b8f8 <unused_interrupt_vector+0x16c>)
    b8a6:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    b8a8:	ldr	r1, [pc, #80]	; (b8fc <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    b8aa:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b8ae:	mov.w	r2, #2147483648	; 0x80000000
    b8b2:	ldr	r3, [pc, #76]	; (b900 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    b8b4:	ldr	r0, [pc, #76]	; (b904 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b8b6:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b8b8:	ldr	r2, [pc, #44]	; (b8e8 <unused_interrupt_vector+0x15c>)
    b8ba:	ldr.w	r3, [r2, #268]	; 0x10c
    b8be:	cbz	r3, b8cc <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    b8c0:	mov.w	r3, #3758153728	; 0xe000e000
    b8c4:	ldr	r2, [pc, #64]	; (b908 <unused_interrupt_vector+0x17c>)
    b8c6:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    b8ca:	b.n	b8ca <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    b8cc:	str	r0, [r1, #48]	; 0x30
    b8ce:	b.n	b8ba <unused_interrupt_vector+0x12e>
    b8d0:	.word	0x2027ff00
    b8d4:	.word	0xedb88320
    b8d8:	.word	0x2027ffa8
    b8dc:	.word	0x2027ff80
    b8e0:	.word	0x2027ffa0
    b8e4:	.word	0x400fc000
    b8e8:	.word	0x40084000
    b8ec:	.word	0x0bcd3d80
    b8f0:	.word	0x20001d2c
    b8f4:	.word	0x00249f00
    b8f8:	.word	0x402e0000
    b8fc:	.word	0x400f8000
    b900:	.word	0x400d9000
    b904:	.word	0x0bad00f1
    b908:	.word	0x05fa0004

0000b90c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    b90c:	ldr	r2, [pc, #32]	; (b930 <_sbrk+0x24>)
{
    b90e:	push	{r3, lr}
    b910:	mov	r3, r0
        char *prev = __brkval;
    b912:	ldr	r0, [r2, #0]
        if (incr != 0) {
    b914:	cbz	r3, b92a <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    b916:	add	r3, r0
    b918:	ldr	r1, [pc, #24]	; (b934 <_sbrk+0x28>)
    b91a:	cmp	r3, r1
    b91c:	bls.n	b92c <_sbrk+0x20>
                        errno = ENOMEM;
    b91e:	bl	ec84 <__errno>
    b922:	movs	r3, #12
    b924:	str	r3, [r0, #0]
                        return (void *)-1;
    b926:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b92a:	pop	{r3, pc}
                __brkval = prev + incr;
    b92c:	str	r3, [r2, #0]
    b92e:	b.n	b92a <_sbrk+0x1e>
    b930:	.word	0x20002104
    b934:	.word	0x20280000

0000b938 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    b938:	movs	r0, #0
    b93a:	bx	lr

0000b93c <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    b93c:	mov.w	r0, #4294967295
    b940:	bx	lr

0000b942 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    b942:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    b946:	movs	r0, #0
	st->st_mode = S_IFCHR;
    b948:	str	r3, [r1, #4]
}
    b94a:	bx	lr

0000b94c <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    b94c:	movs	r0, #1
    b94e:	bx	lr

0000b950 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    b950:	mov.w	r0, #4294967295
    b954:	bx	lr

0000b956 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    b956:	wfi
    b958:	b.n	b956 <abort>
	...

0000b95c <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    b95c:	ldr	r2, [pc, #28]	; (b97c <rtc_get+0x20>)
    b95e:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    b960:	ldr	r3, [r2, #40]	; 0x28
{
    b962:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    b964:	mov	r4, r3
    b966:	mov	r1, r0
    b968:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    b96a:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    b96c:	cmp	r4, r3
    b96e:	bne.n	b964 <rtc_get+0x8>
    b970:	cmp	r1, r0
    b972:	bne.n	b964 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    b974:	lsrs	r3, r3, #15
}
    b976:	orr.w	r0, r3, r0, lsl #17
    b97a:	pop	{r4, pc}
    b97c:	.word	0x400d4000

0000b980 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    b980:	ldr	r3, [pc, #60]	; (b9c0 <rtc_set+0x40>)
    b982:	ldr	r2, [r3, #8]
    b984:	bic.w	r2, r2, #65537	; 0x10001
    b988:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    b98a:	ldr	r2, [r3, #8]
    b98c:	lsls	r2, r2, #31
    b98e:	bmi.n	b98a <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    b990:	ldr	r2, [r3, #56]	; 0x38
    b992:	bic.w	r2, r2, #1
    b996:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    b998:	ldr	r3, [pc, #36]	; (b9c0 <rtc_set+0x40>)
    b99a:	ldr	r2, [r3, #56]	; 0x38
    b99c:	lsls	r1, r2, #31
    b99e:	bmi.n	b99a <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    b9a0:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    b9a2:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    b9a4:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    b9a6:	str	r0, [r3, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    b9a8:	ldr	r2, [r3, #56]	; 0x38
    b9aa:	orr.w	r2, r2, #1
    b9ae:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    b9b0:	ldr	r2, [r3, #56]	; 0x38
    b9b2:	lsls	r2, r2, #31
    b9b4:	bpl.n	b9b0 <rtc_set+0x30>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    b9b6:	ldr	r2, [r3, #8]
    b9b8:	orr.w	r2, r2, #65537	; 0x10001
    b9bc:	str	r2, [r3, #8]
}
    b9be:	bx	lr
    b9c0:	.word	0x400d4000

0000b9c4 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b9c4:	ldr	r3, [pc, #68]	; (ba0c <flash_wait+0x48>)
	FLEXSPI_LUT61 = 0;
    b9c6:	movs	r1, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b9c8:	ldr	r2, [pc, #68]	; (ba10 <flash_wait+0x4c>)
{
    b9ca:	push	{r4, r5, lr}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b9cc:	str.w	r2, [r3, #752]	; 0x2f0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    b9d0:	movs	r2, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    b9d2:	ldr	r5, [pc, #64]	; (ba14 <flash_wait+0x50>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    b9d4:	ldr	r4, [pc, #64]	; (ba18 <flash_wait+0x54>)
	FLEXSPI_LUT61 = 0;
    b9d6:	str.w	r1, [r3, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    b9da:	str.w	r2, [r3, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    b9de:	str.w	r1, [r3, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    b9e2:	str.w	r5, [r3, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b9e6:	str.w	r2, [r3, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    b9ea:	ldr	r0, [r3, #20]
    b9ec:	lsls	r0, r0, #31
    b9ee:	bpl.n	b9ea <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b9f0:	str	r2, [r3, #20]
	} while (status & 1);
    b9f2:	ldrb	r0, [r4, #0]
    b9f4:	lsls	r0, r0, #31
    b9f6:	bmi.n	b9da <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    b9f8:	ldr	r2, [r3, #0]
    b9fa:	orr.w	r2, r2, #1
    b9fe:	str	r2, [r3, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    ba00:	ldr	r2, [pc, #8]	; (ba0c <flash_wait+0x48>)
    ba02:	ldr	r3, [r2, #0]
    ba04:	lsls	r3, r3, #31
    ba06:	bmi.n	ba02 <flash_wait+0x3e>
	__enable_irq();
    ba08:	cpsie	i
}
    ba0a:	pop	{r4, r5, pc}
    ba0c:	.word	0x402a8000
    ba10:	.word	0x24010405
    ba14:	.word	0x000f0001
    ba18:	.word	0x402a8100

0000ba1c <eeprom_initialize>:
{
    ba1c:	push	{r4, r5, lr}
    ba1e:	ldr	r3, [pc, #52]	; (ba54 <eeprom_initialize+0x38>)
			if (*p++ == 0xFFFF) break;
    ba20:	movw	r5, #65535	; 0xffff
    ba24:	ldr	r4, [pc, #48]	; (ba58 <eeprom_initialize+0x3c>)
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ba26:	sub.w	r1, r3, #4096	; 0x1000
		uint16_t index = 0;
    ba2a:	movs	r2, #0
			if (*p++ == 0xFFFF) break;
    ba2c:	ldrh	r0, [r1, #0]
    ba2e:	adds	r1, #2
    ba30:	cmp	r0, r5
    ba32:	beq.n	ba3c <eeprom_initialize+0x20>
			index++;
    ba34:	adds	r2, #1
		} while (p < end);
    ba36:	cmp	r1, r3
			index++;
    ba38:	uxth	r2, r2
		} while (p < end);
    ba3a:	bcc.n	ba2c <eeprom_initialize+0x10>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    ba3c:	add.w	r3, r3, #4096	; 0x1000
		sector_index[sector] = index;
    ba40:	strh.w	r2, [r4], #2
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    ba44:	cmp.w	r3, #1619001344	; 0x60800000
    ba48:	bne.n	ba26 <eeprom_initialize+0xa>
	initialized = 1;
    ba4a:	ldr	r3, [pc, #16]	; (ba5c <eeprom_initialize+0x40>)
    ba4c:	movs	r2, #1
    ba4e:	strb	r2, [r3, #0]
}
    ba50:	pop	{r4, r5, pc}
    ba52:	nop
    ba54:	.word	0x607c1000
    ba58:	.word	0x200153e8
    ba5c:	.word	0x200155bc

0000ba60 <eeprom_read_byte>:
{
    ba60:	push	{r3, r4, r5, lr}
	if (addr > E2END) return 0xFF;
    ba62:	movw	r3, #4283	; 0x10bb
{
    ba66:	mov	r4, r0
	if (addr > E2END) return 0xFF;
    ba68:	cmp	r0, r3
    ba6a:	bhi.n	bab8 <eeprom_read_byte+0x58>
	if (!initialized) eeprom_initialize();
    ba6c:	ldr	r3, [pc, #76]	; (babc <eeprom_read_byte+0x5c>)
    ba6e:	ldrb	r3, [r3, #0]
    ba70:	cbnz	r3, ba76 <eeprom_read_byte+0x16>
    ba72:	bl	ba1c <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS;
    ba76:	lsrs	r2, r4, #2
    ba78:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    ba7a:	ldr	r0, [pc, #68]	; (bac0 <eeprom_read_byte+0x60>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ba7c:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS;
    ba80:	udiv	r3, r2, r3
    ba84:	rsb	r1, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    ba88:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS;
    ba8c:	subs	r2, r2, r1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ba8e:	add.w	r1, r2, #393216	; 0x60000
	end = p + sector_index[sector];
    ba92:	ldrh.w	r2, [r0, r2, lsl #1]
	uint8_t data=0xFF;
    ba96:	movs	r0, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ba98:	add.w	r1, r1, #1984	; 0x7c0
	end = p + sector_index[sector];
    ba9c:	lsls	r2, r2, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ba9e:	lsls	r3, r1, #12
	end = p + sector_index[sector];
    baa0:	add.w	r2, r2, r1, lsl #12
	while (p < end) {
    baa4:	cmp	r3, r2
    baa6:	bcc.n	baaa <eeprom_read_byte+0x4a>
}
    baa8:	pop	{r3, r4, r5, pc}
		uint32_t val = *p++;
    baaa:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    baae:	uxtb	r5, r1
    bab0:	cmp	r5, r4
    bab2:	it	eq
    bab4:	lsreq	r0, r1, #8
    bab6:	b.n	baa4 <eeprom_read_byte+0x44>
	if (addr > E2END) return 0xFF;
    bab8:	movs	r0, #255	; 0xff
    baba:	b.n	baa8 <eeprom_read_byte+0x48>
    babc:	.word	0x200155bc
    bac0:	.word	0x200153e8

0000bac4 <eeprom_read_block>:
{
    bac4:	push	{r4, r5, r6, lr}
    bac6:	mov	r4, r0
    bac8:	adds	r5, r1, r2
    baca:	mov	r0, r1
	while (len--) {
    bacc:	cmp	r0, r5
    bace:	bne.n	bad2 <eeprom_read_block+0xe>
}
    bad0:	pop	{r4, r5, r6, pc}
		*dest++ = eeprom_read_byte(p++);
    bad2:	adds	r6, r0, #1
    bad4:	bl	ba60 <eeprom_read_byte>
    bad8:	strb.w	r0, [r4], #1
    badc:	mov	r0, r6
    bade:	b.n	bacc <eeprom_read_block+0x8>

0000bae0 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    bae0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bae4:	mov	r5, r1
    bae6:	mov	r4, r2
	__disable_irq();
    bae8:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    baea:	ldr	r3, [pc, #192]	; (bbac <eepromemu_flash_write+0xcc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    baec:	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    baf0:	ldr	r2, [pc, #188]	; (bbb0 <eepromemu_flash_write+0xd0>)
    baf2:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    baf4:	movs	r2, #2
    baf6:	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    baf8:	movs	r2, #0
    bafa:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bafe:	str.w	r1, [r3, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    bb02:	adds	r1, r0, r4
	FLEXSPI_LUT61 = 0;
    bb04:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    bb08:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    bb0c:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bb10:	mov.w	r2, #983040	; 0xf0000
    bb14:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bb18:	movs	r2, #1
    bb1a:	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bb1e:	bic.w	r2, r0, #31
	asm("dsb");
    bb22:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    bb26:	mov.w	r6, #3758153728	; 0xe000e000
    bb2a:	str.w	r2, [r6, #3932]	; 0xf5c
		location += 32;
    bb2e:	adds	r2, #32
	} while (location < end_addr);
    bb30:	cmp	r1, r2
    bb32:	bhi.n	bb2a <eepromemu_flash_write+0x4a>
	asm("dsb");
    bb34:	dsb	sy
	asm("isb");
    bb38:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bb3c:	ldr	r2, [r3, #20]
    bb3e:	lsls	r6, r2, #31
    bb40:	bpl.n	bb3c <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bb42:	movs	r2, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    bb44:	ldr	r1, [pc, #108]	; (bbb4 <eepromemu_flash_write+0xd4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    bb46:	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    bb4a:	ldr	r7, [pc, #96]	; (bbac <eepromemu_flash_write+0xcc>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bb4c:	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    bb4e:	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    bb52:	movw	r1, #8705	; 0x2201
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bb56:	ldr.w	r8, [pc, #96]	; bbb8 <eepromemu_flash_write+0xd8>
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    bb5a:	str.w	r1, [r3, #756]	; 0x2f4
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bb5e:	uxth	r1, r4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    bb60:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bb64:	orr.w	r1, r1, #983040	; 0xf0000
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    bb68:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bb6c:	str.w	r1, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bb70:	str.w	r2, [r3, #176]	; 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    bb74:	ldr	r3, [r7, #20]
    bb76:	lsls	r2, r3, #31
    bb78:	bpl.n	bb86 <eepromemu_flash_write+0xa6>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    bb7a:	movs	r3, #65	; 0x41
    bb7c:	str	r3, [r7, #20]
	flash_wait();
}
    bb7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	flash_wait();
    bb82:	b.w	b9c4 <flash_wait>
		if (n & FLEXSPI_INTR_IPTXWE) {
    bb86:	lsls	r1, r3, #25
    bb88:	bpl.n	bb74 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    bb8a:	cmp	r4, #8
    bb8c:	bhi.n	bba6 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    bb8e:	cbz	r4, bba0 <eepromemu_flash_write+0xc0>
    bb90:	mov	r6, r4
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bb92:	mov	r1, r5
				len -= wrlen;
    bb94:	subs	r4, r4, r6
				src += wrlen;
    bb96:	add	r5, r6
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bb98:	mov	r2, r6
    bb9a:	mov	r0, r8
    bb9c:	bl	a218 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    bba0:	movs	r3, #64	; 0x40
    bba2:	str	r3, [r7, #20]
    bba4:	b.n	bb74 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    bba6:	movs	r6, #8
    bba8:	b.n	bb92 <eepromemu_flash_write+0xb2>
    bbaa:	nop
    bbac:	.word	0x402a8000
    bbb0:	.word	0x5af05af0
    bbb4:	.word	0x08180432
    bbb8:	.word	0x402a8180

0000bbbc <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    bbbc:	push	{r4}
	__disable_irq();
    bbbe:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bbc0:	ldr	r3, [pc, #156]	; (bc60 <eepromemu_flash_erase_sector+0xa4>)
    bbc2:	ldr	r2, [pc, #160]	; (bc64 <eepromemu_flash_erase_sector+0xa8>)
    bbc4:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    bbc6:	movs	r2, #2
    bbc8:	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bbca:	movw	r2, #1030	; 0x406
    bbce:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    bbd2:	movs	r2, #0
    bbd4:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    bbd8:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    bbdc:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    bbe0:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bbe4:	mov.w	r2, #983040	; 0xf0000
    bbe8:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bbec:	movs	r2, #1
    bbee:	str.w	r2, [r3, #176]	; 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    bbf2:	bic.w	r2, r0, #4080	; 0xff0
    bbf6:	bic.w	r2, r2, #15
	asm("dsb");
    bbfa:	dsb	sy
    bbfe:	add.w	r4, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
    bc02:	add.w	r1, r2, #4096	; 0x1000
    bc06:	cmp	r1, r4
    bc08:	ite	cc
    bc0a:	movcc	r1, #1
    bc0c:	movcs	r1, #128	; 0x80
		SCB_CACHE_DCIMVAC = location;
    bc0e:	mov.w	r4, #3758153728	; 0xe000e000
    bc12:	add.w	r1, r2, r1, lsl #5
    bc16:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    bc1a:	adds	r2, #32
	} while (location < end_addr);
    bc1c:	cmp	r2, r1
    bc1e:	bne.n	bc16 <eepromemu_flash_erase_sector+0x5a>
	asm("dsb");
    bc20:	dsb	sy
	asm("isb");
    bc24:	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bc28:	ldr	r2, [r3, #20]
    bc2a:	lsls	r1, r2, #31
    bc2c:	bpl.n	bc28 <eepromemu_flash_erase_sector+0x6c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bc2e:	movs	r1, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    bc30:	ldr	r2, [pc, #52]	; (bc68 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bc32:	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    bc34:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    bc38:	ldr	r2, [pc, #48]	; (bc6c <eepromemu_flash_erase_sector+0xb0>)
    bc3a:	ands	r2, r0
    bc3c:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bc40:	mov.w	r2, #983040	; 0xf0000
    bc44:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bc48:	str.w	r1, [r3, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bc4c:	ldr	r3, [pc, #16]	; (bc60 <eepromemu_flash_erase_sector+0xa4>)
    bc4e:	ldr	r2, [r3, #20]
    bc50:	lsls	r2, r2, #31
    bc52:	bpl.n	bc4e <eepromemu_flash_erase_sector+0x92>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bc54:	movs	r2, #1
	flash_wait();
}
    bc56:	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bc5a:	str	r2, [r3, #20]
	flash_wait();
    bc5c:	b.w	b9c4 <flash_wait>
    bc60:	.word	0x402a8000
    bc64:	.word	0x5af05af0
    bc68:	.word	0x08180420
    bc6c:	.word	0x00fff000

0000bc70 <eeprom_write_byte>:
	if (addr > E2END) return;
    bc70:	movw	r3, #4283	; 0x10bb
    bc74:	cmp	r0, r3
{
    bc76:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc7a:	mov	r4, r0
    bc7c:	sub	sp, #264	; 0x108
    bc7e:	mov	r9, r1
	if (addr > E2END) return;
    bc80:	bhi.n	bce2 <eeprom_write_byte+0x72>
	if (!initialized) eeprom_initialize();
    bc82:	ldr	r3, [pc, #232]	; (bd6c <eeprom_write_byte+0xfc>)
    bc84:	ldrb	r3, [r3, #0]
    bc86:	cbnz	r3, bc8c <eeprom_write_byte+0x1c>
    bc88:	bl	ba1c <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS; 
    bc8c:	lsrs	r6, r4, #2
    bc8e:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    bc90:	ldr	r7, [pc, #220]	; (bd70 <eeprom_write_byte+0x100>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bc92:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS; 
    bc96:	udiv	r3, r6, r3
    bc9a:	rsb	r2, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bc9e:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    bca2:	subs	r6, r6, r2
	uint8_t olddata=0xFF;
    bca4:	movs	r2, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bca6:	add.w	r5, r6, #393216	; 0x60000
	end = p + sector_index[sector];
    bcaa:	ldrh.w	sl, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bcae:	add.w	r5, r5, #1984	; 0x7c0
    bcb2:	lsls	r5, r5, #12
    bcb4:	mov	r8, r5
	end = p + sector_index[sector];
    bcb6:	add.w	r0, r5, sl, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bcba:	mov	r3, r5
	while (p < end) {
    bcbc:	cmp	r3, r0
    bcbe:	bcc.n	bce8 <eeprom_write_byte+0x78>
	if (data == olddata) return;
    bcc0:	cmp	r2, r9
    bcc2:	beq.n	bce2 <eeprom_write_byte+0x72>
	if (sector_index[sector] < 2048) {
    bcc4:	cmp.w	sl, #2048	; 0x800
    bcc8:	bcs.n	bcf8 <eeprom_write_byte+0x88>
		uint16_t newdata = offset | (data << 8);
    bcca:	orr.w	r4, r4, r9, lsl #8
		sector_index[sector] = sector_index[sector] + 1;
    bcce:	add.w	sl, sl, #1
		eepromemu_flash_write(end, &newdata, 2);
    bcd2:	movs	r2, #2
    bcd4:	add	r1, sp, #8
		uint16_t newdata = offset | (data << 8);
    bcd6:	strh.w	r4, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    bcda:	bl	bae0 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    bcde:	strh.w	sl, [r7, r6, lsl #1]
}
    bce2:	add	sp, #264	; 0x108
    bce4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t val = *p++;
    bce8:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    bcec:	uxtb.w	ip, r1
    bcf0:	cmp	ip, r4
    bcf2:	it	eq
    bcf4:	lsreq	r2, r1, #8
    bcf6:	b.n	bcbc <eeprom_write_byte+0x4c>
		memset(buf, 0xFF, sizeof(buf));
    bcf8:	mov.w	r2, #256	; 0x100
    bcfc:	movs	r1, #255	; 0xff
    bcfe:	add	r0, sp, #8
    bd00:	bl	a1d4 <memset>
		while (p < end) {
    bd04:	cmn.w	r5, #4096	; 0x1000
    bd08:	movw	r3, #2049	; 0x801
    bd0c:	it	cs
    bd0e:	movcs	r3, #1
    bd10:	add.w	r3, r5, r3, lsl #1
    bd14:	mov	r1, r5
    bd16:	adds	r5, #2
    bd18:	cmp	r5, r3
    bd1a:	bne.n	bd5e <eeprom_write_byte+0xee>
		buf[offset] = data;
    bd1c:	add	r3, sp, #8
		for (i=0; i < 256; i++) {
    bd1e:	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    bd20:	mov	r0, r8
		buf[offset] = data;
    bd22:	strb.w	r9, [r3, r4]
		eepromemu_flash_erase_sector(p);
    bd26:	add	r4, sp, #8
		index = 0;
    bd28:	mov	r9, r5
		eepromemu_flash_erase_sector(p);
    bd2a:	bl	bbbc <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    bd2e:	ldrb.w	r3, [r4], #1
    bd32:	cmp	r3, #255	; 0xff
    bd34:	beq.n	bd50 <eeprom_write_byte+0xe0>
				uint16_t newval = i | (buf[i] << 8);
    bd36:	orr.w	r3, r5, r3, lsl #8
				eepromemu_flash_write(p + index, &newval, 2);
    bd3a:	movs	r2, #2
    bd3c:	add.w	r0, r8, r9, lsl #1
				index = index + 1;
    bd40:	add.w	r9, r9, #1
				eepromemu_flash_write(p + index, &newval, 2);
    bd44:	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    bd48:	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    bd4c:	bl	bae0 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    bd50:	adds	r5, #1
    bd52:	cmp.w	r5, #256	; 0x100
    bd56:	bne.n	bd2e <eeprom_write_byte+0xbe>
		sector_index[sector] = index;
    bd58:	strh.w	r9, [r7, r6, lsl #1]
    bd5c:	b.n	bce2 <eeprom_write_byte+0x72>
			uint16_t val = *p++;
    bd5e:	ldrh	r2, [r1, #0]
			buf[val & 255] = val >> 8;
    bd60:	add	r0, sp, #8
    bd62:	ldrb	r1, [r1, #0]
    bd64:	lsrs	r2, r2, #8
    bd66:	strb	r2, [r0, r1]
    bd68:	b.n	bd14 <eeprom_write_byte+0xa4>
    bd6a:	nop
    bd6c:	.word	0x200155bc
    bd70:	.word	0x200153e8

0000bd74 <eeprom_write_block>:
{
    bd74:	push	{r4, r5, r6, lr}
    bd76:	mov	r4, r0
    bd78:	mov	r0, r1
	while (len--) {
    bd7a:	adds	r5, r4, r2
    bd7c:	cmp	r4, r5
    bd7e:	bne.n	bd82 <eeprom_write_block+0xe>
}
    bd80:	pop	{r4, r5, r6, pc}
		eeprom_write_byte(p++, *src++);
    bd82:	adds	r6, r0, #1
    bd84:	ldrb.w	r1, [r4], #1
    bd88:	bl	bc70 <eeprom_write_byte>
    bd8c:	mov	r0, r6
    bd8e:	b.n	bd7c <eeprom_write_block+0x8>

0000bd90 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    bd90:	ldr	r3, [r0, #0]
    bd92:	cbz	r3, bdaa <smalloc_verify_pool+0x1a>
    bd94:	ldr	r0, [r0, #4]
    bd96:	cbz	r0, bdac <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    bd98:	movs	r3, #12
    bd9a:	udiv	r2, r0, r3
    bd9e:	mls	r0, r3, r2, r0
    bda2:	clz	r0, r0
    bda6:	lsrs	r0, r0, #5
    bda8:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    bdaa:	mov	r0, r3
	return 1;
}
    bdac:	bx	lr

0000bdae <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    bdae:	push	{r4, lr}
    bdb0:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    bdb2:	bl	bd90 <smalloc_verify_pool>
    bdb6:	mov	r4, r0
    bdb8:	cbz	r0, bdc0 <sm_align_pool+0x12>
    bdba:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    bdbc:	mov	r0, r4
    bdbe:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    bdc0:	ldr	r3, [r1, #4]
    bdc2:	movs	r0, #12
    bdc4:	udiv	r2, r3, r0
    bdc8:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    bdcc:	cbz	r2, bdd2 <sm_align_pool+0x24>
    bdce:	subs	r3, r3, r2
    bdd0:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    bdd2:	ldr	r3, [r1, #4]
    bdd4:	cmp	r3, #240	; 0xf0
    bdd6:	bhi.n	bdba <sm_align_pool+0xc>
		errno = ENOSPC;
    bdd8:	bl	ec84 <__errno>
    bddc:	movs	r3, #28
    bdde:	str	r3, [r0, #0]
		return 0;
    bde0:	b.n	bdbc <sm_align_pool+0xe>

0000bde2 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    bde2:	push	{r4, r5, r6, lr}
    bde4:	mov	r6, r3
	if (!spool) {
    bde6:	mov	r4, r0
    bde8:	cbnz	r0, bdf8 <sm_set_pool+0x16>
		errno = EINVAL;
    bdea:	bl	ec84 <__errno>
		return 0;
    bdee:	mov	r5, r4
		errno = EINVAL;
    bdf0:	movs	r3, #22
    bdf2:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    bdf4:	mov	r0, r5
    bdf6:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    bdf8:	cbz	r1, bdfc <sm_set_pool+0x1a>
    bdfa:	cbnz	r2, be2c <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    bdfc:	mov	r0, r4
    bdfe:	bl	bd90 <smalloc_verify_pool>
    be02:	mov	r5, r0
    be04:	cbz	r0, be22 <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    be06:	ldr	r3, [r4, #8]
    be08:	cbz	r3, be14 <sm_set_pool+0x32>
    be0a:	ldr	r2, [r4, #4]
    be0c:	movs	r1, #0
    be0e:	ldr	r0, [r4, #0]
    be10:	bl	a1d4 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    be14:	movs	r2, #16
    be16:	movs	r1, #0
    be18:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    be1a:	bl	a1d4 <memset>
	return 1;
    be1e:	movs	r5, #1
    be20:	b.n	bdf4 <sm_set_pool+0x12>
		errno = EINVAL;
    be22:	bl	ec84 <__errno>
    be26:	movs	r3, #22
    be28:	str	r3, [r0, #0]
		return 0;
    be2a:	b.n	bdf4 <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    be2c:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    be2e:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    be32:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    be34:	bl	bdae <sm_align_pool>
    be38:	mov	r5, r0
    be3a:	cmp	r0, #0
    be3c:	beq.n	bdf4 <sm_set_pool+0x12>
	if (do_zero) {
    be3e:	cmp	r6, #0
    be40:	beq.n	be1e <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    be42:	ldr	r2, [r4, #4]
    be44:	movs	r1, #0
    be46:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    be48:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    be4a:	b.n	be1a <sm_set_pool+0x38>

0000be4c <Panic_Temp_isr>:
  unused_interrupt_vector();
    be4c:	b.w	b78c <unused_interrupt_vector>

0000be50 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    be50:	ldr	r3, [pc, #72]	; (be9c <tempmonGetTemp+0x4c>)
    be52:	ldr.w	r2, [r3, #128]	; 0x80
    be56:	lsls	r2, r2, #29
    be58:	bpl.n	be52 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    be5a:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    be5e:	ldr	r2, [pc, #64]	; (bea0 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    be60:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    be64:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    be68:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    be6c:	ldr	r3, [pc, #52]	; (bea4 <tempmonGetTemp+0x54>)
    be6e:	vcvt.f32.u32	s0, s0
    be72:	vldr	s14, [r3]
    be76:	vcvt.f32.s32	s15, s15
    be7a:	ldr	r3, [pc, #44]	; (bea8 <tempmonGetTemp+0x58>)
    be7c:	vcvt.f32.u32	s14, s14
    be80:	vsub.f32	s15, s15, s14
    be84:	vldr	s14, [r3]
    be88:	ldr	r3, [pc, #32]	; (beac <tempmonGetTemp+0x5c>)
    be8a:	vmul.f32	s15, s15, s14
    be8e:	vldr	s13, [r3]
    be92:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    be96:	vsub.f32	s0, s0, s14
    be9a:	bx	lr
    be9c:	.word	0x400d8100
    bea0:	.word	0x20014cd4
    bea4:	.word	0x20014cd0
    bea8:	.word	0x20014cd8
    beac:	.word	0x20014cdc

0000beb0 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    beb0:	cmp	r0, #54	; 0x36
{
    beb2:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    beb4:	bhi.n	bece <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    beb6:	lsls	r2, r0, #4
    beb8:	ldr	r3, [pc, #40]	; (bee4 <digitalWrite+0x34>)
    beba:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    bebe:	ldr	r3, [r3, r2]
	mask = p->mask;
    bec0:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    bec2:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    bec4:	tst	r4, r2
    bec6:	beq.n	bed6 <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    bec8:	cbz	r1, bed0 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    beca:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    bece:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    bed0:	str.w	r2, [r3, #136]	; 0x88
    bed4:	b.n	bece <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bed6:	ldr	r3, [r0, #8]
		if (val) {
    bed8:	cbz	r1, bee0 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    beda:	ldr	r2, [pc, #12]	; (bee8 <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bedc:	str	r2, [r3, #0]
    bede:	b.n	bece <digitalWrite+0x1e>
    bee0:	ldr	r2, [pc, #8]	; (beec <digitalWrite+0x3c>)
    bee2:	b.n	bedc <digitalWrite+0x2c>
    bee4:	.word	0x20000614
    bee8:	.word	0x0001f038
    beec:	.word	0x00013038

0000bef0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    bef0:	cmp	r0, #54	; 0x36
{
    bef2:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    bef4:	bhi.n	bf26 <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    bef6:	ldr	r3, [pc, #76]	; (bf44 <pinMode+0x54>)
    bef8:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    befa:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    befc:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    befe:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bf02:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bf04:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bf08:	beq.n	bf0e <pinMode+0x1e>
    bf0a:	cmp	r1, #4
    bf0c:	bne.n	bf28 <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bf0e:	orrs	r4, r5
		if (mode == OUTPUT) {
    bf10:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bf12:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    bf14:	bne.n	bf1a <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bf16:	movs	r2, #56	; 0x38
    bf18:	b.n	bf1e <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    bf1a:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bf1e:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    bf20:	movs	r2, #21
    bf22:	ldr	r3, [r0, #4]
    bf24:	str	r2, [r3, #0]
}
    bf26:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bf28:	bic.w	r4, r4, r5
    bf2c:	str	r4, [r2, #4]
		if (mode == INPUT) {
    bf2e:	cmp	r1, #0
    bf30:	beq.n	bf16 <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    bf32:	cmp	r1, #2
    bf34:	bne.n	bf3a <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bf36:	ldr	r2, [pc, #16]	; (bf48 <pinMode+0x58>)
    bf38:	b.n	bf1e <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    bf3a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bf3c:	ite	eq
    bf3e:	ldreq	r2, [pc, #12]	; (bf4c <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bf40:	ldrne	r2, [pc, #12]	; (bf50 <pinMode+0x60>)
    bf42:	b.n	bf1e <pinMode+0x2e>
    bf44:	.word	0x20000614
    bf48:	.word	0x0001f038
    bf4c:	.word	0x00013038
    bf50:	.word	0x00010038

0000bf54 <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bf54:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    bf58:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bf5a:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    bf5e:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bf60:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    bf62:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    bf66:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bf6a:	ldrh.w	r3, [r0, #392]	; 0x188
    bf6e:	uxth	r3, r3
{
    bf70:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bf72:	orr.w	r3, r3, #240	; 0xf0
    bf76:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bf78:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bf7c:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bf80:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bf84:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bf88:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    bf8c:	adds	r2, #1
    bf8e:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bf90:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bf92:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    bf94:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bf96:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bf98:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    bf9a:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bf9c:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    bf9e:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    bfa0:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    bfa2:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    bfa4:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    bfa6:	bne.n	bf88 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bfa8:	ldrh.w	r3, [r0, #392]	; 0x188
    bfac:	uxth	r3, r3
    bfae:	orr.w	r3, r3, #15
    bfb2:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bfb6:	ldrh.w	r3, [r0, #392]	; 0x188
    bfba:	uxth	r3, r3
    bfbc:	orr.w	r3, r3, #3840	; 0xf00
    bfc0:	strh.w	r3, [r0, #392]	; 0x188
}
    bfc4:	pop	{r4, r5, r6, r7, pc}

0000bfc6 <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    bfc6:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bfc8:	mov.w	ip, #15
{
    bfcc:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    bfce:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bfd0:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bfd4:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bfd8:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    bfdc:	add.w	r3, r0, r2, lsl #5
    bfe0:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    bfe2:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bfe4:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bfe6:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    bfe8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bfea:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bfee:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bff0:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bff2:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    bff4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bff6:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    bff8:	bne.n	bfdc <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    bffa:	pop	{r4, r5, r6, r7, pc}

0000bffc <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bffc:	ldr	r2, [pc, #84]	; (c054 <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    bffe:	ldr	r0, [pc, #88]	; (c058 <pwm_init+0x5c>)
{
    c000:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c002:	ldr	r3, [r2, #120]	; 0x78
    c004:	orr.w	r3, r3, #16711680	; 0xff0000
    c008:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c00a:	ldr.w	r3, [r2, #128]	; 0x80
    c00e:	orr.w	r3, r3, #4227858432	; 0xfc000000
    c012:	orr.w	r3, r3, #196608	; 0x30000
    c016:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    c01a:	bl	bf54 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    c01e:	add.w	r0, r0, #16384	; 0x4000
    c022:	bl	bf54 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    c026:	add.w	r0, r0, #16384	; 0x4000
    c02a:	bl	bf54 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    c02e:	add.w	r0, r0, #16384	; 0x4000
    c032:	bl	bf54 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    c036:	sub.w	r0, r0, #2146304	; 0x20c000
    c03a:	bl	bfc6 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    c03e:	add.w	r0, r0, #16384	; 0x4000
    c042:	bl	bfc6 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    c046:	add.w	r0, r0, #16384	; 0x4000
}
    c04a:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    c04e:	b.w	bfc6 <quadtimer_init>
    c052:	nop
    c054:	.word	0x400fc000
    c058:	.word	0x403dc000

0000c05c <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    c05c:	ldr	r2, [pc, #8]	; (c068 <txEvent_event+0xc>)
    c05e:	ldr	r3, [r2, #0]
    c060:	adds	r3, #1
    c062:	str	r3, [r2, #0]
    c064:	bx	lr
    c066:	nop
    c068:	.word	0x20014c30

0000c06c <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    c06c:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    c06e:	ldr	r4, [pc, #40]	; (c098 <rx_event+0x2c>)
	int i = t->callback_param;
    c070:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    c072:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    c074:	ldr	r2, [pc, #36]	; (c09c <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    c076:	adds	r3, #1
    c078:	cmp	r3, #5
    c07a:	it	cs
    c07c:	movcs	r3, #0
	rx_list[head] = i;
    c07e:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    c080:	ldr	r1, [r0, #4]
    c082:	ldr	r2, [pc, #28]	; (c0a0 <rx_event+0x34>)
    c084:	ubfx	r1, r1, #16, #15
    c088:	ldrh	r2, [r2, #0]
    c08a:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    c08c:	ldr	r1, [pc, #20]	; (c0a4 <rx_event+0x38>)
    c08e:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    c092:	uxtb	r3, r3
    c094:	strb	r3, [r4, #0]
}
    c096:	pop	{r4, pc}
    c098:	.word	0x200155c6
    c09c:	.word	0x200155d0
    c0a0:	.word	0x200153e6
    c0a4:	.word	0x20014cbc

0000c0a8 <rx_queue_transfer>:
{
    c0a8:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c0aa:	ldr	r1, [pc, #80]	; (c0fc <rx_queue_transfer+0x54>)
{
    c0ac:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    c0ae:	ldr	r7, [pc, #80]	; (c100 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c0b0:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    c0b4:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c0b6:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    c0b8:	add	r0, r1
	asm("dsb");
    c0ba:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    c0be:	mov.w	r4, #3758153728	; 0xe000e000
    c0c2:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    c0c6:	adds	r2, #32
	} while (location < end_addr);
    c0c8:	cmp	r0, r2
    c0ca:	bhi.n	c0c2 <rx_queue_transfer+0x1a>
	asm("dsb");
    c0cc:	dsb	sy
	asm("isb");
    c0d0:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c0d4:	ldr	r5, [pc, #44]	; (c104 <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c0d6:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c0da:	ldrh	r2, [r7, #0]
    c0dc:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c0e0:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c0e4:	mov	r0, r5
    c0e6:	bl	b3f0 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c0ea:	mov	r1, r5
    c0ec:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c0ee:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c0f2:	bl	b440 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    c0f6:	str.w	r6, [r4, #268]	; 0x10c
}
    c0fa:	pop	{r3, r4, r5, r6, r7, pc}
    c0fc:	.word	0x20201000
    c100:	.word	0x200153e6
    c104:	.word	0x20005c40

0000c108 <usb_mtp_configure>:
	if (usb_high_speed) {
    c108:	ldr	r3, [pc, #120]	; (c184 <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c10a:	movs	r2, #128	; 0x80
    c10c:	movs	r1, #0
    c10e:	ldr	r0, [pc, #120]	; (c188 <usb_mtp_configure+0x80>)
{
    c110:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    c112:	ldrb	r3, [r3, #0]
	tx_head = 0;
    c114:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    c116:	ldr	r6, [pc, #116]	; (c18c <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    c118:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    c11a:	ldr	r3, [pc, #116]	; (c190 <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    c11c:	ite	eq
    c11e:	moveq	r5, #64	; 0x40
    c120:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    c124:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    c126:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c128:	bl	a1d4 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c12c:	movs	r2, #128	; 0x80
    c12e:	movs	r1, #0
    c130:	ldr	r0, [pc, #96]	; (c194 <usb_mtp_configure+0x8c>)
    c132:	bl	a1d4 <memset>
	tx_head = 0;
    c136:	ldr	r3, [pc, #96]	; (c198 <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c138:	mov	r2, r4
    c13a:	mov	r1, r5
	tx_head = 0;
    c13c:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c13e:	movs	r0, #4
	rx_head = 0;
    c140:	ldr	r3, [pc, #88]	; (c19c <usb_mtp_configure+0x94>)
    c142:	strb	r4, [r3, #0]
	rx_tail = 0;
    c144:	ldr	r3, [pc, #88]	; (c1a0 <usb_mtp_configure+0x98>)
    c146:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c148:	mov	r3, r4
    c14a:	bl	b3b0 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    c14e:	mov	r2, r4
    c150:	ldrh	r1, [r6, #0]
    c152:	movs	r0, #4
    c154:	ldr	r3, [pc, #76]	; (c1a4 <usb_mtp_configure+0x9c>)
    c156:	bl	b370 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    c15a:	mov	r2, r4
    c15c:	ldr	r3, [pc, #72]	; (c1a8 <usb_mtp_configure+0xa0>)
    c15e:	movs	r1, #32
    c160:	movs	r0, #5
    c162:	bl	b3b0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c166:	mov	r0, r4
    c168:	bl	c0a8 <rx_queue_transfer>
    c16c:	movs	r0, #1
    c16e:	bl	c0a8 <rx_queue_transfer>
    c172:	movs	r0, #2
    c174:	bl	c0a8 <rx_queue_transfer>
    c178:	movs	r0, #3
}
    c17a:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c17e:	b.w	c0a8 <rx_queue_transfer>
    c182:	nop
    c184:	.word	0x200155de
    c188:	.word	0x20005d40
    c18c:	.word	0x200153e6
    c190:	.word	0x2001546e
    c194:	.word	0x20005c40
    c198:	.word	0x200155da
    c19c:	.word	0x200155c6
    c1a0:	.word	0x200155d6
    c1a4:	.word	0x0000c06d
    c1a8:	.word	0x0000c05d

0000c1ac <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    c1ac:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    c1b0:	ldr	r7, [pc, #112]	; (c224 <usb_mtp_recv+0x78>)
{
    c1b2:	mov	r5, r1
	uint32_t tail = rx_tail;
    c1b4:	ldr	r6, [pc, #112]	; (c228 <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    c1b6:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    c1ba:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c1bc:	ldr.w	r9, [pc, #120]	; c238 <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    c1c0:	uxtb	r4, r3
		if (tail != rx_head) break;
    c1c2:	ldr.w	sl, [pc, #120]	; c23c <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c1c6:	ldrb.w	r3, [r9]
    c1ca:	cbz	r3, c218 <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    c1cc:	ldrb.w	r3, [sl]
    c1d0:	cmp	r4, r3
    c1d2:	bne.n	c1e8 <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    c1d4:	ldr	r3, [r7, #0]
    c1d6:	str	r0, [sp, #4]
    c1d8:	sub.w	r3, r3, r8
    c1dc:	cmp	r3, r5
    c1de:	bcs.n	c21e <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    c1e0:	bl	c3dc <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c1e4:	ldr	r0, [sp, #4]
    c1e6:	b.n	c1c6 <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    c1e8:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    c1ea:	ldr	r2, [pc, #64]	; (c22c <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    c1ec:	ldr	r1, [pc, #64]	; (c230 <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    c1ee:	cmp	r3, #5
    c1f0:	it	cs
    c1f2:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    c1f4:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    c1f6:	ldr	r2, [pc, #60]	; (c234 <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    c1f8:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    c1fc:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    c200:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    c202:	mov	r2, r4
	rx_tail = tail;
    c204:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    c206:	bl	a218 <memcpy>
	rx_queue_transfer(i);
    c20a:	mov	r0, r5
    c20c:	bl	c0a8 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    c210:	mov	r0, r4
    c212:	add	sp, #8
    c214:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c218:	mov.w	r4, #4294967295
    c21c:	b.n	c210 <usb_mtp_recv+0x64>
			return 0;
    c21e:	movs	r4, #0
    c220:	b.n	c210 <usb_mtp_recv+0x64>
    c222:	nop
    c224:	.word	0x20015374
    c228:	.word	0x200155d6
    c22c:	.word	0x200155d0
    c230:	.word	0x20201000
    c234:	.word	0x20014cbc
    c238:	.word	0x200155dd
    c23c:	.word	0x200155c6

0000c240 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    c240:	ldr	r3, [pc, #28]	; (c260 <usb_mtp_available+0x20>)
    c242:	ldrb	r3, [r3, #0]
    c244:	and.w	r0, r3, #255	; 0xff
    c248:	cbz	r3, c25e <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    c24a:	ldr	r3, [pc, #24]	; (c264 <usb_mtp_available+0x24>)
    c24c:	ldrb	r2, [r3, #0]
    c24e:	ldr	r3, [pc, #24]	; (c268 <usb_mtp_available+0x28>)
    c250:	ldrb	r3, [r3, #0]
    c252:	cmp	r2, r3
    c254:	beq.n	c25c <usb_mtp_available+0x1c>
    c256:	ldr	r3, [pc, #20]	; (c26c <usb_mtp_available+0x2c>)
    c258:	ldrh	r0, [r3, #0]
    c25a:	bx	lr
	if (!usb_configuration) return 0;
    c25c:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    c25e:	bx	lr
    c260:	.word	0x200155dd
    c264:	.word	0x200155c6
    c268:	.word	0x200155d6
    c26c:	.word	0x200153e6

0000c270 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    c270:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    c274:	ldr	r6, [pc, #164]	; (c31c <usb_mtp_send+0xac>)
{
    c276:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    c278:	ldr	r7, [pc, #164]	; (c320 <usb_mtp_send+0xb0>)
{
    c27a:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    c27c:	ldrb	r3, [r6, #0]
{
    c27e:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    c280:	ldr.w	r9, [pc, #168]	; c32c <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    c284:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c288:	ldr.w	fp, [pc, #164]	; c330 <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    c28c:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    c290:	ldrb.w	r3, [fp]
    c294:	cmp	r3, #0
    c296:	beq.n	c310 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    c298:	mov	r0, r7
    c29a:	bl	b45c <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    c29e:	lsls	r3, r0, #24
    c2a0:	bpl.n	c2b4 <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c2a2:	ldr.w	r3, [r9]
    c2a6:	sub.w	r3, r3, sl
    c2aa:	cmp	r3, r5
    c2ac:	bhi.n	c316 <usb_mtp_send+0xa6>
		yield();
    c2ae:	bl	c3dc <yield>
	while (1) {
    c2b2:	b.n	c290 <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c2b4:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    c2b6:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c2b8:	ldr	r5, [pc, #104]	; (c324 <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    c2ba:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c2bc:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    c2c0:	mov	r0, r5
    c2c2:	bl	a218 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    c2c6:	ldr	r2, [pc, #96]	; (c328 <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c2c8:	mov	r3, r5
    c2ca:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c2cc:	add	r2, r5
	asm("dsb");
    c2ce:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c2d2:	mov.w	r1, #3758153728	; 0xe000e000
    c2d6:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    c2da:	adds	r3, #32
	} while (location < end_addr);
    c2dc:	cmp	r2, r3
    c2de:	bhi.n	c2d6 <usb_mtp_send+0x66>
	asm("dsb");
    c2e0:	dsb	sy
	asm("isb");
    c2e4:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    c2e8:	movs	r3, #0
    c2ea:	mov	r2, r4
    c2ec:	mov	r1, r5
    c2ee:	mov	r0, r7
    c2f0:	bl	b3f0 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    c2f4:	movs	r0, #4
    c2f6:	mov	r1, r7
    c2f8:	bl	b41c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c2fc:	ldrb	r3, [r6, #0]
	return len;
    c2fe:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    c300:	adds	r3, #1
    c302:	uxtb	r3, r3
    c304:	cmp	r3, #3
    c306:	it	hi
    c308:	movhi	r3, #0
    c30a:	strb	r3, [r6, #0]
}
    c30c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c310:	mov.w	r0, #4294967295
    c314:	b.n	c30c <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c316:	movs	r0, #0
    c318:	b.n	c30c <usb_mtp_send+0x9c>
    c31a:	nop
    c31c:	.word	0x200155da
    c320:	.word	0x20005d40
    c324:	.word	0x20201800
    c328:	.word	0x2001546e
    c32c:	.word	0x20015374
    c330:	.word	0x200155dd

0000c334 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c334:	ldr	r3, [pc, #68]	; (c37c <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    c336:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c338:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    c33c:	ldr	r3, [pc, #64]	; (c380 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c33e:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c342:	cmp	r0, r3
{
    c344:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    c346:	it	cc
    c348:	movcc	r3, #10
{
    c34a:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    c34c:	it	cc
    c34e:	mulcc	r0, r3
	ultoa(num, buf, 10);
    c350:	add	r1, sp, #4
    c352:	bl	b484 <ultoa>
	for (i=0; i<10; i++) {
    c356:	ldr	r0, [pc, #44]	; (c384 <usb_init_serialnumber+0x50>)
    c358:	add	r2, sp, #4
    c35a:	movs	r1, #0
    c35c:	mov	r5, r0
		char c = buf[i];
    c35e:	ldrb.w	r4, [r2], #1
		if (!c) break;
    c362:	mov	r3, r1
	for (i=0; i<10; i++) {
    c364:	adds	r1, #1
		if (!c) break;
    c366:	cbz	r4, c372 <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    c368:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    c36a:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    c36e:	bne.n	c35e <usb_init_serialnumber+0x2a>
    c370:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c372:	adds	r3, #1
    c374:	lsls	r3, r3, #1
    c376:	strb	r3, [r5, #0]
}
    c378:	add	sp, #20
    c37a:	pop	{r4, r5, pc}
    c37c:	.word	0x401f4400
    c380:	.word	0x00989680
    c384:	.word	0x200022f8

0000c388 <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c388:	ldr	r1, [pc, #68]	; (c3d0 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    c38a:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    c38c:	ldr	r3, [r1, #0]
    c38e:	cbz	r3, c3a4 <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c390:	mrs	r3, IPSR
		if (ipsr != 0) return;
    c394:	cbnz	r3, c3a4 <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c396:	mrs	r2, PRIMASK
		__disable_irq();
    c39a:	cpsid	i
		EventResponder *first = firstYield;
    c39c:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    c39e:	cbnz	r0, c3a6 <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c3a0:	cbnz	r2, c3a4 <EventResponder::runFromYield()+0x1c>
    c3a2:	cpsie	i
	}
    c3a4:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    c3a6:	ldr	r4, [pc, #44]	; (c3d4 <EventResponder::runFromYield()+0x4c>)
    c3a8:	ldrb	r5, [r4, #0]
    c3aa:	cmp	r5, #0
    c3ac:	bne.n	c3a0 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    c3ae:	movs	r3, #1
    c3b0:	strb	r3, [r4, #0]
		firstYield = first->_next;
    c3b2:	ldr	r3, [r0, #20]
    c3b4:	str	r3, [r1, #0]
		if (firstYield) {
    c3b6:	cbz	r3, c3ca <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    c3b8:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c3ba:	cbnz	r2, c3be <EventResponder::runFromYield()+0x36>
    c3bc:	cpsie	i
		first->_triggered = false;
    c3be:	movs	r5, #0
		(*(first->_function))(*first);
    c3c0:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c3c2:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c3c4:	blx	r3
		runningFromYield = false;
    c3c6:	strb	r5, [r4, #0]
    c3c8:	b.n	c3a4 <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    c3ca:	ldr	r1, [pc, #12]	; (c3d8 <EventResponder::runFromYield()+0x50>)
    c3cc:	str	r3, [r1, #0]
    c3ce:	b.n	c3ba <EventResponder::runFromYield()+0x32>
    c3d0:	.word	0x20014804
    c3d4:	.word	0x20015535
    c3d8:	.word	0x20014810

0000c3dc <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    c3dc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    c3e0:	ldr	r3, [pc, #92]	; (c440 <yield+0x64>)
    c3e2:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    c3e4:	cbz	r4, c40e <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    c3e6:	ldr	r5, [pc, #92]	; (c444 <yield+0x68>)
    c3e8:	ldrb	r3, [r5, #0]
    c3ea:	cbnz	r3, c40e <yield+0x32>
	running = 1;
    c3ec:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c3ee:	lsls	r1, r4, #31
	running = 1;
    c3f0:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c3f2:	bpl.n	c3fe <yield+0x22>
    c3f4:	bl	a700 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c3f8:	cbz	r0, c3fe <yield+0x22>
    c3fa:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c3fe:	lsls	r2, r4, #30
    c400:	bmi.n	c434 <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    c402:	movs	r3, #0
    c404:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    c406:	lsls	r3, r4, #29
    c408:	bpl.n	c40e <yield+0x32>
		EventResponder::runFromYield();
    c40a:	bl	c388 <EventResponder::runFromYield()>
	}
};
    c40e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    c412:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c416:	ldr	r3, [r7, #0]
    c418:	mov	r0, r7
    c41a:	ldr	r3, [r3, #16]
    c41c:	blx	r3
    c41e:	cbz	r0, c426 <yield+0x4a>
    c420:	ldr	r3, [r7, #20]
    c422:	ldr	r3, [r3, #8]
    c424:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c426:	adds	r6, #1
    c428:	ldrb.w	r2, [r8]
    c42c:	uxtb	r3, r6
    c42e:	cmp	r2, r3
    c430:	bhi.n	c412 <yield+0x36>
    c432:	b.n	c402 <yield+0x26>
    c434:	movs	r6, #0
    c436:	ldr.w	r8, [pc, #16]	; c448 <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    c43a:	ldr.w	r9, [pc, #16]	; c44c <yield+0x70>
    c43e:	b.n	c428 <yield+0x4c>
    c440:	.word	0x200155e0
    c444:	.word	0x20015537
    c448:	.word	0x20015536
    c44c:	.word	0x20014814

0000c450 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    c450:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c452:	ldr	r5, [pc, #44]	; (c480 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    c454:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    c456:	ldr	r6, [pc, #44]	; (c484 <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c458:	mrs	r2, PRIMASK
		__disable_irq();
    c45c:	cpsid	i
		EventResponder *first = firstInterrupt;
    c45e:	ldr	r0, [r5, #0]
		if (first) {
    c460:	cbz	r0, c47a <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    c462:	ldr	r3, [r0, #20]
    c464:	str	r3, [r5, #0]
			if (firstInterrupt) {
    c466:	cbz	r3, c476 <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    c468:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    c46a:	cbnz	r2, c46e <EventResponder::runFromInterrupt()+0x1e>
    c46c:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    c46e:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c470:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    c472:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    c474:	b.n	c458 <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    c476:	str	r3, [r6, #0]
    c478:	b.n	c46a <EventResponder::runFromInterrupt()+0x1a>
    c47a:	cbnz	r2, c47e <EventResponder::runFromInterrupt()+0x2e>
    c47c:	cpsie	i
}
    c47e:	pop	{r4, r5, r6, pc}
    c480:	.word	0x2001480c
    c484:	.word	0x20014808

0000c488 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c488:	b.w	c450 <EventResponder::runFromInterrupt()>

0000c48c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c48c:	ldr	r3, [pc, #16]	; (c4a0 <systick_isr+0x14>)
    c48e:	ldr	r2, [r3, #4]
    c490:	ldr	r3, [pc, #16]	; (c4a4 <systick_isr+0x18>)
    c492:	str	r2, [r3, #0]
	systick_millis_count++;
    c494:	ldr	r2, [pc, #16]	; (c4a8 <systick_isr+0x1c>)
    c496:	ldr	r3, [r2, #0]
    c498:	adds	r3, #1
    c49a:	str	r3, [r2, #0]
}
    c49c:	bx	lr
    c49e:	nop
    c4a0:	.word	0xe0001000
    c4a4:	.word	0x20015370
    c4a8:	.word	0x20015374

0000c4ac <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c4ac:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    c4ae:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c4b0:	ldr	r4, [pc, #136]	; (c53c <DMAChannel::begin(bool)+0x90>)
    c4b2:	cbnz	r1, c4d8 <DMAChannel::begin(bool)+0x2c>
    c4b4:	ldr	r1, [r0, #0]
    c4b6:	cbz	r1, c4d8 <DMAChannel::begin(bool)+0x2c>
    c4b8:	ldrb	r3, [r0, #4]
    c4ba:	cmp	r3, #15
    c4bc:	bhi.n	c4d8 <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    c4be:	ldrh	r2, [r4, #0]
    c4c0:	asrs	r2, r3
    c4c2:	lsls	r2, r2, #31
    c4c4:	bpl.n	c4d8 <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c4c6:	add.w	r3, r3, #33554432	; 0x2000000
    c4ca:	add.w	r3, r3, #29824	; 0x7480
    c4ce:	cmp.w	r1, r3, lsl #5
    c4d2:	bne.n	c4d8 <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    c4d4:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c4d6:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c4d8:	ldrh	r1, [r4, #0]
    c4da:	movs	r3, #0
    c4dc:	asr.w	r2, r1, r3
    c4e0:	ands.w	r2, r2, #1
    c4e4:	bne.n	c52c <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    c4e6:	movs	r5, #1
    c4e8:	lsls	r5, r3
    c4ea:	orrs	r1, r5
    c4ec:	strh	r1, [r4, #0]
			__enable_irq();
    c4ee:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c4f0:	ldr	r5, [pc, #76]	; (c540 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    c4f2:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c4f4:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    c4f8:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c4fa:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c4fc:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c500:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c504:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c506:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c508:	movw	r5, #1154	; 0x482
    c50c:	ldr	r1, [pc, #52]	; (c544 <DMAChannel::begin(bool)+0x98>)
    c50e:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    c510:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    c512:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    c514:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    c516:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c518:	str	r3, [r0, #0]
	*p++ = 0;
    c51a:	strd	r2, r2, [r3]
	*p++ = 0;
    c51e:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c522:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c526:	strd	r2, r2, [r3, #24]
    c52a:	b.n	c4d6 <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    c52c:	adds	r3, #1
    c52e:	cmp	r3, #16
    c530:	bne.n	c4dc <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    c532:	cpsie	i
			TCD = (TCD_t *)0;
    c534:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c536:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c538:	str	r2, [r0, #0]
			return; // no more channels available
    c53a:	b.n	c4d6 <DMAChannel::begin(bool)+0x2a>
    c53c:	.word	0x200153bc
    c540:	.word	0x400fc000
    c544:	.word	0x400e8000

0000c548 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c548:	ldrb	r3, [r0, #4]
    c54a:	cmp	r3, #15
    c54c:	bhi.n	c56e <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    c54e:	ldr	r2, [pc, #32]	; (c570 <DMAChannel::release()+0x28>)
    c550:	strb	r3, [r2, #26]
	__disable_irq();
    c552:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c554:	ldr	r1, [pc, #28]	; (c574 <DMAChannel::release()+0x2c>)
    c556:	movs	r2, #1
    c558:	ldrb	r3, [r0, #4]
    c55a:	lsls	r2, r3
    c55c:	ldrh	r3, [r1, #0]
    c55e:	bic.w	r3, r3, r2
    c562:	strh	r3, [r1, #0]
	__enable_irq();
    c564:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c566:	movs	r3, #16
    c568:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    c56a:	movs	r3, #0
    c56c:	str	r3, [r0, #0]
}
    c56e:	bx	lr
    c570:	.word	0x400e8000
    c574:	.word	0x200153bc

0000c578 <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    c578:	push	{r3, lr}
    c57a:	bl	cda <Print::write(char const*)>
    c57e:	pop	{r3, pc}

0000c580 <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    c580:	movs	r3, #0
    c582:	movs	r2, #10
    c584:	b.w	c736 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c588 <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    c588:	movs	r3, #0
    c58a:	uxtb	r2, r2
    c58c:	b.w	c736 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c590 <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    c590:	push	{r3, r4, r5, lr}
    c592:	mov	r5, r0
    c594:	bl	c588 <Print::print(unsigned long, int)>
    c598:	mov	r4, r0
    c59a:	mov	r0, r5
    c59c:	bl	c6e4 <Print::println()>
    c5a0:	add	r0, r4
    c5a2:	pop	{r3, r4, r5, pc}

0000c5a4 <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    c5a4:	movs	r2, #0
    c5a6:	movs	r3, #1
    c5a8:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    c5aa:	push	{r4, lr}
		while (len > 0) {
    c5ac:	cmp	r1, #0
    c5ae:	sub.w	r4, r0, r1
    c5b2:	bgt.n	c5bc <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    c5b4:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    c5b6:	orr.w	r0, r3, r2, lsl #16
    c5ba:	pop	{r4, pc}
			a += *p++;
    c5bc:	ldrh	r4, [r4, #0]
			len -= 2;
    c5be:	subs	r1, #2
			a += *p++;
    c5c0:	uxtah	r3, r3, r4
			b += a;
    c5c4:	add	r2, r3
			len -= 2;
    c5c6:	b.n	c5ac <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000c5c8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c5c8:	b.w	a714 <usb_serial_flush_input>

0000c5cc <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c5cc:	b.w	a6bc <usb_serial_peekchar>

0000c5d0 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c5d0:	b.w	a774 <usb_serial_getchar>

0000c5d4 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c5d4:	b.w	a700 <usb_serial_available>

0000c5d8 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c5d8:	b.w	a984 <usb_serial_flush_output>

0000c5dc <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c5dc:	b.w	a938 <usb_serial_write_buffer_free>

0000c5e0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c5e0:	mov	r0, r1
    c5e2:	mov	r1, r2
    c5e4:	b.w	a794 <usb_serial_write>

0000c5e8 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c5e8:	mov	r0, r1
    c5ea:	b.w	a920 <usb_serial_putchar>

0000c5ee <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c5ee:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c5f0:	bl	788 <setup>
	while (1) {
		loop();
    c5f4:	bl	27c <loop>
		yield();
    c5f8:	bl	c3dc <yield>
	while (1) {
    c5fc:	b.n	c5f4 <main+0x6>
	...

0000c600 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    c600:	push	{r4, r5, r6, lr}
    c602:	ldr	r5, [pc, #36]	; (c628 <Stream::timedRead()+0x28>)
    c604:	mov	r4, r0
    c606:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    c608:	ldr	r3, [r4, #0]
    c60a:	mov	r0, r4
    c60c:	ldr	r3, [r3, #20]
    c60e:	blx	r3
    if (c >= 0) return c;
    c610:	cmp	r0, #0
    c612:	bge.n	c626 <Stream::timedRead()+0x26>
    yield();
    c614:	bl	c3dc <yield>
    c618:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c61a:	ldr	r2, [r4, #8]
    c61c:	subs	r3, r3, r6
    c61e:	cmp	r3, r2
    c620:	bcc.n	c608 <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    c622:	mov.w	r0, #4294967295
}
    c626:	pop	{r4, r5, r6, pc}
    c628:	.word	0x20015374

0000c62c <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    c62c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c630:	mov	r6, r0
    c632:	mov	r7, r1
    c634:	mov	r4, r3
	if (buffer == nullptr) return 0;
    c636:	mov	r5, r2
    c638:	cbz	r2, c66a <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    c63a:	cbz	r3, c65c <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    c63c:	add.w	r8, r3, #4294967295
	size_t index = 0;
    c640:	movs	r4, #0
	while (index < length) {
    c642:	cmp	r4, r8
    c644:	bcs.n	c658 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    c646:	mov	r0, r6
    c648:	bl	c600 <Stream::timedRead()>
		if (c == terminator) break;
    c64c:	cmp	r7, r0
    c64e:	beq.n	c658 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    c650:	cmp	r0, #0
    c652:	bge.n	c662 <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    c654:	movs	r3, #1
    c656:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    c658:	movs	r3, #0
    c65a:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    c65c:	mov	r0, r4
    c65e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    c662:	adds	r4, #1
		*buffer++ = (char)c;
    c664:	strb.w	r0, [r5], #1
		index++;
    c668:	b.n	c642 <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    c66a:	mov	r4, r2
    c66c:	b.n	c65c <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000c66e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c66e:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c670:	push	{r4, r5, r6, r7, lr}
		base = 10;
    c672:	it	eq
    c674:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c676:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    c678:	cbnz	r1, c6a6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    c67a:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    c67c:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    c67e:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c682:	cbz	r3, c694 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    c684:	subs	r3, r4, #1
		buf[i] = '-';
    c686:	add	r2, sp, #40	; 0x28
		i--;
    c688:	uxtb	r4, r3
		buf[i] = '-';
    c68a:	uxtab	r3, r2, r3
    c68e:	movs	r2, #45	; 0x2d
    c690:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c694:	ldr	r3, [r0, #0]
    c696:	add	r1, sp, #4
    c698:	rsb	r2, r4, #34	; 0x22
    c69c:	ldr	r3, [r3, #4]
    c69e:	add	r1, r4
    c6a0:	blx	r3
}
    c6a2:	add	sp, #44	; 0x2c
    c6a4:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    c6a6:	movs	r4, #33	; 0x21
			digit = n % base;
    c6a8:	udiv	r6, r1, r2
    c6ac:	mls	r7, r2, r6, r1
    c6b0:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c6b2:	cmp	r7, #9
    c6b4:	add.w	r7, r4, #40	; 0x28
    c6b8:	ite	ls
    c6ba:	addls	r5, #48	; 0x30
    c6bc:	addhi	r5, #55	; 0x37
    c6be:	add	r7, sp
			if (n == 0) break;
    c6c0:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c6c2:	uxtb	r5, r5
    c6c4:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    c6c8:	bhi.n	c682 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    c6ca:	subs	r4, #1
			n /= base;
    c6cc:	mov	r1, r6
			i--;
    c6ce:	uxtb	r4, r4
			digit = n % base;
    c6d0:	b.n	c6a8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000c6d2 <Print::print(long)>:
	if (n < 0) {
    c6d2:	cmp	r1, #0
		n = -n;
    c6d4:	mov.w	r2, #10
    c6d8:	itte	lt
    c6da:	neglt	r1, r1
		sign = '-';
    c6dc:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    c6de:	movge	r3, #0
	if (base == 0) {
    c6e0:	b.w	c66e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c6e4 <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    c6e4:	movw	r3, #2573	; 0xa0d
{
    c6e8:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    c6ea:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c6ee:	movs	r2, #2
    c6f0:	ldr	r3, [r0, #0]
    c6f2:	add	r1, sp, #4
    c6f4:	ldr	r3, [r3, #4]
    c6f6:	blx	r3
}
    c6f8:	add	sp, #12
    c6fa:	ldr.w	pc, [sp], #4
	...

0000c700 <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c700:	ldr	r3, [pc, #20]	; (c718 <_write+0x18>)
    c702:	cmp	r0, #2
    c704:	it	hi
    c706:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c708:	ldr	r0, [r3, #0]
{
    c70a:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c70c:	ldr	r4, [r0, #4]
    c70e:	mov	r0, r3
    c710:	mov	r3, r4
}
    c712:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c716:	bx	r3
    c718:	.word	0x20001d30

0000c71c <Print::printf(char const*, ...)>:
{
    c71c:	push	{r1, r2, r3}
    c71e:	push	{r0, r1, lr}
    c720:	add	r2, sp, #12
    c722:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    c726:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    c728:	bl	ea68 <vdiprintf>
}
    c72c:	add	sp, #8
    c72e:	ldr.w	lr, [sp], #4
    c732:	add	sp, #12
    c734:	bx	lr

0000c736 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    c736:	push	{r4, r5}
	if (base == 0) {
    c738:	cbnz	r2, c744 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    c73a:	ldr	r3, [r0, #0]
    c73c:	uxtb	r1, r1
    c73e:	ldr	r3, [r3, #0]
}
    c740:	pop	{r4, r5}
		return write((uint8_t)n);
    c742:	bx	r3
}
    c744:	pop	{r4, r5}
    c746:	b.w	c66e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c74a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    c74a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c74e:	sub	sp, #72	; 0x48
    c750:	mov	r8, r0
    c752:	mov	r7, r2
    c754:	mov	r6, r3
    c756:	ldrb.w	r9, [sp, #104]	; 0x68
    c75a:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c75e:	cmp.w	r9, #1
    c762:	bls.n	c7d6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    c764:	orrs.w	r3, r2, r6
    c768:	bne.n	c7a0 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    c76a:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    c76c:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    c76e:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c772:	cmp.w	sl, #0
    c776:	beq.n	c788 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    c778:	subs	r3, r5, #1
		buf[i] = '-';
    c77a:	add	r2, sp, #72	; 0x48
		i--;
    c77c:	uxtb	r5, r3
		buf[i] = '-';
    c77e:	uxtab	r3, r2, r3
    c782:	movs	r2, #45	; 0x2d
    c784:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    c788:	ldr.w	r3, [r8]
    c78c:	add	r1, sp, #4
    c78e:	rsb	r2, r5, #66	; 0x42
    c792:	mov	r0, r8
    c794:	ldr	r3, [r3, #4]
    c796:	add	r1, r5
    c798:	blx	r3
}
    c79a:	add	sp, #72	; 0x48
    c79c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    c7a0:	movs	r5, #65	; 0x41
			digit = n % base;
    c7a2:	mov	r1, r6
    c7a4:	mov	r2, r9
    c7a6:	movs	r3, #0
    c7a8:	mov	r0, r7
    c7aa:	bl	c91c <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c7ae:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    c7b2:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c7b4:	add	r3, sp
    c7b6:	cmp	r4, #9
    c7b8:	ite	ls
    c7ba:	addls	r4, #48	; 0x30
    c7bc:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    c7be:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c7c0:	uxtb	r4, r4
			if (n == 0) break;
    c7c2:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c7c6:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    c7ca:	bcc.n	c772 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    c7cc:	subs	r5, #1
			n /= base;
    c7ce:	mov	r7, r0
    c7d0:	mov	r6, r1
			i--;
    c7d2:	uxtb	r5, r5
			digit = n % base;
    c7d4:	b.n	c7a2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    c7d6:	movs	r0, #0
    c7d8:	b.n	c79a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
    c7da:	movs	r0, r0
    c7dc:	movs	r0, r0
	...

0000c7e0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c7e0:	vcmp.f64	d0, d0
{
    c7e4:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    c7e6:	vmrs	APSR_nzcv, fpscr
{
    c7ea:	mov	r6, r0
    c7ec:	mov	r5, r1
    c7ee:	vpush	{d8-d9}
    c7f2:	sub	sp, #28
	if (isnan(number)) return print("nan");
    c7f4:	bvc.n	c808 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    c7f6:	ldr	r1, [pc, #264]	; (c900 <Print::printFloat(double, unsigned char)+0x120>)
    c7f8:	bl	cda <Print::write(char const*)>
    c7fc:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    c7fe:	mov	r0, r4
    c800:	add	sp, #28
    c802:	vpop	{d8-d9}
    c806:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c808:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c80c:	vldr	d6, [pc, #208]	; c8e0 <Print::printFloat(double, unsigned char)+0x100>
    c810:	vcmp.f64	d7, d6
    c814:	vmrs	APSR_nzcv, fpscr
    c818:	ble.n	c81e <Print::printFloat(double, unsigned char)+0x3e>
    c81a:	ldr	r1, [pc, #232]	; (c904 <Print::printFloat(double, unsigned char)+0x124>)
    c81c:	b.n	c7f8 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c81e:	vldr	d7, [pc, #200]	; c8e8 <Print::printFloat(double, unsigned char)+0x108>
    c822:	vcmpe.f64	d0, d7
    c826:	vmrs	APSR_nzcv, fpscr
    c82a:	ble.n	c832 <Print::printFloat(double, unsigned char)+0x52>
    c82c:	ldr	r1, [pc, #216]	; (c908 <Print::printFloat(double, unsigned char)+0x128>)
    c82e:	mov	r0, r6
    c830:	b.n	c7f8 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c832:	vldr	d7, [pc, #188]	; c8f0 <Print::printFloat(double, unsigned char)+0x110>
    c836:	vcmpe.f64	d0, d7
    c83a:	vmrs	APSR_nzcv, fpscr
    c83e:	bmi.n	c82c <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    c840:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    c844:	movs	r2, #0
	double rounding = 0.5;
    c846:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    c84a:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    c84e:	vldr	d6, [pc, #168]	; c8f8 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    c852:	itte	mi
    c854:	vnegmi.f64	d0, d0
		sign = 1;
    c858:	movmi	r3, #1
	uint8_t sign=0;
    c85a:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    c85c:	uxtb	r1, r2
    c85e:	cmp	r5, r1
    c860:	bhi.n	c8b0 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    c862:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    c866:	movs	r2, #10
    c868:	mov	r0, r6
    c86a:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    c86e:	vmov	r1, s18
    c872:	bl	c66e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c876:	mov	r4, r0
	if (digits > 0) {
    c878:	cmp	r5, #0
    c87a:	beq.n	c7fe <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    c87c:	vcvt.f64.u32	d0, s18
    c880:	cmp	r5, #15
    c882:	add	r0, sp, #8
			remainder *= 10.0;
    c884:	vmov.f64	d6, #36	; 0x41200000  10.0
    c888:	it	cs
    c88a:	movcs	r5, #15
		buf[0] = '.';
    c88c:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    c88e:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    c892:	mov	r1, r0
    c894:	mov	r2, r5
    c896:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    c89a:	subs	r2, #1
    c89c:	uxtb	r2, r2
    c89e:	cmp	r2, #255	; 0xff
    c8a0:	bne.n	c8b8 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    c8a2:	adds	r5, #1
    c8a4:	ldr	r3, [r6, #0]
    c8a6:	mov	r0, r6
    c8a8:	ldr	r3, [r3, #4]
    c8aa:	uxtb	r2, r5
    c8ac:	blx	r3
    c8ae:	b.n	c7fe <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    c8b0:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    c8b4:	adds	r2, #1
    c8b6:	b.n	c85c <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    c8b8:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    c8bc:	vcvt.u32.f64	s15, d0
    c8c0:	vstr	s15, [sp, #4]
    c8c4:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    c8c8:	vmov	s15, r3
			buf[count++] = '0' + n;
    c8cc:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    c8d0:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    c8d4:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    c8d8:	vsub.f64	d0, d0, d7
    c8dc:	b.n	c89a <Print::printFloat(double, unsigned char)+0xba>
    c8de:	nop
    c8e0:	.word	0xffffffff
    c8e4:	.word	0x7fefffff
    c8e8:	.word	0xe0000000
    c8ec:	.word	0x41efffff
    c8f0:	.word	0xe0000000
    c8f4:	.word	0xc1efffff
    c8f8:	.word	0xa0000000
    c8fc:	.word	0x3fb99999
    c900:	.word	0x200011a2
    c904:	.word	0x200011a6
    c908:	.word	0x200011aa

0000c90c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    c90c:	b.w	cc28 <free>

0000c910 <__aeabi_atexit>:
    c910:	mov	r3, r1
    c912:	mov	r1, r0
    c914:	mov	r0, r3
    c916:	b.w	da88 <__cxa_atexit>
	...

0000c91c <__aeabi_uldivmod>:
    c91c:	cbnz	r3, c934 <__aeabi_uldivmod+0x18>
    c91e:	cbnz	r2, c934 <__aeabi_uldivmod+0x18>
    c920:	cmp	r1, #0
    c922:	it	eq
    c924:	cmpeq	r0, #0
    c926:	itt	ne
    c928:	movne.w	r1, #4294967295
    c92c:	movne.w	r0, #4294967295
    c930:	b.w	cc14 <__aeabi_idiv0>
    c934:	sub.w	ip, sp, #8
    c938:	strd	ip, lr, [sp, #-16]!
    c93c:	bl	c94c <__udivmoddi4>
    c940:	ldr.w	lr, [sp, #4]
    c944:	ldrd	r2, r3, [sp, #8]
    c948:	add	sp, #16
    c94a:	bx	lr

0000c94c <__udivmoddi4>:
    c94c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c950:	ldr	r6, [sp, #32]
    c952:	mov	r5, r1
    c954:	mov	r4, r0
    c956:	mov	r7, r1
    c958:	cmp	r3, #0
    c95a:	bne.n	c9f2 <__udivmoddi4+0xa6>
    c95c:	cmp	r2, r1
    c95e:	mov	ip, r2
    c960:	bls.n	ca2e <__udivmoddi4+0xe2>
    c962:	clz	r3, r2
    c966:	cbz	r3, c97a <__udivmoddi4+0x2e>
    c968:	lsl.w	ip, r2, r3
    c96c:	rsb	r2, r3, #32
    c970:	lsls	r7, r3
    c972:	lsr.w	r2, r0, r2
    c976:	orrs	r7, r2
    c978:	lsls	r4, r3
    c97a:	mov.w	lr, ip, lsr #16
    c97e:	uxth.w	r5, ip
    c982:	udiv	r1, r7, lr
    c986:	lsrs	r2, r4, #16
    c988:	mls	r7, lr, r1, r7
    c98c:	orr.w	r2, r2, r7, lsl #16
    c990:	mul.w	r0, r1, r5
    c994:	cmp	r0, r2
    c996:	bls.n	c9ae <__udivmoddi4+0x62>
    c998:	adds.w	r2, ip, r2
    c99c:	add.w	r7, r1, #4294967295
    c9a0:	bcs.w	cbdc <__udivmoddi4+0x290>
    c9a4:	cmp	r0, r2
    c9a6:	bls.w	cbdc <__udivmoddi4+0x290>
    c9aa:	subs	r1, #2
    c9ac:	add	r2, ip
    c9ae:	subs	r2, r2, r0
    c9b0:	uxth	r4, r4
    c9b2:	udiv	r0, r2, lr
    c9b6:	mls	r2, lr, r0, r2
    c9ba:	orr.w	r4, r4, r2, lsl #16
    c9be:	mul.w	r5, r0, r5
    c9c2:	cmp	r5, r4
    c9c4:	bls.n	c9dc <__udivmoddi4+0x90>
    c9c6:	adds.w	r4, ip, r4
    c9ca:	add.w	r2, r0, #4294967295
    c9ce:	bcs.w	cbe0 <__udivmoddi4+0x294>
    c9d2:	cmp	r5, r4
    c9d4:	bls.w	cbe0 <__udivmoddi4+0x294>
    c9d8:	add	r4, ip
    c9da:	subs	r0, #2
    c9dc:	orr.w	r0, r0, r1, lsl #16
    c9e0:	subs	r4, r4, r5
    c9e2:	movs	r1, #0
    c9e4:	cbz	r6, c9ee <__udivmoddi4+0xa2>
    c9e6:	lsrs	r4, r3
    c9e8:	movs	r3, #0
    c9ea:	strd	r4, r3, [r6]
    c9ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c9f2:	cmp	r3, r1
    c9f4:	bls.n	ca08 <__udivmoddi4+0xbc>
    c9f6:	cmp	r6, #0
    c9f8:	beq.w	cbd6 <__udivmoddi4+0x28a>
    c9fc:	movs	r1, #0
    c9fe:	strd	r0, r5, [r6]
    ca02:	mov	r0, r1
    ca04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca08:	clz	r1, r3
    ca0c:	cmp	r1, #0
    ca0e:	bne.n	caa4 <__udivmoddi4+0x158>
    ca10:	cmp	r3, r5
    ca12:	bcc.n	ca1a <__udivmoddi4+0xce>
    ca14:	cmp	r2, r0
    ca16:	bhi.w	cc0a <__udivmoddi4+0x2be>
    ca1a:	subs	r4, r0, r2
    ca1c:	sbc.w	r2, r5, r3
    ca20:	movs	r0, #1
    ca22:	mov	r7, r2
    ca24:	cmp	r6, #0
    ca26:	beq.n	c9ee <__udivmoddi4+0xa2>
    ca28:	strd	r4, r7, [r6]
    ca2c:	b.n	c9ee <__udivmoddi4+0xa2>
    ca2e:	cbnz	r2, ca32 <__udivmoddi4+0xe6>
    ca30:	udf	#255	; 0xff
    ca32:	clz	r3, r2
    ca36:	cmp	r3, #0
    ca38:	bne.w	cb5c <__udivmoddi4+0x210>
    ca3c:	subs	r2, r1, r2
    ca3e:	mov.w	r7, ip, lsr #16
    ca42:	uxth.w	lr, ip
    ca46:	movs	r1, #1
    ca48:	udiv	r5, r2, r7
    ca4c:	mls	r0, r7, r5, r2
    ca50:	lsrs	r2, r4, #16
    ca52:	orr.w	r2, r2, r0, lsl #16
    ca56:	mul.w	r0, lr, r5
    ca5a:	cmp	r0, r2
    ca5c:	bls.n	ca70 <__udivmoddi4+0x124>
    ca5e:	adds.w	r2, ip, r2
    ca62:	add.w	r8, r5, #4294967295
    ca66:	bcs.n	ca6e <__udivmoddi4+0x122>
    ca68:	cmp	r0, r2
    ca6a:	bhi.w	cc04 <__udivmoddi4+0x2b8>
    ca6e:	mov	r5, r8
    ca70:	subs	r2, r2, r0
    ca72:	uxth	r4, r4
    ca74:	udiv	r0, r2, r7
    ca78:	mls	r2, r7, r0, r2
    ca7c:	orr.w	r4, r4, r2, lsl #16
    ca80:	mul.w	lr, lr, r0
    ca84:	cmp	lr, r4
    ca86:	bls.n	ca9a <__udivmoddi4+0x14e>
    ca88:	adds.w	r4, ip, r4
    ca8c:	add.w	r2, r0, #4294967295
    ca90:	bcs.n	ca98 <__udivmoddi4+0x14c>
    ca92:	cmp	lr, r4
    ca94:	bhi.w	cc0e <__udivmoddi4+0x2c2>
    ca98:	mov	r0, r2
    ca9a:	sub.w	r4, r4, lr
    ca9e:	orr.w	r0, r0, r5, lsl #16
    caa2:	b.n	c9e4 <__udivmoddi4+0x98>
    caa4:	rsb	r7, r1, #32
    caa8:	lsls	r3, r1
    caaa:	lsr.w	ip, r2, r7
    caae:	orr.w	ip, ip, r3
    cab2:	lsl.w	r4, r5, r1
    cab6:	lsr.w	r3, r0, r7
    caba:	lsrs	r5, r7
    cabc:	mov.w	r9, ip, lsr #16
    cac0:	orrs	r3, r4
    cac2:	udiv	r8, r5, r9
    cac6:	uxth.w	lr, ip
    caca:	mls	r5, r9, r8, r5
    cace:	lsrs	r4, r3, #16
    cad0:	orr.w	r4, r4, r5, lsl #16
    cad4:	mul.w	r5, r8, lr
    cad8:	cmp	r5, r4
    cada:	lsl.w	r2, r2, r1
    cade:	lsl.w	r0, r0, r1
    cae2:	bls.n	cafc <__udivmoddi4+0x1b0>
    cae4:	adds.w	r4, ip, r4
    cae8:	add.w	sl, r8, #4294967295
    caec:	bcs.w	cc00 <__udivmoddi4+0x2b4>
    caf0:	cmp	r5, r4
    caf2:	bls.w	cc00 <__udivmoddi4+0x2b4>
    caf6:	sub.w	r8, r8, #2
    cafa:	add	r4, ip
    cafc:	subs	r4, r4, r5
    cafe:	uxth	r5, r3
    cb00:	udiv	r3, r4, r9
    cb04:	mls	r4, r9, r3, r4
    cb08:	orr.w	r4, r5, r4, lsl #16
    cb0c:	mul.w	lr, r3, lr
    cb10:	cmp	lr, r4
    cb12:	bls.n	cb26 <__udivmoddi4+0x1da>
    cb14:	adds.w	r4, ip, r4
    cb18:	add.w	r5, r3, #4294967295
    cb1c:	bcs.n	cbf8 <__udivmoddi4+0x2ac>
    cb1e:	cmp	lr, r4
    cb20:	bls.n	cbf8 <__udivmoddi4+0x2ac>
    cb22:	subs	r3, #2
    cb24:	add	r4, ip
    cb26:	orr.w	r3, r3, r8, lsl #16
    cb2a:	umull	r9, r5, r3, r2
    cb2e:	sub.w	r4, r4, lr
    cb32:	cmp	r4, r5
    cb34:	mov	r8, r9
    cb36:	mov	lr, r5
    cb38:	bcc.n	cbe8 <__udivmoddi4+0x29c>
    cb3a:	beq.n	cbe4 <__udivmoddi4+0x298>
    cb3c:	cbz	r6, cb54 <__udivmoddi4+0x208>
    cb3e:	subs.w	r2, r0, r8
    cb42:	sbc.w	r4, r4, lr
    cb46:	lsl.w	r7, r4, r7
    cb4a:	lsrs	r2, r1
    cb4c:	lsrs	r4, r1
    cb4e:	orrs	r7, r2
    cb50:	strd	r7, r4, [r6]
    cb54:	mov	r0, r3
    cb56:	movs	r1, #0
    cb58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb5c:	rsb	r1, r3, #32
    cb60:	lsl.w	ip, r2, r3
    cb64:	lsr.w	r2, r0, r1
    cb68:	lsr.w	r1, r5, r1
    cb6c:	lsls	r5, r3
    cb6e:	orrs	r2, r5
    cb70:	mov.w	r7, ip, lsr #16
    cb74:	uxth.w	lr, ip
    cb78:	udiv	r0, r1, r7
    cb7c:	mls	r5, r7, r0, r1
    cb80:	lsrs	r1, r2, #16
    cb82:	orr.w	r1, r1, r5, lsl #16
    cb86:	mul.w	r5, r0, lr
    cb8a:	cmp	r5, r1
    cb8c:	lsl.w	r4, r4, r3
    cb90:	bls.n	cba4 <__udivmoddi4+0x258>
    cb92:	adds.w	r1, ip, r1
    cb96:	add.w	r8, r0, #4294967295
    cb9a:	bcs.n	cbfc <__udivmoddi4+0x2b0>
    cb9c:	cmp	r5, r1
    cb9e:	bls.n	cbfc <__udivmoddi4+0x2b0>
    cba0:	subs	r0, #2
    cba2:	add	r1, ip
    cba4:	subs	r1, r1, r5
    cba6:	uxth	r2, r2
    cba8:	udiv	r5, r1, r7
    cbac:	mls	r1, r7, r5, r1
    cbb0:	orr.w	r2, r2, r1, lsl #16
    cbb4:	mul.w	r1, r5, lr
    cbb8:	cmp	r1, r2
    cbba:	bls.n	cbce <__udivmoddi4+0x282>
    cbbc:	adds.w	r2, ip, r2
    cbc0:	add.w	r8, r5, #4294967295
    cbc4:	bcs.n	cbf4 <__udivmoddi4+0x2a8>
    cbc6:	cmp	r1, r2
    cbc8:	bls.n	cbf4 <__udivmoddi4+0x2a8>
    cbca:	subs	r5, #2
    cbcc:	add	r2, ip
    cbce:	subs	r2, r2, r1
    cbd0:	orr.w	r1, r5, r0, lsl #16
    cbd4:	b.n	ca48 <__udivmoddi4+0xfc>
    cbd6:	mov	r1, r6
    cbd8:	mov	r0, r6
    cbda:	b.n	c9ee <__udivmoddi4+0xa2>
    cbdc:	mov	r1, r7
    cbde:	b.n	c9ae <__udivmoddi4+0x62>
    cbe0:	mov	r0, r2
    cbe2:	b.n	c9dc <__udivmoddi4+0x90>
    cbe4:	cmp	r0, r9
    cbe6:	bcs.n	cb3c <__udivmoddi4+0x1f0>
    cbe8:	subs.w	r8, r9, r2
    cbec:	sbc.w	lr, r5, ip
    cbf0:	subs	r3, #1
    cbf2:	b.n	cb3c <__udivmoddi4+0x1f0>
    cbf4:	mov	r5, r8
    cbf6:	b.n	cbce <__udivmoddi4+0x282>
    cbf8:	mov	r3, r5
    cbfa:	b.n	cb26 <__udivmoddi4+0x1da>
    cbfc:	mov	r0, r8
    cbfe:	b.n	cba4 <__udivmoddi4+0x258>
    cc00:	mov	r8, sl
    cc02:	b.n	cafc <__udivmoddi4+0x1b0>
    cc04:	subs	r5, #2
    cc06:	add	r2, ip
    cc08:	b.n	ca70 <__udivmoddi4+0x124>
    cc0a:	mov	r0, r1
    cc0c:	b.n	ca24 <__udivmoddi4+0xd8>
    cc0e:	add	r4, ip
    cc10:	subs	r0, #2
    cc12:	b.n	ca9a <__udivmoddi4+0x14e>

0000cc14 <__aeabi_idiv0>:
    cc14:	bx	lr
    cc16:	nop

0000cc18 <malloc>:
    cc18:	ldr	r3, [pc, #8]	; (cc24 <malloc+0xc>)
    cc1a:	mov	r1, r0
    cc1c:	ldr	r0, [r3, #0]
    cc1e:	b.w	cc78 <_malloc_r>
    cc22:	nop
    cc24:	.word	0x200022d0

0000cc28 <free>:
    cc28:	ldr	r3, [pc, #8]	; (cc34 <free+0xc>)
    cc2a:	mov	r1, r0
    cc2c:	ldr	r0, [r3, #0]
    cc2e:	b.w	f9a8 <_free_r>
    cc32:	nop
    cc34:	.word	0x200022d0

0000cc38 <sbrk_aligned>:
    cc38:	push	{r4, r5, r6, lr}
    cc3a:	ldr	r6, [pc, #56]	; (cc74 <sbrk_aligned+0x3c>)
    cc3c:	mov	r4, r1
    cc3e:	ldr	r1, [r6, #0]
    cc40:	mov	r5, r0
    cc42:	cbnz	r1, cc4a <sbrk_aligned+0x12>
    cc44:	bl	ec40 <_sbrk_r>
    cc48:	str	r0, [r6, #0]
    cc4a:	mov	r1, r4
    cc4c:	mov	r0, r5
    cc4e:	bl	ec40 <_sbrk_r>
    cc52:	adds	r3, r0, #1
    cc54:	beq.n	cc6c <sbrk_aligned+0x34>
    cc56:	adds	r4, r0, #3
    cc58:	bic.w	r4, r4, #3
    cc5c:	cmp	r0, r4
    cc5e:	beq.n	cc70 <sbrk_aligned+0x38>
    cc60:	subs	r1, r4, r0
    cc62:	mov	r0, r5
    cc64:	bl	ec40 <_sbrk_r>
    cc68:	adds	r0, #1
    cc6a:	bne.n	cc70 <sbrk_aligned+0x38>
    cc6c:	mov.w	r4, #4294967295
    cc70:	mov	r0, r4
    cc72:	pop	{r4, r5, r6, pc}
    cc74:	.word	0x20014858

0000cc78 <_malloc_r>:
    cc78:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc7c:	adds	r5, r1, #3
    cc7e:	bic.w	r5, r5, #3
    cc82:	adds	r5, #8
    cc84:	cmp	r5, #12
    cc86:	it	cc
    cc88:	movcc	r5, #12
    cc8a:	cmp	r5, #0
    cc8c:	mov	r7, r0
    cc8e:	blt.n	cc94 <_malloc_r+0x1c>
    cc90:	cmp	r1, r5
    cc92:	bls.n	cca0 <_malloc_r+0x28>
    cc94:	movs	r3, #12
    cc96:	str	r3, [r7, #0]
    cc98:	movs	r6, #0
    cc9a:	mov	r0, r6
    cc9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cca0:	ldr	r6, [pc, #188]	; (cd60 <_malloc_r+0xe8>)
    cca2:	bl	cd64 <__malloc_lock>
    cca6:	ldr	r3, [r6, #0]
    cca8:	mov	r4, r3
    ccaa:	cbnz	r4, ccfe <_malloc_r+0x86>
    ccac:	mov	r1, r5
    ccae:	mov	r0, r7
    ccb0:	bl	cc38 <sbrk_aligned>
    ccb4:	adds	r3, r0, #1
    ccb6:	mov	r4, r0
    ccb8:	bne.n	cd5a <_malloc_r+0xe2>
    ccba:	ldr	r4, [r6, #0]
    ccbc:	mov	r6, r4
    ccbe:	cmp	r6, #0
    ccc0:	bne.n	cd48 <_malloc_r+0xd0>
    ccc2:	cmp	r4, #0
    ccc4:	beq.n	cd4e <_malloc_r+0xd6>
    ccc6:	ldr	r3, [r4, #0]
    ccc8:	mov	r1, r6
    ccca:	mov	r0, r7
    cccc:	add.w	r8, r4, r3
    ccd0:	bl	ec40 <_sbrk_r>
    ccd4:	cmp	r8, r0
    ccd6:	bne.n	cd4e <_malloc_r+0xd6>
    ccd8:	ldr	r3, [r4, #0]
    ccda:	adds	r5, #3
    ccdc:	subs	r5, r5, r3
    ccde:	bic.w	r5, r5, #3
    cce2:	adds	r5, #8
    cce4:	cmp	r5, #12
    cce6:	it	cc
    cce8:	movcc	r5, #12
    ccea:	mov	r1, r5
    ccec:	mov	r0, r7
    ccee:	bl	cc38 <sbrk_aligned>
    ccf2:	adds	r0, #1
    ccf4:	beq.n	cd4e <_malloc_r+0xd6>
    ccf6:	ldr	r3, [r4, #0]
    ccf8:	add	r3, r5
    ccfa:	str	r3, [r4, #0]
    ccfc:	b.n	cd1c <_malloc_r+0xa4>
    ccfe:	ldr	r2, [r4, #0]
    cd00:	subs	r2, r2, r5
    cd02:	bmi.n	cd42 <_malloc_r+0xca>
    cd04:	cmp	r2, #11
    cd06:	bls.n	cd36 <_malloc_r+0xbe>
    cd08:	adds	r1, r4, r5
    cd0a:	cmp	r3, r4
    cd0c:	str	r5, [r4, #0]
    cd0e:	it	ne
    cd10:	strne	r1, [r3, #4]
    cd12:	ldr	r3, [r4, #4]
    cd14:	it	eq
    cd16:	streq	r1, [r6, #0]
    cd18:	str	r2, [r4, r5]
    cd1a:	str	r3, [r1, #4]
    cd1c:	mov	r0, r7
    cd1e:	add.w	r6, r4, #11
    cd22:	bl	cd70 <__malloc_unlock>
    cd26:	bic.w	r6, r6, #7
    cd2a:	adds	r3, r4, #4
    cd2c:	subs	r2, r6, r3
    cd2e:	beq.n	cc9a <_malloc_r+0x22>
    cd30:	subs	r3, r3, r6
    cd32:	str	r3, [r4, r2]
    cd34:	b.n	cc9a <_malloc_r+0x22>
    cd36:	ldr	r2, [r4, #4]
    cd38:	cmp	r3, r4
    cd3a:	ite	eq
    cd3c:	streq	r2, [r6, #0]
    cd3e:	strne	r2, [r3, #4]
    cd40:	b.n	cd1c <_malloc_r+0xa4>
    cd42:	mov	r3, r4
    cd44:	ldr	r4, [r4, #4]
    cd46:	b.n	ccaa <_malloc_r+0x32>
    cd48:	mov	r4, r6
    cd4a:	ldr	r6, [r6, #4]
    cd4c:	b.n	ccbe <_malloc_r+0x46>
    cd4e:	movs	r3, #12
    cd50:	str	r3, [r7, #0]
    cd52:	mov	r0, r7
    cd54:	bl	cd70 <__malloc_unlock>
    cd58:	b.n	cc9a <_malloc_r+0x22>
    cd5a:	str	r5, [r4, #0]
    cd5c:	b.n	cd1c <_malloc_r+0xa4>
    cd5e:	nop
    cd60:	.word	0x20014854

0000cd64 <__malloc_lock>:
    cd64:	ldr	r0, [pc, #4]	; (cd6c <__malloc_lock+0x8>)
    cd66:	b.w	ecd8 <__retarget_lock_acquire_recursive>
    cd6a:	nop
    cd6c:	.word	0x200155b0

0000cd70 <__malloc_unlock>:
    cd70:	ldr	r0, [pc, #4]	; (cd78 <__malloc_unlock+0x8>)
    cd72:	b.w	ecda <__retarget_lock_release_recursive>
    cd76:	nop
    cd78:	.word	0x200155b0

0000cd7c <_realloc_r>:
    cd7c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd80:	mov	r8, r0
    cd82:	mov	r4, r2
    cd84:	mov	r6, r1
    cd86:	cbnz	r1, cd92 <_realloc_r+0x16>
    cd88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd8c:	mov	r1, r2
    cd8e:	b.w	cc78 <_malloc_r>
    cd92:	cbnz	r2, cda0 <_realloc_r+0x24>
    cd94:	bl	f9a8 <_free_r>
    cd98:	mov	r5, r4
    cd9a:	mov	r0, r5
    cd9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cda0:	bl	10a68 <_malloc_usable_size_r>
    cda4:	cmp	r4, r0
    cda6:	mov	r7, r0
    cda8:	bhi.n	cdb0 <_realloc_r+0x34>
    cdaa:	cmp.w	r4, r0, lsr #1
    cdae:	bhi.n	cdd6 <_realloc_r+0x5a>
    cdb0:	mov	r1, r4
    cdb2:	mov	r0, r8
    cdb4:	bl	cc78 <_malloc_r>
    cdb8:	mov	r5, r0
    cdba:	cmp	r0, #0
    cdbc:	beq.n	cd9a <_realloc_r+0x1e>
    cdbe:	cmp	r4, r7
    cdc0:	mov	r2, r4
    cdc2:	mov	r1, r6
    cdc4:	it	cs
    cdc6:	movcs	r2, r7
    cdc8:	bl	a218 <memcpy>
    cdcc:	mov	r1, r6
    cdce:	mov	r0, r8
    cdd0:	bl	f9a8 <_free_r>
    cdd4:	b.n	cd9a <_realloc_r+0x1e>
    cdd6:	mov	r5, r6
    cdd8:	b.n	cd9a <_realloc_r+0x1e>

0000cdda <sulp>:
    cdda:	push	{r4, r5, r6, lr}
    cddc:	mov	r4, r0
    cdde:	mov	r5, r1
    cde0:	mov	r6, r2
    cde2:	vmov	d0, r4, r5
    cde6:	bl	107ec <__ulp>
    cdea:	cbz	r6, ce0c <sulp+0x32>
    cdec:	ubfx	r3, r5, #20, #11
    cdf0:	rsb	r3, r3, #107	; 0x6b
    cdf4:	cmp	r3, #0
    cdf6:	ble.n	ce0c <sulp+0x32>
    cdf8:	lsls	r3, r3, #20
    cdfa:	add.w	r1, r3, #1069547520	; 0x3fc00000
    cdfe:	movs	r0, #0
    ce00:	add.w	r1, r1, #3145728	; 0x300000
    ce04:	vmov	d7, r0, r1
    ce08:	vmul.f64	d0, d0, d7
    ce0c:	pop	{r4, r5, r6, pc}
	...

0000ce10 <_strtod_l>:
    ce10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce14:	vpush	{d8-d14}
    ce18:	sub	sp, #92	; 0x5c
    ce1a:	mov	r4, r0
    ce1c:	str	r2, [sp, #52]	; 0x34
    ce1e:	movs	r2, #0
    ce20:	str	r2, [sp, #72]	; 0x48
    ce22:	mov	sl, r1
    ce24:	mov.w	r8, #0
    ce28:	mov.w	r9, #0
    ce2c:	mov	r2, r1
    ce2e:	str	r2, [sp, #68]	; 0x44
    ce30:	ldrb	r1, [r2, #0]
    ce32:	cmp	r1, #43	; 0x2b
    ce34:	beq.n	ced0 <_strtod_l+0xc0>
    ce36:	bhi.n	ceac <_strtod_l+0x9c>
    ce38:	cmp	r1, #13
    ce3a:	bhi.n	cea4 <_strtod_l+0x94>
    ce3c:	cmp	r1, #8
    ce3e:	bhi.n	cea8 <_strtod_l+0x98>
    ce40:	cmp	r1, #0
    ce42:	beq.n	cebe <_strtod_l+0xae>
    ce44:	movs	r2, #0
    ce46:	str	r2, [sp, #32]
    ce48:	ldr	r6, [sp, #68]	; 0x44
    ce4a:	ldrb	r2, [r6, #0]
    ce4c:	cmp	r2, #48	; 0x30
    ce4e:	bne.w	cfc2 <_strtod_l+0x1b2>
    ce52:	ldrb	r2, [r6, #1]
    ce54:	and.w	r2, r2, #223	; 0xdf
    ce58:	cmp	r2, #88	; 0x58
    ce5a:	bne.n	cf3e <_strtod_l+0x12e>
    ce5c:	str	r3, [sp, #8]
    ce5e:	ldr	r3, [sp, #32]
    ce60:	str	r3, [sp, #4]
    ce62:	add	r3, sp, #72	; 0x48
    ce64:	str	r3, [sp, #0]
    ce66:	ldr	r2, [pc, #580]	; (d0ac <_strtod_l+0x29c>)
    ce68:	add	r3, sp, #76	; 0x4c
    ce6a:	add	r1, sp, #68	; 0x44
    ce6c:	mov	r0, r4
    ce6e:	bl	fb10 <__gethex>
    ce72:	ands.w	r7, r0, #15
    ce76:	mov	r5, r0
    ce78:	beq.n	ce86 <_strtod_l+0x76>
    ce7a:	cmp	r7, #6
    ce7c:	bne.n	ced4 <_strtod_l+0xc4>
    ce7e:	adds	r6, #1
    ce80:	movs	r3, #0
    ce82:	str	r6, [sp, #68]	; 0x44
    ce84:	str	r3, [sp, #32]
    ce86:	ldr	r3, [sp, #52]	; 0x34
    ce88:	cmp	r3, #0
    ce8a:	bne.w	d938 <_strtod_l+0xb28>
    ce8e:	ldr	r3, [sp, #32]
    ce90:	vmov	d0, r8, r9
    ce94:	cbz	r3, ceca <_strtod_l+0xba>
    ce96:	vneg.f64	d0, d0
    ce9a:	add	sp, #92	; 0x5c
    ce9c:	vpop	{d8-d14}
    cea0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cea4:	cmp	r1, #32
    cea6:	bne.n	ce44 <_strtod_l+0x34>
    cea8:	adds	r2, #1
    ceaa:	b.n	ce2e <_strtod_l+0x1e>
    ceac:	cmp	r1, #45	; 0x2d
    ceae:	bne.n	ce44 <_strtod_l+0x34>
    ceb0:	movs	r1, #1
    ceb2:	str	r1, [sp, #32]
    ceb4:	adds	r1, r2, #1
    ceb6:	str	r1, [sp, #68]	; 0x44
    ceb8:	ldrb	r2, [r2, #1]
    ceba:	cmp	r2, #0
    cebc:	bne.n	ce48 <_strtod_l+0x38>
    cebe:	ldr	r3, [sp, #52]	; 0x34
    cec0:	str.w	sl, [sp, #68]	; 0x44
    cec4:	cmp	r3, #0
    cec6:	bne.w	d934 <_strtod_l+0xb24>
    ceca:	vmov	d0, r8, r9
    cece:	b.n	ce9a <_strtod_l+0x8a>
    ced0:	movs	r1, #0
    ced2:	b.n	ceb2 <_strtod_l+0xa2>
    ced4:	ldr	r2, [sp, #72]	; 0x48
    ced6:	cbz	r2, cee8 <_strtod_l+0xd8>
    ced8:	movs	r1, #53	; 0x35
    ceda:	add	r0, sp, #80	; 0x50
    cedc:	bl	109e0 <__copybits>
    cee0:	ldr	r1, [sp, #72]	; 0x48
    cee2:	mov	r0, r4
    cee4:	bl	10194 <_Bfree>
    cee8:	subs	r3, r7, #1
    ceea:	ldr	r2, [sp, #76]	; 0x4c
    ceec:	cmp	r3, #4
    ceee:	bhi.n	cefe <_strtod_l+0xee>
    cef0:	tbb	[pc, r3]
    cef4:	.word	0x201d0314
    cef8:	.byte	0x14
    cef9:	.byte	0x00
    cefa:	ldrd	r8, r9, [sp, #80]	; 0x50
    cefe:	lsls	r3, r5, #23
    cf00:	it	mi
    cf02:	orrmi.w	r9, r9, #2147483648	; 0x80000000
    cf06:	bic.w	r3, r9, #2147483648	; 0x80000000
    cf0a:	lsrs	r3, r3, #20
    cf0c:	lsls	r3, r3, #20
    cf0e:	cmp	r3, #0
    cf10:	bne.n	ce86 <_strtod_l+0x76>
    cf12:	bl	ec84 <__errno>
    cf16:	movs	r3, #34	; 0x22
    cf18:	str	r3, [r0, #0]
    cf1a:	b.n	ce86 <_strtod_l+0x76>
    cf1c:	ldrd	r8, r3, [sp, #80]	; 0x50
    cf20:	addw	r2, r2, #1075	; 0x433
    cf24:	bic.w	r3, r3, #1048576	; 0x100000
    cf28:	orr.w	r9, r3, r2, lsl #20
    cf2c:	b.n	cefe <_strtod_l+0xee>
    cf2e:	ldr.w	r9, [pc, #388]	; d0b4 <_strtod_l+0x2a4>
    cf32:	b.n	cefe <_strtod_l+0xee>
    cf34:	mvn.w	r9, #2147483648	; 0x80000000
    cf38:	mov.w	r8, #4294967295
    cf3c:	b.n	cefe <_strtod_l+0xee>
    cf3e:	ldr	r3, [sp, #68]	; 0x44
    cf40:	adds	r2, r3, #1
    cf42:	str	r2, [sp, #68]	; 0x44
    cf44:	ldrb	r3, [r3, #1]
    cf46:	cmp	r3, #48	; 0x30
    cf48:	beq.n	cf3e <_strtod_l+0x12e>
    cf4a:	cmp	r3, #0
    cf4c:	beq.n	ce86 <_strtod_l+0x76>
    cf4e:	movs	r3, #1
    cf50:	str	r3, [sp, #24]
    cf52:	ldr	r3, [sp, #68]	; 0x44
    cf54:	str	r3, [sp, #36]	; 0x24
    cf56:	movs	r3, #0
    cf58:	str	r3, [sp, #20]
    cf5a:	str	r3, [sp, #28]
    cf5c:	mov	r6, r3
    cf5e:	movs	r2, #10
    cf60:	ldr	r0, [sp, #68]	; 0x44
    cf62:	ldrb	r5, [r0, #0]
    cf64:	sub.w	r3, r5, #48	; 0x30
    cf68:	uxtb	r1, r3
    cf6a:	cmp	r1, #9
    cf6c:	bls.n	cfc6 <_strtod_l+0x1b6>
    cf6e:	ldr	r1, [pc, #320]	; (d0b0 <_strtod_l+0x2a0>)
    cf70:	movs	r2, #1
    cf72:	bl	ebac <strncmp>
    cf76:	cmp	r0, #0
    cf78:	beq.n	cfe6 <_strtod_l+0x1d6>
    cf7a:	movs	r0, #0
    cf7c:	mov	r2, r5
    cf7e:	mov	r3, r6
    cf80:	mov	fp, r0
    cf82:	mov	r1, r0
    cf84:	cmp	r2, #101	; 0x65
    cf86:	beq.n	cf8c <_strtod_l+0x17c>
    cf88:	cmp	r2, #69	; 0x45
    cf8a:	bne.n	cfbe <_strtod_l+0x1ae>
    cf8c:	cbnz	r3, cf96 <_strtod_l+0x186>
    cf8e:	ldr	r3, [sp, #24]
    cf90:	orrs	r3, r0
    cf92:	beq.n	cebe <_strtod_l+0xae>
    cf94:	movs	r3, #0
    cf96:	ldr.w	sl, [sp, #68]	; 0x44
    cf9a:	add.w	r2, sl, #1
    cf9e:	str	r2, [sp, #68]	; 0x44
    cfa0:	ldrb.w	r2, [sl, #1]
    cfa4:	cmp	r2, #43	; 0x2b
    cfa6:	beq.n	d094 <_strtod_l+0x284>
    cfa8:	cmp	r2, #45	; 0x2d
    cfaa:	beq.n	d0a4 <_strtod_l+0x294>
    cfac:	mov.w	lr, #0
    cfb0:	sub.w	r5, r2, #48	; 0x30
    cfb4:	cmp	r5, #9
    cfb6:	bls.w	d0c0 <_strtod_l+0x2b0>
    cfba:	str.w	sl, [sp, #68]	; 0x44
    cfbe:	movs	r5, #0
    cfc0:	b.n	d100 <_strtod_l+0x2f0>
    cfc2:	movs	r3, #0
    cfc4:	b.n	cf50 <_strtod_l+0x140>
    cfc6:	cmp	r6, #8
    cfc8:	itete	le
    cfca:	ldrle	r1, [sp, #28]
    cfcc:	ldrgt	r1, [sp, #20]
    cfce:	mlale	r3, r2, r1, r3
    cfd2:	mlagt	r3, r2, r1, r3
    cfd6:	add.w	r0, r0, #1
    cfda:	ite	le
    cfdc:	strle	r3, [sp, #28]
    cfde:	strgt	r3, [sp, #20]
    cfe0:	adds	r6, #1
    cfe2:	str	r0, [sp, #68]	; 0x44
    cfe4:	b.n	cf60 <_strtod_l+0x150>
    cfe6:	ldr	r3, [sp, #68]	; 0x44
    cfe8:	adds	r2, r3, #1
    cfea:	str	r2, [sp, #68]	; 0x44
    cfec:	ldrb	r2, [r3, #1]
    cfee:	cbz	r6, d05c <_strtod_l+0x24c>
    cff0:	mov	fp, r0
    cff2:	mov	r3, r6
    cff4:	sub.w	r1, r2, #48	; 0x30
    cff8:	cmp	r1, #9
    cffa:	bls.n	d022 <_strtod_l+0x212>
    cffc:	movs	r1, #1
    cffe:	b.n	cf84 <_strtod_l+0x174>
    d000:	ldr	r3, [sp, #68]	; 0x44
    d002:	adds	r2, r3, #1
    d004:	str	r2, [sp, #68]	; 0x44
    d006:	ldrb	r2, [r3, #1]
    d008:	adds	r0, #1
    d00a:	cmp	r2, #48	; 0x30
    d00c:	beq.n	d000 <_strtod_l+0x1f0>
    d00e:	sub.w	r3, r2, #49	; 0x31
    d012:	cmp	r3, #8
    d014:	bhi.w	d942 <_strtod_l+0xb32>
    d018:	ldr	r3, [sp, #68]	; 0x44
    d01a:	str	r3, [sp, #36]	; 0x24
    d01c:	mov	fp, r0
    d01e:	movs	r0, #0
    d020:	mov	r3, r0
    d022:	subs	r2, #48	; 0x30
    d024:	add.w	r1, r0, #1
    d028:	beq.n	d050 <_strtod_l+0x240>
    d02a:	add	fp, r1
    d02c:	add.w	ip, r0, r3
    d030:	mov	r1, r3
    d032:	movs	r5, #10
    d034:	cmp	r1, ip
    d036:	bne.n	d060 <_strtod_l+0x250>
    d038:	adds	r1, r3, r0
    d03a:	cmp	r1, #8
    d03c:	add.w	r3, r3, #1
    d040:	add	r3, r0
    d042:	bgt.n	d07c <_strtod_l+0x26c>
    d044:	ldr	r0, [sp, #28]
    d046:	movs	r1, #10
    d048:	mla	r2, r1, r0, r2
    d04c:	str	r2, [sp, #28]
    d04e:	movs	r1, #0
    d050:	ldr	r2, [sp, #68]	; 0x44
    d052:	adds	r0, r2, #1
    d054:	str	r0, [sp, #68]	; 0x44
    d056:	ldrb	r2, [r2, #1]
    d058:	mov	r0, r1
    d05a:	b.n	cff4 <_strtod_l+0x1e4>
    d05c:	mov	r0, r6
    d05e:	b.n	d00a <_strtod_l+0x1fa>
    d060:	cmp	r1, #8
    d062:	add.w	r1, r1, #1
    d066:	bgt.n	d070 <_strtod_l+0x260>
    d068:	ldr	r7, [sp, #28]
    d06a:	muls	r7, r5
    d06c:	str	r7, [sp, #28]
    d06e:	b.n	d034 <_strtod_l+0x224>
    d070:	cmp	r1, #16
    d072:	ittt	le
    d074:	ldrle	r7, [sp, #20]
    d076:	mulle	r7, r5
    d078:	strle	r7, [sp, #20]
    d07a:	b.n	d034 <_strtod_l+0x224>
    d07c:	cmp	r3, #16
    d07e:	itttt	le
    d080:	ldrle	r0, [sp, #20]
    d082:	movle	r1, #10
    d084:	mlale	r2, r1, r0, r2
    d088:	strle	r2, [sp, #20]
    d08a:	b.n	d04e <_strtod_l+0x23e>
    d08c:	mov.w	fp, #0
    d090:	movs	r1, #1
    d092:	b.n	cf8e <_strtod_l+0x17e>
    d094:	mov.w	lr, #0
    d098:	add.w	r2, sl, #2
    d09c:	str	r2, [sp, #68]	; 0x44
    d09e:	ldrb.w	r2, [sl, #2]
    d0a2:	b.n	cfb0 <_strtod_l+0x1a0>
    d0a4:	mov.w	lr, #1
    d0a8:	b.n	d098 <_strtod_l+0x288>
    d0aa:	nop
    d0ac:	.word	0x20000984
    d0b0:	.word	0x20000d02
    d0b4:	.word	0x7ff00000
    d0b8:	ldr	r2, [sp, #68]	; 0x44
    d0ba:	adds	r5, r2, #1
    d0bc:	str	r5, [sp, #68]	; 0x44
    d0be:	ldrb	r2, [r2, #1]
    d0c0:	cmp	r2, #48	; 0x30
    d0c2:	beq.n	d0b8 <_strtod_l+0x2a8>
    d0c4:	sub.w	r5, r2, #49	; 0x31
    d0c8:	cmp	r5, #8
    d0ca:	bhi.w	cfbe <_strtod_l+0x1ae>
    d0ce:	sub.w	ip, r2, #48	; 0x30
    d0d2:	ldr	r2, [sp, #68]	; 0x44
    d0d4:	str	r2, [sp, #40]	; 0x28
    d0d6:	ldr	r2, [sp, #68]	; 0x44
    d0d8:	adds	r5, r2, #1
    d0da:	str	r5, [sp, #68]	; 0x44
    d0dc:	ldrb	r2, [r2, #1]
    d0de:	sub.w	r7, r2, #48	; 0x30
    d0e2:	cmp	r7, #9
    d0e4:	bls.n	d156 <_strtod_l+0x346>
    d0e6:	ldr	r7, [sp, #40]	; 0x28
    d0e8:	subs	r5, r5, r7
    d0ea:	cmp	r5, #8
    d0ec:	movw	r5, #19999	; 0x4e1f
    d0f0:	bgt.n	d0f8 <_strtod_l+0x2e8>
    d0f2:	cmp	r5, ip
    d0f4:	it	ge
    d0f6:	movge	r5, ip
    d0f8:	cmp.w	lr, #0
    d0fc:	beq.n	d100 <_strtod_l+0x2f0>
    d0fe:	negs	r5, r5
    d100:	cmp	r3, #0
    d102:	bne.n	d1a0 <_strtod_l+0x390>
    d104:	ldr	r3, [sp, #24]
    d106:	orrs	r3, r0
    d108:	bne.w	ce86 <_strtod_l+0x76>
    d10c:	cmp	r1, #0
    d10e:	bne.w	cebe <_strtod_l+0xae>
    d112:	cmp	r2, #105	; 0x69
    d114:	beq.n	d166 <_strtod_l+0x356>
    d116:	bgt.n	d162 <_strtod_l+0x352>
    d118:	cmp	r2, #73	; 0x49
    d11a:	beq.n	d166 <_strtod_l+0x356>
    d11c:	cmp	r2, #78	; 0x4e
    d11e:	bne.w	cebe <_strtod_l+0xae>
    d122:	ldr	r1, [pc, #596]	; (d378 <_strtod_l+0x568>)
    d124:	add	r0, sp, #68	; 0x44
    d126:	bl	ff90 <__match>
    d12a:	cmp	r0, #0
    d12c:	beq.w	cebe <_strtod_l+0xae>
    d130:	ldr	r3, [sp, #68]	; 0x44
    d132:	ldrb	r3, [r3, #0]
    d134:	cmp	r3, #40	; 0x28
    d136:	bne.n	d194 <_strtod_l+0x384>
    d138:	ldr	r1, [pc, #576]	; (d37c <_strtod_l+0x56c>)
    d13a:	add	r2, sp, #80	; 0x50
    d13c:	add	r0, sp, #68	; 0x44
    d13e:	bl	ffb8 <__hexnan>
    d142:	cmp	r0, #5
    d144:	bne.n	d194 <_strtod_l+0x384>
    d146:	ldr	r3, [sp, #84]	; 0x54
    d148:	ldr.w	r8, [sp, #80]	; 0x50
    d14c:	orr.w	r9, r3, #2139095040	; 0x7f800000
    d150:	orr.w	r9, r9, #7340032	; 0x700000
    d154:	b.n	ce86 <_strtod_l+0x76>
    d156:	movs	r5, #10
    d158:	mla	ip, r5, ip, r2
    d15c:	sub.w	ip, ip, #48	; 0x30
    d160:	b.n	d0d6 <_strtod_l+0x2c6>
    d162:	cmp	r2, #110	; 0x6e
    d164:	b.n	d11e <_strtod_l+0x30e>
    d166:	ldr	r1, [pc, #536]	; (d380 <_strtod_l+0x570>)
    d168:	add	r0, sp, #68	; 0x44
    d16a:	bl	ff90 <__match>
    d16e:	cmp	r0, #0
    d170:	beq.w	cebe <_strtod_l+0xae>
    d174:	ldr	r3, [sp, #68]	; 0x44
    d176:	ldr	r1, [pc, #524]	; (d384 <_strtod_l+0x574>)
    d178:	subs	r3, #1
    d17a:	add	r0, sp, #68	; 0x44
    d17c:	str	r3, [sp, #68]	; 0x44
    d17e:	bl	ff90 <__match>
    d182:	cbnz	r0, d18a <_strtod_l+0x37a>
    d184:	ldr	r3, [sp, #68]	; 0x44
    d186:	adds	r3, #1
    d188:	str	r3, [sp, #68]	; 0x44
    d18a:	ldr.w	r9, [pc, #524]	; d398 <_strtod_l+0x588>
    d18e:	mov.w	r8, #0
    d192:	b.n	ce86 <_strtod_l+0x76>
    d194:	ldr	r0, [pc, #496]	; (d388 <_strtod_l+0x578>)
    d196:	bl	eda0 <nan>
    d19a:	vmov	r8, r9, d0
    d19e:	b.n	ce86 <_strtod_l+0x76>
    d1a0:	vldr	s15, [sp, #28]
    d1a4:	sub.w	r2, r5, fp
    d1a8:	vcvt.f64.u32	d7, s15
    d1ac:	cmp	r6, #0
    d1ae:	it	eq
    d1b0:	moveq	r6, r3
    d1b2:	cmp	r3, #16
    d1b4:	str	r2, [sp, #24]
    d1b6:	mov	r2, r3
    d1b8:	it	ge
    d1ba:	movge	r2, #16
    d1bc:	cmp	r3, #9
    d1be:	vmov	r8, r9, d7
    d1c2:	ble.n	d1de <_strtod_l+0x3ce>
    d1c4:	ldr	r1, [pc, #452]	; (d38c <_strtod_l+0x57c>)
    d1c6:	vldr	s13, [sp, #20]
    d1ca:	add.w	r1, r1, r2, lsl #3
    d1ce:	vldr	d5, [r1, #-72]	; 0xffffffb8
    d1d2:	vcvt.f64.u32	d6, s13
    d1d6:	vfma.f64	d6, d7, d5
    d1da:	vmov	r8, r9, d6
    d1de:	cmp	r3, #15
    d1e0:	bgt.n	d252 <_strtod_l+0x442>
    d1e2:	ldr	r1, [sp, #24]
    d1e4:	cmp	r1, #0
    d1e6:	beq.w	ce86 <_strtod_l+0x76>
    d1ea:	ble.n	d234 <_strtod_l+0x424>
    d1ec:	cmp	r1, #22
    d1ee:	bgt.n	d208 <_strtod_l+0x3f8>
    d1f0:	ldr	r3, [pc, #408]	; (d38c <_strtod_l+0x57c>)
    d1f2:	add.w	r3, r3, r1, lsl #3
    d1f6:	vldr	d7, [r3]
    d1fa:	vmov	d6, r8, r9
    d1fe:	vmul.f64	d7, d7, d6
    d202:	vmov	r8, r9, d7
    d206:	b.n	ce86 <_strtod_l+0x76>
    d208:	ldr	r0, [sp, #24]
    d20a:	rsb	r1, r3, #37	; 0x25
    d20e:	cmp	r1, r0
    d210:	blt.n	d252 <_strtod_l+0x442>
    d212:	ldr	r2, [pc, #376]	; (d38c <_strtod_l+0x57c>)
    d214:	rsb	r3, r3, #15
    d218:	add.w	r1, r2, r3, lsl #3
    d21c:	vldr	d7, [r1]
    d220:	vmov	d6, r8, r9
    d224:	subs	r3, r0, r3
    d226:	add.w	r2, r2, r3, lsl #3
    d22a:	vmul.f64	d7, d7, d6
    d22e:	vldr	d6, [r2]
    d232:	b.n	d1fe <_strtod_l+0x3ee>
    d234:	ldr	r1, [sp, #24]
    d236:	adds	r1, #22
    d238:	blt.n	d252 <_strtod_l+0x442>
    d23a:	ldr	r3, [pc, #336]	; (d38c <_strtod_l+0x57c>)
    d23c:	sub.w	r5, fp, r5
    d240:	add.w	r5, r3, r5, lsl #3
    d244:	vldr	d7, [r5]
    d248:	vmov	d6, r8, r9
    d24c:	vdiv.f64	d7, d6, d7
    d250:	b.n	d202 <_strtod_l+0x3f2>
    d252:	ldr	r1, [sp, #24]
    d254:	subs	r2, r3, r2
    d256:	add	r2, r1
    d258:	cmp	r2, #0
    d25a:	ble.n	d33a <_strtod_l+0x52a>
    d25c:	ands.w	r0, r2, #15
    d260:	beq.n	d278 <_strtod_l+0x468>
    d262:	ldr	r1, [pc, #296]	; (d38c <_strtod_l+0x57c>)
    d264:	add.w	r1, r1, r0, lsl #3
    d268:	vldr	d7, [r1]
    d26c:	vmov	d6, r8, r9
    d270:	vmul.f64	d7, d7, d6
    d274:	vmov	r8, r9, d7
    d278:	bics.w	r2, r2, #15
    d27c:	beq.n	d31c <_strtod_l+0x50c>
    d27e:	cmp.w	r2, #308	; 0x134
    d282:	ble.n	d2ca <_strtod_l+0x4ba>
    d284:	movs	r5, #0
    d286:	mov	r6, r5
    d288:	str	r5, [sp, #28]
    d28a:	mov	r7, r5
    d28c:	movs	r3, #34	; 0x22
    d28e:	ldr.w	r9, [pc, #264]	; d398 <_strtod_l+0x588>
    d292:	str	r3, [r4, #0]
    d294:	mov.w	r8, #0
    d298:	ldr	r3, [sp, #28]
    d29a:	cmp	r3, #0
    d29c:	beq.w	ce86 <_strtod_l+0x76>
    d2a0:	ldr	r1, [sp, #72]	; 0x48
    d2a2:	mov	r0, r4
    d2a4:	bl	10194 <_Bfree>
    d2a8:	mov	r1, r7
    d2aa:	mov	r0, r4
    d2ac:	bl	10194 <_Bfree>
    d2b0:	mov	r1, r6
    d2b2:	mov	r0, r4
    d2b4:	bl	10194 <_Bfree>
    d2b8:	ldr	r1, [sp, #28]
    d2ba:	mov	r0, r4
    d2bc:	bl	10194 <_Bfree>
    d2c0:	mov	r1, r5
    d2c2:	mov	r0, r4
    d2c4:	bl	10194 <_Bfree>
    d2c8:	b.n	ce86 <_strtod_l+0x76>
    d2ca:	movs	r0, #0
    d2cc:	vmov	d7, r8, r9
    d2d0:	ldr	r7, [pc, #188]	; (d390 <_strtod_l+0x580>)
    d2d2:	asrs	r2, r2, #4
    d2d4:	mov	r1, r0
    d2d6:	cmp	r2, #1
    d2d8:	bgt.n	d322 <_strtod_l+0x512>
    d2da:	cbz	r0, d2e0 <_strtod_l+0x4d0>
    d2dc:	vmov	r8, r9, d7
    d2e0:	ldr	r2, [pc, #172]	; (d390 <_strtod_l+0x580>)
    d2e2:	ldr	r0, [pc, #176]	; (d394 <_strtod_l+0x584>)
    d2e4:	add.w	r2, r2, r1, lsl #3
    d2e8:	vldr	d7, [r2]
    d2ec:	sub.w	r9, r9, #55574528	; 0x3500000
    d2f0:	vmov	d6, r8, r9
    d2f4:	ldr	r2, [pc, #160]	; (d398 <_strtod_l+0x588>)
    d2f6:	vmul.f64	d7, d7, d6
    d2fa:	vmov	r1, s15
    d2fe:	ands	r2, r1
    d300:	cmp	r2, r0
    d302:	vmov	r8, r9, d7
    d306:	bhi.n	d284 <_strtod_l+0x474>
    d308:	sub.w	r0, r0, #1048576	; 0x100000
    d30c:	cmp	r2, r0
    d30e:	itte	hi
    d310:	ldrhi.w	r9, [pc, #136]	; d39c <_strtod_l+0x58c>
    d314:	movhi.w	r8, #4294967295
    d318:	addls.w	r9, r1, #55574528	; 0x3500000
    d31c:	movs	r2, #0
    d31e:	str	r2, [sp, #20]
    d320:	b.n	d410 <_strtod_l+0x600>
    d322:	tst.w	r2, #1
    d326:	beq.n	d332 <_strtod_l+0x522>
    d328:	vldr	d6, [r7]
    d32c:	movs	r0, #1
    d32e:	vmul.f64	d7, d7, d6
    d332:	adds	r1, #1
    d334:	asrs	r2, r2, #1
    d336:	adds	r7, #8
    d338:	b.n	d2d6 <_strtod_l+0x4c6>
    d33a:	beq.n	d31c <_strtod_l+0x50c>
    d33c:	negs	r2, r2
    d33e:	ands.w	r0, r2, #15
    d342:	beq.n	d35a <_strtod_l+0x54a>
    d344:	ldr	r1, [pc, #68]	; (d38c <_strtod_l+0x57c>)
    d346:	add.w	r1, r1, r0, lsl #3
    d34a:	vldr	d7, [r1]
    d34e:	vmov	d6, r8, r9
    d352:	vdiv.f64	d7, d6, d7
    d356:	vmov	r8, r9, d7
    d35a:	asrs	r2, r2, #4
    d35c:	beq.n	d31c <_strtod_l+0x50c>
    d35e:	cmp	r2, #31
    d360:	ble.n	d3a0 <_strtod_l+0x590>
    d362:	movs	r5, #0
    d364:	mov	r6, r5
    d366:	str	r5, [sp, #28]
    d368:	mov	r7, r5
    d36a:	movs	r3, #34	; 0x22
    d36c:	mov.w	r8, #0
    d370:	mov.w	r9, #0
    d374:	str	r3, [r4, #0]
    d376:	b.n	d298 <_strtod_l+0x488>
    d378:	.word	0x20001c30
    d37c:	.word	0x20000998
    d380:	.word	0x200011a7
    d384:	.word	0x2000134f
    d388:	.word	0x20000dbc
    d38c:	.word	0x20000328
    d390:	.word	0x20000300
    d394:	.word	0x7ca00000
    d398:	.word	0x7ff00000
    d39c:	.word	0x7fefffff
    d3a0:	ands.w	r1, r2, #16
    d3a4:	it	ne
    d3a6:	movne	r1, #106	; 0x6a
    d3a8:	str	r1, [sp, #20]
    d3aa:	vmov	d7, r8, r9
    d3ae:	ldr	r1, [pc, #760]	; (d6a8 <_strtod_l+0x898>)
    d3b0:	movs	r0, #0
    d3b2:	lsls	r7, r2, #31
    d3b4:	bpl.n	d3c0 <_strtod_l+0x5b0>
    d3b6:	vldr	d6, [r1]
    d3ba:	movs	r0, #1
    d3bc:	vmul.f64	d7, d7, d6
    d3c0:	asrs	r2, r2, #1
    d3c2:	add.w	r1, r1, #8
    d3c6:	bne.n	d3b2 <_strtod_l+0x5a2>
    d3c8:	cbz	r0, d3ce <_strtod_l+0x5be>
    d3ca:	vmov	r8, r9, d7
    d3ce:	ldr	r2, [sp, #20]
    d3d0:	cbz	r2, d402 <_strtod_l+0x5f2>
    d3d2:	ubfx	r1, r9, #20, #11
    d3d6:	rsb	r2, r1, #107	; 0x6b
    d3da:	cmp	r2, #0
    d3dc:	mov	r0, r9
    d3de:	ble.n	d402 <_strtod_l+0x5f2>
    d3e0:	cmp	r2, #31
    d3e2:	ble.w	d63e <_strtod_l+0x82e>
    d3e6:	cmp	r2, #52	; 0x34
    d3e8:	ittt	le
    d3ea:	movle.w	r2, #4294967295
    d3ee:	rsble	r1, r1, #75	; 0x4b
    d3f2:	lslle	r2, r1
    d3f4:	mov.w	r8, #0
    d3f8:	ite	gt
    d3fa:	movgt.w	r9, #57671680	; 0x3700000
    d3fe:	andle.w	r9, r2, r0
    d402:	vmov	d7, r8, r9
    d406:	vcmp.f64	d7, #0.0
    d40a:	vmrs	APSR_nzcv, fpscr
    d40e:	beq.n	d362 <_strtod_l+0x552>
    d410:	ldr	r2, [sp, #28]
    d412:	str	r2, [sp, #0]
    d414:	ldr	r1, [sp, #36]	; 0x24
    d416:	mov	r2, r6
    d418:	mov	r0, r4
    d41a:	bl	10264 <__s2b>
    d41e:	str	r0, [sp, #28]
    d420:	cmp	r0, #0
    d422:	beq.w	d284 <_strtod_l+0x474>
    d426:	ldr	r2, [sp, #24]
    d428:	cmp	r2, #0
    d42a:	sub.w	r3, fp, r5
    d42e:	vldr	d9, [pc, #600]	; d688 <_strtod_l+0x878>
    d432:	it	ge
    d434:	movge	r3, #0
    d436:	vldr	d10, [pc, #600]	; d690 <_strtod_l+0x880>
    d43a:	vldr	d11, [pc, #604]	; d698 <_strtod_l+0x888>
    d43e:	str	r3, [sp, #36]	; 0x24
    d440:	movs	r5, #0
    d442:	bic.w	r3, r2, r2, asr #31
    d446:	str	r3, [sp, #48]	; 0x30
    d448:	mov	r6, r5
    d44a:	ldr	r3, [sp, #28]
    d44c:	mov	r0, r4
    d44e:	ldr	r1, [r3, #4]
    d450:	bl	10114 <_Balloc>
    d454:	mov	r7, r0
    d456:	cmp	r0, #0
    d458:	beq.w	d28c <_strtod_l+0x47c>
    d45c:	ldr	r3, [sp, #28]
    d45e:	ldr	r2, [r3, #16]
    d460:	adds	r2, #2
    d462:	add.w	r1, r3, #12
    d466:	lsls	r2, r2, #2
    d468:	adds	r0, #12
    d46a:	bl	a218 <memcpy>
    d46e:	vmov	d0, r8, r9
    d472:	add	r2, sp, #80	; 0x50
    d474:	add	r1, sp, #76	; 0x4c
    d476:	mov	r0, r4
    d478:	bl	108cc <__d2b>
    d47c:	vmov	d8, r8, r9
    d480:	str	r0, [sp, #72]	; 0x48
    d482:	cmp	r0, #0
    d484:	beq.w	d28c <_strtod_l+0x47c>
    d488:	movs	r1, #1
    d48a:	mov	r0, r4
    d48c:	bl	10394 <__i2b>
    d490:	mov	r6, r0
    d492:	cmp	r0, #0
    d494:	beq.w	d28c <_strtod_l+0x47c>
    d498:	ldr	r3, [sp, #76]	; 0x4c
    d49a:	ldr	r1, [sp, #80]	; 0x50
    d49c:	cmp	r3, #0
    d49e:	itete	ge
    d4a0:	ldrge	r2, [sp, #36]	; 0x24
    d4a2:	ldrlt	r2, [sp, #48]	; 0x30
    d4a4:	ldrge.w	sl, [sp, #48]	; 0x30
    d4a8:	ldrlt.w	fp, [sp, #36]	; 0x24
    d4ac:	ite	ge
    d4ae:	addge.w	fp, r3, r2
    d4b2:	sublt.w	sl, r2, r3
    d4b6:	ldr	r2, [sp, #20]
    d4b8:	subs	r3, r3, r2
    d4ba:	add	r3, r1
    d4bc:	ldr	r2, [pc, #492]	; (d6ac <_strtod_l+0x89c>)
    d4be:	subs	r3, #1
    d4c0:	cmp	r3, r2
    d4c2:	rsb	r1, r1, #54	; 0x36
    d4c6:	bge.w	d664 <_strtod_l+0x854>
    d4ca:	subs	r2, r2, r3
    d4cc:	cmp	r2, #31
    d4ce:	sub.w	r1, r1, r2
    d4d2:	mov.w	r0, #1
    d4d6:	bgt.w	d64c <_strtod_l+0x83c>
    d4da:	lsl.w	r3, r0, r2
    d4de:	str	r3, [sp, #44]	; 0x2c
    d4e0:	movs	r3, #0
    d4e2:	str	r3, [sp, #40]	; 0x28
    d4e4:	add.w	r3, fp, r1
    d4e8:	ldr	r2, [sp, #20]
    d4ea:	cmp	fp, r3
    d4ec:	add	sl, r1
    d4ee:	add	sl, r2
    d4f0:	mov	r2, fp
    d4f2:	it	ge
    d4f4:	movge	r2, r3
    d4f6:	cmp	r2, sl
    d4f8:	it	ge
    d4fa:	movge	r2, sl
    d4fc:	cmp	r2, #0
    d4fe:	ittt	gt
    d500:	subgt	r3, r3, r2
    d502:	subgt.w	sl, sl, r2
    d506:	subgt.w	fp, fp, r2
    d50a:	ldr	r2, [sp, #36]	; 0x24
    d50c:	cmp	r2, #0
    d50e:	ble.n	d542 <_strtod_l+0x732>
    d510:	mov	r1, r6
    d512:	mov	r0, r4
    d514:	str	r3, [sp, #60]	; 0x3c
    d516:	bl	10514 <__pow5mult>
    d51a:	mov	r6, r0
    d51c:	cmp	r0, #0
    d51e:	beq.w	d28c <_strtod_l+0x47c>
    d522:	mov	r1, r0
    d524:	ldr	r2, [sp, #72]	; 0x48
    d526:	mov	r0, r4
    d528:	bl	103c0 <__multiply>
    d52c:	str	r0, [sp, #56]	; 0x38
    d52e:	cmp	r0, #0
    d530:	beq.w	d28c <_strtod_l+0x47c>
    d534:	ldr	r1, [sp, #72]	; 0x48
    d536:	mov	r0, r4
    d538:	bl	10194 <_Bfree>
    d53c:	ldr	r2, [sp, #56]	; 0x38
    d53e:	ldr	r3, [sp, #60]	; 0x3c
    d540:	str	r2, [sp, #72]	; 0x48
    d542:	cmp	r3, #0
    d544:	bgt.w	d66e <_strtod_l+0x85e>
    d548:	ldr	r3, [sp, #24]
    d54a:	cmp	r3, #0
    d54c:	ble.n	d560 <_strtod_l+0x750>
    d54e:	mov	r1, r7
    d550:	ldr	r2, [sp, #48]	; 0x30
    d552:	mov	r0, r4
    d554:	bl	10514 <__pow5mult>
    d558:	mov	r7, r0
    d55a:	cmp	r0, #0
    d55c:	beq.w	d28c <_strtod_l+0x47c>
    d560:	cmp.w	sl, #0
    d564:	ble.n	d578 <_strtod_l+0x768>
    d566:	mov	r1, r7
    d568:	mov	r2, sl
    d56a:	mov	r0, r4
    d56c:	bl	105c8 <__lshift>
    d570:	mov	r7, r0
    d572:	cmp	r0, #0
    d574:	beq.w	d28c <_strtod_l+0x47c>
    d578:	cmp.w	fp, #0
    d57c:	ble.n	d590 <_strtod_l+0x780>
    d57e:	mov	r1, r6
    d580:	mov	r2, fp
    d582:	mov	r0, r4
    d584:	bl	105c8 <__lshift>
    d588:	mov	r6, r0
    d58a:	cmp	r0, #0
    d58c:	beq.w	d28c <_strtod_l+0x47c>
    d590:	ldr	r1, [sp, #72]	; 0x48
    d592:	mov	r2, r7
    d594:	mov	r0, r4
    d596:	bl	106d8 <__mdiff>
    d59a:	mov	r5, r0
    d59c:	cmp	r0, #0
    d59e:	beq.w	d28c <_strtod_l+0x47c>
    d5a2:	movs	r3, #0
    d5a4:	ldr.w	sl, [r0, #12]
    d5a8:	str	r3, [r0, #12]
    d5aa:	mov	r1, r6
    d5ac:	bl	106a0 <__mcmp>
    d5b0:	cmp	r0, #0
    d5b2:	bge.n	d6b4 <_strtod_l+0x8a4>
    d5b4:	orrs.w	sl, sl, r8
    d5b8:	bne.w	d706 <_strtod_l+0x8f6>
    d5bc:	ubfx	r3, r9, #0, #20
    d5c0:	cmp	r3, #0
    d5c2:	bne.w	d706 <_strtod_l+0x8f6>
    d5c6:	bic.w	r3, r9, #2147483648	; 0x80000000
    d5ca:	lsrs	r3, r3, #20
    d5cc:	lsls	r3, r3, #20
    d5ce:	cmp.w	r3, #112197632	; 0x6b00000
    d5d2:	bls.w	d706 <_strtod_l+0x8f6>
    d5d6:	ldr	r3, [r5, #20]
    d5d8:	cbnz	r3, d5e2 <_strtod_l+0x7d2>
    d5da:	ldr	r3, [r5, #16]
    d5dc:	cmp	r3, #1
    d5de:	ble.w	d706 <_strtod_l+0x8f6>
    d5e2:	mov	r1, r5
    d5e4:	movs	r2, #1
    d5e6:	mov	r0, r4
    d5e8:	bl	105c8 <__lshift>
    d5ec:	mov	r1, r6
    d5ee:	mov	r5, r0
    d5f0:	bl	106a0 <__mcmp>
    d5f4:	cmp	r0, #0
    d5f6:	ble.w	d706 <_strtod_l+0x8f6>
    d5fa:	ldr	r1, [sp, #20]
    d5fc:	ldr	r2, [pc, #176]	; (d6b0 <_strtod_l+0x8a0>)
    d5fe:	mov	r3, r9
    d600:	cmp	r1, #0
    d602:	beq.w	d744 <_strtod_l+0x934>
    d606:	and.w	r1, r2, r9
    d60a:	cmp.w	r1, #112197632	; 0x6b00000
    d60e:	bgt.w	d744 <_strtod_l+0x934>
    d612:	cmp.w	r1, #57671680	; 0x3700000
    d616:	ble.w	d36a <_strtod_l+0x55a>
    d61a:	vldr	d7, [pc, #132]	; d6a0 <_strtod_l+0x890>
    d61e:	vmov	d6, r8, r9
    d622:	ldr	r3, [pc, #140]	; (d6b0 <_strtod_l+0x8a0>)
    d624:	vmul.f64	d7, d6, d7
    d628:	vmov	r2, s15
    d62c:	ands	r3, r2
    d62e:	vmov	r8, r9, d7
    d632:	cmp	r3, #0
    d634:	bne.w	d2a0 <_strtod_l+0x490>
    d638:	movs	r3, #34	; 0x22
    d63a:	str	r3, [r4, #0]
    d63c:	b.n	d2a0 <_strtod_l+0x490>
    d63e:	mov.w	r1, #4294967295
    d642:	lsl.w	r2, r1, r2
    d646:	and.w	r8, r2, r8
    d64a:	b.n	d402 <_strtod_l+0x5f2>
    d64c:	rsb	r3, r3, #4278190080	; 0xff000000
    d650:	add.w	r3, r3, #16711680	; 0xff0000
    d654:	add.w	r3, r3, #64256	; 0xfb00
    d658:	adds	r3, #226	; 0xe2
    d65a:	lsl.w	r3, r0, r3
    d65e:	strd	r3, r0, [sp, #40]	; 0x28
    d662:	b.n	d4e4 <_strtod_l+0x6d4>
    d664:	movs	r2, #0
    d666:	movs	r3, #1
    d668:	strd	r2, r3, [sp, #40]	; 0x28
    d66c:	b.n	d4e4 <_strtod_l+0x6d4>
    d66e:	ldr	r1, [sp, #72]	; 0x48
    d670:	mov	r2, r3
    d672:	mov	r0, r4
    d674:	bl	105c8 <__lshift>
    d678:	str	r0, [sp, #72]	; 0x48
    d67a:	cmp	r0, #0
    d67c:	bne.w	d548 <_strtod_l+0x738>
    d680:	b.n	d28c <_strtod_l+0x47c>
    d682:	nop
    d684:	nop.w
    d688:	.word	0x94a03595
    d68c:	.word	0x3fcfffff
    d690:	.word	0x94a03595
    d694:	.word	0x3fdfffff
    d698:	.word	0x35afe535
    d69c:	.word	0x3fe00000
    d6a0:	.word	0x00000000
    d6a4:	.word	0x39500000
    d6a8:	.word	0x200003f0
    d6ac:	.word	0xfffffc02
    d6b0:	.word	0x7ff00000
    d6b4:	mov	fp, r9
    d6b6:	bne.n	d778 <_strtod_l+0x968>
    d6b8:	ubfx	r3, r9, #0, #20
    d6bc:	cmp.w	sl, #0
    d6c0:	beq.n	d718 <_strtod_l+0x908>
    d6c2:	ldr	r2, [pc, #668]	; (d960 <_strtod_l+0xb50>)
    d6c4:	cmp	r3, r2
    d6c6:	bne.n	d720 <_strtod_l+0x910>
    d6c8:	ldr	r3, [sp, #20]
    d6ca:	mov	r2, r8
    d6cc:	cbz	r3, d70e <_strtod_l+0x8fe>
    d6ce:	ldr	r3, [pc, #660]	; (d964 <_strtod_l+0xb54>)
    d6d0:	and.w	r3, r9, r3
    d6d4:	cmp.w	r3, #111149056	; 0x6a00000
    d6d8:	mov.w	r1, #4294967295
    d6dc:	bhi.n	d714 <_strtod_l+0x904>
    d6de:	lsrs	r3, r3, #20
    d6e0:	rsb	r3, r3, #107	; 0x6b
    d6e4:	lsl.w	r3, r1, r3
    d6e8:	cmp	r2, r3
    d6ea:	bne.n	d720 <_strtod_l+0x910>
    d6ec:	ldr	r3, [pc, #632]	; (d968 <_strtod_l+0xb58>)
    d6ee:	cmp	fp, r3
    d6f0:	bne.n	d6f8 <_strtod_l+0x8e8>
    d6f2:	adds	r2, #1
    d6f4:	beq.w	d28c <_strtod_l+0x47c>
    d6f8:	ldr	r3, [pc, #616]	; (d964 <_strtod_l+0xb54>)
    d6fa:	and.w	r3, fp, r3
    d6fe:	add.w	r9, r3, #1048576	; 0x100000
    d702:	mov.w	r8, #0
    d706:	ldr	r3, [sp, #20]
    d708:	cmp	r3, #0
    d70a:	bne.n	d61a <_strtod_l+0x80a>
    d70c:	b.n	d2a0 <_strtod_l+0x490>
    d70e:	mov.w	r3, #4294967295
    d712:	b.n	d6e8 <_strtod_l+0x8d8>
    d714:	mov	r3, r1
    d716:	b.n	d6e8 <_strtod_l+0x8d8>
    d718:	orrs.w	r3, r3, r8
    d71c:	beq.w	d5fa <_strtod_l+0x7ea>
    d720:	ldr	r3, [sp, #40]	; 0x28
    d722:	cbz	r3, d758 <_strtod_l+0x948>
    d724:	tst.w	r3, fp
    d728:	beq.n	d706 <_strtod_l+0x8f6>
    d72a:	ldr	r2, [sp, #20]
    d72c:	mov	r0, r8
    d72e:	mov	r1, r9
    d730:	cmp.w	sl, #0
    d734:	beq.n	d760 <_strtod_l+0x950>
    d736:	bl	cdda <sulp>
    d73a:	vadd.f64	d7, d8, d0
    d73e:	vmov	r8, r9, d7
    d742:	b.n	d706 <_strtod_l+0x8f6>
    d744:	ands	r3, r2
    d746:	sub.w	r3, r3, #1048576	; 0x100000
    d74a:	mvn.w	r9, r3, lsr #20
    d74e:	mvn.w	r9, r9, lsl #20
    d752:	mov.w	r8, #4294967295
    d756:	b.n	d706 <_strtod_l+0x8f6>
    d758:	ldr	r3, [sp, #44]	; 0x2c
    d75a:	tst.w	r3, r8
    d75e:	b.n	d728 <_strtod_l+0x918>
    d760:	bl	cdda <sulp>
    d764:	vsub.f64	d0, d8, d0
    d768:	vcmp.f64	d0, #0.0
    d76c:	vmrs	APSR_nzcv, fpscr
    d770:	vmov	r8, r9, d0
    d774:	bne.n	d706 <_strtod_l+0x8f6>
    d776:	b.n	d36a <_strtod_l+0x55a>
    d778:	mov	r1, r6
    d77a:	mov	r0, r5
    d77c:	bl	10980 <__ratio>
    d780:	vmov.f64	d7, #0	; 0x40000000  2.0
    d784:	vcmpe.f64	d0, d7
    d788:	vmrs	APSR_nzcv, fpscr
    d78c:	bhi.n	d84e <_strtod_l+0xa3e>
    d78e:	cmp.w	sl, #0
    d792:	bne.n	d862 <_strtod_l+0xa52>
    d794:	cmp.w	r8, #0
    d798:	bne.n	d836 <_strtod_l+0xa26>
    d79a:	ubfx	r3, r9, #0, #20
    d79e:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d7a2:	cmp	r3, #0
    d7a4:	bne.n	d86c <_strtod_l+0xa5c>
    d7a6:	vcmpe.f64	d0, d13
    d7aa:	vmov.f64	d13, #96	; 0x3f000000  0.5
    d7ae:	vmrs	APSR_nzcv, fpscr
    d7b2:	bmi.n	d7b8 <_strtod_l+0x9a8>
    d7b4:	vmul.f64	d13, d0, d13
    d7b8:	vneg.f64	d12, d13
    d7bc:	ldr	r0, [pc, #420]	; (d964 <_strtod_l+0xb54>)
    d7be:	ldr.w	ip, [pc, #432]	; d970 <_strtod_l+0xb60>
    d7c2:	and.w	r1, fp, r0
    d7c6:	cmp	r1, ip
    d7c8:	vmov	r2, r3, d12
    d7cc:	bne.n	d8c4 <_strtod_l+0xab4>
    d7ce:	sub.w	r9, fp, #55574528	; 0x3500000
    d7d2:	vmov	d0, r8, r9
    d7d6:	str	r1, [sp, #40]	; 0x28
    d7d8:	bl	107ec <__ulp>
    d7dc:	vmov	d14, r8, r9
    d7e0:	ldr	r0, [pc, #384]	; (d964 <_strtod_l+0xb54>)
    d7e2:	vfma.f64	d14, d0, d12
    d7e6:	vmov	r3, s29
    d7ea:	ldr	r2, [pc, #384]	; (d96c <_strtod_l+0xb5c>)
    d7ec:	ldr	r1, [sp, #40]	; 0x28
    d7ee:	ands	r0, r3
    d7f0:	cmp	r0, r2
    d7f2:	vmov	r8, r9, d14
    d7f6:	bls.n	d872 <_strtod_l+0xa62>
    d7f8:	vmov	r2, s17
    d7fc:	ldr	r3, [pc, #360]	; (d968 <_strtod_l+0xb58>)
    d7fe:	cmp	r2, r3
    d800:	bne.n	d80c <_strtod_l+0x9fc>
    d802:	vmov	r3, s16
    d806:	adds	r3, #1
    d808:	beq.w	d28c <_strtod_l+0x47c>
    d80c:	ldr.w	r9, [pc, #344]	; d968 <_strtod_l+0xb58>
    d810:	mov.w	r8, #4294967295
    d814:	ldr	r1, [sp, #72]	; 0x48
    d816:	mov	r0, r4
    d818:	bl	10194 <_Bfree>
    d81c:	mov	r1, r7
    d81e:	mov	r0, r4
    d820:	bl	10194 <_Bfree>
    d824:	mov	r1, r6
    d826:	mov	r0, r4
    d828:	bl	10194 <_Bfree>
    d82c:	mov	r1, r5
    d82e:	mov	r0, r4
    d830:	bl	10194 <_Bfree>
    d834:	b.n	d44a <_strtod_l+0x63a>
    d836:	cmp.w	r8, #1
    d83a:	bne.n	d844 <_strtod_l+0xa34>
    d83c:	cmp.w	r9, #0
    d840:	beq.w	d36a <_strtod_l+0x55a>
    d844:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    d848:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d84c:	b.n	d7bc <_strtod_l+0x9ac>
    d84e:	vmov.f64	d13, #96	; 0x3f000000  0.5
    d852:	vmul.f64	d13, d0, d13
    d856:	cmp.w	sl, #0
    d85a:	beq.n	d7b8 <_strtod_l+0x9a8>
    d85c:	vmov.f64	d12, d13
    d860:	b.n	d7bc <_strtod_l+0x9ac>
    d862:	vmov.f64	d12, #112	; 0x3f800000  1.0
    d866:	vmov.f64	d13, d12
    d86a:	b.n	d7bc <_strtod_l+0x9ac>
    d86c:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    d870:	b.n	d7bc <_strtod_l+0x9ac>
    d872:	add.w	r9, r3, #55574528	; 0x3500000
    d876:	ldr	r3, [sp, #20]
    d878:	mov	fp, r9
    d87a:	cmp	r3, #0
    d87c:	bne.n	d814 <_strtod_l+0xa04>
    d87e:	bic.w	r3, r9, #2147483648	; 0x80000000
    d882:	lsrs	r3, r3, #20
    d884:	lsls	r3, r3, #20
    d886:	cmp	r1, r3
    d888:	bne.n	d814 <_strtod_l+0xa04>
    d88a:	vmov	r0, r1, d13
    d88e:	bl	12004 <__aeabi_d2lz>
    d892:	bl	11fa8 <__aeabi_l2d>
    d896:	ubfx	fp, r9, #0, #20
    d89a:	vmov	d7, r0, r1
    d89e:	orr.w	fp, fp, r8
    d8a2:	orrs.w	fp, fp, sl
    d8a6:	vsub.f64	d13, d13, d7
    d8aa:	beq.n	d926 <_strtod_l+0xb16>
    d8ac:	vcmpe.f64	d13, d10
    d8b0:	vmrs	APSR_nzcv, fpscr
    d8b4:	bmi.w	d2a0 <_strtod_l+0x490>
    d8b8:	vcmpe.f64	d13, d11
    d8bc:	vmrs	APSR_nzcv, fpscr
    d8c0:	ble.n	d814 <_strtod_l+0xa04>
    d8c2:	b.n	d2a0 <_strtod_l+0x490>
    d8c4:	ldr	r0, [sp, #20]
    d8c6:	cbz	r0, d906 <_strtod_l+0xaf6>
    d8c8:	cmp.w	r1, #111149056	; 0x6a00000
    d8cc:	bhi.n	d906 <_strtod_l+0xaf6>
    d8ce:	vldr	d7, [pc, #136]	; d958 <_strtod_l+0xb48>
    d8d2:	vcmpe.f64	d13, d7
    d8d6:	vmrs	APSR_nzcv, fpscr
    d8da:	bhi.n	d900 <_strtod_l+0xaf0>
    d8dc:	vcvt.u32.f64	s26, d13
    d8e0:	vmov	r3, s26
    d8e4:	cmp	r3, #1
    d8e6:	it	cc
    d8e8:	movcc	r3, #1
    d8ea:	vmov	s26, r3
    d8ee:	vcvt.f64.u32	d13, s26
    d8f2:	cmp.w	sl, #0
    d8f6:	bne.n	d920 <_strtod_l+0xb10>
    d8f8:	vneg.f64	d7, d13
    d8fc:	vmov	r2, r3, d7
    d900:	add.w	r0, r3, #112197632	; 0x6b00000
    d904:	subs	r3, r0, r1
    d906:	vmov.f64	d0, d8
    d90a:	vmov	d12, r2, r3
    d90e:	str	r1, [sp, #40]	; 0x28
    d910:	bl	107ec <__ulp>
    d914:	ldr	r1, [sp, #40]	; 0x28
    d916:	vfma.f64	d8, d12, d0
    d91a:	vmov	r8, r9, d8
    d91e:	b.n	d876 <_strtod_l+0xa66>
    d920:	vmov.f64	d7, d13
    d924:	b.n	d8fc <_strtod_l+0xaec>
    d926:	vcmpe.f64	d13, d9
    d92a:	vmrs	APSR_nzcv, fpscr
    d92e:	bpl.w	d814 <_strtod_l+0xa04>
    d932:	b.n	d2a0 <_strtod_l+0x490>
    d934:	movs	r3, #0
    d936:	str	r3, [sp, #32]
    d938:	ldr	r2, [sp, #52]	; 0x34
    d93a:	ldr	r3, [sp, #68]	; 0x44
    d93c:	str	r3, [r2, #0]
    d93e:	b.w	ce8e <_strtod_l+0x7e>
    d942:	cmp	r2, #101	; 0x65
    d944:	beq.w	d08c <_strtod_l+0x27c>
    d948:	cmp	r2, #69	; 0x45
    d94a:	beq.w	d08c <_strtod_l+0x27c>
    d94e:	movs	r1, #1
    d950:	b.w	d104 <_strtod_l+0x2f4>
    d954:	nop.w
    d958:	.word	0xffc00000
    d95c:	.word	0x41dfffff
    d960:	.word	0x000fffff
    d964:	.word	0x7ff00000
    d968:	.word	0x7fefffff
    d96c:	.word	0x7c9fffff
    d970:	.word	0x7fe00000

0000d974 <_strtod_r>:
    d974:	ldr	r3, [pc, #4]	; (d97c <_strtod_r+0x8>)
    d976:	b.w	ce10 <_strtod_l>
    d97a:	nop
    d97c:	.word	0x2000210c

0000d980 <_strtol_l.constprop.0>:
    d980:	cmp	r3, #1
    d982:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d986:	beq.n	d98c <_strtol_l.constprop.0+0xc>
    d988:	cmp	r3, #36	; 0x24
    d98a:	bls.n	d99a <_strtol_l.constprop.0+0x1a>
    d98c:	bl	ec84 <__errno>
    d990:	movs	r3, #22
    d992:	str	r3, [r0, #0]
    d994:	movs	r0, #0
    d996:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d99a:	ldr.w	ip, [pc, #228]	; da80 <_strtol_l.constprop.0+0x100>
    d99e:	mov	r5, r1
    d9a0:	mov	r6, r5
    d9a2:	ldrb.w	r4, [r5], #1
    d9a6:	ldrb.w	r7, [ip, r4]
    d9aa:	ands.w	r7, r7, #8
    d9ae:	bne.n	d9a0 <_strtol_l.constprop.0+0x20>
    d9b0:	cmp	r4, #45	; 0x2d
    d9b2:	bne.n	da1a <_strtol_l.constprop.0+0x9a>
    d9b4:	ldrb	r4, [r5, #0]
    d9b6:	movs	r7, #1
    d9b8:	adds	r5, r6, #2
    d9ba:	cmp	r3, #0
    d9bc:	beq.n	da76 <_strtol_l.constprop.0+0xf6>
    d9be:	cmp	r3, #16
    d9c0:	bne.n	d9d6 <_strtol_l.constprop.0+0x56>
    d9c2:	cmp	r4, #48	; 0x30
    d9c4:	bne.n	d9d6 <_strtol_l.constprop.0+0x56>
    d9c6:	ldrb	r4, [r5, #0]
    d9c8:	and.w	r4, r4, #223	; 0xdf
    d9cc:	cmp	r4, #88	; 0x58
    d9ce:	bne.n	da6c <_strtol_l.constprop.0+0xec>
    d9d0:	ldrb	r4, [r5, #1]
    d9d2:	movs	r3, #16
    d9d4:	adds	r5, #2
    d9d6:	add.w	r8, r7, #2147483648	; 0x80000000
    d9da:	add.w	r8, r8, #4294967295
    d9de:	mov.w	lr, #0
    d9e2:	udiv	r9, r8, r3
    d9e6:	mov	r6, lr
    d9e8:	mls	sl, r3, r9, r8
    d9ec:	sub.w	ip, r4, #48	; 0x30
    d9f0:	cmp.w	ip, #9
    d9f4:	bhi.n	da24 <_strtol_l.constprop.0+0xa4>
    d9f6:	mov	r4, ip
    d9f8:	cmp	r3, r4
    d9fa:	ble.n	da46 <_strtol_l.constprop.0+0xc6>
    d9fc:	cmp.w	lr, #4294967295
    da00:	beq.n	da14 <_strtol_l.constprop.0+0x94>
    da02:	cmp	r9, r6
    da04:	bcc.n	da40 <_strtol_l.constprop.0+0xc0>
    da06:	bne.n	da0c <_strtol_l.constprop.0+0x8c>
    da08:	cmp	sl, r4
    da0a:	blt.n	da40 <_strtol_l.constprop.0+0xc0>
    da0c:	mla	r6, r6, r3, r4
    da10:	mov.w	lr, #1
    da14:	ldrb.w	r4, [r5], #1
    da18:	b.n	d9ec <_strtol_l.constprop.0+0x6c>
    da1a:	cmp	r4, #43	; 0x2b
    da1c:	itt	eq
    da1e:	ldrbeq	r4, [r5, #0]
    da20:	addeq	r5, r6, #2
    da22:	b.n	d9ba <_strtol_l.constprop.0+0x3a>
    da24:	sub.w	ip, r4, #65	; 0x41
    da28:	cmp.w	ip, #25
    da2c:	bhi.n	da32 <_strtol_l.constprop.0+0xb2>
    da2e:	subs	r4, #55	; 0x37
    da30:	b.n	d9f8 <_strtol_l.constprop.0+0x78>
    da32:	sub.w	ip, r4, #97	; 0x61
    da36:	cmp.w	ip, #25
    da3a:	bhi.n	da46 <_strtol_l.constprop.0+0xc6>
    da3c:	subs	r4, #87	; 0x57
    da3e:	b.n	d9f8 <_strtol_l.constprop.0+0x78>
    da40:	mov.w	lr, #4294967295
    da44:	b.n	da14 <_strtol_l.constprop.0+0x94>
    da46:	cmp.w	lr, #4294967295
    da4a:	bne.n	da58 <_strtol_l.constprop.0+0xd8>
    da4c:	movs	r3, #34	; 0x22
    da4e:	str	r3, [r0, #0]
    da50:	mov	r6, r8
    da52:	cbnz	r2, da66 <_strtol_l.constprop.0+0xe6>
    da54:	mov	r0, r6
    da56:	b.n	d996 <_strtol_l.constprop.0+0x16>
    da58:	cbz	r7, da5c <_strtol_l.constprop.0+0xdc>
    da5a:	negs	r6, r6
    da5c:	cmp	r2, #0
    da5e:	beq.n	da54 <_strtol_l.constprop.0+0xd4>
    da60:	cmp.w	lr, #0
    da64:	beq.n	da68 <_strtol_l.constprop.0+0xe8>
    da66:	subs	r1, r5, #1
    da68:	str	r1, [r2, #0]
    da6a:	b.n	da54 <_strtol_l.constprop.0+0xd4>
    da6c:	movs	r4, #48	; 0x30
    da6e:	cmp	r3, #0
    da70:	bne.n	d9d6 <_strtol_l.constprop.0+0x56>
    da72:	movs	r3, #8
    da74:	b.n	d9d6 <_strtol_l.constprop.0+0x56>
    da76:	cmp	r4, #48	; 0x30
    da78:	beq.n	d9c6 <_strtol_l.constprop.0+0x46>
    da7a:	movs	r3, #10
    da7c:	b.n	d9d6 <_strtol_l.constprop.0+0x56>
    da7e:	nop
    da80:	.word	0x2000124c

0000da84 <_strtol_r>:
    da84:	b.w	d980 <_strtol_l.constprop.0>

0000da88 <__cxa_atexit>:
    da88:	push	{r4, lr}
    da8a:	ldr	r4, [pc, #20]	; (daa0 <__cxa_atexit+0x18>)
    da8c:	mov	r3, r2
    da8e:	cbz	r4, da9c <__cxa_atexit+0x14>
    da90:	mov	r2, r1
    da92:	mov	r1, r0
    da94:	movs	r0, #2
    da96:	nop.w
    da9a:	pop	{r4, pc}
    da9c:	mov	r0, r4
    da9e:	b.n	da9a <__cxa_atexit+0x12>
    daa0:	.word	0x00000000

0000daa4 <fcvt>:
    daa4:	movs	r3, #0
    daa6:	b.w	10a94 <fcvtbuf>

0000daaa <fcvtf>:
    daaa:	vcvt.f64.f32	d0, s0
    daae:	b.w	daa4 <fcvt>

0000dab2 <__cvt>:
    dab2:	push	{r4, r5, r6, r7, lr}
    dab4:	vpush	{d8}
    dab8:	vmov.f64	d8, d0
    dabc:	sub	sp, #20
    dabe:	mov	r7, r2
    dac0:	ldr	r5, [sp, #52]	; 0x34
    dac2:	ldr	r6, [sp, #48]	; 0x30
    dac4:	vmov	r2, s17
    dac8:	bic.w	r5, r5, #32
    dacc:	cmp	r2, #0
    dace:	itet	lt
    dad0:	movlt	r2, #45	; 0x2d
    dad2:	movge	r2, #0
    dad4:	vneglt.f64	d8, d0
    dad8:	cmp	r5, #70	; 0x46
    dada:	mov	r4, r1
    dadc:	strb	r2, [r3, #0]
    dade:	beq.n	daea <__cvt+0x38>
    dae0:	cmp	r5, #69	; 0x45
    dae2:	bne.n	dae6 <__cvt+0x34>
    dae4:	adds	r4, #1
    dae6:	movs	r1, #2
    dae8:	b.n	daec <__cvt+0x3a>
    daea:	movs	r1, #3
    daec:	add	r3, sp, #12
    daee:	str	r3, [sp, #4]
    daf0:	add	r3, sp, #8
    daf2:	str	r3, [sp, #0]
    daf4:	mov	r2, r4
    daf6:	mov	r3, r6
    daf8:	vmov.f64	d0, d8
    dafc:	bl	eed0 <_dtoa_r>
    db00:	cmp	r5, #71	; 0x47
    db02:	bne.n	db08 <__cvt+0x56>
    db04:	lsls	r3, r7, #31
    db06:	bpl.n	db3e <__cvt+0x8c>
    db08:	cmp	r5, #70	; 0x46
    db0a:	add.w	r2, r0, r4
    db0e:	bne.n	db2a <__cvt+0x78>
    db10:	ldrb	r3, [r0, #0]
    db12:	cmp	r3, #48	; 0x30
    db14:	bne.n	db26 <__cvt+0x74>
    db16:	vcmp.f64	d8, #0.0
    db1a:	vmrs	APSR_nzcv, fpscr
    db1e:	itt	ne
    db20:	rsbne	r4, r4, #1
    db24:	strne	r4, [r6, #0]
    db26:	ldr	r3, [r6, #0]
    db28:	add	r2, r3
    db2a:	vcmp.f64	d8, #0.0
    db2e:	vmrs	APSR_nzcv, fpscr
    db32:	it	eq
    db34:	streq	r2, [sp, #12]
    db36:	movs	r1, #48	; 0x30
    db38:	ldr	r3, [sp, #12]
    db3a:	cmp	r3, r2
    db3c:	bcc.n	db4e <__cvt+0x9c>
    db3e:	ldr	r3, [sp, #12]
    db40:	ldr	r2, [sp, #56]	; 0x38
    db42:	subs	r3, r3, r0
    db44:	str	r3, [r2, #0]
    db46:	add	sp, #20
    db48:	vpop	{d8}
    db4c:	pop	{r4, r5, r6, r7, pc}
    db4e:	adds	r4, r3, #1
    db50:	str	r4, [sp, #12]
    db52:	strb	r1, [r3, #0]
    db54:	b.n	db38 <__cvt+0x86>

0000db56 <__exponent>:
    db56:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    db58:	mov	r3, r0
    db5a:	cmp	r1, #0
    db5c:	it	lt
    db5e:	neglt	r1, r1
    db60:	strb.w	r2, [r3], #2
    db64:	ite	lt
    db66:	movlt	r2, #45	; 0x2d
    db68:	movge	r2, #43	; 0x2b
    db6a:	cmp	r1, #9
    db6c:	strb	r2, [r0, #1]
    db6e:	ble.n	dbc6 <__exponent+0x70>
    db70:	add.w	r2, sp, #7
    db74:	mov	r7, r2
    db76:	movs	r6, #10
    db78:	mov	ip, r2
    db7a:	sdiv	r5, r1, r6
    db7e:	mls	r4, r6, r5, r1
    db82:	adds	r4, #48	; 0x30
    db84:	strb.w	r4, [ip, #-1]
    db88:	mov	r4, r1
    db8a:	cmp	r4, #99	; 0x63
    db8c:	add.w	r2, r2, #4294967295
    db90:	mov	r1, r5
    db92:	bgt.n	db78 <__exponent+0x22>
    db94:	adds	r1, #48	; 0x30
    db96:	sub.w	r4, ip, #2
    db9a:	strb.w	r1, [r2, #-1]
    db9e:	adds	r1, r0, #1
    dba0:	mov	r2, r4
    dba2:	cmp	r2, r7
    dba4:	bcc.n	dbbc <__exponent+0x66>
    dba6:	add.w	r2, sp, #9
    dbaa:	sub.w	r2, r2, ip
    dbae:	cmp	r4, r7
    dbb0:	it	hi
    dbb2:	movhi	r2, #0
    dbb4:	add	r3, r2
    dbb6:	subs	r0, r3, r0
    dbb8:	add	sp, #12
    dbba:	pop	{r4, r5, r6, r7, pc}
    dbbc:	ldrb.w	r5, [r2], #1
    dbc0:	strb.w	r5, [r1, #1]!
    dbc4:	b.n	dba2 <__exponent+0x4c>
    dbc6:	movs	r3, #48	; 0x30
    dbc8:	adds	r1, #48	; 0x30
    dbca:	strb	r3, [r0, #2]
    dbcc:	strb	r1, [r0, #3]
    dbce:	adds	r3, r0, #4
    dbd0:	b.n	dbb6 <__exponent+0x60>
    dbd2:	movs	r0, r0
    dbd4:	movs	r0, r0
	...

0000dbd8 <_printf_float>:
    dbd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbdc:	sub	sp, #44	; 0x2c
    dbde:	mov	r4, r1
    dbe0:	ldr.w	r8, [sp, #80]	; 0x50
    dbe4:	mov	r6, r2
    dbe6:	mov	r7, r3
    dbe8:	mov	r5, r0
    dbea:	bl	ebd0 <_localeconv_r>
    dbee:	ldr.w	fp, [r0]
    dbf2:	mov	r0, fp
    dbf4:	bl	ed90 <strlen>
    dbf8:	movs	r3, #0
    dbfa:	str	r3, [sp, #32]
    dbfc:	ldr.w	r3, [r8]
    dc00:	ldrb.w	r9, [r4, #24]
    dc04:	ldr	r2, [r4, #0]
    dc06:	adds	r3, #7
    dc08:	bic.w	r3, r3, #7
    dc0c:	add.w	r1, r3, #8
    dc10:	str.w	r1, [r8]
    dc14:	vldr	d0, [r3]
    dc18:	vldr	d6, [pc, #604]	; de78 <_printf_float+0x2a0>
    dc1c:	vabs.f64	d7, d0
    dc20:	vcmp.f64	d7, d6
    dc24:	vmrs	APSR_nzcv, fpscr
    dc28:	vstr	d0, [r4, #72]	; 0x48
    dc2c:	mov	sl, r0
    dc2e:	ble.n	dc7a <_printf_float+0xa2>
    dc30:	vcmpe.f64	d0, #0.0
    dc34:	vmrs	APSR_nzcv, fpscr
    dc38:	bpl.n	dc40 <_printf_float+0x68>
    dc3a:	movs	r3, #45	; 0x2d
    dc3c:	strb.w	r3, [r4, #67]	; 0x43
    dc40:	ldr	r1, [pc, #572]	; (de80 <_printf_float+0x2a8>)
    dc42:	ldr	r3, [pc, #576]	; (de84 <_printf_float+0x2ac>)
    dc44:	cmp.w	r9, #71	; 0x47
    dc48:	ite	ls
    dc4a:	movls	r8, r1
    dc4c:	movhi	r8, r3
    dc4e:	movs	r3, #3
    dc50:	str	r3, [r4, #16]
    dc52:	bic.w	r2, r2, #4
    dc56:	movs	r3, #0
    dc58:	str	r2, [r4, #0]
    dc5a:	str	r3, [sp, #16]
    dc5c:	str	r7, [sp, #0]
    dc5e:	mov	r3, r6
    dc60:	add	r2, sp, #36	; 0x24
    dc62:	mov	r1, r4
    dc64:	mov	r0, r5
    dc66:	bl	e00c <_printf_common>
    dc6a:	adds	r0, #1
    dc6c:	bne.w	dd84 <_printf_float+0x1ac>
    dc70:	mov.w	r0, #4294967295
    dc74:	add	sp, #44	; 0x2c
    dc76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc7a:	vcmp.f64	d0, d0
    dc7e:	vmrs	APSR_nzcv, fpscr
    dc82:	bvc.n	dc98 <_printf_float+0xc0>
    dc84:	vmov	r3, s1
    dc88:	cmp	r3, #0
    dc8a:	itt	lt
    dc8c:	movlt	r3, #45	; 0x2d
    dc8e:	strblt.w	r3, [r4, #67]	; 0x43
    dc92:	ldr	r1, [pc, #500]	; (de88 <_printf_float+0x2b0>)
    dc94:	ldr	r3, [pc, #500]	; (de8c <_printf_float+0x2b4>)
    dc96:	b.n	dc44 <_printf_float+0x6c>
    dc98:	ldr	r3, [r4, #4]
    dc9a:	and.w	r1, r9, #223	; 0xdf
    dc9e:	str	r1, [sp, #16]
    dca0:	adds	r1, r3, #1
    dca2:	bne.n	dd1e <_printf_float+0x146>
    dca4:	movs	r3, #6
    dca6:	str	r3, [r4, #4]
    dca8:	movs	r3, #0
    dcaa:	str	r3, [sp, #12]
    dcac:	add	r3, sp, #32
    dcae:	strd	r9, r3, [sp, #4]
    dcb2:	orr.w	r2, r2, #1024	; 0x400
    dcb6:	add	r3, sp, #28
    dcb8:	ldr	r1, [r4, #4]
    dcba:	str	r3, [sp, #0]
    dcbc:	str	r2, [r4, #0]
    dcbe:	add.w	r3, sp, #27
    dcc2:	mov	r0, r5
    dcc4:	bl	dab2 <__cvt>
    dcc8:	ldr	r3, [sp, #16]
    dcca:	ldr	r1, [sp, #28]
    dccc:	cmp	r3, #71	; 0x47
    dcce:	mov	r8, r0
    dcd0:	bne.n	dce4 <_printf_float+0x10c>
    dcd2:	adds	r0, r1, #3
    dcd4:	blt.n	dcdc <_printf_float+0x104>
    dcd6:	ldr	r3, [r4, #4]
    dcd8:	cmp	r1, r3
    dcda:	ble.n	dd60 <_printf_float+0x188>
    dcdc:	sub.w	r9, r9, #2
    dce0:	uxtb.w	r9, r9
    dce4:	cmp.w	r9, #101	; 0x65
    dce8:	bhi.n	dd2c <_printf_float+0x154>
    dcea:	subs	r1, #1
    dcec:	mov	r2, r9
    dcee:	add.w	r0, r4, #80	; 0x50
    dcf2:	str	r1, [sp, #28]
    dcf4:	bl	db56 <__exponent>
    dcf8:	ldr	r2, [sp, #32]
    dcfa:	str	r0, [sp, #16]
    dcfc:	adds	r3, r2, r0
    dcfe:	cmp	r2, #1
    dd00:	str	r3, [r4, #16]
    dd02:	bgt.n	dd0a <_printf_float+0x132>
    dd04:	ldr	r2, [r4, #0]
    dd06:	lsls	r2, r2, #31
    dd08:	bpl.n	dd0e <_printf_float+0x136>
    dd0a:	adds	r3, #1
    dd0c:	str	r3, [r4, #16]
    dd0e:	ldrb.w	r3, [sp, #27]
    dd12:	cmp	r3, #0
    dd14:	beq.n	dc5c <_printf_float+0x84>
    dd16:	movs	r3, #45	; 0x2d
    dd18:	strb.w	r3, [r4, #67]	; 0x43
    dd1c:	b.n	dc5c <_printf_float+0x84>
    dd1e:	ldr	r1, [sp, #16]
    dd20:	cmp	r1, #71	; 0x47
    dd22:	bne.n	dca8 <_printf_float+0xd0>
    dd24:	cmp	r3, #0
    dd26:	bne.n	dca8 <_printf_float+0xd0>
    dd28:	movs	r3, #1
    dd2a:	b.n	dca6 <_printf_float+0xce>
    dd2c:	cmp.w	r9, #102	; 0x66
    dd30:	bne.n	dd64 <_printf_float+0x18c>
    dd32:	cmp	r1, #0
    dd34:	ldr	r3, [r4, #4]
    dd36:	ble.n	dd50 <_printf_float+0x178>
    dd38:	str	r1, [r4, #16]
    dd3a:	cbnz	r3, dd42 <_printf_float+0x16a>
    dd3c:	ldr	r2, [r4, #0]
    dd3e:	lsls	r0, r2, #31
    dd40:	bpl.n	dd48 <_printf_float+0x170>
    dd42:	adds	r3, #1
    dd44:	add	r3, r1
    dd46:	str	r3, [r4, #16]
    dd48:	movs	r3, #0
    dd4a:	str	r1, [r4, #88]	; 0x58
    dd4c:	str	r3, [sp, #16]
    dd4e:	b.n	dd0e <_printf_float+0x136>
    dd50:	cbnz	r3, dd58 <_printf_float+0x180>
    dd52:	ldr	r2, [r4, #0]
    dd54:	lsls	r2, r2, #31
    dd56:	bpl.n	dd5c <_printf_float+0x184>
    dd58:	adds	r3, #2
    dd5a:	b.n	dd46 <_printf_float+0x16e>
    dd5c:	movs	r3, #1
    dd5e:	b.n	dd46 <_printf_float+0x16e>
    dd60:	mov.w	r9, #103	; 0x67
    dd64:	ldr	r3, [sp, #32]
    dd66:	cmp	r1, r3
    dd68:	blt.n	dd76 <_printf_float+0x19e>
    dd6a:	ldr	r3, [r4, #0]
    dd6c:	str	r1, [r4, #16]
    dd6e:	lsls	r0, r3, #31
    dd70:	bpl.n	dd48 <_printf_float+0x170>
    dd72:	adds	r3, r1, #1
    dd74:	b.n	dd46 <_printf_float+0x16e>
    dd76:	cmp	r1, #0
    dd78:	ite	le
    dd7a:	rsble	r2, r1, #2
    dd7e:	movgt	r2, #1
    dd80:	add	r3, r2
    dd82:	b.n	dd46 <_printf_float+0x16e>
    dd84:	ldr	r3, [r4, #0]
    dd86:	lsls	r2, r3, #21
    dd88:	bmi.n	dd9a <_printf_float+0x1c2>
    dd8a:	ldr	r3, [r4, #16]
    dd8c:	mov	r2, r8
    dd8e:	mov	r1, r6
    dd90:	mov	r0, r5
    dd92:	blx	r7
    dd94:	adds	r0, #1
    dd96:	bne.n	ddee <_printf_float+0x216>
    dd98:	b.n	dc70 <_printf_float+0x98>
    dd9a:	cmp.w	r9, #101	; 0x65
    dd9e:	bls.w	df62 <_printf_float+0x38a>
    dda2:	vldr	d7, [r4, #72]	; 0x48
    dda6:	vcmp.f64	d7, #0.0
    ddaa:	vmrs	APSR_nzcv, fpscr
    ddae:	bne.n	de18 <_printf_float+0x240>
    ddb0:	ldr	r2, [pc, #220]	; (de90 <_printf_float+0x2b8>)
    ddb2:	movs	r3, #1
    ddb4:	mov	r1, r6
    ddb6:	mov	r0, r5
    ddb8:	blx	r7
    ddba:	adds	r0, #1
    ddbc:	beq.w	dc70 <_printf_float+0x98>
    ddc0:	ldrd	r2, r3, [sp, #28]
    ddc4:	cmp	r2, r3
    ddc6:	blt.n	ddce <_printf_float+0x1f6>
    ddc8:	ldr	r3, [r4, #0]
    ddca:	lsls	r0, r3, #31
    ddcc:	bpl.n	ddee <_printf_float+0x216>
    ddce:	mov	r3, sl
    ddd0:	mov	r2, fp
    ddd2:	mov	r1, r6
    ddd4:	mov	r0, r5
    ddd6:	blx	r7
    ddd8:	adds	r0, #1
    ddda:	beq.w	dc70 <_printf_float+0x98>
    ddde:	mov.w	r8, #0
    dde2:	add.w	r9, r4, #26
    dde6:	ldr	r3, [sp, #32]
    dde8:	subs	r3, #1
    ddea:	cmp	r3, r8
    ddec:	bgt.n	de02 <_printf_float+0x22a>
    ddee:	ldr	r3, [r4, #0]
    ddf0:	lsls	r3, r3, #30
    ddf2:	bmi.w	e002 <_printf_float+0x42a>
    ddf6:	ldr	r0, [r4, #12]
    ddf8:	ldr	r3, [sp, #36]	; 0x24
    ddfa:	cmp	r0, r3
    ddfc:	it	lt
    ddfe:	movlt	r0, r3
    de00:	b.n	dc74 <_printf_float+0x9c>
    de02:	movs	r3, #1
    de04:	mov	r2, r9
    de06:	mov	r1, r6
    de08:	mov	r0, r5
    de0a:	blx	r7
    de0c:	adds	r0, #1
    de0e:	beq.w	dc70 <_printf_float+0x98>
    de12:	add.w	r8, r8, #1
    de16:	b.n	dde6 <_printf_float+0x20e>
    de18:	ldr	r3, [sp, #28]
    de1a:	cmp	r3, #0
    de1c:	bgt.n	de94 <_printf_float+0x2bc>
    de1e:	ldr	r2, [pc, #112]	; (de90 <_printf_float+0x2b8>)
    de20:	movs	r3, #1
    de22:	mov	r1, r6
    de24:	mov	r0, r5
    de26:	blx	r7
    de28:	adds	r0, #1
    de2a:	beq.w	dc70 <_printf_float+0x98>
    de2e:	ldrd	r3, r2, [sp, #28]
    de32:	orrs	r3, r2
    de34:	bne.n	de3c <_printf_float+0x264>
    de36:	ldr	r3, [r4, #0]
    de38:	lsls	r1, r3, #31
    de3a:	bpl.n	ddee <_printf_float+0x216>
    de3c:	mov	r3, sl
    de3e:	mov	r2, fp
    de40:	mov	r1, r6
    de42:	mov	r0, r5
    de44:	blx	r7
    de46:	adds	r0, #1
    de48:	beq.w	dc70 <_printf_float+0x98>
    de4c:	mov.w	r9, #0
    de50:	add.w	sl, r4, #26
    de54:	ldr	r3, [sp, #28]
    de56:	negs	r3, r3
    de58:	cmp	r3, r9
    de5a:	bgt.n	de60 <_printf_float+0x288>
    de5c:	ldr	r3, [sp, #32]
    de5e:	b.n	dd8c <_printf_float+0x1b4>
    de60:	movs	r3, #1
    de62:	mov	r2, sl
    de64:	mov	r1, r6
    de66:	mov	r0, r5
    de68:	blx	r7
    de6a:	adds	r0, #1
    de6c:	beq.w	dc70 <_printf_float+0x98>
    de70:	add.w	r9, r9, #1
    de74:	b.n	de54 <_printf_float+0x27c>
    de76:	nop
    de78:	.word	0xffffffff
    de7c:	.word	0x7fefffff
    de80:	.word	0x200013da
    de84:	.word	0x200011a6
    de88:	.word	0x200013de
    de8c:	.word	0x200011a2
    de90:	.word	0x20001187
    de94:	ldr	r2, [sp, #32]
    de96:	ldr	r3, [r4, #88]	; 0x58
    de98:	cmp	r2, r3
    de9a:	it	ge
    de9c:	movge	r2, r3
    de9e:	cmp	r2, #0
    dea0:	mov	r9, r2
    dea2:	bgt.n	df16 <_printf_float+0x33e>
    dea4:	movs	r3, #0
    dea6:	str	r3, [sp, #20]
    dea8:	bic.w	r9, r9, r9, asr #31
    deac:	add.w	r2, r4, #26
    deb0:	ldr	r3, [r4, #88]	; 0x58
    deb2:	ldr	r1, [sp, #20]
    deb4:	str	r3, [sp, #16]
    deb6:	sub.w	r3, r3, r9
    deba:	cmp	r3, r1
    debc:	bgt.n	df26 <_printf_float+0x34e>
    debe:	ldrd	r2, r3, [sp, #28]
    dec2:	cmp	r2, r3
    dec4:	blt.n	df40 <_printf_float+0x368>
    dec6:	ldr	r3, [r4, #0]
    dec8:	lsls	r2, r3, #31
    deca:	bmi.n	df40 <_printf_float+0x368>
    decc:	ldrd	r3, r2, [sp, #28]
    ded0:	sub.w	r9, r2, r3
    ded4:	ldr	r3, [sp, #16]
    ded6:	subs	r2, r2, r3
    ded8:	cmp	r9, r2
    deda:	it	ge
    dedc:	movge	r9, r2
    dede:	cmp.w	r9, #0
    dee2:	bgt.n	df50 <_printf_float+0x378>
    dee4:	mov.w	r8, #0
    dee8:	bic.w	r9, r9, r9, asr #31
    deec:	add.w	sl, r4, #26
    def0:	ldrd	r2, r3, [sp, #28]
    def4:	subs	r3, r3, r2
    def6:	sub.w	r3, r3, r9
    defa:	cmp	r3, r8
    defc:	ble.w	ddee <_printf_float+0x216>
    df00:	movs	r3, #1
    df02:	mov	r2, sl
    df04:	mov	r1, r6
    df06:	mov	r0, r5
    df08:	blx	r7
    df0a:	adds	r0, #1
    df0c:	beq.w	dc70 <_printf_float+0x98>
    df10:	add.w	r8, r8, #1
    df14:	b.n	def0 <_printf_float+0x318>
    df16:	mov	r3, r2
    df18:	mov	r1, r6
    df1a:	mov	r2, r8
    df1c:	mov	r0, r5
    df1e:	blx	r7
    df20:	adds	r0, #1
    df22:	bne.n	dea4 <_printf_float+0x2cc>
    df24:	b.n	dc70 <_printf_float+0x98>
    df26:	movs	r3, #1
    df28:	mov	r1, r6
    df2a:	mov	r0, r5
    df2c:	str	r2, [sp, #16]
    df2e:	blx	r7
    df30:	adds	r0, #1
    df32:	beq.w	dc70 <_printf_float+0x98>
    df36:	ldr	r3, [sp, #20]
    df38:	ldr	r2, [sp, #16]
    df3a:	adds	r3, #1
    df3c:	str	r3, [sp, #20]
    df3e:	b.n	deb0 <_printf_float+0x2d8>
    df40:	mov	r3, sl
    df42:	mov	r2, fp
    df44:	mov	r1, r6
    df46:	mov	r0, r5
    df48:	blx	r7
    df4a:	adds	r0, #1
    df4c:	bne.n	decc <_printf_float+0x2f4>
    df4e:	b.n	dc70 <_printf_float+0x98>
    df50:	ldr	r2, [sp, #16]
    df52:	mov	r3, r9
    df54:	add	r2, r8
    df56:	mov	r1, r6
    df58:	mov	r0, r5
    df5a:	blx	r7
    df5c:	adds	r0, #1
    df5e:	bne.n	dee4 <_printf_float+0x30c>
    df60:	b.n	dc70 <_printf_float+0x98>
    df62:	ldr	r2, [sp, #32]
    df64:	cmp	r2, #1
    df66:	bgt.n	df6c <_printf_float+0x394>
    df68:	lsls	r3, r3, #31
    df6a:	bpl.n	dfdc <_printf_float+0x404>
    df6c:	movs	r3, #1
    df6e:	mov	r2, r8
    df70:	mov	r1, r6
    df72:	mov	r0, r5
    df74:	blx	r7
    df76:	adds	r0, #1
    df78:	beq.w	dc70 <_printf_float+0x98>
    df7c:	mov	r3, sl
    df7e:	mov	r2, fp
    df80:	mov	r1, r6
    df82:	mov	r0, r5
    df84:	blx	r7
    df86:	adds	r0, #1
    df88:	beq.w	dc70 <_printf_float+0x98>
    df8c:	vldr	d7, [r4, #72]	; 0x48
    df90:	vcmp.f64	d7, #0.0
    df94:	vmrs	APSR_nzcv, fpscr
    df98:	ldr	r3, [sp, #32]
    df9a:	beq.n	dfd2 <_printf_float+0x3fa>
    df9c:	subs	r3, #1
    df9e:	add.w	r2, r8, #1
    dfa2:	mov	r1, r6
    dfa4:	mov	r0, r5
    dfa6:	blx	r7
    dfa8:	adds	r0, #1
    dfaa:	bne.n	dfca <_printf_float+0x3f2>
    dfac:	b.n	dc70 <_printf_float+0x98>
    dfae:	movs	r3, #1
    dfb0:	mov	r2, r9
    dfb2:	mov	r1, r6
    dfb4:	mov	r0, r5
    dfb6:	blx	r7
    dfb8:	adds	r0, #1
    dfba:	beq.w	dc70 <_printf_float+0x98>
    dfbe:	add.w	r8, r8, #1
    dfc2:	ldr	r3, [sp, #32]
    dfc4:	subs	r3, #1
    dfc6:	cmp	r3, r8
    dfc8:	bgt.n	dfae <_printf_float+0x3d6>
    dfca:	ldr	r3, [sp, #16]
    dfcc:	add.w	r2, r4, #80	; 0x50
    dfd0:	b.n	dd8e <_printf_float+0x1b6>
    dfd2:	mov.w	r8, #0
    dfd6:	add.w	r9, r4, #26
    dfda:	b.n	dfc2 <_printf_float+0x3ea>
    dfdc:	movs	r3, #1
    dfde:	mov	r2, r8
    dfe0:	b.n	dfa2 <_printf_float+0x3ca>
    dfe2:	movs	r3, #1
    dfe4:	mov	r2, r9
    dfe6:	mov	r1, r6
    dfe8:	mov	r0, r5
    dfea:	blx	r7
    dfec:	adds	r0, #1
    dfee:	beq.w	dc70 <_printf_float+0x98>
    dff2:	add.w	r8, r8, #1
    dff6:	ldr	r3, [r4, #12]
    dff8:	ldr	r1, [sp, #36]	; 0x24
    dffa:	subs	r3, r3, r1
    dffc:	cmp	r3, r8
    dffe:	bgt.n	dfe2 <_printf_float+0x40a>
    e000:	b.n	ddf6 <_printf_float+0x21e>
    e002:	mov.w	r8, #0
    e006:	add.w	r9, r4, #25
    e00a:	b.n	dff6 <_printf_float+0x41e>

0000e00c <_printf_common>:
    e00c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e010:	mov	r6, r2
    e012:	mov	r9, r3
    e014:	ldr	r2, [r1, #8]
    e016:	ldr	r3, [r1, #16]
    e018:	ldr.w	r8, [sp, #32]
    e01c:	cmp	r3, r2
    e01e:	it	lt
    e020:	movlt	r3, r2
    e022:	str	r3, [r6, #0]
    e024:	ldrb.w	r2, [r1, #67]	; 0x43
    e028:	mov	r7, r0
    e02a:	mov	r4, r1
    e02c:	cbz	r2, e032 <_printf_common+0x26>
    e02e:	adds	r3, #1
    e030:	str	r3, [r6, #0]
    e032:	ldr	r3, [r4, #0]
    e034:	lsls	r1, r3, #26
    e036:	ittt	mi
    e038:	ldrmi	r3, [r6, #0]
    e03a:	addmi	r3, #2
    e03c:	strmi	r3, [r6, #0]
    e03e:	ldr	r5, [r4, #0]
    e040:	ands.w	r5, r5, #6
    e044:	bne.n	e054 <_printf_common+0x48>
    e046:	add.w	sl, r4, #25
    e04a:	ldr	r3, [r4, #12]
    e04c:	ldr	r2, [r6, #0]
    e04e:	subs	r3, r3, r2
    e050:	cmp	r3, r5
    e052:	bgt.n	e0a2 <_printf_common+0x96>
    e054:	ldrb.w	r2, [r4, #67]	; 0x43
    e058:	subs	r3, r2, #0
    e05a:	ldr	r2, [r4, #0]
    e05c:	it	ne
    e05e:	movne	r3, #1
    e060:	lsls	r2, r2, #26
    e062:	bmi.n	e0bc <_printf_common+0xb0>
    e064:	add.w	r2, r4, #67	; 0x43
    e068:	mov	r1, r9
    e06a:	mov	r0, r7
    e06c:	blx	r8
    e06e:	adds	r0, #1
    e070:	beq.n	e0b0 <_printf_common+0xa4>
    e072:	ldr	r3, [r4, #0]
    e074:	ldr	r2, [r4, #16]
    e076:	and.w	r3, r3, #6
    e07a:	cmp	r3, #4
    e07c:	ittt	eq
    e07e:	ldreq	r5, [r4, #12]
    e080:	ldreq	r3, [r6, #0]
    e082:	subeq	r5, r5, r3
    e084:	ldr	r3, [r4, #8]
    e086:	ite	eq
    e088:	biceq.w	r5, r5, r5, asr #31
    e08c:	movne	r5, #0
    e08e:	cmp	r3, r2
    e090:	itt	gt
    e092:	subgt	r3, r3, r2
    e094:	addgt	r5, r5, r3
    e096:	movs	r6, #0
    e098:	adds	r4, #26
    e09a:	cmp	r5, r6
    e09c:	bne.n	e0d4 <_printf_common+0xc8>
    e09e:	movs	r0, #0
    e0a0:	b.n	e0b4 <_printf_common+0xa8>
    e0a2:	movs	r3, #1
    e0a4:	mov	r2, sl
    e0a6:	mov	r1, r9
    e0a8:	mov	r0, r7
    e0aa:	blx	r8
    e0ac:	adds	r0, #1
    e0ae:	bne.n	e0b8 <_printf_common+0xac>
    e0b0:	mov.w	r0, #4294967295
    e0b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0b8:	adds	r5, #1
    e0ba:	b.n	e04a <_printf_common+0x3e>
    e0bc:	adds	r1, r4, r3
    e0be:	adds	r2, r3, #1
    e0c0:	movs	r0, #48	; 0x30
    e0c2:	strb.w	r0, [r1, #67]	; 0x43
    e0c6:	add	r2, r4
    e0c8:	ldrb.w	r1, [r4, #69]	; 0x45
    e0cc:	strb.w	r1, [r2, #67]	; 0x43
    e0d0:	adds	r3, #2
    e0d2:	b.n	e064 <_printf_common+0x58>
    e0d4:	movs	r3, #1
    e0d6:	mov	r2, r4
    e0d8:	mov	r1, r9
    e0da:	mov	r0, r7
    e0dc:	blx	r8
    e0de:	adds	r0, #1
    e0e0:	beq.n	e0b0 <_printf_common+0xa4>
    e0e2:	adds	r6, #1
    e0e4:	b.n	e09a <_printf_common+0x8e>
	...

0000e0e8 <_printf_i>:
    e0e8:	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e0ec:	ldrb	r7, [r1, #24]
    e0ee:	ldr	r5, [sp, #48]	; 0x30
    e0f0:	cmp	r7, #120	; 0x78
    e0f2:	mov	r9, r2
    e0f4:	mov	r8, r0
    e0f6:	mov	r4, r1
    e0f8:	mov	sl, r3
    e0fa:	add.w	r2, r1, #67	; 0x43
    e0fe:	bhi.n	e110 <_printf_i+0x28>
    e100:	cmp	r7, #98	; 0x62
    e102:	bhi.n	e11a <_printf_i+0x32>
    e104:	cmp	r7, #0
    e106:	beq.w	e2b2 <_printf_i+0x1ca>
    e10a:	cmp	r7, #88	; 0x58
    e10c:	beq.w	e290 <_printf_i+0x1a8>
    e110:	add.w	r5, r4, #66	; 0x42
    e114:	strb.w	r7, [r4, #66]	; 0x42
    e118:	b.n	e190 <_printf_i+0xa8>
    e11a:	sub.w	r3, r7, #99	; 0x63
    e11e:	cmp	r3, #21
    e120:	bhi.n	e110 <_printf_i+0x28>
    e122:	add	r1, pc, #4	; (adr r1, e128 <_printf_i+0x40>)
    e124:	ldr.w	pc, [r1, r3, lsl #2]
    e128:	.word	0x0000e181
    e12c:	.word	0x0000e195
    e130:	.word	0x0000e111
    e134:	.word	0x0000e111
    e138:	.word	0x0000e111
    e13c:	.word	0x0000e111
    e140:	.word	0x0000e195
    e144:	.word	0x0000e111
    e148:	.word	0x0000e111
    e14c:	.word	0x0000e111
    e150:	.word	0x0000e111
    e154:	.word	0x0000e299
    e158:	.word	0x0000e1c1
    e15c:	.word	0x0000e253
    e160:	.word	0x0000e111
    e164:	.word	0x0000e111
    e168:	.word	0x0000e2bb
    e16c:	.word	0x0000e111
    e170:	.word	0x0000e1c1
    e174:	.word	0x0000e111
    e178:	.word	0x0000e111
    e17c:	.word	0x0000e25b
    e180:	ldr	r3, [r5, #0]
    e182:	adds	r2, r3, #4
    e184:	ldr	r3, [r3, #0]
    e186:	str	r2, [r5, #0]
    e188:	add.w	r5, r4, #66	; 0x42
    e18c:	strb.w	r3, [r4, #66]	; 0x42
    e190:	movs	r3, #1
    e192:	b.n	e2d4 <_printf_i+0x1ec>
    e194:	ldr	r0, [r4, #0]
    e196:	ldr	r3, [r5, #0]
    e198:	lsls	r7, r0, #24
    e19a:	add.w	r1, r3, #4
    e19e:	str	r1, [r5, #0]
    e1a0:	bpl.n	e1a6 <_printf_i+0xbe>
    e1a2:	ldr	r6, [r3, #0]
    e1a4:	b.n	e1ae <_printf_i+0xc6>
    e1a6:	lsls	r6, r0, #25
    e1a8:	bpl.n	e1a2 <_printf_i+0xba>
    e1aa:	ldrsh.w	r6, [r3]
    e1ae:	cmp	r6, #0
    e1b0:	bge.n	e1ba <_printf_i+0xd2>
    e1b2:	movs	r3, #45	; 0x2d
    e1b4:	negs	r6, r6
    e1b6:	strb.w	r3, [r4, #67]	; 0x43
    e1ba:	ldr	r0, [pc, #360]	; (e324 <_printf_i+0x23c>)
    e1bc:	movs	r3, #10
    e1be:	b.n	e1e6 <_printf_i+0xfe>
    e1c0:	ldr	r3, [r5, #0]
    e1c2:	ldr	r0, [r4, #0]
    e1c4:	adds	r1, r3, #4
    e1c6:	str	r1, [r5, #0]
    e1c8:	lsls	r5, r0, #24
    e1ca:	bpl.n	e1d0 <_printf_i+0xe8>
    e1cc:	ldr	r6, [r3, #0]
    e1ce:	b.n	e1d6 <_printf_i+0xee>
    e1d0:	lsls	r1, r0, #25
    e1d2:	bpl.n	e1cc <_printf_i+0xe4>
    e1d4:	ldrh	r6, [r3, #0]
    e1d6:	ldr	r0, [pc, #332]	; (e324 <_printf_i+0x23c>)
    e1d8:	cmp	r7, #111	; 0x6f
    e1da:	ite	eq
    e1dc:	moveq	r3, #8
    e1de:	movne	r3, #10
    e1e0:	movs	r1, #0
    e1e2:	strb.w	r1, [r4, #67]	; 0x43
    e1e6:	ldr	r5, [r4, #4]
    e1e8:	str	r5, [r4, #8]
    e1ea:	cmp	r5, #0
    e1ec:	ittt	ge
    e1ee:	ldrge	r1, [r4, #0]
    e1f0:	bicge.w	r1, r1, #4
    e1f4:	strge	r1, [r4, #0]
    e1f6:	cbnz	r6, e1fc <_printf_i+0x114>
    e1f8:	cmp	r5, #0
    e1fa:	beq.n	e294 <_printf_i+0x1ac>
    e1fc:	mov	r5, r2
    e1fe:	udiv	r1, r6, r3
    e202:	mls	r7, r3, r1, r6
    e206:	ldrb	r7, [r0, r7]
    e208:	strb.w	r7, [r5, #-1]!
    e20c:	mov	r7, r6
    e20e:	cmp	r3, r7
    e210:	mov	r6, r1
    e212:	bls.n	e1fe <_printf_i+0x116>
    e214:	cmp	r3, #8
    e216:	bne.n	e230 <_printf_i+0x148>
    e218:	ldr	r3, [r4, #0]
    e21a:	lsls	r6, r3, #31
    e21c:	bpl.n	e230 <_printf_i+0x148>
    e21e:	ldr	r3, [r4, #16]
    e220:	ldr	r1, [r4, #4]
    e222:	cmp	r1, r3
    e224:	ittt	le
    e226:	movle	r3, #48	; 0x30
    e228:	strble.w	r3, [r5, #-1]
    e22c:	addle.w	r5, r5, #4294967295
    e230:	subs	r2, r2, r5
    e232:	str	r2, [r4, #16]
    e234:	str.w	sl, [sp]
    e238:	mov	r3, r9
    e23a:	add	r2, sp, #12
    e23c:	mov	r1, r4
    e23e:	mov	r0, r8
    e240:	bl	e00c <_printf_common>
    e244:	adds	r0, #1
    e246:	bne.n	e2de <_printf_i+0x1f6>
    e248:	mov.w	r0, #4294967295
    e24c:	add	sp, #16
    e24e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e252:	ldr	r3, [r4, #0]
    e254:	orr.w	r3, r3, #32
    e258:	str	r3, [r4, #0]
    e25a:	ldr	r0, [pc, #204]	; (e328 <_printf_i+0x240>)
    e25c:	movs	r7, #120	; 0x78
    e25e:	strb.w	r7, [r4, #69]	; 0x45
    e262:	ldr	r3, [r4, #0]
    e264:	ldr	r1, [r5, #0]
    e266:	lsls	r7, r3, #24
    e268:	ldr.w	r6, [r1], #4
    e26c:	bmi.n	e274 <_printf_i+0x18c>
    e26e:	lsls	r7, r3, #25
    e270:	it	mi
    e272:	uxthmi	r6, r6
    e274:	lsls	r7, r3, #31
    e276:	it	mi
    e278:	orrmi.w	r3, r3, #32
    e27c:	str	r1, [r5, #0]
    e27e:	it	mi
    e280:	strmi	r3, [r4, #0]
    e282:	cbnz	r6, e28c <_printf_i+0x1a4>
    e284:	ldr	r3, [r4, #0]
    e286:	bic.w	r3, r3, #32
    e28a:	str	r3, [r4, #0]
    e28c:	movs	r3, #16
    e28e:	b.n	e1e0 <_printf_i+0xf8>
    e290:	ldr	r0, [pc, #144]	; (e324 <_printf_i+0x23c>)
    e292:	b.n	e25e <_printf_i+0x176>
    e294:	mov	r5, r2
    e296:	b.n	e214 <_printf_i+0x12c>
    e298:	ldr	r3, [r5, #0]
    e29a:	ldr	r6, [r4, #0]
    e29c:	ldr	r1, [r4, #20]
    e29e:	adds	r0, r3, #4
    e2a0:	str	r0, [r5, #0]
    e2a2:	lsls	r5, r6, #24
    e2a4:	ldr	r3, [r3, #0]
    e2a6:	bpl.n	e2ac <_printf_i+0x1c4>
    e2a8:	str	r1, [r3, #0]
    e2aa:	b.n	e2b2 <_printf_i+0x1ca>
    e2ac:	lsls	r0, r6, #25
    e2ae:	bpl.n	e2a8 <_printf_i+0x1c0>
    e2b0:	strh	r1, [r3, #0]
    e2b2:	movs	r3, #0
    e2b4:	str	r3, [r4, #16]
    e2b6:	mov	r5, r2
    e2b8:	b.n	e234 <_printf_i+0x14c>
    e2ba:	ldr	r3, [r5, #0]
    e2bc:	adds	r2, r3, #4
    e2be:	str	r2, [r5, #0]
    e2c0:	ldr	r5, [r3, #0]
    e2c2:	ldr	r2, [r4, #4]
    e2c4:	movs	r1, #0
    e2c6:	mov	r0, r5
    e2c8:	bl	ecf0 <memchr>
    e2cc:	cbz	r0, e2d2 <_printf_i+0x1ea>
    e2ce:	subs	r0, r0, r5
    e2d0:	str	r0, [r4, #4]
    e2d2:	ldr	r3, [r4, #4]
    e2d4:	str	r3, [r4, #16]
    e2d6:	movs	r3, #0
    e2d8:	strb.w	r3, [r4, #67]	; 0x43
    e2dc:	b.n	e234 <_printf_i+0x14c>
    e2de:	ldr	r3, [r4, #16]
    e2e0:	mov	r2, r5
    e2e2:	mov	r1, r9
    e2e4:	mov	r0, r8
    e2e6:	blx	sl
    e2e8:	adds	r0, #1
    e2ea:	beq.n	e248 <_printf_i+0x160>
    e2ec:	ldr	r3, [r4, #0]
    e2ee:	lsls	r3, r3, #30
    e2f0:	bmi.n	e31a <_printf_i+0x232>
    e2f2:	ldr	r0, [r4, #12]
    e2f4:	ldr	r3, [sp, #12]
    e2f6:	cmp	r0, r3
    e2f8:	it	lt
    e2fa:	movlt	r0, r3
    e2fc:	b.n	e24c <_printf_i+0x164>
    e2fe:	movs	r3, #1
    e300:	mov	r2, r6
    e302:	mov	r1, r9
    e304:	mov	r0, r8
    e306:	blx	sl
    e308:	adds	r0, #1
    e30a:	beq.n	e248 <_printf_i+0x160>
    e30c:	adds	r5, #1
    e30e:	ldr	r3, [r4, #12]
    e310:	ldr	r1, [sp, #12]
    e312:	subs	r3, r3, r1
    e314:	cmp	r3, r5
    e316:	bgt.n	e2fe <_printf_i+0x216>
    e318:	b.n	e2f2 <_printf_i+0x20a>
    e31a:	movs	r5, #0
    e31c:	add.w	r6, r4, #25
    e320:	b.n	e30e <_printf_i+0x226>
    e322:	nop
    e324:	.word	0x200013e2
    e328:	.word	0x200013f3

0000e32c <_scanf_float>:
    e32c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e330:	sub	sp, #28
    e332:	mov	r7, r2
    e334:	str	r3, [sp, #12]
    e336:	ldr	r3, [r1, #8]
    e338:	subs	r2, r3, #1
    e33a:	cmp.w	r2, #348	; 0x15c
    e33e:	ittte	hi
    e340:	mvnhi.w	r5, #348	; 0x15c
    e344:	addhi	r3, r3, r5
    e346:	strhi	r3, [sp, #8]
    e348:	movls	r3, #0
    e34a:	itte	hi
    e34c:	movwhi	r3, #349	; 0x15d
    e350:	strhi	r3, [r1, #8]
    e352:	strls	r3, [sp, #8]
    e354:	ldr	r3, [r1, #0]
    e356:	mov	fp, r1
    e358:	movs	r5, #0
    e35a:	orr.w	r3, r3, #1920	; 0x780
    e35e:	str.w	r3, [fp], #28
    e362:	strd	r5, r5, [sp, #16]
    e366:	mov	r8, r0
    e368:	mov	r4, r1
    e36a:	mov	r6, fp
    e36c:	mov	sl, r5
    e36e:	mov	r9, r5
    e370:	str	r5, [sp, #4]
    e372:	ldr	r2, [r4, #8]
    e374:	cbz	r2, e38c <_scanf_float+0x60>
    e376:	ldr	r3, [r7, #0]
    e378:	ldrb	r3, [r3, #0]
    e37a:	cmp	r3, #78	; 0x4e
    e37c:	bhi.n	e448 <_scanf_float+0x11c>
    e37e:	cmp	r3, #64	; 0x40
    e380:	bhi.n	e3fc <_scanf_float+0xd0>
    e382:	sub.w	r1, r3, #43	; 0x2b
    e386:	uxtb	r0, r1
    e388:	cmp	r0, #14
    e38a:	bls.n	e402 <_scanf_float+0xd6>
    e38c:	cmp.w	r9, #0
    e390:	beq.n	e39a <_scanf_float+0x6e>
    e392:	ldr	r3, [r4, #0]
    e394:	bic.w	r3, r3, #256	; 0x100
    e398:	str	r3, [r4, #0]
    e39a:	add.w	sl, sl, #4294967295
    e39e:	cmp.w	sl, #1
    e3a2:	bhi.w	e5cc <_scanf_float+0x2a0>
    e3a6:	cmp	r6, fp
    e3a8:	bhi.w	e5b6 <_scanf_float+0x28a>
    e3ac:	movs	r5, #1
    e3ae:	mov	r0, r5
    e3b0:	add	sp, #28
    e3b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3b6:	sub.w	r2, r3, #97	; 0x61
    e3ba:	cmp	r2, #13
    e3bc:	bhi.n	e38c <_scanf_float+0x60>
    e3be:	add	r1, pc, #4	; (adr r1, e3c4 <_scanf_float+0x98>)
    e3c0:	ldr.w	pc, [r1, r2, lsl #2]
    e3c4:	.word	0x0000e503
    e3c8:	.word	0x0000e38d
    e3cc:	.word	0x0000e38d
    e3d0:	.word	0x0000e38d
    e3d4:	.word	0x0000e563
    e3d8:	.word	0x0000e53b
    e3dc:	.word	0x0000e38d
    e3e0:	.word	0x0000e38d
    e3e4:	.word	0x0000e511
    e3e8:	.word	0x0000e38d
    e3ec:	.word	0x0000e38d
    e3f0:	.word	0x0000e38d
    e3f4:	.word	0x0000e38d
    e3f8:	.word	0x0000e4c9
    e3fc:	sub.w	r2, r3, #65	; 0x41
    e400:	b.n	e3ba <_scanf_float+0x8e>
    e402:	cmp	r1, #14
    e404:	bhi.n	e38c <_scanf_float+0x60>
    e406:	add	r0, pc, #4	; (adr r0, e40c <_scanf_float+0xe0>)
    e408:	ldr.w	pc, [r0, r1, lsl #2]
    e40c:	.word	0x0000e4bb
    e410:	.word	0x0000e38d
    e414:	.word	0x0000e4bb
    e418:	.word	0x0000e54f
    e41c:	.word	0x0000e38d
    e420:	.word	0x0000e469
    e424:	.word	0x0000e4a5
    e428:	.word	0x0000e4a5
    e42c:	.word	0x0000e4a5
    e430:	.word	0x0000e4a5
    e434:	.word	0x0000e4a5
    e438:	.word	0x0000e4a5
    e43c:	.word	0x0000e4a5
    e440:	.word	0x0000e4a5
    e444:	.word	0x0000e4a5
    e448:	cmp	r3, #110	; 0x6e
    e44a:	bhi.n	e460 <_scanf_float+0x134>
    e44c:	cmp	r3, #96	; 0x60
    e44e:	bhi.n	e3b6 <_scanf_float+0x8a>
    e450:	cmp	r3, #84	; 0x54
    e452:	beq.n	e544 <_scanf_float+0x218>
    e454:	cmp	r3, #89	; 0x59
    e456:	bne.n	e38c <_scanf_float+0x60>
    e458:	cmp	r5, #7
    e45a:	bne.n	e38c <_scanf_float+0x60>
    e45c:	movs	r5, #8
    e45e:	b.n	e4b4 <_scanf_float+0x188>
    e460:	cmp	r3, #116	; 0x74
    e462:	beq.n	e544 <_scanf_float+0x218>
    e464:	cmp	r3, #121	; 0x79
    e466:	b.n	e456 <_scanf_float+0x12a>
    e468:	ldr	r1, [r4, #0]
    e46a:	lsls	r0, r1, #23
    e46c:	bpl.n	e4a4 <_scanf_float+0x178>
    e46e:	ldr	r3, [sp, #8]
    e470:	bic.w	r1, r1, #128	; 0x80
    e474:	str	r1, [r4, #0]
    e476:	add.w	r9, r9, #1
    e47a:	cbz	r3, e484 <_scanf_float+0x158>
    e47c:	subs	r3, #1
    e47e:	adds	r2, #1
    e480:	str	r3, [sp, #8]
    e482:	str	r2, [r4, #8]
    e484:	ldr	r3, [r4, #8]
    e486:	subs	r3, #1
    e488:	str	r3, [r4, #8]
    e48a:	ldr	r3, [r4, #16]
    e48c:	adds	r3, #1
    e48e:	str	r3, [r4, #16]
    e490:	ldr	r3, [r7, #4]
    e492:	subs	r3, #1
    e494:	cmp	r3, #0
    e496:	str	r3, [r7, #4]
    e498:	ble.w	e5a4 <_scanf_float+0x278>
    e49c:	ldr	r3, [r7, #0]
    e49e:	adds	r3, #1
    e4a0:	str	r3, [r7, #0]
    e4a2:	b.n	e372 <_scanf_float+0x46>
    e4a4:	cmn.w	sl, r5
    e4a8:	bne.w	e38c <_scanf_float+0x60>
    e4ac:	ldr	r2, [r4, #0]
    e4ae:	bic.w	r2, r2, #384	; 0x180
    e4b2:	str	r2, [r4, #0]
    e4b4:	strb.w	r3, [r6], #1
    e4b8:	b.n	e484 <_scanf_float+0x158>
    e4ba:	ldr	r2, [r4, #0]
    e4bc:	lsls	r0, r2, #24
    e4be:	bpl.w	e38c <_scanf_float+0x60>
    e4c2:	bic.w	r2, r2, #128	; 0x80
    e4c6:	b.n	e4b2 <_scanf_float+0x186>
    e4c8:	cmp.w	sl, #0
    e4cc:	bne.n	e4ec <_scanf_float+0x1c0>
    e4ce:	cmp.w	r9, #0
    e4d2:	bne.n	e4f2 <_scanf_float+0x1c6>
    e4d4:	ldr	r2, [r4, #0]
    e4d6:	and.w	r1, r2, #1792	; 0x700
    e4da:	cmp.w	r1, #1792	; 0x700
    e4de:	bne.n	e4f2 <_scanf_float+0x1c6>
    e4e0:	bic.w	r2, r2, #1920	; 0x780
    e4e4:	str	r2, [r4, #0]
    e4e6:	mov.w	sl, #1
    e4ea:	b.n	e4b4 <_scanf_float+0x188>
    e4ec:	cmp.w	sl, #2
    e4f0:	beq.n	e59e <_scanf_float+0x272>
    e4f2:	cmp	r5, #1
    e4f4:	beq.n	e4fc <_scanf_float+0x1d0>
    e4f6:	cmp	r5, #4
    e4f8:	bne.w	e38c <_scanf_float+0x60>
    e4fc:	adds	r5, #1
    e4fe:	uxtb	r5, r5
    e500:	b.n	e4b4 <_scanf_float+0x188>
    e502:	cmp.w	sl, #1
    e506:	bne.w	e38c <_scanf_float+0x60>
    e50a:	mov.w	sl, #2
    e50e:	b.n	e4b4 <_scanf_float+0x188>
    e510:	cbnz	r5, e532 <_scanf_float+0x206>
    e512:	cmp.w	r9, #0
    e516:	bne.w	e392 <_scanf_float+0x66>
    e51a:	ldr	r2, [r4, #0]
    e51c:	and.w	r1, r2, #1792	; 0x700
    e520:	cmp.w	r1, #1792	; 0x700
    e524:	bne.w	e39a <_scanf_float+0x6e>
    e528:	bic.w	r2, r2, #1920	; 0x780
    e52c:	str	r2, [r4, #0]
    e52e:	movs	r5, #1
    e530:	b.n	e4b4 <_scanf_float+0x188>
    e532:	cmp	r5, #3
    e534:	beq.n	e4fc <_scanf_float+0x1d0>
    e536:	cmp	r5, #5
    e538:	b.n	e4f8 <_scanf_float+0x1cc>
    e53a:	cmp	r5, #2
    e53c:	bne.w	e38c <_scanf_float+0x60>
    e540:	movs	r5, #3
    e542:	b.n	e4b4 <_scanf_float+0x188>
    e544:	cmp	r5, #6
    e546:	bne.w	e38c <_scanf_float+0x60>
    e54a:	movs	r5, #7
    e54c:	b.n	e4b4 <_scanf_float+0x188>
    e54e:	ldr	r2, [r4, #0]
    e550:	lsls	r1, r2, #22
    e552:	bpl.w	e38c <_scanf_float+0x60>
    e556:	bic.w	r2, r2, #640	; 0x280
    e55a:	str	r2, [r4, #0]
    e55c:	str.w	r9, [sp, #4]
    e560:	b.n	e4b4 <_scanf_float+0x188>
    e562:	ldr	r2, [r4, #0]
    e564:	and.w	r1, r2, #1280	; 0x500
    e568:	cmp.w	r1, #1024	; 0x400
    e56c:	beq.n	e57c <_scanf_float+0x250>
    e56e:	lsls	r0, r2, #21
    e570:	bpl.w	e38c <_scanf_float+0x60>
    e574:	cmp.w	r9, #0
    e578:	beq.w	e39a <_scanf_float+0x6e>
    e57c:	lsls	r1, r2, #22
    e57e:	it	pl
    e580:	ldrpl	r1, [sp, #4]
    e582:	bic.w	r2, r2, #1920	; 0x780
    e586:	it	pl
    e588:	subpl.w	r1, r9, r1
    e58c:	orr.w	r2, r2, #384	; 0x180
    e590:	it	pl
    e592:	strdpl	r1, r6, [sp, #16]
    e596:	str	r2, [r4, #0]
    e598:	mov.w	r9, #0
    e59c:	b.n	e4b4 <_scanf_float+0x188>
    e59e:	mov.w	sl, #3
    e5a2:	b.n	e4b4 <_scanf_float+0x188>
    e5a4:	ldr.w	r3, [r4, #384]	; 0x180
    e5a8:	mov	r1, r7
    e5aa:	mov	r0, r8
    e5ac:	blx	r3
    e5ae:	cmp	r0, #0
    e5b0:	beq.w	e372 <_scanf_float+0x46>
    e5b4:	b.n	e38c <_scanf_float+0x60>
    e5b6:	ldr.w	r3, [r4, #380]	; 0x17c
    e5ba:	ldrb.w	r1, [r6, #-1]!
    e5be:	mov	r2, r7
    e5c0:	mov	r0, r8
    e5c2:	blx	r3
    e5c4:	ldr	r3, [r4, #16]
    e5c6:	subs	r3, #1
    e5c8:	str	r3, [r4, #16]
    e5ca:	b.n	e3a6 <_scanf_float+0x7a>
    e5cc:	subs	r3, r5, #1
    e5ce:	cmp	r3, #6
    e5d0:	bhi.n	e61e <_scanf_float+0x2f2>
    e5d2:	cmp	r5, #2
    e5d4:	bhi.n	e644 <_scanf_float+0x318>
    e5d6:	cmp	r6, fp
    e5d8:	bls.w	e3ac <_scanf_float+0x80>
    e5dc:	ldr.w	r3, [r4, #380]	; 0x17c
    e5e0:	ldrb.w	r1, [r6, #-1]!
    e5e4:	mov	r2, r7
    e5e6:	mov	r0, r8
    e5e8:	blx	r3
    e5ea:	ldr	r3, [r4, #16]
    e5ec:	subs	r3, #1
    e5ee:	str	r3, [r4, #16]
    e5f0:	b.n	e5d6 <_scanf_float+0x2aa>
    e5f2:	ldr	r0, [sp, #8]
    e5f4:	ldr.w	r3, [r4, #380]	; 0x17c
    e5f8:	ldrb.w	r1, [r0, #-1]!
    e5fc:	str	r0, [sp, #8]
    e5fe:	mov	r2, r7
    e600:	mov	r0, r8
    e602:	blx	r3
    e604:	ldr	r3, [r4, #16]
    e606:	subs	r3, #1
    e608:	str	r3, [r4, #16]
    e60a:	add.w	sl, sl, #4294967295
    e60e:	uxtb.w	sl, sl
    e612:	cmp.w	sl, #2
    e616:	bne.n	e5f2 <_scanf_float+0x2c6>
    e618:	subs	r5, #3
    e61a:	uxtb	r5, r5
    e61c:	subs	r6, r6, r5
    e61e:	ldr	r3, [r4, #0]
    e620:	lsls	r2, r3, #23
    e622:	bpl.n	e684 <_scanf_float+0x358>
    e624:	lsls	r3, r3, #21
    e626:	bpl.n	e64a <_scanf_float+0x31e>
    e628:	cmp	r6, fp
    e62a:	bls.w	e3ac <_scanf_float+0x80>
    e62e:	ldr.w	r3, [r4, #380]	; 0x17c
    e632:	ldrb.w	r1, [r6, #-1]!
    e636:	mov	r2, r7
    e638:	mov	r0, r8
    e63a:	blx	r3
    e63c:	ldr	r3, [r4, #16]
    e63e:	subs	r3, #1
    e640:	str	r3, [r4, #16]
    e642:	b.n	e628 <_scanf_float+0x2fc>
    e644:	mov	sl, r5
    e646:	str	r6, [sp, #8]
    e648:	b.n	e60a <_scanf_float+0x2de>
    e64a:	ldrb.w	r1, [r6, #-1]
    e64e:	ldr	r3, [r4, #16]
    e650:	cmp	r1, #101	; 0x65
    e652:	add.w	r3, r3, #4294967295
    e656:	add.w	r5, r6, #4294967295
    e65a:	str	r3, [r4, #16]
    e65c:	beq.n	e678 <_scanf_float+0x34c>
    e65e:	cmp	r1, #69	; 0x45
    e660:	beq.n	e678 <_scanf_float+0x34c>
    e662:	ldr.w	r3, [r4, #380]	; 0x17c
    e666:	mov	r2, r7
    e668:	mov	r0, r8
    e66a:	blx	r3
    e66c:	ldr	r3, [r4, #16]
    e66e:	ldrb.w	r1, [r6, #-2]
    e672:	subs	r3, #1
    e674:	subs	r5, r6, #2
    e676:	str	r3, [r4, #16]
    e678:	ldr.w	r3, [r4, #380]	; 0x17c
    e67c:	mov	r2, r7
    e67e:	mov	r0, r8
    e680:	blx	r3
    e682:	mov	r6, r5
    e684:	ldr	r5, [r4, #0]
    e686:	ands.w	r5, r5, #16
    e68a:	bne.n	e728 <_scanf_float+0x3fc>
    e68c:	strb	r5, [r6, #0]
    e68e:	ldr	r3, [r4, #0]
    e690:	and.w	r3, r3, #1536	; 0x600
    e694:	cmp.w	r3, #1024	; 0x400
    e698:	bne.n	e6d0 <_scanf_float+0x3a4>
    e69a:	ldr	r3, [sp, #4]
    e69c:	cmp	r3, r9
    e69e:	sub.w	r2, r3, r9
    e6a2:	bne.n	e6ea <_scanf_float+0x3be>
    e6a4:	movs	r2, #0
    e6a6:	mov	r1, fp
    e6a8:	mov	r0, r8
    e6aa:	bl	d974 <_strtod_r>
    e6ae:	ldr	r3, [sp, #12]
    e6b0:	ldr	r1, [r4, #0]
    e6b2:	ldr	r3, [r3, #0]
    e6b4:	tst.w	r1, #2
    e6b8:	add.w	r2, r3, #4
    e6bc:	beq.n	e700 <_scanf_float+0x3d4>
    e6be:	ldr	r1, [sp, #12]
    e6c0:	str	r2, [r1, #0]
    e6c2:	ldr	r3, [r3, #0]
    e6c4:	vstr	d0, [r3]
    e6c8:	ldr	r3, [r4, #12]
    e6ca:	adds	r3, #1
    e6cc:	str	r3, [r4, #12]
    e6ce:	b.n	e3ae <_scanf_float+0x82>
    e6d0:	ldr	r3, [sp, #16]
    e6d2:	cmp	r3, #0
    e6d4:	beq.n	e6a4 <_scanf_float+0x378>
    e6d6:	ldr	r1, [sp, #20]
    e6d8:	movs	r3, #10
    e6da:	mov	r2, r5
    e6dc:	adds	r1, #1
    e6de:	mov	r0, r8
    e6e0:	bl	da84 <_strtol_r>
    e6e4:	ldr	r3, [sp, #16]
    e6e6:	ldr	r6, [sp, #20]
    e6e8:	subs	r2, r0, r3
    e6ea:	addw	r3, r4, #367	; 0x16f
    e6ee:	cmp	r6, r3
    e6f0:	it	cs
    e6f2:	addcs.w	r6, r4, #366	; 0x16e
    e6f6:	ldr	r1, [pc, #52]	; (e72c <_scanf_float+0x400>)
    e6f8:	mov	r0, r6
    e6fa:	bl	e8fc <siprintf>
    e6fe:	b.n	e6a4 <_scanf_float+0x378>
    e700:	tst.w	r1, #4
    e704:	ldr	r1, [sp, #12]
    e706:	str	r2, [r1, #0]
    e708:	bne.n	e6c2 <_scanf_float+0x396>
    e70a:	vcmp.f64	d0, d0
    e70e:	vmrs	APSR_nzcv, fpscr
    e712:	ldr	r6, [r3, #0]
    e714:	bvc.n	e722 <_scanf_float+0x3f6>
    e716:	ldr	r0, [pc, #24]	; (e730 <_scanf_float+0x404>)
    e718:	bl	edb0 <nanf>
    e71c:	vstr	s0, [r6]
    e720:	b.n	e6c8 <_scanf_float+0x39c>
    e722:	vcvt.f32.f64	s0, d0
    e726:	b.n	e71c <_scanf_float+0x3f0>
    e728:	movs	r5, #0
    e72a:	b.n	e3ae <_scanf_float+0x82>
    e72c:	.word	0x20001404
    e730:	.word	0x20000dbc

0000e734 <std>:
    e734:	movs	r3, #0
    e736:	push	{r4, lr}
    e738:	mov	r4, r0
    e73a:	strd	r3, r3, [r0]
    e73e:	strd	r3, r3, [r0, #16]
    e742:	str	r3, [r0, #8]
    e744:	strh	r1, [r0, #12]
    e746:	str	r3, [r0, #100]	; 0x64
    e748:	strh	r2, [r0, #14]
    e74a:	str	r3, [r0, #24]
    e74c:	mov	r1, r3
    e74e:	movs	r2, #8
    e750:	adds	r0, #92	; 0x5c
    e752:	bl	a1d4 <memset>
    e756:	ldr	r3, [pc, #20]	; (e76c <std+0x38>)
    e758:	str	r3, [r4, #36]	; 0x24
    e75a:	ldr	r3, [pc, #20]	; (e770 <std+0x3c>)
    e75c:	str	r3, [r4, #40]	; 0x28
    e75e:	ldr	r3, [pc, #20]	; (e774 <std+0x40>)
    e760:	str	r3, [r4, #44]	; 0x2c
    e762:	ldr	r3, [pc, #20]	; (e778 <std+0x44>)
    e764:	str	r4, [r4, #32]
    e766:	str	r3, [r4, #48]	; 0x30
    e768:	pop	{r4, pc}
    e76a:	nop
    e76c:	.word	0x0000e995
    e770:	.word	0x0000e9bb
    e774:	.word	0x0000e9f3
    e778:	.word	0x0000ea17

0000e77c <stdio_exit_handler>:
    e77c:	ldr	r2, [pc, #8]	; (e788 <stdio_exit_handler+0xc>)
    e77e:	ldr	r1, [pc, #12]	; (e78c <stdio_exit_handler+0x10>)
    e780:	ldr	r0, [pc, #12]	; (e790 <stdio_exit_handler+0x14>)
    e782:	b.w	e858 <_fwalk_sglue>
    e786:	nop
    e788:	.word	0x20002278
    e78c:	.word	0x00011525
    e790:	.word	0x20002284

0000e794 <cleanup_stdio>:
    e794:	ldr	r1, [r0, #4]
    e796:	ldr	r3, [pc, #48]	; (e7c8 <cleanup_stdio+0x34>)
    e798:	cmp	r1, r3
    e79a:	push	{r4, lr}
    e79c:	mov	r4, r0
    e79e:	beq.n	e7a4 <cleanup_stdio+0x10>
    e7a0:	bl	11524 <_fflush_r>
    e7a4:	ldr	r1, [r4, #8]
    e7a6:	ldr	r3, [pc, #36]	; (e7cc <cleanup_stdio+0x38>)
    e7a8:	cmp	r1, r3
    e7aa:	beq.n	e7b2 <cleanup_stdio+0x1e>
    e7ac:	mov	r0, r4
    e7ae:	bl	11524 <_fflush_r>
    e7b2:	ldr	r1, [r4, #12]
    e7b4:	ldr	r3, [pc, #24]	; (e7d0 <cleanup_stdio+0x3c>)
    e7b6:	cmp	r1, r3
    e7b8:	beq.n	e7c4 <cleanup_stdio+0x30>
    e7ba:	mov	r0, r4
    e7bc:	ldmia.w	sp!, {r4, lr}
    e7c0:	b.w	11524 <_fflush_r>
    e7c4:	pop	{r4, pc}
    e7c6:	nop
    e7c8:	.word	0x2001485c
    e7cc:	.word	0x200148c4
    e7d0:	.word	0x2001492c

0000e7d4 <global_stdio_init.part.0>:
    e7d4:	push	{r4, lr}
    e7d6:	ldr	r3, [pc, #44]	; (e804 <global_stdio_init.part.0+0x30>)
    e7d8:	ldr	r4, [pc, #44]	; (e808 <global_stdio_init.part.0+0x34>)
    e7da:	ldr	r2, [pc, #48]	; (e80c <global_stdio_init.part.0+0x38>)
    e7dc:	str	r2, [r3, #0]
    e7de:	mov	r0, r4
    e7e0:	movs	r2, #0
    e7e2:	movs	r1, #4
    e7e4:	bl	e734 <std>
    e7e8:	add.w	r0, r4, #104	; 0x68
    e7ec:	movs	r2, #1
    e7ee:	movs	r1, #9
    e7f0:	bl	e734 <std>
    e7f4:	add.w	r0, r4, #208	; 0xd0
    e7f8:	movs	r2, #2
    e7fa:	ldmia.w	sp!, {r4, lr}
    e7fe:	movs	r1, #18
    e800:	b.w	e734 <std>
    e804:	.word	0x20014994
    e808:	.word	0x2001485c
    e80c:	.word	0x0000e77d

0000e810 <__sfp_lock_acquire>:
    e810:	ldr	r0, [pc, #4]	; (e818 <__sfp_lock_acquire+0x8>)
    e812:	b.w	ecd8 <__retarget_lock_acquire_recursive>
    e816:	nop
    e818:	.word	0x200155b1

0000e81c <__sfp_lock_release>:
    e81c:	ldr	r0, [pc, #4]	; (e824 <__sfp_lock_release+0x8>)
    e81e:	b.w	ecda <__retarget_lock_release_recursive>
    e822:	nop
    e824:	.word	0x200155b1

0000e828 <__sinit>:
    e828:	push	{r4, lr}
    e82a:	mov	r4, r0
    e82c:	bl	e810 <__sfp_lock_acquire>
    e830:	ldr	r3, [r4, #32]
    e832:	cbz	r3, e83c <__sinit+0x14>
    e834:	ldmia.w	sp!, {r4, lr}
    e838:	b.w	e81c <__sfp_lock_release>
    e83c:	ldr	r3, [pc, #16]	; (e850 <__sinit+0x28>)
    e83e:	str	r3, [r4, #32]
    e840:	ldr	r3, [pc, #16]	; (e854 <__sinit+0x2c>)
    e842:	ldr	r3, [r3, #0]
    e844:	cmp	r3, #0
    e846:	bne.n	e834 <__sinit+0xc>
    e848:	bl	e7d4 <global_stdio_init.part.0>
    e84c:	b.n	e834 <__sinit+0xc>
    e84e:	nop
    e850:	.word	0x0000e795
    e854:	.word	0x20014994

0000e858 <_fwalk_sglue>:
    e858:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e85c:	mov	r7, r0
    e85e:	mov	r8, r1
    e860:	mov	r4, r2
    e862:	movs	r6, #0
    e864:	ldrd	r9, r5, [r4, #4]
    e868:	subs.w	r9, r9, #1
    e86c:	bpl.n	e87a <_fwalk_sglue+0x22>
    e86e:	ldr	r4, [r4, #0]
    e870:	cmp	r4, #0
    e872:	bne.n	e864 <_fwalk_sglue+0xc>
    e874:	mov	r0, r6
    e876:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e87a:	ldrh	r3, [r5, #12]
    e87c:	cmp	r3, #1
    e87e:	bls.n	e890 <_fwalk_sglue+0x38>
    e880:	ldrsh.w	r3, [r5, #14]
    e884:	adds	r3, #1
    e886:	beq.n	e890 <_fwalk_sglue+0x38>
    e888:	mov	r1, r5
    e88a:	mov	r0, r7
    e88c:	blx	r8
    e88e:	orrs	r6, r0
    e890:	adds	r5, #104	; 0x68
    e892:	b.n	e868 <_fwalk_sglue+0x10>

0000e894 <sniprintf>:
    e894:	push	{r2, r3}
    e896:	push	{r4, r5, lr}
    e898:	ldr	r3, [pc, #92]	; (e8f8 <sniprintf+0x64>)
    e89a:	subs	r4, r1, #0
    e89c:	ldr	r5, [r3, #0]
    e89e:	sub	sp, #116	; 0x74
    e8a0:	bge.n	e8b4 <sniprintf+0x20>
    e8a2:	movs	r3, #139	; 0x8b
    e8a4:	str	r3, [r5, #0]
    e8a6:	mov.w	r0, #4294967295
    e8aa:	add	sp, #116	; 0x74
    e8ac:	ldmia.w	sp!, {r4, r5, lr}
    e8b0:	add	sp, #8
    e8b2:	bx	lr
    e8b4:	mov.w	r3, #520	; 0x208
    e8b8:	strh.w	r3, [sp, #20]
    e8bc:	ite	ne
    e8be:	addne.w	r3, r4, #4294967295
    e8c2:	moveq	r3, r4
    e8c4:	str	r3, [sp, #16]
    e8c6:	str	r3, [sp, #28]
    e8c8:	movw	r3, #65535	; 0xffff
    e8cc:	str	r0, [sp, #8]
    e8ce:	str	r0, [sp, #24]
    e8d0:	strh.w	r3, [sp, #22]
    e8d4:	ldr	r2, [sp, #128]	; 0x80
    e8d6:	add	r3, sp, #132	; 0x84
    e8d8:	add	r1, sp, #8
    e8da:	mov	r0, r5
    e8dc:	str	r3, [sp, #4]
    e8de:	bl	10bdc <_svfiprintf_r>
    e8e2:	adds	r3, r0, #1
    e8e4:	itt	lt
    e8e6:	movlt	r3, #139	; 0x8b
    e8e8:	strlt	r3, [r5, #0]
    e8ea:	cmp	r4, #0
    e8ec:	beq.n	e8aa <sniprintf+0x16>
    e8ee:	ldr	r3, [sp, #8]
    e8f0:	movs	r2, #0
    e8f2:	strb	r2, [r3, #0]
    e8f4:	b.n	e8aa <sniprintf+0x16>
    e8f6:	nop
    e8f8:	.word	0x200022d0

0000e8fc <siprintf>:
    e8fc:	push	{r1, r2, r3}
    e8fe:	push	{lr}
    e900:	sub	sp, #112	; 0x70
    e902:	add	r3, sp, #116	; 0x74
    e904:	str	r0, [sp, #8]
    e906:	str	r0, [sp, #24]
    e908:	mvn.w	r1, #2147483648	; 0x80000000
    e90c:	ldr	r0, [pc, #36]	; (e934 <siprintf+0x38>)
    e90e:	str	r1, [sp, #28]
    e910:	str	r1, [sp, #16]
    e912:	ldr	r1, [pc, #36]	; (e938 <siprintf+0x3c>)
    e914:	ldr.w	r2, [r3], #4
    e918:	str	r1, [sp, #20]
    e91a:	ldr	r0, [r0, #0]
    e91c:	str	r3, [sp, #4]
    e91e:	add	r1, sp, #8
    e920:	bl	10bdc <_svfiprintf_r>
    e924:	ldr	r3, [sp, #8]
    e926:	movs	r2, #0
    e928:	strb	r2, [r3, #0]
    e92a:	add	sp, #112	; 0x70
    e92c:	ldr.w	lr, [sp], #4
    e930:	add	sp, #12
    e932:	bx	lr
    e934:	.word	0x200022d0
    e938:	.word	0xffff0208

0000e93c <siscanf>:
    e93c:	push	{r1, r2, r3}
    e93e:	push	{r4, lr}
    e940:	sub	sp, #124	; 0x7c
    e942:	add	r4, sp, #132	; 0x84
    e944:	mov.w	r1, #516	; 0x204
    e948:	ldr.w	r2, [r4], #4
    e94c:	str	r2, [sp, #4]
    e94e:	strh.w	r1, [sp, #28]
    e952:	str	r0, [sp, #16]
    e954:	str	r0, [sp, #32]
    e956:	bl	ed90 <strlen>
    e95a:	ldr	r3, [pc, #48]	; (e98c <siscanf+0x50>)
    e95c:	str	r0, [sp, #20]
    e95e:	str	r0, [sp, #36]	; 0x24
    e960:	str	r3, [sp, #52]	; 0x34
    e962:	ldr	r0, [pc, #44]	; (e990 <siscanf+0x54>)
    e964:	ldr	r2, [sp, #4]
    e966:	ldr	r0, [r0, #0]
    e968:	str	r4, [sp, #12]
    e96a:	movs	r3, #0
    e96c:	str	r3, [sp, #68]	; 0x44
    e96e:	str	r3, [sp, #88]	; 0x58
    e970:	movw	r3, #65535	; 0xffff
    e974:	strh.w	r3, [sp, #30]
    e978:	add	r1, sp, #16
    e97a:	mov	r3, r4
    e97c:	bl	10e8c <__ssvfiscanf_r>
    e980:	add	sp, #124	; 0x7c
    e982:	ldmia.w	sp!, {r4, lr}
    e986:	add	sp, #12
    e988:	bx	lr
    e98a:	nop
    e98c:	.word	0x0000e9b7
    e990:	.word	0x200022d0

0000e994 <__sread>:
    e994:	push	{r4, lr}
    e996:	mov	r4, r1
    e998:	ldrsh.w	r1, [r1, #14]
    e99c:	bl	ec1c <_read_r>
    e9a0:	cmp	r0, #0
    e9a2:	itete	ge
    e9a4:	ldrge	r3, [r4, #84]	; 0x54
    e9a6:	ldrhlt	r3, [r4, #12]
    e9a8:	addge	r3, r3, r0
    e9aa:	biclt.w	r3, r3, #4096	; 0x1000
    e9ae:	ite	ge
    e9b0:	strge	r3, [r4, #84]	; 0x54
    e9b2:	strhlt	r3, [r4, #12]
    e9b4:	pop	{r4, pc}

0000e9b6 <__seofread>:
    e9b6:	movs	r0, #0
    e9b8:	bx	lr

0000e9ba <__swrite>:
    e9ba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9be:	mov	r7, r3
    e9c0:	ldrh	r3, [r1, #12]
    e9c2:	lsls	r3, r3, #23
    e9c4:	mov	r5, r0
    e9c6:	mov	r4, r1
    e9c8:	mov	r6, r2
    e9ca:	bpl.n	e9d8 <__swrite+0x1e>
    e9cc:	ldrsh.w	r1, [r1, #14]
    e9d0:	movs	r3, #2
    e9d2:	movs	r2, #0
    e9d4:	bl	ebf8 <_lseek_r>
    e9d8:	ldrh	r3, [r4, #12]
    e9da:	ldrsh.w	r1, [r4, #14]
    e9de:	bic.w	r3, r3, #4096	; 0x1000
    e9e2:	strh	r3, [r4, #12]
    e9e4:	mov	r2, r6
    e9e6:	mov	r3, r7
    e9e8:	mov	r0, r5
    e9ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e9ee:	b.w	ec60 <_write_r>

0000e9f2 <__sseek>:
    e9f2:	push	{r4, lr}
    e9f4:	mov	r4, r1
    e9f6:	ldrsh.w	r1, [r1, #14]
    e9fa:	bl	ebf8 <_lseek_r>
    e9fe:	adds	r3, r0, #1
    ea00:	ldrh	r3, [r4, #12]
    ea02:	itete	ne
    ea04:	strne	r0, [r4, #84]	; 0x54
    ea06:	biceq.w	r3, r3, #4096	; 0x1000
    ea0a:	orrne.w	r3, r3, #4096	; 0x1000
    ea0e:	strheq	r3, [r4, #12]
    ea10:	it	ne
    ea12:	strhne	r3, [r4, #12]
    ea14:	pop	{r4, pc}

0000ea16 <__sclose>:
    ea16:	ldrsh.w	r1, [r1, #14]
    ea1a:	b.w	ebd8 <_close_r>

0000ea1e <_vdiprintf_r>:
    ea1e:	push	{r4, r5, r6, r7, lr}
    ea20:	sub.w	sp, sp, #532	; 0x214
    ea24:	mov	r6, r1
    ea26:	add	r7, sp, #16
    ea28:	mov.w	r1, #512	; 0x200
    ea2c:	str	r1, [sp, #12]
    ea2e:	str	r3, [sp, #0]
    ea30:	mov	r1, r7
    ea32:	mov	r3, r2
    ea34:	add	r2, sp, #12
    ea36:	mov	r5, r0
    ea38:	bl	ea7c <_vasniprintf_r>
    ea3c:	mov	r4, r0
    ea3e:	cbz	r0, ea62 <_vdiprintf_r+0x44>
    ea40:	mov	r2, r0
    ea42:	ldr	r3, [sp, #12]
    ea44:	mov	r1, r6
    ea46:	mov	r0, r5
    ea48:	bl	ec60 <_write_r>
    ea4c:	cmp	r4, r7
    ea4e:	str	r0, [sp, #12]
    ea50:	beq.n	ea5a <_vdiprintf_r+0x3c>
    ea52:	mov	r1, r4
    ea54:	mov	r0, r5
    ea56:	bl	f9a8 <_free_r>
    ea5a:	ldr	r0, [sp, #12]
    ea5c:	add.w	sp, sp, #532	; 0x214
    ea60:	pop	{r4, r5, r6, r7, pc}
    ea62:	mov.w	r0, #4294967295
    ea66:	b.n	ea5c <_vdiprintf_r+0x3e>

0000ea68 <vdiprintf>:
    ea68:	mov	r3, r2
    ea6a:	mov	r2, r1
    ea6c:	mov	r1, r0
    ea6e:	ldr	r0, [pc, #8]	; (ea78 <vdiprintf+0x10>)
    ea70:	ldr	r0, [r0, #0]
    ea72:	b.w	ea1e <_vdiprintf_r>
    ea76:	nop
    ea78:	.word	0x200022d0

0000ea7c <_vasniprintf_r>:
    ea7c:	push	{r4, r5, lr}
    ea7e:	mov	r5, r2
    ea80:	sub	sp, #108	; 0x6c
    ea82:	ldr	r4, [r5, #0]
    ea84:	mov	r2, r3
    ea86:	cbz	r1, eaac <_vasniprintf_r+0x30>
    ea88:	cmp	r4, #0
    ea8a:	itee	ne
    ea8c:	movne.w	r3, #1544	; 0x608
    ea90:	moveq.w	r3, #648	; 0x288
    ea94:	moveq	r1, #0
    ea96:	cmp	r4, #0
    ea98:	strh.w	r3, [sp, #12]
    ea9c:	str	r1, [sp, #0]
    ea9e:	str	r1, [sp, #16]
    eaa0:	bge.n	eab4 <_vasniprintf_r+0x38>
    eaa2:	movs	r3, #139	; 0x8b
    eaa4:	str	r3, [r0, #0]
    eaa6:	movs	r0, #0
    eaa8:	add	sp, #108	; 0x6c
    eaaa:	pop	{r4, r5, pc}
    eaac:	mov.w	r3, #648	; 0x288
    eab0:	mov	r4, r1
    eab2:	b.n	ea96 <_vasniprintf_r+0x1a>
    eab4:	movw	r3, #65535	; 0xffff
    eab8:	strh.w	r3, [sp, #14]
    eabc:	mov	r1, sp
    eabe:	ldr	r3, [sp, #120]	; 0x78
    eac0:	str	r4, [sp, #8]
    eac2:	str	r4, [sp, #20]
    eac4:	bl	10bdc <_svfiprintf_r>
    eac8:	subs	r3, r0, #0
    eaca:	itt	ge
    eacc:	strge	r3, [r5, #0]
    eace:	ldrge	r3, [sp, #0]
    ead0:	mov.w	r0, #0
    ead4:	itt	ge
    ead6:	strbge	r0, [r3, #0]
    ead8:	ldrge	r0, [sp, #16]
    eada:	b.n	eaa8 <_vasniprintf_r+0x2c>

0000eadc <memcmp>:
    eadc:	push	{r4, lr}
    eade:	subs	r1, #1
    eae0:	add	r2, r0
    eae2:	cmp	r0, r2
    eae4:	bne.n	eaea <memcmp+0xe>
    eae6:	movs	r0, #0
    eae8:	b.n	eaf6 <memcmp+0x1a>
    eaea:	ldrb	r3, [r0, #0]
    eaec:	ldrb.w	r4, [r1, #1]!
    eaf0:	cmp	r3, r4
    eaf2:	beq.n	eaf8 <memcmp+0x1c>
    eaf4:	subs	r0, r3, r4
    eaf6:	pop	{r4, pc}
    eaf8:	adds	r0, #1
    eafa:	b.n	eae2 <memcmp+0x6>

0000eafc <memmove>:
    eafc:	cmp	r0, r1
    eafe:	push	{r4, lr}
    eb00:	add.w	r4, r1, r2
    eb04:	bls.n	eb0c <memmove+0x10>
    eb06:	cmp	r4, r0
    eb08:	mov	r3, r4
    eb0a:	bhi.n	eb1c <memmove+0x20>
    eb0c:	subs	r3, r0, #1
    eb0e:	cmp	r1, r4
    eb10:	beq.n	eb24 <memmove+0x28>
    eb12:	ldrb.w	r2, [r1], #1
    eb16:	strb.w	r2, [r3, #1]!
    eb1a:	b.n	eb0e <memmove+0x12>
    eb1c:	add	r2, r0
    eb1e:	mov	r1, r0
    eb20:	cmp	r2, r1
    eb22:	bne.n	eb26 <memmove+0x2a>
    eb24:	pop	{r4, pc}
    eb26:	ldrb.w	r4, [r3, #-1]!
    eb2a:	strb.w	r4, [r2, #-1]!
    eb2e:	b.n	eb20 <memmove+0x24>

0000eb30 <strlcat>:
    eb30:	push	{r4, r5, r6, lr}
    eb32:	mov	r4, r0
    eb34:	adds	r6, r2, r0
    eb36:	cmp	r4, r6
    eb38:	mov	r3, r4
    eb3a:	bne.n	eb4e <strlcat+0x1e>
    eb3c:	subs	r4, r3, r0
    eb3e:	subs	r2, r2, r4
    eb40:	subs	r6, r2, #1
    eb42:	cbnz	r2, eb58 <strlcat+0x28>
    eb44:	mov	r0, r1
    eb46:	bl	ed90 <strlen>
    eb4a:	add	r0, r4
    eb4c:	pop	{r4, r5, r6, pc}
    eb4e:	ldrb	r5, [r3, #0]
    eb50:	adds	r4, #1
    eb52:	cmp	r5, #0
    eb54:	bne.n	eb36 <strlcat+0x6>
    eb56:	b.n	eb3c <strlcat+0xc>
    eb58:	mov	r5, r1
    eb5a:	mov	r2, r5
    eb5c:	ldrb.w	r0, [r5], #1
    eb60:	cbnz	r0, eb6a <strlcat+0x3a>
    eb62:	subs	r2, r2, r1
    eb64:	strb	r0, [r3, #0]
    eb66:	adds	r0, r2, r4
    eb68:	b.n	eb4c <strlcat+0x1c>
    eb6a:	cmp	r6, #0
    eb6c:	beq.n	eb5a <strlcat+0x2a>
    eb6e:	strb.w	r0, [r3], #1
    eb72:	subs	r6, #1
    eb74:	b.n	eb5a <strlcat+0x2a>

0000eb76 <strlcpy>:
    eb76:	push	{r4, lr}
    eb78:	cbz	r2, eba0 <strlcpy+0x2a>
    eb7a:	add	r2, r1
    eb7c:	mov	r3, r1
    eb7e:	mov	r4, r3
    eb80:	adds	r3, #1
    eb82:	cmp	r3, r2
    eb84:	bne.n	eb8e <strlcpy+0x18>
    eb86:	movs	r3, #0
    eb88:	strb	r3, [r0, #0]
    eb8a:	mov	r3, r4
    eb8c:	b.n	eba2 <strlcpy+0x2c>
    eb8e:	ldrb.w	r4, [r3, #-1]
    eb92:	strb.w	r4, [r0], #1
    eb96:	cmp	r4, #0
    eb98:	bne.n	eb7e <strlcpy+0x8>
    eb9a:	subs	r1, r3, r1
    eb9c:	subs	r0, r1, #1
    eb9e:	pop	{r4, pc}
    eba0:	mov	r3, r1
    eba2:	ldrb.w	r2, [r3], #1
    eba6:	cmp	r2, #0
    eba8:	bne.n	eba2 <strlcpy+0x2c>
    ebaa:	b.n	eb9a <strlcpy+0x24>

0000ebac <strncmp>:
    ebac:	push	{r4, lr}
    ebae:	cbz	r2, ebcc <strncmp+0x20>
    ebb0:	subs	r1, #1
    ebb2:	adds	r4, r0, r2
    ebb4:	ldrb.w	r2, [r0], #1
    ebb8:	ldrb.w	r3, [r1, #1]!
    ebbc:	cmp	r2, r3
    ebbe:	bne.n	ebc8 <strncmp+0x1c>
    ebc0:	cmp	r0, r4
    ebc2:	beq.n	ebc8 <strncmp+0x1c>
    ebc4:	cmp	r2, #0
    ebc6:	bne.n	ebb4 <strncmp+0x8>
    ebc8:	subs	r0, r2, r3
    ebca:	pop	{r4, pc}
    ebcc:	mov	r0, r2
    ebce:	b.n	ebca <strncmp+0x1e>

0000ebd0 <_localeconv_r>:
    ebd0:	ldr	r0, [pc, #0]	; (ebd4 <_localeconv_r+0x4>)
    ebd2:	bx	lr
    ebd4:	.word	0x200021fc

0000ebd8 <_close_r>:
    ebd8:	push	{r3, r4, r5, lr}
    ebda:	ldr	r5, [pc, #24]	; (ebf4 <_close_r+0x1c>)
    ebdc:	movs	r3, #0
    ebde:	mov	r4, r0
    ebe0:	mov	r0, r1
    ebe2:	str	r3, [r5, #0]
    ebe4:	bl	b93c <_close>
    ebe8:	adds	r3, r0, #1
    ebea:	bne.n	ebf2 <_close_r+0x1a>
    ebec:	ldr	r3, [r5, #0]
    ebee:	cbz	r3, ebf2 <_close_r+0x1a>
    ebf0:	str	r3, [r4, #0]
    ebf2:	pop	{r3, r4, r5, pc}
    ebf4:	.word	0x20014ba4

0000ebf8 <_lseek_r>:
    ebf8:	push	{r3, r4, r5, lr}
    ebfa:	ldr	r5, [pc, #28]	; (ec18 <_lseek_r+0x20>)
    ebfc:	mov	r4, r0
    ebfe:	mov	r0, r1
    ec00:	mov	r1, r2
    ec02:	movs	r2, #0
    ec04:	str	r2, [r5, #0]
    ec06:	mov	r2, r3
    ec08:	bl	b950 <_lseek>
    ec0c:	adds	r3, r0, #1
    ec0e:	bne.n	ec16 <_lseek_r+0x1e>
    ec10:	ldr	r3, [r5, #0]
    ec12:	cbz	r3, ec16 <_lseek_r+0x1e>
    ec14:	str	r3, [r4, #0]
    ec16:	pop	{r3, r4, r5, pc}
    ec18:	.word	0x20014ba4

0000ec1c <_read_r>:
    ec1c:	push	{r3, r4, r5, lr}
    ec1e:	ldr	r5, [pc, #28]	; (ec3c <_read_r+0x20>)
    ec20:	mov	r4, r0
    ec22:	mov	r0, r1
    ec24:	mov	r1, r2
    ec26:	movs	r2, #0
    ec28:	str	r2, [r5, #0]
    ec2a:	mov	r2, r3
    ec2c:	bl	b938 <_read>
    ec30:	adds	r3, r0, #1
    ec32:	bne.n	ec3a <_read_r+0x1e>
    ec34:	ldr	r3, [r5, #0]
    ec36:	cbz	r3, ec3a <_read_r+0x1e>
    ec38:	str	r3, [r4, #0]
    ec3a:	pop	{r3, r4, r5, pc}
    ec3c:	.word	0x20014ba4

0000ec40 <_sbrk_r>:
    ec40:	push	{r3, r4, r5, lr}
    ec42:	ldr	r5, [pc, #24]	; (ec5c <_sbrk_r+0x1c>)
    ec44:	movs	r3, #0
    ec46:	mov	r4, r0
    ec48:	mov	r0, r1
    ec4a:	str	r3, [r5, #0]
    ec4c:	bl	b90c <_sbrk>
    ec50:	adds	r3, r0, #1
    ec52:	bne.n	ec5a <_sbrk_r+0x1a>
    ec54:	ldr	r3, [r5, #0]
    ec56:	cbz	r3, ec5a <_sbrk_r+0x1a>
    ec58:	str	r3, [r4, #0]
    ec5a:	pop	{r3, r4, r5, pc}
    ec5c:	.word	0x20014ba4

0000ec60 <_write_r>:
    ec60:	push	{r3, r4, r5, lr}
    ec62:	ldr	r5, [pc, #28]	; (ec80 <_write_r+0x20>)
    ec64:	mov	r4, r0
    ec66:	mov	r0, r1
    ec68:	mov	r1, r2
    ec6a:	movs	r2, #0
    ec6c:	str	r2, [r5, #0]
    ec6e:	mov	r2, r3
    ec70:	bl	c700 <_write>
    ec74:	adds	r3, r0, #1
    ec76:	bne.n	ec7e <_write_r+0x1e>
    ec78:	ldr	r3, [r5, #0]
    ec7a:	cbz	r3, ec7e <_write_r+0x1e>
    ec7c:	str	r3, [r4, #0]
    ec7e:	pop	{r3, r4, r5, pc}
    ec80:	.word	0x20014ba4

0000ec84 <__errno>:
    ec84:	ldr	r3, [pc, #4]	; (ec8c <__errno+0x8>)
    ec86:	ldr	r0, [r3, #0]
    ec88:	bx	lr
    ec8a:	nop
    ec8c:	.word	0x200022d0

0000ec90 <__libc_init_array>:
    ec90:	push	{r4, r5, r6, lr}
    ec92:	ldr	r5, [pc, #52]	; (ecc8 <__libc_init_array+0x38>)
    ec94:	ldr	r4, [pc, #52]	; (eccc <__libc_init_array+0x3c>)
    ec96:	subs	r4, r4, r5
    ec98:	asrs	r4, r4, #2
    ec9a:	movs	r6, #0
    ec9c:	cmp	r6, r4
    ec9e:	bne.n	ecb4 <__libc_init_array+0x24>
    eca0:	ldr	r5, [pc, #44]	; (ecd0 <__libc_init_array+0x40>)
    eca2:	ldr	r4, [pc, #48]	; (ecd4 <__libc_init_array+0x44>)
    eca4:	bl	12078 <___init_veneer>
    eca8:	subs	r4, r4, r5
    ecaa:	asrs	r4, r4, #2
    ecac:	movs	r6, #0
    ecae:	cmp	r6, r4
    ecb0:	bne.n	ecbe <__libc_init_array+0x2e>
    ecb2:	pop	{r4, r5, r6, pc}
    ecb4:	ldr.w	r3, [r5], #4
    ecb8:	blx	r3
    ecba:	adds	r6, #1
    ecbc:	b.n	ec9c <__libc_init_array+0xc>
    ecbe:	ldr.w	r3, [r5], #4
    ecc2:	blx	r3
    ecc4:	adds	r6, #1
    ecc6:	b.n	ecae <__libc_init_array+0x1e>
    ecc8:	.word	0x600024c0
    eccc:	.word	0x600024c0
    ecd0:	.word	0x600024c0
    ecd4:	.word	0x600024d0

0000ecd8 <__retarget_lock_acquire_recursive>:
    ecd8:	bx	lr

0000ecda <__retarget_lock_release_recursive>:
    ecda:	bx	lr

0000ecdc <strcpy>:
    ecdc:	mov	r3, r0
    ecde:	ldrb.w	r2, [r1], #1
    ece2:	strb.w	r2, [r3], #1
    ece6:	cmp	r2, #0
    ece8:	bne.n	ecde <strcpy+0x2>
    ecea:	bx	lr
    ecec:	movs	r0, r0
	...

0000ecf0 <memchr>:
    ecf0:	and.w	r1, r1, #255	; 0xff
    ecf4:	cmp	r2, #16
    ecf6:	blt.n	ed50 <memchr+0x60>
    ecf8:	tst.w	r0, #7
    ecfc:	beq.n	ed10 <memchr+0x20>
    ecfe:	ldrb.w	r3, [r0], #1
    ed02:	subs	r2, #1
    ed04:	cmp	r3, r1
    ed06:	beq.n	ed64 <memchr+0x74>
    ed08:	tst.w	r0, #7
    ed0c:	cbz	r2, ed60 <memchr+0x70>
    ed0e:	bne.n	ecfe <memchr+0xe>
    ed10:	push	{r4, r5, r6, r7}
    ed12:	orr.w	r1, r1, r1, lsl #8
    ed16:	orr.w	r1, r1, r1, lsl #16
    ed1a:	bic.w	r4, r2, #7
    ed1e:	mvns.w	r7, #0
    ed22:	movs	r3, #0
    ed24:	ldrd	r5, r6, [r0], #8
    ed28:	subs	r4, #8
    ed2a:	eor.w	r5, r5, r1
    ed2e:	eor.w	r6, r6, r1
    ed32:	uadd8	r5, r5, r7
    ed36:	sel	r5, r3, r7
    ed3a:	uadd8	r6, r6, r7
    ed3e:	sel	r6, r5, r7
    ed42:	cbnz	r6, ed68 <memchr+0x78>
    ed44:	bne.n	ed24 <memchr+0x34>
    ed46:	pop	{r4, r5, r6, r7}
    ed48:	and.w	r1, r1, #255	; 0xff
    ed4c:	and.w	r2, r2, #7
    ed50:	cbz	r2, ed60 <memchr+0x70>
    ed52:	ldrb.w	r3, [r0], #1
    ed56:	subs	r2, #1
    ed58:	eor.w	r3, r3, r1
    ed5c:	cbz	r3, ed64 <memchr+0x74>
    ed5e:	bne.n	ed52 <memchr+0x62>
    ed60:	movs	r0, #0
    ed62:	bx	lr
    ed64:	subs	r0, #1
    ed66:	bx	lr
    ed68:	cmp	r5, #0
    ed6a:	itte	eq
    ed6c:	moveq	r5, r6
    ed6e:	subeq	r0, #3
    ed70:	subne	r0, #7
    ed72:	tst.w	r5, #1
    ed76:	bne.n	ed88 <memchr+0x98>
    ed78:	adds	r0, #1
    ed7a:	tst.w	r5, #256	; 0x100
    ed7e:	ittt	eq
    ed80:	addeq	r0, #1
    ed82:	tsteq.w	r5, #98304	; 0x18000
    ed86:	addeq	r0, #1
    ed88:	pop	{r4, r5, r6, r7}
    ed8a:	subs	r0, #1
    ed8c:	bx	lr
    ed8e:	nop

0000ed90 <strlen>:
    ed90:	mov	r3, r0
    ed92:	ldrb.w	r2, [r3], #1
    ed96:	cmp	r2, #0
    ed98:	bne.n	ed92 <strlen+0x2>
    ed9a:	subs	r0, r3, r0
    ed9c:	subs	r0, #1
    ed9e:	bx	lr

0000eda0 <nan>:
    eda0:	vldr	d0, [pc, #4]	; eda8 <nan+0x8>
    eda4:	bx	lr
    eda6:	nop
    eda8:	.word	0x00000000
    edac:	.word	0x7ff80000

0000edb0 <nanf>:
    edb0:	vldr	s0, [pc, #4]	; edb8 <nanf+0x8>
    edb4:	bx	lr
    edb6:	nop
    edb8:	.word	0x7fc00000

0000edbc <quorem>:
    edbc:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edc0:	ldr	r3, [r0, #16]
    edc2:	ldr	r4, [r1, #16]
    edc4:	cmp	r3, r4
    edc6:	mov	r7, r0
    edc8:	blt.n	eec8 <quorem+0x10c>
    edca:	subs	r4, #1
    edcc:	add.w	r8, r1, #20
    edd0:	add.w	r5, r0, #20
    edd4:	add.w	r3, r5, r4, lsl #2
    edd8:	str	r3, [sp, #4]
    edda:	ldr.w	r3, [r8, r4, lsl #2]
    edde:	ldr.w	r2, [r5, r4, lsl #2]
    ede2:	adds	r3, #1
    ede4:	cmp	r2, r3
    ede6:	mov.w	fp, r4, lsl #2
    edea:	add.w	r9, r8, r4, lsl #2
    edee:	udiv	r6, r2, r3
    edf2:	bcc.n	ee58 <quorem+0x9c>
    edf4:	mov.w	lr, #0
    edf8:	mov	r0, r8
    edfa:	mov	ip, r5
    edfc:	mov	sl, lr
    edfe:	ldr.w	r2, [r0], #4
    ee02:	uxth	r3, r2
    ee04:	mla	r3, r6, r3, lr
    ee08:	mov.w	lr, r2, lsr #16
    ee0c:	lsrs	r2, r3, #16
    ee0e:	uxth	r3, r3
    ee10:	sub.w	r3, sl, r3
    ee14:	ldr.w	sl, [ip]
    ee18:	uxtah	r3, r3, sl
    ee1c:	mla	r2, r6, lr, r2
    ee20:	str	r3, [sp, #0]
    ee22:	ldr	r3, [sp, #0]
    ee24:	mov.w	lr, r2, lsr #16
    ee28:	uxth	r2, r2
    ee2a:	rsb	r2, r2, sl, lsr #16
    ee2e:	add.w	r2, r2, r3, asr #16
    ee32:	ldrh.w	r3, [sp]
    ee36:	cmp	r9, r0
    ee38:	orr.w	r3, r3, r2, lsl #16
    ee3c:	str.w	r3, [ip], #4
    ee40:	mov.w	sl, r2, asr #16
    ee44:	bcs.n	edfe <quorem+0x42>
    ee46:	ldr.w	r3, [r5, fp]
    ee4a:	cbnz	r3, ee58 <quorem+0x9c>
    ee4c:	ldr	r3, [sp, #4]
    ee4e:	subs	r3, #4
    ee50:	cmp	r5, r3
    ee52:	mov	r2, r3
    ee54:	bcc.n	eeb0 <quorem+0xf4>
    ee56:	str	r4, [r7, #16]
    ee58:	mov	r0, r7
    ee5a:	bl	106a0 <__mcmp>
    ee5e:	cmp	r0, #0
    ee60:	blt.n	eea8 <quorem+0xec>
    ee62:	adds	r6, #1
    ee64:	mov	r1, r5
    ee66:	movs	r0, #0
    ee68:	ldr.w	r2, [r8], #4
    ee6c:	ldr.w	ip, [r1]
    ee70:	uxth	r3, r2
    ee72:	subs	r3, r0, r3
    ee74:	lsrs	r2, r2, #16
    ee76:	uxtah	r3, r3, ip
    ee7a:	rsb	r2, r2, ip, lsr #16
    ee7e:	add.w	r2, r2, r3, asr #16
    ee82:	uxth	r3, r3
    ee84:	orr.w	r3, r3, r2, lsl #16
    ee88:	cmp	r9, r8
    ee8a:	str.w	r3, [r1], #4
    ee8e:	mov.w	r0, r2, asr #16
    ee92:	bcs.n	ee68 <quorem+0xac>
    ee94:	ldr.w	r2, [r5, r4, lsl #2]
    ee98:	add.w	r3, r5, r4, lsl #2
    ee9c:	cbnz	r2, eea8 <quorem+0xec>
    ee9e:	subs	r3, #4
    eea0:	cmp	r5, r3
    eea2:	mov	r2, r3
    eea4:	bcc.n	eebc <quorem+0x100>
    eea6:	str	r4, [r7, #16]
    eea8:	mov	r0, r6
    eeaa:	add	sp, #12
    eeac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eeb0:	ldr	r2, [r2, #0]
    eeb2:	subs	r3, #4
    eeb4:	cmp	r2, #0
    eeb6:	bne.n	ee56 <quorem+0x9a>
    eeb8:	subs	r4, #1
    eeba:	b.n	ee50 <quorem+0x94>
    eebc:	ldr	r2, [r2, #0]
    eebe:	subs	r3, #4
    eec0:	cmp	r2, #0
    eec2:	bne.n	eea6 <quorem+0xea>
    eec4:	subs	r4, #1
    eec6:	b.n	eea0 <quorem+0xe4>
    eec8:	movs	r0, #0
    eeca:	b.n	eeaa <quorem+0xee>
    eecc:	movs	r0, r0
	...

0000eed0 <_dtoa_r>:
    eed0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eed4:	vpush	{d8}
    eed8:	ldr	r5, [r0, #28]
    eeda:	sub	sp, #68	; 0x44
    eedc:	vstr	d0, [sp, #8]
    eee0:	vmov	r8, r9, d0
    eee4:	ldr	r4, [sp, #112]	; 0x70
    eee6:	str	r1, [sp, #24]
    eee8:	mov	r6, r0
    eeea:	str	r2, [sp, #32]
    eeec:	str	r3, [sp, #48]	; 0x30
    eeee:	cbnz	r5, ef0e <_dtoa_r+0x3e>
    eef0:	movs	r0, #16
    eef2:	bl	cc18 <malloc>
    eef6:	mov	r2, r0
    eef8:	str	r0, [r6, #28]
    eefa:	cbnz	r0, ef06 <_dtoa_r+0x36>
    eefc:	ldr	r3, [pc, #664]	; (f198 <_dtoa_r+0x2c8>)
    eefe:	movs	r1, #239	; 0xef
    ef00:	ldr	r0, [pc, #664]	; (f19c <_dtoa_r+0x2cc>)
    ef02:	bl	1165c <__assert_func>
    ef06:	strd	r5, r5, [r0, #4]
    ef0a:	str	r5, [r0, #0]
    ef0c:	str	r5, [r0, #12]
    ef0e:	ldr	r3, [r6, #28]
    ef10:	ldr	r1, [r3, #0]
    ef12:	cbz	r1, ef2a <_dtoa_r+0x5a>
    ef14:	ldr	r2, [r3, #4]
    ef16:	str	r2, [r1, #4]
    ef18:	movs	r3, #1
    ef1a:	lsls	r3, r2
    ef1c:	str	r3, [r1, #8]
    ef1e:	mov	r0, r6
    ef20:	bl	10194 <_Bfree>
    ef24:	ldr	r3, [r6, #28]
    ef26:	movs	r2, #0
    ef28:	str	r2, [r3, #0]
    ef2a:	subs.w	r3, r9, #0
    ef2e:	ittet	lt
    ef30:	biclt.w	r3, r3, #2147483648	; 0x80000000
    ef34:	strlt	r3, [sp, #12]
    ef36:	movge	r3, #0
    ef38:	movlt	r2, #1
    ef3a:	ite	ge
    ef3c:	strge	r3, [r4, #0]
    ef3e:	strlt	r2, [r4, #0]
    ef40:	ldr	r3, [pc, #604]	; (f1a0 <_dtoa_r+0x2d0>)
    ef42:	ldr	r4, [sp, #12]
    ef44:	bics	r3, r4
    ef46:	bne.n	ef82 <_dtoa_r+0xb2>
    ef48:	ldr	r2, [sp, #48]	; 0x30
    ef4a:	movw	r3, #9999	; 0x270f
    ef4e:	str	r3, [r2, #0]
    ef50:	ubfx	r3, r4, #0, #20
    ef54:	orrs.w	r3, r3, r8
    ef58:	beq.w	f952 <_dtoa_r+0xa82>
    ef5c:	ldr	r3, [sp, #116]	; 0x74
    ef5e:	cbnz	r3, ef7a <_dtoa_r+0xaa>
    ef60:	ldr	r3, [pc, #576]	; (f1a4 <_dtoa_r+0x2d4>)
    ef62:	b.n	efa6 <_dtoa_r+0xd6>
    ef64:	ldr	r3, [pc, #576]	; (f1a8 <_dtoa_r+0x2d8>)
    ef66:	str	r3, [sp, #4]
    ef68:	adds	r3, #8
    ef6a:	ldr	r2, [sp, #116]	; 0x74
    ef6c:	str	r3, [r2, #0]
    ef6e:	ldr	r0, [sp, #4]
    ef70:	add	sp, #68	; 0x44
    ef72:	vpop	{d8}
    ef76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef7a:	ldr	r3, [pc, #552]	; (f1a4 <_dtoa_r+0x2d4>)
    ef7c:	str	r3, [sp, #4]
    ef7e:	adds	r3, #3
    ef80:	b.n	ef6a <_dtoa_r+0x9a>
    ef82:	vldr	d8, [sp, #8]
    ef86:	vcmp.f64	d8, #0.0
    ef8a:	vmrs	APSR_nzcv, fpscr
    ef8e:	bne.n	efaa <_dtoa_r+0xda>
    ef90:	ldr	r2, [sp, #48]	; 0x30
    ef92:	movs	r3, #1
    ef94:	str	r3, [r2, #0]
    ef96:	ldr	r3, [sp, #116]	; 0x74
    ef98:	cmp	r3, #0
    ef9a:	beq.w	f94c <_dtoa_r+0xa7c>
    ef9e:	ldr	r3, [pc, #524]	; (f1ac <_dtoa_r+0x2dc>)
    efa0:	ldr	r2, [sp, #116]	; 0x74
    efa2:	str	r3, [r2, #0]
    efa4:	subs	r3, #1
    efa6:	str	r3, [sp, #4]
    efa8:	b.n	ef6e <_dtoa_r+0x9e>
    efaa:	add	r2, sp, #56	; 0x38
    efac:	add	r1, sp, #60	; 0x3c
    efae:	mov	r0, r6
    efb0:	vmov.f64	d0, d8
    efb4:	bl	108cc <__d2b>
    efb8:	ubfx	r3, r4, #20, #11
    efbc:	ldr	r2, [sp, #56]	; 0x38
    efbe:	mov	r5, r0
    efc0:	cmp	r3, #0
    efc2:	beq.n	f052 <_dtoa_r+0x182>
    efc4:	vmov.f64	d7, d8
    efc8:	vmov	r1, s17
    efcc:	ubfx	r1, r1, #0, #20
    efd0:	orr.w	r1, r1, #1069547520	; 0x3fc00000
    efd4:	orr.w	r1, r1, #3145728	; 0x300000
    efd8:	subw	r3, r3, #1023	; 0x3ff
    efdc:	movs	r0, #0
    efde:	vmov	s15, r1
    efe2:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    efe6:	vldr	d5, [pc, #408]	; f180 <_dtoa_r+0x2b0>
    efea:	vsub.f64	d7, d7, d6
    efee:	vldr	d6, [pc, #408]	; f188 <_dtoa_r+0x2b8>
    eff2:	vfma.f64	d6, d7, d5
    eff6:	vldr	d5, [pc, #408]	; f190 <_dtoa_r+0x2c0>
    effa:	vmov	s15, r3
    effe:	vcvt.f64.s32	d4, s15
    f002:	vmov.f64	d7, d6
    f006:	vfma.f64	d7, d4, d5
    f00a:	vcvt.s32.f64	s13, d7
    f00e:	vcmpe.f64	d7, #0.0
    f012:	vmrs	APSR_nzcv, fpscr
    f016:	vmov	fp, s13
    f01a:	str	r0, [sp, #36]	; 0x24
    f01c:	bpl.n	f030 <_dtoa_r+0x160>
    f01e:	vcvt.f64.s32	d6, s13
    f022:	vcmp.f64	d6, d7
    f026:	vmrs	APSR_nzcv, fpscr
    f02a:	it	ne
    f02c:	addne.w	fp, fp, #4294967295
    f030:	cmp.w	fp, #22
    f034:	bhi.n	f08e <_dtoa_r+0x1be>
    f036:	ldr	r1, [pc, #376]	; (f1b0 <_dtoa_r+0x2e0>)
    f038:	add.w	r1, r1, fp, lsl #3
    f03c:	vldr	d7, [r1]
    f040:	vcmpe.f64	d8, d7
    f044:	vmrs	APSR_nzcv, fpscr
    f048:	bpl.n	f04e <_dtoa_r+0x17e>
    f04a:	add.w	fp, fp, #4294967295
    f04e:	movs	r1, #0
    f050:	b.n	f090 <_dtoa_r+0x1c0>
    f052:	ldr	r3, [sp, #60]	; 0x3c
    f054:	add	r3, r2
    f056:	addw	r1, r3, #1074	; 0x432
    f05a:	cmp	r1, #32
    f05c:	itttt	gt
    f05e:	rsbgt	r1, r1, #64	; 0x40
    f062:	lslgt	r4, r1
    f064:	addwgt	r1, r3, #1042	; 0x412
    f068:	lsrgt.w	r1, r8, r1
    f06c:	itet	le
    f06e:	rsble	r1, r1, #32
    f072:	orrgt	r1, r4
    f074:	lslle.w	r1, r8, r1
    f078:	vmov	s15, r1
    f07c:	vcvt.f64.u32	d7, s15
    f080:	subs	r3, #1
    f082:	vmov	r1, s15
    f086:	movs	r0, #1
    f088:	sub.w	r1, r1, #32505856	; 0x1f00000
    f08c:	b.n	efde <_dtoa_r+0x10e>
    f08e:	movs	r1, #1
    f090:	subs	r2, r2, r3
    f092:	subs	r3, r2, #1
    f094:	str	r3, [sp, #20]
    f096:	ittet	mi
    f098:	rsbmi	r3, r2, #1
    f09c:	strmi	r3, [sp, #16]
    f09e:	movpl	r3, #0
    f0a0:	movmi	r3, #0
    f0a2:	ite	mi
    f0a4:	strmi	r3, [sp, #20]
    f0a6:	strpl	r3, [sp, #16]
    f0a8:	cmp.w	fp, #0
    f0ac:	str	r1, [sp, #44]	; 0x2c
    f0ae:	blt.n	f0e2 <_dtoa_r+0x212>
    f0b0:	ldr	r3, [sp, #20]
    f0b2:	str.w	fp, [sp, #40]	; 0x28
    f0b6:	add	r3, fp
    f0b8:	str	r3, [sp, #20]
    f0ba:	movs	r3, #0
    f0bc:	ldr	r2, [sp, #24]
    f0be:	cmp	r2, #9
    f0c0:	bhi.n	f154 <_dtoa_r+0x284>
    f0c2:	cmp	r2, #5
    f0c4:	itt	gt
    f0c6:	subgt	r2, #4
    f0c8:	strgt	r2, [sp, #24]
    f0ca:	ldr	r2, [sp, #24]
    f0cc:	sub.w	r2, r2, #2
    f0d0:	ite	gt
    f0d2:	movgt	r4, #0
    f0d4:	movle	r4, #1
    f0d6:	cmp	r2, #3
    f0d8:	bhi.n	f16a <_dtoa_r+0x29a>
    f0da:	tbb	[pc, r2]
    f0de:	.short	0x2d0b
    f0e0:	.short	0x392b
    f0e2:	ldr	r3, [sp, #16]
    f0e4:	movs	r2, #0
    f0e6:	sub.w	r3, r3, fp
    f0ea:	str	r3, [sp, #16]
    f0ec:	str	r2, [sp, #40]	; 0x28
    f0ee:	rsb	r3, fp, #0
    f0f2:	b.n	f0bc <_dtoa_r+0x1ec>
    f0f4:	movs	r2, #0
    f0f6:	str	r2, [sp, #28]
    f0f8:	ldr	r2, [sp, #32]
    f0fa:	cmp	r2, #0
    f0fc:	bgt.n	f170 <_dtoa_r+0x2a0>
    f0fe:	mov.w	sl, #1
    f102:	mov	r9, sl
    f104:	mov	r2, sl
    f106:	str.w	sl, [sp, #32]
    f10a:	ldr	r7, [r6, #28]
    f10c:	movs	r1, #0
    f10e:	movs	r0, #4
    f110:	add.w	ip, r0, #20
    f114:	cmp	ip, r2
    f116:	bls.n	f17a <_dtoa_r+0x2aa>
    f118:	str	r1, [r7, #4]
    f11a:	mov	r0, r6
    f11c:	str	r3, [sp, #52]	; 0x34
    f11e:	bl	10114 <_Balloc>
    f122:	ldr	r3, [sp, #52]	; 0x34
    f124:	str	r0, [sp, #4]
    f126:	mov	r2, r0
    f128:	cmp	r0, #0
    f12a:	bne.n	f1b8 <_dtoa_r+0x2e8>
    f12c:	ldr	r3, [pc, #132]	; (f1b4 <_dtoa_r+0x2e4>)
    f12e:	movw	r1, #431	; 0x1af
    f132:	b.n	ef00 <_dtoa_r+0x30>
    f134:	movs	r2, #1
    f136:	b.n	f0f6 <_dtoa_r+0x226>
    f138:	movs	r2, #0
    f13a:	str	r2, [sp, #28]
    f13c:	ldr	r2, [sp, #32]
    f13e:	add.w	sl, fp, r2
    f142:	add.w	r9, sl, #1
    f146:	mov	r2, r9
    f148:	cmp	r2, #1
    f14a:	it	lt
    f14c:	movlt	r2, #1
    f14e:	b.n	f10a <_dtoa_r+0x23a>
    f150:	movs	r2, #1
    f152:	b.n	f13a <_dtoa_r+0x26a>
    f154:	movs	r4, #1
    f156:	movs	r2, #0
    f158:	strd	r2, r4, [sp, #24]
    f15c:	mov.w	sl, #4294967295
    f160:	movs	r1, #0
    f162:	mov	r9, sl
    f164:	movs	r2, #18
    f166:	str	r1, [sp, #32]
    f168:	b.n	f10a <_dtoa_r+0x23a>
    f16a:	movs	r2, #1
    f16c:	str	r2, [sp, #28]
    f16e:	b.n	f15c <_dtoa_r+0x28c>
    f170:	ldr.w	sl, [sp, #32]
    f174:	mov	r9, sl
    f176:	mov	r2, sl
    f178:	b.n	f10a <_dtoa_r+0x23a>
    f17a:	adds	r1, #1
    f17c:	lsls	r0, r0, #1
    f17e:	b.n	f110 <_dtoa_r+0x240>
    f180:	.word	0x636f4361
    f184:	.word	0x3fd287a7
    f188:	.word	0x8b60c8b3
    f18c:	.word	0x3fc68a28
    f190:	.word	0x509f79fb
    f194:	.word	0x3fd34413
    f198:	.word	0x20001359
    f19c:	.word	0x20001370
    f1a0:	.word	0x7ff00000
    f1a4:	.word	0x20001355
    f1a8:	.word	0x2000134c
    f1ac:	.word	0x20001188
    f1b0:	.word	0x20000328
    f1b4:	.word	0x200013c9
    f1b8:	ldr	r2, [r6, #28]
    f1ba:	ldr	r1, [sp, #4]
    f1bc:	str	r1, [r2, #0]
    f1be:	cmp.w	r9, #14
    f1c2:	bhi.n	f29e <_dtoa_r+0x3ce>
    f1c4:	cmp	r4, #0
    f1c6:	beq.n	f29e <_dtoa_r+0x3ce>
    f1c8:	cmp.w	fp, #0
    f1cc:	ble.w	f310 <_dtoa_r+0x440>
    f1d0:	ldr	r2, [pc, #772]	; (f4d8 <_dtoa_r+0x608>)
    f1d2:	and.w	r1, fp, #15
    f1d6:	add.w	r2, r2, r1, lsl #3
    f1da:	tst.w	fp, #256	; 0x100
    f1de:	vldr	d7, [r2]
    f1e2:	mov.w	r2, fp, asr #4
    f1e6:	beq.w	f2f8 <_dtoa_r+0x428>
    f1ea:	ldr	r1, [pc, #752]	; (f4dc <_dtoa_r+0x60c>)
    f1ec:	vldr	d6, [r1, #32]
    f1f0:	vdiv.f64	d6, d8, d6
    f1f4:	vstr	d6, [sp, #8]
    f1f8:	and.w	r2, r2, #15
    f1fc:	movs	r1, #3
    f1fe:	ldr	r0, [pc, #732]	; (f4dc <_dtoa_r+0x60c>)
    f200:	cmp	r2, #0
    f202:	bne.n	f2fc <_dtoa_r+0x42c>
    f204:	vldr	d6, [sp, #8]
    f208:	vdiv.f64	d7, d6, d7
    f20c:	vstr	d7, [sp, #8]
    f210:	ldr	r2, [sp, #44]	; 0x2c
    f212:	vldr	d7, [sp, #8]
    f216:	cmp	r2, #0
    f218:	beq.w	f35c <_dtoa_r+0x48c>
    f21c:	vmov.f64	d6, #112	; 0x3f800000  1.0
    f220:	vcmpe.f64	d7, d6
    f224:	vmrs	APSR_nzcv, fpscr
    f228:	bpl.w	f35c <_dtoa_r+0x48c>
    f22c:	cmp.w	r9, #0
    f230:	beq.w	f35c <_dtoa_r+0x48c>
    f234:	cmp.w	sl, #0
    f238:	ble.n	f29a <_dtoa_r+0x3ca>
    f23a:	vmov.f64	d6, #36	; 0x41200000  10.0
    f23e:	vmul.f64	d7, d7, d6
    f242:	vstr	d7, [sp, #8]
    f246:	add.w	r2, fp, #4294967295
    f24a:	adds	r1, #1
    f24c:	mov	r4, sl
    f24e:	vldr	d6, [sp, #8]
    f252:	vmov.f64	d5, #28	; 0x40e00000  7.0
    f256:	vmov	s15, r1
    f25a:	vcvt.f64.s32	d7, s15
    f25e:	vfma.f64	d5, d7, d6
    f262:	vmov	r7, s11
    f266:	vmov	r0, r1, d5
    f26a:	sub.w	r1, r7, #54525952	; 0x3400000
    f26e:	cmp	r4, #0
    f270:	bne.n	f362 <_dtoa_r+0x492>
    f272:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f276:	vsub.f64	d6, d6, d7
    f27a:	vmov	d7, r0, r1
    f27e:	vcmpe.f64	d6, d7
    f282:	vmrs	APSR_nzcv, fpscr
    f286:	bgt.w	f75e <_dtoa_r+0x88e>
    f28a:	vneg.f64	d7, d7
    f28e:	vcmpe.f64	d6, d7
    f292:	vmrs	APSR_nzcv, fpscr
    f296:	bmi.w	f75a <_dtoa_r+0x88a>
    f29a:	vstr	d8, [sp, #8]
    f29e:	ldr	r2, [sp, #60]	; 0x3c
    f2a0:	cmp	r2, #0
    f2a2:	blt.w	f4e0 <_dtoa_r+0x610>
    f2a6:	cmp.w	fp, #14
    f2aa:	bgt.w	f4e0 <_dtoa_r+0x610>
    f2ae:	ldr	r3, [pc, #552]	; (f4d8 <_dtoa_r+0x608>)
    f2b0:	add.w	r3, r3, fp, lsl #3
    f2b4:	vldr	d6, [r3]
    f2b8:	ldr	r3, [sp, #32]
    f2ba:	cmp	r3, #0
    f2bc:	bge.w	f42e <_dtoa_r+0x55e>
    f2c0:	cmp.w	r9, #0
    f2c4:	bgt.w	f42e <_dtoa_r+0x55e>
    f2c8:	bne.w	f758 <_dtoa_r+0x888>
    f2cc:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f2d0:	vmul.f64	d6, d6, d7
    f2d4:	vldr	d7, [sp, #8]
    f2d8:	vcmpe.f64	d6, d7
    f2dc:	vmrs	APSR_nzcv, fpscr
    f2e0:	mov	r4, r9
    f2e2:	mov	r7, r9
    f2e4:	bge.w	f720 <_dtoa_r+0x850>
    f2e8:	ldr.w	r8, [sp, #4]
    f2ec:	movs	r3, #49	; 0x31
    f2ee:	strb.w	r3, [r8], #1
    f2f2:	add.w	fp, fp, #1
    f2f6:	b.n	f72a <_dtoa_r+0x85a>
    f2f8:	movs	r1, #2
    f2fa:	b.n	f1fe <_dtoa_r+0x32e>
    f2fc:	lsls	r4, r2, #31
    f2fe:	bpl.n	f30a <_dtoa_r+0x43a>
    f300:	vldr	d6, [r0]
    f304:	adds	r1, #1
    f306:	vmul.f64	d7, d7, d6
    f30a:	asrs	r2, r2, #1
    f30c:	adds	r0, #8
    f30e:	b.n	f200 <_dtoa_r+0x330>
    f310:	beq.n	f358 <_dtoa_r+0x488>
    f312:	rsb	r2, fp, #0
    f316:	ldr	r1, [pc, #448]	; (f4d8 <_dtoa_r+0x608>)
    f318:	and.w	r0, r2, #15
    f31c:	add.w	r1, r1, r0, lsl #3
    f320:	vldr	d7, [r1]
    f324:	vmul.f64	d7, d8, d7
    f328:	vstr	d7, [sp, #8]
    f32c:	ldr	r0, [pc, #428]	; (f4dc <_dtoa_r+0x60c>)
    f32e:	asrs	r2, r2, #4
    f330:	movs	r4, #0
    f332:	movs	r1, #2
    f334:	cbnz	r2, f342 <_dtoa_r+0x472>
    f336:	cmp	r4, #0
    f338:	beq.w	f210 <_dtoa_r+0x340>
    f33c:	vstr	d7, [sp, #8]
    f340:	b.n	f210 <_dtoa_r+0x340>
    f342:	lsls	r7, r2, #31
    f344:	bpl.n	f352 <_dtoa_r+0x482>
    f346:	vldr	d6, [r0]
    f34a:	adds	r1, #1
    f34c:	movs	r4, #1
    f34e:	vmul.f64	d7, d7, d6
    f352:	asrs	r2, r2, #1
    f354:	adds	r0, #8
    f356:	b.n	f334 <_dtoa_r+0x464>
    f358:	movs	r1, #2
    f35a:	b.n	f210 <_dtoa_r+0x340>
    f35c:	mov	r2, fp
    f35e:	mov	r4, r9
    f360:	b.n	f24e <_dtoa_r+0x37e>
    f362:	vmov	d7, r0, r1
    f366:	ldr	r1, [pc, #368]	; (f4d8 <_dtoa_r+0x608>)
    f368:	add.w	r1, r1, r4, lsl #3
    f36c:	vldr	d4, [r1, #-8]
    f370:	ldr	r1, [sp, #4]
    f372:	add	r4, r1
    f374:	ldr	r1, [sp, #28]
    f376:	cbz	r1, f3ce <_dtoa_r+0x4fe>
    f378:	vmov.f64	d3, #96	; 0x3f000000  0.5
    f37c:	vmov.f64	d2, #112	; 0x3f800000  1.0
    f380:	ldr.w	r8, [sp, #4]
    f384:	vdiv.f64	d5, d3, d4
    f388:	vmov.f64	d3, #36	; 0x41200000  10.0
    f38c:	vsub.f64	d7, d5, d7
    f390:	vcvt.s32.f64	s9, d6
    f394:	vmov	r1, s9
    f398:	vcvt.f64.s32	d5, s9
    f39c:	adds	r1, #48	; 0x30
    f39e:	vsub.f64	d6, d6, d5
    f3a2:	vcmpe.f64	d6, d7
    f3a6:	vmrs	APSR_nzcv, fpscr
    f3aa:	strb.w	r1, [r8], #1
    f3ae:	bmi.n	f424 <_dtoa_r+0x554>
    f3b0:	vsub.f64	d5, d2, d6
    f3b4:	vcmpe.f64	d5, d7
    f3b8:	vmrs	APSR_nzcv, fpscr
    f3bc:	bmi.n	f4a4 <_dtoa_r+0x5d4>
    f3be:	cmp	r8, r4
    f3c0:	beq.w	f29a <_dtoa_r+0x3ca>
    f3c4:	vmul.f64	d7, d7, d3
    f3c8:	vmul.f64	d6, d6, d3
    f3cc:	b.n	f390 <_dtoa_r+0x4c0>
    f3ce:	ldr.w	r8, [sp, #4]
    f3d2:	vmul.f64	d7, d7, d4
    f3d6:	mov	r0, r4
    f3d8:	vmov.f64	d3, #36	; 0x41200000  10.0
    f3dc:	vcvt.s32.f64	s9, d6
    f3e0:	vmov	r1, s9
    f3e4:	adds	r1, #48	; 0x30
    f3e6:	strb.w	r1, [r8], #1
    f3ea:	cmp	r8, r4
    f3ec:	vcvt.f64.s32	d5, s9
    f3f0:	vsub.f64	d6, d6, d5
    f3f4:	bne.n	f428 <_dtoa_r+0x558>
    f3f6:	vmov.f64	d5, #96	; 0x3f000000  0.5
    f3fa:	vadd.f64	d4, d7, d5
    f3fe:	vcmpe.f64	d6, d4
    f402:	vmrs	APSR_nzcv, fpscr
    f406:	bgt.n	f4a4 <_dtoa_r+0x5d4>
    f408:	vsub.f64	d5, d5, d7
    f40c:	vcmpe.f64	d6, d5
    f410:	vmrs	APSR_nzcv, fpscr
    f414:	bpl.w	f29a <_dtoa_r+0x3ca>
    f418:	mov	r8, r0
    f41a:	subs	r0, #1
    f41c:	ldrb.w	r3, [r8, #-1]
    f420:	cmp	r3, #48	; 0x30
    f422:	beq.n	f418 <_dtoa_r+0x548>
    f424:	mov	fp, r2
    f426:	b.n	f47e <_dtoa_r+0x5ae>
    f428:	vmul.f64	d6, d6, d3
    f42c:	b.n	f3dc <_dtoa_r+0x50c>
    f42e:	vldr	d7, [sp, #8]
    f432:	vmov.f64	d4, #36	; 0x41200000  10.0
    f436:	ldr.w	r8, [sp, #4]
    f43a:	vdiv.f64	d5, d7, d6
    f43e:	vcvt.s32.f64	s10, d5
    f442:	vmov	r3, s10
    f446:	adds	r3, #48	; 0x30
    f448:	strb.w	r3, [r8], #1
    f44c:	ldr	r3, [sp, #4]
    f44e:	sub.w	r3, r8, r3
    f452:	cmp	r9, r3
    f454:	vcvt.f64.s32	d3, s10
    f458:	vfms.f64	d7, d3, d6
    f45c:	bne.n	f4c6 <_dtoa_r+0x5f6>
    f45e:	vadd.f64	d7, d7, d7
    f462:	vcmpe.f64	d7, d6
    f466:	vmrs	APSR_nzcv, fpscr
    f46a:	bgt.n	f4a2 <_dtoa_r+0x5d2>
    f46c:	vcmp.f64	d7, d6
    f470:	vmrs	APSR_nzcv, fpscr
    f474:	bne.n	f47e <_dtoa_r+0x5ae>
    f476:	vmov	r3, s10
    f47a:	lsls	r1, r3, #31
    f47c:	bmi.n	f4a2 <_dtoa_r+0x5d2>
    f47e:	mov	r1, r5
    f480:	mov	r0, r6
    f482:	bl	10194 <_Bfree>
    f486:	movs	r3, #0
    f488:	ldr	r2, [sp, #48]	; 0x30
    f48a:	strb.w	r3, [r8]
    f48e:	add.w	r3, fp, #1
    f492:	str	r3, [r2, #0]
    f494:	ldr	r3, [sp, #116]	; 0x74
    f496:	cmp	r3, #0
    f498:	beq.w	ef6e <_dtoa_r+0x9e>
    f49c:	str.w	r8, [r3]
    f4a0:	b.n	ef6e <_dtoa_r+0x9e>
    f4a2:	mov	r2, fp
    f4a4:	mov	r3, r8
    f4a6:	mov	r8, r3
    f4a8:	ldrb.w	r1, [r3, #-1]!
    f4ac:	cmp	r1, #57	; 0x39
    f4ae:	bne.n	f4be <_dtoa_r+0x5ee>
    f4b0:	ldr	r1, [sp, #4]
    f4b2:	cmp	r1, r3
    f4b4:	bne.n	f4a6 <_dtoa_r+0x5d6>
    f4b6:	ldr	r0, [sp, #4]
    f4b8:	movs	r1, #48	; 0x30
    f4ba:	adds	r2, #1
    f4bc:	strb	r1, [r0, #0]
    f4be:	ldrb	r1, [r3, #0]
    f4c0:	adds	r1, #1
    f4c2:	strb	r1, [r3, #0]
    f4c4:	b.n	f424 <_dtoa_r+0x554>
    f4c6:	vmul.f64	d7, d7, d4
    f4ca:	vcmp.f64	d7, #0.0
    f4ce:	vmrs	APSR_nzcv, fpscr
    f4d2:	bne.n	f43a <_dtoa_r+0x56a>
    f4d4:	b.n	f47e <_dtoa_r+0x5ae>
    f4d6:	nop
    f4d8:	.word	0x20000328
    f4dc:	.word	0x20000300
    f4e0:	ldr	r1, [sp, #28]
    f4e2:	cmp	r1, #0
    f4e4:	beq.w	f688 <_dtoa_r+0x7b8>
    f4e8:	ldr	r1, [sp, #24]
    f4ea:	cmp	r1, #1
    f4ec:	bgt.w	f658 <_dtoa_r+0x788>
    f4f0:	ldr	r1, [sp, #36]	; 0x24
    f4f2:	cmp	r1, #0
    f4f4:	beq.w	f650 <_dtoa_r+0x780>
    f4f8:	addw	r2, r2, #1075	; 0x433
    f4fc:	ldr.w	r8, [sp, #16]
    f500:	mov	r4, r3
    f502:	str	r3, [sp, #36]	; 0x24
    f504:	ldr	r3, [sp, #16]
    f506:	add	r3, r2
    f508:	str	r3, [sp, #16]
    f50a:	ldr	r3, [sp, #20]
    f50c:	movs	r1, #1
    f50e:	add	r3, r2
    f510:	mov	r0, r6
    f512:	str	r3, [sp, #20]
    f514:	bl	10394 <__i2b>
    f518:	ldr	r3, [sp, #36]	; 0x24
    f51a:	mov	r7, r0
    f51c:	cmp.w	r8, #0
    f520:	beq.n	f53e <_dtoa_r+0x66e>
    f522:	ldr	r2, [sp, #20]
    f524:	cmp	r2, #0
    f526:	ble.n	f53e <_dtoa_r+0x66e>
    f528:	cmp	r2, r8
    f52a:	ldr	r1, [sp, #16]
    f52c:	it	ge
    f52e:	movge	r2, r8
    f530:	subs	r1, r1, r2
    f532:	str	r1, [sp, #16]
    f534:	ldr	r1, [sp, #20]
    f536:	sub.w	r8, r8, r2
    f53a:	subs	r2, r1, r2
    f53c:	str	r2, [sp, #20]
    f53e:	cbz	r3, f582 <_dtoa_r+0x6b2>
    f540:	ldr	r2, [sp, #28]
    f542:	cmp	r2, #0
    f544:	beq.w	f692 <_dtoa_r+0x7c2>
    f548:	cmp	r4, #0
    f54a:	ble.n	f574 <_dtoa_r+0x6a4>
    f54c:	mov	r1, r7
    f54e:	mov	r2, r4
    f550:	mov	r0, r6
    f552:	str	r3, [sp, #52]	; 0x34
    f554:	bl	10514 <__pow5mult>
    f558:	mov	r2, r5
    f55a:	mov	r1, r0
    f55c:	mov	r7, r0
    f55e:	mov	r0, r6
    f560:	bl	103c0 <__multiply>
    f564:	mov	r1, r5
    f566:	str	r0, [sp, #36]	; 0x24
    f568:	mov	r0, r6
    f56a:	bl	10194 <_Bfree>
    f56e:	ldr	r2, [sp, #36]	; 0x24
    f570:	ldr	r3, [sp, #52]	; 0x34
    f572:	mov	r5, r2
    f574:	subs	r2, r3, r4
    f576:	beq.n	f582 <_dtoa_r+0x6b2>
    f578:	mov	r1, r5
    f57a:	mov	r0, r6
    f57c:	bl	10514 <__pow5mult>
    f580:	mov	r5, r0
    f582:	movs	r1, #1
    f584:	mov	r0, r6
    f586:	bl	10394 <__i2b>
    f58a:	ldr	r3, [sp, #40]	; 0x28
    f58c:	cmp	r3, #0
    f58e:	mov	r4, r0
    f590:	ble.w	f696 <_dtoa_r+0x7c6>
    f594:	mov	r2, r3
    f596:	mov	r1, r0
    f598:	mov	r0, r6
    f59a:	bl	10514 <__pow5mult>
    f59e:	ldr	r3, [sp, #24]
    f5a0:	cmp	r3, #1
    f5a2:	mov	r4, r0
    f5a4:	ble.n	f69c <_dtoa_r+0x7cc>
    f5a6:	movs	r3, #0
    f5a8:	str	r3, [sp, #36]	; 0x24
    f5aa:	ldr	r2, [r4, #16]
    f5ac:	add.w	r2, r4, r2, lsl #2
    f5b0:	ldr	r0, [r2, #16]
    f5b2:	bl	102f8 <__hi0bits>
    f5b6:	rsb	r0, r0, #32
    f5ba:	ldr	r3, [sp, #20]
    f5bc:	add	r0, r3
    f5be:	ands.w	r0, r0, #31
    f5c2:	beq.w	f6ec <_dtoa_r+0x81c>
    f5c6:	rsb	r2, r0, #32
    f5ca:	cmp	r2, #4
    f5cc:	ble.w	f6da <_dtoa_r+0x80a>
    f5d0:	ldr	r3, [sp, #16]
    f5d2:	rsb	r0, r0, #28
    f5d6:	add	r3, r0
    f5d8:	str	r3, [sp, #16]
    f5da:	ldr	r3, [sp, #20]
    f5dc:	add	r8, r0
    f5de:	add	r3, r0
    f5e0:	str	r3, [sp, #20]
    f5e2:	ldr	r3, [sp, #16]
    f5e4:	cmp	r3, #0
    f5e6:	ble.n	f5f4 <_dtoa_r+0x724>
    f5e8:	mov	r1, r5
    f5ea:	mov	r2, r3
    f5ec:	mov	r0, r6
    f5ee:	bl	105c8 <__lshift>
    f5f2:	mov	r5, r0
    f5f4:	ldr	r3, [sp, #20]
    f5f6:	cmp	r3, #0
    f5f8:	ble.n	f606 <_dtoa_r+0x736>
    f5fa:	mov	r1, r4
    f5fc:	mov	r2, r3
    f5fe:	mov	r0, r6
    f600:	bl	105c8 <__lshift>
    f604:	mov	r4, r0
    f606:	ldr	r3, [sp, #44]	; 0x2c
    f608:	cmp	r3, #0
    f60a:	beq.n	f6f0 <_dtoa_r+0x820>
    f60c:	mov	r1, r4
    f60e:	mov	r0, r5
    f610:	bl	106a0 <__mcmp>
    f614:	cmp	r0, #0
    f616:	bge.n	f6f0 <_dtoa_r+0x820>
    f618:	movs	r3, #0
    f61a:	mov	r1, r5
    f61c:	movs	r2, #10
    f61e:	mov	r0, r6
    f620:	bl	101d8 <__multadd>
    f624:	ldr	r3, [sp, #28]
    f626:	add.w	fp, fp, #4294967295
    f62a:	mov	r5, r0
    f62c:	cmp	r3, #0
    f62e:	beq.w	f960 <_dtoa_r+0xa90>
    f632:	mov	r1, r7
    f634:	movs	r3, #0
    f636:	movs	r2, #10
    f638:	mov	r0, r6
    f63a:	bl	101d8 <__multadd>
    f63e:	cmp.w	sl, #0
    f642:	mov	r7, r0
    f644:	bgt.w	f76e <_dtoa_r+0x89e>
    f648:	ldr	r3, [sp, #24]
    f64a:	cmp	r3, #2
    f64c:	bgt.n	f6fe <_dtoa_r+0x82e>
    f64e:	b.n	f76e <_dtoa_r+0x89e>
    f650:	ldr	r2, [sp, #56]	; 0x38
    f652:	rsb	r2, r2, #54	; 0x36
    f656:	b.n	f4fc <_dtoa_r+0x62c>
    f658:	add.w	r4, r9, #4294967295
    f65c:	cmp	r3, r4
    f65e:	itttt	lt
    f660:	sublt	r2, r4, r3
    f662:	ldrlt	r3, [sp, #40]	; 0x28
    f664:	addlt	r3, r3, r2
    f666:	strlt	r3, [sp, #40]	; 0x28
    f668:	itee	ge
    f66a:	subge	r4, r3, r4
    f66c:	movlt	r3, r4
    f66e:	movlt	r4, #0
    f670:	cmp.w	r9, #0
    f674:	itete	lt
    f676:	ldrlt	r2, [sp, #16]
    f678:	ldrge.w	r8, [sp, #16]
    f67c:	sublt.w	r8, r2, r9
    f680:	movge	r2, r9
    f682:	it	lt
    f684:	movlt	r2, #0
    f686:	b.n	f502 <_dtoa_r+0x632>
    f688:	ldr.w	r8, [sp, #16]
    f68c:	ldr	r7, [sp, #28]
    f68e:	mov	r4, r3
    f690:	b.n	f51c <_dtoa_r+0x64c>
    f692:	mov	r2, r3
    f694:	b.n	f578 <_dtoa_r+0x6a8>
    f696:	ldr	r3, [sp, #24]
    f698:	cmp	r3, #1
    f69a:	bgt.n	f6ce <_dtoa_r+0x7fe>
    f69c:	ldr	r3, [sp, #8]
    f69e:	cbnz	r3, f6ce <_dtoa_r+0x7fe>
    f6a0:	ldr	r3, [sp, #12]
    f6a2:	ubfx	r2, r3, #0, #20
    f6a6:	cbnz	r2, f6d2 <_dtoa_r+0x802>
    f6a8:	bic.w	r2, r3, #2147483648	; 0x80000000
    f6ac:	lsrs	r2, r2, #20
    f6ae:	lsls	r2, r2, #20
    f6b0:	cbz	r2, f6d6 <_dtoa_r+0x806>
    f6b2:	ldr	r3, [sp, #16]
    f6b4:	adds	r3, #1
    f6b6:	str	r3, [sp, #16]
    f6b8:	ldr	r3, [sp, #20]
    f6ba:	adds	r3, #1
    f6bc:	str	r3, [sp, #20]
    f6be:	movs	r3, #1
    f6c0:	str	r3, [sp, #36]	; 0x24
    f6c2:	ldr	r3, [sp, #40]	; 0x28
    f6c4:	cmp	r3, #0
    f6c6:	bne.w	f5aa <_dtoa_r+0x6da>
    f6ca:	movs	r0, #1
    f6cc:	b.n	f5ba <_dtoa_r+0x6ea>
    f6ce:	movs	r3, #0
    f6d0:	b.n	f6c0 <_dtoa_r+0x7f0>
    f6d2:	ldr	r3, [sp, #8]
    f6d4:	b.n	f6c0 <_dtoa_r+0x7f0>
    f6d6:	str	r2, [sp, #36]	; 0x24
    f6d8:	b.n	f6c2 <_dtoa_r+0x7f2>
    f6da:	beq.n	f5e2 <_dtoa_r+0x712>
    f6dc:	ldr	r3, [sp, #16]
    f6de:	adds	r2, #28
    f6e0:	add	r3, r2
    f6e2:	str	r3, [sp, #16]
    f6e4:	ldr	r3, [sp, #20]
    f6e6:	add	r8, r2
    f6e8:	add	r3, r2
    f6ea:	b.n	f5e0 <_dtoa_r+0x710>
    f6ec:	mov	r2, r0
    f6ee:	b.n	f6dc <_dtoa_r+0x80c>
    f6f0:	cmp.w	r9, #0
    f6f4:	bgt.n	f764 <_dtoa_r+0x894>
    f6f6:	ldr	r3, [sp, #24]
    f6f8:	cmp	r3, #2
    f6fa:	ble.n	f764 <_dtoa_r+0x894>
    f6fc:	mov	sl, r9
    f6fe:	cmp.w	sl, #0
    f702:	bne.n	f720 <_dtoa_r+0x850>
    f704:	mov	r1, r4
    f706:	mov	r3, sl
    f708:	movs	r2, #5
    f70a:	mov	r0, r6
    f70c:	bl	101d8 <__multadd>
    f710:	mov	r1, r0
    f712:	mov	r4, r0
    f714:	mov	r0, r5
    f716:	bl	106a0 <__mcmp>
    f71a:	cmp	r0, #0
    f71c:	bgt.w	f2e8 <_dtoa_r+0x418>
    f720:	ldr	r3, [sp, #32]
    f722:	ldr.w	r8, [sp, #4]
    f726:	mvn.w	fp, r3
    f72a:	mov.w	r9, #0
    f72e:	mov	r1, r4
    f730:	mov	r0, r6
    f732:	bl	10194 <_Bfree>
    f736:	cmp	r7, #0
    f738:	beq.w	f47e <_dtoa_r+0x5ae>
    f73c:	cmp.w	r9, #0
    f740:	beq.n	f74e <_dtoa_r+0x87e>
    f742:	cmp	r9, r7
    f744:	beq.n	f74e <_dtoa_r+0x87e>
    f746:	mov	r1, r9
    f748:	mov	r0, r6
    f74a:	bl	10194 <_Bfree>
    f74e:	mov	r1, r7
    f750:	mov	r0, r6
    f752:	bl	10194 <_Bfree>
    f756:	b.n	f47e <_dtoa_r+0x5ae>
    f758:	movs	r4, #0
    f75a:	mov	r7, r4
    f75c:	b.n	f720 <_dtoa_r+0x850>
    f75e:	mov	fp, r2
    f760:	mov	r7, r4
    f762:	b.n	f2e8 <_dtoa_r+0x418>
    f764:	ldr	r3, [sp, #28]
    f766:	mov	sl, r9
    f768:	cmp	r3, #0
    f76a:	beq.w	f96e <_dtoa_r+0xa9e>
    f76e:	cmp.w	r8, #0
    f772:	ble.n	f780 <_dtoa_r+0x8b0>
    f774:	mov	r1, r7
    f776:	mov	r2, r8
    f778:	mov	r0, r6
    f77a:	bl	105c8 <__lshift>
    f77e:	mov	r7, r0
    f780:	ldr	r3, [sp, #36]	; 0x24
    f782:	cmp	r3, #0
    f784:	beq.n	f842 <_dtoa_r+0x972>
    f786:	ldr	r1, [r7, #4]
    f788:	mov	r0, r6
    f78a:	bl	10114 <_Balloc>
    f78e:	mov	r8, r0
    f790:	cbnz	r0, f79e <_dtoa_r+0x8ce>
    f792:	ldr	r3, [pc, #520]	; (f99c <_dtoa_r+0xacc>)
    f794:	mov	r2, r0
    f796:	movw	r1, #751	; 0x2ef
    f79a:	b.w	ef00 <_dtoa_r+0x30>
    f79e:	ldr	r2, [r7, #16]
    f7a0:	adds	r2, #2
    f7a2:	lsls	r2, r2, #2
    f7a4:	add.w	r1, r7, #12
    f7a8:	adds	r0, #12
    f7aa:	bl	a218 <memcpy>
    f7ae:	movs	r2, #1
    f7b0:	mov	r1, r8
    f7b2:	mov	r0, r6
    f7b4:	bl	105c8 <__lshift>
    f7b8:	ldr	r3, [sp, #4]
    f7ba:	adds	r3, #1
    f7bc:	str	r3, [sp, #16]
    f7be:	ldr	r3, [sp, #4]
    f7c0:	add	r3, sl
    f7c2:	str	r3, [sp, #32]
    f7c4:	ldr	r3, [sp, #8]
    f7c6:	and.w	r3, r3, #1
    f7ca:	mov	r9, r7
    f7cc:	str	r3, [sp, #28]
    f7ce:	mov	r7, r0
    f7d0:	ldr	r3, [sp, #16]
    f7d2:	mov	r1, r4
    f7d4:	subs	r3, #1
    f7d6:	mov	r0, r5
    f7d8:	str	r3, [sp, #8]
    f7da:	bl	edbc <quorem>
    f7de:	mov	r3, r0
    f7e0:	adds	r3, #48	; 0x30
    f7e2:	str	r0, [sp, #20]
    f7e4:	mov	r1, r9
    f7e6:	mov	r0, r5
    f7e8:	str	r3, [sp, #36]	; 0x24
    f7ea:	bl	106a0 <__mcmp>
    f7ee:	mov	r2, r7
    f7f0:	mov	sl, r0
    f7f2:	mov	r1, r4
    f7f4:	mov	r0, r6
    f7f6:	bl	106d8 <__mdiff>
    f7fa:	ldr	r2, [r0, #12]
    f7fc:	ldr	r3, [sp, #36]	; 0x24
    f7fe:	mov	r8, r0
    f800:	cbnz	r2, f846 <_dtoa_r+0x976>
    f802:	mov	r1, r0
    f804:	mov	r0, r5
    f806:	bl	106a0 <__mcmp>
    f80a:	ldr	r3, [sp, #36]	; 0x24
    f80c:	mov	r2, r0
    f80e:	mov	r1, r8
    f810:	mov	r0, r6
    f812:	strd	r3, r2, [sp, #36]	; 0x24
    f816:	bl	10194 <_Bfree>
    f81a:	ldr	r3, [sp, #24]
    f81c:	ldr	r2, [sp, #40]	; 0x28
    f81e:	ldr.w	r8, [sp, #16]
    f822:	orr.w	r1, r3, r2
    f826:	ldr	r3, [sp, #28]
    f828:	orrs	r1, r3
    f82a:	ldr	r3, [sp, #36]	; 0x24
    f82c:	bne.n	f84a <_dtoa_r+0x97a>
    f82e:	cmp	r3, #57	; 0x39
    f830:	beq.n	f886 <_dtoa_r+0x9b6>
    f832:	cmp.w	sl, #0
    f836:	ble.n	f83c <_dtoa_r+0x96c>
    f838:	ldr	r3, [sp, #20]
    f83a:	adds	r3, #49	; 0x31
    f83c:	ldr	r2, [sp, #8]
    f83e:	strb	r3, [r2, #0]
    f840:	b.n	f72e <_dtoa_r+0x85e>
    f842:	mov	r0, r7
    f844:	b.n	f7b8 <_dtoa_r+0x8e8>
    f846:	movs	r2, #1
    f848:	b.n	f80e <_dtoa_r+0x93e>
    f84a:	cmp.w	sl, #0
    f84e:	blt.n	f85e <_dtoa_r+0x98e>
    f850:	ldr	r1, [sp, #24]
    f852:	orr.w	sl, r1, sl
    f856:	ldr	r1, [sp, #28]
    f858:	orrs.w	sl, sl, r1
    f85c:	bne.n	f8a0 <_dtoa_r+0x9d0>
    f85e:	cmp	r2, #0
    f860:	ble.n	f83c <_dtoa_r+0x96c>
    f862:	mov	r1, r5
    f864:	movs	r2, #1
    f866:	mov	r0, r6
    f868:	str	r3, [sp, #16]
    f86a:	bl	105c8 <__lshift>
    f86e:	mov	r1, r4
    f870:	mov	r5, r0
    f872:	bl	106a0 <__mcmp>
    f876:	cmp	r0, #0
    f878:	ldr	r3, [sp, #16]
    f87a:	bgt.n	f882 <_dtoa_r+0x9b2>
    f87c:	bne.n	f83c <_dtoa_r+0x96c>
    f87e:	lsls	r2, r3, #31
    f880:	bpl.n	f83c <_dtoa_r+0x96c>
    f882:	cmp	r3, #57	; 0x39
    f884:	bne.n	f838 <_dtoa_r+0x968>
    f886:	ldr	r2, [sp, #8]
    f888:	movs	r3, #57	; 0x39
    f88a:	strb	r3, [r2, #0]
    f88c:	mov	r3, r8
    f88e:	mov	r8, r3
    f890:	subs	r3, #1
    f892:	ldrb.w	r2, [r8, #-1]
    f896:	cmp	r2, #57	; 0x39
    f898:	beq.n	f93e <_dtoa_r+0xa6e>
    f89a:	adds	r2, #1
    f89c:	strb	r2, [r3, #0]
    f89e:	b.n	f72e <_dtoa_r+0x85e>
    f8a0:	cmp	r2, #0
    f8a2:	ble.n	f8ac <_dtoa_r+0x9dc>
    f8a4:	cmp	r3, #57	; 0x39
    f8a6:	beq.n	f886 <_dtoa_r+0x9b6>
    f8a8:	adds	r3, #1
    f8aa:	b.n	f83c <_dtoa_r+0x96c>
    f8ac:	ldr	r2, [sp, #16]
    f8ae:	ldr	r1, [sp, #32]
    f8b0:	strb.w	r3, [r2, #-1]
    f8b4:	cmp	r2, r1
    f8b6:	beq.n	f910 <_dtoa_r+0xa40>
    f8b8:	mov	r1, r5
    f8ba:	movs	r3, #0
    f8bc:	movs	r2, #10
    f8be:	mov	r0, r6
    f8c0:	bl	101d8 <__multadd>
    f8c4:	cmp	r9, r7
    f8c6:	mov	r5, r0
    f8c8:	mov.w	r3, #0
    f8cc:	mov.w	r2, #10
    f8d0:	mov	r1, r9
    f8d2:	mov	r0, r6
    f8d4:	bne.n	f8e6 <_dtoa_r+0xa16>
    f8d6:	bl	101d8 <__multadd>
    f8da:	mov	r9, r0
    f8dc:	mov	r7, r0
    f8de:	ldr	r3, [sp, #16]
    f8e0:	adds	r3, #1
    f8e2:	str	r3, [sp, #16]
    f8e4:	b.n	f7d0 <_dtoa_r+0x900>
    f8e6:	bl	101d8 <__multadd>
    f8ea:	mov	r1, r7
    f8ec:	mov	r9, r0
    f8ee:	movs	r3, #0
    f8f0:	movs	r2, #10
    f8f2:	mov	r0, r6
    f8f4:	bl	101d8 <__multadd>
    f8f8:	mov	r7, r0
    f8fa:	b.n	f8de <_dtoa_r+0xa0e>
    f8fc:	cmp.w	sl, #0
    f900:	ldr	r2, [sp, #4]
    f902:	ite	gt
    f904:	movgt	r8, sl
    f906:	movle.w	r8, #1
    f90a:	add	r8, r2
    f90c:	mov.w	r9, #0
    f910:	mov	r1, r5
    f912:	movs	r2, #1
    f914:	mov	r0, r6
    f916:	str	r3, [sp, #8]
    f918:	bl	105c8 <__lshift>
    f91c:	mov	r1, r4
    f91e:	mov	r5, r0
    f920:	bl	106a0 <__mcmp>
    f924:	cmp	r0, #0
    f926:	bgt.n	f88c <_dtoa_r+0x9bc>
    f928:	bne.n	f930 <_dtoa_r+0xa60>
    f92a:	ldr	r3, [sp, #8]
    f92c:	lsls	r3, r3, #31
    f92e:	bmi.n	f88c <_dtoa_r+0x9bc>
    f930:	mov	r3, r8
    f932:	mov	r8, r3
    f934:	ldrb.w	r2, [r3, #-1]!
    f938:	cmp	r2, #48	; 0x30
    f93a:	beq.n	f932 <_dtoa_r+0xa62>
    f93c:	b.n	f72e <_dtoa_r+0x85e>
    f93e:	ldr	r2, [sp, #4]
    f940:	cmp	r2, r3
    f942:	bne.n	f88e <_dtoa_r+0x9be>
    f944:	add.w	fp, fp, #1
    f948:	movs	r3, #49	; 0x31
    f94a:	b.n	f83e <_dtoa_r+0x96e>
    f94c:	ldr	r3, [pc, #80]	; (f9a0 <_dtoa_r+0xad0>)
    f94e:	b.w	efa6 <_dtoa_r+0xd6>
    f952:	ldr	r3, [sp, #116]	; 0x74
    f954:	cmp	r3, #0
    f956:	bne.w	ef64 <_dtoa_r+0x94>
    f95a:	ldr	r3, [pc, #72]	; (f9a4 <_dtoa_r+0xad4>)
    f95c:	b.w	efa6 <_dtoa_r+0xd6>
    f960:	cmp.w	sl, #0
    f964:	bgt.n	f96e <_dtoa_r+0xa9e>
    f966:	ldr	r3, [sp, #24]
    f968:	cmp	r3, #2
    f96a:	bgt.w	f6fe <_dtoa_r+0x82e>
    f96e:	ldr.w	r8, [sp, #4]
    f972:	mov	r1, r4
    f974:	mov	r0, r5
    f976:	bl	edbc <quorem>
    f97a:	add.w	r3, r0, #48	; 0x30
    f97e:	strb.w	r3, [r8], #1
    f982:	ldr	r2, [sp, #4]
    f984:	sub.w	r2, r8, r2
    f988:	cmp	sl, r2
    f98a:	ble.n	f8fc <_dtoa_r+0xa2c>
    f98c:	mov	r1, r5
    f98e:	movs	r3, #0
    f990:	movs	r2, #10
    f992:	mov	r0, r6
    f994:	bl	101d8 <__multadd>
    f998:	mov	r5, r0
    f99a:	b.n	f972 <_dtoa_r+0xaa2>
    f99c:	.word	0x200013c9
    f9a0:	.word	0x20001187
    f9a4:	.word	0x2000134c

0000f9a8 <_free_r>:
    f9a8:	push	{r0, r1, r2, r4, r5, lr}
    f9aa:	cmp	r1, #0
    f9ac:	beq.n	fa38 <_free_r+0x90>
    f9ae:	ldr.w	r3, [r1, #-4]
    f9b2:	str	r0, [sp, #4]
    f9b4:	cmp	r3, #0
    f9b6:	sub.w	r4, r1, #4
    f9ba:	it	lt
    f9bc:	addlt	r4, r4, r3
    f9be:	bl	cd64 <__malloc_lock>
    f9c2:	ldr	r2, [pc, #120]	; (fa3c <_free_r+0x94>)
    f9c4:	ldr	r0, [sp, #4]
    f9c6:	ldr	r3, [r2, #0]
    f9c8:	cbnz	r3, f9d8 <_free_r+0x30>
    f9ca:	str	r3, [r4, #4]
    f9cc:	str	r4, [r2, #0]
    f9ce:	add	sp, #12
    f9d0:	ldmia.w	sp!, {r4, r5, lr}
    f9d4:	b.w	cd70 <__malloc_unlock>
    f9d8:	cmp	r3, r4
    f9da:	bls.n	f9ee <_free_r+0x46>
    f9dc:	ldr	r5, [r4, #0]
    f9de:	adds	r1, r4, r5
    f9e0:	cmp	r3, r1
    f9e2:	itttt	eq
    f9e4:	ldreq	r1, [r3, #0]
    f9e6:	ldreq	r3, [r3, #4]
    f9e8:	addeq	r1, r1, r5
    f9ea:	streq	r1, [r4, #0]
    f9ec:	b.n	f9ca <_free_r+0x22>
    f9ee:	mov	r2, r3
    f9f0:	ldr	r3, [r3, #4]
    f9f2:	cbz	r3, f9f8 <_free_r+0x50>
    f9f4:	cmp	r3, r4
    f9f6:	bls.n	f9ee <_free_r+0x46>
    f9f8:	ldr	r1, [r2, #0]
    f9fa:	adds	r5, r2, r1
    f9fc:	cmp	r5, r4
    f9fe:	bne.n	fa18 <_free_r+0x70>
    fa00:	ldr	r4, [r4, #0]
    fa02:	add	r1, r4
    fa04:	adds	r4, r2, r1
    fa06:	cmp	r3, r4
    fa08:	str	r1, [r2, #0]
    fa0a:	bne.n	f9ce <_free_r+0x26>
    fa0c:	ldr	r4, [r3, #0]
    fa0e:	ldr	r3, [r3, #4]
    fa10:	str	r3, [r2, #4]
    fa12:	add	r4, r1
    fa14:	str	r4, [r2, #0]
    fa16:	b.n	f9ce <_free_r+0x26>
    fa18:	bls.n	fa20 <_free_r+0x78>
    fa1a:	movs	r3, #12
    fa1c:	str	r3, [r0, #0]
    fa1e:	b.n	f9ce <_free_r+0x26>
    fa20:	ldr	r5, [r4, #0]
    fa22:	adds	r1, r4, r5
    fa24:	cmp	r3, r1
    fa26:	itt	eq
    fa28:	ldreq	r1, [r3, #0]
    fa2a:	ldreq	r3, [r3, #4]
    fa2c:	str	r3, [r4, #4]
    fa2e:	itt	eq
    fa30:	addeq	r1, r1, r5
    fa32:	streq	r1, [r4, #0]
    fa34:	str	r4, [r2, #4]
    fa36:	b.n	f9ce <_free_r+0x26>
    fa38:	add	sp, #12
    fa3a:	pop	{r4, r5, pc}
    fa3c:	.word	0x20014854

0000fa40 <rshift>:
    fa40:	ldr	r3, [r0, #16]
    fa42:	cmp.w	r3, r1, asr #5
    fa46:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fa4a:	mov.w	r2, r1, asr #5
    fa4e:	add.w	r4, r0, #20
    fa52:	ble.n	fae0 <rshift+0xa0>
    fa54:	ands.w	r1, r1, #31
    fa58:	add.w	r6, r4, r3, lsl #2
    fa5c:	add.w	r5, r4, r2, lsl #2
    fa60:	bne.n	fa7c <rshift+0x3c>
    fa62:	add.w	r7, r0, #16
    fa66:	mov	r1, r5
    fa68:	cmp	r1, r6
    fa6a:	bcc.n	fad6 <rshift+0x96>
    fa6c:	subs	r3, r3, r2
    fa6e:	lsls	r3, r3, #2
    fa70:	subs	r2, r5, #3
    fa72:	cmp	r6, r2
    fa74:	it	cc
    fa76:	movcc	r3, #0
    fa78:	add	r3, r4
    fa7a:	b.n	faa8 <rshift+0x68>
    fa7c:	ldr.w	r7, [r4, r2, lsl #2]
    fa80:	rsb	r8, r1, #32
    fa84:	lsrs	r7, r1
    fa86:	add.w	lr, r5, #4
    fa8a:	mov	r9, r4
    fa8c:	cmp	r6, lr
    fa8e:	mov	ip, lr
    fa90:	bhi.n	fabe <rshift+0x7e>
    fa92:	subs	r2, r3, r2
    fa94:	lsls	r2, r2, #2
    fa96:	subs	r2, #4
    fa98:	adds	r5, #1
    fa9a:	cmp	r6, r5
    fa9c:	it	cc
    fa9e:	movcc	r2, #0
    faa0:	adds	r3, r4, r2
    faa2:	str	r7, [r4, r2]
    faa4:	cbz	r7, faa8 <rshift+0x68>
    faa6:	adds	r3, #4
    faa8:	subs	r2, r3, r4
    faaa:	cmp	r3, r4
    faac:	mov.w	r2, r2, asr #2
    fab0:	it	eq
    fab2:	moveq	r3, #0
    fab4:	str	r2, [r0, #16]
    fab6:	it	eq
    fab8:	streq	r3, [r0, #20]
    faba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fabe:	ldr.w	ip, [ip]
    fac2:	lsl.w	ip, ip, r8
    fac6:	orr.w	r7, ip, r7
    faca:	str.w	r7, [r9], #4
    face:	ldr.w	r7, [lr], #4
    fad2:	lsrs	r7, r1
    fad4:	b.n	fa8c <rshift+0x4c>
    fad6:	ldr.w	ip, [r1], #4
    fada:	str.w	ip, [r7, #4]!
    fade:	b.n	fa68 <rshift+0x28>
    fae0:	mov	r3, r4
    fae2:	b.n	faa8 <rshift+0x68>

0000fae4 <__hexdig_fun>:
    fae4:	sub.w	r3, r0, #48	; 0x30
    fae8:	cmp	r3, #9
    faea:	bhi.n	faf2 <__hexdig_fun+0xe>
    faec:	subs	r0, #32
    faee:	uxtb	r0, r0
    faf0:	bx	lr
    faf2:	sub.w	r3, r0, #97	; 0x61
    faf6:	cmp	r3, #5
    faf8:	bhi.n	fafe <__hexdig_fun+0x1a>
    fafa:	subs	r0, #71	; 0x47
    fafc:	b.n	faee <__hexdig_fun+0xa>
    fafe:	sub.w	r3, r0, #65	; 0x41
    fb02:	cmp	r3, #5
    fb04:	bhi.n	fb0a <__hexdig_fun+0x26>
    fb06:	subs	r0, #39	; 0x27
    fb08:	b.n	faee <__hexdig_fun+0xa>
    fb0a:	movs	r0, #0
    fb0c:	bx	lr
	...

0000fb10 <__gethex>:
    fb10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb14:	mov	r7, r2
    fb16:	ldr	r2, [r1, #0]
    fb18:	sub	sp, #20
    fb1a:	add.w	fp, r2, #2
    fb1e:	rsb	r2, r2, #4278255360	; 0xff00ff00
    fb22:	add.w	r2, r2, #16711680	; 0xff0000
    fb26:	mov	r9, r0
    fb28:	mov	sl, r1
    fb2a:	str	r3, [sp, #8]
    fb2c:	adds	r2, #254	; 0xfe
    fb2e:	add.w	r3, r2, fp
    fb32:	mov	r8, fp
    fb34:	ldrb.w	r0, [fp], #1
    fb38:	str	r3, [sp, #4]
    fb3a:	cmp	r0, #48	; 0x30
    fb3c:	beq.n	fb2e <__gethex+0x1e>
    fb3e:	bl	fae4 <__hexdig_fun>
    fb42:	mov	r4, r0
    fb44:	cmp	r0, #0
    fb46:	bne.n	fbba <__gethex+0xaa>
    fb48:	ldr	r1, [pc, #668]	; (fde8 <__gethex+0x2d8>)
    fb4a:	movs	r2, #1
    fb4c:	mov	r0, r8
    fb4e:	bl	ebac <strncmp>
    fb52:	mov	r6, r0
    fb54:	cmp	r0, #0
    fb56:	bne.n	fc2c <__gethex+0x11c>
    fb58:	ldrb.w	r0, [r8, #1]
    fb5c:	mov	r5, fp
    fb5e:	bl	fae4 <__hexdig_fun>
    fb62:	cmp	r0, #0
    fb64:	beq.n	fc30 <__gethex+0x120>
    fb66:	mov	r2, fp
    fb68:	ldrb	r0, [r2, #0]
    fb6a:	cmp	r0, #48	; 0x30
    fb6c:	mov	r8, r2
    fb6e:	add.w	r2, r2, #1
    fb72:	beq.n	fb68 <__gethex+0x58>
    fb74:	bl	fae4 <__hexdig_fun>
    fb78:	movs	r3, #1
    fb7a:	clz	r4, r0
    fb7e:	lsrs	r4, r4, #5
    fb80:	mov	r6, fp
    fb82:	str	r3, [sp, #4]
    fb84:	mov	r2, r8
    fb86:	mov	r5, r2
    fb88:	adds	r2, #1
    fb8a:	ldrb	r0, [r5, #0]
    fb8c:	bl	fae4 <__hexdig_fun>
    fb90:	cmp	r0, #0
    fb92:	bne.n	fb86 <__gethex+0x76>
    fb94:	ldr	r1, [pc, #592]	; (fde8 <__gethex+0x2d8>)
    fb96:	movs	r2, #1
    fb98:	mov	r0, r5
    fb9a:	bl	ebac <strncmp>
    fb9e:	cbnz	r0, fbc0 <__gethex+0xb0>
    fba0:	cbnz	r6, fbb4 <__gethex+0xa4>
    fba2:	adds	r6, r5, #1
    fba4:	mov	r2, r6
    fba6:	mov	r5, r2
    fba8:	adds	r2, #1
    fbaa:	ldrb	r0, [r5, #0]
    fbac:	bl	fae4 <__hexdig_fun>
    fbb0:	cmp	r0, #0
    fbb2:	bne.n	fba6 <__gethex+0x96>
    fbb4:	subs	r3, r6, r5
    fbb6:	lsls	r6, r3, #2
    fbb8:	b.n	fbc4 <__gethex+0xb4>
    fbba:	movs	r4, #0
    fbbc:	mov	r6, r4
    fbbe:	b.n	fb84 <__gethex+0x74>
    fbc0:	cmp	r6, #0
    fbc2:	bne.n	fbb4 <__gethex+0xa4>
    fbc4:	ldrb	r3, [r5, #0]
    fbc6:	and.w	r3, r3, #223	; 0xdf
    fbca:	cmp	r3, #80	; 0x50
    fbcc:	bne.n	fc4a <__gethex+0x13a>
    fbce:	ldrb	r3, [r5, #1]
    fbd0:	cmp	r3, #43	; 0x2b
    fbd2:	beq.n	fc34 <__gethex+0x124>
    fbd4:	cmp	r3, #45	; 0x2d
    fbd6:	beq.n	fc3c <__gethex+0x12c>
    fbd8:	adds	r1, r5, #1
    fbda:	mov.w	fp, #0
    fbde:	ldrb	r0, [r1, #0]
    fbe0:	bl	fae4 <__hexdig_fun>
    fbe4:	subs	r2, r0, #1
    fbe6:	uxtb	r2, r2
    fbe8:	cmp	r2, #24
    fbea:	bhi.n	fc4a <__gethex+0x13a>
    fbec:	sub.w	r2, r0, #16
    fbf0:	ldrb.w	r0, [r1, #1]!
    fbf4:	bl	fae4 <__hexdig_fun>
    fbf8:	add.w	ip, r0, #4294967295
    fbfc:	uxtb.w	ip, ip
    fc00:	cmp.w	ip, #24
    fc04:	bls.n	fc42 <__gethex+0x132>
    fc06:	cmp.w	fp, #0
    fc0a:	beq.n	fc0e <__gethex+0xfe>
    fc0c:	negs	r2, r2
    fc0e:	add	r6, r2
    fc10:	str.w	r1, [sl]
    fc14:	cbz	r4, fc4e <__gethex+0x13e>
    fc16:	ldr	r3, [sp, #4]
    fc18:	cmp	r3, #0
    fc1a:	ite	ne
    fc1c:	movne.w	r8, #0
    fc20:	moveq.w	r8, #6
    fc24:	mov	r0, r8
    fc26:	add	sp, #20
    fc28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc2c:	mov	r5, r8
    fc2e:	mov	r6, r4
    fc30:	movs	r4, #1
    fc32:	b.n	fbc4 <__gethex+0xb4>
    fc34:	mov.w	fp, #0
    fc38:	adds	r1, r5, #2
    fc3a:	b.n	fbde <__gethex+0xce>
    fc3c:	mov.w	fp, #1
    fc40:	b.n	fc38 <__gethex+0x128>
    fc42:	movs	r3, #10
    fc44:	mla	r0, r3, r2, r0
    fc48:	b.n	fbec <__gethex+0xdc>
    fc4a:	mov	r1, r5
    fc4c:	b.n	fc10 <__gethex+0x100>
    fc4e:	sub.w	r3, r5, r8
    fc52:	subs	r3, #1
    fc54:	mov	r1, r4
    fc56:	cmp	r3, #7
    fc58:	bgt.n	fc70 <__gethex+0x160>
    fc5a:	mov	r0, r9
    fc5c:	bl	10114 <_Balloc>
    fc60:	mov	r4, r0
    fc62:	cbnz	r0, fc76 <__gethex+0x166>
    fc64:	ldr	r3, [pc, #388]	; (fdec <__gethex+0x2dc>)
    fc66:	mov	r2, r0
    fc68:	movs	r1, #228	; 0xe4
    fc6a:	ldr	r0, [pc, #388]	; (fdf0 <__gethex+0x2e0>)
    fc6c:	bl	1165c <__assert_func>
    fc70:	adds	r1, #1
    fc72:	asrs	r3, r3, #1
    fc74:	b.n	fc56 <__gethex+0x146>
    fc76:	add.w	sl, r0, #20
    fc7a:	movs	r3, #0
    fc7c:	ldr	r1, [pc, #360]	; (fde8 <__gethex+0x2d8>)
    fc7e:	str.w	sl, [sp, #4]
    fc82:	mov	fp, r3
    fc84:	cmp	r8, r5
    fc86:	bcc.n	fd0e <__gethex+0x1fe>
    fc88:	ldr	r0, [sp, #4]
    fc8a:	str.w	fp, [r0], #4
    fc8e:	sub.w	r0, r0, sl
    fc92:	asrs	r0, r0, #2
    fc94:	str	r0, [r4, #16]
    fc96:	mov.w	r8, r0, lsl #5
    fc9a:	mov	r0, fp
    fc9c:	bl	102f8 <__hi0bits>
    fca0:	ldr	r5, [r7, #0]
    fca2:	sub.w	r0, r8, r0
    fca6:	cmp	r0, r5
    fca8:	ble.n	fd5e <__gethex+0x24e>
    fcaa:	sub.w	r8, r0, r5
    fcae:	mov	r1, r8
    fcb0:	mov	r0, r4
    fcb2:	bl	10a26 <__any_on>
    fcb6:	mov	fp, r0
    fcb8:	cbz	r0, fcea <__gethex+0x1da>
    fcba:	add.w	r3, r8, #4294967295
    fcbe:	asrs	r1, r3, #5
    fcc0:	and.w	r2, r3, #31
    fcc4:	ldr.w	r1, [sl, r1, lsl #2]
    fcc8:	mov.w	fp, #1
    fccc:	lsl.w	r2, fp, r2
    fcd0:	tst	r2, r1
    fcd2:	beq.n	fcea <__gethex+0x1da>
    fcd4:	cmp	r3, fp
    fcd6:	ble.n	fce6 <__gethex+0x1d6>
    fcd8:	sub.w	r1, r8, #2
    fcdc:	mov	r0, r4
    fcde:	bl	10a26 <__any_on>
    fce2:	cmp	r0, #0
    fce4:	bne.n	fd58 <__gethex+0x248>
    fce6:	mov.w	fp, #2
    fcea:	mov	r1, r8
    fcec:	mov	r0, r4
    fcee:	bl	fa40 <rshift>
    fcf2:	add	r6, r8
    fcf4:	ldr	r3, [r7, #8]
    fcf6:	cmp	r3, r6
    fcf8:	bge.n	fd7e <__gethex+0x26e>
    fcfa:	mov	r1, r4
    fcfc:	mov	r0, r9
    fcfe:	bl	10194 <_Bfree>
    fd02:	ldr	r2, [sp, #56]	; 0x38
    fd04:	movs	r3, #0
    fd06:	str	r3, [r2, #0]
    fd08:	mov.w	r8, #163	; 0xa3
    fd0c:	b.n	fc24 <__gethex+0x114>
    fd0e:	ldrb.w	r2, [r5, #-1]!
    fd12:	cmp	r2, #46	; 0x2e
    fd14:	beq.n	fd40 <__gethex+0x230>
    fd16:	cmp	r3, #32
    fd18:	bne.n	fd28 <__gethex+0x218>
    fd1a:	ldr	r3, [sp, #4]
    fd1c:	str.w	fp, [r3], #4
    fd20:	mov.w	fp, #0
    fd24:	str	r3, [sp, #4]
    fd26:	mov	r3, fp
    fd28:	ldrb	r0, [r5, #0]
    fd2a:	str	r3, [sp, #12]
    fd2c:	bl	fae4 <__hexdig_fun>
    fd30:	ldr	r3, [sp, #12]
    fd32:	and.w	r0, r0, #15
    fd36:	lsls	r0, r3
    fd38:	orr.w	fp, fp, r0
    fd3c:	adds	r3, #4
    fd3e:	b.n	fc84 <__gethex+0x174>
    fd40:	cmp	r8, r5
    fd42:	bhi.n	fd16 <__gethex+0x206>
    fd44:	movs	r2, #1
    fd46:	mov	r0, r5
    fd48:	str	r3, [sp, #12]
    fd4a:	bl	ebac <strncmp>
    fd4e:	ldr	r1, [pc, #152]	; (fde8 <__gethex+0x2d8>)
    fd50:	ldr	r3, [sp, #12]
    fd52:	cmp	r0, #0
    fd54:	bne.n	fd16 <__gethex+0x206>
    fd56:	b.n	fc84 <__gethex+0x174>
    fd58:	mov.w	fp, #3
    fd5c:	b.n	fcea <__gethex+0x1da>
    fd5e:	bge.n	fd78 <__gethex+0x268>
    fd60:	sub.w	r8, r5, r0
    fd64:	mov	r1, r4
    fd66:	mov	r2, r8
    fd68:	mov	r0, r9
    fd6a:	bl	105c8 <__lshift>
    fd6e:	sub.w	r6, r6, r8
    fd72:	mov	r4, r0
    fd74:	add.w	sl, r0, #20
    fd78:	mov.w	fp, #0
    fd7c:	b.n	fcf4 <__gethex+0x1e4>
    fd7e:	ldr	r3, [r7, #4]
    fd80:	cmp	r3, r6
    fd82:	ble.n	fe6c <__gethex+0x35c>
    fd84:	subs	r6, r3, r6
    fd86:	cmp	r5, r6
    fd88:	bgt.n	fdf4 <__gethex+0x2e4>
    fd8a:	ldr	r3, [r7, #12]
    fd8c:	cmp	r3, #2
    fd8e:	beq.n	fdd8 <__gethex+0x2c8>
    fd90:	cmp	r3, #3
    fd92:	beq.n	fde0 <__gethex+0x2d0>
    fd94:	cmp	r3, #1
    fd96:	bne.n	fdc4 <__gethex+0x2b4>
    fd98:	cmp	r5, r6
    fd9a:	bne.n	fdc4 <__gethex+0x2b4>
    fd9c:	cmp	r5, #1
    fd9e:	bne.n	fdb8 <__gethex+0x2a8>
    fda0:	ldr	r2, [sp, #8]
    fda2:	ldr	r3, [r7, #4]
    fda4:	str	r3, [r2, #0]
    fda6:	movs	r3, #1
    fda8:	str	r3, [r4, #16]
    fdaa:	str.w	r3, [sl]
    fdae:	ldr	r3, [sp, #56]	; 0x38
    fdb0:	mov.w	r8, #98	; 0x62
    fdb4:	str	r4, [r3, #0]
    fdb6:	b.n	fc24 <__gethex+0x114>
    fdb8:	subs	r1, r5, #1
    fdba:	mov	r0, r4
    fdbc:	bl	10a26 <__any_on>
    fdc0:	cmp	r0, #0
    fdc2:	bne.n	fda0 <__gethex+0x290>
    fdc4:	mov	r1, r4
    fdc6:	mov	r0, r9
    fdc8:	bl	10194 <_Bfree>
    fdcc:	ldr	r2, [sp, #56]	; 0x38
    fdce:	movs	r3, #0
    fdd0:	str	r3, [r2, #0]
    fdd2:	mov.w	r8, #80	; 0x50
    fdd6:	b.n	fc24 <__gethex+0x114>
    fdd8:	ldr	r3, [sp, #60]	; 0x3c
    fdda:	cmp	r3, #0
    fddc:	bne.n	fdc4 <__gethex+0x2b4>
    fdde:	b.n	fda0 <__gethex+0x290>
    fde0:	ldr	r3, [sp, #60]	; 0x3c
    fde2:	cmp	r3, #0
    fde4:	bne.n	fda0 <__gethex+0x290>
    fde6:	b.n	fdc4 <__gethex+0x2b4>
    fde8:	.word	0x20000d02
    fdec:	.word	0x200013c9
    fdf0:	.word	0x200011ea
    fdf4:	add.w	r8, r6, #4294967295
    fdf8:	cmp.w	fp, #0
    fdfc:	bne.n	fe66 <__gethex+0x356>
    fdfe:	cmp.w	r8, #0
    fe02:	beq.n	fe0e <__gethex+0x2fe>
    fe04:	mov	r1, r8
    fe06:	mov	r0, r4
    fe08:	bl	10a26 <__any_on>
    fe0c:	mov	fp, r0
    fe0e:	mov.w	r2, r8, asr #5
    fe12:	movs	r3, #1
    fe14:	ldr.w	r2, [sl, r2, lsl #2]
    fe18:	and.w	r8, r8, #31
    fe1c:	lsl.w	r3, r3, r8
    fe20:	tst	r3, r2
    fe22:	mov	r1, r6
    fe24:	mov	r0, r4
    fe26:	it	ne
    fe28:	orrne.w	fp, fp, #2
    fe2c:	subs	r5, r5, r6
    fe2e:	bl	fa40 <rshift>
    fe32:	ldr	r6, [r7, #4]
    fe34:	mov.w	r8, #2
    fe38:	cmp.w	fp, #0
    fe3c:	beq.n	fed4 <__gethex+0x3c4>
    fe3e:	ldr	r3, [r7, #12]
    fe40:	cmp	r3, #2
    fe42:	beq.n	fe72 <__gethex+0x362>
    fe44:	cmp	r3, #3
    fe46:	beq.n	fe7a <__gethex+0x36a>
    fe48:	cmp	r3, #1
    fe4a:	bne.n	fe60 <__gethex+0x350>
    fe4c:	tst.w	fp, #2
    fe50:	beq.n	fe60 <__gethex+0x350>
    fe52:	ldr.w	r3, [sl]
    fe56:	orr.w	fp, fp, r3
    fe5a:	tst.w	fp, #1
    fe5e:	bne.n	fe80 <__gethex+0x370>
    fe60:	orr.w	r8, r8, #16
    fe64:	b.n	fed4 <__gethex+0x3c4>
    fe66:	mov.w	fp, #1
    fe6a:	b.n	fe0e <__gethex+0x2fe>
    fe6c:	mov.w	r8, #1
    fe70:	b.n	fe38 <__gethex+0x328>
    fe72:	ldr	r3, [sp, #60]	; 0x3c
    fe74:	rsb	r3, r3, #1
    fe78:	str	r3, [sp, #60]	; 0x3c
    fe7a:	ldr	r3, [sp, #60]	; 0x3c
    fe7c:	cmp	r3, #0
    fe7e:	beq.n	fe60 <__gethex+0x350>
    fe80:	ldr.w	fp, [r4, #16]
    fe84:	add.w	r2, r4, #20
    fe88:	mov.w	r3, fp, lsl #2
    fe8c:	str	r3, [sp, #4]
    fe8e:	add.w	r0, r2, fp, lsl #2
    fe92:	movs	r3, #0
    fe94:	mov	ip, r2
    fe96:	ldr.w	r1, [r2], #4
    fe9a:	cmp.w	r1, #4294967295
    fe9e:	beq.n	fede <__gethex+0x3ce>
    fea0:	adds	r1, #1
    fea2:	str.w	r1, [ip]
    fea6:	cmp.w	r8, #2
    feaa:	add.w	r2, r4, #20
    feae:	bne.n	ff2c <__gethex+0x41c>
    feb0:	ldr	r3, [r7, #0]
    feb2:	subs	r3, #1
    feb4:	cmp	r3, r5
    feb6:	bne.n	fed0 <__gethex+0x3c0>
    feb8:	asrs	r1, r5, #5
    feba:	movs	r3, #1
    febc:	and.w	r5, r5, #31
    fec0:	lsl.w	r5, r3, r5
    fec4:	ldr.w	r3, [r2, r1, lsl #2]
    fec8:	tst	r5, r3
    feca:	it	ne
    fecc:	movne.w	r8, #1
    fed0:	orr.w	r8, r8, #32
    fed4:	ldr	r3, [sp, #56]	; 0x38
    fed6:	str	r4, [r3, #0]
    fed8:	ldr	r3, [sp, #8]
    feda:	str	r6, [r3, #0]
    fedc:	b.n	fc24 <__gethex+0x114>
    fede:	cmp	r0, r2
    fee0:	str.w	r3, [r2, #-4]
    fee4:	bhi.n	fe94 <__gethex+0x384>
    fee6:	ldr	r2, [r4, #8]
    fee8:	cmp	fp, r2
    feea:	blt.n	ff1c <__gethex+0x40c>
    feec:	ldr	r1, [r4, #4]
    feee:	mov	r0, r9
    fef0:	adds	r1, #1
    fef2:	bl	10114 <_Balloc>
    fef6:	mov	sl, r0
    fef8:	cbnz	r0, ff02 <__gethex+0x3f2>
    fefa:	ldr	r3, [pc, #108]	; (ff68 <__gethex+0x458>)
    fefc:	mov	r2, r0
    fefe:	movs	r1, #132	; 0x84
    ff00:	b.n	fc6a <__gethex+0x15a>
    ff02:	ldr	r2, [r4, #16]
    ff04:	adds	r2, #2
    ff06:	add.w	r1, r4, #12
    ff0a:	lsls	r2, r2, #2
    ff0c:	adds	r0, #12
    ff0e:	bl	a218 <memcpy>
    ff12:	mov	r1, r4
    ff14:	mov	r0, r9
    ff16:	bl	10194 <_Bfree>
    ff1a:	mov	r4, sl
    ff1c:	ldr	r2, [r4, #16]
    ff1e:	adds	r1, r2, #1
    ff20:	add.w	r2, r4, r2, lsl #2
    ff24:	str	r1, [r4, #16]
    ff26:	movs	r1, #1
    ff28:	str	r1, [r2, #20]
    ff2a:	b.n	fea6 <__gethex+0x396>
    ff2c:	ldr	r1, [r4, #16]
    ff2e:	cmp	r1, fp
    ff30:	ble.n	ff4a <__gethex+0x43a>
    ff32:	movs	r1, #1
    ff34:	mov	r0, r4
    ff36:	bl	fa40 <rshift>
    ff3a:	ldr	r3, [r7, #8]
    ff3c:	adds	r6, #1
    ff3e:	cmp	r3, r6
    ff40:	blt.w	fcfa <__gethex+0x1ea>
    ff44:	mov.w	r8, #1
    ff48:	b.n	fed0 <__gethex+0x3c0>
    ff4a:	ands.w	r5, r5, #31
    ff4e:	beq.n	ff44 <__gethex+0x434>
    ff50:	ldr	r3, [sp, #4]
    ff52:	add	r2, r3
    ff54:	rsb	r5, r5, #32
    ff58:	ldr.w	r0, [r2, #-4]
    ff5c:	bl	102f8 <__hi0bits>
    ff60:	cmp	r0, r5
    ff62:	blt.n	ff32 <__gethex+0x422>
    ff64:	b.n	ff44 <__gethex+0x434>
    ff66:	nop
    ff68:	.word	0x200013c9

0000ff6c <L_shift>:
    ff6c:	rsb	r2, r2, #8
    ff70:	lsls	r2, r2, #2
    ff72:	push	{r4, r5, r6, lr}
    ff74:	rsb	r6, r2, #32
    ff78:	ldr	r3, [r0, #4]
    ff7a:	ldr	r4, [r0, #0]
    ff7c:	lsl.w	r5, r3, r6
    ff80:	orrs	r4, r5
    ff82:	lsrs	r3, r2
    ff84:	str	r4, [r0, #0]
    ff86:	str.w	r3, [r0, #4]!
    ff8a:	cmp	r0, r1
    ff8c:	bcc.n	ff78 <L_shift+0xc>
    ff8e:	pop	{r4, r5, r6, pc}

0000ff90 <__match>:
    ff90:	push	{r4, r5, lr}
    ff92:	ldr	r3, [r0, #0]
    ff94:	adds	r3, #1
    ff96:	ldrb.w	r4, [r1], #1
    ff9a:	cbnz	r4, ffa2 <__match+0x12>
    ff9c:	str	r3, [r0, #0]
    ff9e:	movs	r0, #1
    ffa0:	pop	{r4, r5, pc}
    ffa2:	ldrb.w	r2, [r3], #1
    ffa6:	sub.w	r5, r2, #65	; 0x41
    ffaa:	cmp	r5, #25
    ffac:	it	ls
    ffae:	addls	r2, #32
    ffb0:	cmp	r2, r4
    ffb2:	beq.n	ff96 <__match+0x6>
    ffb4:	movs	r0, #0
    ffb6:	b.n	ffa0 <__match+0x10>

0000ffb8 <__hexnan>:
    ffb8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffbc:	ldr	r3, [r1, #0]
    ffbe:	ldr	r1, [r0, #0]
    ffc0:	asrs	r6, r3, #5
    ffc2:	add.w	r6, r2, r6, lsl #2
    ffc6:	ands.w	r3, r3, #31
    ffca:	sub	sp, #28
    ffcc:	it	ne
    ffce:	addne	r6, #4
    ffd0:	movs	r5, #0
    ffd2:	subs	r7, r6, #4
    ffd4:	mov	sl, r0
    ffd6:	mov	r8, r2
    ffd8:	str	r3, [sp, #4]
    ffda:	str.w	r5, [r6, #-4]
    ffde:	mov	r9, r7
    ffe0:	mov	r4, r7
    ffe2:	str	r5, [sp, #8]
    ffe4:	mov	fp, r5
    ffe6:	ldrb	r2, [r1, #1]
    ffe8:	adds	r3, r1, #1
    ffea:	str	r3, [sp, #12]
    ffec:	cbz	r2, 10040 <__hexnan+0x88>
    ffee:	mov	r0, r2
    fff0:	str	r1, [sp, #20]
    fff2:	str	r2, [sp, #16]
    fff4:	bl	fae4 <__hexdig_fun>
    fff8:	cmp	r0, #0
    fffa:	bne.n	1009c <__hexnan+0xe4>
    fffc:	ldr	r2, [sp, #16]
    fffe:	ldr	r1, [sp, #20]
   10000:	cmp	r2, #32
   10002:	bhi.n	10036 <__hexnan+0x7e>
   10004:	ldr	r3, [sp, #8]
   10006:	cmp	fp, r3
   10008:	ble.n	10032 <__hexnan+0x7a>
   1000a:	cmp	r4, r9
   1000c:	bcs.n	1001c <__hexnan+0x64>
   1000e:	cmp	r5, #7
   10010:	bgt.n	1001c <__hexnan+0x64>
   10012:	mov	r2, r5
   10014:	mov	r1, r9
   10016:	mov	r0, r4
   10018:	bl	ff6c <L_shift>
   1001c:	cmp	r4, r8
   1001e:	bls.n	100c2 <__hexnan+0x10a>
   10020:	movs	r3, #0
   10022:	sub.w	r9, r4, #4
   10026:	str.w	r3, [r4, #-4]
   1002a:	str.w	fp, [sp, #8]
   1002e:	mov	r4, r9
   10030:	mov	r5, r3
   10032:	ldr	r1, [sp, #12]
   10034:	b.n	ffe6 <__hexnan+0x2e>
   10036:	cmp	r2, #41	; 0x29
   10038:	bne.n	100e6 <__hexnan+0x12e>
   1003a:	adds	r1, #2
   1003c:	str.w	r1, [sl]
   10040:	cmp.w	fp, #0
   10044:	beq.n	100e6 <__hexnan+0x12e>
   10046:	cmp	r4, r9
   10048:	bcs.n	10058 <__hexnan+0xa0>
   1004a:	cmp	r5, #7
   1004c:	bgt.n	10058 <__hexnan+0xa0>
   1004e:	mov	r2, r5
   10050:	mov	r1, r9
   10052:	mov	r0, r4
   10054:	bl	ff6c <L_shift>
   10058:	cmp	r4, r8
   1005a:	bls.n	100c6 <__hexnan+0x10e>
   1005c:	sub.w	r2, r8, #4
   10060:	mov	r3, r4
   10062:	ldr.w	r1, [r3], #4
   10066:	str.w	r1, [r2, #4]!
   1006a:	cmp	r7, r3
   1006c:	bcs.n	10062 <__hexnan+0xaa>
   1006e:	subs	r3, r7, r4
   10070:	bic.w	r3, r3, #3
   10074:	adds	r3, #4
   10076:	subs	r6, #3
   10078:	adds	r4, #1
   1007a:	cmp	r6, r4
   1007c:	it	cc
   1007e:	movcc	r3, #4
   10080:	add	r3, r8
   10082:	movs	r2, #0
   10084:	str.w	r2, [r3], #4
   10088:	cmp	r7, r3
   1008a:	bcs.n	10084 <__hexnan+0xcc>
   1008c:	ldr	r3, [r7, #0]
   1008e:	cbnz	r3, 10098 <__hexnan+0xe0>
   10090:	cmp	r7, r8
   10092:	bne.n	100e2 <__hexnan+0x12a>
   10094:	movs	r3, #1
   10096:	str	r3, [r7, #0]
   10098:	movs	r0, #5
   1009a:	b.n	100e8 <__hexnan+0x130>
   1009c:	adds	r5, #1
   1009e:	cmp	r5, #8
   100a0:	add.w	fp, fp, #1
   100a4:	ble.n	100b4 <__hexnan+0xfc>
   100a6:	cmp	r4, r8
   100a8:	bls.n	10032 <__hexnan+0x7a>
   100aa:	movs	r3, #0
   100ac:	str.w	r3, [r4, #-4]
   100b0:	movs	r5, #1
   100b2:	subs	r4, #4
   100b4:	ldr	r2, [r4, #0]
   100b6:	and.w	r0, r0, #15
   100ba:	orr.w	r0, r0, r2, lsl #4
   100be:	str	r0, [r4, #0]
   100c0:	b.n	10032 <__hexnan+0x7a>
   100c2:	movs	r5, #8
   100c4:	b.n	10032 <__hexnan+0x7a>
   100c6:	ldr	r3, [sp, #4]
   100c8:	cmp	r3, #0
   100ca:	beq.n	1008c <__hexnan+0xd4>
   100cc:	rsb	r3, r3, #32
   100d0:	mov.w	r2, #4294967295
   100d4:	lsrs	r2, r3
   100d6:	ldr.w	r3, [r6, #-4]
   100da:	ands	r3, r2
   100dc:	str.w	r3, [r6, #-4]
   100e0:	b.n	1008c <__hexnan+0xd4>
   100e2:	subs	r7, #4
   100e4:	b.n	1008c <__hexnan+0xd4>
   100e6:	movs	r0, #4
   100e8:	add	sp, #28
   100ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000100ee <__ascii_mbtowc>:
   100ee:	sub	sp, #8
   100f0:	cbnz	r1, 100f4 <__ascii_mbtowc+0x6>
   100f2:	add	r1, sp, #4
   100f4:	cbz	r2, 10108 <__ascii_mbtowc+0x1a>
   100f6:	cbz	r3, 1010c <__ascii_mbtowc+0x1e>
   100f8:	ldrb	r3, [r2, #0]
   100fa:	str	r3, [r1, #0]
   100fc:	ldrb	r2, [r2, #0]
   100fe:	subs	r0, r2, #0
   10100:	it	ne
   10102:	movne	r0, #1
   10104:	add	sp, #8
   10106:	bx	lr
   10108:	mov	r0, r2
   1010a:	b.n	10104 <__ascii_mbtowc+0x16>
   1010c:	mvn.w	r0, #1
   10110:	b.n	10104 <__ascii_mbtowc+0x16>
	...

00010114 <_Balloc>:
   10114:	push	{r4, r5, r6, lr}
   10116:	ldr	r6, [r0, #28]
   10118:	mov	r4, r0
   1011a:	mov	r5, r1
   1011c:	cbnz	r6, 1013c <_Balloc+0x28>
   1011e:	movs	r0, #16
   10120:	bl	cc18 <malloc>
   10124:	mov	r2, r0
   10126:	str	r0, [r4, #28]
   10128:	cbnz	r0, 10134 <_Balloc+0x20>
   1012a:	ldr	r3, [pc, #96]	; (1018c <_Balloc+0x78>)
   1012c:	ldr	r0, [pc, #96]	; (10190 <_Balloc+0x7c>)
   1012e:	movs	r1, #107	; 0x6b
   10130:	bl	1165c <__assert_func>
   10134:	strd	r6, r6, [r0, #4]
   10138:	str	r6, [r0, #0]
   1013a:	str	r6, [r0, #12]
   1013c:	ldr	r6, [r4, #28]
   1013e:	ldr	r3, [r6, #12]
   10140:	cbz	r3, 10164 <_Balloc+0x50>
   10142:	ldr	r3, [r4, #28]
   10144:	ldr	r3, [r3, #12]
   10146:	ldr.w	r0, [r3, r5, lsl #2]
   1014a:	cbnz	r0, 1017c <_Balloc+0x68>
   1014c:	movs	r1, #1
   1014e:	lsl.w	r6, r1, r5
   10152:	adds	r2, r6, #5
   10154:	lsls	r2, r2, #2
   10156:	mov	r0, r4
   10158:	bl	11698 <_calloc_r>
   1015c:	cbz	r0, 10178 <_Balloc+0x64>
   1015e:	strd	r5, r6, [r0, #4]
   10162:	b.n	10182 <_Balloc+0x6e>
   10164:	movs	r2, #33	; 0x21
   10166:	movs	r1, #4
   10168:	mov	r0, r4
   1016a:	bl	11698 <_calloc_r>
   1016e:	ldr	r3, [r4, #28]
   10170:	str	r0, [r6, #12]
   10172:	ldr	r3, [r3, #12]
   10174:	cmp	r3, #0
   10176:	bne.n	10142 <_Balloc+0x2e>
   10178:	movs	r0, #0
   1017a:	pop	{r4, r5, r6, pc}
   1017c:	ldr	r2, [r0, #0]
   1017e:	str.w	r2, [r3, r5, lsl #2]
   10182:	movs	r3, #0
   10184:	strd	r3, r3, [r0, #12]
   10188:	b.n	1017a <_Balloc+0x66>
   1018a:	nop
   1018c:	.word	0x20001359
   10190:	.word	0x20000c6c

00010194 <_Bfree>:
   10194:	push	{r4, r5, r6, lr}
   10196:	ldr	r6, [r0, #28]
   10198:	mov	r5, r0
   1019a:	mov	r4, r1
   1019c:	cbnz	r6, 101bc <_Bfree+0x28>
   1019e:	movs	r0, #16
   101a0:	bl	cc18 <malloc>
   101a4:	mov	r2, r0
   101a6:	str	r0, [r5, #28]
   101a8:	cbnz	r0, 101b4 <_Bfree+0x20>
   101aa:	ldr	r3, [pc, #36]	; (101d0 <_Bfree+0x3c>)
   101ac:	ldr	r0, [pc, #36]	; (101d4 <_Bfree+0x40>)
   101ae:	movs	r1, #143	; 0x8f
   101b0:	bl	1165c <__assert_func>
   101b4:	strd	r6, r6, [r0, #4]
   101b8:	str	r6, [r0, #0]
   101ba:	str	r6, [r0, #12]
   101bc:	cbz	r4, 101ce <_Bfree+0x3a>
   101be:	ldr	r3, [r5, #28]
   101c0:	ldr	r2, [r4, #4]
   101c2:	ldr	r3, [r3, #12]
   101c4:	ldr.w	r1, [r3, r2, lsl #2]
   101c8:	str	r1, [r4, #0]
   101ca:	str.w	r4, [r3, r2, lsl #2]
   101ce:	pop	{r4, r5, r6, pc}
   101d0:	.word	0x20001359
   101d4:	.word	0x20000c6c

000101d8 <__multadd>:
   101d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101dc:	ldr	r5, [r1, #16]
   101de:	mov	r7, r0
   101e0:	mov	r4, r1
   101e2:	mov	r6, r3
   101e4:	add.w	ip, r1, #20
   101e8:	movs	r0, #0
   101ea:	ldr.w	r3, [ip]
   101ee:	uxth	r1, r3
   101f0:	mla	r1, r2, r1, r6
   101f4:	lsrs	r6, r3, #16
   101f6:	lsrs	r3, r1, #16
   101f8:	mla	r3, r2, r6, r3
   101fc:	uxth	r1, r1
   101fe:	adds	r0, #1
   10200:	add.w	r1, r1, r3, lsl #16
   10204:	cmp	r5, r0
   10206:	str.w	r1, [ip], #4
   1020a:	mov.w	r6, r3, lsr #16
   1020e:	bgt.n	101ea <__multadd+0x12>
   10210:	cbz	r6, 10256 <__multadd+0x7e>
   10212:	ldr	r3, [r4, #8]
   10214:	cmp	r3, r5
   10216:	bgt.n	1024c <__multadd+0x74>
   10218:	ldr	r1, [r4, #4]
   1021a:	mov	r0, r7
   1021c:	adds	r1, #1
   1021e:	bl	10114 <_Balloc>
   10222:	mov	r8, r0
   10224:	cbnz	r0, 10232 <__multadd+0x5a>
   10226:	mov	r2, r0
   10228:	ldr	r3, [pc, #48]	; (1025c <__multadd+0x84>)
   1022a:	ldr	r0, [pc, #52]	; (10260 <__multadd+0x88>)
   1022c:	movs	r1, #186	; 0xba
   1022e:	bl	1165c <__assert_func>
   10232:	ldr	r2, [r4, #16]
   10234:	adds	r2, #2
   10236:	add.w	r1, r4, #12
   1023a:	lsls	r2, r2, #2
   1023c:	adds	r0, #12
   1023e:	bl	a218 <memcpy>
   10242:	mov	r1, r4
   10244:	mov	r0, r7
   10246:	bl	10194 <_Bfree>
   1024a:	mov	r4, r8
   1024c:	add.w	r3, r4, r5, lsl #2
   10250:	adds	r5, #1
   10252:	str	r6, [r3, #20]
   10254:	str	r5, [r4, #16]
   10256:	mov	r0, r4
   10258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1025c:	.word	0x200013c9
   10260:	.word	0x20000c6c

00010264 <__s2b>:
   10264:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10268:	mov	r4, r1
   1026a:	mov	r5, r2
   1026c:	mov	r7, r3
   1026e:	movs	r2, #9
   10270:	adds	r3, #8
   10272:	mov	r6, r0
   10274:	sdiv	r3, r3, r2
   10278:	movs	r1, #0
   1027a:	movs	r2, #1
   1027c:	cmp	r2, r3
   1027e:	blt.n	10294 <__s2b+0x30>
   10280:	mov	r0, r6
   10282:	bl	10114 <_Balloc>
   10286:	cbnz	r0, 1029a <__s2b+0x36>
   10288:	mov	r2, r0
   1028a:	ldr	r3, [pc, #100]	; (102f0 <__s2b+0x8c>)
   1028c:	ldr	r0, [pc, #100]	; (102f4 <__s2b+0x90>)
   1028e:	movs	r1, #211	; 0xd3
   10290:	bl	1165c <__assert_func>
   10294:	lsls	r2, r2, #1
   10296:	adds	r1, #1
   10298:	b.n	1027c <__s2b+0x18>
   1029a:	ldr	r3, [sp, #32]
   1029c:	str	r3, [r0, #20]
   1029e:	cmp	r5, #9
   102a0:	mov.w	r3, #1
   102a4:	str	r3, [r0, #16]
   102a6:	ble.n	102d6 <__s2b+0x72>
   102a8:	add.w	r9, r4, #9
   102ac:	mov	r8, r9
   102ae:	add	r4, r5
   102b0:	ldrb.w	r3, [r8], #1
   102b4:	mov	r1, r0
   102b6:	subs	r3, #48	; 0x30
   102b8:	movs	r2, #10
   102ba:	mov	r0, r6
   102bc:	bl	101d8 <__multadd>
   102c0:	cmp	r8, r4
   102c2:	bne.n	102b0 <__s2b+0x4c>
   102c4:	sub.w	r4, r5, #8
   102c8:	add	r4, r9
   102ca:	subs	r5, r5, r4
   102cc:	adds	r3, r4, r5
   102ce:	cmp	r3, r7
   102d0:	blt.n	102dc <__s2b+0x78>
   102d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   102d6:	adds	r4, #10
   102d8:	movs	r5, #9
   102da:	b.n	102ca <__s2b+0x66>
   102dc:	ldrb.w	r3, [r4], #1
   102e0:	mov	r1, r0
   102e2:	subs	r3, #48	; 0x30
   102e4:	movs	r2, #10
   102e6:	mov	r0, r6
   102e8:	bl	101d8 <__multadd>
   102ec:	b.n	102cc <__s2b+0x68>
   102ee:	nop
   102f0:	.word	0x200013c9
   102f4:	.word	0x20000c6c

000102f8 <__hi0bits>:
   102f8:	lsrs	r3, r0, #16
   102fa:	lsls	r3, r3, #16
   102fc:	cbnz	r3, 10334 <__hi0bits+0x3c>
   102fe:	lsls	r0, r0, #16
   10300:	movs	r3, #16
   10302:	tst.w	r0, #4278190080	; 0xff000000
   10306:	itt	eq
   10308:	lsleq	r0, r0, #8
   1030a:	addeq	r3, #8
   1030c:	tst.w	r0, #4026531840	; 0xf0000000
   10310:	itt	eq
   10312:	lsleq	r0, r0, #4
   10314:	addeq	r3, #4
   10316:	tst.w	r0, #3221225472	; 0xc0000000
   1031a:	itt	eq
   1031c:	lsleq	r0, r0, #2
   1031e:	addeq	r3, #2
   10320:	cmp	r0, #0
   10322:	blt.n	10330 <__hi0bits+0x38>
   10324:	tst.w	r0, #1073741824	; 0x40000000
   10328:	add.w	r3, r3, #1
   1032c:	it	eq
   1032e:	moveq	r3, #32
   10330:	mov	r0, r3
   10332:	bx	lr
   10334:	movs	r3, #0
   10336:	b.n	10302 <__hi0bits+0xa>

00010338 <__lo0bits>:
   10338:	ldr	r3, [r0, #0]
   1033a:	ands.w	r2, r3, #7
   1033e:	beq.n	1035a <__lo0bits+0x22>
   10340:	lsls	r1, r3, #31
   10342:	bmi.n	1038a <__lo0bits+0x52>
   10344:	lsls	r2, r3, #30
   10346:	itett	mi
   10348:	lsrmi	r3, r3, #1
   1034a:	lsrpl	r3, r3, #2
   1034c:	strmi	r3, [r0, #0]
   1034e:	movmi	r2, #1
   10350:	itt	pl
   10352:	strpl	r3, [r0, #0]
   10354:	movpl	r2, #2
   10356:	mov	r0, r2
   10358:	bx	lr
   1035a:	uxth	r1, r3
   1035c:	cbnz	r1, 10362 <__lo0bits+0x2a>
   1035e:	lsrs	r3, r3, #16
   10360:	movs	r2, #16
   10362:	uxtb	r1, r3
   10364:	cbnz	r1, 1036a <__lo0bits+0x32>
   10366:	adds	r2, #8
   10368:	lsrs	r3, r3, #8
   1036a:	lsls	r1, r3, #28
   1036c:	itt	eq
   1036e:	lsreq	r3, r3, #4
   10370:	addeq	r2, #4
   10372:	lsls	r1, r3, #30
   10374:	itt	eq
   10376:	lsreq	r3, r3, #2
   10378:	addeq	r2, #2
   1037a:	lsls	r1, r3, #31
   1037c:	bmi.n	10386 <__lo0bits+0x4e>
   1037e:	lsrs	r3, r3, #1
   10380:	add.w	r2, r2, #1
   10384:	beq.n	1038e <__lo0bits+0x56>
   10386:	str	r3, [r0, #0]
   10388:	b.n	10356 <__lo0bits+0x1e>
   1038a:	movs	r2, #0
   1038c:	b.n	10356 <__lo0bits+0x1e>
   1038e:	movs	r2, #32
   10390:	b.n	10356 <__lo0bits+0x1e>
	...

00010394 <__i2b>:
   10394:	push	{r4, lr}
   10396:	mov	r4, r1
   10398:	movs	r1, #1
   1039a:	bl	10114 <_Balloc>
   1039e:	mov	r2, r0
   103a0:	cbnz	r0, 103ae <__i2b+0x1a>
   103a2:	ldr	r3, [pc, #20]	; (103b8 <__i2b+0x24>)
   103a4:	ldr	r0, [pc, #20]	; (103bc <__i2b+0x28>)
   103a6:	movw	r1, #325	; 0x145
   103aa:	bl	1165c <__assert_func>
   103ae:	movs	r3, #1
   103b0:	str	r4, [r0, #20]
   103b2:	str	r3, [r0, #16]
   103b4:	pop	{r4, pc}
   103b6:	nop
   103b8:	.word	0x200013c9
   103bc:	.word	0x20000c6c

000103c0 <__multiply>:
   103c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   103c4:	mov	r9, r2
   103c6:	ldr	r2, [r1, #16]
   103c8:	ldr.w	r3, [r9, #16]
   103cc:	cmp	r2, r3
   103ce:	it	lt
   103d0:	movlt	r3, r1
   103d2:	mov	r4, r1
   103d4:	itt	lt
   103d6:	movlt	r4, r9
   103d8:	movlt	r9, r3
   103da:	ldr	r7, [r4, #16]
   103dc:	ldr.w	sl, [r9, #16]
   103e0:	ldr	r3, [r4, #8]
   103e2:	ldr	r1, [r4, #4]
   103e4:	add.w	r6, r7, sl
   103e8:	cmp	r3, r6
   103ea:	sub	sp, #20
   103ec:	it	lt
   103ee:	addlt	r1, #1
   103f0:	bl	10114 <_Balloc>
   103f4:	cbnz	r0, 10404 <__multiply+0x44>
   103f6:	mov	r2, r0
   103f8:	ldr	r3, [pc, #272]	; (1050c <__multiply+0x14c>)
   103fa:	ldr	r0, [pc, #276]	; (10510 <__multiply+0x150>)
   103fc:	mov.w	r1, #354	; 0x162
   10400:	bl	1165c <__assert_func>
   10404:	add.w	r5, r0, #20
   10408:	add.w	r8, r5, r6, lsl #2
   1040c:	mov	r3, r5
   1040e:	movs	r2, #0
   10410:	cmp	r3, r8
   10412:	bcc.n	10458 <__multiply+0x98>
   10414:	add.w	r3, r4, #20
   10418:	add.w	r7, r3, r7, lsl #2
   1041c:	add.w	r3, r9, #20
   10420:	add.w	r2, r3, sl, lsl #2
   10424:	str	r2, [sp, #8]
   10426:	subs	r2, r7, r4
   10428:	subs	r2, #21
   1042a:	bic.w	r2, r2, #3
   1042e:	adds	r2, #4
   10430:	add.w	r1, r4, #21
   10434:	cmp	r7, r1
   10436:	it	cc
   10438:	movcc	r2, #4
   1043a:	str	r2, [sp, #4]
   1043c:	ldr	r2, [sp, #8]
   1043e:	str	r3, [sp, #12]
   10440:	cmp	r2, r3
   10442:	bhi.n	1045e <__multiply+0x9e>
   10444:	cmp	r6, #0
   10446:	ble.n	10450 <__multiply+0x90>
   10448:	ldr.w	r3, [r8, #-4]!
   1044c:	cmp	r3, #0
   1044e:	beq.n	10508 <__multiply+0x148>
   10450:	str	r6, [r0, #16]
   10452:	add	sp, #20
   10454:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10458:	str.w	r2, [r3], #4
   1045c:	b.n	10410 <__multiply+0x50>
   1045e:	ldrh.w	sl, [r3]
   10462:	cmp.w	sl, #0
   10466:	beq.n	104b2 <__multiply+0xf2>
   10468:	add.w	lr, r4, #20
   1046c:	mov	r9, r5
   1046e:	mov.w	ip, #0
   10472:	ldr.w	r2, [lr], #4
   10476:	ldr.w	r1, [r9]
   1047a:	uxth.w	fp, r2
   1047e:	uxth	r1, r1
   10480:	mla	r1, sl, fp, r1
   10484:	mov.w	fp, r2, lsr #16
   10488:	ldr.w	r2, [r9]
   1048c:	add	r1, ip
   1048e:	mov.w	ip, r2, lsr #16
   10492:	mla	r2, sl, fp, ip
   10496:	add.w	r2, r2, r1, lsr #16
   1049a:	uxth	r1, r1
   1049c:	orr.w	r1, r1, r2, lsl #16
   104a0:	cmp	r7, lr
   104a2:	str.w	r1, [r9], #4
   104a6:	mov.w	ip, r2, lsr #16
   104aa:	bhi.n	10472 <__multiply+0xb2>
   104ac:	ldr	r2, [sp, #4]
   104ae:	str.w	ip, [r5, r2]
   104b2:	ldr	r2, [sp, #12]
   104b4:	ldrh.w	r9, [r2, #2]
   104b8:	adds	r3, #4
   104ba:	cmp.w	r9, #0
   104be:	beq.n	10504 <__multiply+0x144>
   104c0:	ldr	r1, [r5, #0]
   104c2:	add.w	ip, r4, #20
   104c6:	mov	lr, r5
   104c8:	mov.w	sl, #0
   104cc:	ldrh.w	fp, [ip]
   104d0:	ldrh.w	r2, [lr, #2]
   104d4:	mla	r2, r9, fp, r2
   104d8:	add	r2, sl
   104da:	uxth	r1, r1
   104dc:	orr.w	r1, r1, r2, lsl #16
   104e0:	str.w	r1, [lr], #4
   104e4:	ldr.w	r1, [ip], #4
   104e8:	mov.w	sl, r1, lsr #16
   104ec:	ldrh.w	r1, [lr]
   104f0:	mla	r1, r9, sl, r1
   104f4:	add.w	r1, r1, r2, lsr #16
   104f8:	cmp	r7, ip
   104fa:	mov.w	sl, r1, lsr #16
   104fe:	bhi.n	104cc <__multiply+0x10c>
   10500:	ldr	r2, [sp, #4]
   10502:	str	r1, [r5, r2]
   10504:	adds	r5, #4
   10506:	b.n	1043c <__multiply+0x7c>
   10508:	subs	r6, #1
   1050a:	b.n	10444 <__multiply+0x84>
   1050c:	.word	0x200013c9
   10510:	.word	0x20000c6c

00010514 <__pow5mult>:
   10514:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10518:	mov	r5, r2
   1051a:	ands.w	r2, r2, #3
   1051e:	mov	r6, r0
   10520:	mov	r7, r1
   10522:	beq.n	10534 <__pow5mult+0x20>
   10524:	ldr	r4, [pc, #148]	; (105bc <__pow5mult+0xa8>)
   10526:	subs	r2, #1
   10528:	movs	r3, #0
   1052a:	ldr.w	r2, [r4, r2, lsl #2]
   1052e:	bl	101d8 <__multadd>
   10532:	mov	r7, r0
   10534:	asrs	r5, r5, #2
   10536:	beq.n	105b4 <__pow5mult+0xa0>
   10538:	ldr	r4, [r6, #28]
   1053a:	cbnz	r4, 1055c <__pow5mult+0x48>
   1053c:	movs	r0, #16
   1053e:	bl	cc18 <malloc>
   10542:	mov	r2, r0
   10544:	str	r0, [r6, #28]
   10546:	cbnz	r0, 10554 <__pow5mult+0x40>
   10548:	ldr	r3, [pc, #116]	; (105c0 <__pow5mult+0xac>)
   1054a:	ldr	r0, [pc, #120]	; (105c4 <__pow5mult+0xb0>)
   1054c:	movw	r1, #435	; 0x1b3
   10550:	bl	1165c <__assert_func>
   10554:	strd	r4, r4, [r0, #4]
   10558:	str	r4, [r0, #0]
   1055a:	str	r4, [r0, #12]
   1055c:	ldr.w	r8, [r6, #28]
   10560:	ldr.w	r4, [r8, #8]
   10564:	cbnz	r4, 1057a <__pow5mult+0x66>
   10566:	movw	r1, #625	; 0x271
   1056a:	mov	r0, r6
   1056c:	bl	10394 <__i2b>
   10570:	movs	r3, #0
   10572:	str.w	r0, [r8, #8]
   10576:	mov	r4, r0
   10578:	str	r3, [r0, #0]
   1057a:	mov.w	r9, #0
   1057e:	lsls	r3, r5, #31
   10580:	bpl.n	10598 <__pow5mult+0x84>
   10582:	mov	r1, r7
   10584:	mov	r2, r4
   10586:	mov	r0, r6
   10588:	bl	103c0 <__multiply>
   1058c:	mov	r1, r7
   1058e:	mov	r8, r0
   10590:	mov	r0, r6
   10592:	bl	10194 <_Bfree>
   10596:	mov	r7, r8
   10598:	asrs	r5, r5, #1
   1059a:	beq.n	105b4 <__pow5mult+0xa0>
   1059c:	ldr	r0, [r4, #0]
   1059e:	cbnz	r0, 105b0 <__pow5mult+0x9c>
   105a0:	mov	r2, r4
   105a2:	mov	r1, r4
   105a4:	mov	r0, r6
   105a6:	bl	103c0 <__multiply>
   105aa:	str	r0, [r4, #0]
   105ac:	str.w	r9, [r0]
   105b0:	mov	r4, r0
   105b2:	b.n	1057e <__pow5mult+0x6a>
   105b4:	mov	r0, r7
   105b6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   105ba:	nop
   105bc:	.word	0x200009ac
   105c0:	.word	0x20001359
   105c4:	.word	0x20000c6c

000105c8 <__lshift>:
   105c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   105cc:	mov	r4, r1
   105ce:	ldr	r1, [r1, #4]
   105d0:	ldr	r3, [r4, #16]
   105d2:	add.w	r8, r3, r2, asr #5
   105d6:	ldr	r3, [r4, #8]
   105d8:	mov	r7, r0
   105da:	mov	r9, r2
   105dc:	mov.w	sl, r2, asr #5
   105e0:	add.w	r6, r8, #1
   105e4:	cmp	r3, r6
   105e6:	blt.n	10600 <__lshift+0x38>
   105e8:	mov	r0, r7
   105ea:	bl	10114 <_Balloc>
   105ee:	mov	r5, r0
   105f0:	cbnz	r0, 10606 <__lshift+0x3e>
   105f2:	mov	r2, r0
   105f4:	ldr	r3, [pc, #160]	; (10698 <__lshift+0xd0>)
   105f6:	ldr	r0, [pc, #164]	; (1069c <__lshift+0xd4>)
   105f8:	mov.w	r1, #478	; 0x1de
   105fc:	bl	1165c <__assert_func>
   10600:	adds	r1, #1
   10602:	lsls	r3, r3, #1
   10604:	b.n	105e4 <__lshift+0x1c>
   10606:	movs	r3, #0
   10608:	add.w	r1, r0, #20
   1060c:	add.w	r2, r0, #16
   10610:	mov	r0, r3
   10612:	cmp	r3, sl
   10614:	blt.n	1067e <__lshift+0xb6>
   10616:	ldr	r0, [r4, #16]
   10618:	bic.w	sl, sl, sl, asr #31
   1061c:	add.w	r3, r4, #20
   10620:	ands.w	r9, r9, #31
   10624:	add.w	r1, r1, sl, lsl #2
   10628:	add.w	ip, r3, r0, lsl #2
   1062c:	beq.n	10686 <__lshift+0xbe>
   1062e:	rsb	lr, r9, #32
   10632:	mov	sl, r1
   10634:	movs	r2, #0
   10636:	ldr	r0, [r3, #0]
   10638:	lsl.w	r0, r0, r9
   1063c:	orrs	r0, r2
   1063e:	str.w	r0, [sl], #4
   10642:	ldr.w	r2, [r3], #4
   10646:	cmp	ip, r3
   10648:	lsr.w	r2, r2, lr
   1064c:	bhi.n	10636 <__lshift+0x6e>
   1064e:	sub.w	r3, ip, r4
   10652:	subs	r3, #21
   10654:	bic.w	r3, r3, #3
   10658:	adds	r3, #4
   1065a:	add.w	r0, r4, #21
   1065e:	cmp	ip, r0
   10660:	it	cc
   10662:	movcc	r3, #4
   10664:	str	r2, [r1, r3]
   10666:	cbz	r2, 1066c <__lshift+0xa4>
   10668:	add.w	r6, r8, #2
   1066c:	subs	r6, #1
   1066e:	mov	r0, r7
   10670:	str	r6, [r5, #16]
   10672:	mov	r1, r4
   10674:	bl	10194 <_Bfree>
   10678:	mov	r0, r5
   1067a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1067e:	str.w	r0, [r2, #4]!
   10682:	adds	r3, #1
   10684:	b.n	10612 <__lshift+0x4a>
   10686:	subs	r1, #4
   10688:	ldr.w	r2, [r3], #4
   1068c:	str.w	r2, [r1, #4]!
   10690:	cmp	ip, r3
   10692:	bhi.n	10688 <__lshift+0xc0>
   10694:	b.n	1066c <__lshift+0xa4>
   10696:	nop
   10698:	.word	0x200013c9
   1069c:	.word	0x20000c6c

000106a0 <__mcmp>:
   106a0:	push	{r4, r5, lr}
   106a2:	ldr	r2, [r0, #16]
   106a4:	ldr	r4, [r1, #16]
   106a6:	subs	r2, r2, r4
   106a8:	bne.n	106c8 <__mcmp+0x28>
   106aa:	add.w	r3, r0, #20
   106ae:	adds	r1, #20
   106b0:	add.w	r0, r3, r4, lsl #2
   106b4:	add.w	r1, r1, r4, lsl #2
   106b8:	ldr.w	r5, [r0, #-4]!
   106bc:	ldr.w	r4, [r1, #-4]!
   106c0:	cmp	r5, r4
   106c2:	beq.n	106cc <__mcmp+0x2c>
   106c4:	bcc.n	106d2 <__mcmp+0x32>
   106c6:	movs	r2, #1
   106c8:	mov	r0, r2
   106ca:	pop	{r4, r5, pc}
   106cc:	cmp	r3, r0
   106ce:	bcc.n	106b8 <__mcmp+0x18>
   106d0:	b.n	106c8 <__mcmp+0x28>
   106d2:	mov.w	r2, #4294967295
   106d6:	b.n	106c8 <__mcmp+0x28>

000106d8 <__mdiff>:
   106d8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106dc:	mov	r4, r1
   106de:	mov	r6, r0
   106e0:	mov	r1, r2
   106e2:	mov	r0, r4
   106e4:	mov	r8, r2
   106e6:	bl	106a0 <__mcmp>
   106ea:	subs	r5, r0, #0
   106ec:	bne.n	10710 <__mdiff+0x38>
   106ee:	mov	r1, r5
   106f0:	mov	r0, r6
   106f2:	bl	10114 <_Balloc>
   106f6:	cbnz	r0, 10706 <__mdiff+0x2e>
   106f8:	ldr	r3, [pc, #232]	; (107e4 <__mdiff+0x10c>)
   106fa:	mov	r2, r0
   106fc:	movw	r1, #567	; 0x237
   10700:	ldr	r0, [pc, #228]	; (107e8 <__mdiff+0x110>)
   10702:	bl	1165c <__assert_func>
   10706:	movs	r3, #1
   10708:	strd	r3, r5, [r0, #16]
   1070c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10710:	itt	ge
   10712:	movge	r3, r8
   10714:	movge	r8, r4
   10716:	mov	r0, r6
   10718:	ldr.w	r1, [r8, #4]
   1071c:	itte	ge
   1071e:	movge	r4, r3
   10720:	movge	r5, #0
   10722:	movlt	r5, #1
   10724:	bl	10114 <_Balloc>
   10728:	cbnz	r0, 10734 <__mdiff+0x5c>
   1072a:	ldr	r3, [pc, #184]	; (107e4 <__mdiff+0x10c>)
   1072c:	mov	r2, r0
   1072e:	movw	r1, #581	; 0x245
   10732:	b.n	10700 <__mdiff+0x28>
   10734:	ldr.w	r7, [r8, #16]
   10738:	ldr	r6, [r4, #16]
   1073a:	str	r5, [r0, #12]
   1073c:	add.w	r9, r4, #20
   10740:	add.w	r5, r8, #20
   10744:	add.w	lr, r0, #20
   10748:	add.w	ip, r5, r7, lsl #2
   1074c:	add.w	r6, r9, r6, lsl #2
   10750:	add.w	r2, r8, #16
   10754:	mov	sl, lr
   10756:	movs	r1, #0
   10758:	ldr.w	r3, [r9], #4
   1075c:	ldr.w	fp, [r2, #4]!
   10760:	uxtah	r8, r1, fp
   10764:	uxth	r1, r3
   10766:	lsrs	r3, r3, #16
   10768:	sub.w	r8, r8, r1
   1076c:	rsb	r3, r3, fp, lsr #16
   10770:	add.w	r3, r3, r8, asr #16
   10774:	uxth.w	r8, r8
   10778:	asrs	r1, r3, #16
   1077a:	cmp	r6, r9
   1077c:	orr.w	r3, r8, r3, lsl #16
   10780:	str.w	r3, [sl], #4
   10784:	bhi.n	10758 <__mdiff+0x80>
   10786:	subs	r3, r6, r4
   10788:	subs	r3, #21
   1078a:	bic.w	r3, r3, #3
   1078e:	adds	r3, #4
   10790:	adds	r4, #21
   10792:	cmp	r6, r4
   10794:	it	cc
   10796:	movcc	r3, #4
   10798:	add	r5, r3
   1079a:	add	r3, lr
   1079c:	mov	lr, r3
   1079e:	mov	r6, r5
   107a0:	cmp	r6, ip
   107a2:	bcc.n	107c2 <__mdiff+0xea>
   107a4:	add.w	r2, ip, #3
   107a8:	subs	r2, r2, r5
   107aa:	bic.w	r2, r2, #3
   107ae:	subs	r5, #3
   107b0:	cmp	ip, r5
   107b2:	it	cc
   107b4:	movcc	r2, #0
   107b6:	add	r3, r2
   107b8:	ldr.w	r2, [r3, #-4]!
   107bc:	cbz	r2, 107de <__mdiff+0x106>
   107be:	str	r7, [r0, #16]
   107c0:	b.n	1070c <__mdiff+0x34>
   107c2:	ldr.w	r8, [r6], #4
   107c6:	uxtah	r2, r1, r8
   107ca:	asrs	r4, r2, #16
   107cc:	add.w	r4, r4, r8, lsr #16
   107d0:	uxth	r2, r2
   107d2:	orr.w	r2, r2, r4, lsl #16
   107d6:	str.w	r2, [lr], #4
   107da:	asrs	r1, r4, #16
   107dc:	b.n	107a0 <__mdiff+0xc8>
   107de:	subs	r7, #1
   107e0:	b.n	107b8 <__mdiff+0xe0>
   107e2:	nop
   107e4:	.word	0x200013c9
   107e8:	.word	0x20000c6c

000107ec <__ulp>:
   107ec:	sub	sp, #8
   107ee:	vstr	d0, [sp]
   107f2:	ldr	r2, [sp, #4]
   107f4:	ldr	r3, [pc, #60]	; (10834 <__ulp+0x48>)
   107f6:	ands	r3, r2
   107f8:	sub.w	r3, r3, #54525952	; 0x3400000
   107fc:	cmp	r3, #0
   107fe:	bgt.n	10812 <__ulp+0x26>
   10800:	negs	r3, r3
   10802:	cmp.w	r3, #20971520	; 0x1400000
   10806:	mov.w	r2, r3, asr #20
   1080a:	bge.n	10816 <__ulp+0x2a>
   1080c:	mov.w	r3, #524288	; 0x80000
   10810:	asrs	r3, r2
   10812:	movs	r2, #0
   10814:	b.n	10828 <__ulp+0x3c>
   10816:	sub.w	r3, r2, #20
   1081a:	cmp	r3, #30
   1081c:	itte	le
   1081e:	movle.w	r2, #2147483648	; 0x80000000
   10822:	lsrle	r2, r3
   10824:	movgt	r2, #1
   10826:	movs	r3, #0
   10828:	mov	r1, r3
   1082a:	mov	r0, r2
   1082c:	vmov	d0, r0, r1
   10830:	add	sp, #8
   10832:	bx	lr
   10834:	.word	0x7ff00000

00010838 <__b2d>:
   10838:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1083c:	ldr	r6, [r0, #16]
   1083e:	add.w	r8, r0, #20
   10842:	add.w	r6, r8, r6, lsl #2
   10846:	subs	r7, r6, #4
   10848:	ldr.w	r2, [r6, #-4]
   1084c:	mov	r0, r2
   1084e:	bl	102f8 <__hi0bits>
   10852:	rsb	r3, r0, #32
   10856:	cmp	r0, #10
   10858:	str	r3, [r1, #0]
   1085a:	ldr	r1, [pc, #108]	; (108c8 <__b2d+0x90>)
   1085c:	bgt.n	1088a <__b2d+0x52>
   1085e:	rsb	ip, r0, #11
   10862:	lsr.w	r3, r2, ip
   10866:	cmp	r8, r7
   10868:	orr.w	r5, r3, r1
   1086c:	ite	cc
   1086e:	ldrcc.w	r3, [r6, #-8]
   10872:	movcs	r3, #0
   10874:	adds	r0, #21
   10876:	lsl.w	r0, r2, r0
   1087a:	lsr.w	r3, r3, ip
   1087e:	orrs	r3, r0
   10880:	mov	r4, r3
   10882:	vmov	d0, r4, r5
   10886:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1088a:	cmp	r8, r7
   1088c:	itte	cc
   1088e:	ldrcc.w	r3, [r6, #-8]
   10892:	subcc.w	r7, r6, #8
   10896:	movcs	r3, #0
   10898:	subs	r0, #11
   1089a:	beq.n	108c2 <__b2d+0x8a>
   1089c:	rsb	r1, r0, #32
   108a0:	lsr.w	r4, r3, r1
   108a4:	lsls	r2, r0
   108a6:	orrs	r2, r4
   108a8:	cmp	r7, r8
   108aa:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   108ae:	ite	hi
   108b0:	ldrhi.w	r2, [r7, #-4]
   108b4:	movls	r2, #0
   108b6:	lsls	r3, r0
   108b8:	lsrs	r2, r1
   108ba:	orr.w	r5, r5, #3145728	; 0x300000
   108be:	orrs	r3, r2
   108c0:	b.n	10880 <__b2d+0x48>
   108c2:	orr.w	r5, r2, r1
   108c6:	b.n	10880 <__b2d+0x48>
   108c8:	.word	0x3ff00000

000108cc <__d2b>:
   108cc:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   108d0:	mov	r7, r1
   108d2:	movs	r1, #1
   108d4:	vmov	r8, r9, d0
   108d8:	mov	r6, r2
   108da:	bl	10114 <_Balloc>
   108de:	mov	r4, r0
   108e0:	cbnz	r0, 108f0 <__d2b+0x24>
   108e2:	mov	r2, r0
   108e4:	ldr	r3, [pc, #144]	; (10978 <__d2b+0xac>)
   108e6:	ldr	r0, [pc, #148]	; (1097c <__d2b+0xb0>)
   108e8:	movw	r1, #783	; 0x30f
   108ec:	bl	1165c <__assert_func>
   108f0:	ubfx	r5, r9, #20, #11
   108f4:	ubfx	r3, r9, #0, #20
   108f8:	cbnz	r5, 10946 <__d2b+0x7a>
   108fa:	str	r3, [sp, #4]
   108fc:	subs.w	r3, r8, #0
   10900:	beq.n	10950 <__d2b+0x84>
   10902:	mov	r0, sp
   10904:	str	r3, [sp, #0]
   10906:	bl	10338 <__lo0bits>
   1090a:	ldrd	r1, r2, [sp]
   1090e:	cbz	r0, 1094c <__d2b+0x80>
   10910:	rsb	r3, r0, #32
   10914:	lsl.w	r3, r2, r3
   10918:	orrs	r3, r1
   1091a:	lsrs	r2, r0
   1091c:	str	r3, [r4, #20]
   1091e:	str	r2, [sp, #4]
   10920:	ldr	r3, [sp, #4]
   10922:	str	r3, [r4, #24]
   10924:	cmp	r3, #0
   10926:	ite	ne
   10928:	movne	r2, #2
   1092a:	moveq	r2, #1
   1092c:	str	r2, [r4, #16]
   1092e:	cbz	r5, 10960 <__d2b+0x94>
   10930:	subw	r5, r5, #1075	; 0x433
   10934:	add	r5, r0
   10936:	str	r5, [r7, #0]
   10938:	rsb	r0, r0, #53	; 0x35
   1093c:	str	r0, [r6, #0]
   1093e:	mov	r0, r4
   10940:	add	sp, #12
   10942:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10946:	orr.w	r3, r3, #1048576	; 0x100000
   1094a:	b.n	108fa <__d2b+0x2e>
   1094c:	str	r1, [r4, #20]
   1094e:	b.n	10920 <__d2b+0x54>
   10950:	add	r0, sp, #4
   10952:	bl	10338 <__lo0bits>
   10956:	ldr	r3, [sp, #4]
   10958:	str	r3, [r4, #20]
   1095a:	adds	r0, #32
   1095c:	movs	r2, #1
   1095e:	b.n	1092c <__d2b+0x60>
   10960:	add.w	r3, r4, r2, lsl #2
   10964:	subw	r0, r0, #1074	; 0x432
   10968:	str	r0, [r7, #0]
   1096a:	ldr	r0, [r3, #16]
   1096c:	bl	102f8 <__hi0bits>
   10970:	rsb	r0, r0, r2, lsl #5
   10974:	b.n	1093c <__d2b+0x70>
   10976:	nop
   10978:	.word	0x200013c9
   1097c:	.word	0x20000c6c

00010980 <__ratio>:
   10980:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10984:	mov	r8, r1
   10986:	mov	r1, sp
   10988:	mov	r9, r0
   1098a:	bl	10838 <__b2d>
   1098e:	add	r1, sp, #4
   10990:	mov	r0, r8
   10992:	vmov	r4, r5, d0
   10996:	vmov	sl, s0
   1099a:	bl	10838 <__b2d>
   1099e:	ldr.w	r3, [r8, #16]
   109a2:	ldr.w	r2, [r9, #16]
   109a6:	subs	r2, r2, r3
   109a8:	ldrd	r3, r1, [sp]
   109ac:	subs	r3, r3, r1
   109ae:	add.w	r3, r3, r2, lsl #5
   109b2:	vmov	r6, r7, d0
   109b6:	cmp	r3, #0
   109b8:	itet	le
   109ba:	rsble	r3, r3, r3, lsl #12
   109be:	movgt	r2, r5
   109c0:	movle	r2, r7
   109c2:	mov	fp, r5
   109c4:	itet	le
   109c6:	addle.w	r3, r2, r3, lsl #20
   109ca:	addgt.w	fp, r2, r3, lsl #20
   109ce:	vmovle	s1, r3
   109d2:	vmov	d7, sl, fp
   109d6:	vdiv.f64	d0, d7, d0
   109da:	add	sp, #12
   109dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000109e0 <__copybits>:
   109e0:	subs	r1, #1
   109e2:	push	{r4, r5, r6, lr}
   109e4:	asrs	r1, r1, #5
   109e6:	ldr	r4, [r2, #16]
   109e8:	adds	r1, #1
   109ea:	add.w	r3, r2, #20
   109ee:	add.w	r1, r0, r1, lsl #2
   109f2:	add.w	r4, r3, r4, lsl #2
   109f6:	subs	r5, r0, #4
   109f8:	cmp	r3, r4
   109fa:	bcc.n	10a16 <__copybits+0x36>
   109fc:	subs	r3, r4, r2
   109fe:	subs	r3, #17
   10a00:	bic.w	r3, r3, #3
   10a04:	adds	r2, #17
   10a06:	cmp	r2, r4
   10a08:	it	hi
   10a0a:	movhi	r3, #0
   10a0c:	add	r0, r3
   10a0e:	movs	r3, #0
   10a10:	cmp	r0, r1
   10a12:	bcc.n	10a20 <__copybits+0x40>
   10a14:	pop	{r4, r5, r6, pc}
   10a16:	ldr.w	r6, [r3], #4
   10a1a:	str.w	r6, [r5, #4]!
   10a1e:	b.n	109f8 <__copybits+0x18>
   10a20:	str.w	r3, [r0], #4
   10a24:	b.n	10a10 <__copybits+0x30>

00010a26 <__any_on>:
   10a26:	add.w	r2, r0, #20
   10a2a:	ldr	r0, [r0, #16]
   10a2c:	asrs	r3, r1, #5
   10a2e:	cmp	r0, r3
   10a30:	push	{r4, lr}
   10a32:	blt.n	10a58 <__any_on+0x32>
   10a34:	ble.n	10a4c <__any_on+0x26>
   10a36:	ands.w	r1, r1, #31
   10a3a:	beq.n	10a4c <__any_on+0x26>
   10a3c:	ldr.w	r4, [r2, r3, lsl #2]
   10a40:	lsr.w	r0, r4, r1
   10a44:	lsl.w	r1, r0, r1
   10a48:	cmp	r4, r1
   10a4a:	bne.n	10a64 <__any_on+0x3e>
   10a4c:	add.w	r3, r2, r3, lsl #2
   10a50:	cmp	r3, r2
   10a52:	bhi.n	10a5c <__any_on+0x36>
   10a54:	movs	r0, #0
   10a56:	pop	{r4, pc}
   10a58:	mov	r3, r0
   10a5a:	b.n	10a4c <__any_on+0x26>
   10a5c:	ldr.w	r1, [r3, #-4]!
   10a60:	cmp	r1, #0
   10a62:	beq.n	10a50 <__any_on+0x2a>
   10a64:	movs	r0, #1
   10a66:	b.n	10a56 <__any_on+0x30>

00010a68 <_malloc_usable_size_r>:
   10a68:	ldr.w	r3, [r1, #-4]
   10a6c:	subs	r0, r3, #4
   10a6e:	cmp	r3, #0
   10a70:	itt	lt
   10a72:	ldrlt	r3, [r1, r0]
   10a74:	addlt	r0, r0, r3
   10a76:	bx	lr

00010a78 <__ascii_wctomb>:
   10a78:	cbz	r1, 10a8e <__ascii_wctomb+0x16>
   10a7a:	cmp	r2, #255	; 0xff
   10a7c:	ittet	hi
   10a7e:	movhi	r3, #138	; 0x8a
   10a80:	strhi	r3, [r0, #0]
   10a82:	strbls	r2, [r1, #0]
   10a84:	movhi.w	r0, #4294967295
   10a88:	it	ls
   10a8a:	movls	r0, #1
   10a8c:	bx	lr
   10a8e:	mov	r0, r1
   10a90:	bx	lr
	...

00010a94 <fcvtbuf>:
   10a94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10a98:	mov	r8, r2
   10a9a:	ldr	r2, [pc, #136]	; (10b24 <fcvtbuf+0x90>)
   10a9c:	sub	sp, #28
   10a9e:	ldr	r6, [r2, #0]
   10aa0:	mov	r5, r0
   10aa2:	mov	r7, r1
   10aa4:	mov	r4, r3
   10aa6:	cbnz	r3, 10ad2 <fcvtbuf+0x3e>
   10aa8:	ldr	r2, [r6, #40]	; 0x28
   10aaa:	ldr	r1, [r6, #44]	; 0x2c
   10aac:	add.w	r3, r0, #35	; 0x23
   10ab0:	cmp	r2, r3
   10ab2:	bgt.n	10ad0 <fcvtbuf+0x3c>
   10ab4:	add.w	r9, r0, #36	; 0x24
   10ab8:	mov	r2, r9
   10aba:	mov	r0, r6
   10abc:	vstr	d0, [sp, #8]
   10ac0:	bl	cd7c <_realloc_r>
   10ac4:	mov	r4, r0
   10ac6:	cbz	r0, 10b0c <fcvtbuf+0x78>
   10ac8:	strd	r9, r0, [r6, #40]	; 0x28
   10acc:	vldr	d0, [sp, #8]
   10ad0:	ldr	r4, [r6, #44]	; 0x2c
   10ad2:	add	r3, sp, #20
   10ad4:	strd	r8, r3, [sp]
   10ad8:	mov	r2, r5
   10ada:	mov	r3, r7
   10adc:	movs	r1, #3
   10ade:	mov	r0, r6
   10ae0:	bl	eed0 <_dtoa_r>
   10ae4:	ldr	r3, [r7, #0]
   10ae6:	negs	r3, r3
   10ae8:	mov	r2, r4
   10aea:	subs	r3, r3, r4
   10aec:	ldr	r1, [sp, #20]
   10aee:	cmp	r1, r0
   10af0:	add.w	r6, r2, r3
   10af4:	bhi.n	10b14 <fcvtbuf+0x80>
   10af6:	mov	r1, r2
   10af8:	movs	r7, #48	; 0x30
   10afa:	adds	r0, r1, r3
   10afc:	cmp	r5, r0
   10afe:	bgt.n	10b1e <fcvtbuf+0x8a>
   10b00:	subs	r3, r5, r6
   10b02:	cmp	r5, r6
   10b04:	it	lt
   10b06:	movlt	r3, #0
   10b08:	movs	r1, #0
   10b0a:	strb	r1, [r2, r3]
   10b0c:	mov	r0, r4
   10b0e:	add	sp, #28
   10b10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10b14:	ldrb.w	r1, [r0], #1
   10b18:	strb.w	r1, [r2], #1
   10b1c:	b.n	10aec <fcvtbuf+0x58>
   10b1e:	strb.w	r7, [r1], #1
   10b22:	b.n	10afa <fcvtbuf+0x66>
   10b24:	.word	0x200022d0

00010b28 <__ssputs_r>:
   10b28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b2c:	ldr	r6, [r1, #8]
   10b2e:	mov	r7, r3
   10b30:	cmp	r6, r7
   10b32:	ldr	r3, [r1, #0]
   10b34:	mov	sl, r0
   10b36:	mov	r4, r1
   10b38:	mov	r8, r2
   10b3a:	bhi.n	10b96 <__ssputs_r+0x6e>
   10b3c:	ldrh	r2, [r1, #12]
   10b3e:	tst.w	r2, #1152	; 0x480
   10b42:	beq.n	10b92 <__ssputs_r+0x6a>
   10b44:	ldr	r5, [r4, #20]
   10b46:	ldr	r1, [r1, #16]
   10b48:	add.w	r5, r5, r5, lsl #1
   10b4c:	sub.w	r9, r3, r1
   10b50:	add.w	r5, r5, r5, lsr #31
   10b54:	adds	r3, r7, #1
   10b56:	add	r3, r9
   10b58:	asrs	r5, r5, #1
   10b5a:	cmp	r5, r3
   10b5c:	it	cc
   10b5e:	movcc	r5, r3
   10b60:	lsls	r3, r2, #21
   10b62:	bpl.n	10bb4 <__ssputs_r+0x8c>
   10b64:	mov	r1, r5
   10b66:	bl	cc78 <_malloc_r>
   10b6a:	mov	r6, r0
   10b6c:	cbz	r0, 10bc8 <__ssputs_r+0xa0>
   10b6e:	ldr	r1, [r4, #16]
   10b70:	mov	r2, r9
   10b72:	bl	a218 <memcpy>
   10b76:	ldrh	r3, [r4, #12]
   10b78:	bic.w	r3, r3, #1152	; 0x480
   10b7c:	orr.w	r3, r3, #128	; 0x80
   10b80:	strh	r3, [r4, #12]
   10b82:	str	r6, [r4, #16]
   10b84:	str	r5, [r4, #20]
   10b86:	add	r6, r9
   10b88:	sub.w	r5, r5, r9
   10b8c:	str	r6, [r4, #0]
   10b8e:	str	r5, [r4, #8]
   10b90:	mov	r6, r7
   10b92:	cmp	r6, r7
   10b94:	bls.n	10b98 <__ssputs_r+0x70>
   10b96:	mov	r6, r7
   10b98:	ldr	r0, [r4, #0]
   10b9a:	mov	r2, r6
   10b9c:	mov	r1, r8
   10b9e:	bl	eafc <memmove>
   10ba2:	ldr	r3, [r4, #8]
   10ba4:	subs	r3, r3, r6
   10ba6:	str	r3, [r4, #8]
   10ba8:	ldr	r3, [r4, #0]
   10baa:	add	r3, r6
   10bac:	str	r3, [r4, #0]
   10bae:	movs	r0, #0
   10bb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10bb4:	mov	r2, r5
   10bb6:	bl	cd7c <_realloc_r>
   10bba:	mov	r6, r0
   10bbc:	cmp	r0, #0
   10bbe:	bne.n	10b82 <__ssputs_r+0x5a>
   10bc0:	ldr	r1, [r4, #16]
   10bc2:	mov	r0, sl
   10bc4:	bl	f9a8 <_free_r>
   10bc8:	movs	r3, #12
   10bca:	str.w	r3, [sl]
   10bce:	ldrh	r3, [r4, #12]
   10bd0:	orr.w	r3, r3, #64	; 0x40
   10bd4:	strh	r3, [r4, #12]
   10bd6:	mov.w	r0, #4294967295
   10bda:	b.n	10bb0 <__ssputs_r+0x88>

00010bdc <_svfiprintf_r>:
   10bdc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10be0:	mov	r8, r3
   10be2:	ldrh	r3, [r1, #12]
   10be4:	lsls	r3, r3, #24
   10be6:	sub	sp, #116	; 0x74
   10be8:	mov	r7, r0
   10bea:	mov	r5, r1
   10bec:	mov	r4, r2
   10bee:	bpl.n	10c0e <_svfiprintf_r+0x32>
   10bf0:	ldr	r3, [r1, #16]
   10bf2:	cbnz	r3, 10c0e <_svfiprintf_r+0x32>
   10bf4:	movs	r1, #64	; 0x40
   10bf6:	bl	cc78 <_malloc_r>
   10bfa:	str	r0, [r5, #0]
   10bfc:	str	r0, [r5, #16]
   10bfe:	cbnz	r0, 10c0a <_svfiprintf_r+0x2e>
   10c00:	movs	r3, #12
   10c02:	str	r3, [r7, #0]
   10c04:	mov.w	r0, #4294967295
   10c08:	b.n	10dac <_svfiprintf_r+0x1d0>
   10c0a:	movs	r3, #64	; 0x40
   10c0c:	str	r3, [r5, #20]
   10c0e:	movs	r3, #0
   10c10:	str	r3, [sp, #36]	; 0x24
   10c12:	movs	r3, #32
   10c14:	strb.w	r3, [sp, #41]	; 0x29
   10c18:	str.w	r8, [sp, #12]
   10c1c:	movs	r3, #48	; 0x30
   10c1e:	ldr.w	r8, [pc, #420]	; 10dc4 <_svfiprintf_r+0x1e8>
   10c22:	strb.w	r3, [sp, #42]	; 0x2a
   10c26:	mov.w	r9, #1
   10c2a:	mov	r3, r4
   10c2c:	mov	sl, r3
   10c2e:	ldrb.w	r2, [r3], #1
   10c32:	cbz	r2, 10c38 <_svfiprintf_r+0x5c>
   10c34:	cmp	r2, #37	; 0x25
   10c36:	bne.n	10c2c <_svfiprintf_r+0x50>
   10c38:	subs.w	fp, sl, r4
   10c3c:	beq.n	10c56 <_svfiprintf_r+0x7a>
   10c3e:	mov	r3, fp
   10c40:	mov	r2, r4
   10c42:	mov	r1, r5
   10c44:	mov	r0, r7
   10c46:	bl	10b28 <__ssputs_r>
   10c4a:	adds	r0, #1
   10c4c:	beq.w	10da2 <_svfiprintf_r+0x1c6>
   10c50:	ldr	r2, [sp, #36]	; 0x24
   10c52:	add	r2, fp
   10c54:	str	r2, [sp, #36]	; 0x24
   10c56:	ldrb.w	r3, [sl]
   10c5a:	cmp	r3, #0
   10c5c:	beq.w	10da2 <_svfiprintf_r+0x1c6>
   10c60:	movs	r3, #0
   10c62:	mov.w	r2, #4294967295
   10c66:	strd	r2, r3, [sp, #20]
   10c6a:	add.w	sl, sl, #1
   10c6e:	str	r3, [sp, #16]
   10c70:	str	r3, [sp, #28]
   10c72:	strb.w	r3, [sp, #83]	; 0x53
   10c76:	str	r3, [sp, #104]	; 0x68
   10c78:	mov	r4, sl
   10c7a:	movs	r2, #5
   10c7c:	ldrb.w	r1, [r4], #1
   10c80:	ldr	r0, [pc, #320]	; (10dc4 <_svfiprintf_r+0x1e8>)
   10c82:	bl	ecf0 <memchr>
   10c86:	ldr	r2, [sp, #16]
   10c88:	cbnz	r0, 10cc2 <_svfiprintf_r+0xe6>
   10c8a:	lsls	r0, r2, #27
   10c8c:	itt	mi
   10c8e:	movmi	r3, #32
   10c90:	strbmi.w	r3, [sp, #83]	; 0x53
   10c94:	lsls	r1, r2, #28
   10c96:	itt	mi
   10c98:	movmi	r3, #43	; 0x2b
   10c9a:	strbmi.w	r3, [sp, #83]	; 0x53
   10c9e:	ldrb.w	r3, [sl]
   10ca2:	cmp	r3, #42	; 0x2a
   10ca4:	beq.n	10cd2 <_svfiprintf_r+0xf6>
   10ca6:	ldr	r2, [sp, #28]
   10ca8:	mov	r4, sl
   10caa:	movs	r0, #0
   10cac:	mov.w	ip, #10
   10cb0:	mov	r1, r4
   10cb2:	ldrb.w	r3, [r1], #1
   10cb6:	subs	r3, #48	; 0x30
   10cb8:	cmp	r3, #9
   10cba:	bls.n	10d58 <_svfiprintf_r+0x17c>
   10cbc:	cbz	r0, 10cec <_svfiprintf_r+0x110>
   10cbe:	str	r2, [sp, #28]
   10cc0:	b.n	10cec <_svfiprintf_r+0x110>
   10cc2:	sub.w	r3, r0, r8
   10cc6:	lsl.w	r3, r9, r3
   10cca:	orrs	r3, r2
   10ccc:	str	r3, [sp, #16]
   10cce:	mov	sl, r4
   10cd0:	b.n	10c78 <_svfiprintf_r+0x9c>
   10cd2:	ldr	r3, [sp, #12]
   10cd4:	adds	r1, r3, #4
   10cd6:	ldr	r3, [r3, #0]
   10cd8:	str	r1, [sp, #12]
   10cda:	cmp	r3, #0
   10cdc:	ittet	lt
   10cde:	neglt	r3, r3
   10ce0:	orrlt.w	r2, r2, #2
   10ce4:	strge	r3, [sp, #28]
   10ce6:	strlt	r3, [sp, #28]
   10ce8:	it	lt
   10cea:	strlt	r2, [sp, #16]
   10cec:	ldrb	r3, [r4, #0]
   10cee:	cmp	r3, #46	; 0x2e
   10cf0:	bne.n	10d0c <_svfiprintf_r+0x130>
   10cf2:	ldrb	r3, [r4, #1]
   10cf4:	cmp	r3, #42	; 0x2a
   10cf6:	bne.n	10d62 <_svfiprintf_r+0x186>
   10cf8:	ldr	r3, [sp, #12]
   10cfa:	adds	r2, r3, #4
   10cfc:	ldr	r3, [r3, #0]
   10cfe:	str	r2, [sp, #12]
   10d00:	cmp	r3, #0
   10d02:	it	lt
   10d04:	movlt.w	r3, #4294967295
   10d08:	adds	r4, #2
   10d0a:	str	r3, [sp, #20]
   10d0c:	ldr.w	sl, [pc, #196]	; 10dd4 <_svfiprintf_r+0x1f8>
   10d10:	ldrb	r1, [r4, #0]
   10d12:	movs	r2, #3
   10d14:	mov	r0, sl
   10d16:	bl	ecf0 <memchr>
   10d1a:	cbz	r0, 10d2c <_svfiprintf_r+0x150>
   10d1c:	ldr	r3, [sp, #16]
   10d1e:	sub.w	r0, r0, sl
   10d22:	movs	r2, #64	; 0x40
   10d24:	lsls	r2, r0
   10d26:	orrs	r3, r2
   10d28:	adds	r4, #1
   10d2a:	str	r3, [sp, #16]
   10d2c:	ldrb.w	r1, [r4], #1
   10d30:	ldr	r0, [pc, #148]	; (10dc8 <_svfiprintf_r+0x1ec>)
   10d32:	strb.w	r1, [sp, #40]	; 0x28
   10d36:	movs	r2, #6
   10d38:	bl	ecf0 <memchr>
   10d3c:	cmp	r0, #0
   10d3e:	beq.n	10db2 <_svfiprintf_r+0x1d6>
   10d40:	ldr	r3, [pc, #136]	; (10dcc <_svfiprintf_r+0x1f0>)
   10d42:	cbnz	r3, 10d8c <_svfiprintf_r+0x1b0>
   10d44:	ldr	r3, [sp, #12]
   10d46:	adds	r3, #7
   10d48:	bic.w	r3, r3, #7
   10d4c:	adds	r3, #8
   10d4e:	str	r3, [sp, #12]
   10d50:	ldr	r3, [sp, #36]	; 0x24
   10d52:	add	r3, r6
   10d54:	str	r3, [sp, #36]	; 0x24
   10d56:	b.n	10c2a <_svfiprintf_r+0x4e>
   10d58:	mla	r2, ip, r2, r3
   10d5c:	mov	r4, r1
   10d5e:	movs	r0, #1
   10d60:	b.n	10cb0 <_svfiprintf_r+0xd4>
   10d62:	movs	r3, #0
   10d64:	adds	r4, #1
   10d66:	str	r3, [sp, #20]
   10d68:	mov	r1, r3
   10d6a:	mov.w	ip, #10
   10d6e:	mov	r0, r4
   10d70:	ldrb.w	r2, [r0], #1
   10d74:	subs	r2, #48	; 0x30
   10d76:	cmp	r2, #9
   10d78:	bls.n	10d82 <_svfiprintf_r+0x1a6>
   10d7a:	cmp	r3, #0
   10d7c:	beq.n	10d0c <_svfiprintf_r+0x130>
   10d7e:	str	r1, [sp, #20]
   10d80:	b.n	10d0c <_svfiprintf_r+0x130>
   10d82:	mla	r1, ip, r1, r2
   10d86:	mov	r4, r0
   10d88:	movs	r3, #1
   10d8a:	b.n	10d6e <_svfiprintf_r+0x192>
   10d8c:	add	r3, sp, #12
   10d8e:	str	r3, [sp, #0]
   10d90:	mov	r2, r5
   10d92:	ldr	r3, [pc, #60]	; (10dd0 <_svfiprintf_r+0x1f4>)
   10d94:	add	r1, sp, #16
   10d96:	mov	r0, r7
   10d98:	bl	dbd8 <_printf_float>
   10d9c:	adds	r2, r0, #1
   10d9e:	mov	r6, r0
   10da0:	bne.n	10d50 <_svfiprintf_r+0x174>
   10da2:	ldrh	r3, [r5, #12]
   10da4:	lsls	r3, r3, #25
   10da6:	bmi.w	10c04 <_svfiprintf_r+0x28>
   10daa:	ldr	r0, [sp, #36]	; 0x24
   10dac:	add	sp, #116	; 0x74
   10dae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10db2:	add	r3, sp, #12
   10db4:	str	r3, [sp, #0]
   10db6:	mov	r2, r5
   10db8:	ldr	r3, [pc, #20]	; (10dd0 <_svfiprintf_r+0x1f4>)
   10dba:	add	r1, sp, #16
   10dbc:	mov	r0, r7
   10dbe:	bl	e0e8 <_printf_i>
   10dc2:	b.n	10d9c <_svfiprintf_r+0x1c0>
   10dc4:	.word	0x20001421
   10dc8:	.word	0x2000142b
   10dcc:	.word	0x0000dbd9
   10dd0:	.word	0x00010b29
   10dd4:	.word	0x20001427

00010dd8 <_sungetc_r>:
   10dd8:	push	{r3, r4, r5, lr}
   10dda:	adds	r3, r1, #1
   10ddc:	mov	r4, r2
   10dde:	bne.n	10de8 <_sungetc_r+0x10>
   10de0:	mov.w	r5, #4294967295
   10de4:	mov	r0, r5
   10de6:	pop	{r3, r4, r5, pc}
   10de8:	ldrh	r3, [r2, #12]
   10dea:	bic.w	r3, r3, #32
   10dee:	strh	r3, [r2, #12]
   10df0:	ldr	r3, [r4, #52]	; 0x34
   10df2:	ldr	r2, [r2, #4]
   10df4:	uxtb	r5, r1
   10df6:	cbz	r3, 10e1c <_sungetc_r+0x44>
   10df8:	ldr	r3, [r4, #56]	; 0x38
   10dfa:	cmp	r3, r2
   10dfc:	ble.n	10e10 <_sungetc_r+0x38>
   10dfe:	ldr	r3, [r4, #0]
   10e00:	subs	r2, r3, #1
   10e02:	str	r2, [r4, #0]
   10e04:	strb.w	r5, [r3, #-1]
   10e08:	ldr	r3, [r4, #4]
   10e0a:	adds	r3, #1
   10e0c:	str	r3, [r4, #4]
   10e0e:	b.n	10de4 <_sungetc_r+0xc>
   10e10:	mov	r1, r4
   10e12:	bl	115e6 <__submore>
   10e16:	cmp	r0, #0
   10e18:	beq.n	10dfe <_sungetc_r+0x26>
   10e1a:	b.n	10de0 <_sungetc_r+0x8>
   10e1c:	ldr	r1, [r4, #16]
   10e1e:	ldr	r3, [r4, #0]
   10e20:	cbz	r1, 10e38 <_sungetc_r+0x60>
   10e22:	cmp	r1, r3
   10e24:	bcs.n	10e38 <_sungetc_r+0x60>
   10e26:	ldrb.w	r1, [r3, #-1]
   10e2a:	cmp	r1, r5
   10e2c:	bne.n	10e38 <_sungetc_r+0x60>
   10e2e:	subs	r3, #1
   10e30:	adds	r2, #1
   10e32:	str	r3, [r4, #0]
   10e34:	str	r2, [r4, #4]
   10e36:	b.n	10de4 <_sungetc_r+0xc>
   10e38:	strd	r3, r2, [r4, #60]	; 0x3c
   10e3c:	add.w	r3, r4, #68	; 0x44
   10e40:	str	r3, [r4, #52]	; 0x34
   10e42:	movs	r3, #3
   10e44:	str	r3, [r4, #56]	; 0x38
   10e46:	mov	r3, r4
   10e48:	strb.w	r5, [r3, #70]!
   10e4c:	str	r3, [r4, #0]
   10e4e:	movs	r3, #1
   10e50:	b.n	10e0c <_sungetc_r+0x34>

00010e52 <__ssrefill_r>:
   10e52:	push	{r4, lr}
   10e54:	mov	r4, r1
   10e56:	ldr	r1, [r1, #52]	; 0x34
   10e58:	cbz	r1, 10e76 <__ssrefill_r+0x24>
   10e5a:	add.w	r3, r4, #68	; 0x44
   10e5e:	cmp	r1, r3
   10e60:	beq.n	10e66 <__ssrefill_r+0x14>
   10e62:	bl	f9a8 <_free_r>
   10e66:	ldr	r3, [r4, #64]	; 0x40
   10e68:	str	r3, [r4, #4]
   10e6a:	movs	r0, #0
   10e6c:	str	r0, [r4, #52]	; 0x34
   10e6e:	cbz	r3, 10e76 <__ssrefill_r+0x24>
   10e70:	ldr	r3, [r4, #60]	; 0x3c
   10e72:	str	r3, [r4, #0]
   10e74:	pop	{r4, pc}
   10e76:	ldr	r3, [r4, #16]
   10e78:	str	r3, [r4, #0]
   10e7a:	movs	r3, #0
   10e7c:	str	r3, [r4, #4]
   10e7e:	ldrh	r3, [r4, #12]
   10e80:	orr.w	r3, r3, #32
   10e84:	strh	r3, [r4, #12]
   10e86:	mov.w	r0, #4294967295
   10e8a:	b.n	10e74 <__ssrefill_r+0x22>

00010e8c <__ssvfiscanf_r>:
   10e8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10e90:	mov	r4, r1
   10e92:	sub.w	sp, sp, #648	; 0x288
   10e96:	movs	r1, #0
   10e98:	strd	r1, r1, [sp, #272]	; 0x110
   10e9c:	ldr	r1, [pc, #664]	; (11138 <__ssvfiscanf_r+0x2ac>)
   10e9e:	str	r1, [sp, #640]	; 0x280
   10ea0:	add.w	r8, sp, #4
   10ea4:	ldr	r1, [pc, #660]	; (1113c <__ssvfiscanf_r+0x2b0>)
   10ea6:	ldr	r7, [pc, #664]	; (11140 <__ssvfiscanf_r+0x2b4>)
   10ea8:	ldr.w	r9, [pc, #664]	; 11144 <__ssvfiscanf_r+0x2b8>
   10eac:	str.w	r8, [sp, #280]	; 0x118
   10eb0:	mov	r6, r0
   10eb2:	str	r1, [sp, #644]	; 0x284
   10eb4:	str	r3, [sp, #0]
   10eb6:	ldrb	r3, [r2, #0]
   10eb8:	cmp	r3, #0
   10eba:	beq.w	11172 <__ssvfiscanf_r+0x2e6>
   10ebe:	ldrb	r1, [r7, r3]
   10ec0:	ands.w	r1, r1, #8
   10ec4:	add.w	r5, r2, #1
   10ec8:	beq.n	10efe <__ssvfiscanf_r+0x72>
   10eca:	ldr	r3, [r4, #4]
   10ecc:	cmp	r3, #0
   10ece:	ble.n	10ef0 <__ssvfiscanf_r+0x64>
   10ed0:	ldr	r3, [r4, #0]
   10ed2:	ldrb	r2, [r3, #0]
   10ed4:	ldrb	r2, [r7, r2]
   10ed6:	lsls	r2, r2, #28
   10ed8:	bmi.n	10ede <__ssvfiscanf_r+0x52>
   10eda:	mov	r2, r5
   10edc:	b.n	10eb6 <__ssvfiscanf_r+0x2a>
   10ede:	ldr	r2, [sp, #276]	; 0x114
   10ee0:	adds	r2, #1
   10ee2:	str	r2, [sp, #276]	; 0x114
   10ee4:	ldr	r2, [r4, #4]
   10ee6:	adds	r3, #1
   10ee8:	subs	r2, #1
   10eea:	str	r2, [r4, #4]
   10eec:	str	r3, [r4, #0]
   10eee:	b.n	10eca <__ssvfiscanf_r+0x3e>
   10ef0:	ldr	r3, [sp, #644]	; 0x284
   10ef2:	mov	r1, r4
   10ef4:	mov	r0, r6
   10ef6:	blx	r3
   10ef8:	cmp	r0, #0
   10efa:	beq.n	10ed0 <__ssvfiscanf_r+0x44>
   10efc:	b.n	10eda <__ssvfiscanf_r+0x4e>
   10efe:	cmp	r3, #37	; 0x25
   10f00:	beq.n	10f28 <__ssvfiscanf_r+0x9c>
   10f02:	mov	sl, r3
   10f04:	ldr	r3, [r4, #4]
   10f06:	cmp	r3, #0
   10f08:	ble.w	1102e <__ssvfiscanf_r+0x1a2>
   10f0c:	ldr	r2, [r4, #0]
   10f0e:	ldrb	r3, [r2, #0]
   10f10:	cmp	r3, sl
   10f12:	bne.w	11172 <__ssvfiscanf_r+0x2e6>
   10f16:	ldr	r3, [r4, #4]
   10f18:	subs	r3, #1
   10f1a:	str	r3, [r4, #4]
   10f1c:	ldr	r3, [sp, #276]	; 0x114
   10f1e:	adds	r2, #1
   10f20:	adds	r3, #1
   10f22:	str	r2, [r4, #0]
   10f24:	str	r3, [sp, #276]	; 0x114
   10f26:	b.n	10eda <__ssvfiscanf_r+0x4e>
   10f28:	str	r1, [sp, #260]	; 0x104
   10f2a:	str	r1, [sp, #268]	; 0x10c
   10f2c:	ldrb	r3, [r2, #1]
   10f2e:	cmp	r3, #42	; 0x2a
   10f30:	ittt	eq
   10f32:	moveq	r3, #16
   10f34:	addeq	r5, r2, #2
   10f36:	streq	r3, [sp, #260]	; 0x104
   10f38:	movs	r2, #10
   10f3a:	mov	sl, r5
   10f3c:	ldrb.w	r1, [sl], #1
   10f40:	sub.w	r3, r1, #48	; 0x30
   10f44:	cmp	r3, #9
   10f46:	bls.n	10f82 <__ssvfiscanf_r+0xf6>
   10f48:	ldr	r0, [pc, #504]	; (11144 <__ssvfiscanf_r+0x2b8>)
   10f4a:	movs	r2, #3
   10f4c:	bl	ecf0 <memchr>
   10f50:	cbz	r0, 10f62 <__ssvfiscanf_r+0xd6>
   10f52:	ldr	r2, [sp, #260]	; 0x104
   10f54:	sub.w	r0, r0, r9
   10f58:	movs	r3, #1
   10f5a:	lsls	r3, r0
   10f5c:	orrs	r3, r2
   10f5e:	str	r3, [sp, #260]	; 0x104
   10f60:	mov	r5, sl
   10f62:	ldrb.w	r3, [r5], #1
   10f66:	cmp	r3, #120	; 0x78
   10f68:	bhi.n	10f78 <__ssvfiscanf_r+0xec>
   10f6a:	cmp	r3, #87	; 0x57
   10f6c:	bhi.n	10f90 <__ssvfiscanf_r+0x104>
   10f6e:	cmp	r3, #37	; 0x25
   10f70:	beq.n	10f02 <__ssvfiscanf_r+0x76>
   10f72:	bhi.n	11024 <__ssvfiscanf_r+0x198>
   10f74:	cmp	r3, #0
   10f76:	beq.n	11044 <__ssvfiscanf_r+0x1b8>
   10f78:	movs	r3, #3
   10f7a:	str	r3, [sp, #284]	; 0x11c
   10f7c:	movs	r3, #10
   10f7e:	str	r3, [sp, #264]	; 0x108
   10f80:	b.n	11070 <__ssvfiscanf_r+0x1e4>
   10f82:	ldr	r3, [sp, #268]	; 0x10c
   10f84:	mla	r1, r2, r3, r1
   10f88:	subs	r1, #48	; 0x30
   10f8a:	str	r1, [sp, #268]	; 0x10c
   10f8c:	mov	r5, sl
   10f8e:	b.n	10f3a <__ssvfiscanf_r+0xae>
   10f90:	sub.w	r2, r3, #88	; 0x58
   10f94:	cmp	r2, #32
   10f96:	bhi.n	10f78 <__ssvfiscanf_r+0xec>
   10f98:	add	r1, pc, #4	; (adr r1, 10fa0 <__ssvfiscanf_r+0x114>)
   10f9a:	ldr.w	pc, [r1, r2, lsl #2]
   10f9e:	nop
   10fa0:	.word	0x00011053
   10fa4:	.word	0x00010f79
   10fa8:	.word	0x00010f79
   10fac:	.word	0x000110b1
   10fb0:	.word	0x00010f79
   10fb4:	.word	0x00010f79
   10fb8:	.word	0x00010f79
   10fbc:	.word	0x00010f79
   10fc0:	.word	0x00010f79
   10fc4:	.word	0x00010f79
   10fc8:	.word	0x00010f79
   10fcc:	.word	0x000110c7
   10fd0:	.word	0x000110ad
   10fd4:	.word	0x0001102b
   10fd8:	.word	0x0001102b
   10fdc:	.word	0x0001102b
   10fe0:	.word	0x00010f79
   10fe4:	.word	0x00011069
   10fe8:	.word	0x00010f79
   10fec:	.word	0x00010f79
   10ff0:	.word	0x00010f79
   10ff4:	.word	0x00010f79
   10ff8:	.word	0x000110d7
   10ffc:	.word	0x000110a5
   11000:	.word	0x0001104b
   11004:	.word	0x00010f79
   11008:	.word	0x00010f79
   1100c:	.word	0x000110d3
   11010:	.word	0x00010f79
   11014:	.word	0x000110ad
   11018:	.word	0x00010f79
   1101c:	.word	0x00010f79
   11020:	.word	0x00011053
   11024:	subs	r3, #69	; 0x45
   11026:	cmp	r3, #2
   11028:	bhi.n	10f78 <__ssvfiscanf_r+0xec>
   1102a:	movs	r3, #5
   1102c:	b.n	1106e <__ssvfiscanf_r+0x1e2>
   1102e:	ldr	r3, [sp, #644]	; 0x284
   11030:	mov	r1, r4
   11032:	mov	r0, r6
   11034:	blx	r3
   11036:	cmp	r0, #0
   11038:	beq.w	10f0c <__ssvfiscanf_r+0x80>
   1103c:	ldr	r0, [sp, #272]	; 0x110
   1103e:	cmp	r0, #0
   11040:	bne.w	1115e <__ssvfiscanf_r+0x2d2>
   11044:	mov.w	r0, #4294967295
   11048:	b.n	1116a <__ssvfiscanf_r+0x2de>
   1104a:	ldr	r2, [sp, #260]	; 0x104
   1104c:	orr.w	r2, r2, #32
   11050:	str	r2, [sp, #260]	; 0x104
   11052:	ldr	r2, [sp, #260]	; 0x104
   11054:	orr.w	r2, r2, #512	; 0x200
   11058:	str	r2, [sp, #260]	; 0x104
   1105a:	movs	r2, #16
   1105c:	cmp	r3, #111	; 0x6f
   1105e:	str	r2, [sp, #264]	; 0x108
   11060:	ite	cc
   11062:	movcc	r3, #3
   11064:	movcs	r3, #4
   11066:	b.n	1106e <__ssvfiscanf_r+0x1e2>
   11068:	movs	r3, #0
   1106a:	str	r3, [sp, #264]	; 0x108
   1106c:	movs	r3, #3
   1106e:	str	r3, [sp, #284]	; 0x11c
   11070:	ldr	r3, [r4, #4]
   11072:	cmp	r3, #0
   11074:	ble.n	110f2 <__ssvfiscanf_r+0x266>
   11076:	ldr	r3, [sp, #260]	; 0x104
   11078:	lsls	r1, r3, #25
   1107a:	bmi.n	11086 <__ssvfiscanf_r+0x1fa>
   1107c:	ldr	r3, [r4, #0]
   1107e:	ldrb	r2, [r3, #0]
   11080:	ldrb	r2, [r7, r2]
   11082:	lsls	r2, r2, #28
   11084:	bmi.n	11100 <__ssvfiscanf_r+0x274>
   11086:	ldr	r3, [sp, #284]	; 0x11c
   11088:	cmp	r3, #2
   1108a:	bgt.n	11124 <__ssvfiscanf_r+0x298>
   1108c:	mov	r3, sp
   1108e:	mov	r2, r4
   11090:	add	r1, sp, #260	; 0x104
   11092:	mov	r0, r6
   11094:	bl	1117c <_scanf_chars>
   11098:	cmp	r0, #1
   1109a:	beq.n	11172 <__ssvfiscanf_r+0x2e6>
   1109c:	cmp	r0, #2
   1109e:	bne.w	10eda <__ssvfiscanf_r+0x4e>
   110a2:	b.n	1103c <__ssvfiscanf_r+0x1b0>
   110a4:	movs	r3, #8
   110a6:	str	r3, [sp, #264]	; 0x108
   110a8:	movs	r3, #4
   110aa:	b.n	1106e <__ssvfiscanf_r+0x1e2>
   110ac:	movs	r2, #10
   110ae:	b.n	1105c <__ssvfiscanf_r+0x1d0>
   110b0:	mov	r1, r5
   110b2:	mov	r0, r8
   110b4:	bl	11574 <__sccl>
   110b8:	ldr	r3, [sp, #260]	; 0x104
   110ba:	orr.w	r3, r3, #64	; 0x40
   110be:	str	r3, [sp, #260]	; 0x104
   110c0:	mov	r5, r0
   110c2:	movs	r3, #1
   110c4:	b.n	1106e <__ssvfiscanf_r+0x1e2>
   110c6:	ldr	r3, [sp, #260]	; 0x104
   110c8:	orr.w	r3, r3, #64	; 0x40
   110cc:	str	r3, [sp, #260]	; 0x104
   110ce:	movs	r3, #0
   110d0:	b.n	1106e <__ssvfiscanf_r+0x1e2>
   110d2:	movs	r3, #2
   110d4:	b.n	1106e <__ssvfiscanf_r+0x1e2>
   110d6:	ldr	r0, [sp, #260]	; 0x104
   110d8:	lsls	r3, r0, #27
   110da:	bmi.w	10eda <__ssvfiscanf_r+0x4e>
   110de:	ldr	r3, [sp, #0]
   110e0:	ldr	r2, [sp, #276]	; 0x114
   110e2:	adds	r1, r3, #4
   110e4:	str	r1, [sp, #0]
   110e6:	ldr	r3, [r3, #0]
   110e8:	lsls	r0, r0, #31
   110ea:	ite	mi
   110ec:	strhmi	r2, [r3, #0]
   110ee:	strpl	r2, [r3, #0]
   110f0:	b.n	10eda <__ssvfiscanf_r+0x4e>
   110f2:	ldr	r3, [sp, #644]	; 0x284
   110f4:	mov	r1, r4
   110f6:	mov	r0, r6
   110f8:	blx	r3
   110fa:	cmp	r0, #0
   110fc:	beq.n	11076 <__ssvfiscanf_r+0x1ea>
   110fe:	b.n	1103c <__ssvfiscanf_r+0x1b0>
   11100:	ldr	r2, [sp, #276]	; 0x114
   11102:	adds	r2, #1
   11104:	str	r2, [sp, #276]	; 0x114
   11106:	ldr	r2, [r4, #4]
   11108:	subs	r2, #1
   1110a:	cmp	r2, #0
   1110c:	str	r2, [r4, #4]
   1110e:	ble.n	11116 <__ssvfiscanf_r+0x28a>
   11110:	adds	r3, #1
   11112:	str	r3, [r4, #0]
   11114:	b.n	1107c <__ssvfiscanf_r+0x1f0>
   11116:	ldr	r3, [sp, #644]	; 0x284
   11118:	mov	r1, r4
   1111a:	mov	r0, r6
   1111c:	blx	r3
   1111e:	cmp	r0, #0
   11120:	beq.n	1107c <__ssvfiscanf_r+0x1f0>
   11122:	b.n	1103c <__ssvfiscanf_r+0x1b0>
   11124:	cmp	r3, #4
   11126:	bgt.n	11148 <__ssvfiscanf_r+0x2bc>
   11128:	mov	r3, sp
   1112a:	mov	r2, r4
   1112c:	add	r1, sp, #260	; 0x104
   1112e:	mov	r0, r6
   11130:	bl	11230 <_scanf_i>
   11134:	b.n	11098 <__ssvfiscanf_r+0x20c>
   11136:	nop
   11138:	.word	0x00010dd9
   1113c:	.word	0x00010e53
   11140:	.word	0x2000124c
   11144:	.word	0x20001427
   11148:	ldr	r3, [pc, #44]	; (11178 <__ssvfiscanf_r+0x2ec>)
   1114a:	cmp	r3, #0
   1114c:	beq.w	10eda <__ssvfiscanf_r+0x4e>
   11150:	mov	r3, sp
   11152:	mov	r2, r4
   11154:	add	r1, sp, #260	; 0x104
   11156:	mov	r0, r6
   11158:	bl	e32c <_scanf_float>
   1115c:	b.n	11098 <__ssvfiscanf_r+0x20c>
   1115e:	ldrh	r3, [r4, #12]
   11160:	tst.w	r3, #64	; 0x40
   11164:	it	ne
   11166:	movne.w	r0, #4294967295
   1116a:	add.w	sp, sp, #648	; 0x288
   1116e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11172:	ldr	r0, [sp, #272]	; 0x110
   11174:	b.n	1116a <__ssvfiscanf_r+0x2de>
   11176:	nop
   11178:	.word	0x0000e32d

0001117c <_scanf_chars>:
   1117c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11180:	mov	r5, r2
   11182:	ldr	r2, [r1, #8]
   11184:	mov	r8, r0
   11186:	mov	r4, r1
   11188:	cbnz	r2, 11198 <_scanf_chars+0x1c>
   1118a:	ldr	r2, [r1, #24]
   1118c:	cmp	r2, #0
   1118e:	ite	eq
   11190:	moveq	r2, #1
   11192:	movne.w	r2, #4294967295
   11196:	str	r2, [r1, #8]
   11198:	ldr	r2, [r4, #0]
   1119a:	ldr.w	r9, [pc, #144]	; 1122c <_scanf_chars+0xb0>
   1119e:	lsls	r1, r2, #27
   111a0:	itttt	pl
   111a2:	ldrpl	r2, [r3, #0]
   111a4:	addpl	r1, r2, #4
   111a6:	strpl	r1, [r3, #0]
   111a8:	ldrpl	r6, [r2, #0]
   111aa:	movs	r7, #0
   111ac:	ldr	r0, [r4, #24]
   111ae:	cbz	r0, 111d4 <_scanf_chars+0x58>
   111b0:	cmp	r0, #1
   111b2:	bne.n	111c4 <_scanf_chars+0x48>
   111b4:	ldr	r2, [r5, #0]
   111b6:	ldrb	r1, [r2, #0]
   111b8:	ldr	r2, [r4, #20]
   111ba:	ldrb	r2, [r2, r1]
   111bc:	cbnz	r2, 111d4 <_scanf_chars+0x58>
   111be:	cmp	r7, #0
   111c0:	beq.n	11226 <_scanf_chars+0xaa>
   111c2:	b.n	1120a <_scanf_chars+0x8e>
   111c4:	cmp	r0, #2
   111c6:	bne.n	1120a <_scanf_chars+0x8e>
   111c8:	ldr	r3, [r5, #0]
   111ca:	ldrb	r3, [r3, #0]
   111cc:	ldrb.w	r3, [r9, r3]
   111d0:	lsls	r3, r3, #28
   111d2:	bmi.n	1120a <_scanf_chars+0x8e>
   111d4:	ldr	r3, [r4, #0]
   111d6:	lsls	r2, r3, #27
   111d8:	ittt	pl
   111da:	ldrpl	r3, [r5, #0]
   111dc:	ldrbpl	r3, [r3, #0]
   111de:	strbpl.w	r3, [r6], #1
   111e2:	ldr	r2, [r5, #0]
   111e4:	ldr	r3, [r5, #4]
   111e6:	adds	r2, #1
   111e8:	str	r2, [r5, #0]
   111ea:	ldr	r2, [r4, #8]
   111ec:	subs	r3, #1
   111ee:	subs	r2, #1
   111f0:	str	r3, [r5, #4]
   111f2:	adds	r7, #1
   111f4:	str	r2, [r4, #8]
   111f6:	cbz	r2, 1120a <_scanf_chars+0x8e>
   111f8:	cmp	r3, #0
   111fa:	bgt.n	111ac <_scanf_chars+0x30>
   111fc:	ldr.w	r3, [r4, #384]	; 0x180
   11200:	mov	r1, r5
   11202:	mov	r0, r8
   11204:	blx	r3
   11206:	cmp	r0, #0
   11208:	beq.n	111ac <_scanf_chars+0x30>
   1120a:	ldr	r3, [r4, #0]
   1120c:	ands.w	r3, r3, #16
   11210:	bne.n	1121e <_scanf_chars+0xa2>
   11212:	ldr	r2, [r4, #12]
   11214:	adds	r2, #1
   11216:	str	r2, [r4, #12]
   11218:	ldr	r2, [r4, #24]
   1121a:	cbz	r2, 1121e <_scanf_chars+0xa2>
   1121c:	strb	r3, [r6, #0]
   1121e:	ldr	r3, [r4, #16]
   11220:	add	r3, r7
   11222:	str	r3, [r4, #16]
   11224:	movs	r0, #0
   11226:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1122a:	nop
   1122c:	.word	0x2000124c

00011230 <_scanf_i>:
   11230:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11234:	mov	r8, r3
   11236:	ldr	r3, [pc, #464]	; (11408 <_scanf_i+0x1d8>)
   11238:	mov	r4, r1
   1123a:	mov	sl, r0
   1123c:	mov	r6, r2
   1123e:	ldmia.w	r3, {r0, r1, r2}
   11242:	sub	sp, #28
   11244:	add	r3, sp, #12
   11246:	stmia.w	r3, {r0, r1, r2}
   1124a:	ldr	r3, [pc, #448]	; (1140c <_scanf_i+0x1dc>)
   1124c:	ldr	r1, [r4, #24]
   1124e:	ldr	r2, [pc, #448]	; (11410 <_scanf_i+0x1e0>)
   11250:	cmp	r1, #3
   11252:	it	ne
   11254:	movne	r2, r3
   11256:	ldr	r3, [r4, #8]
   11258:	str	r2, [sp, #4]
   1125a:	subs	r2, r3, #1
   1125c:	cmp.w	r2, #348	; 0x15c
   11260:	it	hi
   11262:	mvnhi.w	r5, #348	; 0x15c
   11266:	mov	r7, r4
   11268:	ittt	hi
   1126a:	addhi.w	r9, r3, r5
   1126e:	movwhi	r3, #349	; 0x15d
   11272:	strhi	r3, [r4, #8]
   11274:	ldr.w	r3, [r7], #28
   11278:	orr.w	r3, r3, #3328	; 0xd00
   1127c:	it	ls
   1127e:	movls.w	r9, #0
   11282:	str	r3, [r4, #0]
   11284:	mov	r5, r7
   11286:	mov.w	fp, #0
   1128a:	ldr	r1, [r6, #0]
   1128c:	add	r3, sp, #12
   1128e:	ldrb	r1, [r1, #0]
   11290:	ldr.w	r0, [r3, fp, lsl #2]
   11294:	movs	r2, #2
   11296:	bl	ecf0 <memchr>
   1129a:	cbz	r0, 112e8 <_scanf_i+0xb8>
   1129c:	cmp.w	fp, #1
   112a0:	bne.n	11356 <_scanf_i+0x126>
   112a2:	ldr	r2, [r4, #4]
   112a4:	cbnz	r2, 112b2 <_scanf_i+0x82>
   112a6:	ldr	r2, [r4, #0]
   112a8:	movs	r3, #8
   112aa:	orr.w	r2, r2, #512	; 0x200
   112ae:	str	r3, [r4, #4]
   112b0:	str	r2, [r4, #0]
   112b2:	ldr	r2, [r4, #0]
   112b4:	bic.w	r2, r2, #1280	; 0x500
   112b8:	str	r2, [r4, #0]
   112ba:	ldr	r2, [r4, #8]
   112bc:	subs	r1, r2, #1
   112be:	str	r1, [r4, #8]
   112c0:	cbz	r2, 112e8 <_scanf_i+0xb8>
   112c2:	ldr	r2, [r6, #0]
   112c4:	adds	r1, r2, #1
   112c6:	str	r1, [r6, #0]
   112c8:	ldrb	r2, [r2, #0]
   112ca:	strb.w	r2, [r5], #1
   112ce:	ldr	r2, [r6, #4]
   112d0:	subs	r2, #1
   112d2:	cmp	r2, #0
   112d4:	str	r2, [r6, #4]
   112d6:	bgt.n	112e8 <_scanf_i+0xb8>
   112d8:	ldr.w	r2, [r4, #384]	; 0x180
   112dc:	mov	r1, r6
   112de:	mov	r0, sl
   112e0:	blx	r2
   112e2:	cmp	r0, #0
   112e4:	bne.w	113f2 <_scanf_i+0x1c2>
   112e8:	add.w	fp, fp, #1
   112ec:	cmp.w	fp, #3
   112f0:	bne.n	1128a <_scanf_i+0x5a>
   112f2:	ldr	r3, [r4, #4]
   112f4:	cbnz	r3, 112fa <_scanf_i+0xca>
   112f6:	movs	r3, #10
   112f8:	str	r3, [r4, #4]
   112fa:	ldr	r3, [r4, #4]
   112fc:	ldr	r1, [pc, #276]	; (11414 <_scanf_i+0x1e4>)
   112fe:	ldr	r0, [r4, #20]
   11300:	subs	r1, r1, r3
   11302:	bl	11574 <__sccl>
   11306:	mov.w	fp, #0
   1130a:	ldr	r3, [r4, #8]
   1130c:	ldr	r2, [r4, #0]
   1130e:	cmp	r3, #0
   11310:	beq.n	1138e <_scanf_i+0x15e>
   11312:	ldr	r1, [r6, #0]
   11314:	ldr	r0, [r4, #20]
   11316:	ldrb.w	ip, [r1]
   1131a:	ldrb.w	r0, [r0, ip]
   1131e:	cmp	r0, #0
   11320:	beq.n	1138e <_scanf_i+0x15e>
   11322:	cmp.w	ip, #48	; 0x30
   11326:	bne.n	11372 <_scanf_i+0x142>
   11328:	lsls	r0, r2, #20
   1132a:	bpl.n	11372 <_scanf_i+0x142>
   1132c:	add.w	fp, fp, #1
   11330:	cmp.w	r9, #0
   11334:	beq.n	1133e <_scanf_i+0x10e>
   11336:	adds	r3, #1
   11338:	add.w	r9, r9, #4294967295
   1133c:	str	r3, [r4, #8]
   1133e:	ldr	r3, [r6, #4]
   11340:	subs	r3, #1
   11342:	cmp	r3, #0
   11344:	str	r3, [r6, #4]
   11346:	ble.n	11380 <_scanf_i+0x150>
   11348:	ldr	r3, [r6, #0]
   1134a:	adds	r3, #1
   1134c:	str	r3, [r6, #0]
   1134e:	ldr	r3, [r4, #8]
   11350:	subs	r3, #1
   11352:	str	r3, [r4, #8]
   11354:	b.n	1130a <_scanf_i+0xda>
   11356:	cmp.w	fp, #2
   1135a:	bne.n	112ba <_scanf_i+0x8a>
   1135c:	ldr	r2, [r4, #0]
   1135e:	and.w	r1, r2, #1536	; 0x600
   11362:	cmp.w	r1, #512	; 0x200
   11366:	bne.n	112e8 <_scanf_i+0xb8>
   11368:	movs	r3, #16
   1136a:	str	r3, [r4, #4]
   1136c:	orr.w	r2, r2, #256	; 0x100
   11370:	b.n	112b8 <_scanf_i+0x88>
   11372:	bic.w	r2, r2, #2304	; 0x900
   11376:	str	r2, [r4, #0]
   11378:	ldrb	r3, [r1, #0]
   1137a:	strb.w	r3, [r5], #1
   1137e:	b.n	1133e <_scanf_i+0x10e>
   11380:	ldr.w	r3, [r4, #384]	; 0x180
   11384:	mov	r1, r6
   11386:	mov	r0, sl
   11388:	blx	r3
   1138a:	cmp	r0, #0
   1138c:	beq.n	1134e <_scanf_i+0x11e>
   1138e:	ldr	r3, [r4, #0]
   11390:	lsls	r1, r3, #23
   11392:	bpl.n	113b0 <_scanf_i+0x180>
   11394:	cmp	r5, r7
   11396:	bls.n	113ac <_scanf_i+0x17c>
   11398:	ldrb.w	r1, [r5, #-1]
   1139c:	ldr.w	r3, [r4, #380]	; 0x17c
   113a0:	mov	r2, r6
   113a2:	mov	r0, sl
   113a4:	blx	r3
   113a6:	add.w	r9, r5, #4294967295
   113aa:	mov	r5, r9
   113ac:	cmp	r5, r7
   113ae:	beq.n	11402 <_scanf_i+0x1d2>
   113b0:	ldr	r2, [r4, #0]
   113b2:	ands.w	r2, r2, #16
   113b6:	bne.n	113e0 <_scanf_i+0x1b0>
   113b8:	strb	r2, [r5, #0]
   113ba:	ldr	r3, [r4, #4]
   113bc:	ldr	r6, [sp, #4]
   113be:	mov	r1, r7
   113c0:	mov	r0, sl
   113c2:	blx	r6
   113c4:	ldr.w	r3, [r8]
   113c8:	ldr	r1, [r4, #0]
   113ca:	adds	r2, r3, #4
   113cc:	str.w	r2, [r8]
   113d0:	tst.w	r1, #32
   113d4:	ldr	r3, [r3, #0]
   113d6:	beq.n	113f8 <_scanf_i+0x1c8>
   113d8:	str	r0, [r3, #0]
   113da:	ldr	r3, [r4, #12]
   113dc:	adds	r3, #1
   113de:	str	r3, [r4, #12]
   113e0:	ldr	r3, [r4, #16]
   113e2:	subs	r5, r5, r7
   113e4:	add	r5, fp
   113e6:	add	r3, r5
   113e8:	str	r3, [r4, #16]
   113ea:	movs	r0, #0
   113ec:	add	sp, #28
   113ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113f2:	mov.w	fp, #0
   113f6:	b.n	1138e <_scanf_i+0x15e>
   113f8:	lsls	r2, r1, #31
   113fa:	ite	mi
   113fc:	strhmi	r0, [r3, #0]
   113fe:	strpl	r0, [r3, #0]
   11400:	b.n	113da <_scanf_i+0x1aa>
   11402:	movs	r0, #1
   11404:	b.n	113ec <_scanf_i+0x1bc>
   11406:	nop
   11408:	.word	0x20000418
   1140c:	.word	0x000117a9
   11410:	.word	0x0000da85
   11414:	.word	0x20001419

00011418 <__sflush_r>:
   11418:	ldrh	r2, [r1, #12]
   1141a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1141e:	mov	r5, r0
   11420:	lsls	r0, r2, #28
   11422:	mov	r4, r1
   11424:	bmi.n	114d8 <__sflush_r+0xc0>
   11426:	ldr	r3, [r1, #4]
   11428:	cmp	r3, #0
   1142a:	bgt.n	11438 <__sflush_r+0x20>
   1142c:	ldr	r3, [r1, #64]	; 0x40
   1142e:	cmp	r3, #0
   11430:	bgt.n	11438 <__sflush_r+0x20>
   11432:	movs	r0, #0
   11434:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11438:	ldr	r6, [r4, #44]	; 0x2c
   1143a:	cmp	r6, #0
   1143c:	beq.n	11432 <__sflush_r+0x1a>
   1143e:	movs	r3, #0
   11440:	ands.w	r2, r2, #4096	; 0x1000
   11444:	ldr	r7, [r5, #0]
   11446:	ldr	r1, [r4, #32]
   11448:	str	r3, [r5, #0]
   1144a:	beq.n	114b2 <__sflush_r+0x9a>
   1144c:	ldr	r0, [r4, #84]	; 0x54
   1144e:	ldrh	r3, [r4, #12]
   11450:	lsls	r2, r3, #29
   11452:	bpl.n	11460 <__sflush_r+0x48>
   11454:	ldr	r3, [r4, #4]
   11456:	subs	r0, r0, r3
   11458:	ldr	r3, [r4, #52]	; 0x34
   1145a:	cbz	r3, 11460 <__sflush_r+0x48>
   1145c:	ldr	r3, [r4, #64]	; 0x40
   1145e:	subs	r0, r0, r3
   11460:	movs	r3, #0
   11462:	mov	r2, r0
   11464:	ldr	r6, [r4, #44]	; 0x2c
   11466:	ldr	r1, [r4, #32]
   11468:	mov	r0, r5
   1146a:	blx	r6
   1146c:	adds	r3, r0, #1
   1146e:	ldrh	r3, [r4, #12]
   11470:	bne.n	11480 <__sflush_r+0x68>
   11472:	ldr	r1, [r5, #0]
   11474:	cmp	r1, #29
   11476:	bhi.n	114d0 <__sflush_r+0xb8>
   11478:	ldr	r2, [pc, #164]	; (11520 <__sflush_r+0x108>)
   1147a:	asrs	r2, r1
   1147c:	lsls	r6, r2, #31
   1147e:	bmi.n	114d0 <__sflush_r+0xb8>
   11480:	movs	r2, #0
   11482:	str	r2, [r4, #4]
   11484:	lsls	r1, r3, #19
   11486:	ldr	r2, [r4, #16]
   11488:	str	r2, [r4, #0]
   1148a:	bpl.n	11496 <__sflush_r+0x7e>
   1148c:	adds	r2, r0, #1
   1148e:	bne.n	11494 <__sflush_r+0x7c>
   11490:	ldr	r3, [r5, #0]
   11492:	cbnz	r3, 11496 <__sflush_r+0x7e>
   11494:	str	r0, [r4, #84]	; 0x54
   11496:	ldr	r1, [r4, #52]	; 0x34
   11498:	str	r7, [r5, #0]
   1149a:	cmp	r1, #0
   1149c:	beq.n	11432 <__sflush_r+0x1a>
   1149e:	add.w	r3, r4, #68	; 0x44
   114a2:	cmp	r1, r3
   114a4:	beq.n	114ac <__sflush_r+0x94>
   114a6:	mov	r0, r5
   114a8:	bl	f9a8 <_free_r>
   114ac:	movs	r0, #0
   114ae:	str	r0, [r4, #52]	; 0x34
   114b0:	b.n	11434 <__sflush_r+0x1c>
   114b2:	movs	r3, #1
   114b4:	mov	r0, r5
   114b6:	blx	r6
   114b8:	adds	r1, r0, #1
   114ba:	bne.n	1144e <__sflush_r+0x36>
   114bc:	ldr	r3, [r5, #0]
   114be:	cmp	r3, #0
   114c0:	beq.n	1144e <__sflush_r+0x36>
   114c2:	cmp	r3, #29
   114c4:	beq.n	114ca <__sflush_r+0xb2>
   114c6:	cmp	r3, #22
   114c8:	bne.n	114ce <__sflush_r+0xb6>
   114ca:	str	r7, [r5, #0]
   114cc:	b.n	11432 <__sflush_r+0x1a>
   114ce:	ldrh	r3, [r4, #12]
   114d0:	orr.w	r3, r3, #64	; 0x40
   114d4:	strh	r3, [r4, #12]
   114d6:	b.n	11434 <__sflush_r+0x1c>
   114d8:	ldr	r7, [r1, #16]
   114da:	cmp	r7, #0
   114dc:	beq.n	11432 <__sflush_r+0x1a>
   114de:	lsls	r3, r2, #30
   114e0:	ldr	r6, [r1, #0]
   114e2:	it	eq
   114e4:	ldreq	r3, [r1, #20]
   114e6:	str	r7, [r1, #0]
   114e8:	it	ne
   114ea:	movne	r3, #0
   114ec:	sub.w	r8, r6, r7
   114f0:	str	r3, [r1, #8]
   114f2:	cmp.w	r8, #0
   114f6:	ble.n	11432 <__sflush_r+0x1a>
   114f8:	ldr	r1, [r4, #32]
   114fa:	ldr	r6, [r4, #40]	; 0x28
   114fc:	mov	r3, r8
   114fe:	mov	r2, r7
   11500:	mov	r0, r5
   11502:	blx	r6
   11504:	cmp	r0, #0
   11506:	bgt.n	11516 <__sflush_r+0xfe>
   11508:	ldrh	r3, [r4, #12]
   1150a:	orr.w	r3, r3, #64	; 0x40
   1150e:	strh	r3, [r4, #12]
   11510:	mov.w	r0, #4294967295
   11514:	b.n	11434 <__sflush_r+0x1c>
   11516:	add	r7, r0
   11518:	sub.w	r8, r8, r0
   1151c:	b.n	114f2 <__sflush_r+0xda>
   1151e:	nop
   11520:	.word	0xdfbffffe

00011524 <_fflush_r>:
   11524:	push	{r3, r4, r5, lr}
   11526:	ldr	r3, [r1, #16]
   11528:	mov	r5, r0
   1152a:	mov	r4, r1
   1152c:	cbnz	r3, 11534 <_fflush_r+0x10>
   1152e:	movs	r5, #0
   11530:	mov	r0, r5
   11532:	pop	{r3, r4, r5, pc}
   11534:	cbz	r0, 1153e <_fflush_r+0x1a>
   11536:	ldr	r3, [r0, #32]
   11538:	cbnz	r3, 1153e <_fflush_r+0x1a>
   1153a:	bl	e828 <__sinit>
   1153e:	ldrsh.w	r3, [r4, #12]
   11542:	cmp	r3, #0
   11544:	beq.n	1152e <_fflush_r+0xa>
   11546:	ldr	r2, [r4, #100]	; 0x64
   11548:	lsls	r0, r2, #31
   1154a:	bmi.n	11556 <_fflush_r+0x32>
   1154c:	lsls	r1, r3, #22
   1154e:	bmi.n	11556 <_fflush_r+0x32>
   11550:	ldr	r0, [r4, #88]	; 0x58
   11552:	bl	ecd8 <__retarget_lock_acquire_recursive>
   11556:	mov	r0, r5
   11558:	mov	r1, r4
   1155a:	bl	11418 <__sflush_r>
   1155e:	ldr	r3, [r4, #100]	; 0x64
   11560:	lsls	r2, r3, #31
   11562:	mov	r5, r0
   11564:	bmi.n	11530 <_fflush_r+0xc>
   11566:	ldrh	r3, [r4, #12]
   11568:	lsls	r3, r3, #22
   1156a:	bmi.n	11530 <_fflush_r+0xc>
   1156c:	ldr	r0, [r4, #88]	; 0x58
   1156e:	bl	ecda <__retarget_lock_release_recursive>
   11572:	b.n	11530 <_fflush_r+0xc>

00011574 <__sccl>:
   11574:	push	{r4, r5, r6, lr}
   11576:	ldrb	r3, [r1, #0]
   11578:	mov	r4, r0
   1157a:	cmp	r3, #94	; 0x5e
   1157c:	itete	eq
   1157e:	ldrbeq	r3, [r1, #1]
   11580:	addne	r2, r1, #1
   11582:	addeq	r2, r1, #2
   11584:	movne	r1, #0
   11586:	it	eq
   11588:	moveq	r1, #1
   1158a:	subs	r0, #1
   1158c:	add.w	r5, r4, #255	; 0xff
   11590:	strb.w	r1, [r0, #1]!
   11594:	cmp	r0, r5
   11596:	bne.n	11590 <__sccl+0x1c>
   11598:	cbnz	r3, 1159e <__sccl+0x2a>
   1159a:	subs	r0, r2, #1
   1159c:	pop	{r4, r5, r6, pc}
   1159e:	eor.w	r1, r1, #1
   115a2:	strb	r1, [r4, r3]
   115a4:	mov	r0, r2
   115a6:	mov	r2, r0
   115a8:	ldrb.w	r5, [r2], #1
   115ac:	cmp	r5, #45	; 0x2d
   115ae:	beq.n	115bc <__sccl+0x48>
   115b0:	cmp	r5, #93	; 0x5d
   115b2:	beq.n	115e2 <__sccl+0x6e>
   115b4:	cmp	r5, #0
   115b6:	beq.n	1159c <__sccl+0x28>
   115b8:	mov	r3, r5
   115ba:	b.n	115a2 <__sccl+0x2e>
   115bc:	ldrb	r6, [r0, #1]
   115be:	cmp	r6, #93	; 0x5d
   115c0:	beq.n	115b8 <__sccl+0x44>
   115c2:	cmp	r3, r6
   115c4:	bgt.n	115b8 <__sccl+0x44>
   115c6:	adds	r0, #2
   115c8:	mov	r2, r3
   115ca:	adds	r2, #1
   115cc:	cmp	r6, r2
   115ce:	strb	r1, [r4, r2]
   115d0:	bgt.n	115ca <__sccl+0x56>
   115d2:	subs	r2, r6, r3
   115d4:	subs	r2, #1
   115d6:	adds	r5, r3, #1
   115d8:	cmp	r3, r6
   115da:	it	ge
   115dc:	movge	r2, #0
   115de:	adds	r3, r5, r2
   115e0:	b.n	115a6 <__sccl+0x32>
   115e2:	mov	r0, r2
   115e4:	b.n	1159c <__sccl+0x28>

000115e6 <__submore>:
   115e6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115ea:	mov	r4, r1
   115ec:	ldr	r1, [r1, #52]	; 0x34
   115ee:	add.w	r3, r4, #68	; 0x44
   115f2:	cmp	r1, r3
   115f4:	bne.n	11632 <__submore+0x4c>
   115f6:	mov.w	r1, #1024	; 0x400
   115fa:	bl	cc78 <_malloc_r>
   115fe:	cbnz	r0, 11608 <__submore+0x22>
   11600:	mov.w	r0, #4294967295
   11604:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11608:	mov.w	r3, #1024	; 0x400
   1160c:	str	r3, [r4, #56]	; 0x38
   1160e:	ldrb.w	r3, [r4, #70]	; 0x46
   11612:	str	r0, [r4, #52]	; 0x34
   11614:	strb.w	r3, [r0, #1023]	; 0x3ff
   11618:	ldrb.w	r3, [r4, #69]	; 0x45
   1161c:	strb.w	r3, [r0, #1022]	; 0x3fe
   11620:	ldrb.w	r3, [r4, #68]	; 0x44
   11624:	strb.w	r3, [r0, #1021]	; 0x3fd
   11628:	addw	r0, r0, #1021	; 0x3fd
   1162c:	str	r0, [r4, #0]
   1162e:	movs	r0, #0
   11630:	b.n	11604 <__submore+0x1e>
   11632:	ldr	r6, [r4, #56]	; 0x38
   11634:	lsls	r7, r6, #1
   11636:	mov	r2, r7
   11638:	bl	cd7c <_realloc_r>
   1163c:	mov	r5, r0
   1163e:	cmp	r0, #0
   11640:	beq.n	11600 <__submore+0x1a>
   11642:	add.w	r8, r0, r6
   11646:	mov	r1, r0
   11648:	mov	r2, r6
   1164a:	mov	r0, r8
   1164c:	bl	a218 <memcpy>
   11650:	strd	r5, r7, [r4, #52]	; 0x34
   11654:	str.w	r8, [r4]
   11658:	b.n	1162e <__submore+0x48>
	...

0001165c <__assert_func>:
   1165c:	push	{r0, r1, r2, r3, r4, lr}
   1165e:	mov	r4, r2
   11660:	mov	r2, r3
   11662:	ldr	r3, [pc, #36]	; (11688 <__assert_func+0x2c>)
   11664:	ldr	r3, [r3, #0]
   11666:	mov	r5, r0
   11668:	ldr	r0, [r3, #12]
   1166a:	cbz	r4, 11680 <__assert_func+0x24>
   1166c:	ldr	r3, [pc, #28]	; (1168c <__assert_func+0x30>)
   1166e:	str	r1, [sp, #0]
   11670:	strd	r3, r4, [sp, #4]
   11674:	ldr	r1, [pc, #24]	; (11690 <__assert_func+0x34>)
   11676:	mov	r3, r5
   11678:	bl	117ac <fiprintf>
   1167c:	bl	b956 <abort>
   11680:	ldr	r3, [pc, #16]	; (11694 <__assert_func+0x38>)
   11682:	mov	r4, r3
   11684:	b.n	1166e <__assert_func+0x12>
   11686:	nop
   11688:	.word	0x200022d0
   1168c:	.word	0x200011ae
   11690:	.word	0x200011bb
   11694:	.word	0x20000dbc

00011698 <_calloc_r>:
   11698:	push	{r0, r1, r2, r4, r5, lr}
   1169a:	umull	r2, r4, r1, r2
   1169e:	cbnz	r4, 116b4 <_calloc_r+0x1c>
   116a0:	mov	r1, r2
   116a2:	str	r2, [sp, #4]
   116a4:	bl	cc78 <_malloc_r>
   116a8:	ldr	r2, [sp, #4]
   116aa:	mov	r5, r0
   116ac:	cbnz	r0, 116bc <_calloc_r+0x24>
   116ae:	mov	r0, r5
   116b0:	add	sp, #12
   116b2:	pop	{r4, r5, pc}
   116b4:	movs	r2, #12
   116b6:	str	r2, [r0, #0]
   116b8:	movs	r5, #0
   116ba:	b.n	116ae <_calloc_r+0x16>
   116bc:	mov	r1, r4
   116be:	bl	a1d4 <memset>
   116c2:	b.n	116ae <_calloc_r+0x16>

000116c4 <_strtoul_l.constprop.0>:
   116c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   116c8:	ldr	r7, [pc, #216]	; (117a4 <_strtoul_l.constprop.0+0xe0>)
   116ca:	mov	lr, r0
   116cc:	mov	r5, r1
   116ce:	mov	r0, r5
   116d0:	ldrb.w	r4, [r5], #1
   116d4:	ldrb	r6, [r7, r4]
   116d6:	ands.w	r6, r6, #8
   116da:	bne.n	116ce <_strtoul_l.constprop.0+0xa>
   116dc:	cmp	r4, #45	; 0x2d
   116de:	bne.n	11742 <_strtoul_l.constprop.0+0x7e>
   116e0:	ldrb	r4, [r5, #0]
   116e2:	movs	r6, #1
   116e4:	adds	r5, r0, #2
   116e6:	cmp	r3, #0
   116e8:	beq.n	1179a <_strtoul_l.constprop.0+0xd6>
   116ea:	cmp	r3, #16
   116ec:	bne.n	11702 <_strtoul_l.constprop.0+0x3e>
   116ee:	cmp	r4, #48	; 0x30
   116f0:	bne.n	11702 <_strtoul_l.constprop.0+0x3e>
   116f2:	ldrb	r0, [r5, #0]
   116f4:	and.w	r0, r0, #223	; 0xdf
   116f8:	cmp	r0, #88	; 0x58
   116fa:	bne.n	11790 <_strtoul_l.constprop.0+0xcc>
   116fc:	ldrb	r4, [r5, #1]
   116fe:	movs	r3, #16
   11700:	adds	r5, #2
   11702:	mov.w	r8, #4294967295
   11706:	movs	r7, #0
   11708:	udiv	r8, r8, r3
   1170c:	mul.w	r9, r3, r8
   11710:	mvn.w	r9, r9
   11714:	mov	r0, r7
   11716:	sub.w	ip, r4, #48	; 0x30
   1171a:	cmp.w	ip, #9
   1171e:	bhi.n	1174c <_strtoul_l.constprop.0+0x88>
   11720:	mov	r4, ip
   11722:	cmp	r3, r4
   11724:	ble.n	1176e <_strtoul_l.constprop.0+0xaa>
   11726:	cmp.w	r7, #4294967295
   1172a:	beq.n	1173c <_strtoul_l.constprop.0+0x78>
   1172c:	cmp	r8, r0
   1172e:	bcc.n	11768 <_strtoul_l.constprop.0+0xa4>
   11730:	bne.n	11736 <_strtoul_l.constprop.0+0x72>
   11732:	cmp	r9, r4
   11734:	blt.n	11768 <_strtoul_l.constprop.0+0xa4>
   11736:	mla	r0, r0, r3, r4
   1173a:	movs	r7, #1
   1173c:	ldrb.w	r4, [r5], #1
   11740:	b.n	11716 <_strtoul_l.constprop.0+0x52>
   11742:	cmp	r4, #43	; 0x2b
   11744:	itt	eq
   11746:	ldrbeq	r4, [r5, #0]
   11748:	addeq	r5, r0, #2
   1174a:	b.n	116e6 <_strtoul_l.constprop.0+0x22>
   1174c:	sub.w	ip, r4, #65	; 0x41
   11750:	cmp.w	ip, #25
   11754:	bhi.n	1175a <_strtoul_l.constprop.0+0x96>
   11756:	subs	r4, #55	; 0x37
   11758:	b.n	11722 <_strtoul_l.constprop.0+0x5e>
   1175a:	sub.w	ip, r4, #97	; 0x61
   1175e:	cmp.w	ip, #25
   11762:	bhi.n	1176e <_strtoul_l.constprop.0+0xaa>
   11764:	subs	r4, #87	; 0x57
   11766:	b.n	11722 <_strtoul_l.constprop.0+0x5e>
   11768:	mov.w	r7, #4294967295
   1176c:	b.n	1173c <_strtoul_l.constprop.0+0x78>
   1176e:	adds	r3, r7, #1
   11770:	bne.n	11780 <_strtoul_l.constprop.0+0xbc>
   11772:	movs	r3, #34	; 0x22
   11774:	str.w	r3, [lr]
   11778:	mov	r0, r7
   1177a:	cbnz	r2, 1178a <_strtoul_l.constprop.0+0xc6>
   1177c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11780:	cbz	r6, 11784 <_strtoul_l.constprop.0+0xc0>
   11782:	negs	r0, r0
   11784:	cmp	r2, #0
   11786:	beq.n	1177c <_strtoul_l.constprop.0+0xb8>
   11788:	cbz	r7, 1178c <_strtoul_l.constprop.0+0xc8>
   1178a:	subs	r1, r5, #1
   1178c:	str	r1, [r2, #0]
   1178e:	b.n	1177c <_strtoul_l.constprop.0+0xb8>
   11790:	movs	r4, #48	; 0x30
   11792:	cmp	r3, #0
   11794:	bne.n	11702 <_strtoul_l.constprop.0+0x3e>
   11796:	movs	r3, #8
   11798:	b.n	11702 <_strtoul_l.constprop.0+0x3e>
   1179a:	cmp	r4, #48	; 0x30
   1179c:	beq.n	116f2 <_strtoul_l.constprop.0+0x2e>
   1179e:	movs	r3, #10
   117a0:	b.n	11702 <_strtoul_l.constprop.0+0x3e>
   117a2:	nop
   117a4:	.word	0x2000124c

000117a8 <_strtoul_r>:
   117a8:	b.w	116c4 <_strtoul_l.constprop.0>

000117ac <fiprintf>:
   117ac:	push	{r1, r2, r3}
   117ae:	push	{r0, r1, lr}
   117b0:	mov	r1, r0
   117b2:	add	r3, sp, #12
   117b4:	ldr	r0, [pc, #20]	; (117cc <fiprintf+0x20>)
   117b6:	ldr.w	r2, [r3], #4
   117ba:	ldr	r0, [r0, #0]
   117bc:	str	r3, [sp, #4]
   117be:	bl	11824 <_vfiprintf_r>
   117c2:	add	sp, #8
   117c4:	ldr.w	lr, [sp], #4
   117c8:	add	sp, #12
   117ca:	bx	lr
   117cc:	.word	0x200022d0

000117d0 <__sfputc_r>:
   117d0:	ldr	r3, [r2, #8]
   117d2:	subs	r3, #1
   117d4:	cmp	r3, #0
   117d6:	push	{r4}
   117d8:	str	r3, [r2, #8]
   117da:	bge.n	117ee <__sfputc_r+0x1e>
   117dc:	ldr	r4, [r2, #24]
   117de:	cmp	r3, r4
   117e0:	blt.n	117e6 <__sfputc_r+0x16>
   117e2:	cmp	r1, #10
   117e4:	bne.n	117ee <__sfputc_r+0x1e>
   117e6:	ldr.w	r4, [sp], #4
   117ea:	b.w	11a58 <__swbuf_r>
   117ee:	ldr	r3, [r2, #0]
   117f0:	adds	r0, r3, #1
   117f2:	str	r0, [r2, #0]
   117f4:	strb	r1, [r3, #0]
   117f6:	mov	r0, r1
   117f8:	ldr.w	r4, [sp], #4
   117fc:	bx	lr

000117fe <__sfputs_r>:
   117fe:	push	{r3, r4, r5, r6, r7, lr}
   11800:	mov	r6, r0
   11802:	mov	r7, r1
   11804:	mov	r4, r2
   11806:	adds	r5, r2, r3
   11808:	cmp	r4, r5
   1180a:	bne.n	11810 <__sfputs_r+0x12>
   1180c:	movs	r0, #0
   1180e:	b.n	11820 <__sfputs_r+0x22>
   11810:	ldrb.w	r1, [r4], #1
   11814:	mov	r2, r7
   11816:	mov	r0, r6
   11818:	bl	117d0 <__sfputc_r>
   1181c:	adds	r3, r0, #1
   1181e:	bne.n	11808 <__sfputs_r+0xa>
   11820:	pop	{r3, r4, r5, r6, r7, pc}
	...

00011824 <_vfiprintf_r>:
   11824:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11828:	mov	r5, r1
   1182a:	sub	sp, #116	; 0x74
   1182c:	mov	r4, r2
   1182e:	mov	r8, r3
   11830:	mov	r6, r0
   11832:	cbz	r0, 1183c <_vfiprintf_r+0x18>
   11834:	ldr	r3, [r0, #32]
   11836:	cbnz	r3, 1183c <_vfiprintf_r+0x18>
   11838:	bl	e828 <__sinit>
   1183c:	ldr	r3, [r5, #100]	; 0x64
   1183e:	lsls	r1, r3, #31
   11840:	bmi.n	1184e <_vfiprintf_r+0x2a>
   11842:	ldrh	r3, [r5, #12]
   11844:	lsls	r2, r3, #22
   11846:	bmi.n	1184e <_vfiprintf_r+0x2a>
   11848:	ldr	r0, [r5, #88]	; 0x58
   1184a:	bl	ecd8 <__retarget_lock_acquire_recursive>
   1184e:	ldrh	r3, [r5, #12]
   11850:	lsls	r3, r3, #28
   11852:	bpl.n	11858 <_vfiprintf_r+0x34>
   11854:	ldr	r3, [r5, #16]
   11856:	cbnz	r3, 11880 <_vfiprintf_r+0x5c>
   11858:	mov	r1, r5
   1185a:	mov	r0, r6
   1185c:	bl	11ad4 <__swsetup_r>
   11860:	cbz	r0, 11880 <_vfiprintf_r+0x5c>
   11862:	ldr	r3, [r5, #100]	; 0x64
   11864:	lsls	r4, r3, #31
   11866:	bpl.n	11872 <_vfiprintf_r+0x4e>
   11868:	mov.w	r0, #4294967295
   1186c:	add	sp, #116	; 0x74
   1186e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11872:	ldrh	r3, [r5, #12]
   11874:	lsls	r0, r3, #22
   11876:	bmi.n	11868 <_vfiprintf_r+0x44>
   11878:	ldr	r0, [r5, #88]	; 0x58
   1187a:	bl	ecda <__retarget_lock_release_recursive>
   1187e:	b.n	11868 <_vfiprintf_r+0x44>
   11880:	movs	r3, #0
   11882:	str	r3, [sp, #36]	; 0x24
   11884:	movs	r3, #32
   11886:	strb.w	r3, [sp, #41]	; 0x29
   1188a:	str.w	r8, [sp, #12]
   1188e:	movs	r3, #48	; 0x30
   11890:	ldr.w	r8, [pc, #432]	; 11a44 <_vfiprintf_r+0x220>
   11894:	strb.w	r3, [sp, #42]	; 0x2a
   11898:	mov.w	r9, #1
   1189c:	mov	r3, r4
   1189e:	mov	sl, r3
   118a0:	ldrb.w	r2, [r3], #1
   118a4:	cbz	r2, 118aa <_vfiprintf_r+0x86>
   118a6:	cmp	r2, #37	; 0x25
   118a8:	bne.n	1189e <_vfiprintf_r+0x7a>
   118aa:	subs.w	fp, sl, r4
   118ae:	beq.n	118c8 <_vfiprintf_r+0xa4>
   118b0:	mov	r3, fp
   118b2:	mov	r2, r4
   118b4:	mov	r1, r5
   118b6:	mov	r0, r6
   118b8:	bl	117fe <__sfputs_r>
   118bc:	adds	r0, #1
   118be:	beq.w	11a14 <_vfiprintf_r+0x1f0>
   118c2:	ldr	r2, [sp, #36]	; 0x24
   118c4:	add	r2, fp
   118c6:	str	r2, [sp, #36]	; 0x24
   118c8:	ldrb.w	r3, [sl]
   118cc:	cmp	r3, #0
   118ce:	beq.w	11a14 <_vfiprintf_r+0x1f0>
   118d2:	movs	r3, #0
   118d4:	mov.w	r2, #4294967295
   118d8:	strd	r2, r3, [sp, #20]
   118dc:	add.w	sl, sl, #1
   118e0:	str	r3, [sp, #16]
   118e2:	str	r3, [sp, #28]
   118e4:	strb.w	r3, [sp, #83]	; 0x53
   118e8:	str	r3, [sp, #104]	; 0x68
   118ea:	mov	r4, sl
   118ec:	movs	r2, #5
   118ee:	ldrb.w	r1, [r4], #1
   118f2:	ldr	r0, [pc, #336]	; (11a44 <_vfiprintf_r+0x220>)
   118f4:	bl	ecf0 <memchr>
   118f8:	ldr	r2, [sp, #16]
   118fa:	cbnz	r0, 11934 <_vfiprintf_r+0x110>
   118fc:	lsls	r1, r2, #27
   118fe:	itt	mi
   11900:	movmi	r3, #32
   11902:	strbmi.w	r3, [sp, #83]	; 0x53
   11906:	lsls	r3, r2, #28
   11908:	itt	mi
   1190a:	movmi	r3, #43	; 0x2b
   1190c:	strbmi.w	r3, [sp, #83]	; 0x53
   11910:	ldrb.w	r3, [sl]
   11914:	cmp	r3, #42	; 0x2a
   11916:	beq.n	11944 <_vfiprintf_r+0x120>
   11918:	ldr	r2, [sp, #28]
   1191a:	mov	r4, sl
   1191c:	movs	r0, #0
   1191e:	mov.w	ip, #10
   11922:	mov	r1, r4
   11924:	ldrb.w	r3, [r1], #1
   11928:	subs	r3, #48	; 0x30
   1192a:	cmp	r3, #9
   1192c:	bls.n	119ca <_vfiprintf_r+0x1a6>
   1192e:	cbz	r0, 1195e <_vfiprintf_r+0x13a>
   11930:	str	r2, [sp, #28]
   11932:	b.n	1195e <_vfiprintf_r+0x13a>
   11934:	sub.w	r3, r0, r8
   11938:	lsl.w	r3, r9, r3
   1193c:	orrs	r3, r2
   1193e:	str	r3, [sp, #16]
   11940:	mov	sl, r4
   11942:	b.n	118ea <_vfiprintf_r+0xc6>
   11944:	ldr	r3, [sp, #12]
   11946:	adds	r1, r3, #4
   11948:	ldr	r3, [r3, #0]
   1194a:	str	r1, [sp, #12]
   1194c:	cmp	r3, #0
   1194e:	ittet	lt
   11950:	neglt	r3, r3
   11952:	orrlt.w	r2, r2, #2
   11956:	strge	r3, [sp, #28]
   11958:	strlt	r3, [sp, #28]
   1195a:	it	lt
   1195c:	strlt	r2, [sp, #16]
   1195e:	ldrb	r3, [r4, #0]
   11960:	cmp	r3, #46	; 0x2e
   11962:	bne.n	1197e <_vfiprintf_r+0x15a>
   11964:	ldrb	r3, [r4, #1]
   11966:	cmp	r3, #42	; 0x2a
   11968:	bne.n	119d4 <_vfiprintf_r+0x1b0>
   1196a:	ldr	r3, [sp, #12]
   1196c:	adds	r2, r3, #4
   1196e:	ldr	r3, [r3, #0]
   11970:	str	r2, [sp, #12]
   11972:	cmp	r3, #0
   11974:	it	lt
   11976:	movlt.w	r3, #4294967295
   1197a:	adds	r4, #2
   1197c:	str	r3, [sp, #20]
   1197e:	ldr.w	sl, [pc, #212]	; 11a54 <_vfiprintf_r+0x230>
   11982:	ldrb	r1, [r4, #0]
   11984:	movs	r2, #3
   11986:	mov	r0, sl
   11988:	bl	ecf0 <memchr>
   1198c:	cbz	r0, 1199e <_vfiprintf_r+0x17a>
   1198e:	ldr	r3, [sp, #16]
   11990:	sub.w	r0, r0, sl
   11994:	movs	r2, #64	; 0x40
   11996:	lsls	r2, r0
   11998:	orrs	r3, r2
   1199a:	adds	r4, #1
   1199c:	str	r3, [sp, #16]
   1199e:	ldrb.w	r1, [r4], #1
   119a2:	ldr	r0, [pc, #164]	; (11a48 <_vfiprintf_r+0x224>)
   119a4:	strb.w	r1, [sp, #40]	; 0x28
   119a8:	movs	r2, #6
   119aa:	bl	ecf0 <memchr>
   119ae:	cmp	r0, #0
   119b0:	beq.n	11a32 <_vfiprintf_r+0x20e>
   119b2:	ldr	r3, [pc, #152]	; (11a4c <_vfiprintf_r+0x228>)
   119b4:	cbnz	r3, 119fe <_vfiprintf_r+0x1da>
   119b6:	ldr	r3, [sp, #12]
   119b8:	adds	r3, #7
   119ba:	bic.w	r3, r3, #7
   119be:	adds	r3, #8
   119c0:	str	r3, [sp, #12]
   119c2:	ldr	r3, [sp, #36]	; 0x24
   119c4:	add	r3, r7
   119c6:	str	r3, [sp, #36]	; 0x24
   119c8:	b.n	1189c <_vfiprintf_r+0x78>
   119ca:	mla	r2, ip, r2, r3
   119ce:	mov	r4, r1
   119d0:	movs	r0, #1
   119d2:	b.n	11922 <_vfiprintf_r+0xfe>
   119d4:	movs	r3, #0
   119d6:	adds	r4, #1
   119d8:	str	r3, [sp, #20]
   119da:	mov	r1, r3
   119dc:	mov.w	ip, #10
   119e0:	mov	r0, r4
   119e2:	ldrb.w	r2, [r0], #1
   119e6:	subs	r2, #48	; 0x30
   119e8:	cmp	r2, #9
   119ea:	bls.n	119f4 <_vfiprintf_r+0x1d0>
   119ec:	cmp	r3, #0
   119ee:	beq.n	1197e <_vfiprintf_r+0x15a>
   119f0:	str	r1, [sp, #20]
   119f2:	b.n	1197e <_vfiprintf_r+0x15a>
   119f4:	mla	r1, ip, r1, r2
   119f8:	mov	r4, r0
   119fa:	movs	r3, #1
   119fc:	b.n	119e0 <_vfiprintf_r+0x1bc>
   119fe:	add	r3, sp, #12
   11a00:	str	r3, [sp, #0]
   11a02:	mov	r2, r5
   11a04:	ldr	r3, [pc, #72]	; (11a50 <_vfiprintf_r+0x22c>)
   11a06:	add	r1, sp, #16
   11a08:	mov	r0, r6
   11a0a:	bl	dbd8 <_printf_float>
   11a0e:	mov	r7, r0
   11a10:	adds	r0, r7, #1
   11a12:	bne.n	119c2 <_vfiprintf_r+0x19e>
   11a14:	ldr	r3, [r5, #100]	; 0x64
   11a16:	lsls	r1, r3, #31
   11a18:	bmi.n	11a26 <_vfiprintf_r+0x202>
   11a1a:	ldrh	r3, [r5, #12]
   11a1c:	lsls	r2, r3, #22
   11a1e:	bmi.n	11a26 <_vfiprintf_r+0x202>
   11a20:	ldr	r0, [r5, #88]	; 0x58
   11a22:	bl	ecda <__retarget_lock_release_recursive>
   11a26:	ldrh	r3, [r5, #12]
   11a28:	lsls	r3, r3, #25
   11a2a:	bmi.w	11868 <_vfiprintf_r+0x44>
   11a2e:	ldr	r0, [sp, #36]	; 0x24
   11a30:	b.n	1186c <_vfiprintf_r+0x48>
   11a32:	add	r3, sp, #12
   11a34:	str	r3, [sp, #0]
   11a36:	mov	r2, r5
   11a38:	ldr	r3, [pc, #20]	; (11a50 <_vfiprintf_r+0x22c>)
   11a3a:	add	r1, sp, #16
   11a3c:	mov	r0, r6
   11a3e:	bl	e0e8 <_printf_i>
   11a42:	b.n	11a0e <_vfiprintf_r+0x1ea>
   11a44:	.word	0x20001421
   11a48:	.word	0x2000142b
   11a4c:	.word	0x0000dbd9
   11a50:	.word	0x000117ff
   11a54:	.word	0x20001427

00011a58 <__swbuf_r>:
   11a58:	push	{r3, r4, r5, r6, r7, lr}
   11a5a:	mov	r6, r1
   11a5c:	mov	r4, r2
   11a5e:	mov	r5, r0
   11a60:	cbz	r0, 11a6a <__swbuf_r+0x12>
   11a62:	ldr	r3, [r0, #32]
   11a64:	cbnz	r3, 11a6a <__swbuf_r+0x12>
   11a66:	bl	e828 <__sinit>
   11a6a:	ldr	r3, [r4, #24]
   11a6c:	str	r3, [r4, #8]
   11a6e:	ldrh	r3, [r4, #12]
   11a70:	lsls	r2, r3, #28
   11a72:	bpl.n	11ac0 <__swbuf_r+0x68>
   11a74:	ldr	r3, [r4, #16]
   11a76:	cbz	r3, 11ac0 <__swbuf_r+0x68>
   11a78:	ldr	r3, [r4, #0]
   11a7a:	ldr	r2, [r4, #16]
   11a7c:	subs	r0, r3, r2
   11a7e:	ldr	r3, [r4, #20]
   11a80:	uxtb	r6, r6
   11a82:	cmp	r3, r0
   11a84:	mov	r7, r6
   11a86:	bgt.n	11a92 <__swbuf_r+0x3a>
   11a88:	mov	r1, r4
   11a8a:	mov	r0, r5
   11a8c:	bl	11524 <_fflush_r>
   11a90:	cbnz	r0, 11acc <__swbuf_r+0x74>
   11a92:	ldr	r3, [r4, #8]
   11a94:	subs	r3, #1
   11a96:	str	r3, [r4, #8]
   11a98:	ldr	r3, [r4, #0]
   11a9a:	adds	r2, r3, #1
   11a9c:	str	r2, [r4, #0]
   11a9e:	strb	r6, [r3, #0]
   11aa0:	ldr	r2, [r4, #20]
   11aa2:	adds	r3, r0, #1
   11aa4:	cmp	r2, r3
   11aa6:	beq.n	11ab2 <__swbuf_r+0x5a>
   11aa8:	ldrh	r3, [r4, #12]
   11aaa:	lsls	r3, r3, #31
   11aac:	bpl.n	11abc <__swbuf_r+0x64>
   11aae:	cmp	r6, #10
   11ab0:	bne.n	11abc <__swbuf_r+0x64>
   11ab2:	mov	r1, r4
   11ab4:	mov	r0, r5
   11ab6:	bl	11524 <_fflush_r>
   11aba:	cbnz	r0, 11acc <__swbuf_r+0x74>
   11abc:	mov	r0, r7
   11abe:	pop	{r3, r4, r5, r6, r7, pc}
   11ac0:	mov	r1, r4
   11ac2:	mov	r0, r5
   11ac4:	bl	11ad4 <__swsetup_r>
   11ac8:	cmp	r0, #0
   11aca:	beq.n	11a78 <__swbuf_r+0x20>
   11acc:	mov.w	r7, #4294967295
   11ad0:	b.n	11abc <__swbuf_r+0x64>
	...

00011ad4 <__swsetup_r>:
   11ad4:	push	{r3, r4, r5, lr}
   11ad6:	ldr	r3, [pc, #168]	; (11b80 <__swsetup_r+0xac>)
   11ad8:	mov	r5, r0
   11ada:	ldr	r0, [r3, #0]
   11adc:	mov	r4, r1
   11ade:	cbz	r0, 11ae8 <__swsetup_r+0x14>
   11ae0:	ldr	r3, [r0, #32]
   11ae2:	cbnz	r3, 11ae8 <__swsetup_r+0x14>
   11ae4:	bl	e828 <__sinit>
   11ae8:	ldrh	r3, [r4, #12]
   11aea:	ldrsh.w	r2, [r4, #12]
   11aee:	lsls	r0, r3, #28
   11af0:	bmi.n	11b38 <__swsetup_r+0x64>
   11af2:	lsls	r1, r3, #27
   11af4:	bmi.n	11b06 <__swsetup_r+0x32>
   11af6:	movs	r3, #9
   11af8:	str	r3, [r5, #0]
   11afa:	orr.w	r3, r2, #64	; 0x40
   11afe:	strh	r3, [r4, #12]
   11b00:	mov.w	r0, #4294967295
   11b04:	b.n	11b70 <__swsetup_r+0x9c>
   11b06:	lsls	r0, r3, #29
   11b08:	bpl.n	11b30 <__swsetup_r+0x5c>
   11b0a:	ldr	r1, [r4, #52]	; 0x34
   11b0c:	cbz	r1, 11b20 <__swsetup_r+0x4c>
   11b0e:	add.w	r3, r4, #68	; 0x44
   11b12:	cmp	r1, r3
   11b14:	beq.n	11b1c <__swsetup_r+0x48>
   11b16:	mov	r0, r5
   11b18:	bl	f9a8 <_free_r>
   11b1c:	movs	r3, #0
   11b1e:	str	r3, [r4, #52]	; 0x34
   11b20:	ldrh	r3, [r4, #12]
   11b22:	bic.w	r3, r3, #36	; 0x24
   11b26:	strh	r3, [r4, #12]
   11b28:	movs	r3, #0
   11b2a:	str	r3, [r4, #4]
   11b2c:	ldr	r3, [r4, #16]
   11b2e:	str	r3, [r4, #0]
   11b30:	ldrh	r3, [r4, #12]
   11b32:	orr.w	r3, r3, #8
   11b36:	strh	r3, [r4, #12]
   11b38:	ldr	r3, [r4, #16]
   11b3a:	cbnz	r3, 11b50 <__swsetup_r+0x7c>
   11b3c:	ldrh	r3, [r4, #12]
   11b3e:	and.w	r3, r3, #640	; 0x280
   11b42:	cmp.w	r3, #512	; 0x200
   11b46:	beq.n	11b50 <__swsetup_r+0x7c>
   11b48:	mov	r1, r4
   11b4a:	mov	r0, r5
   11b4c:	bl	11bd0 <__smakebuf_r>
   11b50:	ldrh	r0, [r4, #12]
   11b52:	ldrsh.w	r2, [r4, #12]
   11b56:	ands.w	r3, r0, #1
   11b5a:	beq.n	11b72 <__swsetup_r+0x9e>
   11b5c:	movs	r3, #0
   11b5e:	str	r3, [r4, #8]
   11b60:	ldr	r3, [r4, #20]
   11b62:	negs	r3, r3
   11b64:	str	r3, [r4, #24]
   11b66:	ldr	r3, [r4, #16]
   11b68:	cbnz	r3, 11b7c <__swsetup_r+0xa8>
   11b6a:	ands.w	r0, r0, #128	; 0x80
   11b6e:	bne.n	11afa <__swsetup_r+0x26>
   11b70:	pop	{r3, r4, r5, pc}
   11b72:	lsls	r1, r0, #30
   11b74:	it	pl
   11b76:	ldrpl	r3, [r4, #20]
   11b78:	str	r3, [r4, #8]
   11b7a:	b.n	11b66 <__swsetup_r+0x92>
   11b7c:	movs	r0, #0
   11b7e:	b.n	11b70 <__swsetup_r+0x9c>
   11b80:	.word	0x200022d0

00011b84 <__swhatbuf_r>:
   11b84:	push	{r4, r5, r6, lr}
   11b86:	mov	r4, r1
   11b88:	ldrsh.w	r1, [r1, #14]
   11b8c:	cmp	r1, #0
   11b8e:	sub	sp, #88	; 0x58
   11b90:	mov	r5, r2
   11b92:	mov	r6, r3
   11b94:	bge.n	11bb2 <__swhatbuf_r+0x2e>
   11b96:	ldrh	r3, [r4, #12]
   11b98:	tst.w	r3, #128	; 0x80
   11b9c:	mov.w	r1, #0
   11ba0:	ite	eq
   11ba2:	moveq.w	r3, #1024	; 0x400
   11ba6:	movne	r3, #64	; 0x40
   11ba8:	movs	r0, #0
   11baa:	str	r1, [r6, #0]
   11bac:	str	r3, [r5, #0]
   11bae:	add	sp, #88	; 0x58
   11bb0:	pop	{r4, r5, r6, pc}
   11bb2:	mov	r2, sp
   11bb4:	bl	11c48 <_fstat_r>
   11bb8:	cmp	r0, #0
   11bba:	blt.n	11b96 <__swhatbuf_r+0x12>
   11bbc:	ldr	r1, [sp, #4]
   11bbe:	and.w	r1, r1, #61440	; 0xf000
   11bc2:	sub.w	r3, r1, #8192	; 0x2000
   11bc6:	negs	r1, r3
   11bc8:	adcs	r1, r3
   11bca:	mov.w	r3, #1024	; 0x400
   11bce:	b.n	11ba8 <__swhatbuf_r+0x24>

00011bd0 <__smakebuf_r>:
   11bd0:	ldrh	r3, [r1, #12]
   11bd2:	push	{r0, r1, r4, r5, r6, lr}
   11bd4:	lsls	r5, r3, #30
   11bd6:	mov	r6, r0
   11bd8:	mov	r4, r1
   11bda:	bpl.n	11bec <__smakebuf_r+0x1c>
   11bdc:	add.w	r3, r4, #71	; 0x47
   11be0:	str	r3, [r4, #0]
   11be2:	str	r3, [r4, #16]
   11be4:	movs	r3, #1
   11be6:	str	r3, [r4, #20]
   11be8:	add	sp, #8
   11bea:	pop	{r4, r5, r6, pc}
   11bec:	add	r3, sp, #4
   11bee:	mov	r2, sp
   11bf0:	bl	11b84 <__swhatbuf_r>
   11bf4:	ldr	r1, [sp, #0]
   11bf6:	mov	r5, r0
   11bf8:	mov	r0, r6
   11bfa:	bl	cc78 <_malloc_r>
   11bfe:	cbnz	r0, 11c14 <__smakebuf_r+0x44>
   11c00:	ldrsh.w	r3, [r4, #12]
   11c04:	lsls	r2, r3, #22
   11c06:	bmi.n	11be8 <__smakebuf_r+0x18>
   11c08:	bic.w	r3, r3, #3
   11c0c:	orr.w	r3, r3, #2
   11c10:	strh	r3, [r4, #12]
   11c12:	b.n	11bdc <__smakebuf_r+0xc>
   11c14:	ldrh	r3, [r4, #12]
   11c16:	str	r0, [r4, #0]
   11c18:	orr.w	r3, r3, #128	; 0x80
   11c1c:	strh	r3, [r4, #12]
   11c1e:	ldr	r3, [sp, #0]
   11c20:	str	r3, [r4, #20]
   11c22:	ldr	r3, [sp, #4]
   11c24:	str	r0, [r4, #16]
   11c26:	cbz	r3, 11c40 <__smakebuf_r+0x70>
   11c28:	ldrsh.w	r1, [r4, #14]
   11c2c:	mov	r0, r6
   11c2e:	bl	11c6c <_isatty_r>
   11c32:	cbz	r0, 11c40 <__smakebuf_r+0x70>
   11c34:	ldrh	r3, [r4, #12]
   11c36:	bic.w	r3, r3, #3
   11c3a:	orr.w	r3, r3, #1
   11c3e:	strh	r3, [r4, #12]
   11c40:	ldrh	r3, [r4, #12]
   11c42:	orrs	r5, r3
   11c44:	strh	r5, [r4, #12]
   11c46:	b.n	11be8 <__smakebuf_r+0x18>

00011c48 <_fstat_r>:
   11c48:	push	{r3, r4, r5, lr}
   11c4a:	ldr	r5, [pc, #28]	; (11c68 <_fstat_r+0x20>)
   11c4c:	movs	r3, #0
   11c4e:	mov	r4, r0
   11c50:	mov	r0, r1
   11c52:	mov	r1, r2
   11c54:	str	r3, [r5, #0]
   11c56:	bl	b942 <_fstat>
   11c5a:	adds	r3, r0, #1
   11c5c:	bne.n	11c64 <_fstat_r+0x1c>
   11c5e:	ldr	r3, [r5, #0]
   11c60:	cbz	r3, 11c64 <_fstat_r+0x1c>
   11c62:	str	r3, [r4, #0]
   11c64:	pop	{r3, r4, r5, pc}
   11c66:	nop
   11c68:	.word	0x20014ba4

00011c6c <_isatty_r>:
   11c6c:	push	{r3, r4, r5, lr}
   11c6e:	ldr	r5, [pc, #24]	; (11c88 <_isatty_r+0x1c>)
   11c70:	movs	r3, #0
   11c72:	mov	r4, r0
   11c74:	mov	r0, r1
   11c76:	str	r3, [r5, #0]
   11c78:	bl	b94c <_isatty>
   11c7c:	adds	r3, r0, #1
   11c7e:	bne.n	11c86 <_isatty_r+0x1a>
   11c80:	ldr	r3, [r5, #0]
   11c82:	cbz	r3, 11c86 <_isatty_r+0x1a>
   11c84:	str	r3, [r4, #0]
   11c86:	pop	{r3, r4, r5, pc}
   11c88:	.word	0x20014ba4

00011c8c <__aeabi_drsub>:
   11c8c:	eor.w	r1, r1, #2147483648	; 0x80000000
   11c90:	b.n	11c98 <__adddf3>
   11c92:	nop

00011c94 <__aeabi_dsub>:
   11c94:	eor.w	r3, r3, #2147483648	; 0x80000000

00011c98 <__adddf3>:
   11c98:	push	{r4, r5, lr}
   11c9a:	mov.w	r4, r1, lsl #1
   11c9e:	mov.w	r5, r3, lsl #1
   11ca2:	teq	r4, r5
   11ca6:	it	eq
   11ca8:	teqeq	r0, r2
   11cac:	itttt	ne
   11cae:	orrsne.w	ip, r4, r0
   11cb2:	orrsne.w	ip, r5, r2
   11cb6:	mvnsne.w	ip, r4, asr #21
   11cba:	mvnsne.w	ip, r5, asr #21
   11cbe:	beq.w	11e86 <__adddf3+0x1ee>
   11cc2:	mov.w	r4, r4, lsr #21
   11cc6:	rsbs	r5, r4, r5, lsr #21
   11cca:	it	lt
   11ccc:	neglt	r5, r5
   11cce:	ble.n	11cea <__adddf3+0x52>
   11cd0:	add	r4, r5
   11cd2:	eor.w	r2, r0, r2
   11cd6:	eor.w	r3, r1, r3
   11cda:	eor.w	r0, r2, r0
   11cde:	eor.w	r1, r3, r1
   11ce2:	eor.w	r2, r0, r2
   11ce6:	eor.w	r3, r1, r3
   11cea:	cmp	r5, #54	; 0x36
   11cec:	it	hi
   11cee:	pophi	{r4, r5, pc}
   11cf0:	tst.w	r1, #2147483648	; 0x80000000
   11cf4:	mov.w	r1, r1, lsl #12
   11cf8:	mov.w	ip, #1048576	; 0x100000
   11cfc:	orr.w	r1, ip, r1, lsr #12
   11d00:	beq.n	11d08 <__adddf3+0x70>
   11d02:	negs	r0, r0
   11d04:	sbc.w	r1, r1, r1, lsl #1
   11d08:	tst.w	r3, #2147483648	; 0x80000000
   11d0c:	mov.w	r3, r3, lsl #12
   11d10:	orr.w	r3, ip, r3, lsr #12
   11d14:	beq.n	11d1c <__adddf3+0x84>
   11d16:	negs	r2, r2
   11d18:	sbc.w	r3, r3, r3, lsl #1
   11d1c:	teq	r4, r5
   11d20:	beq.w	11e72 <__adddf3+0x1da>
   11d24:	sub.w	r4, r4, #1
   11d28:	rsbs	lr, r5, #32
   11d2c:	blt.n	11d4a <__adddf3+0xb2>
   11d2e:	lsl.w	ip, r2, lr
   11d32:	lsr.w	r2, r2, r5
   11d36:	adds	r0, r0, r2
   11d38:	adc.w	r1, r1, #0
   11d3c:	lsl.w	r2, r3, lr
   11d40:	adds	r0, r0, r2
   11d42:	asr.w	r3, r3, r5
   11d46:	adcs	r1, r3
   11d48:	b.n	11d68 <__adddf3+0xd0>
   11d4a:	sub.w	r5, r5, #32
   11d4e:	add.w	lr, lr, #32
   11d52:	cmp	r2, #1
   11d54:	lsl.w	ip, r3, lr
   11d58:	it	cs
   11d5a:	orrcs.w	ip, ip, #2
   11d5e:	asr.w	r3, r3, r5
   11d62:	adds	r0, r0, r3
   11d64:	adcs.w	r1, r1, r3, asr #31
   11d68:	and.w	r5, r1, #2147483648	; 0x80000000
   11d6c:	bpl.n	11d7e <__adddf3+0xe6>
   11d6e:	mov.w	lr, #0
   11d72:	rsbs	ip, ip, #0
   11d76:	sbcs.w	r0, lr, r0
   11d7a:	sbc.w	r1, lr, r1
   11d7e:	cmp.w	r1, #1048576	; 0x100000
   11d82:	bcc.n	11dbc <__adddf3+0x124>
   11d84:	cmp.w	r1, #2097152	; 0x200000
   11d88:	bcc.n	11da4 <__adddf3+0x10c>
   11d8a:	lsrs	r1, r1, #1
   11d8c:	movs.w	r0, r0, rrx
   11d90:	mov.w	ip, ip, rrx
   11d94:	add.w	r4, r4, #1
   11d98:	mov.w	r2, r4, lsl #21
   11d9c:	cmn.w	r2, #4194304	; 0x400000
   11da0:	bcs.w	11ed8 <__adddf3+0x240>
   11da4:	cmp.w	ip, #2147483648	; 0x80000000
   11da8:	it	eq
   11daa:	movseq.w	ip, r0, lsr #1
   11dae:	adcs.w	r0, r0, #0
   11db2:	adc.w	r1, r1, r4, lsl #20
   11db6:	orr.w	r1, r1, r5
   11dba:	pop	{r4, r5, pc}
   11dbc:	movs.w	ip, ip, lsl #1
   11dc0:	adcs	r0, r0
   11dc2:	adc.w	r1, r1, r1
   11dc6:	subs	r4, #1
   11dc8:	it	cs
   11dca:	cmpcs.w	r1, #1048576	; 0x100000
   11dce:	bcs.n	11da4 <__adddf3+0x10c>
   11dd0:	teq	r1, #0
   11dd4:	itt	eq
   11dd6:	moveq	r1, r0
   11dd8:	moveq	r0, #0
   11dda:	clz	r3, r1
   11dde:	it	eq
   11de0:	addeq	r3, #32
   11de2:	sub.w	r3, r3, #11
   11de6:	subs.w	r2, r3, #32
   11dea:	bge.n	11e06 <__adddf3+0x16e>
   11dec:	adds	r2, #12
   11dee:	ble.n	11e02 <__adddf3+0x16a>
   11df0:	add.w	ip, r2, #20
   11df4:	rsb	r2, r2, #12
   11df8:	lsl.w	r0, r1, ip
   11dfc:	lsr.w	r1, r1, r2
   11e00:	b.n	11e1c <__adddf3+0x184>
   11e02:	add.w	r2, r2, #20
   11e06:	it	le
   11e08:	rsble	ip, r2, #32
   11e0c:	lsl.w	r1, r1, r2
   11e10:	lsr.w	ip, r0, ip
   11e14:	itt	le
   11e16:	orrle.w	r1, r1, ip
   11e1a:	lslle	r0, r2
   11e1c:	subs	r4, r4, r3
   11e1e:	ittt	ge
   11e20:	addge.w	r1, r1, r4, lsl #20
   11e24:	orrge	r1, r5
   11e26:	popge	{r4, r5, pc}
   11e28:	mvn.w	r4, r4
   11e2c:	subs	r4, #31
   11e2e:	bge.n	11e6a <__adddf3+0x1d2>
   11e30:	adds	r4, #12
   11e32:	bgt.n	11e52 <__adddf3+0x1ba>
   11e34:	add.w	r4, r4, #20
   11e38:	rsb	r2, r4, #32
   11e3c:	lsr.w	r0, r0, r4
   11e40:	lsl.w	r3, r1, r2
   11e44:	orr.w	r0, r0, r3
   11e48:	lsr.w	r3, r1, r4
   11e4c:	orr.w	r1, r5, r3
   11e50:	pop	{r4, r5, pc}
   11e52:	rsb	r4, r4, #12
   11e56:	rsb	r2, r4, #32
   11e5a:	lsr.w	r0, r0, r2
   11e5e:	lsl.w	r3, r1, r4
   11e62:	orr.w	r0, r0, r3
   11e66:	mov	r1, r5
   11e68:	pop	{r4, r5, pc}
   11e6a:	lsr.w	r0, r1, r4
   11e6e:	mov	r1, r5
   11e70:	pop	{r4, r5, pc}
   11e72:	teq	r4, #0
   11e76:	eor.w	r3, r3, #1048576	; 0x100000
   11e7a:	itte	eq
   11e7c:	eoreq.w	r1, r1, #1048576	; 0x100000
   11e80:	addeq	r4, #1
   11e82:	subne	r5, #1
   11e84:	b.n	11d24 <__adddf3+0x8c>
   11e86:	mvns.w	ip, r4, asr #21
   11e8a:	it	ne
   11e8c:	mvnsne.w	ip, r5, asr #21
   11e90:	beq.n	11ee6 <__adddf3+0x24e>
   11e92:	teq	r4, r5
   11e96:	it	eq
   11e98:	teqeq	r0, r2
   11e9c:	beq.n	11eaa <__adddf3+0x212>
   11e9e:	orrs.w	ip, r4, r0
   11ea2:	itt	eq
   11ea4:	moveq	r1, r3
   11ea6:	moveq	r0, r2
   11ea8:	pop	{r4, r5, pc}
   11eaa:	teq	r1, r3
   11eae:	ittt	ne
   11eb0:	movne	r1, #0
   11eb2:	movne	r0, #0
   11eb4:	popne	{r4, r5, pc}
   11eb6:	movs.w	ip, r4, lsr #21
   11eba:	bne.n	11ec8 <__adddf3+0x230>
   11ebc:	lsls	r0, r0, #1
   11ebe:	adcs	r1, r1
   11ec0:	it	cs
   11ec2:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   11ec6:	pop	{r4, r5, pc}
   11ec8:	adds.w	r4, r4, #4194304	; 0x400000
   11ecc:	itt	cc
   11ece:	addcc.w	r1, r1, #1048576	; 0x100000
   11ed2:	popcc	{r4, r5, pc}
   11ed4:	and.w	r5, r1, #2147483648	; 0x80000000
   11ed8:	orr.w	r1, r5, #2130706432	; 0x7f000000
   11edc:	orr.w	r1, r1, #15728640	; 0xf00000
   11ee0:	mov.w	r0, #0
   11ee4:	pop	{r4, r5, pc}
   11ee6:	mvns.w	ip, r4, asr #21
   11eea:	itte	ne
   11eec:	movne	r1, r3
   11eee:	movne	r0, r2
   11ef0:	mvnseq.w	ip, r5, asr #21
   11ef4:	itt	ne
   11ef6:	movne	r3, r1
   11ef8:	movne	r2, r0
   11efa:	orrs.w	r4, r0, r1, lsl #12
   11efe:	itte	eq
   11f00:	orrseq.w	r5, r2, r3, lsl #12
   11f04:	teqeq	r1, r3
   11f08:	orrne.w	r1, r1, #524288	; 0x80000
   11f0c:	pop	{r4, r5, pc}
   11f0e:	nop

00011f10 <__aeabi_ui2d>:
   11f10:	teq	r0, #0
   11f14:	itt	eq
   11f16:	moveq	r1, #0
   11f18:	bxeq	lr
   11f1a:	push	{r4, r5, lr}
   11f1c:	mov.w	r4, #1024	; 0x400
   11f20:	add.w	r4, r4, #50	; 0x32
   11f24:	mov.w	r5, #0
   11f28:	mov.w	r1, #0
   11f2c:	b.n	11dd0 <__adddf3+0x138>
   11f2e:	nop

00011f30 <__aeabi_i2d>:
   11f30:	teq	r0, #0
   11f34:	itt	eq
   11f36:	moveq	r1, #0
   11f38:	bxeq	lr
   11f3a:	push	{r4, r5, lr}
   11f3c:	mov.w	r4, #1024	; 0x400
   11f40:	add.w	r4, r4, #50	; 0x32
   11f44:	ands.w	r5, r0, #2147483648	; 0x80000000
   11f48:	it	mi
   11f4a:	negmi	r0, r0
   11f4c:	mov.w	r1, #0
   11f50:	b.n	11dd0 <__adddf3+0x138>
   11f52:	nop

00011f54 <__aeabi_f2d>:
   11f54:	lsls	r2, r0, #1
   11f56:	mov.w	r1, r2, asr #3
   11f5a:	mov.w	r1, r1, rrx
   11f5e:	mov.w	r0, r2, lsl #28
   11f62:	itttt	ne
   11f64:	andsne.w	r3, r2, #4278190080	; 0xff000000
   11f68:	teqne	r3, #4278190080	; 0xff000000
   11f6c:	eorne.w	r1, r1, #939524096	; 0x38000000
   11f70:	bxne	lr
   11f72:	bics.w	r2, r2, #4278190080	; 0xff000000
   11f76:	it	eq
   11f78:	bxeq	lr
   11f7a:	teq	r3, #4278190080	; 0xff000000
   11f7e:	itt	eq
   11f80:	orreq.w	r1, r1, #524288	; 0x80000
   11f84:	bxeq	lr
   11f86:	push	{r4, r5, lr}
   11f88:	mov.w	r4, #896	; 0x380
   11f8c:	and.w	r5, r1, #2147483648	; 0x80000000
   11f90:	bic.w	r1, r1, #2147483648	; 0x80000000
   11f94:	b.n	11dd0 <__adddf3+0x138>
   11f96:	nop

00011f98 <__aeabi_ul2d>:
   11f98:	orrs.w	r2, r0, r1
   11f9c:	it	eq
   11f9e:	bxeq	lr
   11fa0:	push	{r4, r5, lr}
   11fa2:	mov.w	r5, #0
   11fa6:	b.n	11fbe <__aeabi_l2d+0x16>

00011fa8 <__aeabi_l2d>:
   11fa8:	orrs.w	r2, r0, r1
   11fac:	it	eq
   11fae:	bxeq	lr
   11fb0:	push	{r4, r5, lr}
   11fb2:	ands.w	r5, r1, #2147483648	; 0x80000000
   11fb6:	bpl.n	11fbe <__aeabi_l2d+0x16>
   11fb8:	negs	r0, r0
   11fba:	sbc.w	r1, r1, r1, lsl #1
   11fbe:	mov.w	r4, #1024	; 0x400
   11fc2:	add.w	r4, r4, #50	; 0x32
   11fc6:	movs.w	ip, r1, lsr #22
   11fca:	beq.w	11d7e <__adddf3+0xe6>
   11fce:	mov.w	r2, #3
   11fd2:	movs.w	ip, ip, lsr #3
   11fd6:	it	ne
   11fd8:	addne	r2, #3
   11fda:	movs.w	ip, ip, lsr #3
   11fde:	it	ne
   11fe0:	addne	r2, #3
   11fe2:	add.w	r2, r2, ip, lsr #3
   11fe6:	rsb	r3, r2, #32
   11fea:	lsl.w	ip, r0, r3
   11fee:	lsr.w	r0, r0, r2
   11ff2:	lsl.w	lr, r1, r3
   11ff6:	orr.w	r0, r0, lr
   11ffa:	lsr.w	r1, r1, r2
   11ffe:	add	r4, r2
   12000:	b.n	11d7e <__adddf3+0xe6>
   12002:	nop

00012004 <__aeabi_d2lz>:
   12004:	push	{r3, lr}
   12006:	mov	r2, r0
   12008:	mov	r3, r1
   1200a:	vmov	d7, r2, r3
   1200e:	vcmpe.f64	d7, #0.0
   12012:	vmrs	APSR_nzcv, fpscr
   12016:	bmi.n	12020 <__aeabi_d2lz+0x1c>
   12018:	ldmia.w	sp!, {r3, lr}
   1201c:	b.w	12038 <__aeabi_d2ulz>
   12020:	vneg.f64	d7, d7
   12024:	vmov	r0, r1, d7
   12028:	bl	12038 <__aeabi_d2ulz>
   1202c:	negs	r0, r0
   1202e:	sbc.w	r1, r1, r1, lsl #1
   12032:	pop	{r3, pc}
   12034:	movs	r0, r0
	...

00012038 <__aeabi_d2ulz>:
   12038:	vldr	d6, [pc, #44]	; 12068 <__aeabi_d2ulz+0x30>
   1203c:	vmov	d7, r0, r1
   12040:	vldr	d5, [pc, #44]	; 12070 <__aeabi_d2ulz+0x38>
   12044:	vmul.f64	d6, d7, d6
   12048:	vcvt.u32.f64	s12, d6
   1204c:	vcvt.f64.u32	d4, s12
   12050:	vfms.f64	d7, d4, d5
   12054:	vcvt.u32.f64	s15, d7
   12058:	vmov	r1, s12
   1205c:	vmov	r0, s15
   12060:	bx	lr
   12062:	nop
   12064:	nop.w
   12068:	.word	0x00000000
   1206c:	.word	0x3df00000
   12070:	.word	0x00000000
   12074:	.word	0x41f00000

00012078 <___init_veneer>:
   12078:	ldr.w	pc, [pc]	; 1207c <___init_veneer+0x4>
   1207c:	.word	0x6000241d

00012080 <___Z14set_audioClockilm_veneer>:
   12080:	ldr.w	pc, [pc]	; 12084 <___Z14set_audioClockilm_veneer+0x4>
   12084:	.word	0x600024d1

00012088 <___ZN7TwoWire5beginEv_veneer>:
   12088:	ldr.w	pc, [pc]	; 1208c <___ZN7TwoWire5beginEv_veneer+0x4>
   1208c:	.word	0x6000176d

00012090 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   12090:	ldr.w	pc, [pc]	; 12094 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   12094:	.word	0x60001f1d

00012098 <___ZN16CrashReportClasscvbEv_veneer>:
   12098:	ldr.w	pc, [pc]	; 1209c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1209c:	.word	0x600023c1

000120a0 <___reboot_Teensyduino__veneer>:
   120a0:	ldr.w	pc, [pc]	; 120a4 <___reboot_Teensyduino__veneer+0x4>
   120a4:	.word	0x60001899

000120a8 <__usb_init_veneer>:
   120a8:	ldr.w	pc, [pc]	; 120ac <__usb_init_veneer+0x4>
   120ac:	.word	0x600017b5

Disassembly of section .fini:

000120b0 <_fini>:
   120b0:	push	{r3, r4, r5, r6, r7, lr}
   120b2:	nop
